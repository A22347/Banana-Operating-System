
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 07 6c 00 00       	call   c0006c27 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 b7 01 00       	call   c001b75a <_init>
c0000025:	c3                   	ret    
c0000026:	bb f6 c1 01 c0       	mov    ebx,0xc001c1f6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 c2 01 c0    	cmp    ebx,0xc001c200
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 ec 01 c0       	mov    eax,0xc001ecd8
c0000049:	3d d8 ec 01 c0       	cmp    eax,0xc001ecd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 ec 01 c0       	push   0xc001ecd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 ec 01 c0       	mov    eax,0xc001ecd8
c0000075:	2d d8 ec 01 c0       	sub    eax,0xc001ecd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 ec 01 c0       	push   0xc001ecd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 ee 01 c0 00 	cmp    BYTE PTR ds:0xc001ee60,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 c2 01 c0       	mov    ebx,0xc001c208
c00000bb:	81 eb 04 c2 01 c0    	sub    ebx,0xc001c204
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 c2 01 c0       	mov    esi,0xc001c204
c00000ca:	a1 64 ee 01 c0       	mov    eax,ds:0xc001ee64
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 ee 01 c0       	mov    ds:0xc001ee64,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 ee 01 c0       	mov    eax,ds:0xc001ee64
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 ec 01 c0       	push   0xc001ecd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 ee 01 c0 01 	mov    BYTE PTR ds:0xc001ee60,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 ee 01 c0       	push   0xc001ee68
c000012c:	68 d8 ec 01 c0       	push   0xc001ecd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 64 1d 01 00       	call   c0012034 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 08 94 00 00       	call   c00096f0 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 42 1d 01 00       	call   c0012034 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 13 22 01 00       	call   c0012524 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 62 28 01 00       	call   c0012b7c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 f2 01 c0 	lgdtd  ds:0xc001f2b0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 80 ee 01 c0       	mov    ds:0xc001ee80,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 80 ee 01 c0    	mov    DWORD PTR ds:0xc001ee80,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 80 ee 01 c0    	mov    ebx,DWORD PTR ds:0xc001ee80
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 c2 01 c0 02 	test   BYTE PTR [edx-0x3ffe3de0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 20 c2 01 c0 01 	test   BYTE PTR [edx-0x3ffe3de0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 20 c2 01 c0 08 	test   BYTE PTR [edx-0x3ffe3de0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 20 c2 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3de0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 20 c2 01 c0 01 	test   BYTE PTR [edx-0x3ffe3de0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d a0 ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001eea0
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d a0 ee 01 c0    	mov    DWORD PTR ds:0xc001eea0,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 a4 ee 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe115c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 a4 ee 01 c0 	mov    DWORD PTR [eax*4-0x3ffe115c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d a0 ee 01 c0    	mov    DWORD PTR ds:0xc001eea0,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 cc ee 01 c0    	cmp    DWORD PTR ds:0xc001eecc,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d dc ee 01 c0    	mov    ecx,DWORD PTR ds:0xc001eedc
c0000d5d:	c7 42 0c d4 ee 01 c0 	mov    DWORD PTR [edx+0xc],0xc001eed4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 dc ee 01 c0    	mov    DWORD PTR ds:0xc001eedc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 cc ee 01 c0    	mov    DWORD PTR ds:0xc001eecc,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 a0 ee 01 c0 02 	test   BYTE PTR ds:0xc001eea0,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fa 5b 00 00       	call   c0006a38 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 3c 5b 00 00       	call   c0006a38 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 26 5b 00 00       	call   c0006a38 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 02 5b 00 00       	call   c0006a38 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d a0 ee 01 c0    	mov    edi,DWORD PTR ds:0xc001eea0
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 a4 ee 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe115c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 a4 ee 01 c0 	mov    DWORD PTR [edx*4-0x3ffe115c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 d4 ee 01 c0 	lea    edx,[eax*8-0x3ffe112c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d e0 ee 01 c0    	mov    ebx,DWORD PTR ds:0xc001eee0
c00010df:	81 fb d4 ee 01 c0    	cmp    ebx,0xc001eed4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d d4 ee 01 c0       	cmp    eax,0xc001eed4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d d0 ee 01 c0    	cmp    DWORD PTR ds:0xc001eed0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 dc ee 01 c0       	mov    ds:0xc001eedc,eax
c000111b:	a3 e0 ee 01 c0       	mov    ds:0xc001eee0,eax
c0001120:	a3 d0 ee 01 c0       	mov    ds:0xc001eed0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 d4 ee 01 c0 	mov    DWORD PTR [eax+0x8],0xc001eed4
c000112e:	c7 40 0c d4 ee 01 c0 	mov    DWORD PTR [eax+0xc],0xc001eed4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 e0 ee 01 c0       	mov    ds:0xc001eee0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 d4 ee 01 c0 	mov    DWORD PTR [eax+0x8],0xc001eed4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 98 ee 01 c0 	lea    ebp,[edx*4-0x3ffe1168]
c000117f:	8b 14 95 a0 ee 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1160]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 a0 ee 01 c0 	lea    ecx,[edx*4-0x3ffe1160]
c000119a:	8b 14 95 a0 ee 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1160]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd d4 f1 01 c0 	or     DWORD PTR [edi*4-0x3ffe0e2c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 d4 ee 01 c0 	lea    eax,[eax*8-0x3ffe112c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d dc ee 01 c0    	mov    DWORD PTR ds:0xc001eedc,ecx
c0001254:	89 0d e0 ee 01 c0    	mov    DWORD PTR ds:0xc001eee0,ecx
c000125a:	c7 41 08 d4 ee 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001eed4
c0001261:	c7 41 0c d4 ee 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001eed4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd cc ee 01 c0 	lea    edx,[ecx*8-0x3ffe1134]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d d4 f1 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0e2c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d d4 f1 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0e2c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 cc ee 01 c0 	lea    edx,[eax*4-0x3ffe1134]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d d4 f1 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0e2c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d dc ee 01 c0    	mov    DWORD PTR ds:0xc001eedc,edi
c0001327:	89 3d e0 ee 01 c0    	mov    DWORD PTR ds:0xc001eee0,edi
c000132d:	c7 47 08 d4 ee 01 c0 	mov    DWORD PTR [edi+0x8],0xc001eed4
c0001334:	c7 47 0c d4 ee 01 c0 	mov    DWORD PTR [edi+0xc],0xc001eed4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d d0 ee 01 c0    	mov    DWORD PTR ds:0xc001eed0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 cc ee 01 c0       	mov    eax,ds:0xc001eecc
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d cc ee 01 c0    	mov    DWORD PTR ds:0xc001eecc,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba a0 ee 01 c0       	mov    edx,0xc001eea0
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d a0 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001eea0,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d f4 f1 01 c0    	mov    ebx,DWORD PTR ds:0xc001f1f4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 f4 f1 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f1f4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d f4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1f4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 cc ee 01 c0    	cmp    DWORD PTR ds:0xc001eecc,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d cc ee 01 c0    	mov    DWORD PTR ds:0xc001eecc,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d a0 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001eea0,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 fc f1 01 c0    	push   DWORD PTR ds:0xc001f1fc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d a0 ee 01 c0 00 	cmp    DWORD PTR ds:0xc001eea0,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 fc f1 01 c0       	mov    eax,ds:0xc001f1fc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d cc ee 01 c0 00 	cmp    DWORD PTR ds:0xc001eecc,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 cc ee 01 c0       	mov    eax,ds:0xc001eecc
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 a4 ee 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe115c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 d4 ee 01 c0       	mov    eax,0xc001eed4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d cc f1 01 c0       	cmp    eax,0xc001f1cc
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 08 f2 01 c0       	mov    eax,ds:0xc001f208
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 f0 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1f0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 04 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f204
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 14 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f214
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 a0 ee 01 c0       	mov    eax,0xc001eea0
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 24 c3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3cdc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 a0 ee 01 c0       	mov    eax,ds:0xc001eea0
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 a0 ee 01 c0       	mov    ds:0xc001eea0,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d e8 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d ec f1 01 c0    	mov    DWORD PTR ds:0xc001f1ec,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 f4 f1 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f1f4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 c0 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd740]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 8d 42 01 00       	jmp    c0015da4 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 c0 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd740]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 bb 42 01 00       	jmp    c0015de8 <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 c0 28 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd740]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 e0 42 01 00       	jmp    c0015e2c <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 80 c4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3b80]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 80 c4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3b80]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 88 e2 01 c0       	mov    edx,0xc001e288
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba 3c c3 01 c0       	mov    edx,0xc001c33c
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 40 f2 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0dc0]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 20 f2 01 c0    	mov    ax,ds:0xc001f220
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 20 f2 01 c0    	mov    ds:0xc001f220,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 42 c3 01 c0       	mov    eax,0xc001c342
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad 00 c4 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3c00]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 4b c3 01 c0       	mov    eax,0xc001c34b
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 80 c4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3b80]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 40 f2 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0dc0]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 40 f2 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0dc0],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 d0 c3 01 c0       	mov    eax,0xc001c3d0
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 40 f2 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0dc0]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb c0 c3 01 c0       	mov    ebx,0xc001c3c0
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba a0 c3 01 c0       	mov    edx,0xc001c3a0
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba b0 c3 01 c0       	mov    edx,0xc001c3b0
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba 52 c3 01 c0       	mov    edx,0xc001c352
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba 5e c3 01 c0       	mov    edx,0xc001c35e
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba 72 c3 01 c0       	mov    edx,0xc001c372
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 ba 12 00 00       	call   c0006b61 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 b2 12 00 00       	call   c0006b71 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c a0 c7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001c7a0
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 a0 c7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c7a0
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 a0 c5 01 c0       	mov    eax,0xc001c5a0
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 e0 c4 01 c0       	mov    eax,0xc001c4e0
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 a0 c4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3b60]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 e0 0f 00 00       	jmp    c0006b61 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 fb 0f 00 00       	jmp    c0006b81 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0005b97:	48                   	dec    eax
c0005b98:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0005ba8:	ff 05 64 27 02 c0    	inc    DWORD PTR ds:0xc0022764
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d 60 27 02 c0 00 	cmp    DWORD PTR ds:0xc0022760,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c0005bd2:	e8 bd cb 00 00       	call   c0012794 <schedule()>
c0005bd7:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 90 f3 01 c0       	mov    eax,ds:0xc001f390
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 a0 c8 01 c0       	push   0xc001c8a0
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 a8 f2 01 c0       	mov    eax,0xc001f2a8
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 a9 c8 01 c0       	push   0xc001c8a9
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 40 b5 01 c0       	mov    eax,0xc001b540
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 b3 c8 01 c0       	push   0xc001c8b3
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 74 b2 01 c0       	mov    eax,0xc001b274
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 bc c8 01 c0       	push   0xc001c8bc
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 40 b6 01 c0       	mov    eax,0xc001b640
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 c6 c8 01 c0       	push   0xc001c8c6
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 c0 b3 01 c0       	mov    eax,0xc001b3c0
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 cf c8 01 c0       	push   0xc001c8cf
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 ac f2 01 c0       	mov    eax,0xc001f2ac
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 dc c8 01 c0       	push   0xc001c8dc
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 ad f2 01 c0       	mov    eax,0xc001f2ad
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 14 51 00 00       	call   c000ae4e <Device::closeAll()>
c0005d3a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 e9 c8 01 c0       	push   0xc001c8e9
c0005d6b:	e8 4b 0e 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 e5 0d 00 00       	call   c0006b61 <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0005d8a:	50                   	push   eax
c0005d8b:	68 02 c9 01 c0       	push   0xc001c902
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 d0 c5 00 00       	call   c0012368 <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 b9 65 00 c0       	push   0xc00065b9
c0005da7:	53                   	push   ebx
c0005da8:	e8 c7 c7 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 90 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022790
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 c8 2f 01 c0       	push   0xc0012fc8
c0005dbc:	52                   	push   edx
c0005dbd:	e8 b2 c7 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 48 27 02 c0       	mov    ds:0xc0022748,eax
c0005dca:	68 00 ca 01 c0       	push   0xc001ca00
c0005dcf:	c6 05 ad f2 01 c0 01 	mov    BYTE PTR ds:0xc001f2ad,0x1
c0005dd6:	e8 e0 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 c7 d5 00 00       	call   c00133a7 <Vm::initialise8086()>
c0005de0:	e8 ad 3e 00 00       	call   c0009c92 <Fs::initVFS()>
c0005de5:	c7 04 24 0f c9 01 c0 	mov    DWORD PTR [esp],0xc001c90f
c0005dec:	e8 ca 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005df1:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0005df6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 00 ca 01 c0       	push   0xc001ca00
c0005e10:	e8 a6 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e15:	e8 e0 ad 00 00       	call   c0010bfa <Sys::loadSyscalls()>
c0005e1a:	e8 17 95 00 00       	call   c000f336 <Krnl::loadSystemEnv()>
c0005e1f:	e8 dc 97 00 00       	call   c000f600 <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 29 c9 01 c0       	push   0xc001c929
c0005e2e:	68 32 c9 01 c0       	push   0xc001c932
c0005e33:	e8 f2 9c 00 00       	call   c000fb2a <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 60 49 00 00       	call   c000a7a0 <User::loadClockSettings(int)>
c0005e40:	c7 04 24 24 ca 01 c0 	mov    DWORD PTR [esp],0xc001ca24
c0005e47:	e8 6f 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0005e52:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0005e58:	53                   	push   ebx
c0005e59:	e8 ee 4f 00 00       	call   c000ae4c <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 3a c9 01 c0 	mov    DWORD PTR [esp],0xc001c93a
c0005e65:	e8 51 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e6a:	58                   	pop    eax
c0005e6b:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c0005e71:	5a                   	pop    edx
c0005e72:	6a 01                	push   0x1
c0005e74:	68 4b c9 01 c0       	push   0xc001c94b
c0005e79:	e8 24 bf 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c0005e7e:	59                   	pop    ecx
c0005e7f:	5a                   	pop    edx
c0005e80:	53                   	push   ebx
c0005e81:	50                   	push   eax
c0005e82:	e8 4c c1 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	83 ec 0c             	sub    esp,0xc
c0005e8d:	6a 02                	push   0x2
c0005e8f:	e8 fc ca 00 00       	call   c0012990 <blockTask(TaskState)>
c0005e94:	83 c4 10             	add    esp,0x10
c0005e97:	eb f1                	jmp    c0005e8a <Krnl::firstTask()+0x129>
c0005e99:	90                   	nop

c0005e9a <Computer::Computer()>:
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ea1:	83 ec 08             	sub    esp,0x8
c0005ea4:	68 67 c9 01 c0       	push   0xc001c967
c0005ea9:	50                   	push   eax
c0005eaa:	e8 19 50 00 00       	call   c000aec8 <Device::Device(char const*)>
c0005eaf:	83 c4 10             	add    esp,0x10
c0005eb2:	ba 70 ca 01 c0       	mov    edx,0xc001ca70
c0005eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ebb:	89 10                	mov    DWORD PTR [eax],edx
c0005ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0005ee3:	83 ca 04             	or     edx,0x4
c0005ee6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0005eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ef6:	31 d2                	xor    edx,edx
c0005ef8:	88 c2                	mov    dl,al
c0005efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005efe:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f0f:	31 d2                	xor    edx,edx
c0005f11:	88 c2                	mov    dl,al
c0005f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f26:	8d 50 01             	lea    edx,[eax+0x1]
c0005f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f3f:	83 e1 3f             	and    ecx,0x3f
c0005f42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f46:	90                   	nop
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    
c0005f4b:	90                   	nop

c0005f4c <Computer::setBootMessage(char const*)>:
c0005f4c:	c3                   	ret    
c0005f4d:	90                   	nop

c0005f4e <Computer::detectFeatures()>:
c0005f4e:	55                   	push   ebp
c0005f4f:	57                   	push   edi
c0005f50:	56                   	push   esi
c0005f51:	53                   	push   ebx
c0005f52:	83 ec 1c             	sub    esp,0x1c
c0005f55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f59:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0005f63:	e8 b1 a2 ff ff       	call   c0000219 <detectCPUID>
c0005f68:	85 c0                	test   eax,eax
c0005f6a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005f70:	0f 95 c2             	setne  dl
c0005f73:	83 e0 fd             	and    eax,0xfffffffd
c0005f76:	01 d2                	add    edx,edx
c0005f78:	09 d0                	or     eax,edx
c0005f7a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005f80:	a8 02                	test   al,0x2
c0005f82:	75 46                	jne    c0005fca <Computer::detectFeatures()+0x7c>
c0005f84:	f6 05 c1 f2 01 c0 04 	test   BYTE PTR ds:0xc001f2c1,0x4
c0005f8b:	74 07                	je     c0005f94 <Computer::detectFeatures()+0x46>
c0005f8d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0005f94:	e8 6d 52 01 00       	call   c001b206 <x87Detect>
c0005f99:	83 e0 01             	and    eax,0x1
c0005f9c:	c1 e0 04             	shl    eax,0x4
c0005f9f:	88 c2                	mov    dl,al
c0005fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fa7:	83 e0 ef             	and    eax,0xffffffef
c0005faa:	09 d0                	or     eax,edx
c0005fac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fb2:	a8 10                	test   al,0x10
c0005fb4:	0f 85 2a 01 00 00    	jne    c00060e4 <Computer::detectFeatures()+0x196>
c0005fba:	84 c0                	test   al,al
c0005fbc:	0f 88 45 01 00 00    	js     c0006107 <Computer::detectFeatures()+0x1b9>
c0005fc2:	83 c4 1c             	add    esp,0x1c
c0005fc5:	5b                   	pop    ebx
c0005fc6:	5e                   	pop    esi
c0005fc7:	5f                   	pop    edi
c0005fc8:	5d                   	pop    ebp
c0005fc9:	c3                   	ret    
c0005fca:	83 ec 0c             	sub    esp,0xc
c0005fcd:	6a 20                	push   0x20
c0005fcf:	e8 84 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c0005fd4:	83 e0 01             	and    eax,0x1
c0005fd7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005fde:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fe4:	83 e0 f7             	and    eax,0xfffffff7
c0005fe7:	09 d0                	or     eax,edx
c0005fe9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fef:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005ff6:	e8 5d 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c0005ffb:	83 e0 01             	and    eax,0x1
c0005ffe:	88 c2                	mov    dl,al
c0006000:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006006:	83 e0 fe             	and    eax,0xfffffffe
c0006009:	09 d0                	or     eax,edx
c000600b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006011:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006018:	e8 3b 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000601d:	c1 e0 07             	shl    eax,0x7
c0006020:	88 c2                	mov    dl,al
c0006022:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006028:	83 e0 7f             	and    eax,0x7f
c000602b:	09 d0                	or     eax,edx
c000602d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006033:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000603a:	e8 19 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000603f:	83 c4 10             	add    esp,0x10
c0006042:	83 e0 01             	and    eax,0x1
c0006045:	c1 e0 05             	shl    eax,0x5
c0006048:	88 c2                	mov    dl,al
c000604a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006050:	83 e0 df             	and    eax,0xffffffdf
c0006053:	09 d0                	or     eax,edx
c0006055:	f7 05 c0 f2 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f2c0,0x401
c000605f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006065:	0f 84 c2 00 00 00    	je     c000612d <Computer::detectFeatures()+0x1df>
c000606b:	83 e0 fe             	and    eax,0xfffffffe
c000606e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006074:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000607a:	88 c2                	mov    dl,al
c000607c:	83 e2 09             	and    edx,0x9
c000607f:	fe ca                	dec    dl
c0006081:	75 09                	jne    c000608c <Computer::detectFeatures()+0x13e>
c0006083:	83 e0 fe             	and    eax,0xfffffffe
c0006086:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006093:	50                   	push   eax
c0006094:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006098:	55                   	push   ebp
c0006099:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000609d:	57                   	push   edi
c000609e:	8d 74 24 18          	lea    esi,[esp+0x18]
c00060a2:	56                   	push   esi
c00060a3:	68 00 00 00 80       	push   0x80000000
c00060a8:	e8 27 83 00 00       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060ad:	83 c4 20             	add    esp,0x20
c00060b0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00060b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00060bb:	0f 86 c3 fe ff ff    	jbe    c0005f84 <Computer::detectFeatures()+0x36>
c00060c1:	83 ec 0c             	sub    esp,0xc
c00060c4:	50                   	push   eax
c00060c5:	55                   	push   ebp
c00060c6:	57                   	push   edi
c00060c7:	56                   	push   esi
c00060c8:	68 01 00 00 80       	push   0x80000001
c00060cd:	e8 02 83 00 00       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060d2:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c00060dc:	83 c4 20             	add    esp,0x20
c00060df:	e9 a0 fe ff ff       	jmp    c0005f84 <Computer::detectFeatures()+0x36>
c00060e4:	e8 d7 50 01 00       	call   c001b1c0 <absolutelyNoChanceInHell>
c00060e9:	88 c2                	mov    dl,al
c00060eb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00060f1:	c1 e2 07             	shl    edx,0x7
c00060f4:	83 e0 7f             	and    eax,0x7f
c00060f7:	09 d0                	or     eax,edx
c00060f9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00060ff:	84 c0                	test   al,al
c0006101:	0f 89 bb fe ff ff    	jns    c0005fc2 <Computer::detectFeatures()+0x74>
c0006107:	e8 34 4e 01 00       	call   c001af40 <avxDetect>
c000610c:	83 e0 01             	and    eax,0x1
c000610f:	c1 e0 05             	shl    eax,0x5
c0006112:	88 c2                	mov    dl,al
c0006114:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000611a:	83 e0 df             	and    eax,0xffffffdf
c000611d:	09 d0                	or     eax,edx
c000611f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006125:	83 c4 1c             	add    esp,0x1c
c0006128:	5b                   	pop    ebx
c0006129:	5e                   	pop    esi
c000612a:	5f                   	pop    edi
c000612b:	5d                   	pop    ebp
c000612c:	c3                   	ret    
c000612d:	83 ec 0c             	sub    esp,0xc
c0006130:	68 00 02 00 00       	push   0x200
c0006135:	e8 1e 83 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000613a:	83 c4 10             	add    esp,0x10
c000613d:	83 e0 01             	and    eax,0x1
c0006140:	88 c2                	mov    dl,al
c0006142:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006148:	83 e0 fe             	and    eax,0xfffffffe
c000614b:	09 d0                	or     eax,edx
c000614d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006153:	e9 1c ff ff ff       	jmp    c0006074 <Computer::detectFeatures()+0x126>

c0006158 <Computer::displayFeatures()>:
c0006158:	c3                   	ret    
c0006159:	90                   	nop

c000615a <Computer::rdmsr(unsigned int)>:
c000615a:	83 ec 0c             	sub    esp,0xc
c000615d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006161:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006168:	74 0a                	je     c0006174 <Computer::rdmsr(unsigned int)+0x1a>
c000616a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000616e:	0f 32                	rdmsr  
c0006170:	83 c4 0c             	add    esp,0xc
c0006173:	c3                   	ret    
c0006174:	83 ec 0c             	sub    esp,0xc
c0006177:	68 70 c9 01 c0       	push   0xc001c970
c000617c:	e8 be 92 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006181:	83 c4 10             	add    esp,0x10
c0006184:	eb e4                	jmp    c000616a <Computer::rdmsr(unsigned int)+0x10>

c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006186:	57                   	push   edi
c0006187:	56                   	push   esi
c0006188:	52                   	push   edx
c0006189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000618d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006191:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006195:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000619c:	74 0e                	je     c00061ac <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000619e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061a2:	89 f0                	mov    eax,esi
c00061a4:	89 fa                	mov    edx,edi
c00061a6:	0f 30                	wrmsr  
c00061a8:	58                   	pop    eax
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    
c00061ac:	83 ec 0c             	sub    esp,0xc
c00061af:	68 76 c9 01 c0       	push   0xc001c976
c00061b4:	e8 86 92 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	eb e0                	jmp    c000619e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00061be <Computer::shutdown()>:
c00061be:	83 ec 0c             	sub    esp,0xc
c00061c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00061c7:	6a 00                	push   0x0
c00061c9:	6a 00                	push   0x0
c00061cb:	6a 00                	push   0x0
c00061cd:	50                   	push   eax
c00061ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061d1:	83 c4 1c             	add    esp,0x1c
c00061d4:	c3                   	ret    
c00061d5:	90                   	nop

c00061d6 <Computer::restart()>:
c00061d6:	83 ec 0c             	sub    esp,0xc
c00061d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00061df:	6a 00                	push   0x0
c00061e1:	6a 00                	push   0x0
c00061e3:	6a 01                	push   0x1
c00061e5:	50                   	push   eax
c00061e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061e9:	83 c4 1c             	add    esp,0x1c
c00061ec:	c3                   	ret    
c00061ed:	90                   	nop

c00061ee <Computer::sleep()>:
c00061ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00061f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00061fc:	e9 cf 7c 00 00       	jmp    c000ded0 <ACPI::sleep()>
c0006201:	90                   	nop

c0006202 <Computer::nmiEnabled()>:
c0006202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006206:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000620c:	c3                   	ret    
c000620d:	90                   	nop

c000620e <Computer::readCMOS(unsigned char)>:
c000620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006212:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006219:	19 c0                	sbb    eax,eax
c000621b:	83 e0 80             	and    eax,0xffffff80
c000621e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006222:	e6 70                	out    0x70,al
c0006224:	e4 71                	in     al,0x71
c0006226:	c3                   	ret    
c0006227:	90                   	nop

c0006228 <Computer::enableNMI(bool)>:
c0006228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000622c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006230:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006236:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000623e:	eb ce                	jmp    c000620e <Computer::readCMOS(unsigned char)>

c0006240 <Computer::open(int, int, void*)>:
c0006240:	56                   	push   esi
c0006241:	53                   	push   ebx
c0006242:	83 ec 10             	sub    esp,0x10
c0006245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006249:	f6 05 c0 f2 01 c0 04 	test   BYTE PTR ds:0xc001f2c0,0x4
c0006250:	68 7c c9 01 c0       	push   0xc001c97c
c0006255:	0f 94 05 e0 eb 01 c0 	sete   BYTE PTR ds:0xc001ebe0
c000625c:	e8 5a 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0006261:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006268:	e8 f4 08 00 00       	call   c0006b61 <malloc>
c000626d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006270:	89 c6                	mov    esi,eax
c0006272:	e8 f1 77 00 00       	call   c000da68 <ACPI::ACPI()>
c0006277:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000627d:	58                   	pop    eax
c000627e:	5a                   	pop    edx
c000627f:	56                   	push   esi
c0006280:	53                   	push   ebx
c0006281:	e8 aa 4a 00 00       	call   c000ad30 <Device::addChild(Device*)>
c0006286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006289:	e8 c0 fc ff ff       	call   c0005f4e <Computer::detectFeatures()>
c000628e:	59                   	pop    ecx
c000628f:	5e                   	pop    esi
c0006290:	6a 01                	push   0x1
c0006292:	53                   	push   ebx
c0006293:	e8 90 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006298:	c7 04 24 94 c9 01 c0 	mov    DWORD PTR [esp],0xc001c994
c000629f:	e8 17 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062a4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00062ab:	e8 b1 08 00 00       	call   c0006b61 <malloc>
c00062b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	e8 56 82 00 00       	call   c000e510 <CPU::CPU()>
c00062ba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00062c0:	58                   	pop    eax
c00062c1:	5a                   	pop    edx
c00062c2:	56                   	push   esi
c00062c3:	53                   	push   ebx
c00062c4:	e8 67 4a 00 00       	call   c000ad30 <Device::addChild(Device*)>
c00062c9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00062cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00062d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00062d5:	51                   	push   ecx
c00062d6:	6a 00                	push   0x0
c00062d8:	6a 00                	push   0x0
c00062da:	50                   	push   eax
c00062db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00062de:	83 c4 14             	add    esp,0x14
c00062e1:	68 44 ca 01 c0       	push   0xc001ca44
c00062e6:	e8 d0 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062eb:	e8 78 e1 00 00       	call   c0014468 <HalInitialiseCoprocessor()>
c00062f0:	c7 04 24 ae c9 01 c0 	mov    DWORD PTR [esp],0xc001c9ae
c00062f7:	e8 bf 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062fc:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c0006303:	e8 84 c3 00 00       	call   c001268c <setupMultitasking(void (*)())>
c0006308:	83 c4 14             	add    esp,0x14
c000630b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006310:	5b                   	pop    ebx
c0006311:	5e                   	pop    esi
c0006312:	c3                   	ret    
c0006313:	90                   	nop

c0006314 <Computer::disableNMI()>:
c0006314:	6a 00                	push   0x0
c0006316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000631a:	50                   	push   eax
c000631b:	e8 08 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006320:	5a                   	pop    edx
c0006321:	59                   	pop    ecx
c0006322:	c3                   	ret    
c0006323:	90                   	nop

c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006328:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000632f:	19 c0                	sbb    eax,eax
c0006331:	83 e0 80             	and    eax,0xffffff80
c0006334:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006338:	e6 70                	out    0x70,al
c000633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000633e:	e6 71                	out    0x71,al
c0006340:	c3                   	ret    
c0006341:	90                   	nop

c0006342 <Computer::handleNMI()>:
c0006342:	56                   	push   esi
c0006343:	53                   	push   ebx
c0006344:	83 ec 10             	sub    esp,0x10
c0006347:	e4 92                	in     al,0x92
c0006349:	89 c6                	mov    esi,eax
c000634b:	e4 61                	in     al,0x61
c000634d:	68 c9 c9 01 c0       	push   0xc001c9c9
c0006352:	88 c3                	mov    bl,al
c0006354:	e8 97 35 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006359:	83 c4 10             	add    esp,0x10
c000635c:	83 e6 10             	and    esi,0x10
c000635f:	75 0d                	jne    c000636e <Computer::handleNMI()+0x2c>
c0006361:	f6 c3 40             	test   bl,0x40
c0006364:	75 1d                	jne    c0006383 <Computer::handleNMI()+0x41>
c0006366:	84 db                	test   bl,bl
c0006368:	78 2d                	js     c0006397 <Computer::handleNMI()+0x55>
c000636a:	58                   	pop    eax
c000636b:	5b                   	pop    ebx
c000636c:	5e                   	pop    esi
c000636d:	c3                   	ret    
c000636e:	83 ec 0c             	sub    esp,0xc
c0006371:	68 da c9 01 c0       	push   0xc001c9da
c0006376:	e8 c4 90 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000637b:	83 c4 10             	add    esp,0x10
c000637e:	f6 c3 40             	test   bl,0x40
c0006381:	74 e3                	je     c0006366 <Computer::handleNMI()+0x24>
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	68 e7 c9 01 c0       	push   0xc001c9e7
c000638b:	e8 af 90 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006390:	83 c4 10             	add    esp,0x10
c0006393:	84 db                	test   bl,bl
c0006395:	79 d3                	jns    c000636a <Computer::handleNMI()+0x28>
c0006397:	c7 44 24 10 f1 c9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c9f1
c000639f:	5a                   	pop    edx
c00063a0:	5b                   	pop    ebx
c00063a1:	5e                   	pop    esi
c00063a2:	e9 98 90 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c00063a7:	90                   	nop

c00063a8 <GDTEntry::setBase(unsigned int)>:
c00063a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00063b0:	89 c1                	mov    ecx,eax
c00063b2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00063b6:	c1 e9 10             	shr    ecx,0x10
c00063b9:	c1 e8 18             	shr    eax,0x18
c00063bc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00063bf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00063c2:	c3                   	ret    
c00063c3:	90                   	nop

c00063c4 <GDTEntry::setLimit(unsigned int)>:
c00063c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00063c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00063cf:	66 89 01             	mov    WORD PTR [ecx],ax
c00063d2:	83 e2 f0             	and    edx,0xfffffff0
c00063d5:	c1 e8 10             	shr    eax,0x10
c00063d8:	83 e0 0f             	and    eax,0xf
c00063db:	09 d0                	or     eax,edx
c00063dd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00063e0:	c3                   	ret    
c00063e1:	90                   	nop

c00063e2 <GDT::GDT()>:
c00063e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063f6:	90                   	nop
c00063f7:	c3                   	ret    

c00063f8 <GDT::addEntry(GDTEntry)>:
c00063f8:	53                   	push   ebx
c00063f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006401:	8b 02                	mov    eax,DWORD PTR [edx]
c0006403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006407:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000640b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000640f:	8d 48 01             	lea    ecx,[eax+0x1]
c0006412:	c1 e0 03             	shl    eax,0x3
c0006415:	89 0a                	mov    DWORD PTR [edx],ecx
c0006417:	5b                   	pop    ebx
c0006418:	c3                   	ret    
c0006419:	90                   	nop

c000641a <GDT::getNumberOfEntries()>:
c000641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000641e:	8b 00                	mov    eax,DWORD PTR [eax]
c0006420:	c3                   	ret    
c0006421:	90                   	nop

c0006422 <GDT::flush()>:
c0006422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006426:	8b 10                	mov    edx,DWORD PTR [eax]
c0006428:	83 c0 04             	add    eax,0x4
c000642b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006432:	a3 b2 f2 01 c0       	mov    ds:0xc001f2b2,eax
c0006437:	66 89 15 b0 f2 01 c0 	mov    WORD PTR ds:0xc001f2b0,dx
c000643e:	e9 3a 9f ff ff       	jmp    c000037d <loadGDT>
c0006443:	90                   	nop

c0006444 <GDT::setup()>:
c0006444:	57                   	push   edi
c0006445:	56                   	push   esi
c0006446:	53                   	push   ebx
c0006447:	83 ec 40             	sub    esp,0x40
c000644a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000644e:	6a 00                	push   0x0
c0006450:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006454:	56                   	push   esi
c0006455:	e8 4e ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000645a:	6a 00                	push   0x0
c000645c:	56                   	push   esi
c000645d:	e8 62 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006462:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000646a:	6a 00                	push   0x0
c000646c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006470:	56                   	push   esi
c0006471:	e8 32 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c0006476:	68 ff ff ff 00       	push   0xffffff
c000647b:	56                   	push   esi
c000647c:	e8 43 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006481:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006485:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000648a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000648f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006493:	83 c4 20             	add    esp,0x20
c0006496:	6a 00                	push   0x0
c0006498:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000649c:	56                   	push   esi
c000649d:	e8 06 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00064a2:	68 ff ff ff 00       	push   0xffffff
c00064a7:	56                   	push   esi
c00064a8:	e8 17 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c00064ad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00064b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00064b5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00064b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00064bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00064c1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00064c6:	0d 00 92 c0 00       	or     eax,0xc09200
c00064cb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00064cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00064d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00064d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00064db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00064df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00064e3:	89 fa                	mov    edx,edi
c00064e5:	80 cc 60             	or     ah,0x60
c00064e8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00064ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00064f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00064f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00064fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064fe:	80 cc 60             	or     ah,0x60
c0006501:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0006505:	89 f8                	mov    eax,edi
c0006507:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000650c:	09 d0                	or     eax,edx
c000650e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006512:	89 c7                	mov    edi,eax
c0006514:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006518:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006524:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000652a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006533:	09 d0                	or     eax,edx
c0006535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006539:	83 c4 0c             	add    esp,0xc
c000653c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006540:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006544:	53                   	push   ebx
c0006545:	e8 ae fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000654a:	83 c4 0c             	add    esp,0xc
c000654d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006551:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006555:	53                   	push   ebx
c0006556:	e8 9d fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000655b:	83 c4 0c             	add    esp,0xc
c000655e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006566:	53                   	push   ebx
c0006567:	e8 8c fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000656c:	83 c4 0c             	add    esp,0xc
c000656f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006573:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006577:	53                   	push   ebx
c0006578:	e8 7b fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000657d:	83 c4 0c             	add    esp,0xc
c0006580:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006584:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006588:	53                   	push   ebx
c0006589:	e8 6a fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000658e:	83 c4 0c             	add    esp,0xc
c0006591:	57                   	push   edi
c0006592:	56                   	push   esi
c0006593:	53                   	push   ebx
c0006594:	e8 5f fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006599:	83 c4 0c             	add    esp,0xc
c000659c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a4:	53                   	push   ebx
c00065a5:	e8 4e fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c00065aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00065ad:	e8 70 fe ff ff       	call   c0006422 <GDT::flush()>
c00065b2:	83 c4 50             	add    esp,0x50
c00065b5:	5b                   	pop    ebx
c00065b6:	5e                   	pop    esi
c00065b7:	5f                   	pop    edi
c00065b8:	c3                   	ret    

c00065b9 <idleFunction(void*)>:
c00065b9:	83 ec 0c             	sub    esp,0xc
c00065bc:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00065c1:	48                   	dec    eax
c00065c2:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00065c7:	75 01                	jne    c00065ca <idleFunction(void*)+0x11>
c00065c9:	fb                   	sti    
c00065ca:	f4                   	hlt    
c00065cb:	e8 f2 51 01 00       	call   c001b7c2 <idleCommon()>
c00065d0:	eb f8                	jmp    c00065ca <idleFunction(void*)+0x11>
c00065d2:	66 90                	xchg   ax,ax

c00065d4 <IDTEntry::IDTEntry(bool)>:
c00065d4:	83 ec 04             	sub    esp,0x4
c00065d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00065db:	88 04 24             	mov    BYTE PTR [esp],al
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00065e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ec:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00065f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065f7:	83 e2 f0             	and    edx,0xfffffff0
c00065fa:	83 ca 0e             	or     edx,0xe
c00065fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006604:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006607:	83 e2 ef             	and    edx,0xffffffef
c000660a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000660d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006611:	74 05                	je     c0006618 <IDTEntry::IDTEntry(bool)+0x44>
c0006613:	b2 03                	mov    dl,0x3
c0006615:	eb 05                	jmp    c000661c <IDTEntry::IDTEntry(bool)+0x48>
c0006617:	90                   	nop
c0006618:	b2 00                	mov    dl,0x0
c000661a:	66 90                	xchg   ax,ax
c000661c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006620:	83 e2 03             	and    edx,0x3
c0006623:	88 d1                	mov    cl,dl
c0006625:	c1 e1 05             	shl    ecx,0x5
c0006628:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000662b:	83 e2 9f             	and    edx,0xffffff9f
c000662e:	09 ca                	or     edx,ecx
c0006630:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006637:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000663a:	83 ca 80             	or     edx,0xffffff80
c000663d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006640:	90                   	nop
c0006641:	83 c4 04             	add    esp,0x4
c0006644:	c3                   	ret    
c0006645:	90                   	nop

c0006646 <IDTEntry::setOffset(unsigned int)>:
c0006646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000664a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664e:	66 89 02             	mov    WORD PTR [edx],ax
c0006651:	c1 e8 10             	shr    eax,0x10
c0006654:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006658:	c3                   	ret    
c0006659:	90                   	nop
c000665a:	66 90                	xchg   ax,ax

c000665c <IDT::IDT()>:
c000665c:	90                   	nop
c000665d:	c3                   	ret    

c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000665e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006662:	83 c0 30             	add    eax,0x30
c0006665:	c3                   	ret    

c0006666 <IDT::addEntry(IDTEntry, int)>:
c0006666:	53                   	push   ebx
c0006667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000666b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000666f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006677:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000667a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000667e:	5b                   	pop    ebx
c000667f:	c3                   	ret    

c0006680 <IDT::addEntry(int, void (*)(), bool)>:
c0006680:	53                   	push   ebx
c0006681:	83 ec 10             	sub    esp,0x10
c0006684:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006689:	50                   	push   eax
c000668a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000668e:	53                   	push   ebx
c000668f:	e8 40 ff ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c0006694:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006698:	53                   	push   ebx
c0006699:	e8 a8 ff ff ff       	call   c0006646 <IDTEntry::setOffset(unsigned int)>
c000669e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00066a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00066ae:	e8 b3 ff ff ff       	call   c0006666 <IDT::addEntry(IDTEntry, int)>
c00066b3:	83 c4 30             	add    esp,0x30
c00066b6:	5b                   	pop    ebx
c00066b7:	c3                   	ret    

c00066b8 <IDT::flush()>:
c00066b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00066bc:	66 c7 05 b8 f2 01 c0 ff 07 	mov    WORD PTR ds:0xc001f2b8,0x7ff
c00066c5:	a3 ba f2 01 c0       	mov    ds:0xc001f2ba,eax
c00066ca:	0f 01 1d b8 f2 01 c0 	lidtd  ds:0xc001f2b8
c00066d1:	c3                   	ret    

c00066d2 <IDT::setup()>:
c00066d2:	57                   	push   edi
c00066d3:	56                   	push   esi
c00066d4:	53                   	push   ebx
c00066d5:	83 ec 10             	sub    esp,0x10
c00066d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066dc:	6a 00                	push   0x0
c00066de:	68 d0 af 01 c0       	push   0xc001afd0
c00066e3:	6a 00                	push   0x0
c00066e5:	53                   	push   ebx
c00066e6:	e8 95 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066eb:	6a 00                	push   0x0
c00066ed:	68 e0 af 01 c0       	push   0xc001afe0
c00066f2:	6a 01                	push   0x1
c00066f4:	53                   	push   ebx
c00066f5:	e8 86 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066fa:	83 c4 20             	add    esp,0x20
c00066fd:	6a 00                	push   0x0
c00066ff:	68 ea af 01 c0       	push   0xc001afea
c0006704:	6a 02                	push   0x2
c0006706:	53                   	push   ebx
c0006707:	e8 74 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000670c:	6a 00                	push   0x0
c000670e:	68 f4 af 01 c0       	push   0xc001aff4
c0006713:	6a 03                	push   0x3
c0006715:	53                   	push   ebx
c0006716:	e8 65 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000671b:	83 c4 20             	add    esp,0x20
c000671e:	6a 00                	push   0x0
c0006720:	68 fe af 01 c0       	push   0xc001affe
c0006725:	6a 04                	push   0x4
c0006727:	53                   	push   ebx
c0006728:	e8 53 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000672d:	6a 00                	push   0x0
c000672f:	68 08 b0 01 c0       	push   0xc001b008
c0006734:	6a 05                	push   0x5
c0006736:	53                   	push   ebx
c0006737:	e8 44 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000673c:	83 c4 20             	add    esp,0x20
c000673f:	6a 00                	push   0x0
c0006741:	68 12 b0 01 c0       	push   0xc001b012
c0006746:	6a 06                	push   0x6
c0006748:	53                   	push   ebx
c0006749:	e8 32 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000674e:	6a 00                	push   0x0
c0006750:	68 1c b0 01 c0       	push   0xc001b01c
c0006755:	6a 07                	push   0x7
c0006757:	53                   	push   ebx
c0006758:	e8 23 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000675d:	83 c4 20             	add    esp,0x20
c0006760:	6a 00                	push   0x0
c0006762:	68 26 b0 01 c0       	push   0xc001b026
c0006767:	6a 08                	push   0x8
c0006769:	53                   	push   ebx
c000676a:	e8 11 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000676f:	6a 00                	push   0x0
c0006771:	68 2e b0 01 c0       	push   0xc001b02e
c0006776:	6a 09                	push   0x9
c0006778:	53                   	push   ebx
c0006779:	e8 02 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000677e:	83 c4 20             	add    esp,0x20
c0006781:	6a 00                	push   0x0
c0006783:	68 38 b0 01 c0       	push   0xc001b038
c0006788:	6a 0a                	push   0xa
c000678a:	53                   	push   ebx
c000678b:	e8 f0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006790:	6a 00                	push   0x0
c0006792:	68 40 b0 01 c0       	push   0xc001b040
c0006797:	6a 0b                	push   0xb
c0006799:	53                   	push   ebx
c000679a:	e8 e1 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000679f:	83 c4 20             	add    esp,0x20
c00067a2:	6a 00                	push   0x0
c00067a4:	68 48 b0 01 c0       	push   0xc001b048
c00067a9:	6a 0c                	push   0xc
c00067ab:	53                   	push   ebx
c00067ac:	e8 cf fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067b1:	6a 00                	push   0x0
c00067b3:	68 50 b0 01 c0       	push   0xc001b050
c00067b8:	6a 0d                	push   0xd
c00067ba:	53                   	push   ebx
c00067bb:	e8 c0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067c0:	83 c4 20             	add    esp,0x20
c00067c3:	6a 00                	push   0x0
c00067c5:	68 58 b0 01 c0       	push   0xc001b058
c00067ca:	6a 0e                	push   0xe
c00067cc:	53                   	push   ebx
c00067cd:	e8 ae fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067d2:	6a 00                	push   0x0
c00067d4:	68 60 b0 01 c0       	push   0xc001b060
c00067d9:	6a 0f                	push   0xf
c00067db:	53                   	push   ebx
c00067dc:	e8 9f fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067e1:	83 c4 20             	add    esp,0x20
c00067e4:	6a 00                	push   0x0
c00067e6:	68 6a b0 01 c0       	push   0xc001b06a
c00067eb:	6a 10                	push   0x10
c00067ed:	53                   	push   ebx
c00067ee:	e8 8d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067f3:	6a 00                	push   0x0
c00067f5:	68 74 b0 01 c0       	push   0xc001b074
c00067fa:	6a 11                	push   0x11
c00067fc:	53                   	push   ebx
c00067fd:	e8 7e fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006802:	83 c4 20             	add    esp,0x20
c0006805:	6a 00                	push   0x0
c0006807:	68 7e b0 01 c0       	push   0xc001b07e
c000680c:	6a 12                	push   0x12
c000680e:	53                   	push   ebx
c000680f:	e8 6c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006814:	6a 01                	push   0x1
c0006816:	68 18 b1 01 c0       	push   0xc001b118
c000681b:	6a 60                	push   0x60
c000681d:	53                   	push   ebx
c000681e:	e8 5d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006823:	83 c4 20             	add    esp,0x20
c0006826:	6a 00                	push   0x0
c0006828:	68 1f b1 01 c0       	push   0xc001b11f
c000682d:	6a 20                	push   0x20
c000682f:	53                   	push   ebx
c0006830:	e8 4b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006835:	6a 00                	push   0x0
c0006837:	68 0a b1 01 c0       	push   0xc001b10a
c000683c:	6a 21                	push   0x21
c000683e:	53                   	push   ebx
c000683f:	e8 3c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006844:	83 c4 20             	add    esp,0x20
c0006847:	6a 00                	push   0x0
c0006849:	68 11 b1 01 c0       	push   0xc001b111
c000684e:	6a 22                	push   0x22
c0006850:	53                   	push   ebx
c0006851:	e8 2a fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006856:	6a 00                	push   0x0
c0006858:	68 88 b0 01 c0       	push   0xc001b088
c000685d:	6a 23                	push   0x23
c000685f:	53                   	push   ebx
c0006860:	e8 1b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006865:	83 c4 20             	add    esp,0x20
c0006868:	6a 00                	push   0x0
c000686a:	68 92 b0 01 c0       	push   0xc001b092
c000686f:	6a 24                	push   0x24
c0006871:	53                   	push   ebx
c0006872:	e8 09 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006877:	6a 00                	push   0x0
c0006879:	68 9c b0 01 c0       	push   0xc001b09c
c000687e:	6a 25                	push   0x25
c0006880:	53                   	push   ebx
c0006881:	e8 fa fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006886:	83 c4 20             	add    esp,0x20
c0006889:	6a 00                	push   0x0
c000688b:	68 a6 b0 01 c0       	push   0xc001b0a6
c0006890:	6a 26                	push   0x26
c0006892:	53                   	push   ebx
c0006893:	e8 e8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006898:	6a 00                	push   0x0
c000689a:	68 b0 b0 01 c0       	push   0xc001b0b0
c000689f:	6a 27                	push   0x27
c00068a1:	53                   	push   ebx
c00068a2:	e8 d9 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068a7:	83 c4 20             	add    esp,0x20
c00068aa:	6a 00                	push   0x0
c00068ac:	68 ba b0 01 c0       	push   0xc001b0ba
c00068b1:	6a 28                	push   0x28
c00068b3:	53                   	push   ebx
c00068b4:	e8 c7 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068b9:	6a 00                	push   0x0
c00068bb:	68 c4 b0 01 c0       	push   0xc001b0c4
c00068c0:	6a 29                	push   0x29
c00068c2:	53                   	push   ebx
c00068c3:	e8 b8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068c8:	83 c4 20             	add    esp,0x20
c00068cb:	6a 00                	push   0x0
c00068cd:	68 ce b0 01 c0       	push   0xc001b0ce
c00068d2:	6a 2a                	push   0x2a
c00068d4:	53                   	push   ebx
c00068d5:	e8 a6 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068da:	6a 00                	push   0x0
c00068dc:	68 d8 b0 01 c0       	push   0xc001b0d8
c00068e1:	6a 2b                	push   0x2b
c00068e3:	53                   	push   ebx
c00068e4:	e8 97 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068e9:	83 c4 20             	add    esp,0x20
c00068ec:	6a 00                	push   0x0
c00068ee:	68 e2 b0 01 c0       	push   0xc001b0e2
c00068f3:	6a 2c                	push   0x2c
c00068f5:	53                   	push   ebx
c00068f6:	e8 85 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068fb:	6a 00                	push   0x0
c00068fd:	68 ec b0 01 c0       	push   0xc001b0ec
c0006902:	6a 2d                	push   0x2d
c0006904:	53                   	push   ebx
c0006905:	e8 76 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000690a:	83 c4 20             	add    esp,0x20
c000690d:	6a 00                	push   0x0
c000690f:	68 f6 b0 01 c0       	push   0xc001b0f6
c0006914:	6a 2e                	push   0x2e
c0006916:	53                   	push   ebx
c0006917:	e8 64 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000691c:	6a 00                	push   0x0
c000691e:	68 00 b1 01 c0       	push   0xc001b100
c0006923:	6a 2f                	push   0x2f
c0006925:	53                   	push   ebx
c0006926:	e8 55 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000692b:	83 c4 20             	add    esp,0x20
c000692e:	6a 00                	push   0x0
c0006930:	68 56 b1 01 c0       	push   0xc001b156
c0006935:	6a 30                	push   0x30
c0006937:	53                   	push   ebx
c0006938:	e8 43 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000693d:	6a 00                	push   0x0
c000693f:	68 60 b1 01 c0       	push   0xc001b160
c0006944:	6a 31                	push   0x31
c0006946:	53                   	push   ebx
c0006947:	e8 34 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000694c:	83 c4 20             	add    esp,0x20
c000694f:	6a 00                	push   0x0
c0006951:	68 6a b1 01 c0       	push   0xc001b16a
c0006956:	6a 32                	push   0x32
c0006958:	53                   	push   ebx
c0006959:	e8 22 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000695e:	6a 00                	push   0x0
c0006960:	68 74 b1 01 c0       	push   0xc001b174
c0006965:	6a 33                	push   0x33
c0006967:	53                   	push   ebx
c0006968:	e8 13 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000696d:	83 c4 20             	add    esp,0x20
c0006970:	6a 00                	push   0x0
c0006972:	68 7e b1 01 c0       	push   0xc001b17e
c0006977:	6a 34                	push   0x34
c0006979:	53                   	push   ebx
c000697a:	e8 01 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000697f:	6a 00                	push   0x0
c0006981:	68 88 b1 01 c0       	push   0xc001b188
c0006986:	6a 35                	push   0x35
c0006988:	53                   	push   ebx
c0006989:	e8 f2 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000698e:	83 c4 20             	add    esp,0x20
c0006991:	6a 00                	push   0x0
c0006993:	68 92 b1 01 c0       	push   0xc001b192
c0006998:	6a 36                	push   0x36
c000699a:	53                   	push   ebx
c000699b:	e8 e0 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069a0:	6a 00                	push   0x0
c00069a2:	68 9c b1 01 c0       	push   0xc001b19c
c00069a7:	6a 37                	push   0x37
c00069a9:	53                   	push   ebx
c00069aa:	e8 d1 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069af:	83 c4 1c             	add    esp,0x1c
c00069b2:	6a 03                	push   0x3
c00069b4:	6a 02                	push   0x2
c00069b6:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c00069bc:	e8 75 24 00 00       	call   c0008e36 <VAS::allocatePages(int, int)>
c00069c1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00069c8:	89 c6                	mov    esi,eax
c00069ca:	e8 92 01 00 00       	call   c0006b61 <malloc>
c00069cf:	81 c6 00 20 00 00    	add    esi,0x2000
c00069d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00069d8:	89 c7                	mov    edi,eax
c00069da:	e8 01 16 00 00       	call   c0007fe0 <TSS::TSS()>
c00069df:	83 c4 0c             	add    esp,0xc
c00069e2:	68 26 b0 01 c0       	push   0xc001b026
c00069e7:	56                   	push   esi
c00069e8:	57                   	push   edi
c00069e9:	e8 36 16 00 00       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c00069ee:	89 c6                	mov    esi,eax
c00069f0:	58                   	pop    eax
c00069f1:	5a                   	pop    edx
c00069f2:	6a 00                	push   0x0
c00069f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f8:	50                   	push   eax
c00069f9:	e8 d6 fb ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c00069fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006a07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006a0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006a18:	80 ce 05             	or     dh,0x5
c0006a1b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006a1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006a22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a2c:	e8 87 fc ff ff       	call   c00066b8 <IDT::flush()>
c0006a31:	83 c4 20             	add    esp,0x20
c0006a34:	5b                   	pop    ebx
c0006a35:	5e                   	pop    esi
c0006a36:	5f                   	pop    edi
c0006a37:	c3                   	ret    

c0006a38 <sbrk>:
c0006a38:	55                   	push   ebp
c0006a39:	57                   	push   edi
c0006a3a:	56                   	push   esi
c0006a3b:	53                   	push   ebx
c0006a3c:	83 ec 1c             	sub    esp,0x1c
c0006a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006a43:	85 c0                	test   eax,eax
c0006a45:	74 5f                	je     c0006aa6 <sbrk+0x6e>
c0006a47:	78 64                	js     c0006aad <sbrk+0x75>
c0006a49:	8b 15 60 ea 01 c0    	mov    edx,DWORD PTR ds:0xc001ea60
c0006a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006a53:	05 ff 0f 00 00       	add    eax,0xfff
c0006a58:	89 c5                	mov    ebp,eax
c0006a5a:	78 69                	js     c0006ac5 <sbrk+0x8d>
c0006a5c:	c1 fd 0c             	sar    ebp,0xc
c0006a5f:	bb 00 00 00 00       	mov    ebx,0x0
c0006a64:	8b 35 90 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f390
c0006a6a:	8b 3d 60 ea 01 c0    	mov    edi,DWORD PTR ds:0xc001ea60
c0006a70:	e8 b9 04 00 00       	call   c0006f2e <Phys::allocatePage()>
c0006a75:	68 01 04 00 00       	push   0x401
c0006a7a:	57                   	push   edi
c0006a7b:	50                   	push   eax
c0006a7c:	56                   	push   esi
c0006a7d:	e8 b0 22 00 00       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006a82:	81 05 60 ea 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ea60,0x1000
c0006a8c:	43                   	inc    ebx
c0006a8d:	83 c4 10             	add    esp,0x10
c0006a90:	39 dd                	cmp    ebp,ebx
c0006a92:	75 d0                	jne    c0006a64 <sbrk+0x2c>
c0006a94:	0f 20 d8             	mov    eax,cr3
c0006a97:	0f 22 d8             	mov    cr3,eax
c0006a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a9e:	83 c4 1c             	add    esp,0x1c
c0006aa1:	5b                   	pop    ebx
c0006aa2:	5e                   	pop    esi
c0006aa3:	5f                   	pop    edi
c0006aa4:	5d                   	pop    ebp
c0006aa5:	c3                   	ret    
c0006aa6:	a1 60 ea 01 c0       	mov    eax,ds:0xc001ea60
c0006aab:	eb f1                	jmp    c0006a9e <sbrk+0x66>
c0006aad:	83 ec 08             	sub    esp,0x8
c0006ab0:	50                   	push   eax
c0006ab1:	68 94 ca 01 c0       	push   0xc001ca94
c0006ab6:	e8 35 2e 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006abb:	83 c4 10             	add    esp,0x10
c0006abe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ac3:	eb d9                	jmp    c0006a9e <sbrk+0x66>
c0006ac5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006acb:	eb 8f                	jmp    c0006a5c <sbrk+0x24>

c0006acd <mmap>:
c0006acd:	83 ec 18             	sub    esp,0x18
c0006ad0:	68 c4 ca 01 c0       	push   0xc001cac4
c0006ad5:	e8 65 89 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006ada:	b8 00 00 00 00       	mov    eax,0x0
c0006adf:	83 c4 1c             	add    esp,0x1c
c0006ae2:	c3                   	ret    

c0006ae3 <munmap>:
c0006ae3:	83 ec 18             	sub    esp,0x18
c0006ae6:	68 c9 ca 01 c0       	push   0xc001cac9
c0006aeb:	e8 4f 89 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006af0:	b8 00 00 00 00       	mov    eax,0x0
c0006af5:	83 c4 1c             	add    esp,0x1c
c0006af8:	c3                   	ret    

c0006af9 <liballoc_lock()>:
c0006af9:	fa                   	cli    
c0006afa:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0006b00:	b8 00 00 00 00       	mov    eax,0x0
c0006b05:	c3                   	ret    

c0006b06 <liballoc_unlock()>:
c0006b06:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0006b0b:	48                   	dec    eax
c0006b0c:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0006b11:	75 01                	jne    c0006b14 <liballoc_unlock()+0xe>
c0006b13:	fb                   	sti    
c0006b14:	b8 00 00 00 00       	mov    eax,0x0
c0006b19:	c3                   	ret    

c0006b1a <liballoc_alloc(int)>:
c0006b1a:	83 ec 10             	sub    esp,0x10
c0006b1d:	6a 01                	push   0x1
c0006b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b23:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c0006b29:	e8 08 23 00 00       	call   c0008e36 <VAS::allocatePages(int, int)>
c0006b2e:	83 c4 1c             	add    esp,0x1c
c0006b31:	c3                   	ret    

c0006b32 <liballoc_free(void*, int)>:
c0006b32:	83 ec 14             	sub    esp,0x14
c0006b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b39:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c0006b3f:	e8 ae 1f 00 00       	call   c0008af2 <VAS::freeAllocatedPages(unsigned long)>
c0006b44:	b8 00 00 00 00       	mov    eax,0x0
c0006b49:	83 c4 1c             	add    esp,0x1c
c0006b4c:	c3                   	ret    

c0006b4d <realloc>:
c0006b4d:	83 ec 14             	sub    esp,0x14
c0006b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b58:	e8 f4 a9 ff ff       	call   c0001551 <dlrealloc>
c0006b5d:	83 c4 1c             	add    esp,0x1c
c0006b60:	c3                   	ret    

c0006b61 <malloc>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b68:	e8 a7 a4 ff ff       	call   c0001014 <dlmalloc>
c0006b6d:	83 c4 1c             	add    esp,0x1c
c0006b70:	c3                   	ret    

c0006b71 <free>:
c0006b71:	83 ec 18             	sub    esp,0x18
c0006b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b78:	e8 3c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b7d:	83 c4 1c             	add    esp,0x1c
c0006b80:	c3                   	ret    

c0006b81 <rfree>:
c0006b81:	83 ec 18             	sub    esp,0x18
c0006b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b88:	e8 2c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b8d:	83 c4 1c             	add    esp,0x1c
c0006b90:	c3                   	ret    

c0006b91 <calloc>:
c0006b91:	56                   	push   esi
c0006b92:	53                   	push   ebx
c0006b93:	83 ec 10             	sub    esp,0x10
c0006b96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b9a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006b9f:	53                   	push   ebx
c0006ba0:	e8 bc ff ff ff       	call   c0006b61 <malloc>
c0006ba5:	89 c6                	mov    esi,eax
c0006ba7:	83 c4 0c             	add    esp,0xc
c0006baa:	53                   	push   ebx
c0006bab:	6a 00                	push   0x0
c0006bad:	50                   	push   eax
c0006bae:	e8 3d 99 ff ff       	call   c00004f0 <memset>
c0006bb3:	89 f0                	mov    eax,esi
c0006bb5:	83 c4 14             	add    esp,0x14
c0006bb8:	5b                   	pop    ebx
c0006bb9:	5e                   	pop    esi
c0006bba:	c3                   	ret    

c0006bbb <Krnl::setBootMessage(char const*)>:
c0006bbb:	57                   	push   edi
c0006bbc:	56                   	push   esi
c0006bbd:	53                   	push   ebx
c0006bbe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006bc4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006bcb:	68 9e 00 00 00       	push   0x9e
c0006bd0:	6a 00                	push   0x0
c0006bd2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006bd6:	56                   	push   esi
c0006bd7:	e8 14 99 ff ff       	call   c00004f0 <memset>
c0006bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006bdf:	e8 7c 99 ff ff       	call   c0000560 <strlen>
c0006be4:	ba 50 00 00 00       	mov    edx,0x50
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	29 c2                	sub    edx,eax
c0006bee:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006bf2:	d1 ea                	shr    edx,1
c0006bf4:	84 c0                	test   al,al
c0006bf6:	74 19                	je     c0006c11 <Krnl::setBootMessage(char const*)+0x56>
c0006bf8:	01 d2                	add    edx,edx
c0006bfa:	43                   	inc    ebx
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	80 cc 0f             	or     ah,0xf
c0006c00:	83 c2 02             	add    edx,0x2
c0006c03:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006c07:	43                   	inc    ebx
c0006c08:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006c0d:	84 c0                	test   al,al
c0006c0f:	75 ec                	jne    c0006bfd <Krnl::setBootMessage(char const*)+0x42>
c0006c11:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006c16:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c1d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006c23:	5b                   	pop    ebx
c0006c24:	5e                   	pop    esi
c0006c25:	5f                   	pop    edi
c0006c26:	c3                   	ret    

c0006c27 <kernel_main>:
c0006c27:	55                   	push   ebp
c0006c28:	57                   	push   edi
c0006c29:	bf f9 03 00 00       	mov    edi,0x3f9
c0006c2e:	56                   	push   esi
c0006c2f:	89 fa                	mov    edx,edi
c0006c31:	53                   	push   ebx
c0006c32:	31 f6                	xor    esi,esi
c0006c34:	83 ec 38             	sub    esp,0x38
c0006c37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006c3c:	a3 c0 f2 01 c0       	mov    ds:0xc001f2c0,eax
c0006c41:	89 f0                	mov    eax,esi
c0006c43:	ee                   	out    dx,al
c0006c44:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006c49:	b0 80                	mov    al,0x80
c0006c4b:	89 da                	mov    edx,ebx
c0006c4d:	ee                   	out    dx,al
c0006c4e:	b1 03                	mov    cl,0x3
c0006c50:	ba f8 03 00 00       	mov    edx,0x3f8
c0006c55:	88 c8                	mov    al,cl
c0006c57:	ee                   	out    dx,al
c0006c58:	89 f0                	mov    eax,esi
c0006c5a:	89 fa                	mov    edx,edi
c0006c5c:	ee                   	out    dx,al
c0006c5d:	88 c8                	mov    al,cl
c0006c5f:	89 da                	mov    edx,ebx
c0006c61:	ee                   	out    dx,al
c0006c62:	b0 c7                	mov    al,0xc7
c0006c64:	ba fa 03 00 00       	mov    edx,0x3fa
c0006c69:	ee                   	out    dx,al
c0006c6a:	b0 0b                	mov    al,0xb
c0006c6c:	ba fc 03 00 00       	mov    edx,0x3fc
c0006c71:	ee                   	out    dx,al
c0006c72:	68 d0 ca 01 c0       	push   0xc001cad0
c0006c77:	e8 74 2c 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006c7c:	0f be 05 80 ea 01 c0 	movsx  eax,BYTE PTR ds:0xc001ea80
c0006c83:	83 c4 10             	add    esp,0x10
c0006c86:	84 c0                	test   al,al
c0006c88:	74 5c                	je     c0006ce6 <kernel_main+0xbf>
c0006c8a:	31 db                	xor    ebx,ebx
c0006c8c:	bd 0a 00 00 00       	mov    ebp,0xa
c0006c91:	bf 05 00 00 00       	mov    edi,0x5
c0006c96:	31 f6                	xor    esi,esi
c0006c98:	eb 14                	jmp    c0006cae <kernel_main+0x87>
c0006c9a:	47                   	inc    edi
c0006c9b:	bd 0a 00 00 00       	mov    ebp,0xa
c0006ca0:	31 f6                	xor    esi,esi
c0006ca2:	43                   	inc    ebx
c0006ca3:	0f be 83 80 ea 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1580]
c0006caa:	84 c0                	test   al,al
c0006cac:	74 38                	je     c0006ce6 <kernel_main+0xbf>
c0006cae:	80 be b6 ea 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe154a],0xdb
c0006cb5:	0f 84 97 00 00 00    	je     c0006d52 <kernel_main+0x12b>
c0006cbb:	3c 0d                	cmp    al,0xd
c0006cbd:	74 e3                	je     c0006ca2 <kernel_main+0x7b>
c0006cbf:	3c 0a                	cmp    al,0xa
c0006cc1:	74 d7                	je     c0006c9a <kernel_main+0x73>
c0006cc3:	83 ec 0c             	sub    esp,0xc
c0006cc6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006cca:	57                   	push   edi
c0006ccb:	43                   	inc    ebx
c0006ccc:	52                   	push   edx
c0006ccd:	46                   	inc    esi
c0006cce:	6a 00                	push   0x0
c0006cd0:	6a 0e                	push   0xe
c0006cd2:	50                   	push   eax
c0006cd3:	e8 c4 e4 00 00       	call   c001519c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006cd8:	83 c4 20             	add    esp,0x20
c0006cdb:	0f be 83 80 ea 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1580]
c0006ce2:	84 c0                	test   al,al
c0006ce4:	75 c8                	jne    c0006cae <kernel_main+0x87>
c0006ce6:	83 ec 0c             	sub    esp,0xc
c0006ce9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006cee:	05 ff 0f 00 00       	add    eax,0xfff
c0006cf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006cf8:	50                   	push   eax
c0006cf9:	e8 82 03 00 00       	call   c0007080 <Phys::physicalMemorySetup(unsigned int)>
c0006cfe:	e8 59 1b 00 00       	call   c000885c <Virt::virtualMemorySetup()>
c0006d03:	58                   	pop    eax
c0006d04:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006d08:	53                   	push   ebx
c0006d09:	e8 0a 1c 00 00       	call   c0008918 <VAS::VAS()>
c0006d0e:	89 1d 90 f3 01 c0    	mov    DWORD PTR ds:0xc001f390,ebx
c0006d14:	e8 07 93 ff ff       	call   c0000020 <callGlobalConstructors>
c0006d19:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0006d20:	e8 3c fe ff ff       	call   c0006b61 <malloc>
c0006d25:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d28:	89 c6                	mov    esi,eax
c0006d2a:	e8 6b f1 ff ff       	call   c0005e9a <Computer::Computer()>
c0006d2f:	6a 00                	push   0x0
c0006d31:	89 35 a8 f2 01 c0    	mov    DWORD PTR ds:0xc001f2a8,esi
c0006d37:	6a 00                	push   0x0
c0006d39:	6a 00                	push   0x0
c0006d3b:	56                   	push   esi
c0006d3c:	e8 ff f4 ff ff       	call   c0006240 <Computer::open(int, int, void*)>
c0006d41:	83 c4 14             	add    esp,0x14
c0006d44:	53                   	push   ebx
c0006d45:	e8 84 1e 00 00       	call   c0008bce <VAS::~VAS()>
c0006d4a:	83 c4 3c             	add    esp,0x3c
c0006d4d:	5b                   	pop    ebx
c0006d4e:	5e                   	pop    esi
c0006d4f:	5f                   	pop    edi
c0006d50:	5d                   	pop    ebp
c0006d51:	c3                   	ret    
c0006d52:	31 d2                	xor    edx,edx
c0006d54:	8a 96 b5 ea 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe154b]
c0006d5a:	83 e2 fe             	and    edx,0xfffffffe
c0006d5d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006d63:	0f 85 52 ff ff ff    	jne    c0006cbb <kernel_main+0x94>
c0006d69:	45                   	inc    ebp
c0006d6a:	e9 4c ff ff ff       	jmp    c0006cbb <kernel_main+0x94>

c0006d6f <Phys::allocateDMA(unsigned long)>:
c0006d6f:	55                   	push   ebp
c0006d70:	31 ed                	xor    ebp,ebp
c0006d72:	57                   	push   edi
c0006d73:	56                   	push   esi
c0006d74:	53                   	push   ebx
c0006d75:	31 db                	xor    ebx,ebx
c0006d77:	83 ec 1c             	sub    esp,0x1c
c0006d7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006d7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006d86:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	c1 ef 0c             	shr    edi,0xc
c0006d91:	eb 19                	jmp    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006d93:	85 c0                	test   eax,eax
c0006d95:	75 06                	jne    c0006d9d <Phys::allocateDMA(unsigned long)+0x2e>
c0006d97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d9b:	89 dd                	mov    ebp,ebx
c0006d9d:	8d 70 01             	lea    esi,[eax+0x1]
c0006da0:	39 f7                	cmp    edi,esi
c0006da2:	74 33                	je     c0006dd7 <Phys::allocateDMA(unsigned long)+0x68>
c0006da4:	89 f0                	mov    eax,esi
c0006da6:	43                   	inc    ebx
c0006da7:	83 fb 0f             	cmp    ebx,0xf
c0006daa:	7f 11                	jg     c0006dbd <Phys::allocateDMA(unsigned long)+0x4e>
c0006dac:	80 bb dc f2 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0d24],0x0
c0006db3:	74 de                	je     c0006d93 <Phys::allocateDMA(unsigned long)+0x24>
c0006db5:	31 c0                	xor    eax,eax
c0006db7:	43                   	inc    ebx
c0006db8:	83 fb 0f             	cmp    ebx,0xf
c0006dbb:	7e ef                	jle    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	68 e8 ca 01 c0       	push   0xc001cae8
c0006dc5:	e8 75 86 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006dca:	83 c4 10             	add    esp,0x10
c0006dcd:	31 c0                	xor    eax,eax
c0006dcf:	83 c4 1c             	add    esp,0x1c
c0006dd2:	5b                   	pop    ebx
c0006dd3:	5e                   	pop    esi
c0006dd4:	5f                   	pop    edi
c0006dd5:	5d                   	pop    ebp
c0006dd6:	c3                   	ret    
c0006dd7:	89 e9                	mov    ecx,ebp
c0006dd9:	c1 f9 04             	sar    ecx,0x4
c0006ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006de0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006de4:	89 ca                	mov    edx,ecx
c0006de6:	4a                   	dec    edx
c0006de7:	79 03                	jns    c0006dec <Phys::allocateDMA(unsigned long)+0x7d>
c0006de9:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006dec:	c1 fa 04             	sar    edx,0x4
c0006def:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006df3:	74 08                	je     c0006dfd <Phys::allocateDMA(unsigned long)+0x8e>
c0006df5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006df9:	31 c0                	xor    eax,eax
c0006dfb:	eb ba                	jmp    c0006db7 <Phys::allocateDMA(unsigned long)+0x48>
c0006dfd:	85 f6                	test   esi,esi
c0006dff:	74 15                	je     c0006e16 <Phys::allocateDMA(unsigned long)+0xa7>
c0006e01:	8d 95 dc f2 01 c0    	lea    edx,[ebp-0x3ffe0d24]
c0006e07:	8d 84 05 dd f2 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0d23]
c0006e0e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006e11:	42                   	inc    edx
c0006e12:	39 d0                	cmp    eax,edx
c0006e14:	75 f8                	jne    c0006e0e <Phys::allocateDMA(unsigned long)+0x9f>
c0006e16:	01 3d d4 f2 01 c0    	add    DWORD PTR ds:0xc001f2d4,edi
c0006e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e20:	85 c0                	test   eax,eax
c0006e22:	74 17                	je     c0006e3b <Phys::allocateDMA(unsigned long)+0xcc>
c0006e24:	83 ec 0c             	sub    esp,0xc
c0006e27:	68 e8 ca 01 c0       	push   0xc001cae8
c0006e2c:	e8 0e 86 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006e31:	83 c4 10             	add    esp,0x10
c0006e34:	89 f0                	mov    eax,esi
c0006e36:	e9 6b ff ff ff       	jmp    c0006da6 <Phys::allocateDMA(unsigned long)+0x37>
c0006e3b:	c1 e5 0c             	shl    ebp,0xc
c0006e3e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006e44:	eb 89                	jmp    c0006dcf <Phys::allocateDMA(unsigned long)+0x60>

c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e4a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e54:	c1 ea 0c             	shr    edx,0xc
c0006e57:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006e5c:	29 15 d4 f2 01 c0    	sub    DWORD PTR ds:0xc001f2d4,edx
c0006e62:	c1 e8 0c             	shr    eax,0xc
c0006e65:	85 d2                	test   edx,edx
c0006e67:	74 0f                	je     c0006e78 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006e69:	05 dc f2 01 c0       	add    eax,0xc001f2dc
c0006e6e:	01 c2                	add    edx,eax
c0006e70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e73:	40                   	inc    eax
c0006e74:	39 d0                	cmp    eax,edx
c0006e76:	75 f8                	jne    c0006e70 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006e78:	c3                   	ret    

c0006e79 <Phys::setPageState(unsigned long, bool)>:
c0006e79:	56                   	push   esi
c0006e7a:	ba 01 00 00 00       	mov    edx,0x1
c0006e7f:	53                   	push   ebx
c0006e80:	8b 35 c4 eb 01 c0    	mov    esi,DWORD PTR ds:0xc001ebc4
c0006e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006e8e:	89 c8                	mov    eax,ecx
c0006e90:	83 e1 07             	and    ecx,0x7
c0006e93:	c1 e8 03             	shr    eax,0x3
c0006e96:	d3 e3                	shl    ebx,cl
c0006e98:	01 c6                	add    esi,eax
c0006e9a:	d3 e2                	shl    edx,cl
c0006e9c:	f7 d2                	not    edx
c0006e9e:	20 16                	and    BYTE PTR [esi],dl
c0006ea0:	03 05 c4 eb 01 c0    	add    eax,DWORD PTR ds:0xc001ebc4
c0006ea6:	08 18                	or     BYTE PTR [eax],bl
c0006ea8:	5b                   	pop    ebx
c0006ea9:	5e                   	pop    esi
c0006eaa:	c3                   	ret    

c0006eab <Phys::getPageState(unsigned long)>:
c0006eab:	53                   	push   ebx
c0006eac:	8b 15 c4 eb 01 c0    	mov    edx,DWORD PTR ds:0xc001ebc4
c0006eb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006eb6:	31 db                	xor    ebx,ebx
c0006eb8:	89 c8                	mov    eax,ecx
c0006eba:	83 e1 07             	and    ecx,0x7
c0006ebd:	c1 e8 03             	shr    eax,0x3
c0006ec0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006ec3:	89 d8                	mov    eax,ebx
c0006ec5:	5b                   	pop    ebx
c0006ec6:	d3 f8                	sar    eax,cl
c0006ec8:	83 e0 01             	and    eax,0x1
c0006ecb:	c3                   	ret    

c0006ecc <Phys::freePage(unsigned long)>:
c0006ecc:	53                   	push   ebx
c0006ecd:	83 ec 08             	sub    esp,0x8
c0006ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006eda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006ee0:	76 3a                	jbe    c0006f1c <Phys::freePage(unsigned long)+0x50>
c0006ee2:	c1 e8 0c             	shr    eax,0xc
c0006ee5:	50                   	push   eax
c0006ee6:	89 c3                	mov    ebx,eax
c0006ee8:	e8 be ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006eed:	5a                   	pop    edx
c0006eee:	84 c0                	test   al,al
c0006ef0:	74 19                	je     c0006f0b <Phys::freePage(unsigned long)+0x3f>
c0006ef2:	83 ec 08             	sub    esp,0x8
c0006ef5:	ff 0d d4 f2 01 c0    	dec    DWORD PTR ds:0xc001f2d4
c0006efb:	6a 00                	push   0x0
c0006efd:	53                   	push   ebx
c0006efe:	e8 76 ff ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006f03:	83 c4 10             	add    esp,0x10
c0006f06:	83 c4 08             	add    esp,0x8
c0006f09:	5b                   	pop    ebx
c0006f0a:	c3                   	ret    
c0006f0b:	c7 44 24 10 8d cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cb8d
c0006f13:	83 c4 08             	add    esp,0x8
c0006f16:	5b                   	pop    ebx
c0006f17:	e9 23 85 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0006f1c:	68 00 10 00 00       	push   0x1000
c0006f21:	50                   	push   eax
c0006f22:	e8 1f ff ff ff       	call   c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>
c0006f27:	59                   	pop    ecx
c0006f28:	5b                   	pop    ebx
c0006f29:	83 c4 08             	add    esp,0x8
c0006f2c:	5b                   	pop    ebx
c0006f2d:	c3                   	ret    

c0006f2e <Phys::allocatePage()>:
c0006f2e:	56                   	push   esi
c0006f2f:	53                   	push   ebx
c0006f30:	83 ec 14             	sub    esp,0x14
c0006f33:	8b 35 c8 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f2c8
c0006f39:	89 f3                	mov    ebx,esi
c0006f3b:	eb 0a                	jmp    c0006f47 <Phys::allocatePage()+0x19>
c0006f3d:	89 1d c8 f2 01 c0    	mov    DWORD PTR ds:0xc001f2c8,ebx
c0006f43:	39 de                	cmp    esi,ebx
c0006f45:	74 24                	je     c0006f6b <Phys::allocatePage()+0x3d>
c0006f47:	53                   	push   ebx
c0006f48:	e8 5e ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006f4d:	5a                   	pop    edx
c0006f4e:	84 c0                	test   al,al
c0006f50:	74 5f                	je     c0006fb1 <Phys::allocatePage()+0x83>
c0006f52:	43                   	inc    ebx
c0006f53:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006f59:	75 e2                	jne    c0006f3d <Phys::allocatePage()+0xf>
c0006f5b:	31 db                	xor    ebx,ebx
c0006f5d:	c7 05 c8 f2 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f2c8,0x0
c0006f67:	39 de                	cmp    esi,ebx
c0006f69:	75 dc                	jne    c0006f47 <Phys::allocatePage()+0x19>
c0006f6b:	83 ec 0c             	sub    esp,0xc
c0006f6e:	80 35 ec f2 01 c0 01 	xor    BYTE PTR ds:0xc001f2ec,0x1
c0006f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006f7d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0006f83:	50                   	push   eax
c0006f84:	e8 87 26 00 00       	call   c0009610 <VAS::scanForEviction()>
c0006f89:	83 c4 10             	add    esp,0x10
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	75 3f                	jne    c0006fcf <Phys::allocatePage()+0xa1>
c0006f90:	83 ec 0c             	sub    esp,0xc
c0006f93:	68 10 cb 01 c0       	push   0xc001cb10
c0006f98:	e8 a2 84 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006f9d:	83 c4 10             	add    esp,0x10
c0006fa0:	8b 1d c8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2c8
c0006fa6:	53                   	push   ebx
c0006fa7:	e8 ff fe ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006fac:	5a                   	pop    edx
c0006fad:	84 c0                	test   al,al
c0006faf:	75 a1                	jne    c0006f52 <Phys::allocatePage()+0x24>
c0006fb1:	6a 01                	push   0x1
c0006fb3:	53                   	push   ebx
c0006fb4:	e8 c0 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fb9:	a1 c8 f2 01 c0       	mov    eax,ds:0xc001f2c8
c0006fbe:	5a                   	pop    edx
c0006fbf:	ff 05 d4 f2 01 c0    	inc    DWORD PTR ds:0xc001f2d4
c0006fc5:	c1 e0 0c             	shl    eax,0xc
c0006fc8:	59                   	pop    ecx
c0006fc9:	83 c4 14             	add    esp,0x14
c0006fcc:	5b                   	pop    ebx
c0006fcd:	5e                   	pop    esi
c0006fce:	c3                   	ret    
c0006fcf:	83 ec 08             	sub    esp,0x8
c0006fd2:	89 c2                	mov    edx,eax
c0006fd4:	6a 01                	push   0x1
c0006fd6:	c1 ea 0c             	shr    edx,0xc
c0006fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006fdd:	52                   	push   edx
c0006fde:	e8 96 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fe3:	83 c4 10             	add    esp,0x10
c0006fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fea:	eb dd                	jmp    c0006fc9 <Phys::allocatePage()+0x9b>

c0006fec <Phys::allocateContiguousPages(int)>:
c0006fec:	57                   	push   edi
c0006fed:	56                   	push   esi
c0006fee:	53                   	push   ebx
c0006fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006ff3:	fa                   	cli    
c0006ff4:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0006ffa:	31 db                	xor    ebx,ebx
c0006ffc:	85 db                	test   ebx,ebx
c0006ffe:	75 11                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c0007000:	e8 29 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007005:	83 fe 01             	cmp    esi,0x1
c0007008:	89 c7                	mov    edi,eax
c000700a:	74 21                	je     c000702d <Phys::allocateContiguousPages(int)+0x41>
c000700c:	bb 01 00 00 00       	mov    ebx,0x1
c0007011:	e8 18 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007016:	89 da                	mov    edx,ebx
c0007018:	c1 e2 0c             	shl    edx,0xc
c000701b:	01 fa                	add    edx,edi
c000701d:	39 c2                	cmp    edx,eax
c000701f:	74 20                	je     c0007041 <Phys::allocateContiguousPages(int)+0x55>
c0007021:	bb 01 00 00 00       	mov    ebx,0x1
c0007026:	89 c7                	mov    edi,eax
c0007028:	83 fe 01             	cmp    esi,0x1
c000702b:	75 e4                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c000702d:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0007032:	48                   	dec    eax
c0007033:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0007038:	75 01                	jne    c000703b <Phys::allocateContiguousPages(int)+0x4f>
c000703a:	fb                   	sti    
c000703b:	89 f8                	mov    eax,edi
c000703d:	5b                   	pop    ebx
c000703e:	5e                   	pop    esi
c000703f:	5f                   	pop    edi
c0007040:	c3                   	ret    
c0007041:	43                   	inc    ebx
c0007042:	39 f3                	cmp    ebx,esi
c0007044:	75 b6                	jne    c0006ffc <Phys::allocateContiguousPages(int)+0x10>
c0007046:	eb e5                	jmp    c000702d <Phys::allocateContiguousPages(int)+0x41>

c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007048:	56                   	push   esi
c0007049:	53                   	push   ebx
c000704a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000704e:	39 1d cc f2 01 c0    	cmp    DWORD PTR ds:0xc001f2cc,ebx
c0007054:	73 06                	jae    c000705c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007056:	89 1d cc f2 01 c0    	mov    DWORD PTR ds:0xc001f2cc,ebx
c000705c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007060:	c1 eb 0c             	shr    ebx,0xc
c0007063:	c1 e8 0c             	shr    eax,0xc
c0007066:	39 d8                	cmp    eax,ebx
c0007068:	73 13                	jae    c000707d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000706a:	6a 00                	push   0x0
c000706c:	8d 70 01             	lea    esi,[eax+0x1]
c000706f:	50                   	push   eax
c0007070:	e8 04 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007075:	5a                   	pop    edx
c0007076:	89 f0                	mov    eax,esi
c0007078:	59                   	pop    ecx
c0007079:	39 f3                	cmp    ebx,esi
c000707b:	75 ed                	jne    c000706a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000707d:	5b                   	pop    ebx
c000707e:	5e                   	pop    esi
c000707f:	c3                   	ret    

c0007080 <Phys::physicalMemorySetup(unsigned int)>:
c0007080:	55                   	push   ebp
c0007081:	57                   	push   edi
c0007082:	56                   	push   esi
c0007083:	53                   	push   ebx
c0007084:	31 db                	xor    ebx,ebx
c0007086:	83 ec 40             	sub    esp,0x40
c0007089:	6a 10                	push   0x10
c000708b:	6a 00                	push   0x0
c000708d:	68 dc f2 01 c0       	push   0xc001f2dc
c0007092:	e8 59 94 ff ff       	call   c00004f0 <memset>
c0007097:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000709b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00070a0:	05 00 10 00 00       	add    eax,0x1000
c00070a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00070a9:	5a                   	pop    edx
c00070aa:	59                   	pop    ecx
c00070ab:	50                   	push   eax
c00070ac:	68 a3 cb 01 c0       	push   0xc001cba3
c00070b1:	e8 3a 28 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00070b6:	83 c4 10             	add    esp,0x10
c00070b9:	83 ec 08             	sub    esp,0x8
c00070bc:	6a 01                	push   0x1
c00070be:	53                   	push   ebx
c00070bf:	43                   	inc    ebx
c00070c0:	e8 b4 fd ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00070c5:	83 c4 10             	add    esp,0x10
c00070c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00070ce:	75 e9                	jne    c00070b9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00070d0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00070d6:	66 85 c0             	test   ax,ax
c00070d9:	0f 84 97 01 00 00    	je     c0007276 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00070df:	89 c7                	mov    edi,eax
c00070e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00070e9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00070ef:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00070f4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00070f8:	eb 15                	jmp    c000710f <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00070fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00070fe:	83 c3 18             	add    ebx,0x18
c0007101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007105:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007109:	0f 84 77 01 00 00    	je     c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000710f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007115:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000711c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007120:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007122:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007125:	01 f0                	add    eax,esi
c0007127:	55                   	push   ebp
c0007128:	11 fa                	adc    edx,edi
c000712a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000712e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007136:	50                   	push   eax
c0007137:	56                   	push   esi
c0007138:	68 40 cb 01 c0       	push   0xc001cb40
c000713d:	e8 ae 27 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0007142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007146:	83 c4 10             	add    esp,0x10
c0007149:	09 f8                	or     eax,edi
c000714b:	0f 85 35 01 00 00    	jne    c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007151:	4d                   	dec    ebp
c0007152:	75 a6                	jne    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007154:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007158:	ba 00 00 08 00       	mov    edx,0x80000
c000715d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007161:	39 f2                	cmp    edx,esi
c0007163:	89 c1                	mov    ecx,eax
c0007165:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000716d:	19 f9                	sbb    ecx,edi
c000716f:	0f 82 a7 00 00 00    	jb     c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007175:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007179:	89 c1                	mov    ecx,eax
c000717b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000717f:	0f 83 97 00 00 00    	jae    c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007185:	ba 00 00 0a 00       	mov    edx,0xa0000
c000718a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000718e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007192:	39 fa                	cmp    edx,edi
c0007194:	19 e8                	sbb    eax,ebp
c0007196:	0f 82 9a 01 00 00    	jb     c0007336 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000719c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00071a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00071a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00071aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00071af:	83 d5 ff             	adc    ebp,0xffffffff
c00071b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00071b6:	31 c0                	xor    eax,eax
c00071b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00071bc:	39 fa                	cmp    edx,edi
c00071be:	89 c1                	mov    ecx,eax
c00071c0:	19 e9                	sbb    ecx,ebp
c00071c2:	0f 83 32 ff ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00071c8:	be 00 00 08 00       	mov    esi,0x80000
c00071cd:	51                   	push   ecx
c00071ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00071d2:	57                   	push   edi
c00071d3:	56                   	push   esi
c00071d4:	68 64 cb 01 c0       	push   0xc001cb64
c00071d9:	e8 12 27 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00071de:	5d                   	pop    ebp
c00071df:	58                   	pop    eax
c00071e0:	57                   	push   edi
c00071e1:	56                   	push   esi
c00071e2:	e8 61 fe ff ff       	call   c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00071e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00071eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00071f6:	03 05 d8 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f2d8
c00071fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007203:	a3 d8 f2 01 c0       	mov    ds:0xc001f2d8,eax
c0007208:	52                   	push   edx
c0007209:	50                   	push   eax
c000720a:	68 c9 cb 01 c0       	push   0xc001cbc9
c000720f:	e8 dc 26 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0007214:	83 c4 10             	add    esp,0x10
c0007217:	e9 de fe ff ff       	jmp    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000721c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007228:	39 ea                	cmp    edx,ebp
c000722a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000722e:	0f 82 c6 fe ff ff    	jb     c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007234:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007239:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000723d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007241:	0f 83 b3 fe ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007247:	39 ee                	cmp    esi,ebp
c0007249:	89 f8                	mov    eax,edi
c000724b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000724f:	0f 83 78 ff ff ff    	jae    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000725d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007265:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000726d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007271:	e9 57 ff ff ff       	jmp    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007276:	83 ec 0c             	sub    esp,0xc
c0007279:	68 bb cb 01 c0       	push   0xc001cbbb
c000727e:	e8 bc 81 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007283:	83 c4 10             	add    esp,0x10
c0007286:	83 ec 08             	sub    esp,0x8
c0007289:	bb 60 00 00 00       	mov    ebx,0x60
c000728e:	6a 00                	push   0x0
c0007290:	6a 06                	push   0x6
c0007292:	e8 e2 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007297:	58                   	pop    eax
c0007298:	5a                   	pop    edx
c0007299:	6a 00                	push   0x0
c000729b:	6a 07                	push   0x7
c000729d:	e8 d7 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072a2:	83 05 d8 f2 01 c0 02 	add    DWORD PTR ds:0xc001f2d8,0x2
c00072a9:	83 c4 10             	add    esp,0x10
c00072ac:	83 ec 08             	sub    esp,0x8
c00072af:	6a 00                	push   0x0
c00072b1:	53                   	push   ebx
c00072b2:	43                   	inc    ebx
c00072b3:	e8 c1 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00072c1:	75 e9                	jne    c00072ac <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00072c3:	a1 d8 f2 01 c0       	mov    eax,ds:0xc001f2d8
c00072c8:	bb 40 01 00 00       	mov    ebx,0x140
c00072cd:	83 c0 20             	add    eax,0x20
c00072d0:	a3 d8 f2 01 c0       	mov    ds:0xc001f2d8,eax
c00072d5:	eb 22                	jmp    c00072f9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	6a 00                	push   0x0
c00072dc:	53                   	push   ebx
c00072dd:	43                   	inc    ebx
c00072de:	e8 96 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072e3:	a1 d8 f2 01 c0       	mov    eax,ds:0xc001f2d8
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	40                   	inc    eax
c00072ec:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00072f2:	a3 d8 f2 01 c0       	mov    ds:0xc001f2d8,eax
c00072f7:	74 07                	je     c0007300 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00072f9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00072fe:	7e d7                	jle    c00072d7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007300:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007305:	3d ff 07 00 00       	cmp    eax,0x7ff
c000730a:	7f 22                	jg     c000732e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000730c:	83 ec 08             	sub    esp,0x8
c000730f:	6a 00                	push   0x0
c0007311:	53                   	push   ebx
c0007312:	43                   	inc    ebx
c0007313:	e8 61 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007318:	a1 d8 f2 01 c0       	mov    eax,ds:0xc001f2d8
c000731d:	83 c4 10             	add    esp,0x10
c0007320:	40                   	inc    eax
c0007321:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007327:	a3 d8 f2 01 c0       	mov    ds:0xc001f2d8,eax
c000732c:	75 d7                	jne    c0007305 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000732e:	83 c4 3c             	add    esp,0x3c
c0007331:	5b                   	pop    ebx
c0007332:	5e                   	pop    esi
c0007333:	5f                   	pop    edi
c0007334:	5d                   	pop    ebp
c0007335:	c3                   	ret    
c0007336:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000733e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007346:	e9 51 fe ff ff       	jmp    c000719c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000734b:	90                   	nop

c000734c <Pipe::isAtty()>:
c000734c:	31 c0                	xor    eax,eax
c000734e:	c3                   	ret    
c000734f:	90                   	nop

c0007350 <Pipe::~Pipe()>:
c0007350:	83 ec 0c             	sub    esp,0xc
c0007353:	ba 28 cc 01 c0       	mov    edx,0xc001cc28
c0007358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000735c:	89 10                	mov    DWORD PTR [eax],edx
c000735e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007362:	83 ec 0c             	sub    esp,0xc
c0007365:	50                   	push   eax
c0007366:	e8 d1 10 00 00       	call   c000843c <UnixFile::~UnixFile()>
c000736b:	83 c4 10             	add    esp,0x10
c000736e:	90                   	nop
c000736f:	83 c4 0c             	add    esp,0xc
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <Pipe::~Pipe()>:
c0007374:	83 ec 0c             	sub    esp,0xc
c0007377:	83 ec 0c             	sub    esp,0xc
c000737a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000737e:	e8 cd ff ff ff       	call   c0007350 <Pipe::~Pipe()>
c0007383:	83 c4 10             	add    esp,0x10
c0007386:	83 ec 08             	sub    esp,0x8
c0007389:	6a 20                	push   0x20
c000738b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000738f:	e8 66 24 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	83 c4 0c             	add    esp,0xc
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <Pipe::write(unsigned long long, void*, int*)>:
c000739c:	55                   	push   ebp
c000739d:	57                   	push   edi
c000739e:	56                   	push   esi
c000739f:	53                   	push   ebx
c00073a0:	83 ec 1c             	sub    esp,0x1c
c00073a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00073a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00073ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00073ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00073b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00073b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00073b9:	89 d8                	mov    eax,ebx
c00073bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00073be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00073c2:	89 d6                	mov    esi,edx
c00073c4:	89 d7                	mov    edi,edx
c00073c6:	c1 ff 1f             	sar    edi,0x1f
c00073c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00073cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00073d0:	c1 f8 1f             	sar    eax,0x1f
c00073d3:	39 f3                	cmp    ebx,esi
c00073d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00073d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073dd:	19 f8                	sbb    eax,edi
c00073df:	b8 01 00 00 00       	mov    eax,0x1
c00073e4:	72 6e                	jb     c0007454 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00073e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00073e9:	01 d0                	add    eax,edx
c00073eb:	99                   	cdq    
c00073ec:	f7 fb                	idiv   ebx
c00073ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073f2:	29 d3                	sub    ebx,edx
c00073f4:	89 d7                	mov    edi,edx
c00073f6:	89 de                	mov    esi,ebx
c00073f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00073fb:	c1 fb 1f             	sar    ebx,0x1f
c00073fe:	39 f2                	cmp    edx,esi
c0007400:	19 d8                	sbb    eax,ebx
c0007402:	b8 00 00 00 00       	mov    eax,0x0
c0007407:	72 04                	jb     c000740d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007409:	89 d0                	mov    eax,edx
c000740b:	29 f0                	sub    eax,esi
c000740d:	89 d3                	mov    ebx,edx
c000740f:	29 c3                	sub    ebx,eax
c0007411:	74 0b                	je     c000741e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007413:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007416:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000741a:	89 d9                	mov    ecx,ebx
c000741c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000741e:	85 c0                	test   eax,eax
c0007420:	74 0d                	je     c000742f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007422:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007426:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007429:	89 de                	mov    esi,ebx
c000742b:	89 c1                	mov    ecx,eax
c000742d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000742f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007432:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007437:	75 10                	jne    c0007449 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007439:	83 ec 0c             	sub    esp,0xc
c000743c:	68 e5 cb 01 c0       	push   0xc001cbe5
c0007441:	e8 f9 7f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007446:	83 c4 10             	add    esp,0x10
c0007449:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000744d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007450:	89 08                	mov    DWORD PTR [eax],ecx
c0007452:	31 c0                	xor    eax,eax
c0007454:	83 c4 1c             	add    esp,0x1c
c0007457:	5b                   	pop    ebx
c0007458:	5e                   	pop    esi
c0007459:	5f                   	pop    edi
c000745a:	5d                   	pop    ebp
c000745b:	c3                   	ret    

c000745c <Pipe::read(unsigned long long, void*, int*)>:
c000745c:	55                   	push   ebp
c000745d:	57                   	push   edi
c000745e:	56                   	push   esi
c000745f:	53                   	push   ebx
c0007460:	83 ec 1c             	sub    esp,0x1c
c0007463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007467:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000746b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000746f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007472:	89 c8                	mov    eax,ecx
c0007474:	99                   	cdq    
c0007475:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007479:	74 24                	je     c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000747b:	39 f9                	cmp    ecx,edi
c000747d:	89 d1                	mov    ecx,edx
c000747f:	19 f1                	sbb    ecx,esi
c0007481:	73 1c                	jae    c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007483:	fa                   	cli    
c0007484:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c000748a:	e8 05 b3 00 00       	call   c0012794 <schedule()>
c000748f:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0007494:	48                   	dec    eax
c0007495:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000749a:	75 d3                	jne    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749c:	fb                   	sti    
c000749d:	eb d0                	jmp    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749f:	39 f8                	cmp    eax,edi
c00074a1:	89 d1                	mov    ecx,edx
c00074a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00074a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00074aa:	19 f1                	sbb    ecx,esi
c00074ac:	73 07                	jae    c00074b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00074ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00074b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00074b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00074bb:	29 f7                	sub    edi,esi
c00074bd:	89 f8                	mov    eax,edi
c00074bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00074c3:	99                   	cdq    
c00074c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00074c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074cb:	19 d0                	sbb    eax,edx
c00074cd:	73 07                	jae    c00074d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00074cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00074d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00074d9:	89 ea                	mov    edx,ebp
c00074db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00074df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00074e4:	74 0d                	je     c00074f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00074e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00074e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00074ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074f3:	85 d2                	test   edx,edx
c00074f5:	74 11                	je     c0007508 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00074f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00074fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0007502:	89 d1                	mov    ecx,edx
c0007504:	89 c7                	mov    edi,eax
c0007506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007508:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000750b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000750e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0007511:	99                   	cdq    
c0007512:	89 f7                	mov    edi,esi
c0007514:	03 04 24             	add    eax,DWORD PTR [esp]
c0007517:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000751b:	c1 ff 1f             	sar    edi,0x1f
c000751e:	57                   	push   edi
c000751f:	56                   	push   esi
c0007520:	52                   	push   edx
c0007521:	50                   	push   eax
c0007522:	e8 19 41 01 00       	call   c001b640 <__umoddi3>
c0007527:	83 c4 10             	add    esp,0x10
c000752a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000752d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007532:	75 10                	jne    c0007544 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007534:	83 ec 0c             	sub    esp,0xc
c0007537:	68 02 cc 01 c0       	push   0xc001cc02
c000753c:	e8 fe 7e 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007541:	83 c4 10             	add    esp,0x10
c0007544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007548:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000754b:	89 10                	mov    DWORD PTR [eax],edx
c000754d:	83 c4 1c             	add    esp,0x1c
c0007550:	31 c0                	xor    eax,eax
c0007552:	5b                   	pop    ebx
c0007553:	5e                   	pop    esi
c0007554:	5f                   	pop    edi
c0007555:	5d                   	pop    ebp
c0007556:	c3                   	ret    
c0007557:	90                   	nop

c0007558 <Pipe::Pipe(int)>:
c0007558:	83 ec 0c             	sub    esp,0xc
c000755b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755f:	83 ec 08             	sub    esp,0x8
c0007562:	6a 00                	push   0x0
c0007564:	50                   	push   eax
c0007565:	e8 f0 0c 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c000756a:	83 c4 10             	add    esp,0x10
c000756d:	ba 28 cc 01 c0       	mov    edx,0xc001cc28
c0007572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007576:	89 10                	mov    DWORD PTR [eax],edx
c0007578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000757c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007587:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007592:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000759d:	83 ec 0c             	sub    esp,0xc
c00075a0:	50                   	push   eax
c00075a1:	e8 bb f5 ff ff       	call   c0006b61 <malloc>
c00075a6:	83 c4 10             	add    esp,0x10
c00075a9:	89 c2                	mov    edx,eax
c00075ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00075b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00075ba:	90                   	nop
c00075bb:	83 c4 0c             	add    esp,0xc
c00075be:	c3                   	ret    
c00075bf:	90                   	nop

c00075c0 <VgaText::isAtty()>:
c00075c0:	b0 01                	mov    al,0x1
c00075c2:	c3                   	ret    
c00075c3:	90                   	nop

c00075c4 <VgaText::~VgaText()>:
c00075c4:	83 ec 0c             	sub    esp,0xc
c00075c7:	ba b0 cc 01 c0       	mov    edx,0xc001ccb0
c00075cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d0:	89 10                	mov    DWORD PTR [eax],edx
c00075d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d6:	83 ec 0c             	sub    esp,0xc
c00075d9:	50                   	push   eax
c00075da:	e8 5d 0e 00 00       	call   c000843c <UnixFile::~UnixFile()>
c00075df:	83 c4 10             	add    esp,0x10
c00075e2:	90                   	nop
c00075e3:	83 c4 0c             	add    esp,0xc
c00075e6:	c3                   	ret    
c00075e7:	90                   	nop

c00075e8 <VgaText::~VgaText()>:
c00075e8:	83 ec 0c             	sub    esp,0xc
c00075eb:	83 ec 0c             	sub    esp,0xc
c00075ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075f2:	e8 cd ff ff ff       	call   c00075c4 <VgaText::~VgaText()>
c00075f7:	83 c4 10             	add    esp,0x10
c00075fa:	83 ec 08             	sub    esp,0x8
c00075fd:	68 34 01 00 00       	push   0x134
c0007602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007606:	e8 ef 21 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c000760b:	83 c4 10             	add    esp,0x10
c000760e:	83 c4 0c             	add    esp,0xc
c0007611:	c3                   	ret    

c0007612 <VgaText::read(unsigned long long, void*, int*)>:
c0007612:	83 ec 10             	sub    esp,0x10
c0007615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007619:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000761d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007621:	e8 24 45 00 00       	call   c000bb4a <readKeyboard(VgaText*, char*, unsigned long)>
c0007626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000762a:	89 02                	mov    DWORD PTR [edx],eax
c000762c:	31 c0                	xor    eax,eax
c000762e:	83 c4 1c             	add    esp,0x1c
c0007631:	c3                   	ret    

c0007632 <setTerminalScrollLock(bool)>:
c0007632:	c3                   	ret    

c0007633 <doTerminalCycle()>:
c0007633:	c3                   	ret    

c0007634 <addToTerminalCycle(VgaText*)>:
c0007634:	c3                   	ret    

c0007635 <scrollTerminalScrollLock(int)>:
c0007635:	c3                   	ret    

c0007636 <VgaText::updateTitle()>:
c0007636:	c3                   	ret    
c0007637:	90                   	nop

c0007638 <VgaText::load()>:
c0007638:	c3                   	ret    
c0007639:	90                   	nop

c000763a <VgaText::updateCursor()>:
c000763a:	83 ec 14             	sub    esp,0x14
c000763d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007641:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007644:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007647:	e8 bc db 00 00       	call   c0015208 <HalConsoleCursorUpdate(int, int)>
c000764c:	83 c4 1c             	add    esp,0x1c
c000764f:	c3                   	ret    

c0007650 <VgaText::doANSI_SGR(int)>:
c0007650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007658:	85 d2                	test   edx,edx
c000765a:	75 0b                	jne    c0007667 <VgaText::doANSI_SGR(int)+0x17>
c000765c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000765f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007662:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007665:	eb 59                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007667:	83 fa 07             	cmp    edx,0x7
c000766a:	75 0b                	jne    c0007677 <VgaText::doANSI_SGR(int)+0x27>
c000766c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000766f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007672:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007675:	eb 49                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007677:	83 fa 1b             	cmp    edx,0x1b
c000767a:	74 e0                	je     c000765c <VgaText::doANSI_SGR(int)+0xc>
c000767c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000767f:	83 f9 07             	cmp    ecx,0x7
c0007682:	77 09                	ja     c000768d <VgaText::doANSI_SGR(int)+0x3d>
c0007684:	8b 14 8d 00 ec 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1400]
c000768b:	eb 20                	jmp    c00076ad <VgaText::doANSI_SGR(int)+0x5d>
c000768d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007690:	83 f9 07             	cmp    ecx,0x7
c0007693:	77 09                	ja     c000769e <VgaText::doANSI_SGR(int)+0x4e>
c0007695:	8b 14 8d 00 ec 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1400]
c000769c:	eb 22                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c000769e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00076a1:	83 f9 07             	cmp    ecx,0x7
c00076a4:	77 0b                	ja     c00076b1 <VgaText::doANSI_SGR(int)+0x61>
c00076a6:	8b 14 95 b8 ea 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1548]
c00076ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076b0:	c3                   	ret    
c00076b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00076b4:	83 f9 07             	cmp    ecx,0x7
c00076b7:	77 0a                	ja     c00076c3 <VgaText::doANSI_SGR(int)+0x73>
c00076b9:	8b 14 95 90 ea 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1570]
c00076c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076c3:	c3                   	ret    

c00076c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00076c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00076cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076d2:	c3                   	ret    
c00076d3:	90                   	nop

c00076d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00076d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00076df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076e2:	c3                   	ret    
c00076e3:	90                   	nop

c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00076e4:	53                   	push   ebx
c00076e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00076e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00076ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076f1:	51                   	push   ecx
c00076f2:	e8 cd ff ff ff       	call   c00076c4 <VgaText::setDefaultBgColour(VgaColour)>
c00076f7:	58                   	pop    eax
c00076f8:	5a                   	pop    edx
c00076f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00076fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007701:	5b                   	pop    ebx
c0007702:	eb d0                	jmp    c00076d4 <VgaText::setDefaultFgColour(VgaColour)>

c0007704 <VgaText::setTitleTextColour(VgaColour)>:
c0007704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000770c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000770f:	c3                   	ret    

c0007710 <VgaText::setTitleColour(VgaColour)>:
c0007710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007718:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000771b:	c3                   	ret    

c000771c <VgaText::setTitle(char*)>:
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <VgaText::combineColours(unsigned char, unsigned char)>:
c000771e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007727:	83 e0 0f             	and    eax,0xf
c000772a:	c1 e2 04             	shl    edx,0x4
c000772d:	09 d0                	or     eax,edx
c000772f:	c3                   	ret    

c0007730 <VgaText::scrollScreen()>:
c0007730:	55                   	push   ebp
c0007731:	b9 01 00 00 00       	mov    ecx,0x1
c0007736:	57                   	push   edi
c0007737:	56                   	push   esi
c0007738:	53                   	push   ebx
c0007739:	83 ec 0c             	sub    esp,0xc
c000773c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007746:	31 ff                	xor    edi,edi
c0007748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000774b:	83 f9 18             	cmp    ecx,0x18
c000774e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007758:	75 27                	jne    c0007781 <VgaText::scrollScreen()+0x51>
c000775a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000775d:	01 f5                	add    ebp,esi
c000775f:	f7 c7 01 00 00 00    	test   edi,0x1
c0007765:	74 16                	je     c000777d <VgaText::scrollScreen()+0x4d>
c0007767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000776b:	50                   	push   eax
c000776c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007770:	50                   	push   eax
c0007771:	e8 a8 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007776:	5a                   	pop    edx
c0007777:	5a                   	pop    edx
c0007778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000777b:	eb 04                	jmp    c0007781 <VgaText::scrollScreen()+0x51>
c000777d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007781:	47                   	inc    edi
c0007782:	46                   	inc    esi
c0007783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007789:	75 bd                	jne    c0007748 <VgaText::scrollScreen()+0x18>
c000778b:	41                   	inc    ecx
c000778c:	83 f9 19             	cmp    ecx,0x19
c000778f:	75 af                	jne    c0007740 <VgaText::scrollScreen()+0x10>
c0007791:	39 1d f4 f2 01 c0    	cmp    DWORD PTR ds:0xc001f2f4,ebx
c0007797:	75 1f                	jne    c00077b8 <VgaText::scrollScreen()+0x88>
c0007799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000779d:	74 05                	je     c00077a4 <VgaText::scrollScreen()+0x74>
c000779f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00077a2:	eb 14                	jmp    c00077b8 <VgaText::scrollScreen()+0x88>
c00077a4:	50                   	push   eax
c00077a5:	50                   	push   eax
c00077a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00077aa:	50                   	push   eax
c00077ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00077af:	50                   	push   eax
c00077b0:	e8 df d8 00 00       	call   c0015094 <HalConsoleScroll(int, int)>
c00077b5:	83 c4 10             	add    esp,0x10
c00077b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00077bc:	83 c4 0c             	add    esp,0xc
c00077bf:	5b                   	pop    ebx
c00077c0:	5e                   	pop    esi
c00077c1:	5f                   	pop    edi
c00077c2:	5d                   	pop    ebp
c00077c3:	e9 72 fe ff ff       	jmp    c000763a <VgaText::updateCursor()>

c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00077c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00077cd:	c1 e0 08             	shl    eax,0x8
c00077d0:	89 c2                	mov    edx,eax
c00077d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00077d7:	09 d0                	or     eax,edx
c00077d9:	c3                   	ret    

c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00077da:	55                   	push   ebp
c00077db:	57                   	push   edi
c00077dc:	56                   	push   esi
c00077dd:	53                   	push   ebx
c00077de:	83 ec 1c             	sub    esp,0x1c
c00077e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00077e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00077ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00077f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00077f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00077f9:	0f b6 c3             	movzx  eax,bl
c00077fc:	50                   	push   eax
c00077fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0007802:	50                   	push   eax
c0007803:	e8 16 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007808:	5a                   	pop    edx
c0007809:	0f b6 c0             	movzx  eax,al
c000780c:	59                   	pop    ecx
c000780d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007812:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007816:	50                   	push   eax
c0007817:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000781b:	e8 a8 ff ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007820:	5a                   	pop    edx
c0007821:	66 6b d7 50          	imul   dx,di,0x50
c0007825:	59                   	pop    ecx
c0007826:	01 f2                	add    edx,esi
c0007828:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000782b:	0f b7 d2             	movzx  edx,dx
c000782e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007832:	39 2d f4 f2 01 c0    	cmp    DWORD PTR ds:0xc001f2f4,ebp
c0007838:	75 28                	jne    c0007862 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000783a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000783e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007842:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007846:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000784a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000784e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007852:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007856:	83 c4 1c             	add    esp,0x1c
c0007859:	5b                   	pop    ebx
c000785a:	5e                   	pop    esi
c000785b:	5f                   	pop    edi
c000785c:	5d                   	pop    ebp
c000785d:	e9 3a d9 00 00       	jmp    c001519c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007862:	83 c4 1c             	add    esp,0x1c
c0007865:	5b                   	pop    ebx
c0007866:	5e                   	pop    esi
c0007867:	5f                   	pop    edi
c0007868:	5d                   	pop    ebp
c0007869:	c3                   	ret    

c000786a <VgaText::getCursorX()>:
c000786a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000786e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007871:	c3                   	ret    

c0007872 <VgaText::getCursorY()>:
c0007872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007876:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007879:	c3                   	ret    

c000787a <VgaText::setCursor(int, int)>:
c000787a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000787e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007882:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000788c:	e9 a9 fd ff ff       	jmp    c000763a <VgaText::updateCursor()>

c0007891 <setActiveTerminal(VgaText*)>:
c0007891:	53                   	push   ebx
c0007892:	83 ec 08             	sub    esp,0x8
c0007895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007899:	85 db                	test   ebx,ebx
c000789b:	75 11                	jne    c00078ae <setActiveTerminal(VgaText*)+0x1d>
c000789d:	c7 44 24 10 3c cc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cc3c
c00078a5:	83 c4 08             	add    esp,0x8
c00078a8:	5b                   	pop    ebx
c00078a9:	e9 91 7b 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c00078ae:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c00078b3:	85 c0                	test   eax,eax
c00078b5:	74 0c                	je     c00078c3 <setActiveTerminal(VgaText*)+0x32>
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	50                   	push   eax
c00078bb:	e8 7a fd ff ff       	call   c000763a <VgaText::updateCursor()>
c00078c0:	83 c4 10             	add    esp,0x10
c00078c3:	89 1d f4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2f4,ebx
c00078c9:	50                   	push   eax
c00078ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00078cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00078d0:	53                   	push   ebx
c00078d1:	e8 a4 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078d6:	83 c4 18             	add    esp,0x18
c00078d9:	5b                   	pop    ebx
c00078da:	c3                   	ret    
c00078db:	90                   	nop

c00078dc <VgaText::clearScreen()>:
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	31 f6                	xor    esi,esi
c00078e0:	53                   	push   ebx
c00078e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00078e5:	52                   	push   edx
c00078e6:	6a 00                	push   0x0
c00078e8:	6a 00                	push   0x0
c00078ea:	53                   	push   ebx
c00078eb:	e8 8a ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00078f7:	83 c4 10             	add    esp,0x10
c00078fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00078fd:	7e 20                	jle    c000791f <VgaText::clearScreen()+0x43>
c00078ff:	31 ff                	xor    edi,edi
c0007901:	50                   	push   eax
c0007902:	50                   	push   eax
c0007903:	56                   	push   esi
c0007904:	57                   	push   edi
c0007905:	47                   	inc    edi
c0007906:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007909:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000790c:	6a 20                	push   0x20
c000790e:	53                   	push   ebx
c000790f:	e8 c6 fe ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007914:	83 c4 20             	add    esp,0x20
c0007917:	83 ff 50             	cmp    edi,0x50
c000791a:	75 e5                	jne    c0007901 <VgaText::clearScreen()+0x25>
c000791c:	46                   	inc    esi
c000791d:	eb db                	jmp    c00078fa <VgaText::clearScreen()+0x1e>
c000791f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007926:	5b                   	pop    ebx
c0007927:	5e                   	pop    esi
c0007928:	5f                   	pop    edi
c0007929:	c3                   	ret    

c000792a <VgaText::setCursorX(int)>:
c000792a:	83 ec 10             	sub    esp,0x10
c000792d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007931:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007938:	50                   	push   eax
c0007939:	e8 3c ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c000793e:	83 c4 1c             	add    esp,0x1c
c0007941:	c3                   	ret    

c0007942 <VgaText::setCursorY(int)>:
c0007942:	83 ec 10             	sub    esp,0x10
c0007945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000794d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007950:	50                   	push   eax
c0007951:	e8 24 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007956:	83 c4 1c             	add    esp,0x1c
c0007959:	c3                   	ret    

c000795a <VgaText::incrementCursor(bool)>:
c000795a:	56                   	push   esi
c000795b:	53                   	push   ebx
c000795c:	51                   	push   ecx
c000795d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007961:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007965:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007968:	40                   	inc    eax
c0007969:	83 f8 50             	cmp    eax,0x50
c000796c:	74 05                	je     c0007973 <VgaText::incrementCursor(bool)+0x19>
c000796e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007971:	eb 24                	jmp    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007973:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007976:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000797d:	8d 50 01             	lea    edx,[eax+0x1]
c0007980:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007983:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007986:	75 0f                	jne    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007988:	83 ec 0c             	sub    esp,0xc
c000798b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000798e:	53                   	push   ebx
c000798f:	e8 9c fd ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007994:	83 c4 10             	add    esp,0x10
c0007997:	89 f0                	mov    eax,esi
c0007999:	84 c0                	test   al,al
c000799b:	74 0c                	je     c00079a9 <VgaText::incrementCursor(bool)+0x4f>
c000799d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00079a1:	5a                   	pop    edx
c00079a2:	5b                   	pop    ebx
c00079a3:	5e                   	pop    esi
c00079a4:	e9 91 fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079a9:	58                   	pop    eax
c00079aa:	5b                   	pop    ebx
c00079ab:	5e                   	pop    esi
c00079ac:	c3                   	ret    
c00079ad:	90                   	nop

c00079ae <VgaText::decrementCursor(bool)>:
c00079ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00079b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00079b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00079b9:	85 c0                	test   eax,eax
c00079bb:	74 04                	je     c00079c1 <VgaText::decrementCursor(bool)+0x13>
c00079bd:	48                   	dec    eax
c00079be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00079c1:	84 c9                	test   cl,cl
c00079c3:	74 09                	je     c00079ce <VgaText::decrementCursor(bool)+0x20>
c00079c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079c9:	e9 6c fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079ce:	c3                   	ret    
c00079cf:	90                   	nop

c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 08             	sub    esp,0x8
c00079d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00079d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00079e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00079e4:	3c 07                	cmp    al,0x7
c00079e6:	75 21                	jne    c0007a09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00079e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00079f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007a00:	83 c4 08             	add    esp,0x8
c0007a03:	5b                   	pop    ebx
c0007a04:	e9 3e 2d 00 00       	jmp    c000a747 <Krnl::beep(int, int, bool)>
c0007a09:	3c 0d                	cmp    al,0xd
c0007a0b:	75 09                	jne    c0007a16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007a0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a14:	eb 2c                	jmp    c0007a42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007a16:	3c 0a                	cmp    al,0xa
c0007a18:	75 31                	jne    c0007a4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007a1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a24:	8d 50 01             	lea    edx,[eax+0x1]
c0007a27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a2d:	75 0f                	jne    c0007a3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007a2f:	83 ec 0c             	sub    esp,0xc
c0007a32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a35:	53                   	push   ebx
c0007a36:	e8 f5 fc ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007a3b:	83 c4 10             	add    esp,0x10
c0007a3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007a42:	83 c4 08             	add    esp,0x8
c0007a45:	5b                   	pop    ebx
c0007a46:	e9 ef fb ff ff       	jmp    c000763a <VgaText::updateCursor()>
c0007a4b:	3c 08                	cmp    al,0x8
c0007a4d:	75 25                	jne    c0007a74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007a4f:	50                   	push   eax
c0007a50:	50                   	push   eax
c0007a51:	6a 01                	push   0x1
c0007a53:	53                   	push   ebx
c0007a54:	e8 55 ff ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007a59:	5a                   	pop    edx
c0007a5a:	59                   	pop    ecx
c0007a5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a67:	6a 20                	push   0x20
c0007a69:	53                   	push   ebx
c0007a6a:	e8 6b fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a6f:	83 c4 28             	add    esp,0x28
c0007a72:	5b                   	pop    ebx
c0007a73:	c3                   	ret    
c0007a74:	83 ec 08             	sub    esp,0x8
c0007a77:	0f be c0             	movsx  eax,al
c0007a7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a80:	51                   	push   ecx
c0007a81:	52                   	push   edx
c0007a82:	50                   	push   eax
c0007a83:	53                   	push   ebx
c0007a84:	e8 51 fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007a8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007a95:	83 c4 28             	add    esp,0x28
c0007a98:	5b                   	pop    ebx
c0007a99:	e9 bc fe ff ff       	jmp    c000795a <VgaText::incrementCursor(bool)>

c0007a9e <VgaText::putchar(char)>:
c0007a9e:	56                   	push   esi
c0007a9f:	53                   	push   ebx
c0007aa0:	83 ec 14             	sub    esp,0x14
c0007aa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aa7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aab:	3c 5b                	cmp    al,0x5b
c0007aad:	75 18                	jne    c0007ac7 <VgaText::putchar(char)+0x29>
c0007aaf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007ab3:	74 1f                	je     c0007ad4 <VgaText::putchar(char)+0x36>
c0007ab5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007abb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007ac2:	e9 bd 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ac7:	3c 1b                	cmp    al,0x1b
c0007ac9:	75 09                	jne    c0007ad4 <VgaText::putchar(char)+0x36>
c0007acb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007acf:	e9 b0 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ad4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007ad7:	84 c9                	test   cl,cl
c0007ad9:	0f 84 92 00 00 00    	je     c0007b71 <VgaText::putchar(char)+0xd3>
c0007adf:	8d 50 c0             	lea    edx,[eax-0x40]
c0007ae2:	80 fa 3e             	cmp    dl,0x3e
c0007ae5:	77 76                	ja     c0007b5d <VgaText::putchar(char)+0xbf>
c0007ae7:	3c 6d                	cmp    al,0x6d
c0007ae9:	75 47                	jne    c0007b32 <VgaText::putchar(char)+0x94>
c0007aeb:	31 f6                	xor    esi,esi
c0007aed:	31 d2                	xor    edx,edx
c0007aef:	31 c0                	xor    eax,eax
c0007af1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007af4:	7e 2d                	jle    c0007b23 <VgaText::putchar(char)+0x85>
c0007af6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007afb:	80 fa 3b             	cmp    dl,0x3b
c0007afe:	75 17                	jne    c0007b17 <VgaText::putchar(char)+0x79>
c0007b00:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	e8 45 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b0b:	59                   	pop    ecx
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	58                   	pop    eax
c0007b0f:	31 c0                	xor    eax,eax
c0007b11:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007b15:	eb 09                	jmp    c0007b20 <VgaText::putchar(char)+0x82>
c0007b17:	6b c0 0a             	imul   eax,eax,0xa
c0007b1a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007b1e:	88 ca                	mov    dl,cl
c0007b20:	46                   	inc    esi
c0007b21:	eb ce                	jmp    c0007af1 <VgaText::putchar(char)+0x53>
c0007b23:	84 d2                	test   dl,dl
c0007b25:	74 2e                	je     c0007b55 <VgaText::putchar(char)+0xb7>
c0007b27:	50                   	push   eax
c0007b28:	53                   	push   ebx
c0007b29:	e8 22 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b2e:	58                   	pop    eax
c0007b2f:	5a                   	pop    edx
c0007b30:	eb 23                	jmp    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b32:	3c 4a                	cmp    al,0x4a
c0007b34:	75 1f                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007b3a:	75 19                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b3c:	83 ec 0c             	sub    esp,0xc
c0007b3f:	53                   	push   ebx
c0007b40:	e8 97 fd ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007b45:	83 c4 0c             	add    esp,0xc
c0007b48:	6a 00                	push   0x0
c0007b4a:	6a 00                	push   0x0
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 28 fd ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007b52:	83 c4 10             	add    esp,0x10
c0007b55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007b5b:	eb 27                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b5d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007b60:	83 fa 0e             	cmp    edx,0xe
c0007b63:	7f 1f                	jg     c0007b84 <VgaText::putchar(char)+0xe6>
c0007b65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007b68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007b6b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007b6f:	eb 13                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b74:	0f be c0             	movsx  eax,al
c0007b77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b7a:	50                   	push   eax
c0007b7b:	53                   	push   ebx
c0007b7c:	e8 4f fe ff ff       	call   c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007b81:	83 c4 10             	add    esp,0x10
c0007b84:	83 c4 14             	add    esp,0x14
c0007b87:	5b                   	pop    ebx
c0007b88:	5e                   	pop    esi
c0007b89:	c3                   	ret    

c0007b8a <VgaText::putx(unsigned int)>:
c0007b8a:	57                   	push   edi
c0007b8b:	b9 11 00 00 00       	mov    ecx,0x11
c0007b90:	56                   	push   esi
c0007b91:	be 4a cc 01 c0       	mov    esi,0xc001cc4a
c0007b96:	53                   	push   ebx
c0007b97:	83 ec 20             	sub    esp,0x20
c0007b9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007b9e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007ba2:	fc                   	cld    
c0007ba3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ba5:	be 08 00 00 00       	mov    esi,0x8
c0007baa:	50                   	push   eax
c0007bab:	50                   	push   eax
c0007bac:	89 d8                	mov    eax,ebx
c0007bae:	c1 e3 04             	shl    ebx,0x4
c0007bb1:	c1 e8 1c             	shr    eax,0x1c
c0007bb4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007bb9:	50                   	push   eax
c0007bba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007bbe:	e8 db fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bc3:	83 c4 10             	add    esp,0x10
c0007bc6:	4e                   	dec    esi
c0007bc7:	75 e1                	jne    c0007baa <VgaText::putx(unsigned int)+0x20>
c0007bc9:	83 c4 20             	add    esp,0x20
c0007bcc:	5b                   	pop    ebx
c0007bcd:	5e                   	pop    esi
c0007bce:	5f                   	pop    edi
c0007bcf:	c3                   	ret    

c0007bd0 <VgaText::puts(char const*)>:
c0007bd0:	53                   	push   ebx
c0007bd1:	83 ec 08             	sub    esp,0x8
c0007bd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007bd8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007bdb:	84 c0                	test   al,al
c0007bdd:	74 12                	je     c0007bf1 <VgaText::puts(char const*)+0x21>
c0007bdf:	43                   	inc    ebx
c0007be0:	51                   	push   ecx
c0007be1:	51                   	push   ecx
c0007be2:	50                   	push   eax
c0007be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007be7:	e8 b2 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bec:	83 c4 10             	add    esp,0x10
c0007bef:	eb e7                	jmp    c0007bd8 <VgaText::puts(char const*)+0x8>
c0007bf1:	83 c4 08             	add    esp,0x8
c0007bf4:	5b                   	pop    ebx
c0007bf5:	c3                   	ret    

c0007bf6 <VgaText::write(unsigned long long, void*, int*)>:
c0007bf6:	55                   	push   ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	53                   	push   ebx
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007c01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007c09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007c10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007c13:	39 eb                	cmp    ebx,ebp
c0007c15:	74 13                	je     c0007c2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007c17:	43                   	inc    ebx
c0007c18:	50                   	push   eax
c0007c19:	50                   	push   eax
c0007c1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007c1e:	50                   	push   eax
c0007c1f:	56                   	push   esi
c0007c20:	e8 79 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007c25:	83 c4 10             	add    esp,0x10
c0007c28:	eb e9                	jmp    c0007c13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007c2a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c35:	89 38                	mov    DWORD PTR [eax],edi
c0007c37:	83 c4 0c             	add    esp,0xc
c0007c3a:	31 c0                	xor    eax,eax
c0007c3c:	5b                   	pop    ebx
c0007c3d:	5e                   	pop    esi
c0007c3e:	5f                   	pop    edi
c0007c3f:	5d                   	pop    ebp
c0007c40:	c3                   	ret    
c0007c41:	90                   	nop

c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007c42:	55                   	push   ebp
c0007c43:	57                   	push   edi
c0007c44:	56                   	push   esi
c0007c45:	53                   	push   ebx
c0007c46:	83 ec 0c             	sub    esp,0xc
c0007c49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007c59:	50                   	push   eax
c0007c5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c5f:	50                   	push   eax
c0007c60:	e8 b9 fa ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007c65:	5a                   	pop    edx
c0007c66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c6b:	59                   	pop    ecx
c0007c6c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007c6f:	89 c5                	mov    ebp,eax
c0007c71:	0f b7 f6             	movzx  esi,si
c0007c74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c78:	01 f6                	add    esi,esi
c0007c7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c7d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007c80:	84 c0                	test   al,al
c0007c82:	0f 84 f4 00 00 00    	je     c0007d7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007c88:	3c 0d                	cmp    al,0xd
c0007c8a:	75 0c                	jne    c0007c98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007c8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c93:	e9 de 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007c98:	3c 0a                	cmp    al,0xa
c0007c9a:	75 45                	jne    c0007ce1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007c9c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007c9f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ca6:	8d 48 01             	lea    ecx,[eax+0x1]
c0007ca9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007cac:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007caf:	75 0f                	jne    c0007cc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007cb7:	53                   	push   ebx
c0007cb8:	e8 73 fa ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	83 ec 0c             	sub    esp,0xc
c0007cc3:	53                   	push   ebx
c0007cc4:	e8 71 f9 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007cc9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007cce:	83 c4 10             	add    esp,0x10
c0007cd1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007cd4:	0f b7 f6             	movzx  esi,si
c0007cd7:	01 f6                	add    esi,esi
c0007cd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007cdc:	e9 95 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007ce1:	3c 08                	cmp    al,0x8
c0007ce3:	75 35                	jne    c0007d1a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007ce5:	51                   	push   ecx
c0007ce6:	51                   	push   ecx
c0007ce7:	6a 01                	push   0x1
c0007ce9:	53                   	push   ebx
c0007cea:	e8 bf fc ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007cef:	5e                   	pop    esi
c0007cf0:	58                   	pop    eax
c0007cf1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007cf4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007cf7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007cfa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007cfd:	6a 20                	push   0x20
c0007cff:	53                   	push   ebx
c0007d00:	e8 d5 fa ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007d05:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d0a:	83 c4 20             	add    esp,0x20
c0007d0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d10:	0f b7 f6             	movzx  esi,si
c0007d13:	01 f6                	add    esi,esi
c0007d15:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d18:	eb 5c                	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d1a:	52                   	push   edx
c0007d1b:	52                   	push   edx
c0007d1c:	89 ea                	mov    edx,ebp
c0007d1e:	0f b6 ca             	movzx  ecx,dl
c0007d21:	51                   	push   ecx
c0007d22:	50                   	push   eax
c0007d23:	e8 a0 fa ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007d28:	83 c4 10             	add    esp,0x10
c0007d2b:	66 89 06             	mov    WORD PTR [esi],ax
c0007d2e:	39 1d f4 f2 01 c0    	cmp    DWORD PTR ds:0xc001f2f4,ebx
c0007d34:	75 1d                	jne    c0007d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007d36:	83 ec 0c             	sub    esp,0xc
c0007d39:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007d3c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007d3f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d47:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d4a:	50                   	push   eax
c0007d4b:	e8 4c d4 00 00       	call   c001519c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007d50:	83 c4 20             	add    esp,0x20
c0007d53:	83 c6 02             	add    esi,0x2
c0007d56:	50                   	push   eax
c0007d57:	50                   	push   eax
c0007d58:	6a 00                	push   0x0
c0007d5a:	53                   	push   ebx
c0007d5b:	e8 fa fb ff ff       	call   c000795a <VgaText::incrementCursor(bool)>
c0007d60:	83 c4 10             	add    esp,0x10
c0007d63:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007d67:	75 0d                	jne    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d69:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d6e:	0f b7 f6             	movzx  esi,si
c0007d71:	01 f6                	add    esi,esi
c0007d73:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d76:	47                   	inc    edi
c0007d77:	e9 01 ff ff ff       	jmp    c0007c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007d7c:	83 ec 0c             	sub    esp,0xc
c0007d7f:	53                   	push   ebx
c0007d80:	e8 b5 f8 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007d85:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007d8c:	83 c4 1c             	add    esp,0x1c
c0007d8f:	5b                   	pop    ebx
c0007d90:	5e                   	pop    esi
c0007d91:	5f                   	pop    edi
c0007d92:	5d                   	pop    ebp
c0007d93:	c3                   	ret    

c0007d94 <VgaText::VgaText(char const*)>:
c0007d94:	56                   	push   esi
c0007d95:	53                   	push   ebx
c0007d96:	83 ec 04             	sub    esp,0x4
c0007d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9d:	83 ec 08             	sub    esp,0x8
c0007da0:	6a 00                	push   0x0
c0007da2:	50                   	push   eax
c0007da3:	e8 b2 04 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c0007da8:	83 c4 10             	add    esp,0x10
c0007dab:	ba b0 cc 01 c0       	mov    edx,0xc001ccb0
c0007db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db4:	89 10                	mov    DWORD PTR [eax],edx
c0007db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dc5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007de0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007deb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e01:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e0c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007e13:	83 ec 0c             	sub    esp,0xc
c0007e16:	6a 01                	push   0x1
c0007e18:	e8 80 08 00 00       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0007e1d:	83 c4 10             	add    esp,0x10
c0007e20:	89 c2                	mov    edx,eax
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007e29:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c0007e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e36:	89 c6                	mov    esi,eax
c0007e38:	e8 f1 f0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007e3d:	68 05 0c 00 00       	push   0xc05
c0007e42:	56                   	push   esi
c0007e43:	50                   	push   eax
c0007e44:	53                   	push   ebx
c0007e45:	e8 e8 0e 00 00       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007e4a:	83 c4 10             	add    esp,0x10
c0007e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e54:	83 ec 04             	sub    esp,0x4
c0007e57:	68 a0 0f 00 00       	push   0xfa0
c0007e5c:	6a 00                	push   0x0
c0007e5e:	50                   	push   eax
c0007e5f:	e8 8c 86 ff ff       	call   c00004f0 <memset>
c0007e64:	83 c4 10             	add    esp,0x10
c0007e67:	83 ec 04             	sub    esp,0x4
c0007e6a:	6a 00                	push   0x0
c0007e6c:	6a 07                	push   0x7
c0007e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e72:	e8 6d f8 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007e77:	83 c4 10             	add    esp,0x10
c0007e7a:	83 ec 04             	sub    esp,0x4
c0007e7d:	6a 00                	push   0x0
c0007e7f:	6a 00                	push   0x0
c0007e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e85:	e8 f0 f9 ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007e8a:	83 c4 10             	add    esp,0x10
c0007e8d:	83 ec 0c             	sub    esp,0xc
c0007e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e94:	e8 43 fa ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007e99:	83 c4 10             	add    esp,0x10
c0007e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea8:	05 82 00 00 00       	add    eax,0x82
c0007ead:	83 ec 04             	sub    esp,0x4
c0007eb0:	6a 30                	push   0x30
c0007eb2:	6a 00                	push   0x0
c0007eb4:	50                   	push   eax
c0007eb5:	e8 36 86 ff ff       	call   c00004f0 <memset>
c0007eba:	83 c4 10             	add    esp,0x10
c0007ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec1:	05 b2 00 00 00       	add    eax,0xb2
c0007ec6:	83 ec 04             	sub    esp,0x4
c0007ec9:	68 80 00 00 00       	push   0x80
c0007ece:	6a 00                	push   0x0
c0007ed0:	50                   	push   eax
c0007ed1:	e8 1a 86 ff ff       	call   c00004f0 <memset>
c0007ed6:	83 c4 10             	add    esp,0x10
c0007ed9:	90                   	nop
c0007eda:	83 c4 04             	add    esp,0x4
c0007edd:	5b                   	pop    ebx
c0007ede:	5e                   	pop    esi
c0007edf:	c3                   	ret    

c0007ee0 <VgaText::receiveKey(unsigned char)>:
c0007ee0:	57                   	push   edi
c0007ee1:	56                   	push   esi
c0007ee2:	53                   	push   ebx
c0007ee3:	83 ec 10             	sub    esp,0x10
c0007ee6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007eea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007eee:	84 db                	test   bl,bl
c0007ef0:	0f 84 ba 00 00 00    	je     c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007ef6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007efc:	80 fb 08             	cmp    bl,0x8
c0007eff:	75 2c                	jne    c0007f2d <VgaText::receiveKey(unsigned char)+0x4d>
c0007f01:	83 ec 0c             	sub    esp,0xc
c0007f04:	57                   	push   edi
c0007f05:	e8 56 86 ff ff       	call   c0000560 <strlen>
c0007f0a:	83 c4 10             	add    esp,0x10
c0007f0d:	85 c0                	test   eax,eax
c0007f0f:	74 41                	je     c0007f52 <VgaText::receiveKey(unsigned char)+0x72>
c0007f11:	50                   	push   eax
c0007f12:	50                   	push   eax
c0007f13:	6a 08                	push   0x8
c0007f15:	56                   	push   esi
c0007f16:	e8 83 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f1e:	e8 3d 86 ff ff       	call   c0000560 <strlen>
c0007f23:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007f2b:	eb 22                	jmp    c0007f4f <VgaText::receiveKey(unsigned char)+0x6f>
c0007f2d:	0f be c3             	movsx  eax,bl
c0007f30:	52                   	push   edx
c0007f31:	52                   	push   edx
c0007f32:	50                   	push   eax
c0007f33:	56                   	push   esi
c0007f34:	e8 65 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f39:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007f3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007f42:	59                   	pop    ecx
c0007f43:	58                   	pop    eax
c0007f44:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007f48:	50                   	push   eax
c0007f49:	57                   	push   edi
c0007f4a:	e8 91 88 ff ff       	call   c00007e0 <strcat>
c0007f4f:	83 c4 10             	add    esp,0x10
c0007f52:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007f59:	75 05                	jne    c0007f60 <VgaText::receiveKey(unsigned char)+0x80>
c0007f5b:	80 fb 0a             	cmp    bl,0xa
c0007f5e:	75 50                	jne    c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007f60:	83 ec 0c             	sub    esp,0xc
c0007f63:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007f69:	56                   	push   esi
c0007f6a:	e8 f1 85 ff ff       	call   c0000560 <strlen>
c0007f6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f72:	89 c3                	mov    ebx,eax
c0007f74:	e8 e7 85 ff ff       	call   c0000560 <strlen>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007f80:	3d 80 00 00 00       	cmp    eax,0x80
c0007f85:	76 10                	jbe    c0007f97 <VgaText::receiveKey(unsigned char)+0xb7>
c0007f87:	83 ec 0c             	sub    esp,0xc
c0007f8a:	68 5b cc 01 c0       	push   0xc001cc5b
c0007f8f:	e8 ab 74 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007f94:	83 c4 10             	add    esp,0x10
c0007f97:	50                   	push   eax
c0007f98:	50                   	push   eax
c0007f99:	57                   	push   edi
c0007f9a:	56                   	push   esi
c0007f9b:	e8 40 88 ff ff       	call   c00007e0 <strcat>
c0007fa0:	83 c4 0c             	add    esp,0xc
c0007fa3:	6a 30                	push   0x30
c0007fa5:	6a 00                	push   0x0
c0007fa7:	57                   	push   edi
c0007fa8:	e8 43 85 ff ff       	call   c00004f0 <memset>
c0007fad:	83 c4 10             	add    esp,0x10
c0007fb0:	83 c4 10             	add    esp,0x10
c0007fb3:	5b                   	pop    ebx
c0007fb4:	5e                   	pop    esi
c0007fb5:	5f                   	pop    edi
c0007fb6:	c3                   	ret    
c0007fb7:	90                   	nop

c0007fb8 <VgaText::doUpdate()>:
c0007fb8:	c3                   	ret    

c0007fb9 <newTerminal(char*)>:
c0007fb9:	83 ec 28             	sub    esp,0x28
c0007fbc:	68 34 01 00 00       	push   0x134
c0007fc1:	e8 9b eb ff ff       	call   c0006b61 <malloc>
c0007fc6:	5a                   	pop    edx
c0007fc7:	59                   	pop    ecx
c0007fc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fcc:	50                   	push   eax
c0007fcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007fd1:	e8 be fd ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c0007fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fda:	83 c4 2c             	add    esp,0x2c
c0007fdd:	c3                   	ret    
c0007fde:	66 90                	xchg   ax,ax

c0007fe0 <TSS::TSS()>:
c0007fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007feb:	90                   	nop
c0007fec:	c3                   	ret    
c0007fed:	90                   	nop
c0007fee:	66 90                	xchg   ax,ax

c0007ff0 <TSS::setESP(unsigned long)>:
c0007ff0:	55                   	push   ebp
c0007ff1:	89 e5                	mov    ebp,esp
c0007ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007fff:	90                   	nop
c0008000:	5d                   	pop    ebp
c0008001:	c3                   	ret    
c0008002:	66 90                	xchg   ax,ax

c0008004 <TSS::flush()>:
c0008004:	55                   	push   ebp
c0008005:	89 e5                	mov    ebp,esp
c0008007:	83 ec 10             	sub    esp,0x10
c000800a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000800d:	8b 00                	mov    eax,DWORD PTR [eax]
c000800f:	83 c8 03             	or     eax,0x3
c0008012:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008016:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000801a:	66 89 d0             	mov    ax,dx
c000801d:	0f 00 d8             	ltr    ax
c0008020:	90                   	nop
c0008021:	c9                   	leave  
c0008022:	c3                   	ret    
c0008023:	90                   	nop

c0008024 <TSS::setup(unsigned long, unsigned long)>:
c0008024:	55                   	push   ebp
c0008025:	89 e5                	mov    ebp,esp
c0008027:	83 ec 18             	sub    esp,0x18
c000802a:	83 ec 0c             	sub    esp,0xc
c000802d:	6a 68                	push   0x68
c000802f:	e8 2d eb ff ff       	call   c0006b61 <malloc>
c0008034:	83 c4 10             	add    esp,0x10
c0008037:	89 c2                	mov    edx,eax
c0008039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000803c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000803f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008045:	83 ec 04             	sub    esp,0x4
c0008048:	6a 68                	push   0x68
c000804a:	6a 00                	push   0x0
c000804c:	50                   	push   eax
c000804d:	e8 9e 84 ff ff       	call   c00004f0 <memset>
c0008052:	83 c4 10             	add    esp,0x10
c0008055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008067:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000806d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008073:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008076:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000807c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000807f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000808b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008097:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000809d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00080a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080af:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00080b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080bb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00080c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00080ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00080cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00080d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00080d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080df:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00080e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080ec:	0f 20 da             	mov    edx,cr3
c00080ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00080f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00080f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00080f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080fe:	83 ec 08             	sub    esp,0x8
c0008101:	50                   	push   eax
c0008102:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008105:	50                   	push   eax
c0008106:	e8 9d e2 ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000810b:	83 c4 10             	add    esp,0x10
c000810e:	83 ec 08             	sub    esp,0x8
c0008111:	6a 68                	push   0x68
c0008113:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008116:	50                   	push   eax
c0008117:	e8 a8 e2 ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008123:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008126:	83 e0 0f             	and    eax,0xf
c0008129:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000812c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000812f:	83 c8 40             	or     eax,0x40
c0008132:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008135:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000813a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008140:	05 78 01 00 00       	add    eax,0x178
c0008145:	83 ec 04             	sub    esp,0x4
c0008148:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000814b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000814e:	50                   	push   eax
c000814f:	e8 a4 e2 ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0008154:	83 c4 10             	add    esp,0x10
c0008157:	89 c2                	mov    edx,eax
c0008159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000815c:	89 10                	mov    DWORD PTR [eax],edx
c000815e:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0008163:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008169:	05 78 01 00 00       	add    eax,0x178
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	50                   	push   eax
c0008172:	e8 ab e2 ff ff       	call   c0006422 <GDT::flush()>
c0008177:	83 c4 10             	add    esp,0x10
c000817a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000817d:	8b 00                	mov    eax,DWORD PTR [eax]
c000817f:	c9                   	leave  
c0008180:	c3                   	ret    
c0008181:	90                   	nop

c0008182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000818a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000818d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008192:	75 08                	jne    c000819c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000819a:	eb 38                	jmp    c00081d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000819c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00081a1:	75 17                	jne    c00081ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00081a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00081a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00081ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00081b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00081b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00081ba:	89 c1                	mov    ecx,eax
c00081bc:	83 e1 fd             	and    ecx,0xfffffffd
c00081bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00081c5:	74 cd                	je     c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00081cc:	83 e0 ef             	and    eax,0xffffffef
c00081cf:	83 f8 08             	cmp    eax,0x8
c00081d2:	76 c0                	jbe    c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081d4:	31 c0                	xor    eax,eax
c00081d6:	c3                   	ret    
c00081d7:	90                   	nop

c00081d8 <ReservedFilename::isAtty()>:
c00081d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00081df:	31 c0                	xor    eax,eax
c00081e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00081e7:	74 09                	je     c00081f2 <ReservedFilename::isAtty()+0x1a>
c00081e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00081ef:	0f 94 c0             	sete   al
c00081f2:	c3                   	ret    
c00081f3:	90                   	nop

c00081f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00081f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008208:	75 08                	jne    c0008212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000820a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008210:	eb 3d                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008217:	75 17                	jne    c0008230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000821e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008221:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008227:	8b 10                	mov    edx,DWORD PTR [eax]
c0008229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000822d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008235:	75 04                	jne    c000823b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008237:	89 0a                	mov    DWORD PTR [edx],ecx
c0008239:	eb 14                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000823b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008240:	74 c8                	je     c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008247:	83 e0 ef             	and    eax,0xffffffef
c000824a:	83 f8 08             	cmp    eax,0x8
c000824d:	76 bb                	jbe    c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000824f:	31 c0                	xor    eax,eax
c0008251:	c3                   	ret    

c0008252 <UnixFile::getFileDescriptor()>:
c0008252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008259:	c3                   	ret    

c000825a <UnixFile::UnixFile(int)>:
c000825a:	53                   	push   ebx
c000825b:	83 ec 28             	sub    esp,0x28
c000825e:	ba 78 cd 01 c0       	mov    edx,0xc001cd78
c0008263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008267:	89 10                	mov    DWORD PTR [eax],edx
c0008269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008271:	0f 8f 8c 01 00 00    	jg     c0008403 <UnixFile::UnixFile(int)+0x1a9>
c0008277:	a1 40 ec 01 c0       	mov    eax,ds:0xc001ec40
c000827c:	8d 50 01             	lea    edx,[eax+0x1]
c000827f:	89 15 40 ec 01 c0    	mov    DWORD PTR ds:0xc001ec40,edx
c0008285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000828c:	83 ec 08             	sub    esp,0x8
c000828f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008293:	68 78 f3 01 c0       	push   0xc001f378
c0008298:	e8 8b 35 01 00       	call   c001b828 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000829d:	83 c4 10             	add    esp,0x10
c00082a0:	a0 74 f3 01 c0       	mov    al,ds:0xc001f374
c00082a5:	83 f0 01             	xor    eax,0x1
c00082a8:	84 c0                	test   al,al
c00082aa:	0f 84 54 01 00 00    	je     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c00082b0:	c6 05 74 f3 01 c0 01 	mov    BYTE PTR ds:0xc001f374,0x1
c00082b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00082bf:	83 ec 0c             	sub    esp,0xc
c00082c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082c6:	e8 96 e8 ff ff       	call   c0006b61 <malloc>
c00082cb:	83 c4 10             	add    esp,0x10
c00082ce:	89 c3                	mov    ebx,eax
c00082d0:	83 ec 08             	sub    esp,0x8
c00082d3:	68 03 ff ff 0f       	push   0xfffff03
c00082d8:	53                   	push   ebx
c00082d9:	e8 2c 01 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00082de:	83 c4 10             	add    esp,0x10
c00082e1:	89 1d 6c f3 01 c0    	mov    DWORD PTR ds:0xc001f36c,ebx
c00082e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00082ef:	83 ec 0c             	sub    esp,0xc
c00082f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f6:	e8 66 e8 ff ff       	call   c0006b61 <malloc>
c00082fb:	83 c4 10             	add    esp,0x10
c00082fe:	89 c3                	mov    ebx,eax
c0008300:	83 ec 08             	sub    esp,0x8
c0008303:	68 01 ff ff 0f       	push   0xfffff01
c0008308:	53                   	push   ebx
c0008309:	e8 fc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000830e:	83 c4 10             	add    esp,0x10
c0008311:	89 1d 70 f3 01 c0    	mov    DWORD PTR ds:0xc001f370,ebx
c0008317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000831f:	83 ec 0c             	sub    esp,0xc
c0008322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008326:	e8 36 e8 ff ff       	call   c0006b61 <malloc>
c000832b:	83 c4 10             	add    esp,0x10
c000832e:	89 c3                	mov    ebx,eax
c0008330:	83 ec 08             	sub    esp,0x8
c0008333:	68 00 ff ff 0f       	push   0xfffff00
c0008338:	53                   	push   ebx
c0008339:	e8 cc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000833e:	83 c4 10             	add    esp,0x10
c0008341:	89 1d 64 f3 01 c0    	mov    DWORD PTR ds:0xc001f364,ebx
c0008347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000834f:	83 ec 0c             	sub    esp,0xc
c0008352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008356:	e8 06 e8 ff ff       	call   c0006b61 <malloc>
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	89 c3                	mov    ebx,eax
c0008360:	83 ec 08             	sub    esp,0x8
c0008363:	68 02 ff ff 0f       	push   0xfffff02
c0008368:	53                   	push   ebx
c0008369:	e8 9c 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000836e:	83 c4 10             	add    esp,0x10
c0008371:	89 1d 68 f3 01 c0    	mov    DWORD PTR ds:0xc001f368,ebx
c0008377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000837f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008384:	7f 7e                	jg     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c0008386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000838e:	83 ec 0c             	sub    esp,0xc
c0008391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008395:	e8 c7 e7 ff ff       	call   c0006b61 <malloc>
c000839a:	83 c4 10             	add    esp,0x10
c000839d:	89 c3                	mov    ebx,eax
c000839f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00083a8:	83 ec 08             	sub    esp,0x8
c00083ab:	50                   	push   eax
c00083ac:	53                   	push   ebx
c00083ad:	e8 58 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083b2:	83 c4 10             	add    esp,0x10
c00083b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083b9:	89 1c 85 40 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0cc0],ebx
c00083c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00083c8:	83 ec 0c             	sub    esp,0xc
c00083cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00083cf:	e8 8d e7 ff ff       	call   c0006b61 <malloc>
c00083d4:	83 c4 10             	add    esp,0x10
c00083d7:	89 c3                	mov    ebx,eax
c00083d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00083e2:	83 ec 08             	sub    esp,0x8
c00083e5:	50                   	push   eax
c00083e6:	53                   	push   ebx
c00083e7:	e8 1e 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083f3:	89 1c 85 00 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0d00],ebx
c00083fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00083fe:	e9 7c ff ff ff       	jmp    c000837f <UnixFile::UnixFile(int)+0x125>
c0008403:	90                   	nop
c0008404:	83 c4 28             	add    esp,0x28
c0008407:	5b                   	pop    ebx
c0008408:	c3                   	ret    
c0008409:	90                   	nop

c000840a <ReservedFilename::ReservedFilename(int)>:
c000840a:	83 ec 0c             	sub    esp,0xc
c000840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008411:	83 ec 08             	sub    esp,0x8
c0008414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008418:	50                   	push   eax
c0008419:	e8 3c fe ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000841e:	83 c4 10             	add    esp,0x10
c0008421:	ba 94 cd 01 c0       	mov    edx,0xc001cd94
c0008426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842a:	89 10                	mov    DWORD PTR [eax],edx
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008437:	90                   	nop
c0008438:	83 c4 0c             	add    esp,0xc
c000843b:	c3                   	ret    

c000843c <UnixFile::~UnixFile()>:
c000843c:	83 ec 1c             	sub    esp,0x1c
c000843f:	ba 78 cd 01 c0       	mov    edx,0xc001cd78
c0008444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008448:	89 10                	mov    DWORD PTR [eax],edx
c000844a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008456:	7f 73                	jg     c00084cb <UnixFile::~UnixFile()+0x8f>
c0008458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008460:	83 ec 0c             	sub    esp,0xc
c0008463:	68 78 f3 01 c0       	push   0xc001f378
c0008468:	e8 8f 34 01 00       	call   c001b8fc <LinkedList<UnixFile>::getFirstElement()>
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008474:	83 ec 0c             	sub    esp,0xc
c0008477:	68 78 f3 01 c0       	push   0xc001f378
c000847c:	e8 83 34 01 00       	call   c001b904 <LinkedList<UnixFile>::removeFirst()>
c0008481:	83 c4 10             	add    esp,0x10
c0008484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000848c:	74 40                	je     c00084ce <UnixFile::~UnixFile()+0x92>
c000848e:	83 ec 08             	sub    esp,0x8
c0008491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008495:	68 78 f3 01 c0       	push   0xc001f378
c000849a:	e8 89 33 01 00       	call   c001b828 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000849f:	83 c4 10             	add    esp,0x10
c00084a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084a6:	8d 50 01             	lea    edx,[eax+0x1]
c00084a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00084ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00084b2:	0f 94 c0             	sete   al
c00084b5:	84 c0                	test   al,al
c00084b7:	74 a7                	je     c0008460 <UnixFile::~UnixFile()+0x24>
c00084b9:	83 ec 0c             	sub    esp,0xc
c00084bc:	68 50 cd 01 c0       	push   0xc001cd50
c00084c1:	e8 79 6f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	eb 95                	jmp    c0008460 <UnixFile::~UnixFile()+0x24>
c00084cb:	90                   	nop
c00084cc:	eb 01                	jmp    c00084cf <UnixFile::~UnixFile()+0x93>
c00084ce:	90                   	nop
c00084cf:	90                   	nop
c00084d0:	83 c4 1c             	add    esp,0x1c
c00084d3:	c3                   	ret    

c00084d4 <UnixFile::~UnixFile()>:
c00084d4:	83 ec 0c             	sub    esp,0xc
c00084d7:	83 ec 0c             	sub    esp,0xc
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 59 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 ec 08             	sub    esp,0x8
c00084e9:	6a 0c                	push   0xc
c00084eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ef:	e8 06 13 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	83 c4 0c             	add    esp,0xc
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <ReservedFilename::~ReservedFilename()>:
c00084fc:	83 ec 0c             	sub    esp,0xc
c00084ff:	ba 94 cd 01 c0       	mov    edx,0xc001cd94
c0008504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008508:	89 10                	mov    DWORD PTR [eax],edx
c000850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850e:	83 ec 0c             	sub    esp,0xc
c0008511:	50                   	push   eax
c0008512:	e8 25 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	90                   	nop
c000851b:	83 c4 0c             	add    esp,0xc
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <ReservedFilename::~ReservedFilename()>:
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	83 ec 0c             	sub    esp,0xc
c0008526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000852a:	e8 cd ff ff ff       	call   c00084fc <ReservedFilename::~ReservedFilename()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	83 ec 08             	sub    esp,0x8
c0008535:	6a 0c                	push   0xc
c0008537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000853b:	e8 ba 12 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c0008540:	83 c4 10             	add    esp,0x10
c0008543:	83 c4 0c             	add    esp,0xc
c0008546:	c3                   	ret    

c0008547 <getFromFileDescriptor(int)>:
c0008547:	53                   	push   ebx
c0008548:	83 ec 08             	sub    esp,0x8
c000854b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000854f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000855b:	7f 2c                	jg     c0008589 <getFromFileDescriptor(int)+0x42>
c000855d:	83 ec 0c             	sub    esp,0xc
c0008560:	68 78 f3 01 c0       	push   0xc001f378
c0008565:	e8 92 33 01 00       	call   c001b8fc <LinkedList<UnixFile>::getFirstElement()>
c000856a:	83 c4 10             	add    esp,0x10
c000856d:	85 c0                	test   eax,eax
c000856f:	75 04                	jne    c0008575 <getFromFileDescriptor(int)+0x2e>
c0008571:	31 c0                	xor    eax,eax
c0008573:	eb 6e                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008578:	74 69                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c000857a:	52                   	push   edx
c000857b:	52                   	push   edx
c000857c:	50                   	push   eax
c000857d:	68 78 f3 01 c0       	push   0xc001f378
c0008582:	e8 1f 34 01 00       	call   c001b9a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008587:	eb e1                	jmp    c000856a <getFromFileDescriptor(int)+0x23>
c0008589:	a1 6c f3 01 c0       	mov    eax,ds:0xc001f36c
c000858e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008594:	74 4d                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008596:	a1 70 f3 01 c0       	mov    eax,ds:0xc001f370
c000859b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00085a1:	74 40                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085a3:	a1 68 f3 01 c0       	mov    eax,ds:0xc001f368
c00085a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00085ae:	74 33                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085b0:	a1 64 f3 01 c0       	mov    eax,ds:0xc001f364
c00085b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00085bb:	74 26                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00085c3:	83 f8 08             	cmp    eax,0x8
c00085c6:	77 09                	ja     c00085d1 <getFromFileDescriptor(int)+0x8a>
c00085c8:	8b 04 85 40 f3 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0cc0]
c00085cf:	eb 12                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00085d7:	83 fb 08             	cmp    ebx,0x8
c00085da:	77 95                	ja     c0008571 <getFromFileDescriptor(int)+0x2a>
c00085dc:	8b 04 9d 00 f3 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0d00]
c00085e3:	83 c4 08             	add    esp,0x8
c00085e6:	5b                   	pop    ebx
c00085e7:	c3                   	ret    

c00085e8 <__static_initialization_and_destruction_0(int, int)>:
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00085f0:	75 34                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085fa:	75 2a                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085fc:	83 ec 0c             	sub    esp,0xc
c00085ff:	68 78 f3 01 c0       	push   0xc001f378
c0008604:	e8 dd 31 01 00       	call   c001b7e6 <LinkedList<UnixFile>::LinkedList()>
c0008609:	83 c4 10             	add    esp,0x10
c000860c:	83 ec 04             	sub    esp,0x4
c000860f:	68 5c ea 01 c0       	push   0xc001ea5c
c0008614:	68 78 f3 01 c0       	push   0xc001f378
c0008619:	68 e4 b7 01 c0       	push   0xc001b7e4
c000861e:	e8 87 11 00 00       	call   c00097aa <__cxa_atexit>
c0008623:	83 c4 10             	add    esp,0x10
c0008626:	90                   	nop
c0008627:	83 c4 0c             	add    esp,0xc
c000862a:	c3                   	ret    

c000862b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000862b:	83 ec 0c             	sub    esp,0xc
c000862e:	83 ec 08             	sub    esp,0x8
c0008631:	68 ff ff 00 00       	push   0xffff
c0008636:	6a 01                	push   0x1
c0008638:	e8 ab ff ff ff       	call   c00085e8 <__static_initialization_and_destruction_0(int, int)>
c000863d:	83 c4 10             	add    esp,0x10
c0008640:	83 c4 0c             	add    esp,0xc
c0008643:	c3                   	ret    

c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008644:	53                   	push   ebx
c0008645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000864d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008653:	89 c8                	mov    eax,ecx
c0008655:	d1 e8                	shr    eax,1
c0008657:	03 05 48 ec 01 c0    	add    eax,DWORD PTR ds:0xc001ec48
c000865d:	83 e1 01             	and    ecx,0x1
c0008660:	8a 10                	mov    dl,BYTE PTR [eax]
c0008662:	75 09                	jne    c000866d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008664:	83 e2 f0             	and    edx,0xfffffff0
c0008667:	09 da                	or     edx,ebx
c0008669:	88 10                	mov    BYTE PTR [eax],dl
c000866b:	5b                   	pop    ebx
c000866c:	c3                   	ret    
c000866d:	c1 e3 04             	shl    ebx,0x4
c0008670:	83 e2 0f             	and    edx,0xf
c0008673:	09 da                	or     edx,ebx
c0008675:	88 10                	mov    BYTE PTR [eax],dl
c0008677:	5b                   	pop    ebx
c0008678:	c3                   	ret    

c0008679 <Virt::getPageState(unsigned long)>:
c0008679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000867d:	8b 0d 48 ec 01 c0    	mov    ecx,DWORD PTR ds:0xc001ec48
c0008683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008689:	89 d0                	mov    eax,edx
c000868b:	d1 e8                	shr    eax,1
c000868d:	83 e2 01             	and    edx,0x1
c0008690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008693:	75 04                	jne    c0008699 <Virt::getPageState(unsigned long)+0x20>
c0008695:	83 e0 0f             	and    eax,0xf
c0008698:	c3                   	ret    
c0008699:	c0 e8 04             	shr    al,0x4
c000869c:	c3                   	ret    

c000869d <Virt::allocateKernelVirtualPages(int)>:
c000869d:	55                   	push   ebp
c000869e:	31 ed                	xor    ebp,ebp
c00086a0:	57                   	push   edi
c00086a1:	56                   	push   esi
c00086a2:	53                   	push   ebx
c00086a3:	31 db                	xor    ebx,ebx
c00086a5:	83 ec 1c             	sub    esp,0x1c
c00086a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00086ac:	8b 3d 44 ec 01 c0    	mov    edi,DWORD PTR ds:0xc001ec44
c00086b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00086b7:	57                   	push   edi
c00086b8:	e8 bc ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086bd:	5a                   	pop    edx
c00086be:	84 c0                	test   al,al
c00086c0:	75 3a                	jne    c00086fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00086c2:	85 db                	test   ebx,ebx
c00086c4:	75 02                	jne    c00086c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00086c6:	89 fd                	mov    ebp,edi
c00086c8:	43                   	inc    ebx
c00086c9:	39 f3                	cmp    ebx,esi
c00086cb:	74 5a                	je     c0008727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00086cd:	47                   	inc    edi
c00086ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00086d4:	76 31                	jbe    c0008707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00086d6:	c7 05 44 ec 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ec44,0xc8000
c00086e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00086e5:	75 28                	jne    c000870f <Virt::allocateKernelVirtualPages(int)+0x72>
c00086e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00086ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00086f1:	57                   	push   edi
c00086f2:	e8 82 ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086f7:	5a                   	pop    edx
c00086f8:	84 c0                	test   al,al
c00086fa:	74 c6                	je     c00086c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00086fc:	31 db                	xor    ebx,ebx
c00086fe:	47                   	inc    edi
c00086ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008705:	77 cf                	ja     c00086d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0008707:	89 3d 44 ec 01 c0    	mov    DWORD PTR ds:0xc001ec44,edi
c000870d:	eb a8                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000870f:	83 ec 0c             	sub    esp,0xc
c0008712:	68 a8 cd 01 c0       	push   0xc001cda8
c0008717:	e8 23 6d 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000871c:	8b 3d 44 ec 01 c0    	mov    edi,DWORD PTR ds:0xc001ec44
c0008722:	83 c4 10             	add    esp,0x10
c0008725:	eb 90                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008727:	89 2d 44 ec 01 c0    	mov    DWORD PTR ds:0xc001ec44,ebp
c000872d:	4b                   	dec    ebx
c000872e:	74 5f                	je     c000878f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008730:	85 f6                	test   esi,esi
c0008732:	74 3d                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008734:	89 e8                	mov    eax,ebp
c0008736:	31 db                	xor    ebx,ebx
c0008738:	8d 7e ff             	lea    edi,[esi-0x1]
c000873b:	eb 14                	jmp    c0008751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000873d:	6a 01                	push   0x1
c000873f:	43                   	inc    ebx
c0008740:	50                   	push   eax
c0008741:	e8 fe fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008746:	58                   	pop    eax
c0008747:	39 f3                	cmp    ebx,esi
c0008749:	5a                   	pop    edx
c000874a:	74 25                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000874c:	a1 44 ec 01 c0       	mov    eax,ds:0xc001ec44
c0008751:	8d 50 01             	lea    edx,[eax+0x1]
c0008754:	85 db                	test   ebx,ebx
c0008756:	89 15 44 ec 01 c0    	mov    DWORD PTR ds:0xc001ec44,edx
c000875c:	74 20                	je     c000877e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000875e:	39 df                	cmp    edi,ebx
c0008760:	75 db                	jne    c000873d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008762:	6a 03                	push   0x3
c0008764:	43                   	inc    ebx
c0008765:	50                   	push   eax
c0008766:	e8 d9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000876b:	59                   	pop    ecx
c000876c:	39 f3                	cmp    ebx,esi
c000876e:	58                   	pop    eax
c000876f:	75 db                	jne    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008771:	83 c4 1c             	add    esp,0x1c
c0008774:	89 e8                	mov    eax,ebp
c0008776:	5b                   	pop    ebx
c0008777:	c1 e0 0c             	shl    eax,0xc
c000877a:	5e                   	pop    esi
c000877b:	5f                   	pop    edi
c000877c:	5d                   	pop    ebp
c000877d:	c3                   	ret    
c000877e:	6a 02                	push   0x2
c0008780:	bb 01 00 00 00       	mov    ebx,0x1
c0008785:	50                   	push   eax
c0008786:	e8 b9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000878b:	58                   	pop    eax
c000878c:	5a                   	pop    edx
c000878d:	eb bd                	jmp    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000878f:	6a 04                	push   0x4
c0008791:	8d 45 01             	lea    eax,[ebp+0x1]
c0008794:	55                   	push   ebp
c0008795:	a3 44 ec 01 c0       	mov    ds:0xc001ec44,eax
c000879a:	e8 a5 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000879f:	59                   	pop    ecx
c00087a0:	89 e8                	mov    eax,ebp
c00087a2:	5b                   	pop    ebx
c00087a3:	c1 e0 0c             	shl    eax,0xc
c00087a6:	83 c4 1c             	add    esp,0x1c
c00087a9:	5b                   	pop    ebx
c00087aa:	5e                   	pop    esi
c00087ab:	5f                   	pop    edi
c00087ac:	5d                   	pop    ebp
c00087ad:	c3                   	ret    

c00087ae <Virt::freeSwapfilePage(unsigned long)>:
c00087ae:	53                   	push   ebx
c00087af:	8b 15 8c f3 01 c0    	mov    edx,DWORD PTR ds:0xc001f38c
c00087b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00087b9:	b8 01 00 00 00       	mov    eax,0x1
c00087be:	89 cb                	mov    ebx,ecx
c00087c0:	d3 e0                	shl    eax,cl
c00087c2:	c1 eb 05             	shr    ebx,0x5
c00087c5:	f7 d0                	not    eax
c00087c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00087ca:	5b                   	pop    ebx
c00087cb:	c3                   	ret    

c00087cc <Virt::swapIDToSector(unsigned long)>:
c00087cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087d0:	0f af 05 4c ec 01 c0 	imul   eax,DWORD PTR ds:0xc001ec4c
c00087d7:	03 05 54 ec 01 c0    	add    eax,DWORD PTR ds:0xc001ec54
c00087dd:	c3                   	ret    

c00087de <Virt::allocateSwapfilePage()>:
c00087de:	55                   	push   ebp
c00087df:	31 d2                	xor    edx,edx
c00087e1:	57                   	push   edi
c00087e2:	56                   	push   esi
c00087e3:	53                   	push   ebx
c00087e4:	83 ec 0c             	sub    esp,0xc
c00087e7:	8b 0d 4c ec 01 c0    	mov    ecx,DWORD PTR ds:0xc001ec4c
c00087ed:	a1 50 ec 01 c0       	mov    eax,ds:0xc001ec50
c00087f2:	f7 f1                	div    ecx
c00087f4:	39 0d 50 ec 01 c0    	cmp    DWORD PTR ds:0xc001ec50,ecx
c00087fa:	72 2d                	jb     c0008829 <Virt::allocateSwapfilePage()+0x4b>
c00087fc:	8b 35 8c f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f38c
c0008802:	8b 16                	mov    edx,DWORD PTR [esi]
c0008804:	f6 c2 01             	test   dl,0x1
c0008807:	74 3c                	je     c0008845 <Virt::allocateSwapfilePage()+0x67>
c0008809:	31 c9                	xor    ecx,ecx
c000880b:	bf 01 00 00 00       	mov    edi,0x1
c0008810:	eb 12                	jmp    c0008824 <Virt::allocateSwapfilePage()+0x46>
c0008812:	89 fd                	mov    ebp,edi
c0008814:	89 ca                	mov    edx,ecx
c0008816:	d3 e5                	shl    ebp,cl
c0008818:	c1 ea 05             	shr    edx,0x5
c000881b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000881e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008820:	85 ea                	test   edx,ebp
c0008822:	74 2a                	je     c000884e <Virt::allocateSwapfilePage()+0x70>
c0008824:	41                   	inc    ecx
c0008825:	39 c8                	cmp    eax,ecx
c0008827:	77 e9                	ja     c0008812 <Virt::allocateSwapfilePage()+0x34>
c0008829:	83 ec 0c             	sub    esp,0xc
c000882c:	68 0f cf 01 c0       	push   0xc001cf0f
c0008831:	e8 09 6c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	31 c9                	xor    ecx,ecx
c000883b:	83 c4 0c             	add    esp,0xc
c000883e:	89 c8                	mov    eax,ecx
c0008840:	5b                   	pop    ebx
c0008841:	5e                   	pop    esi
c0008842:	5f                   	pop    edi
c0008843:	5d                   	pop    ebp
c0008844:	c3                   	ret    
c0008845:	89 f3                	mov    ebx,esi
c0008847:	bd 01 00 00 00       	mov    ebp,0x1
c000884c:	31 c9                	xor    ecx,ecx
c000884e:	09 ea                	or     edx,ebp
c0008850:	89 c8                	mov    eax,ecx
c0008852:	89 13                	mov    DWORD PTR [ebx],edx
c0008854:	83 c4 0c             	add    esp,0xc
c0008857:	5b                   	pop    ebx
c0008858:	5e                   	pop    esi
c0008859:	5f                   	pop    edi
c000885a:	5d                   	pop    ebp
c000885b:	c3                   	ret    

c000885c <Virt::virtualMemorySetup()>:
c000885c:	53                   	push   ebx
c000885d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008862:	6a 0f                	push   0xf
c0008864:	53                   	push   ebx
c0008865:	43                   	inc    ebx
c0008866:	e8 d9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000886b:	58                   	pop    eax
c000886c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008872:	5a                   	pop    edx
c0008873:	75 ed                	jne    c0008862 <Virt::virtualMemorySetup()+0x6>
c0008875:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000887a:	6a 00                	push   0x0
c000887c:	53                   	push   ebx
c000887d:	43                   	inc    ebx
c000887e:	e8 c1 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008883:	59                   	pop    ecx
c0008884:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000888a:	58                   	pop    eax
c000888b:	75 ed                	jne    c000887a <Virt::virtualMemorySetup()+0x1e>
c000888d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008892:	6a 0f                	push   0xf
c0008894:	53                   	push   ebx
c0008895:	43                   	inc    ebx
c0008896:	e8 a9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000889b:	58                   	pop    eax
c000889c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00088a2:	5a                   	pop    edx
c00088a3:	75 ed                	jne    c0008892 <Virt::virtualMemorySetup()+0x36>
c00088a5:	5b                   	pop    ebx
c00088a6:	c3                   	ret    

c00088a7 <Virt::setupPageSwapping(int)>:
c00088a7:	53                   	push   ebx
c00088a8:	83 ec 0c             	sub    esp,0xc
c00088ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00088af:	a1 08 18 02 c0       	mov    eax,ds:0xc0021808
c00088b4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00088ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00088bc:	53                   	push   ebx
c00088bd:	c1 e3 0b             	shl    ebx,0xb
c00088c0:	68 26 cf 01 c0       	push   0xc001cf26
c00088c5:	50                   	push   eax
c00088c6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00088c9:	89 1d 50 ec 01 c0    	mov    DWORD PTR ds:0xc001ec50,ebx
c00088cf:	c6 05 58 ec 01 c0 43 	mov    BYTE PTR ds:0xc001ec58,0x43
c00088d6:	c1 eb 08             	shr    ebx,0x8
c00088d9:	a3 54 ec 01 c0       	mov    ds:0xc001ec54,eax
c00088de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088e1:	c7 05 4c ec 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ec4c,0x8
c00088eb:	e8 71 e2 ff ff       	call   c0006b61 <malloc>
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	89 c1                	mov    ecx,eax
c00088f5:	a3 8c f3 01 c0       	mov    ds:0xc001f38c,eax
c00088fa:	31 d2                	xor    edx,edx
c00088fc:	a1 50 ec 01 c0       	mov    eax,ds:0xc001ec50
c0008901:	f7 35 4c ec 01 c0    	div    DWORD PTR ds:0xc001ec4c
c0008907:	c1 e8 05             	shr    eax,0x5
c000890a:	50                   	push   eax
c000890b:	6a 00                	push   0x0
c000890d:	51                   	push   ecx
c000890e:	e8 dd 7b ff ff       	call   c00004f0 <memset>
c0008913:	83 c4 18             	add    esp,0x18
c0008916:	5b                   	pop    ebx
c0008917:	c3                   	ret    

c0008918 <VAS::VAS()>:
c0008918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000891c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000892e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008932:	a3 90 f3 01 c0       	mov    ds:0xc001f390,eax
c0008937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000893b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000893f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008943:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0008946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000894a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0008951:	90                   	nop
c0008952:	c3                   	ret    
c0008953:	90                   	nop

c0008954 <VAS::VAS(VAS*)>:
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000896d:	83 ec 0c             	sub    esp,0xc
c0008970:	68 c8 cd 01 c0       	push   0xc001cdc8
c0008975:	e8 c5 6a 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	90                   	nop
c000897e:	83 c4 0c             	add    esp,0xc
c0008981:	c3                   	ret    

c0008982 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008986:	89 c2                	mov    edx,eax
c0008988:	c1 e8 0a             	shr    eax,0xa
c000898b:	c1 ea 16             	shr    edx,0x16
c000898e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008993:	19 c9                	sbb    ecx,ecx
c0008995:	c1 e2 0c             	shl    edx,0xc
c0008998:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000899e:	25 fc 0f 00 00       	and    eax,0xffc
c00089a3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00089aa:	01 d0                	add    eax,edx
c00089ac:	c3                   	ret    
c00089ad:	90                   	nop

c00089ae <VAS::getPageTableEntry(unsigned long)>:
c00089ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089b2:	89 ca                	mov    edx,ecx
c00089b4:	c1 e9 0a             	shr    ecx,0xa
c00089b7:	c1 ea 16             	shr    edx,0x16
c00089ba:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00089c0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00089c6:	c1 e0 0c             	shl    eax,0xc
c00089c9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00089cc:	c3                   	ret    

c00089cd <Virt::freeKernelVirtualPages(unsigned long)>:
c00089cd:	57                   	push   edi
c00089ce:	56                   	push   esi
c00089cf:	be 01 00 00 00       	mov    esi,0x1
c00089d4:	53                   	push   ebx
c00089d5:	83 ec 10             	sub    esp,0x10
c00089d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089dc:	c1 eb 0c             	shr    ebx,0xc
c00089df:	eb 3f                	jmp    c0008a20 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00089e1:	83 ec 08             	sub    esp,0x8
c00089e4:	a1 90 f3 01 c0       	mov    eax,ds:0xc001f390
c00089e9:	57                   	push   edi
c00089ea:	50                   	push   eax
c00089eb:	e8 be ff ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00089f5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00089f9:	f6 c4 04             	test   ah,0x4
c00089fc:	75 60                	jne    c0008a5e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00089fe:	80 fa 04             	cmp    dl,0x4
c0008a01:	74 79                	je     c0008a7c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0008a03:	80 fa 02             	cmp    dl,0x2
c0008a06:	0f 84 89 00 00 00    	je     c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0008a0c:	80 fa 03             	cmp    dl,0x3
c0008a0f:	0f 84 ae 00 00 00    	je     c0008ac3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0008a15:	fe ca                	dec    dl
c0008a17:	0f 84 93 00 00 00    	je     c0008ab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a1d:	43                   	inc    ebx
c0008a1e:	31 f6                	xor    esi,esi
c0008a20:	53                   	push   ebx
c0008a21:	89 df                	mov    edi,ebx
c0008a23:	e8 51 fc ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c0008a28:	c1 e7 0c             	shl    edi,0xc
c0008a2b:	5a                   	pop    edx
c0008a2c:	84 c0                	test   al,al
c0008a2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a32:	75 ad                	jne    c00089e1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008a34:	83 ec 0c             	sub    esp,0xc
c0008a37:	68 3d cf 01 c0       	push   0xc001cf3d
c0008a3c:	e8 fe 69 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008a41:	5a                   	pop    edx
c0008a42:	59                   	pop    ecx
c0008a43:	57                   	push   edi
c0008a44:	8b 3d 90 f3 01 c0    	mov    edi,DWORD PTR ds:0xc001f390
c0008a4a:	57                   	push   edi
c0008a4b:	e8 5e ff ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008a50:	83 c4 10             	add    esp,0x10
c0008a53:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a59:	f6 c4 04             	test   ah,0x4
c0008a5c:	74 bf                	je     c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a5e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008a62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	50                   	push   eax
c0008a6b:	e8 5c e4 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a77:	80 fa 04             	cmp    dl,0x4
c0008a7a:	75 87                	jne    c0008a03 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008a7c:	89 f0                	mov    eax,esi
c0008a7e:	84 c0                	test   al,al
c0008a80:	75 47                	jne    c0008ac9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008a82:	c7 44 24 20 ec cd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cdec
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	5b                   	pop    ebx
c0008a8e:	5e                   	pop    esi
c0008a8f:	5f                   	pop    edi
c0008a90:	e9 aa 69 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0008a95:	89 f0                	mov    eax,esi
c0008a97:	84 c0                	test   al,al
c0008a99:	75 15                	jne    c0008ab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	68 59 cf 01 c0       	push   0xc001cf59
c0008aa3:	e8 97 69 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008aa8:	83 c4 10             	add    esp,0x10
c0008aab:	e9 6d ff ff ff       	jmp    c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008ab0:	83 ec 08             	sub    esp,0x8
c0008ab3:	6a 00                	push   0x0
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 89 fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	e9 5a ff ff ff       	jmp    c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008ac3:	89 f0                	mov    eax,esi
c0008ac5:	84 c0                	test   al,al
c0008ac7:	75 15                	jne    c0008ade <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008ac9:	83 ec 08             	sub    esp,0x8
c0008acc:	6a 00                	push   0x0
c0008ace:	53                   	push   ebx
c0008acf:	e8 70 fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008ad4:	83 c4 10             	add    esp,0x10
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	5b                   	pop    ebx
c0008adb:	5e                   	pop    esi
c0008adc:	5f                   	pop    edi
c0008add:	c3                   	ret    
c0008ade:	c7 44 24 20 75 cf 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cf75
c0008ae6:	83 c4 10             	add    esp,0x10
c0008ae9:	5b                   	pop    ebx
c0008aea:	5e                   	pop    esi
c0008aeb:	5f                   	pop    edi
c0008aec:	e9 4e 69 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0008af1:	90                   	nop

c0008af2 <VAS::freeAllocatedPages(unsigned long)>:
c0008af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008af6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008afa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008afe:	74 09                	je     c0008b09 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008b00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008b04:	e9 c4 fe ff ff       	jmp    c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008b09:	c7 44 24 04 10 ce 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ce10
c0008b11:	e9 da 0d 00 00       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>

c0008b16 <VAS::virtualToPhysical(unsigned long)>:
c0008b16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b1a:	50                   	push   eax
c0008b1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b1f:	52                   	push   edx
c0008b20:	e8 89 fe ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008b25:	59                   	pop    ecx
c0008b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b28:	5a                   	pop    edx
c0008b29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008b30:	55                   	push   ebp
c0008b31:	57                   	push   edi
c0008b32:	56                   	push   esi
c0008b33:	53                   	push   ebx
c0008b34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008b38:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008b3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008b44:	85 db                	test   ebx,ebx
c0008b46:	7e 22                	jle    c0008b6a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008b48:	c1 e3 0c             	shl    ebx,0xc
c0008b4b:	01 f3                	add    ebx,esi
c0008b4d:	56                   	push   esi
c0008b4e:	81 c6 00 10 00 00    	add    esi,0x1000
c0008b54:	55                   	push   ebp
c0008b55:	e8 54 fe ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008b5a:	5a                   	pop    edx
c0008b5b:	59                   	pop    ecx
c0008b5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b5e:	21 f9                	and    ecx,edi
c0008b60:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008b64:	39 f3                	cmp    ebx,esi
c0008b66:	89 08                	mov    DWORD PTR [eax],ecx
c0008b68:	75 e3                	jne    c0008b4d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008b6a:	5b                   	pop    ebx
c0008b6b:	5e                   	pop    esi
c0008b6c:	5f                   	pop    edi
c0008b6d:	5d                   	pop    ebp
c0008b6e:	c3                   	ret    
c0008b6f:	90                   	nop

c0008b70 <VAS::setToWriteCombining(unsigned long, int)>:
c0008b70:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0008b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008b7b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008b82:	75 01                	jne    c0008b85 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008b84:	c3                   	ret    
c0008b85:	68 80 00 00 00       	push   0x80
c0008b8a:	6a ff                	push   0xffffffff
c0008b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b90:	50                   	push   eax
c0008b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008b95:	52                   	push   edx
c0008b96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b9a:	51                   	push   ecx
c0008b9b:	e8 90 ff ff ff       	call   c0008b30 <VAS::reflagRange(unsigned long, int, int, int)>
c0008ba0:	83 c4 14             	add    esp,0x14
c0008ba3:	c3                   	ret    

c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008ba4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bb4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008bb7:	19 c0                	sbb    eax,eax
c0008bb9:	83 ca 03             	or     edx,0x3
c0008bbc:	83 e0 fc             	and    eax,0xfffffffc
c0008bbf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008bc6:	0f 20 d8             	mov    eax,cr3
c0008bc9:	0f 22 d8             	mov    cr3,eax
c0008bcc:	c3                   	ret    
c0008bcd:	90                   	nop

c0008bce <VAS::~VAS()>:
c0008bce:	83 ec 2c             	sub    esp,0x2c
c0008bd1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008bd9:	fa                   	cli    
c0008bda:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0008bdf:	40                   	inc    eax
c0008be0:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0008be5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008bef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008bf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008bf9:	6a 01                	push   0x1
c0008bfb:	50                   	push   eax
c0008bfc:	e8 a3 ff ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0008c01:	83 c4 0c             	add    esp,0xc
c0008c04:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c0c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008c14:	0f 8f d4 00 00 00    	jg     c0008cee <VAS::~VAS()+0x120>
c0008c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c25:	c1 e2 02             	shl    edx,0x2
c0008c28:	01 d0                	add    eax,edx
c0008c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c34:	83 e0 01             	and    eax,0x1
c0008c37:	0f 84 a8 00 00 00    	je     c0008ce5 <VAS::~VAS()+0x117>
c0008c3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008c45:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008c4d:	7f 72                	jg     c0008cc1 <VAS::~VAS()+0xf3>
c0008c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008c53:	c1 e0 0a             	shl    eax,0xa
c0008c56:	89 c2                	mov    edx,eax
c0008c58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c5c:	01 d0                	add    eax,edx
c0008c5e:	c1 e0 0c             	shl    eax,0xc
c0008c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c65:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008c6f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008c75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008c79:	6a 01                	push   0x1
c0008c7b:	50                   	push   eax
c0008c7c:	e8 01 fd ff ff       	call   c0008982 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008c81:	83 c4 0c             	add    esp,0xc
c0008c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c96:	25 01 04 00 00       	and    eax,0x401
c0008c9b:	3d 01 04 00 00       	cmp    eax,0x401
c0008ca0:	75 19                	jne    c0008cbb <VAS::~VAS()+0xed>
c0008ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ca6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	50                   	push   eax
c0008caf:	e8 18 e2 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008cbb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008cbf:	eb 84                	jmp    c0008c45 <VAS::~VAS()+0x77>
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	25 00 04 00 00       	and    eax,0x400
c0008cca:	74 19                	je     c0008ce5 <VAS::~VAS()+0x117>
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	50                   	push   eax
c0008cd9:	e8 ee e1 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ce5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008ce9:	e9 1e ff ff ff       	jmp    c0008c0c <VAS::~VAS()+0x3e>
c0008cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf5:	83 ec 0c             	sub    esp,0xc
c0008cf8:	50                   	push   eax
c0008cf9:	e8 cf fc ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008cfe:	83 c4 10             	add    esp,0x10
c0008d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008d05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008d08:	83 ec 0c             	sub    esp,0xc
c0008d0b:	50                   	push   eax
c0008d0c:	e8 bb e1 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008d11:	83 c4 10             	add    esp,0x10
c0008d14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d18:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0008d1d:	48                   	dec    eax
c0008d1e:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0008d23:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0008d28:	85 c0                	test   eax,eax
c0008d2a:	75 01                	jne    c0008d2d <VAS::~VAS()+0x15f>
c0008d2c:	fb                   	sti    
c0008d2d:	90                   	nop
c0008d2e:	83 c4 2c             	add    esp,0x2c
c0008d31:	c3                   	ret    

c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008d32:	55                   	push   ebp
c0008d33:	57                   	push   edi
c0008d34:	56                   	push   esi
c0008d35:	53                   	push   ebx
c0008d36:	83 ec 1c             	sub    esp,0x1c
c0008d39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008d3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008d41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008d47:	77 0b                	ja     c0008d54 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008d49:	0f 20 d8             	mov    eax,cr3
c0008d4c:	0f 20 d8             	mov    eax,cr3
c0008d4f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008d52:	75 47                	jne    c0008d9b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008d54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d58:	09 d8                	or     eax,ebx
c0008d5a:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d5f:	75 57                	jne    c0008db8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008d61:	89 de                	mov    esi,ebx
c0008d63:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008d66:	c1 ee 16             	shr    esi,0x16
c0008d69:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008d70:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008d74:	74 54                	je     c0008dca <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008d76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008d7a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008d80:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008d84:	c1 e6 0c             	shl    esi,0xc
c0008d87:	c1 eb 0a             	shr    ebx,0xa
c0008d8a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008d90:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008d93:	83 c4 1c             	add    esp,0x1c
c0008d96:	5b                   	pop    ebx
c0008d97:	5e                   	pop    esi
c0008d98:	5f                   	pop    edi
c0008d99:	5d                   	pop    ebp
c0008d9a:	c3                   	ret    
c0008d9b:	83 ec 0c             	sub    esp,0xc
c0008d9e:	68 34 ce 01 c0       	push   0xc001ce34
c0008da3:	e8 48 0b 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0008da8:	83 c4 10             	add    esp,0x10
c0008dab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008daf:	09 d8                	or     eax,ebx
c0008db1:	a9 ff 0f 00 00       	test   eax,0xfff
c0008db6:	74 a9                	je     c0008d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008db8:	83 ec 0c             	sub    esp,0xc
c0008dbb:	68 9c ce 01 c0       	push   0xc001ce9c
c0008dc0:	e8 7a 66 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	eb 97                	jmp    c0008d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008dca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dce:	e8 5b e1 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008dd3:	83 ec 0c             	sub    esp,0xc
c0008dd6:	89 c5                	mov    ebp,eax
c0008dd8:	8b 0d 90 f3 01 c0    	mov    ecx,DWORD PTR ds:0xc001f390
c0008dde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008de2:	6a 01                	push   0x1
c0008de4:	e8 b4 f8 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008de9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008df0:	6a 01                	push   0x1
c0008df2:	50                   	push   eax
c0008df3:	55                   	push   ebp
c0008df4:	81 cd 07 04 00 00    	or     ebp,0x407
c0008dfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008dfe:	51                   	push   ecx
c0008dff:	e8 28 02 00 00       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008e04:	83 c4 1c             	add    esp,0x1c
c0008e07:	68 00 10 00 00       	push   0x1000
c0008e0c:	6a 00                	push   0x0
c0008e0e:	50                   	push   eax
c0008e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e13:	e8 d8 76 ff ff       	call   c00004f0 <memset>
c0008e18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008e1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008e1f:	e8 a9 fb ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008e24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e28:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008e31:	e9 40 ff ff ff       	jmp    c0008d76 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008e36 <VAS::allocatePages(int, int)>:
c0008e36:	55                   	push   ebp
c0008e37:	57                   	push   edi
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 1c             	sub    esp,0x1c
c0008e3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008e41:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0008e46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e4c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008e52:	83 e0 01             	and    eax,0x1
c0008e55:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008e59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008e5d:	0f 85 cc 00 00 00    	jne    c0008f2f <VAS::allocatePages(int, int)+0xf9>
c0008e63:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008e66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	0f 84 a1 00 00 00    	je     c0008f13 <VAS::allocatePages(int, int)+0xdd>
c0008e72:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008e76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e7a:	c1 e6 0c             	shl    esi,0xc
c0008e7d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008e81:	85 c0                	test   eax,eax
c0008e83:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008e86:	7e 33                	jle    c0008ebb <VAS::allocatePages(int, int)+0x85>
c0008e88:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e90:	81 cd 00 04 00 00    	or     ebp,0x400
c0008e96:	e8 93 e0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008e9b:	55                   	push   ebp
c0008e9c:	53                   	push   ebx
c0008e9d:	50                   	push   eax
c0008e9e:	57                   	push   edi
c0008e9f:	e8 8e fe ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008eac:	74 03                	je     c0008eb1 <VAS::allocatePages(int, int)+0x7b>
c0008eae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008eb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008eb7:	39 de                	cmp    esi,ebx
c0008eb9:	75 db                	jne    c0008e96 <VAS::allocatePages(int, int)+0x60>
c0008ebb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008ec0:	75 12                	jne    c0008ed4 <VAS::allocatePages(int, int)+0x9e>
c0008ec2:	0f 20 d8             	mov    eax,cr3
c0008ec5:	0f 22 d8             	mov    cr3,eax
c0008ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ecc:	83 c4 1c             	add    esp,0x1c
c0008ecf:	5b                   	pop    ebx
c0008ed0:	5e                   	pop    esi
c0008ed1:	5f                   	pop    edi
c0008ed2:	5d                   	pop    ebp
c0008ed3:	c3                   	ret    
c0008ed4:	c1 ee 0a             	shr    esi,0xa
c0008ed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008edb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008ee1:	c1 eb 0a             	shr    ebx,0xa
c0008ee4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008eea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008ef0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008ef6:	39 c3                	cmp    ebx,eax
c0008ef8:	77 ce                	ja     c0008ec8 <VAS::allocatePages(int, int)+0x92>
c0008efa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008efd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f03:	39 d8                	cmp    eax,ebx
c0008f05:	73 f3                	jae    c0008efa <VAS::allocatePages(int, int)+0xc4>
c0008f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f0b:	83 c4 1c             	add    esp,0x1c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	83 ec 0c             	sub    esp,0xc
c0008f16:	68 c0 ce 01 c0       	push   0xc001cec0
c0008f1b:	e8 1f 65 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008f20:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008f23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f27:	83 c4 10             	add    esp,0x10
c0008f2a:	e9 43 ff ff ff       	jmp    c0008e72 <VAS::allocatePages(int, int)+0x3c>
c0008f2f:	83 ec 0c             	sub    esp,0xc
c0008f32:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008f36:	51                   	push   ecx
c0008f37:	e8 61 f7 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f40:	83 c4 10             	add    esp,0x10
c0008f43:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008f48:	0f 87 9b 00 00 00    	ja     c0008fe9 <VAS::allocatePages(int, int)+0x1b3>
c0008f4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008f52:	85 d2                	test   edx,edx
c0008f54:	7e 3c                	jle    c0008f92 <VAS::allocatePages(int, int)+0x15c>
c0008f56:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008f5a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008f5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f62:	c1 e5 0c             	shl    ebp,0xc
c0008f65:	81 ce 00 04 00 00    	or     esi,0x400
c0008f6b:	01 dd                	add    ebp,ebx
c0008f6d:	e8 bc df ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008f72:	56                   	push   esi
c0008f73:	53                   	push   ebx
c0008f74:	50                   	push   eax
c0008f75:	57                   	push   edi
c0008f76:	e8 b7 fd ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f7b:	83 c4 10             	add    esp,0x10
c0008f7e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f83:	74 03                	je     c0008f88 <VAS::allocatePages(int, int)+0x152>
c0008f85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f88:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f8e:	39 dd                	cmp    ebp,ebx
c0008f90:	75 db                	jne    c0008f6d <VAS::allocatePages(int, int)+0x137>
c0008f92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f97:	0f 84 25 ff ff ff    	je     c0008ec2 <VAS::allocatePages(int, int)+0x8c>
c0008f9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008fa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008fa5:	89 d3                	mov    ebx,edx
c0008fa7:	c1 e0 0c             	shl    eax,0xc
c0008faa:	c1 eb 0a             	shr    ebx,0xa
c0008fad:	01 d0                	add    eax,edx
c0008faf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008fb5:	c1 e8 0a             	shr    eax,0xa
c0008fb8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008fbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008fc3:	2d 00 00 40 00       	sub    eax,0x400000
c0008fc8:	39 c3                	cmp    ebx,eax
c0008fca:	0f 87 f8 fe ff ff    	ja     c0008ec8 <VAS::allocatePages(int, int)+0x92>
c0008fd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008fd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008fd9:	39 d8                	cmp    eax,ebx
c0008fdb:	73 f3                	jae    c0008fd0 <VAS::allocatePages(int, int)+0x19a>
c0008fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fe1:	83 c4 1c             	add    esp,0x1c
c0008fe4:	5b                   	pop    ebx
c0008fe5:	5e                   	pop    esi
c0008fe6:	5f                   	pop    edi
c0008fe7:	5d                   	pop    ebp
c0008fe8:	c3                   	ret    
c0008fe9:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0008fee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ff4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008ffb:	0f 84 4d ff ff ff    	je     c0008f4e <VAS::allocatePages(int, int)+0x118>
c0009001:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009009:	e9 40 ff ff ff       	jmp    c0008f4e <VAS::allocatePages(int, int)+0x118>

c000900e <VAS::setCPUSpecific(unsigned long)>:
c000900e:	83 ec 0c             	sub    esp,0xc
c0009011:	6a 05                	push   0x5
c0009013:	68 00 00 40 c2       	push   0xc2400000
c0009018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000901c:	50                   	push   eax
c000901d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009021:	52                   	push   edx
c0009022:	e8 0b fd ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009027:	83 c4 1c             	add    esp,0x1c
c000902a:	c3                   	ret    
c000902b:	90                   	nop

c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000902c:	55                   	push   ebp
c000902d:	57                   	push   edi
c000902e:	56                   	push   esi
c000902f:	53                   	push   ebx
c0009030:	83 ec 1c             	sub    esp,0x1c
c0009033:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0009038:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000903c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009042:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009046:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000904c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009050:	83 e0 01             	and    eax,0x1
c0009053:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000905b:	85 c0                	test   eax,eax
c000905d:	7e 39                	jle    c0009098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000905f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009063:	89 f3                	mov    ebx,esi
c0009065:	c1 e0 0c             	shl    eax,0xc
c0009068:	01 f0                	add    eax,esi
c000906a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000906e:	55                   	push   ebp
c000906f:	53                   	push   ebx
c0009070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009074:	29 f0                	sub    eax,esi
c0009076:	01 d8                	add    eax,ebx
c0009078:	50                   	push   eax
c0009079:	57                   	push   edi
c000907a:	e8 b3 fc ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009087:	74 03                	je     c000908c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009089:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000908c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009092:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009096:	75 d6                	jne    c000906e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009098:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000909d:	75 10                	jne    c00090af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000909f:	0f 20 d8             	mov    eax,cr3
c00090a2:	0f 22 d8             	mov    cr3,eax
c00090a5:	83 c4 1c             	add    esp,0x1c
c00090a8:	89 f0                	mov    eax,esi
c00090aa:	5b                   	pop    ebx
c00090ab:	5e                   	pop    esi
c00090ac:	5f                   	pop    edi
c00090ad:	5d                   	pop    ebp
c00090ae:	c3                   	ret    
c00090af:	89 f3                	mov    ebx,esi
c00090b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00090b5:	c1 eb 0a             	shr    ebx,0xa
c00090b8:	c1 e0 0c             	shl    eax,0xc
c00090bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00090c1:	01 f0                	add    eax,esi
c00090c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00090c9:	c1 e8 0a             	shr    eax,0xa
c00090cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00090d1:	2d 00 00 40 00       	sub    eax,0x400000
c00090d6:	39 c3                	cmp    ebx,eax
c00090d8:	77 cb                	ja     c00090a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00090da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00090dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00090e3:	39 d8                	cmp    eax,ebx
c00090e5:	73 f3                	jae    c00090da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00090e7:	83 c4 1c             	add    esp,0x1c
c00090ea:	89 f0                	mov    eax,esi
c00090ec:	5b                   	pop    ebx
c00090ed:	5e                   	pop    esi
c00090ee:	5f                   	pop    edi
c00090ef:	5d                   	pop    ebp
c00090f0:	c3                   	ret    
c00090f1:	90                   	nop

c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00090f2:	55                   	push   ebp
c00090f3:	57                   	push   edi
c00090f4:	56                   	push   esi
c00090f5:	53                   	push   ebx
c00090f6:	83 ec 1c             	sub    esp,0x1c
c00090f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009101:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009105:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009109:	a9 ff 0f 00 00       	test   eax,0xfff
c000910e:	75 4a                	jne    c000915a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009110:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009114:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009117:	c1 eb 16             	shr    ebx,0x16
c000911a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009121:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009125:	74 4d                	je     c0009174 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000912b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000912f:	c1 e8 0a             	shr    eax,0xa
c0009132:	80 fa 01             	cmp    dl,0x1
c0009135:	19 d2                	sbb    edx,edx
c0009137:	c1 e3 0c             	shl    ebx,0xc
c000913a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000913e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009144:	25 fc 0f 00 00       	and    eax,0xffc
c0009149:	01 d8                	add    eax,ebx
c000914b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009152:	83 c4 1c             	add    esp,0x1c
c0009155:	5b                   	pop    ebx
c0009156:	5e                   	pop    esi
c0009157:	5f                   	pop    edi
c0009158:	5d                   	pop    ebp
c0009159:	c3                   	ret    
c000915a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000915e:	83 ec 0c             	sub    esp,0xc
c0009161:	68 ec ce 01 c0       	push   0xc001ceec
c0009166:	e8 d4 62 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000916b:	83 c4 10             	add    esp,0x10
c000916e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009172:	eb 9c                	jmp    c0009110 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009174:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009178:	e8 b1 dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c000917d:	83 ec 0c             	sub    esp,0xc
c0009180:	89 c5                	mov    ebp,eax
c0009182:	8b 0d 90 f3 01 c0    	mov    ecx,DWORD PTR ds:0xc001f390
c0009188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000918c:	6a 01                	push   0x1
c000918e:	e8 0a f5 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0009193:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000919a:	6a 01                	push   0x1
c000919c:	50                   	push   eax
c000919d:	55                   	push   ebp
c000919e:	81 cd 07 04 00 00    	or     ebp,0x407
c00091a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00091a8:	51                   	push   ecx
c00091a9:	e8 7e fe ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00091ae:	83 c4 1c             	add    esp,0x1c
c00091b1:	68 00 10 00 00       	push   0x1000
c00091b6:	6a 00                	push   0x0
c00091b8:	50                   	push   eax
c00091b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091bd:	e8 2e 73 ff ff       	call   c00004f0 <memset>
c00091c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00091c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00091c9:	e8 ff f7 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c00091ce:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00091d1:	83 c4 10             	add    esp,0x10
c00091d4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00091d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00091db:	e9 47 ff ff ff       	jmp    c0009127 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00091e0 <VAS::VAS(bool)>:
c00091e0:	53                   	push   ebx
c00091e1:	83 ec 28             	sub    esp,0x28
c00091e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00091ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009206:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000920a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000920d:	e8 1c dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009212:	89 c2                	mov    edx,eax
c0009214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009218:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000921b:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c0009221:	83 ec 0c             	sub    esp,0xc
c0009224:	6a 01                	push   0x1
c0009226:	e8 72 f4 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	89 c2                	mov    edx,eax
c0009230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009234:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009237:	83 ec 0c             	sub    esp,0xc
c000923a:	6a 03                	push   0x3
c000923c:	6a 01                	push   0x1
c000923e:	52                   	push   edx
c000923f:	50                   	push   eax
c0009240:	53                   	push   ebx
c0009241:	e8 e6 fd ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009246:	83 c4 20             	add    esp,0x20
c0009249:	89 c2                	mov    edx,eax
c000924b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000924f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009252:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000925a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009262:	7f 1c                	jg     c0009280 <VAS::VAS(bool)+0xa0>
c0009264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000926b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000926f:	c1 e2 02             	shl    edx,0x2
c0009272:	01 d0                	add    eax,edx
c0009274:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000927a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000927e:	eb da                	jmp    c000925a <VAS::VAS(bool)+0x7a>
c0009280:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009288:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009290:	7f 7a                	jg     c000930c <VAS::VAS(bool)+0x12c>
c0009292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009296:	2d 00 02 00 00       	sub    eax,0x200
c000929b:	c1 e0 0c             	shl    eax,0xc
c000929e:	83 c8 03             	or     eax,0x3
c00092a1:	89 c2                	mov    edx,eax
c00092a3:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c00092a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00092ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00092b4:	83 e0 10             	and    eax,0x10
c00092b7:	84 c0                	test   al,al
c00092b9:	74 07                	je     c00092c2 <VAS::VAS(bool)+0xe2>
c00092bb:	b8 00 01 00 00       	mov    eax,0x100
c00092c0:	eb 05                	jmp    c00092c7 <VAS::VAS(bool)+0xe7>
c00092c2:	b8 00 00 00 00       	mov    eax,0x0
c00092c7:	09 d0                	or     eax,edx
c00092c9:	89 c1                	mov    ecx,eax
c00092cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092d6:	c1 e2 02             	shl    edx,0x2
c00092d9:	01 d0                	add    eax,edx
c00092db:	89 ca                	mov    edx,ecx
c00092dd:	89 10                	mov    DWORD PTR [eax],edx
c00092df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e3:	2d 40 03 00 00       	sub    eax,0x340
c00092e8:	83 f8 7f             	cmp    eax,0x7f
c00092eb:	77 16                	ja     c0009303 <VAS::VAS(bool)+0x123>
c00092ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092f8:	c1 e2 02             	shl    edx,0x2
c00092fb:	01 d0                	add    eax,edx
c00092fd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009303:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009307:	e9 7c ff ff ff       	jmp    c0009288 <VAS::VAS(bool)+0xa8>
c000930c:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0009311:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009317:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000931d:	83 e0 10             	and    eax,0x10
c0009320:	84 c0                	test   al,al
c0009322:	74 07                	je     c000932b <VAS::VAS(bool)+0x14b>
c0009324:	b8 03 41 00 00       	mov    eax,0x4103
c0009329:	eb 05                	jmp    c0009330 <VAS::VAS(bool)+0x150>
c000932b:	b8 03 40 00 00       	mov    eax,0x4003
c0009330:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009334:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009337:	81 c2 20 0c 00 00    	add    edx,0xc20
c000933d:	89 02                	mov    DWORD PTR [edx],eax
c000933f:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0009344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000934a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009350:	83 ec 08             	sub    esp,0x8
c0009353:	50                   	push   eax
c0009354:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009358:	e8 b1 fc ff ff       	call   c000900e <VAS::setCPUSpecific(unsigned long)>
c000935d:	83 c4 10             	add    esp,0x10
c0009360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009364:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009367:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000936c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009372:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009378:	83 e0 10             	and    eax,0x10
c000937b:	84 c0                	test   al,al
c000937d:	74 07                	je     c0009386 <VAS::VAS(bool)+0x1a6>
c000937f:	b8 00 01 00 00       	mov    eax,0x100
c0009384:	eb 05                	jmp    c000938b <VAS::VAS(bool)+0x1ab>
c0009386:	b8 00 00 00 00       	mov    eax,0x0
c000938b:	09 c2                	or     edx,eax
c000938d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009391:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009394:	05 fc 0f 00 00       	add    eax,0xffc
c0009399:	83 ca 03             	or     edx,0x3
c000939c:	89 10                	mov    DWORD PTR [eax],edx
c000939e:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c00093a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093a9:	83 ec 0c             	sub    esp,0xc
c00093ac:	50                   	push   eax
c00093ad:	e8 12 1c 00 00       	call   c000afc4 <Device::getName()>
c00093b2:	83 c4 10             	add    esp,0x10
c00093b5:	83 ec 08             	sub    esp,0x8
c00093b8:	68 8f cf 01 c0       	push   0xc001cf8f
c00093bd:	50                   	push   eax
c00093be:	e8 3d 73 ff ff       	call   c0000700 <strcmp>
c00093c3:	83 c4 10             	add    esp,0x10
c00093c6:	85 c0                	test   eax,eax
c00093c8:	0f 94 c0             	sete   al
c00093cb:	84 c0                	test   al,al
c00093cd:	0f 84 87 00 00 00    	je     c000945a <VAS::VAS(bool)+0x27a>
c00093d3:	fa                   	cli    
c00093d4:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00093d9:	40                   	inc    eax
c00093da:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00093df:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c00093e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093ea:	05 7c 09 00 00       	add    eax,0x97c
c00093ef:	83 ec 0c             	sub    esp,0xc
c00093f2:	50                   	push   eax
c00093f3:	e8 66 d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093f8:	83 c4 10             	add    esp,0x10
c00093fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009400:	89 c3                	mov    ebx,eax
c0009402:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0009407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000940d:	05 7c 09 00 00       	add    eax,0x97c
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	50                   	push   eax
c0009416:	e8 43 d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 ec 08             	sub    esp,0x8
c0009421:	50                   	push   eax
c0009422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009426:	e8 83 f5 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009430:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009435:	6a 11                	push   0x11
c0009437:	53                   	push   ebx
c0009438:	50                   	push   eax
c0009439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000943d:	e8 f0 f8 ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000944a:	48                   	dec    eax
c000944b:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0009450:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0009455:	85 c0                	test   eax,eax
c0009457:	75 01                	jne    c000945a <VAS::VAS(bool)+0x27a>
c0009459:	fb                   	sti    
c000945a:	90                   	nop
c000945b:	83 c4 28             	add    esp,0x28
c000945e:	5b                   	pop    ebx
c000945f:	c3                   	ret    

c0009460 <VAS::evict(unsigned long)>:
c0009460:	55                   	push   ebp
c0009461:	57                   	push   edi
c0009462:	56                   	push   esi
c0009463:	53                   	push   ebx
c0009464:	83 ec 1c             	sub    esp,0x1c
c0009467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000946b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000946f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009473:	e8 66 f3 ff ff       	call   c00087de <Virt::allocateSwapfilePage()>
c0009478:	8b 0d 4c ec 01 c0    	mov    ecx,DWORD PTR ds:0xc001ec4c
c000947e:	89 c7                	mov    edi,eax
c0009480:	85 c9                	test   ecx,ecx
c0009482:	7e 3e                	jle    c00094c2 <VAS::evict(unsigned long)+0x62>
c0009484:	89 ee                	mov    esi,ebp
c0009486:	31 db                	xor    ebx,ebx
c0009488:	83 ec 0c             	sub    esp,0xc
c000948b:	57                   	push   edi
c000948c:	e8 3b f3 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c0009491:	89 34 24             	mov    DWORD PTR [esp],esi
c0009494:	01 d8                	add    eax,ebx
c0009496:	6a 01                	push   0x1
c0009498:	31 d2                	xor    edx,edx
c000949a:	43                   	inc    ebx
c000949b:	52                   	push   edx
c000949c:	81 c6 00 02 00 00    	add    esi,0x200
c00094a2:	50                   	push   eax
c00094a3:	0f be 05 58 ec 01 c0 	movsx  eax,BYTE PTR ds:0xc001ec58
c00094aa:	8b 14 85 fc 16 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde904]
c00094b1:	52                   	push   edx
c00094b2:	e8 8d 2b 00 00       	call   c000c044 <LogicalDisk::write(unsigned long long, int, void*)>
c00094b7:	83 c4 20             	add    esp,0x20
c00094ba:	39 1d 4c ec 01 c0    	cmp    DWORD PTR ds:0xc001ec4c,ebx
c00094c0:	7f c6                	jg     c0009488 <VAS::evict(unsigned long)+0x28>
c00094c2:	83 ec 08             	sub    esp,0x8
c00094c5:	c1 e7 0b             	shl    edi,0xb
c00094c8:	55                   	push   ebp
c00094c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00094cd:	50                   	push   eax
c00094ce:	e8 db f4 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c00094d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00094d5:	89 d1                	mov    ecx,edx
c00094d7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00094dd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00094e3:	09 cf                	or     edi,ecx
c00094e5:	89 38                	mov    DWORD PTR [eax],edi
c00094e7:	89 14 24             	mov    DWORD PTR [esp],edx
c00094ea:	ff 05 88 f3 01 c0    	inc    DWORD PTR ds:0xc001f388
c00094f0:	e8 d7 d9 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c00094f5:	0f 20 d8             	mov    eax,cr3
c00094f8:	0f 22 d8             	mov    cr3,eax
c00094fb:	a1 84 f3 01 c0       	mov    eax,ds:0xc001f384
c0009500:	c7 44 24 40 9d cf 01 c0 	mov    DWORD PTR [esp+0x40],0xc001cf9d
c0009508:	8d 50 01             	lea    edx,[eax+0x1]
c000950b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000950f:	89 15 84 f3 01 c0    	mov    DWORD PTR ds:0xc001f384,edx
c0009515:	83 c4 2c             	add    esp,0x2c
c0009518:	5b                   	pop    ebx
c0009519:	5e                   	pop    esi
c000951a:	5f                   	pop    edi
c000951b:	5d                   	pop    ebp
c000951c:	e9 cf 03 00 00       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c0009521:	90                   	nop

c0009522 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0009522:	55                   	push   ebp
c0009523:	57                   	push   edi
c0009524:	56                   	push   esi
c0009525:	53                   	push   ebx
c0009526:	83 ec 14             	sub    esp,0x14
c0009529:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000952d:	53                   	push   ebx
c000952e:	68 ae cf 01 c0       	push   0xc001cfae
c0009533:	e8 b8 03 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0009538:	83 c4 10             	add    esp,0x10
c000953b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009541:	74 21                	je     c0009564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009543:	83 ec 08             	sub    esp,0x8
c0009546:	53                   	push   ebx
c0009547:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000954b:	57                   	push   edi
c000954c:	e8 5d f4 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	89 c6                	mov    esi,eax
c0009556:	85 c0                	test   eax,eax
c0009558:	74 0a                	je     c0009564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000955a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000955c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009562:	74 0a                	je     c000956e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c0009564:	31 c0                	xor    eax,eax
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	5b                   	pop    ebx
c000956a:	5e                   	pop    esi
c000956b:	5f                   	pop    edi
c000956c:	5d                   	pop    ebp
c000956d:	c3                   	ret    
c000956e:	e8 bb d9 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009573:	c1 ed 0b             	shr    ebp,0xb
c0009576:	8b 16                	mov    edx,DWORD PTR [esi]
c0009578:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000957e:	09 c2                	or     edx,eax
c0009580:	81 ca 01 08 00 00    	or     edx,0x801
c0009586:	89 16                	mov    DWORD PTR [esi],edx
c0009588:	8b 35 4c ec 01 c0    	mov    esi,DWORD PTR ds:0xc001ec4c
c000958e:	85 f6                	test   esi,esi
c0009590:	7e 3e                	jle    c00095d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c0009592:	89 df                	mov    edi,ebx
c0009594:	31 f6                	xor    esi,esi
c0009596:	83 ec 0c             	sub    esp,0xc
c0009599:	55                   	push   ebp
c000959a:	e8 2d f2 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c000959f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00095a2:	01 f0                	add    eax,esi
c00095a4:	6a 01                	push   0x1
c00095a6:	31 d2                	xor    edx,edx
c00095a8:	46                   	inc    esi
c00095a9:	52                   	push   edx
c00095aa:	81 c7 00 02 00 00    	add    edi,0x200
c00095b0:	50                   	push   eax
c00095b1:	0f be 05 58 ec 01 c0 	movsx  eax,BYTE PTR ds:0xc001ec58
c00095b8:	8b 0c 85 fc 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde904]
c00095bf:	51                   	push   ecx
c00095c0:	e8 13 2a 00 00       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c00095c5:	83 c4 20             	add    esp,0x20
c00095c8:	39 35 4c ec 01 c0    	cmp    DWORD PTR ds:0xc001ec4c,esi
c00095ce:	7f c6                	jg     c0009596 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c00095d0:	a1 88 f3 01 c0       	mov    eax,ds:0xc001f388
c00095d5:	48                   	dec    eax
c00095d6:	52                   	push   edx
c00095d7:	a3 88 f3 01 c0       	mov    ds:0xc001f388,eax
c00095dc:	50                   	push   eax
c00095dd:	53                   	push   ebx
c00095de:	68 c1 cf 01 c0       	push   0xc001cfc1
c00095e3:	e8 08 03 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00095e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095eb:	e8 be f1 ff ff       	call   c00087ae <Virt::freeSwapfilePage(unsigned long)>
c00095f0:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00095f5:	83 c4 10             	add    esp,0x10
c00095f8:	48                   	dec    eax
c00095f9:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00095fe:	85 c0                	test   eax,eax
c0009600:	75 01                	jne    c0009603 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c0009602:	fb                   	sti    
c0009603:	0f 20 d8             	mov    eax,cr3
c0009606:	0f 22 d8             	mov    cr3,eax
c0009609:	b0 01                	mov    al,0x1
c000960b:	e9 56 ff ff ff       	jmp    c0009566 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0009610 <VAS::scanForEviction()>:
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	83 ec 10             	sub    esp,0x10
c0009618:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000961c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000961f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009625:	75 0e                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009627:	89 da                	mov    edx,ebx
c0009629:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000962c:	c1 ea 16             	shr    edx,0x16
c000962f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009633:	74 4e                	je     c0009683 <VAS::scanForEviction()+0x73>
c0009635:	53                   	push   ebx
c0009636:	56                   	push   esi
c0009637:	e8 72 f3 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c000963c:	5a                   	pop    edx
c000963d:	8b 10                	mov    edx,DWORD PTR [eax]
c000963f:	59                   	pop    ecx
c0009640:	89 d1                	mov    ecx,edx
c0009642:	81 e1 01 08 00 00    	and    ecx,0x801
c0009648:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000964e:	74 3e                	je     c000968e <VAS::scanForEviction()+0x7e>
c0009650:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009656:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000965c:	76 2b                	jbe    c0009689 <VAS::scanForEviction()+0x79>
c000965e:	47                   	inc    edi
c000965f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0009666:	83 ff 03             	cmp    edi,0x3
c0009669:	74 32                	je     c000969d <VAS::scanForEviction()+0x8d>
c000966b:	31 db                	xor    ebx,ebx
c000966d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009673:	75 c0                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009675:	89 da                	mov    edx,ebx
c0009677:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000967a:	c1 ea 16             	shr    edx,0x16
c000967d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009681:	75 b2                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009683:	81 c3 00 00 40 00    	add    ebx,0x400000
c0009689:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000968c:	eb 91                	jmp    c000961f <VAS::scanForEviction()+0xf>
c000968e:	f6 c2 20             	test   dl,0x20
c0009691:	74 13                	je     c00096a6 <VAS::scanForEviction()+0x96>
c0009693:	83 e2 df             	and    edx,0xffffffdf
c0009696:	89 10                	mov    DWORD PTR [eax],edx
c0009698:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000969b:	eb b3                	jmp    c0009650 <VAS::scanForEviction()+0x40>
c000969d:	83 c4 10             	add    esp,0x10
c00096a0:	31 c0                	xor    eax,eax
c00096a2:	5b                   	pop    ebx
c00096a3:	5e                   	pop    esi
c00096a4:	5f                   	pop    edi
c00096a5:	c3                   	ret    
c00096a6:	83 ec 08             	sub    esp,0x8
c00096a9:	89 d0                	mov    eax,edx
c00096ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00096b4:	53                   	push   ebx
c00096b5:	68 d6 cf 01 c0       	push   0xc001cfd6
c00096ba:	e8 31 02 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00096bf:	58                   	pop    eax
c00096c0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00096c3:	5a                   	pop    edx
c00096c4:	51                   	push   ecx
c00096c5:	56                   	push   esi
c00096c6:	e8 95 fd ff ff       	call   c0009460 <VAS::evict(unsigned long)>
c00096cb:	5b                   	pop    ebx
c00096cc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00096cf:	5f                   	pop    edi
c00096d0:	50                   	push   eax
c00096d1:	68 ea cf 01 c0       	push   0xc001cfea
c00096d6:	e8 15 02 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00096db:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096e9:	83 c4 10             	add    esp,0x10
c00096ec:	5b                   	pop    ebx
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	c3                   	ret    

c00096f0 <mapVASFirstTime>:
c00096f0:	55                   	push   ebp
c00096f1:	57                   	push   edi
c00096f2:	56                   	push   esi
c00096f3:	53                   	push   ebx
c00096f4:	83 ec 0c             	sub    esp,0xc
c00096f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00096fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00096ff:	4a                   	dec    edx
c0009700:	0f 84 8c 00 00 00    	je     c0009792 <mapVASFirstTime+0xa2>
c0009706:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0009709:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000970c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009711:	c1 e5 15             	shl    ebp,0x15
c0009714:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009719:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000971f:	29 eb                	sub    ebx,ebp
c0009721:	29 ef                	sub    edi,ebp
c0009723:	e8 06 d8 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009728:	83 ec 0c             	sub    esp,0xc
c000972b:	68 03 04 00 00       	push   0x403
c0009730:	6a 01                	push   0x1
c0009732:	53                   	push   ebx
c0009733:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009739:	50                   	push   eax
c000973a:	56                   	push   esi
c000973b:	e8 ec f8 ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009740:	83 c4 20             	add    esp,0x20
c0009743:	39 fb                	cmp    ebx,edi
c0009745:	75 dc                	jne    c0009723 <mapVASFirstTime+0x33>
c0009747:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000974c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009751:	29 eb                	sub    ebx,ebp
c0009753:	29 ef                	sub    edi,ebp
c0009755:	e8 d4 d7 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000975a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000975e:	19 d2                	sbb    edx,edx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	83 e2 04             	and    edx,0x4
c0009766:	81 c2 03 04 00 00    	add    edx,0x403
c000976c:	52                   	push   edx
c000976d:	6a 01                	push   0x1
c000976f:	53                   	push   ebx
c0009770:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009776:	50                   	push   eax
c0009777:	56                   	push   esi
c0009778:	e8 af f8 ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000977d:	83 c4 20             	add    esp,0x20
c0009780:	39 df                	cmp    edi,ebx
c0009782:	75 d1                	jne    c0009755 <mapVASFirstTime+0x65>
c0009784:	0f 20 d8             	mov    eax,cr3
c0009787:	0f 22 d8             	mov    cr3,eax
c000978a:	83 c4 0c             	add    esp,0xc
c000978d:	5b                   	pop    ebx
c000978e:	5e                   	pop    esi
c000978f:	5f                   	pop    edi
c0009790:	5d                   	pop    ebp
c0009791:	c3                   	ret    
c0009792:	83 ec 0c             	sub    esp,0xc
c0009795:	68 fd cf 01 c0       	push   0xc001cffd
c000979a:	e8 51 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000979f:	83 c4 10             	add    esp,0x10
c00097a2:	83 c4 0c             	add    esp,0xc
c00097a5:	5b                   	pop    ebx
c00097a6:	5e                   	pop    esi
c00097a7:	5f                   	pop    edi
c00097a8:	5d                   	pop    ebp
c00097a9:	c3                   	ret    

c00097aa <__cxa_atexit>:
c00097aa:	31 c0                	xor    eax,eax
c00097ac:	c3                   	ret    

c00097ad <__cxa_finalize>:
c00097ad:	c3                   	ret    

c00097ae <__stack_chk_fail>:
c00097ae:	55                   	push   ebp
c00097af:	89 e5                	mov    ebp,esp
c00097b1:	83 ec 10             	sub    esp,0x10
c00097b4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00097b7:	68 16 d0 01 c0       	push   0xc001d016
c00097bc:	e8 2f 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00097c1:	58                   	pop    eax
c00097c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00097c5:	5a                   	pop    edx
c00097c6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00097c9:	68 16 d0 01 c0       	push   0xc001d016
c00097ce:	e8 1d 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00097d3:	c7 04 24 1e d0 01 c0 	mov    DWORD PTR [esp],0xc001d01e
c00097da:	e8 60 5c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	c9                   	leave  
c00097e3:	c3                   	ret    

c00097e4 <__cxa_pure_virtual>:
c00097e4:	83 ec 18             	sub    esp,0x18
c00097e7:	68 36 d0 01 c0       	push   0xc001d036
c00097ec:	e8 4e 5c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00097f1:	83 c4 1c             	add    esp,0x1c
c00097f4:	c3                   	ret    

c00097f5 <operator new[](unsigned long)>:
c00097f5:	e9 67 d3 ff ff       	jmp    c0006b61 <malloc>

c00097fa <operator delete(void*, unsigned long)>:
c00097fa:	e9 82 d3 ff ff       	jmp    c0006b81 <rfree>

c00097ff <operator delete[](void*)>:
c00097ff:	e9 7d d3 ff ff       	jmp    c0006b81 <rfree>

c0009804 <operator delete[](void*, unsigned long)>:
c0009804:	e9 78 d3 ff ff       	jmp    c0006b81 <rfree>

c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0009809:	55                   	push   ebp
c000980a:	b9 04 00 00 00       	mov    ecx,0x4
c000980f:	57                   	push   edi
c0009810:	56                   	push   esi
c0009811:	be 4b cc 01 c0       	mov    esi,0xc001cc4b
c0009816:	53                   	push   ebx
c0009817:	83 ec 20             	sub    esp,0x20
c000981a:	a1 4a cc 01 c0       	mov    eax,ds:0xc001cc4a
c000981f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009823:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c0009827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000982b:	a1 57 cc 01 c0       	mov    eax,ds:0xc001cc57
c0009830:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0009834:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009838:	fc                   	cld    
c0009839:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000983b:	89 ee                	mov    esi,ebp
c000983d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009841:	eb 02                	jmp    c0009845 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009843:	89 c6                	mov    esi,eax
c0009845:	31 d2                	xor    edx,edx
c0009847:	41                   	inc    ecx
c0009848:	89 f0                	mov    eax,esi
c000984a:	f7 f3                	div    ebx
c000984c:	39 de                	cmp    esi,ebx
c000984e:	73 f3                	jae    c0009843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009850:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009853:	eb 02                	jmp    c0009857 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c0009855:	89 c5                	mov    ebp,eax
c0009857:	31 d2                	xor    edx,edx
c0009859:	49                   	dec    ecx
c000985a:	89 e8                	mov    eax,ebp
c000985c:	f7 f3                	div    ebx
c000985e:	39 dd                	cmp    ebp,ebx
c0009860:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009864:	88 11                	mov    BYTE PTR [ecx],dl
c0009866:	73 ed                	jae    c0009855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c0009868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000986c:	83 c4 20             	add    esp,0x20
c000986f:	5b                   	pop    ebx
c0009870:	5e                   	pop    esi
c0009871:	5f                   	pop    edi
c0009872:	5d                   	pop    ebp
c0009873:	c3                   	ret    

c0009874 <Dbg::logc(char)>:
c0009874:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009878:	f6 05 c0 f2 01 c0 10 	test   BYTE PTR ds:0xc001f2c0,0x10
c000987f:	75 12                	jne    c0009893 <Dbg::logc(char)+0x1f>
c0009881:	ba fd 03 00 00       	mov    edx,0x3fd
c0009886:	ec                   	in     al,dx
c0009887:	a8 20                	test   al,0x20
c0009889:	74 fb                	je     c0009886 <Dbg::logc(char)+0x12>
c000988b:	ba f8 03 00 00       	mov    edx,0x3f8
c0009890:	88 c8                	mov    al,cl
c0009892:	ee                   	out    dx,al
c0009893:	c3                   	ret    

c0009894 <Dbg::logs(char*)>:
c0009894:	53                   	push   ebx
c0009895:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009899:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000989c:	84 c0                	test   al,al
c000989e:	74 0f                	je     c00098af <Dbg::logs(char*)+0x1b>
c00098a0:	50                   	push   eax
c00098a1:	43                   	inc    ebx
c00098a2:	e8 cd ff ff ff       	call   c0009874 <Dbg::logc(char)>
c00098a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00098aa:	5a                   	pop    edx
c00098ab:	84 c0                	test   al,al
c00098ad:	75 f1                	jne    c00098a0 <Dbg::logs(char*)+0xc>
c00098af:	5b                   	pop    ebx
c00098b0:	c3                   	ret    

c00098b1 <Dbg::logWriteInt(unsigned int)>:
c00098b1:	83 ec 10             	sub    esp,0x10
c00098b4:	6a 0a                	push   0xa
c00098b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00098ba:	50                   	push   eax
c00098bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098bf:	50                   	push   eax
c00098c0:	e8 44 ff ff ff       	call   c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098c5:	50                   	push   eax
c00098c6:	e8 c9 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c00098cb:	83 c4 20             	add    esp,0x20
c00098ce:	c3                   	ret    

c00098cf <Dbg::logWriteIntBase(unsigned int, int)>:
c00098cf:	83 ec 10             	sub    esp,0x10
c00098d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098d6:	50                   	push   eax
c00098d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00098db:	50                   	push   eax
c00098dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098e0:	52                   	push   edx
c00098e1:	e8 23 ff ff ff       	call   c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098e6:	50                   	push   eax
c00098e7:	e8 a8 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c00098ec:	83 c4 20             	add    esp,0x20
c00098ef:	c3                   	ret    

c00098f0 <Dbg::kprintf(char const*, ...)>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	56                   	push   esi
c00098f3:	53                   	push   ebx
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098fb:	f6 05 c0 f2 01 c0 10 	test   BYTE PTR ds:0xc001f2c0,0x10
c0009902:	74 08                	je     c000990c <Dbg::kprintf(char const*, ...)+0x1c>
c0009904:	83 c4 0c             	add    esp,0xc
c0009907:	5b                   	pop    ebx
c0009908:	5e                   	pop    esi
c0009909:	5f                   	pop    edi
c000990a:	5d                   	pop    ebp
c000990b:	c3                   	ret    
c000990c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009910:	31 ff                	xor    edi,edi
c0009912:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009916:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009919:	84 c0                	test   al,al
c000991b:	74 e7                	je     c0009904 <Dbg::kprintf(char const*, ...)+0x14>
c000991d:	8d 77 01             	lea    esi,[edi+0x1]
c0009920:	3c 25                	cmp    al,0x25
c0009922:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009925:	75 47                	jne    c000996e <Dbg::kprintf(char const*, ...)+0x7e>
c0009927:	83 c7 02             	add    edi,0x2
c000992a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000992d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009930:	83 e8 25             	sub    eax,0x25
c0009933:	3c 53                	cmp    al,0x53
c0009935:	0f 87 d2 00 00 00    	ja     c0009a0d <Dbg::kprintf(char const*, ...)+0x11d>
c000993b:	25 ff 00 00 00       	and    eax,0xff
c0009940:	ff 24 85 4c d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2fb4]
c0009947:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000994b:	89 c8                	mov    eax,ecx
c000994d:	83 c1 04             	add    ecx,0x4
c0009950:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009954:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009956:	55                   	push   ebp
c0009957:	e8 55 ff ff ff       	call   c00098b1 <Dbg::logWriteInt(unsigned int)>
c000995c:	58                   	pop    eax
c000995d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009960:	84 c0                	test   al,al
c0009962:	74 a0                	je     c0009904 <Dbg::kprintf(char const*, ...)+0x14>
c0009964:	8d 77 01             	lea    esi,[edi+0x1]
c0009967:	3c 25                	cmp    al,0x25
c0009969:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000996c:	74 b9                	je     c0009927 <Dbg::kprintf(char const*, ...)+0x37>
c000996e:	50                   	push   eax
c000996f:	89 f7                	mov    edi,esi
c0009971:	e8 fe fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009976:	89 ee                	mov    esi,ebp
c0009978:	58                   	pop    eax
c0009979:	eb e2                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c000997b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000997f:	89 c8                	mov    eax,ecx
c0009981:	83 c1 04             	add    ecx,0x4
c0009984:	8b 00                	mov    eax,DWORD PTR [eax]
c0009986:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000998a:	50                   	push   eax
c000998b:	e8 04 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c0009990:	58                   	pop    eax
c0009991:	eb ca                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009997:	89 d0                	mov    eax,edx
c0009999:	83 c2 04             	add    edx,0x4
c000999c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099a2:	50                   	push   eax
c00099a3:	e8 09 ff ff ff       	call   c00098b1 <Dbg::logWriteInt(unsigned int)>
c00099a8:	58                   	pop    eax
c00099a9:	eb b2                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099af:	89 d0                	mov    eax,edx
c00099b1:	83 c2 04             	add    edx,0x4
c00099b4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00099b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099bb:	50                   	push   eax
c00099bc:	e8 b3 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c00099c1:	58                   	pop    eax
c00099c2:	eb 99                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00099c8:	89 c8                	mov    eax,ecx
c00099ca:	83 c1 04             	add    ecx,0x4
c00099cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00099d1:	6a 10                	push   0x10
c00099d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00099d5:	51                   	push   ecx
c00099d6:	e8 f4 fe ff ff       	call   c00098cf <Dbg::logWriteIntBase(unsigned int, int)>
c00099db:	5d                   	pop    ebp
c00099dc:	58                   	pop    eax
c00099dd:	e9 7b ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099e6:	89 d0                	mov    eax,edx
c00099e8:	83 c2 08             	add    edx,0x8
c00099eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099ef:	6a 10                	push   0x10
c00099f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00099f3:	50                   	push   eax
c00099f4:	e8 d6 fe ff ff       	call   c00098cf <Dbg::logWriteIntBase(unsigned int, int)>
c00099f9:	58                   	pop    eax
c00099fa:	5a                   	pop    edx
c00099fb:	e9 5d ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a00:	6a 25                	push   0x25
c0009a02:	e8 6d fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a07:	5a                   	pop    edx
c0009a08:	e9 50 ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a0d:	6a 25                	push   0x25
c0009a0f:	e8 60 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a14:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009a18:	50                   	push   eax
c0009a19:	e8 56 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a1e:	5a                   	pop    edx
c0009a1f:	59                   	pop    ecx
c0009a20:	e9 38 ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a25:	90                   	nop

c0009a26 <File::read(unsigned long long, void*, int*)>:
c0009a26:	53                   	push   ebx
c0009a27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a36:	3c 19                	cmp    al,0x19
c0009a38:	77 35                	ja     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a3a:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009a41:	85 c0                	test   eax,eax
c0009a43:	74 2a                	je     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009a4b:	85 c0                	test   eax,eax
c0009a4d:	74 20                	je     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009a53:	74 21                	je     c0009a76 <File::read(unsigned long long, void*, int*)+0x50>
c0009a55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009a61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a69:	5b                   	pop    ebx
c0009a6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009a6d:	ff e0                	jmp    eax
c0009a6f:	b8 0b 00 00 00       	mov    eax,0xb
c0009a74:	eb 05                	jmp    c0009a7b <File::read(unsigned long long, void*, int*)+0x55>
c0009a76:	b8 05 00 00 00       	mov    eax,0x5
c0009a7b:	5b                   	pop    ebx
c0009a7c:	c3                   	ret    
c0009a7d:	90                   	nop

c0009a7e <File::write(unsigned long long, void*, int*)>:
c0009a7e:	53                   	push   ebx
c0009a7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a8e:	3c 19                	cmp    al,0x19
c0009a90:	77 35                	ja     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009a92:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009a99:	85 c0                	test   eax,eax
c0009a9b:	74 2a                	je     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009a9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009aa3:	85 c0                	test   eax,eax
c0009aa5:	74 20                	je     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009aa7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009aab:	74 21                	je     c0009ace <File::write(unsigned long long, void*, int*)+0x50>
c0009aad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009ab3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009ab9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009abd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ac1:	5b                   	pop    ebx
c0009ac2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009ac5:	ff e0                	jmp    eax
c0009ac7:	b8 0b 00 00 00       	mov    eax,0xb
c0009acc:	eb 05                	jmp    c0009ad3 <File::write(unsigned long long, void*, int*)+0x55>
c0009ace:	b8 05 00 00 00       	mov    eax,0x5
c0009ad3:	5b                   	pop    ebx
c0009ad4:	c3                   	ret    
c0009ad5:	90                   	nop

c0009ad6 <Directory::read(unsigned long long, void*, int*)>:
c0009ad6:	53                   	push   ebx
c0009ad7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009adb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009adf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009ae6:	3c 19                	cmp    al,0x19
c0009ae8:	77 35                	ja     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009aea:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009af1:	85 c0                	test   eax,eax
c0009af3:	74 2a                	je     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009af5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009afb:	85 c0                	test   eax,eax
c0009afd:	74 20                	je     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009aff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b03:	74 21                	je     c0009b26 <Directory::read(unsigned long long, void*, int*)+0x50>
c0009b05:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b19:	5b                   	pop    ebx
c0009b1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009b1d:	ff e0                	jmp    eax
c0009b1f:	b8 0b 00 00 00       	mov    eax,0xb
c0009b24:	eb 05                	jmp    c0009b2b <Directory::read(unsigned long long, void*, int*)+0x55>
c0009b26:	b8 05 00 00 00       	mov    eax,0x5
c0009b2b:	5b                   	pop    ebx
c0009b2c:	c3                   	ret    
c0009b2d:	90                   	nop

c0009b2e <Directory::write(unsigned long long, void*, int*)>:
c0009b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009b39:	b8 0b 00 00 00       	mov    eax,0xb
c0009b3e:	80 fa 19             	cmp    dl,0x19
c0009b41:	77 18                	ja     c0009b5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b43:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c0009b4a:	85 d2                	test   edx,edx
c0009b4c:	74 0d                	je     c0009b5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009b55:	19 c0                	sbb    eax,eax
c0009b57:	83 e0 0a             	and    eax,0xa
c0009b5a:	40                   	inc    eax
c0009b5b:	c3                   	ret    

c0009b5c <File::isAtty()>:
c0009b5c:	31 c0                	xor    eax,eax
c0009b5e:	c3                   	ret    
c0009b5f:	90                   	nop

c0009b60 <Directory::isAtty()>:
c0009b60:	31 c0                	xor    eax,eax
c0009b62:	c3                   	ret    
c0009b63:	90                   	nop

c0009b64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009b64:	b8 0a 00 00 00       	mov    eax,0xa
c0009b69:	c3                   	ret    

c0009b6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009b6a:	b8 0a 00 00 00       	mov    eax,0xa
c0009b6f:	c3                   	ret    

c0009b70 <Filesystem::allocateSwapfile(char const*, int)>:
c0009b70:	31 c0                	xor    eax,eax
c0009b72:	31 d2                	xor    edx,edx
c0009b74:	c3                   	ret    
c0009b75:	90                   	nop

c0009b76 <File::~File()>:
c0009b76:	83 ec 0c             	sub    esp,0xc
c0009b79:	ba 0c d2 01 c0       	mov    edx,0xc001d20c
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	89 10                	mov    DWORD PTR [eax],edx
c0009b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b88:	83 ec 0c             	sub    esp,0xc
c0009b8b:	50                   	push   eax
c0009b8c:	e8 ab e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009b91:	83 c4 10             	add    esp,0x10
c0009b94:	90                   	nop
c0009b95:	83 c4 0c             	add    esp,0xc
c0009b98:	c3                   	ret    
c0009b99:	90                   	nop

c0009b9a <File::~File()>:
c0009b9a:	83 ec 0c             	sub    esp,0xc
c0009b9d:	83 ec 0c             	sub    esp,0xc
c0009ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ba4:	e8 cd ff ff ff       	call   c0009b76 <File::~File()>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	83 ec 08             	sub    esp,0x8
c0009baf:	68 14 01 00 00       	push   0x114
c0009bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bb8:	e8 3d fc ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009bbd:	83 c4 10             	add    esp,0x10
c0009bc0:	83 c4 0c             	add    esp,0xc
c0009bc3:	c3                   	ret    

c0009bc4 <Directory::~Directory()>:
c0009bc4:	83 ec 0c             	sub    esp,0xc
c0009bc7:	ba 28 d2 01 c0       	mov    edx,0xc001d228
c0009bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bd0:	89 10                	mov    DWORD PTR [eax],edx
c0009bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bd6:	83 ec 0c             	sub    esp,0xc
c0009bd9:	50                   	push   eax
c0009bda:	e8 5d e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	83 c4 0c             	add    esp,0xc
c0009be6:	c3                   	ret    
c0009be7:	90                   	nop

c0009be8 <Directory::~Directory()>:
c0009be8:	83 ec 0c             	sub    esp,0xc
c0009beb:	83 ec 0c             	sub    esp,0xc
c0009bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bf2:	e8 cd ff ff ff       	call   c0009bc4 <Directory::~Directory()>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	83 ec 08             	sub    esp,0x8
c0009bfd:	68 14 01 00 00       	push   0x114
c0009c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c06:	e8 ef fb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009c0b:	83 c4 10             	add    esp,0x10
c0009c0e:	83 c4 0c             	add    esp,0xc
c0009c11:	c3                   	ret    

c0009c12 <Filesystem::Filesystem()>:
c0009c12:	ba a4 d1 01 c0       	mov    edx,0xc001d1a4
c0009c17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1b:	89 10                	mov    DWORD PTR [eax],edx
c0009c1d:	8b 15 94 f3 01 c0    	mov    edx,DWORD PTR ds:0xc001f394
c0009c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2e:	a3 94 f3 01 c0       	mov    ds:0xc001f394,eax
c0009c33:	90                   	nop
c0009c34:	c3                   	ret    
c0009c35:	90                   	nop

c0009c36 <Filesystem::~Filesystem()>:
c0009c36:	ba a4 d1 01 c0       	mov    edx,0xc001d1a4
c0009c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3f:	89 10                	mov    DWORD PTR [eax],edx
c0009c41:	90                   	nop
c0009c42:	c3                   	ret    
c0009c43:	90                   	nop

c0009c44 <Filesystem::~Filesystem()>:
c0009c44:	83 ec 0c             	sub    esp,0xc
c0009c47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009c4b:	e8 e6 ff ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c0009c50:	83 c4 04             	add    esp,0x4
c0009c53:	83 ec 08             	sub    esp,0x8
c0009c56:	6a 08                	push   0x8
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	e8 99 fb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009c61:	83 c4 10             	add    esp,0x10
c0009c64:	83 c4 0c             	add    esp,0xc
c0009c67:	c3                   	ret    

c0009c68 <Fs::getcwd(Process*, char*, int)>:
c0009c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c6c:	31 c0                	xor    eax,eax
c0009c6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009c71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009c75:	7d 15                	jge    c0009c8c <Fs::getcwd(Process*, char*, int)+0x24>
c0009c77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009c7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009c82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009c85:	84 c9                	test   cl,cl
c0009c87:	74 06                	je     c0009c8f <Fs::getcwd(Process*, char*, int)+0x27>
c0009c89:	40                   	inc    eax
c0009c8a:	eb e2                	jmp    c0009c6e <Fs::getcwd(Process*, char*, int)+0x6>
c0009c8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009c8f:	31 c0                	xor    eax,eax
c0009c91:	c3                   	ret    

c0009c92 <Fs::initVFS()>:
c0009c92:	83 ec 18             	sub    esp,0x18
c0009c95:	6a 08                	push   0x8
c0009c97:	e8 c5 ce ff ff       	call   c0006b61 <malloc>
c0009c9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c9f:	e8 a4 c2 00 00       	call   c0015f48 <FAT::FAT()>
c0009ca4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009cab:	e8 b1 ce ff ff       	call   c0006b61 <malloc>
c0009cb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cb3:	e8 f2 d5 00 00       	call   c00172aa <ISO9660::ISO9660()>
c0009cb8:	83 c4 1c             	add    esp,0x1c
c0009cbb:	c3                   	ret    

c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009cbc:	55                   	push   ebp
c0009cbd:	57                   	push   edi
c0009cbe:	56                   	push   esi
c0009cbf:	53                   	push   ebx
c0009cc0:	81 ec 10 04 00 00    	sub    esp,0x410
c0009cc6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009ccd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009cd4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009cdb:	68 00 04 00 00       	push   0x400
c0009ce0:	6a 00                	push   0x0
c0009ce2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009ce6:	56                   	push   esi
c0009ce7:	e8 04 68 ff ff       	call   c00004f0 <memset>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009cf3:	75 0b                	jne    c0009d00 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009cf5:	50                   	push   eax
c0009cf6:	50                   	push   eax
c0009cf7:	57                   	push   edi
c0009cf8:	56                   	push   esi
c0009cf9:	e8 22 69 ff ff       	call   c0000620 <strcpy>
c0009cfe:	eb 41                	jmp    c0009d41 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009d00:	8a 07                	mov    al,BYTE PTR [edi]
c0009d02:	3c 5c                	cmp    al,0x5c
c0009d04:	74 04                	je     c0009d0a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009d06:	3c 2f                	cmp    al,0x2f
c0009d08:	75 18                	jne    c0009d22 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009d0a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009d0d:	3c 60                	cmp    al,0x60
c0009d0f:	7e 03                	jle    c0009d14 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009d11:	83 e8 20             	sub    eax,0x20
c0009d14:	88 04 24             	mov    BYTE PTR [esp],al
c0009d17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d1e:	50                   	push   eax
c0009d1f:	50                   	push   eax
c0009d20:	eb 18                	jmp    c0009d3a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009d22:	50                   	push   eax
c0009d23:	50                   	push   eax
c0009d24:	55                   	push   ebp
c0009d25:	56                   	push   esi
c0009d26:	e8 f5 68 ff ff       	call   c0000620 <strcpy>
c0009d2b:	5a                   	pop    edx
c0009d2c:	59                   	pop    ecx
c0009d2d:	68 5f de 01 c0       	push   0xc001de5f
c0009d32:	56                   	push   esi
c0009d33:	e8 a8 6a ff ff       	call   c00007e0 <strcat>
c0009d38:	5d                   	pop    ebp
c0009d39:	58                   	pop    eax
c0009d3a:	57                   	push   edi
c0009d3b:	56                   	push   esi
c0009d3c:	e8 9f 6a ff ff       	call   c00007e0 <strcat>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009d47:	3c 60                	cmp    al,0x60
c0009d49:	7e 03                	jle    c0009d4e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009d4b:	83 e8 20             	sub    eax,0x20
c0009d4e:	88 04 24             	mov    BYTE PTR [esp],al
c0009d51:	88 03                	mov    BYTE PTR [ebx],al
c0009d53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d5a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009d60:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009d64:	bf 03 00 00 00       	mov    edi,0x3
c0009d69:	b8 03 00 00 00       	mov    eax,0x3
c0009d6e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009d71:	84 d2                	test   dl,dl
c0009d73:	0f 84 91 00 00 00    	je     c0009e0a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009d79:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009d7c:	80 fa 5c             	cmp    dl,0x5c
c0009d7f:	74 05                	je     c0009d86 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009d81:	80 fa 2f             	cmp    dl,0x2f
c0009d84:	75 12                	jne    c0009d98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d86:	89 c5                	mov    ebp,eax
c0009d88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009d8d:	74 09                	je     c0009d98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d8f:	40                   	inc    eax
c0009d90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009d94:	89 cf                	mov    edi,ecx
c0009d96:	eb d6                	jmp    c0009d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009d98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009d9d:	75 5b                	jne    c0009dfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009d9f:	80 fa 2e             	cmp    dl,0x2e
c0009da2:	75 56                	jne    c0009dfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009da4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009da8:	74 19                	je     c0009dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009daa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009daf:	74 53                	je     c0009e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009db1:	89 f9                	mov    ecx,edi
c0009db3:	41                   	inc    ecx
c0009db4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009db7:	80 fa 2f             	cmp    dl,0x2f
c0009dba:	74 f7                	je     c0009db3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009dbc:	80 fa 5c             	cmp    dl,0x5c
c0009dbf:	74 f2                	je     c0009db3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009dc1:	eb d1                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dc3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009dc8:	74 3a                	je     c0009e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009dca:	83 f8 03             	cmp    eax,0x3
c0009dcd:	74 c5                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dcf:	41                   	inc    ecx
c0009dd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009dd3:	80 fa 2f             	cmp    dl,0x2f
c0009dd6:	74 f7                	je     c0009dcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009dd8:	80 fa 5c             	cmp    dl,0x5c
c0009ddb:	74 f2                	je     c0009dcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009ddd:	48                   	dec    eax
c0009dde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009de2:	75 06                	jne    c0009dea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009de4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009de8:	eb f3                	jmp    c0009ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009dea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009dee:	74 07                	je     c0009df7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009df0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009df4:	48                   	dec    eax
c0009df5:	eb f3                	jmp    c0009dea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009df7:	40                   	inc    eax
c0009df8:	eb 9a                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dfa:	80 fa 2f             	cmp    dl,0x2f
c0009dfd:	74 95                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dff:	80 fa 5c             	cmp    dl,0x5c
c0009e02:	74 90                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e04:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009e07:	40                   	inc    eax
c0009e08:	eb 8a                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	53                   	push   ebx
c0009e12:	e8 49 67 ff ff       	call   c0000560 <strlen>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009e1f:	75 26                	jne    c0009e47 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009e21:	83 ec 0c             	sub    esp,0xc
c0009e24:	53                   	push   ebx
c0009e25:	e8 36 67 ff ff       	call   c0000560 <strlen>
c0009e2a:	83 c4 10             	add    esp,0x10
c0009e2d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009e32:	74 26                	je     c0009e5a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009e34:	83 ec 0c             	sub    esp,0xc
c0009e37:	53                   	push   ebx
c0009e38:	e8 23 67 ff ff       	call   c0000560 <strlen>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009e45:	eb c7                	jmp    c0009e0e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009e47:	83 ec 0c             	sub    esp,0xc
c0009e4a:	53                   	push   ebx
c0009e4b:	e8 10 67 ff ff       	call   c0000560 <strlen>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009e58:	74 c7                	je     c0009e21 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009e5a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009e60:	5b                   	pop    ebx
c0009e61:	5e                   	pop    esi
c0009e62:	5f                   	pop    edi
c0009e63:	5d                   	pop    ebp
c0009e64:	c3                   	ret    
c0009e65:	90                   	nop

c0009e66 <File::File(char const*, Process*)>:
c0009e66:	83 ec 0c             	sub    esp,0xc
c0009e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e6d:	83 ec 08             	sub    esp,0x8
c0009e70:	6a 00                	push   0x0
c0009e72:	50                   	push   eax
c0009e73:	e8 e2 e3 ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	ba 0c d2 01 c0       	mov    edx,0xc001d20c
c0009e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e84:	89 10                	mov    DWORD PTR [eax],edx
c0009e86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e94:	83 c0 0d             	add    eax,0xd
c0009e97:	83 ec 04             	sub    esp,0x4
c0009e9a:	52                   	push   edx
c0009e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9f:	50                   	push   eax
c0009ea0:	e8 17 fe ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009eaf:	8d 50 bf             	lea    edx,[eax-0x41]
c0009eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eb6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ece:	25 ff 00 00 00       	and    eax,0xff
c0009ed3:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009eda:	85 c0                	test   eax,eax
c0009edc:	74 42                	je     c0009f20 <File::File(char const*, Process*)+0xba>
c0009ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ee2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ee8:	25 ff 00 00 00       	and    eax,0xff
c0009eed:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009ef4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009efa:	85 c0                	test   eax,eax
c0009efc:	75 22                	jne    c0009f20 <File::File(char const*, Process*)+0xba>
c0009efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f02:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009f08:	25 ff 00 00 00       	and    eax,0xff
c0009f0d:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0009f14:	83 ec 0c             	sub    esp,0xc
c0009f17:	50                   	push   eax
c0009f18:	e8 f9 1f 00 00       	call   c000bf16 <LogicalDisk::mount()>
c0009f1d:	83 c4 10             	add    esp,0x10
c0009f20:	90                   	nop
c0009f21:	83 c4 0c             	add    esp,0xc
c0009f24:	c3                   	ret    
c0009f25:	90                   	nop

c0009f26 <File::open(FileOpenMode)>:
c0009f26:	53                   	push   ebx
c0009f27:	b8 0b 00 00 00       	mov    eax,0xb
c0009f2c:	83 ec 08             	sub    esp,0x8
c0009f2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f33:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009f3a:	80 fa 19             	cmp    dl,0x19
c0009f3d:	77 40                	ja     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f3f:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c0009f46:	85 d2                	test   edx,edx
c0009f48:	74 35                	je     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f4a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009f50:	85 d2                	test   edx,edx
c0009f52:	74 2b                	je     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f54:	b8 06 00 00 00       	mov    eax,0x6
c0009f59:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009f5d:	75 20                	jne    c0009f7f <File::open(FileOpenMode)+0x59>
c0009f5f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f61:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009f67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f6b:	51                   	push   ecx
c0009f6c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009f6f:	51                   	push   ecx
c0009f70:	52                   	push   edx
c0009f71:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	85 c0                	test   eax,eax
c0009f79:	75 04                	jne    c0009f7f <File::open(FileOpenMode)+0x59>
c0009f7b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009f7f:	83 c4 08             	add    esp,0x8
c0009f82:	5b                   	pop    ebx
c0009f83:	c3                   	ret    

c0009f84 <File::close()>:
c0009f84:	53                   	push   ebx
c0009f85:	b8 0b 00 00 00       	mov    eax,0xb
c0009f8a:	83 ec 08             	sub    esp,0x8
c0009f8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009f91:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009f98:	80 fa 19             	cmp    dl,0x19
c0009f9b:	77 41                	ja     c0009fde <File::close()+0x5a>
c0009f9d:	8b 1c 95 00 18 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde800]
c0009fa4:	85 db                	test   ebx,ebx
c0009fa6:	74 36                	je     c0009fde <File::close()+0x5a>
c0009fa8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009faf:	74 2d                	je     c0009fde <File::close()+0x5a>
c0009fb1:	b8 05 00 00 00       	mov    eax,0x5
c0009fb6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009fba:	74 22                	je     c0009fde <File::close()+0x5a>
c0009fbc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009fc0:	8b 04 95 00 18 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde800]
c0009fc7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009fcd:	53                   	push   ebx
c0009fce:	53                   	push   ebx
c0009fcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0009fd1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009fd7:	50                   	push   eax
c0009fd8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	83 c4 08             	add    esp,0x8
c0009fe1:	5b                   	pop    ebx
c0009fe2:	c3                   	ret    
c0009fe3:	90                   	nop

c0009fe4 <File::seek(unsigned long long)>:
c0009fe4:	56                   	push   esi
c0009fe5:	53                   	push   ebx
c0009fe6:	b8 0b 00 00 00       	mov    eax,0xb
c0009feb:	51                   	push   ecx
c0009fec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ff0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009ff4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fff:	80 fa 19             	cmp    dl,0x19
c000a002:	77 31                	ja     c000a035 <File::seek(unsigned long long)+0x51>
c000a004:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c000a00b:	85 d2                	test   edx,edx
c000a00d:	74 26                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a00f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a015:	85 d2                	test   edx,edx
c000a017:	74 1c                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a019:	b8 05 00 00 00       	mov    eax,0x5
c000a01e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a022:	74 11                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a024:	8b 02                	mov    eax,DWORD PTR [edx]
c000a026:	53                   	push   ebx
c000a027:	51                   	push   ecx
c000a028:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a02e:	52                   	push   edx
c000a02f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	5a                   	pop    edx
c000a036:	5b                   	pop    ebx
c000a037:	5e                   	pop    esi
c000a038:	c3                   	ret    
c000a039:	90                   	nop

c000a03a <File::tell(unsigned long long*)>:
c000a03a:	83 ec 0c             	sub    esp,0xc
c000a03d:	b8 0b 00 00 00       	mov    eax,0xb
c000a042:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a046:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a04d:	80 fa 19             	cmp    dl,0x19
c000a050:	77 34                	ja     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a052:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c000a059:	85 d2                	test   edx,edx
c000a05b:	74 29                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a05d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a063:	85 d2                	test   edx,edx
c000a065:	74 1f                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a067:	b8 05 00 00 00       	mov    eax,0x5
c000a06c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a070:	74 14                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a072:	50                   	push   eax
c000a073:	8b 02                	mov    eax,DWORD PTR [edx]
c000a075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a079:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a07f:	52                   	push   edx
c000a080:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a083:	83 c4 10             	add    esp,0x10
c000a086:	83 c4 0c             	add    esp,0xc
c000a089:	c3                   	ret    

c000a08a <File::rewind()>:
c000a08a:	83 ec 10             	sub    esp,0x10
c000a08d:	6a 00                	push   0x0
c000a08f:	6a 00                	push   0x0
c000a091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a095:	e8 4a ff ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c000a09a:	83 c4 1c             	add    esp,0x1c
c000a09d:	c3                   	ret    

c000a09e <File::unlink()>:
c000a09e:	83 ec 0c             	sub    esp,0xc
c000a0a1:	b8 0b 00 00 00       	mov    eax,0xb
c000a0a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0b1:	80 f9 19             	cmp    cl,0x19
c000a0b4:	77 2f                	ja     c000a0e5 <File::unlink()+0x47>
c000a0b6:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a0bd:	85 c9                	test   ecx,ecx
c000a0bf:	74 24                	je     c000a0e5 <File::unlink()+0x47>
c000a0c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a0c7:	85 c9                	test   ecx,ecx
c000a0c9:	74 1a                	je     c000a0e5 <File::unlink()+0x47>
c000a0cb:	b8 06 00 00 00       	mov    eax,0x6
c000a0d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a0d4:	75 0f                	jne    c000a0e5 <File::unlink()+0x47>
c000a0d6:	83 c2 0d             	add    edx,0xd
c000a0d9:	50                   	push   eax
c000a0da:	50                   	push   eax
c000a0db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a0dd:	52                   	push   edx
c000a0de:	51                   	push   ecx
c000a0df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	83 c4 0c             	add    esp,0xc
c000a0e8:	c3                   	ret    
c000a0e9:	90                   	nop

c000a0ea <File::rename(char const*)>:
c000a0ea:	83 ec 0c             	sub    esp,0xc
c000a0ed:	b8 0b 00 00 00       	mov    eax,0xb
c000a0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0fd:	80 f9 19             	cmp    cl,0x19
c000a100:	77 32                	ja     c000a134 <File::rename(char const*)+0x4a>
c000a102:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a109:	85 c9                	test   ecx,ecx
c000a10b:	74 27                	je     c000a134 <File::rename(char const*)+0x4a>
c000a10d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a113:	85 c9                	test   ecx,ecx
c000a115:	74 1d                	je     c000a134 <File::rename(char const*)+0x4a>
c000a117:	b8 06 00 00 00       	mov    eax,0x6
c000a11c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a120:	75 12                	jne    c000a134 <File::rename(char const*)+0x4a>
c000a122:	83 c2 0d             	add    edx,0xd
c000a125:	50                   	push   eax
c000a126:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a12c:	52                   	push   edx
c000a12d:	51                   	push   ecx
c000a12e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a131:	83 c4 10             	add    esp,0x10
c000a134:	83 c4 0c             	add    esp,0xc
c000a137:	c3                   	ret    

c000a138 <File::chfatattr(unsigned char, unsigned char)>:
c000a138:	57                   	push   edi
c000a139:	b8 0b 00 00 00       	mov    eax,0xb
c000a13e:	56                   	push   esi
c000a13f:	53                   	push   ebx
c000a140:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a148:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a14f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a153:	80 f9 19             	cmp    cl,0x19
c000a156:	77 37                	ja     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a158:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a15f:	85 c9                	test   ecx,ecx
c000a161:	74 2c                	je     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a169:	85 c9                	test   ecx,ecx
c000a16b:	74 22                	je     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a16d:	b8 06 00 00 00       	mov    eax,0x6
c000a172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a176:	75 17                	jne    c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a178:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a17a:	89 f0                	mov    eax,esi
c000a17c:	83 c2 0d             	add    edx,0xd
c000a17f:	0f b6 f0             	movzx  esi,al
c000a182:	0f b6 db             	movzx  ebx,bl
c000a185:	56                   	push   esi
c000a186:	53                   	push   ebx
c000a187:	52                   	push   edx
c000a188:	51                   	push   ecx
c000a189:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a18c:	83 c4 10             	add    esp,0x10
c000a18f:	5b                   	pop    ebx
c000a190:	5e                   	pop    esi
c000a191:	5f                   	pop    edi
c000a192:	c3                   	ret    
c000a193:	90                   	nop

c000a194 <File::exists()>:
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	31 c0                	xor    eax,eax
c000a199:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a19d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1a4:	80 f9 19             	cmp    cl,0x19
c000a1a7:	77 24                	ja     c000a1cd <File::exists()+0x39>
c000a1a9:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a1b0:	85 c9                	test   ecx,ecx
c000a1b2:	74 19                	je     c000a1cd <File::exists()+0x39>
c000a1b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1ba:	85 c9                	test   ecx,ecx
c000a1bc:	74 0f                	je     c000a1cd <File::exists()+0x39>
c000a1be:	83 c2 0d             	add    edx,0xd
c000a1c1:	50                   	push   eax
c000a1c2:	50                   	push   eax
c000a1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a1c5:	52                   	push   edx
c000a1c6:	51                   	push   ecx
c000a1c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a1ca:	83 c4 10             	add    esp,0x10
c000a1cd:	83 c4 0c             	add    esp,0xc
c000a1d0:	c3                   	ret    
c000a1d1:	90                   	nop

c000a1d2 <File::stat(unsigned long long*, bool*)>:
c000a1d2:	56                   	push   esi
c000a1d3:	53                   	push   ebx
c000a1d4:	50                   	push   eax
c000a1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000a1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a1ed:	80 f9 19             	cmp    cl,0x19
c000a1f0:	77 3d                	ja     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a1f2:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a1f9:	85 c9                	test   ecx,ecx
c000a1fb:	74 32                	je     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a1fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a203:	85 c9                	test   ecx,ecx
c000a205:	74 28                	je     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a207:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a209:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a20d:	74 13                	je     c000a222 <File::stat(unsigned long long*, bool*)+0x50>
c000a20f:	83 ec 04             	sub    esp,0x4
c000a212:	56                   	push   esi
c000a213:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a219:	51                   	push   ecx
c000a21a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a21d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a220:	eb 0a                	jmp    c000a22c <File::stat(unsigned long long*, bool*)+0x5a>
c000a222:	53                   	push   ebx
c000a223:	83 c2 0d             	add    edx,0xd
c000a226:	56                   	push   esi
c000a227:	52                   	push   edx
c000a228:	51                   	push   ecx
c000a229:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a22c:	83 c4 10             	add    esp,0x10
c000a22f:	5a                   	pop    edx
c000a230:	5b                   	pop    ebx
c000a231:	5e                   	pop    esi
c000a232:	c3                   	ret    

c000a233 <Fs::setcwd(Process*, char*)>:
c000a233:	55                   	push   ebp
c000a234:	57                   	push   edi
c000a235:	56                   	push   esi
c000a236:	53                   	push   ebx
c000a237:	81 ec 20 02 00 00    	sub    esp,0x220
c000a23d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a244:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a24a:	57                   	push   edi
c000a24b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a252:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a256:	56                   	push   esi
c000a257:	e8 60 fa ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000a25c:	89 34 24             	mov    DWORD PTR [esp],esi
c000a25f:	e8 fc 62 ff ff       	call   c0000560 <strlen>
c000a264:	83 c4 10             	add    esp,0x10
c000a267:	83 f8 02             	cmp    eax,0x2
c000a26a:	77 15                	ja     c000a281 <Fs::setcwd(Process*, char*)+0x4e>
c000a26c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a271:	83 eb 41             	sub    ebx,0x41
c000a274:	8b 04 9d 00 18 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde800]
c000a27b:	85 c0                	test   eax,eax
c000a27d:	75 1c                	jne    c000a29b <Fs::setcwd(Process*, char*)+0x68>
c000a27f:	eb 2f                	jmp    c000a2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000a281:	83 ec 0c             	sub    esp,0xc
c000a284:	56                   	push   esi
c000a285:	e8 d6 62 ff ff       	call   c0000560 <strlen>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	83 f8 03             	cmp    eax,0x3
c000a290:	75 57                	jne    c000a2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000a292:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a297:	75 50                	jne    c000a2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000a299:	eb d1                	jmp    c000a26c <Fs::setcwd(Process*, char*)+0x39>
c000a29b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a2a2:	75 0c                	jne    c000a2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	50                   	push   eax
c000a2a8:	e8 69 1c 00 00       	call   c000bf16 <LogicalDisk::mount()>
c000a2ad:	83 c4 10             	add    esp,0x10
c000a2b0:	b8 03 00 00 00       	mov    eax,0x3
c000a2b5:	83 fb 19             	cmp    ebx,0x19
c000a2b8:	0f 87 c6 00 00 00    	ja     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2be:	8b 14 9d 00 18 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde800]
c000a2c5:	b8 05 00 00 00       	mov    eax,0x5
c000a2ca:	85 d2                	test   edx,edx
c000a2cc:	0f 84 b2 00 00 00    	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2d2:	b8 06 00 00 00       	mov    eax,0x6
c000a2d7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a2de:	0f 85 92 00 00 00    	jne    c000a376 <Fs::setcwd(Process*, char*)+0x143>
c000a2e4:	e9 9b 00 00 00       	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2e9:	83 ec 0c             	sub    esp,0xc
c000a2ec:	68 14 01 00 00       	push   0x114
c000a2f1:	e8 6b c8 ff ff       	call   c0006b61 <malloc>
c000a2f6:	83 c4 0c             	add    esp,0xc
c000a2f9:	89 c3                	mov    ebx,eax
c000a2fb:	55                   	push   ebp
c000a2fc:	56                   	push   esi
c000a2fd:	50                   	push   eax
c000a2fe:	e8 63 fb ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000a303:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a308:	83 c4 0c             	add    esp,0xc
c000a30b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a30f:	50                   	push   eax
c000a310:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a314:	50                   	push   eax
c000a315:	53                   	push   ebx
c000a316:	e8 b7 fe ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c000a31b:	83 c4 10             	add    esp,0x10
c000a31e:	83 f8 02             	cmp    eax,0x2
c000a321:	74 04                	je     c000a327 <Fs::setcwd(Process*, char*)+0xf4>
c000a323:	85 c0                	test   eax,eax
c000a325:	74 1c                	je     c000a343 <Fs::setcwd(Process*, char*)+0x110>
c000a327:	b8 01 00 00 00       	mov    eax,0x1
c000a32c:	85 db                	test   ebx,ebx
c000a32e:	74 54                	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a330:	83 ec 0c             	sub    esp,0xc
c000a333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a335:	53                   	push   ebx
c000a336:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a339:	83 c4 10             	add    esp,0x10
c000a33c:	b8 01 00 00 00       	mov    eax,0x1
c000a341:	eb 41                	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a343:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a348:	75 1c                	jne    c000a366 <Fs::setcwd(Process*, char*)+0x133>
c000a34a:	b8 02 00 00 00       	mov    eax,0x2
c000a34f:	85 db                	test   ebx,ebx
c000a351:	74 31                	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a353:	83 ec 0c             	sub    esp,0xc
c000a356:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a358:	53                   	push   ebx
c000a359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a35c:	83 c4 10             	add    esp,0x10
c000a35f:	b8 02 00 00 00       	mov    eax,0x2
c000a364:	eb 1e                	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a366:	85 db                	test   ebx,ebx
c000a368:	74 0c                	je     c000a376 <Fs::setcwd(Process*, char*)+0x143>
c000a36a:	83 ec 0c             	sub    esp,0xc
c000a36d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a36f:	53                   	push   ebx
c000a370:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a373:	83 c4 10             	add    esp,0x10
c000a376:	50                   	push   eax
c000a377:	50                   	push   eax
c000a378:	56                   	push   esi
c000a379:	57                   	push   edi
c000a37a:	e8 a1 62 ff ff       	call   c0000620 <strcpy>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	31 c0                	xor    eax,eax
c000a384:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a38a:	5b                   	pop    ebx
c000a38b:	5e                   	pop    esi
c000a38c:	5f                   	pop    edi
c000a38d:	5d                   	pop    ebp
c000a38e:	c3                   	ret    
c000a38f:	90                   	nop

c000a390 <Directory::Directory(char const*, Process*)>:
c000a390:	83 ec 0c             	sub    esp,0xc
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	83 ec 08             	sub    esp,0x8
c000a39a:	6a 00                	push   0x0
c000a39c:	50                   	push   eax
c000a39d:	e8 b8 de ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000a3a2:	83 c4 10             	add    esp,0x10
c000a3a5:	ba 28 d2 01 c0       	mov    edx,0xc001d228
c000a3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ae:	89 10                	mov    DWORD PTR [eax],edx
c000a3b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a3b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3be:	83 c0 0d             	add    eax,0xd
c000a3c1:	83 ec 04             	sub    esp,0x4
c000a3c4:	52                   	push   edx
c000a3c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3c9:	50                   	push   eax
c000a3ca:	e8 ed f8 ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000a3cf:	83 c4 10             	add    esp,0x10
c000a3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a3d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000a3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a3f8:	25 ff 00 00 00       	and    eax,0xff
c000a3fd:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c000a404:	85 c0                	test   eax,eax
c000a406:	74 42                	je     c000a44a <Directory::Directory(char const*, Process*)+0xba>
c000a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a412:	25 ff 00 00 00       	and    eax,0xff
c000a417:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c000a41e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a424:	85 c0                	test   eax,eax
c000a426:	75 22                	jne    c000a44a <Directory::Directory(char const*, Process*)+0xba>
c000a428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a42c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a432:	25 ff 00 00 00       	and    eax,0xff
c000a437:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	50                   	push   eax
c000a442:	e8 cf 1a 00 00       	call   c000bf16 <LogicalDisk::mount()>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	90                   	nop
c000a44b:	83 c4 0c             	add    esp,0xc
c000a44e:	c3                   	ret    
c000a44f:	90                   	nop

c000a450 <Directory::open()>:
c000a450:	53                   	push   ebx
c000a451:	b8 0b 00 00 00       	mov    eax,0xb
c000a456:	83 ec 08             	sub    esp,0x8
c000a459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a45d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a464:	80 fa 19             	cmp    dl,0x19
c000a467:	77 3d                	ja     c000a4a6 <Directory::open()+0x56>
c000a469:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c000a470:	85 d2                	test   edx,edx
c000a472:	74 32                	je     c000a4a6 <Directory::open()+0x56>
c000a474:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a47a:	85 d2                	test   edx,edx
c000a47c:	74 28                	je     c000a4a6 <Directory::open()+0x56>
c000a47e:	b8 06 00 00 00       	mov    eax,0x6
c000a483:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a487:	75 1d                	jne    c000a4a6 <Directory::open()+0x56>
c000a489:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a48f:	50                   	push   eax
c000a490:	8b 02                	mov    eax,DWORD PTR [edx]
c000a492:	51                   	push   ecx
c000a493:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a496:	51                   	push   ecx
c000a497:	52                   	push   edx
c000a498:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a49b:	83 c4 10             	add    esp,0x10
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	75 04                	jne    c000a4a6 <Directory::open()+0x56>
c000a4a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a4a6:	83 c4 08             	add    esp,0x8
c000a4a9:	5b                   	pop    ebx
c000a4aa:	c3                   	ret    
c000a4ab:	90                   	nop

c000a4ac <Directory::close()>:
c000a4ac:	53                   	push   ebx
c000a4ad:	b8 0b 00 00 00       	mov    eax,0xb
c000a4b2:	83 ec 08             	sub    esp,0x8
c000a4b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a4b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a4c0:	80 fa 19             	cmp    dl,0x19
c000a4c3:	77 41                	ja     c000a506 <Directory::close()+0x5a>
c000a4c5:	8b 1c 95 00 18 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde800]
c000a4cc:	85 db                	test   ebx,ebx
c000a4ce:	74 36                	je     c000a506 <Directory::close()+0x5a>
c000a4d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a4d7:	74 2d                	je     c000a506 <Directory::close()+0x5a>
c000a4d9:	b8 05 00 00 00       	mov    eax,0x5
c000a4de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a4e2:	74 22                	je     c000a506 <Directory::close()+0x5a>
c000a4e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a4e8:	8b 04 95 00 18 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde800]
c000a4ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a4f5:	53                   	push   ebx
c000a4f6:	53                   	push   ebx
c000a4f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a4ff:	50                   	push   eax
c000a500:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 c4 08             	add    esp,0x8
c000a509:	5b                   	pop    ebx
c000a50a:	c3                   	ret    
c000a50b:	90                   	nop

c000a50c <Directory::unlink()>:
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	b8 0b 00 00 00       	mov    eax,0xb
c000a514:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a518:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a51f:	80 f9 19             	cmp    cl,0x19
c000a522:	77 2f                	ja     c000a553 <Directory::unlink()+0x47>
c000a524:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a52b:	85 c9                	test   ecx,ecx
c000a52d:	74 24                	je     c000a553 <Directory::unlink()+0x47>
c000a52f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a535:	85 c9                	test   ecx,ecx
c000a537:	74 1a                	je     c000a553 <Directory::unlink()+0x47>
c000a539:	b8 06 00 00 00       	mov    eax,0x6
c000a53e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a542:	75 0f                	jne    c000a553 <Directory::unlink()+0x47>
c000a544:	83 c2 0d             	add    edx,0xd
c000a547:	50                   	push   eax
c000a548:	50                   	push   eax
c000a549:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a54b:	52                   	push   edx
c000a54c:	51                   	push   ecx
c000a54d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a550:	83 c4 10             	add    esp,0x10
c000a553:	83 c4 0c             	add    esp,0xc
c000a556:	c3                   	ret    
c000a557:	90                   	nop

c000a558 <Directory::rename(char const*)>:
c000a558:	83 ec 0c             	sub    esp,0xc
c000a55b:	b8 0b 00 00 00       	mov    eax,0xb
c000a560:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a564:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a56b:	80 f9 19             	cmp    cl,0x19
c000a56e:	77 32                	ja     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a570:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a577:	85 c9                	test   ecx,ecx
c000a579:	74 27                	je     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a57b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a581:	85 c9                	test   ecx,ecx
c000a583:	74 1d                	je     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a585:	b8 06 00 00 00       	mov    eax,0x6
c000a58a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a58e:	75 12                	jne    c000a5a2 <Directory::rename(char const*)+0x4a>
c000a590:	83 c2 0d             	add    edx,0xd
c000a593:	50                   	push   eax
c000a594:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a59a:	52                   	push   edx
c000a59b:	51                   	push   ecx
c000a59c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	83 c4 0c             	add    esp,0xc
c000a5a5:	c3                   	ret    

c000a5a6 <Directory::exists()>:
c000a5a6:	83 ec 0c             	sub    esp,0xc
c000a5a9:	31 c0                	xor    eax,eax
c000a5ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a5af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a5b6:	80 f9 19             	cmp    cl,0x19
c000a5b9:	77 24                	ja     c000a5df <Directory::exists()+0x39>
c000a5bb:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a5c2:	85 c9                	test   ecx,ecx
c000a5c4:	74 19                	je     c000a5df <Directory::exists()+0x39>
c000a5c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a5cc:	85 c9                	test   ecx,ecx
c000a5ce:	74 0f                	je     c000a5df <Directory::exists()+0x39>
c000a5d0:	83 c2 0d             	add    edx,0xd
c000a5d3:	50                   	push   eax
c000a5d4:	50                   	push   eax
c000a5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a5d7:	52                   	push   edx
c000a5d8:	51                   	push   ecx
c000a5d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	83 c4 0c             	add    esp,0xc
c000a5e2:	c3                   	ret    
c000a5e3:	90                   	nop

c000a5e4 <Directory::read(dirent*)>:
c000a5e4:	83 ec 1c             	sub    esp,0x1c
c000a5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000a5ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5f7:	80 fa 19             	cmp    dl,0x19
c000a5fa:	77 30                	ja     c000a62c <Directory::read(dirent*)+0x48>
c000a5fc:	8b 14 95 00 18 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde800]
c000a603:	85 d2                	test   edx,edx
c000a605:	74 25                	je     c000a62c <Directory::read(dirent*)+0x48>
c000a607:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a60e:	74 1c                	je     c000a62c <Directory::read(dirent*)+0x48>
c000a610:	83 ec 0c             	sub    esp,0xc
c000a613:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a615:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a619:	52                   	push   edx
c000a61a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a61e:	6a 00                	push   0x0
c000a620:	68 10 01 00 00       	push   0x110
c000a625:	51                   	push   ecx
c000a626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a629:	83 c4 20             	add    esp,0x20
c000a62c:	83 c4 1c             	add    esp,0x1c
c000a62f:	c3                   	ret    

c000a630 <Directory::create()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	b8 0b 00 00 00       	mov    eax,0xb
c000a638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a63c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a643:	80 f9 19             	cmp    cl,0x19
c000a646:	77 2f                	ja     c000a677 <Directory::create()+0x47>
c000a648:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000a64f:	85 c9                	test   ecx,ecx
c000a651:	74 24                	je     c000a677 <Directory::create()+0x47>
c000a653:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a659:	85 c9                	test   ecx,ecx
c000a65b:	74 1a                	je     c000a677 <Directory::create()+0x47>
c000a65d:	b8 06 00 00 00       	mov    eax,0x6
c000a662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a666:	75 0f                	jne    c000a677 <Directory::create()+0x47>
c000a668:	83 c2 0d             	add    edx,0xd
c000a66b:	50                   	push   eax
c000a66c:	50                   	push   eax
c000a66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a66f:	52                   	push   edx
c000a670:	51                   	push   ecx
c000a671:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	83 c4 0c             	add    esp,0xc
c000a67a:	c3                   	ret    
c000a67b:	90                   	nop

c000a67c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a67c:	b8 0a 00 00 00       	mov    eax,0xa
c000a681:	c3                   	ret    
c000a682:	66 90                	xchg   ax,ax

c000a684 <Bus::Bus(char const*)>:
c000a684:	83 ec 0c             	sub    esp,0xc
c000a687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a692:	50                   	push   eax
c000a693:	e8 30 08 00 00       	call   c000aec8 <Device::Device(char const*)>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	ba 44 d2 01 c0       	mov    edx,0xc001d244
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a6b4:	90                   	nop
c000a6b5:	83 c4 0c             	add    esp,0xc
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop
c000a6ba:	66 90                	xchg   ax,ax

c000a6bc <Bus::~Bus()>:
c000a6bc:	83 ec 0c             	sub    esp,0xc
c000a6bf:	ba 44 d2 01 c0       	mov    edx,0xc001d244
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	50                   	push   eax
c000a6d2:	e8 5b 05 00 00       	call   c000ac32 <Device::~Device()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	90                   	nop
c000a6db:	83 c4 0c             	add    esp,0xc
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <Bus::~Bus()>:
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 cd ff ff ff       	call   c000a6bc <Bus::~Bus()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 ec 08             	sub    esp,0x8
c000a6f5:	68 58 01 00 00       	push   0x158
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 f7 f0 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 0c             	add    esp,0xc
c000a709:	c3                   	ret    

c000a70a <beepThread(void*)>:
c000a70a:	83 ec 0c             	sub    esp,0xc
c000a70d:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000a712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a716:	48                   	dec    eax
c000a717:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000a71c:	75 01                	jne    c000a71f <beepThread(void*)+0x15>
c000a71e:	fb                   	sti    
c000a71f:	83 ec 0c             	sub    esp,0xc
c000a722:	6b c2 0a             	imul   eax,edx,0xa
c000a725:	50                   	push   eax
c000a726:	e8 69 83 00 00       	call   c0012a94 <milliTenthSleep(unsigned int)>
c000a72b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a732:	e8 a5 9f 00 00       	call   c00146dc <HalMakeBeep(int)>
c000a737:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a73f:	83 c4 1c             	add    esp,0x1c
c000a742:	e9 49 82 00 00       	jmp    c0012990 <blockTask(TaskState)>

c000a747 <Krnl::beep(int, int, bool)>:
c000a747:	56                   	push   esi
c000a748:	53                   	push   ebx
c000a749:	83 ec 10             	sub    esp,0x10
c000a74c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a750:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a758:	e8 7f 9f 00 00       	call   c00146dc <HalMakeBeep(int)>
c000a75d:	83 c4 10             	add    esp,0x10
c000a760:	89 f0                	mov    eax,esi
c000a762:	84 c0                	test   al,al
c000a764:	74 1e                	je     c000a784 <Krnl::beep(int, int, bool)+0x3d>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	6b db 0a             	imul   ebx,ebx,0xa
c000a76c:	53                   	push   ebx
c000a76d:	e8 22 83 00 00       	call   c0012a94 <milliTenthSleep(unsigned int)>
c000a772:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a77a:	83 c4 14             	add    esp,0x14
c000a77d:	5b                   	pop    ebx
c000a77e:	5e                   	pop    esi
c000a77f:	e9 58 9f 00 00       	jmp    c00146dc <HalMakeBeep(int)>
c000a784:	68 e6 00 00 00       	push   0xe6
c000a789:	53                   	push   ebx
c000a78a:	68 0a a7 00 c0       	push   0xc000a70a
c000a78f:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000a795:	e8 da 7d 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c000a79a:	83 c4 14             	add    esp,0x14
c000a79d:	5b                   	pop    ebx
c000a79e:	5e                   	pop    esi
c000a79f:	c3                   	ret    

c000a7a0 <User::loadClockSettings(int)>:
c000a7a0:	53                   	push   ebx
c000a7a1:	83 ec 14             	sub    esp,0x14
c000a7a4:	68 14 01 00 00       	push   0x114
c000a7a9:	e8 b3 c3 ff ff       	call   c0006b61 <malloc>
c000a7ae:	83 c4 0c             	add    esp,0xc
c000a7b1:	89 c3                	mov    ebx,eax
c000a7b3:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000a7b9:	68 68 d2 01 c0       	push   0xc001d268
c000a7be:	50                   	push   eax
c000a7bf:	e8 a2 f6 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000a7c4:	58                   	pop    eax
c000a7c5:	5a                   	pop    edx
c000a7c6:	6a 01                	push   0x1
c000a7c8:	53                   	push   ebx
c000a7c9:	e8 58 f7 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000a7ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a7d1:	e8 ae f7 ff ff       	call   c0009f84 <File::close()>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	85 db                	test   ebx,ebx
c000a7db:	74 0f                	je     c000a7ec <User::loadClockSettings(int)+0x4c>
c000a7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a7df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a7e6:	83 c4 08             	add    esp,0x8
c000a7e9:	5b                   	pop    ebx
c000a7ea:	ff e0                	jmp    eax
c000a7ec:	83 c4 08             	add    esp,0x8
c000a7ef:	5b                   	pop    ebx
c000a7f0:	c3                   	ret    
c000a7f1:	90                   	nop

c000a7f2 <Clock::Clock(char const*)>:
c000a7f2:	83 ec 0c             	sub    esp,0xc
c000a7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f9:	83 ec 08             	sub    esp,0x8
c000a7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a800:	50                   	push   eax
c000a801:	e8 c2 06 00 00       	call   c000aec8 <Device::Device(char const*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	ba 90 d2 01 c0       	mov    edx,0xc001d290
c000a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a812:	89 10                	mov    DWORD PTR [eax],edx
c000a814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a818:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a822:	90                   	nop
c000a823:	83 c4 0c             	add    esp,0xc
c000a826:	c3                   	ret    
c000a827:	90                   	nop

c000a828 <Clock::~Clock()>:
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	ba 90 d2 01 c0       	mov    edx,0xc001d290
c000a830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a834:	89 10                	mov    DWORD PTR [eax],edx
c000a836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a83a:	83 ec 0c             	sub    esp,0xc
c000a83d:	50                   	push   eax
c000a83e:	e8 ef 03 00 00       	call   c000ac32 <Device::~Device()>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	90                   	nop
c000a847:	83 c4 0c             	add    esp,0xc
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Clock::~Clock()>:
c000a84c:	83 ec 0c             	sub    esp,0xc
c000a84f:	83 ec 0c             	sub    esp,0xc
c000a852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a856:	e8 cd ff ff ff       	call   c000a828 <Clock::~Clock()>
c000a85b:	83 c4 10             	add    esp,0x10
c000a85e:	83 ec 08             	sub    esp,0x8
c000a861:	68 58 01 00 00       	push   0x158
c000a866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a86a:	e8 8b ef ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	83 c4 0c             	add    esp,0xc
c000a875:	c3                   	ret    

c000a876 <Clock::timeInSecondsLocal()>:
c000a876:	53                   	push   ebx
c000a877:	83 ec 14             	sub    esp,0x14
c000a87a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a87e:	8b 10                	mov    edx,DWORD PTR [eax]
c000a880:	50                   	push   eax
c000a881:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a884:	0f b6 0d 98 f3 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f398
c000a88b:	03 0d 9c f3 01 c0    	add    ecx,DWORD PTR ds:0xc001f39c
c000a891:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a897:	89 cb                	mov    ebx,ecx
c000a899:	c1 fb 1f             	sar    ebx,0x1f
c000a89c:	01 c8                	add    eax,ecx
c000a89e:	11 da                	adc    edx,ebx
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	31 c9                	xor    ecx,ecx
c000a8a5:	80 3d 99 f3 01 c0 00 	cmp    BYTE PTR ds:0xc001f399,0x0
c000a8ac:	74 05                	je     c000a8b3 <Clock::timeInSecondsLocal()+0x3d>
c000a8ae:	b9 08 07 00 00       	mov    ecx,0x708
c000a8b3:	31 db                	xor    ebx,ebx
c000a8b5:	01 c8                	add    eax,ecx
c000a8b7:	11 da                	adc    edx,ebx
c000a8b9:	83 c4 08             	add    esp,0x8
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a8be:	57                   	push   edi
c000a8bf:	56                   	push   esi
c000a8c0:	53                   	push   ebx
c000a8c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a8c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a8cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a8cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a8d2:	0f b6 05 98 f3 01 c0 	movzx  eax,BYTE PTR ds:0xc001f398
c000a8d9:	03 05 9c f3 01 c0    	add    eax,DWORD PTR ds:0xc001f39c
c000a8df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a8e5:	99                   	cdq    
c000a8e6:	29 c6                	sub    esi,eax
c000a8e8:	19 d7                	sbb    edi,edx
c000a8ea:	89 f0                	mov    eax,esi
c000a8ec:	89 fa                	mov    edx,edi
c000a8ee:	31 f6                	xor    esi,esi
c000a8f0:	80 3d 99 f3 01 c0 00 	cmp    BYTE PTR ds:0xc001f399,0x0
c000a8f7:	74 05                	je     c000a8fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a8f9:	be 08 07 00 00       	mov    esi,0x708
c000a8fe:	31 ff                	xor    edi,edi
c000a900:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a904:	29 f0                	sub    eax,esi
c000a906:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a90a:	19 fa                	sbb    edx,edi
c000a90c:	89 d8                	mov    eax,ebx
c000a90e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a912:	5b                   	pop    ebx
c000a913:	5e                   	pop    esi
c000a914:	5f                   	pop    edi
c000a915:	ff e0                	jmp    eax

c000a917 <datetimeToSeconds(datetime_t)>:
c000a917:	55                   	push   ebp
c000a918:	57                   	push   edi
c000a919:	56                   	push   esi
c000a91a:	53                   	push   ebx
c000a91b:	83 ec 14             	sub    esp,0x14
c000a91e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a922:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a926:	89 d3                	mov    ebx,edx
c000a928:	0f b6 c6             	movzx  eax,dh
c000a92b:	c1 eb 10             	shr    ebx,0x10
c000a92e:	48                   	dec    eax
c000a92f:	66 81 eb 6c 07       	sub    bx,0x76c
c000a934:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a938:	0f b6 f5             	movzx  esi,ch
c000a93b:	89 cf                	mov    edi,ecx
c000a93d:	6b f6 3c             	imul   esi,esi,0x3c
c000a940:	c1 ef 10             	shr    edi,0x10
c000a943:	0f b6 c9             	movzx  ecx,cl
c000a946:	89 f8                	mov    eax,edi
c000a948:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a94e:	0f b6 f8             	movzx  edi,al
c000a951:	0f b6 d2             	movzx  edx,dl
c000a954:	01 fe                	add    esi,edi
c000a956:	01 f1                	add    ecx,esi
c000a958:	0f b7 f3             	movzx  esi,bx
c000a95b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a95f:	c1 f9 1f             	sar    ecx,0x1f
c000a962:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a967:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a96b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a970:	8b 0c 8d e0 d2 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2d20]
c000a977:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a97b:	76 29                	jbe    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a97d:	f6 c3 03             	test   bl,0x3
c000a980:	75 24                	jne    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a982:	31 d2                	xor    edx,edx
c000a984:	bf 64 00 00 00       	mov    edi,0x64
c000a989:	89 d8                	mov    eax,ebx
c000a98b:	66 f7 f7             	div    di
c000a98e:	66 85 d2             	test   dx,dx
c000a991:	75 12                	jne    c000a9a5 <datetimeToSeconds(datetime_t)+0x8e>
c000a993:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a999:	bf 90 01 00 00       	mov    edi,0x190
c000a99e:	99                   	cdq    
c000a99f:	f7 ff                	idiv   edi
c000a9a1:	85 d2                	test   edx,edx
c000a9a3:	75 01                	jne    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a9a5:	41                   	inc    ecx
c000a9a6:	66 83 fb 46          	cmp    bx,0x46
c000a9aa:	76 45                	jbe    c000a9f1 <datetimeToSeconds(datetime_t)+0xda>
c000a9ac:	bb 46 00 00 00       	mov    ebx,0x46
c000a9b1:	bf 64 00 00 00       	mov    edi,0x64
c000a9b6:	bd 90 01 00 00       	mov    ebp,0x190
c000a9bb:	b8 6d 01 00 00       	mov    eax,0x16d
c000a9c0:	f6 c3 03             	test   bl,0x3
c000a9c3:	75 23                	jne    c000a9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000a9c5:	89 d8                	mov    eax,ebx
c000a9c7:	99                   	cdq    
c000a9c8:	f7 ff                	idiv   edi
c000a9ca:	b8 6e 01 00 00       	mov    eax,0x16e
c000a9cf:	85 d2                	test   edx,edx
c000a9d1:	75 15                	jne    c000a9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000a9d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000a9d9:	99                   	cdq    
c000a9da:	f7 fd                	idiv   ebp
c000a9dc:	31 c0                	xor    eax,eax
c000a9de:	85 d2                	test   edx,edx
c000a9e0:	0f 94 c0             	sete   al
c000a9e3:	05 6d 01 00 00       	add    eax,0x16d
c000a9e8:	01 c1                	add    ecx,eax
c000a9ea:	43                   	inc    ebx
c000a9eb:	39 f3                	cmp    ebx,esi
c000a9ed:	7c cc                	jl     c000a9bb <datetimeToSeconds(datetime_t)+0xa4>
c000a9ef:	eb 3b                	jmp    c000aa2c <datetimeToSeconds(datetime_t)+0x115>
c000a9f1:	74 39                	je     c000aa2c <datetimeToSeconds(datetime_t)+0x115>
c000a9f3:	b8 45 00 00 00       	mov    eax,0x45
c000a9f8:	89 c2                	mov    edx,eax
c000a9fa:	83 e2 03             	and    edx,0x3
c000a9fd:	39 f0                	cmp    eax,esi
c000a9ff:	7e 13                	jle    c000aa14 <datetimeToSeconds(datetime_t)+0xfd>
c000aa01:	85 d2                	test   edx,edx
c000aa03:	0f 94 c2             	sete   dl
c000aa06:	48                   	dec    eax
c000aa07:	0f b6 d2             	movzx  edx,dl
c000aa0a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000aa10:	29 d1                	sub    ecx,edx
c000aa12:	eb e4                	jmp    c000a9f8 <datetimeToSeconds(datetime_t)+0xe1>
c000aa14:	b8 6d 01 00 00       	mov    eax,0x16d
c000aa19:	85 d2                	test   edx,edx
c000aa1b:	75 0d                	jne    c000aa2a <datetimeToSeconds(datetime_t)+0x113>
c000aa1d:	31 c0                	xor    eax,eax
c000aa1f:	66 85 db             	test   bx,bx
c000aa22:	0f 95 c0             	setne  al
c000aa25:	05 6d 01 00 00       	add    eax,0x16d
c000aa2a:	29 c1                	sub    ecx,eax
c000aa2c:	b8 80 51 01 00       	mov    eax,0x15180
c000aa31:	f7 e9                	imul   ecx
c000aa33:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000aa37:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000aa3b:	83 c4 14             	add    esp,0x14
c000aa3e:	5b                   	pop    ebx
c000aa3f:	5e                   	pop    esi
c000aa40:	5f                   	pop    edi
c000aa41:	5d                   	pop    ebp
c000aa42:	c3                   	ret    
c000aa43:	90                   	nop

c000aa44 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000aa44:	57                   	push   edi
c000aa45:	56                   	push   esi
c000aa46:	53                   	push   ebx
c000aa47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000aa4d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000aa50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa58:	e8 ba fe ff ff       	call   c000a917 <datetimeToSeconds(datetime_t)>
c000aa5d:	59                   	pop    ecx
c000aa5e:	0f b6 0d 98 f3 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f398
c000aa65:	5b                   	pop    ebx
c000aa66:	03 0d 9c f3 01 c0    	add    ecx,DWORD PTR ds:0xc001f39c
c000aa6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa72:	89 cb                	mov    ebx,ecx
c000aa74:	c1 fb 1f             	sar    ebx,0x1f
c000aa77:	29 c8                	sub    eax,ecx
c000aa79:	19 da                	sbb    edx,ebx
c000aa7b:	31 c9                	xor    ecx,ecx
c000aa7d:	80 3d 99 f3 01 c0 00 	cmp    BYTE PTR ds:0xc001f399,0x0
c000aa84:	74 05                	je     c000aa8b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000aa86:	b9 08 07 00 00       	mov    ecx,0x708
c000aa8b:	31 db                	xor    ebx,ebx
c000aa8d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000aa91:	29 c8                	sub    eax,ecx
c000aa93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa97:	19 da                	sbb    edx,ebx
c000aa99:	89 f8                	mov    eax,edi
c000aa9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aa9f:	5b                   	pop    ebx
c000aaa0:	5e                   	pop    esi
c000aaa1:	5f                   	pop    edi
c000aaa2:	ff e0                	jmp    eax

c000aaa4 <secondsToDatetime(unsigned long long)>:
c000aaa4:	55                   	push   ebp
c000aaa5:	57                   	push   edi
c000aaa6:	56                   	push   esi
c000aaa7:	53                   	push   ebx
c000aaa8:	83 ec 1c             	sub    esp,0x1c
c000aaab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aaaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aab3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000aab7:	6a 00                	push   0x0
c000aab9:	68 80 51 01 00       	push   0x15180
c000aabe:	55                   	push   ebp
c000aabf:	57                   	push   edi
c000aac0:	e8 7b 0a 01 00       	call   c001b540 <__udivdi3>
c000aac5:	83 c4 10             	add    esp,0x10
c000aac8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000aace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aad2:	6a 00                	push   0x0
c000aad4:	68 80 51 01 00       	push   0x15180
c000aad9:	55                   	push   ebp
c000aada:	57                   	push   edi
c000aadb:	bf 10 0e 00 00       	mov    edi,0xe10
c000aae0:	e8 5b 0b 01 00       	call   c001b640 <__umoddi3>
c000aae5:	83 c4 10             	add    esp,0x10
c000aae8:	99                   	cdq    
c000aae9:	f7 ff                	idiv   edi
c000aaeb:	bf 3c 00 00 00       	mov    edi,0x3c
c000aaf0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000aaf3:	89 d0                	mov    eax,edx
c000aaf5:	99                   	cdq    
c000aaf6:	f7 ff                	idiv   edi
c000aaf8:	85 db                	test   ebx,ebx
c000aafa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000aafd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ab00:	79 11                	jns    c000ab13 <secondsToDatetime(unsigned long long)+0x6f>
c000ab02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ab06:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ab0c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab11:	eb 07                	jmp    c000ab1a <secondsToDatetime(unsigned long long)+0x76>
c000ab13:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab18:	89 d8                	mov    eax,ebx
c000ab1a:	bf b4 05 00 00       	mov    edi,0x5b4
c000ab1f:	99                   	cdq    
c000ab20:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ab25:	f7 f9                	idiv   ecx
c000ab27:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ab2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab30:	31 d2                	xor    edx,edx
c000ab32:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ab3a:	01 c3                	add    ebx,eax
c000ab3c:	89 d8                	mov    eax,ebx
c000ab3e:	f7 f1                	div    ecx
c000ab40:	31 d2                	xor    edx,edx
c000ab42:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ab45:	89 d8                	mov    eax,ebx
c000ab47:	f7 f7                	div    edi
c000ab49:	31 d2                	xor    edx,edx
c000ab4b:	29 c1                	sub    ecx,eax
c000ab4d:	89 d8                	mov    eax,ebx
c000ab4f:	f7 f5                	div    ebp
c000ab51:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ab56:	29 c1                	sub    ecx,eax
c000ab58:	31 d2                	xor    edx,edx
c000ab5a:	89 c8                	mov    eax,ecx
c000ab5c:	f7 f5                	div    ebp
c000ab5e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ab63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab67:	31 d2                	xor    edx,edx
c000ab69:	89 c8                	mov    eax,ecx
c000ab6b:	f7 f5                	div    ebp
c000ab6d:	31 d2                	xor    edx,edx
c000ab6f:	01 c3                	add    ebx,eax
c000ab71:	89 c8                	mov    eax,ecx
c000ab73:	f7 f7                	div    edi
c000ab75:	bf 99 00 00 00       	mov    edi,0x99
c000ab7a:	29 c3                	sub    ebx,eax
c000ab7c:	31 d2                	xor    edx,edx
c000ab7e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ab86:	29 c3                	sub    ebx,eax
c000ab88:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ab8b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ab8e:	bb 05 00 00 00       	mov    ebx,0x5
c000ab93:	83 c1 02             	add    ecx,0x2
c000ab96:	89 c8                	mov    eax,ecx
c000ab98:	f7 f7                	div    edi
c000ab9a:	31 d2                	xor    edx,edx
c000ab9c:	89 c7                	mov    edi,eax
c000ab9e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000aba4:	83 c0 02             	add    eax,0x2
c000aba7:	f7 f3                	div    ebx
c000aba9:	89 eb                	mov    ebx,ebp
c000abab:	29 c3                	sub    ebx,eax
c000abad:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000abb3:	88 1e                	mov    BYTE PTR [esi],bl
c000abb5:	19 c0                	sbb    eax,eax
c000abb7:	31 d2                	xor    edx,edx
c000abb9:	83 e0 0c             	and    eax,0xc
c000abbc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000abc0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000abc8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000abcc:	83 f9 01             	cmp    ecx,0x1
c000abcf:	0f 96 c2             	setbe  dl
c000abd2:	41                   	inc    ecx
c000abd3:	01 d0                	add    eax,edx
c000abd5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000abd8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000abdc:	83 c4 1c             	add    esp,0x1c
c000abdf:	89 f0                	mov    eax,esi
c000abe1:	5b                   	pop    ebx
c000abe2:	5e                   	pop    esi
c000abe3:	5f                   	pop    edi
c000abe4:	5d                   	pop    ebp
c000abe5:	c2 04 00             	ret    0x4

c000abe8 <Clock::timeInDatetimeLocal()>:
c000abe8:	53                   	push   ebx
c000abe9:	83 ec 14             	sub    esp,0x14
c000abec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abf4:	e8 7d fc ff ff       	call   c000a876 <Clock::timeInSecondsLocal()>
c000abf9:	83 c4 0c             	add    esp,0xc
c000abfc:	52                   	push   edx
c000abfd:	50                   	push   eax
c000abfe:	53                   	push   ebx
c000abff:	e8 a0 fe ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c000ac04:	89 d8                	mov    eax,ebx
c000ac06:	83 c4 14             	add    esp,0x14
c000ac09:	5b                   	pop    ebx
c000ac0a:	c2 04 00             	ret    0x4
c000ac0d:	90                   	nop

c000ac0e <Device::hibernate()>:
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <Device::wake()>:
c000ac10:	c3                   	ret    
c000ac11:	90                   	nop

c000ac12 <Device::detect()>:
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <Device::disableLegacy()>:
c000ac14:	c3                   	ret    
c000ac15:	90                   	nop

c000ac16 <Device::powerSaving(PowerSavingLevel)>:
c000ac16:	c3                   	ret    
c000ac17:	90                   	nop

c000ac18 <DriverlessDevice::close(int, int, void*)>:
c000ac18:	31 c0                	xor    eax,eax
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <DriverlessDevice::detect()>:
c000ac1c:	c3                   	ret    
c000ac1d:	90                   	nop

c000ac1e <DriverlessDevice::open(int, int, void*)>:
c000ac1e:	83 ec 18             	sub    esp,0x18
c000ac21:	68 10 d3 01 c0       	push   0xc001d310
c000ac26:	e8 14 48 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000ac2b:	83 c8 ff             	or     eax,0xffffffff
c000ac2e:	83 c4 1c             	add    esp,0x1c
c000ac31:	c3                   	ret    

c000ac32 <Device::~Device()>:
c000ac32:	ba 70 d3 01 c0       	mov    edx,0xc001d370
c000ac37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac3b:	89 10                	mov    DWORD PTR [eax],edx
c000ac3d:	90                   	nop
c000ac3e:	c3                   	ret    
c000ac3f:	90                   	nop

c000ac40 <Device::~Device()>:
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac47:	e8 e6 ff ff ff       	call   c000ac32 <Device::~Device()>
c000ac4c:	83 c4 04             	add    esp,0x4
c000ac4f:	83 ec 08             	sub    esp,0x8
c000ac52:	68 58 01 00 00       	push   0x158
c000ac57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5b:	e8 9a eb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	83 c4 0c             	add    esp,0xc
c000ac66:	c3                   	ret    
c000ac67:	90                   	nop

c000ac68 <Device::findAndLoadDriver()>:
c000ac68:	c7 44 24 04 2e d3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d32e
c000ac70:	e9 7b ec ff ff       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c000ac75:	90                   	nop

c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ac76:	57                   	push   edi
c000ac77:	b9 09 00 00 00       	mov    ecx,0x9
c000ac7c:	56                   	push   esi
c000ac7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ac81:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ac85:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ac8f:	81 c7 18 01 00 00    	add    edi,0x118
c000ac95:	fc                   	cld    
c000ac96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ac98:	5e                   	pop    esi
c000ac99:	5f                   	pop    edi
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <Device::preOpenACPI(void*, char*, char*)>:
c000ac9c:	57                   	push   edi
c000ac9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000aca2:	56                   	push   esi
c000aca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aca7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000acb5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000acbb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000acc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000acc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acc7:	b9 0e 00 00 00       	mov    ecx,0xe
c000accc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000acd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acd8:	5e                   	pop    esi
c000acd9:	5f                   	pop    edi
c000acda:	c3                   	ret    
c000acdb:	90                   	nop

c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000acdc:	53                   	push   ebx
c000acdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ace1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ace5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ace9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aced:	0f b6 c0             	movzx  eax,al
c000acf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000acf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000acfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad00:	5b                   	pop    ebx
c000ad01:	e9 a6 05 00 00       	jmp    c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ad06 <Device::getParent()>:
c000ad06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad0a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ad10:	c3                   	ret    
c000ad11:	90                   	nop

c000ad12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ad12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad1a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ad1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ad27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad2b:	e9 e8 06 00 00       	jmp    c000b418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ad30 <Device::addChild(Device*)>:
c000ad30:	53                   	push   ebx
c000ad31:	83 ec 08             	sub    esp,0x8
c000ad34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ad42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ad48:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ad4a:	85 d2                	test   edx,edx
c000ad4c:	74 04                	je     c000ad52 <Device::addChild(Device*)+0x22>
c000ad4e:	89 d3                	mov    ebx,edx
c000ad50:	eb f6                	jmp    c000ad48 <Device::addChild(Device*)+0x18>
c000ad52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ad55:	83 ec 0c             	sub    esp,0xc
c000ad58:	6a 08                	push   0x8
c000ad5a:	e8 02 be ff ff       	call   c0006b61 <malloc>
c000ad5f:	89 03                	mov    DWORD PTR [ebx],eax
c000ad61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad6e:	83 c4 18             	add    esp,0x18
c000ad71:	5b                   	pop    ebx
c000ad72:	c3                   	ret    
c000ad73:	90                   	nop

c000ad74 <Device::removeAllChildren()>:
c000ad74:	56                   	push   esi
c000ad75:	53                   	push   ebx
c000ad76:	52                   	push   edx
c000ad77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ad81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad84:	74 17                	je     c000ad9d <Device::removeAllChildren()+0x29>
c000ad86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad89:	85 c0                	test   eax,eax
c000ad8b:	74 0c                	je     c000ad99 <Device::removeAllChildren()+0x25>
c000ad8d:	83 ec 0c             	sub    esp,0xc
c000ad90:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad92:	50                   	push   eax
c000ad93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ad96:	83 c4 10             	add    esp,0x10
c000ad99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad9b:	eb e4                	jmp    c000ad81 <Device::removeAllChildren()+0xd>
c000ad9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ada3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ada9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000adaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000adb6:	58                   	pop    eax
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	c3                   	ret    

c000adba <Device::hibernateAll()>:
c000adba:	53                   	push   ebx
c000adbb:	83 ec 14             	sub    esp,0x14
c000adbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adc4:	53                   	push   ebx
c000adc5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000adc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adce:	83 c4 10             	add    esp,0x10
c000add1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000add4:	74 0f                	je     c000ade5 <Device::hibernateAll()+0x2b>
c000add6:	83 ec 0c             	sub    esp,0xc
c000add9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000addc:	e8 d9 ff ff ff       	call   c000adba <Device::hibernateAll()>
c000ade1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ade3:	eb e9                	jmp    c000adce <Device::hibernateAll()+0x14>
c000ade5:	83 c4 08             	add    esp,0x8
c000ade8:	5b                   	pop    ebx
c000ade9:	c3                   	ret    

c000adea <Device::wakeAll()>:
c000adea:	53                   	push   ebx
c000adeb:	83 ec 14             	sub    esp,0x14
c000adee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adf4:	53                   	push   ebx
c000adf5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000adf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adfe:	83 c4 10             	add    esp,0x10
c000ae01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae04:	74 0f                	je     c000ae15 <Device::wakeAll()+0x2b>
c000ae06:	83 ec 0c             	sub    esp,0xc
c000ae09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae0c:	e8 d9 ff ff ff       	call   c000adea <Device::wakeAll()>
c000ae11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae13:	eb e9                	jmp    c000adfe <Device::wakeAll()+0x14>
c000ae15:	83 c4 08             	add    esp,0x8
c000ae18:	5b                   	pop    ebx
c000ae19:	c3                   	ret    

c000ae1a <Device::detectAll()>:
c000ae1a:	53                   	push   ebx
c000ae1b:	83 ec 14             	sub    esp,0x14
c000ae1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ae22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae24:	53                   	push   ebx
c000ae25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ae28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae2e:	83 c4 10             	add    esp,0x10
c000ae31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae34:	74 0f                	je     c000ae45 <Device::detectAll()+0x2b>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae3c:	e8 d9 ff ff ff       	call   c000ae1a <Device::detectAll()>
c000ae41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae43:	eb e9                	jmp    c000ae2e <Device::detectAll()+0x14>
c000ae45:	83 c4 08             	add    esp,0x8
c000ae48:	5b                   	pop    ebx
c000ae49:	c3                   	ret    

c000ae4a <Device::disableLegacyAll()>:
c000ae4a:	c3                   	ret    
c000ae4b:	90                   	nop

c000ae4c <Device::loadDriversForAll()>:
c000ae4c:	c3                   	ret    
c000ae4d:	90                   	nop

c000ae4e <Device::closeAll()>:
c000ae4e:	53                   	push   ebx
c000ae4f:	83 ec 08             	sub    esp,0x8
c000ae52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae58:	6a 00                	push   0x0
c000ae5a:	6a 00                	push   0x0
c000ae5c:	6a 00                	push   0x0
c000ae5e:	53                   	push   ebx
c000ae5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ae62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae68:	83 c4 10             	add    esp,0x10
c000ae6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae6e:	74 0f                	je     c000ae7f <Device::closeAll()+0x31>
c000ae70:	83 ec 0c             	sub    esp,0xc
c000ae73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae76:	e8 d3 ff ff ff       	call   c000ae4e <Device::closeAll()>
c000ae7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae7d:	eb e9                	jmp    c000ae68 <Device::closeAll()+0x1a>
c000ae7f:	83 c4 08             	add    esp,0x8
c000ae82:	5b                   	pop    ebx
c000ae83:	c3                   	ret    

c000ae84 <Device::powerSavingAll(PowerSavingLevel)>:
c000ae84:	56                   	push   esi
c000ae85:	53                   	push   ebx
c000ae86:	83 ec 0c             	sub    esp,0xc
c000ae89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae8d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ae91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae93:	56                   	push   esi
c000ae94:	53                   	push   ebx
c000ae95:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ae98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aea4:	74 0f                	je     c000aeb5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000aea6:	52                   	push   edx
c000aea7:	52                   	push   edx
c000aea8:	56                   	push   esi
c000aea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aeac:	e8 d3 ff ff ff       	call   c000ae84 <Device::powerSavingAll(PowerSavingLevel)>
c000aeb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aeb3:	eb e9                	jmp    c000ae9e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000aeb5:	58                   	pop    eax
c000aeb6:	5b                   	pop    ebx
c000aeb7:	5e                   	pop    esi
c000aeb8:	c3                   	ret    
c000aeb9:	90                   	nop

c000aeba <Device::setName(char const*)>:
c000aeba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000aec2:	e9 59 57 ff ff       	jmp    c0000620 <strcpy>
c000aec7:	90                   	nop

c000aec8 <Device::Device(char const*)>:
c000aec8:	83 ec 1c             	sub    esp,0x1c
c000aecb:	ba 70 d3 01 c0       	mov    edx,0xc001d370
c000aed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aed4:	89 10                	mov    DWORD PTR [eax],edx
c000aed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aeda:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000aee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aee8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000aef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aef6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000af0e:	83 ec 08             	sub    esp,0x8
c000af11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af19:	e8 9c ff ff ff       	call   c000aeba <Device::setName(char const*)>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000af29:	83 ec 0c             	sub    esp,0xc
c000af2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af30:	e8 2c bc ff ff       	call   c0006b61 <malloc>
c000af35:	83 c4 10             	add    esp,0x10
c000af38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af49:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000af4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af74:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000af7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af7f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000af86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000afa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afa6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000afb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afb4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000afbe:	90                   	nop
c000afbf:	83 c4 1c             	add    esp,0x1c
c000afc2:	c3                   	ret    
c000afc3:	90                   	nop

c000afc4 <Device::getName()>:
c000afc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afc8:	05 d0 00 00 00       	add    eax,0xd0
c000afcd:	c3                   	ret    

c000afce <DriverlessDevice::DriverlessDevice(char const*)>:
c000afce:	83 ec 0c             	sub    esp,0xc
c000afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd5:	83 ec 08             	sub    esp,0x8
c000afd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afdc:	50                   	push   eax
c000afdd:	e8 e6 fe ff ff       	call   c000aec8 <Device::Device(char const*)>
c000afe2:	83 c4 10             	add    esp,0x10
c000afe5:	ba 9c d3 01 c0       	mov    edx,0xc001d39c
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	89 10                	mov    DWORD PTR [eax],edx
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000affe:	90                   	nop
c000afff:	83 c4 0c             	add    esp,0xc
c000b002:	c3                   	ret    
c000b003:	90                   	nop

c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b004:	57                   	push   edi
c000b005:	56                   	push   esi
c000b006:	53                   	push   ebx
c000b007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b00f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b013:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b019:	75 0c                	jne    c000b027 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b01b:	52                   	push   edx
c000b01c:	52                   	push   edx
c000b01d:	53                   	push   ebx
c000b01e:	56                   	push   esi
c000b01f:	e8 ce 09 01 00       	call   c001b9f2 <LinkedList<Device>::addElement(Device*)>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b02d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b030:	74 12                	je     c000b044 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b032:	50                   	push   eax
c000b033:	57                   	push   edi
c000b034:	56                   	push   esi
c000b035:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b038:	e8 c7 ff ff ff       	call   c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b03d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	eb e9                	jmp    c000b02d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b044:	5b                   	pop    ebx
c000b045:	5e                   	pop    esi
c000b046:	5f                   	pop    edi
c000b047:	c3                   	ret    

c000b048 <getDevicesOfType(DeviceType)>:
c000b048:	53                   	push   ebx
c000b049:	83 ec 14             	sub    esp,0x14
c000b04c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b050:	53                   	push   ebx
c000b051:	e8 78 0a 01 00       	call   c001bace <LinkedList<Device>::LinkedList()>
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b05d:	53                   	push   ebx
c000b05e:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000b064:	e8 9b ff ff ff       	call   c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b069:	89 d8                	mov    eax,ebx
c000b06b:	83 c4 18             	add    esp,0x18
c000b06e:	5b                   	pop    ebx
c000b06f:	c2 04 00             	ret    0x4
c000b072:	66 90                	xchg   ax,ax

c000b074 <HardDiskController::HardDiskController(char const*)>:
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07b:	83 ec 08             	sub    esp,0x8
c000b07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b082:	50                   	push   eax
c000b083:	e8 40 fe ff ff       	call   c000aec8 <Device::Device(char const*)>
c000b088:	83 c4 10             	add    esp,0x10
c000b08b:	ba c8 d3 01 c0       	mov    edx,0xc001d3c8
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	89 10                	mov    DWORD PTR [eax],edx
c000b096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b0a4:	90                   	nop
c000b0a5:	83 c4 0c             	add    esp,0xc
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop
c000b0aa:	66 90                	xchg   ax,ax

c000b0ac <HardDiskController::~HardDiskController()>:
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	ba c8 d3 01 c0       	mov    edx,0xc001d3c8
c000b0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	50                   	push   eax
c000b0c2:	e8 6b fb ff ff       	call   c000ac32 <Device::~Device()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	90                   	nop
c000b0cb:	83 c4 0c             	add    esp,0xc
c000b0ce:	c3                   	ret    
c000b0cf:	90                   	nop

c000b0d0 <HardDiskController::~HardDiskController()>:
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0da:	e8 cd ff ff ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	83 ec 08             	sub    esp,0x8
c000b0e5:	68 58 01 00 00       	push   0x158
c000b0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0ee:	e8 07 e7 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	83 c4 0c             	add    esp,0xc
c000b0f9:	c3                   	ret    

c000b0fa <PhysicalDisk::eject()>:
c000b0fa:	83 c8 ff             	or     eax,0xffffffff
c000b0fd:	c3                   	ret    

c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b0fe:	83 ec 0c             	sub    esp,0xc
c000b101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b105:	83 ec 08             	sub    esp,0x8
c000b108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b10c:	50                   	push   eax
c000b10d:	e8 b6 fd ff ff       	call   c000aec8 <Device::Device(char const*)>
c000b112:	83 c4 10             	add    esp,0x10
c000b115:	ba f4 d3 01 c0       	mov    edx,0xc001d3f4
c000b11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11e:	89 10                	mov    DWORD PTR [eax],edx
c000b120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b124:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b14c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b156:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b160:	90                   	nop
c000b161:	83 c4 0c             	add    esp,0xc
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <PhysicalDisk::startCache()>:
c000b166:	56                   	push   esi
c000b167:	53                   	push   ebx
c000b168:	83 ec 10             	sub    esp,0x10
c000b16b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b16f:	6a 44                	push   0x44
c000b171:	e8 eb b9 ff ff       	call   c0006b61 <malloc>
c000b176:	89 c6                	mov    esi,eax
c000b178:	58                   	pop    eax
c000b179:	5a                   	pop    edx
c000b17a:	53                   	push   ebx
c000b17b:	56                   	push   esi
c000b17c:	e8 ab 15 00 00       	call   c000c72c <VCache::VCache(PhysicalDisk*)>
c000b181:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b187:	83 c4 14             	add    esp,0x14
c000b18a:	5b                   	pop    ebx
c000b18b:	5e                   	pop    esi
c000b18c:	c3                   	ret    
c000b18d:	90                   	nop

c000b18e <PhysicalDisk::~PhysicalDisk()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	ba f4 d3 01 c0       	mov    edx,0xc001d3f4
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	89 10                	mov    DWORD PTR [eax],edx
c000b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	50                   	push   eax
c000b1a4:	e8 89 fa ff ff       	call   c000ac32 <Device::~Device()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	90                   	nop
c000b1ad:	83 c4 0c             	add    esp,0xc
c000b1b0:	c3                   	ret    
c000b1b1:	90                   	nop

c000b1b2 <PhysicalDisk::~PhysicalDisk()>:
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	83 ec 0c             	sub    esp,0xc
c000b1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1bc:	e8 cd ff ff ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	83 ec 08             	sub    esp,0x8
c000b1c7:	68 6c 01 00 00       	push   0x16c
c000b1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1d0:	e8 25 e6 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000b1d5:	83 c4 10             	add    esp,0x10
c000b1d8:	83 c4 0c             	add    esp,0xc
c000b1db:	c3                   	ret    

c000b1dc <int_handler>:
c000b1dc:	55                   	push   ebp
c000b1dd:	57                   	push   edi
c000b1de:	56                   	push   esi
c000b1df:	53                   	push   ebx
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b1e7:	80 3d 20 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021d20,0x0
c000b1ee:	74 0b                	je     c000b1fb <int_handler+0x1f>
c000b1f0:	fa                   	cli    
c000b1f1:	f4                   	hlt    
c000b1f2:	80 3d 20 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021d20,0x0
c000b1f9:	75 f5                	jne    c000b1f0 <int_handler+0x14>
c000b1fb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b1fe:	8d 46 e0             	lea    eax,[esi-0x20]
c000b201:	83 f8 17             	cmp    eax,0x17
c000b204:	76 3e                	jbe    c000b244 <int_handler+0x68>
c000b206:	c1 e6 04             	shl    esi,0x4
c000b209:	31 db                	xor    ebx,ebx
c000b20b:	8d ae a0 03 02 c0    	lea    ebp,[esi-0x3ffdfc60]
c000b211:	81 c6 a0 f3 01 c0    	add    esi,0xc001f3a0
c000b217:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b21b:	85 c0                	test   eax,eax
c000b21d:	74 13                	je     c000b232 <int_handler+0x56>
c000b21f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b222:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b226:	74 2a                	je     c000b252 <int_handler+0x76>
c000b228:	83 ec 08             	sub    esp,0x8
c000b22b:	52                   	push   edx
c000b22c:	57                   	push   edi
c000b22d:	ff d0                	call   eax
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	43                   	inc    ebx
c000b233:	83 fb 04             	cmp    ebx,0x4
c000b236:	75 df                	jne    c000b217 <int_handler+0x3b>
c000b238:	83 c4 0c             	add    esp,0xc
c000b23b:	31 c0                	xor    eax,eax
c000b23d:	5b                   	pop    ebx
c000b23e:	31 d2                	xor    edx,edx
c000b240:	5e                   	pop    esi
c000b241:	5f                   	pop    edi
c000b242:	5d                   	pop    ebp
c000b243:	c3                   	ret    
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	50                   	push   eax
c000b248:	e8 cc 94 00 00       	call   c0014719 <HalEndOfInterrupt(int)>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	eb b4                	jmp    c000b206 <int_handler+0x2a>
c000b252:	83 ec 08             	sub    esp,0x8
c000b255:	52                   	push   edx
c000b256:	57                   	push   edi
c000b257:	ff d0                	call   eax
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 0c             	add    esp,0xc
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	5f                   	pop    edi
c000b262:	5d                   	pop    ebp
c000b263:	c3                   	ret    

c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b264:	56                   	push   esi
c000b265:	31 c0                	xor    eax,eax
c000b267:	53                   	push   ebx
c000b268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b26c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b270:	89 ca                	mov    edx,ecx
c000b272:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b276:	c1 e2 04             	shl    edx,0x4
c000b279:	83 bc 82 a0 03 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdfc60],0x0
c000b281:	74 15                	je     c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b283:	40                   	inc    eax
c000b284:	83 f8 04             	cmp    eax,0x4
c000b287:	75 f0                	jne    c000b279 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b289:	c7 44 24 0c 24 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d424
c000b291:	5b                   	pop    ebx
c000b292:	5e                   	pop    esi
c000b293:	e9 a7 41 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000b298:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b29b:	89 1c 85 a0 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc60],ebx
c000b2a2:	89 34 85 a0 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0c60],esi
c000b2a9:	5b                   	pop    ebx
c000b2aa:	5e                   	pop    esi
c000b2ab:	c3                   	ret    

c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b2ac:	57                   	push   edi
c000b2ad:	8b 15 a8 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2a8
c000b2b3:	56                   	push   esi
c000b2b4:	53                   	push   ebx
c000b2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b2c4:	74 5b                	je     c000b321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b2c6:	89 c7                	mov    edi,eax
c000b2c8:	84 c0                	test   al,al
c000b2ca:	74 24                	je     c000b2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b2cc:	83 fe 0f             	cmp    esi,0xf
c000b2cf:	0f 8f d9 00 00 00    	jg     c000b3ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b2d5:	8a 86 60 ec 01 c0    	mov    al,BYTE PTR [esi-0x3ffe13a0]
c000b2db:	25 ff 00 00 00       	and    eax,0xff
c000b2e0:	66 8b bc 00 40 1b 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde4c0]
c000b2e8:	89 c6                	mov    esi,eax
c000b2ea:	66 d1 ef             	shr    di,1
c000b2ed:	83 e7 01             	and    edi,0x1
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c000b2f8:	31 db                	xor    ebx,ebx
c000b2fa:	50                   	push   eax
c000b2fb:	68 31 d4 01 c0       	push   0xc001d431
c000b300:	e8 eb e5 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000b305:	83 c4 10             	add    esp,0x10
c000b308:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c000b30d:	85 c0                	test   eax,eax
c000b30f:	7f 51                	jg     c000b362 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 48 d4 01 c0       	push   0xc001d448
c000b319:	e8 21 41 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b324:	31 d2                	xor    edx,edx
c000b326:	89 c8                	mov    eax,ecx
c000b328:	c1 e0 04             	shl    eax,0x4
c000b32b:	8b 9c 90 a0 03 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdfc60]
c000b332:	85 db                	test   ebx,ebx
c000b334:	0f 84 8b 00 00 00    	je     c000b3c5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b33a:	42                   	inc    edx
c000b33b:	83 fa 04             	cmp    edx,0x4
c000b33e:	75 eb                	jne    c000b32b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b340:	83 ec 0c             	sub    esp,0xc
c000b343:	68 9c d4 01 c0       	push   0xc001d49c
c000b348:	e8 f2 40 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b355:	5b                   	pop    ebx
c000b356:	5e                   	pop    esi
c000b357:	5f                   	pop    edi
c000b358:	c3                   	ret    
c000b359:	43                   	inc    ebx
c000b35a:	39 1d 60 31 02 c0    	cmp    DWORD PTR ds:0xc0023160,ebx
c000b360:	7e af                	jle    c000b311 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b362:	83 ec 08             	sub    esp,0x8
c000b365:	8b 04 9d 80 31 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdce80]
c000b36c:	56                   	push   esi
c000b36d:	50                   	push   eax
c000b36e:	e8 a3 f6 00 00       	call   c001aa16 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	84 c0                	test   al,al
c000b378:	74 df                	je     c000b359 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b37a:	81 e7 ff 00 00 00    	and    edi,0xff
c000b380:	50                   	push   eax
c000b381:	8d 46 20             	lea    eax,[esi+0x20]
c000b384:	57                   	push   edi
c000b385:	25 ff 00 00 00       	and    eax,0xff
c000b38a:	6a 00                	push   0x0
c000b38c:	50                   	push   eax
c000b38d:	89 f0                	mov    eax,esi
c000b38f:	6a 00                	push   0x0
c000b391:	25 ff 00 00 00       	and    eax,0xff
c000b396:	6a 00                	push   0x0
c000b398:	50                   	push   eax
c000b399:	8b 04 9d 80 31 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdce80]
c000b3a0:	50                   	push   eax
c000b3a1:	e8 ea f7 00 00       	call   c001ab90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b3a6:	83 c4 20             	add    esp,0x20
c000b3a9:	e9 73 ff ff ff       	jmp    c000b321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3ae:	83 ec 0c             	sub    esp,0xc
c000b3b1:	31 ff                	xor    edi,edi
c000b3b3:	68 64 d4 01 c0       	push   0xc001d464
c000b3b8:	e8 82 40 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	e9 2b ff ff ff       	jmp    c000b2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b3c5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b3cc:	89 14 85 a0 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc60],edx
c000b3d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3d7:	5b                   	pop    ebx
c000b3d8:	89 14 85 a0 f3 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0c60],edx
c000b3df:	89 f0                	mov    eax,esi
c000b3e1:	5e                   	pop    esi
c000b3e2:	5f                   	pop    edi
c000b3e3:	c3                   	ret    

c000b3e4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b3ec:	c1 e0 04             	shl    eax,0x4
c000b3ef:	8d 50 10             	lea    edx,[eax+0x10]
c000b3f2:	39 88 a0 03 02 c0    	cmp    DWORD PTR [eax-0x3ffdfc60],ecx
c000b3f8:	74 08                	je     c000b402 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b3fa:	83 c0 04             	add    eax,0x4
c000b3fd:	39 d0                	cmp    eax,edx
c000b3ff:	75 f1                	jne    c000b3f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b401:	c3                   	ret    
c000b402:	c7 80 a0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc60],0x0
c000b40c:	c7 80 a0 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c60],0x0
c000b416:	eb e2                	jmp    c000b3fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b418:	53                   	push   ebx
c000b419:	83 ec 08             	sub    esp,0x8
c000b41c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b420:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b425:	74 0e                	je     c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b427:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000b42c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000b433:	75 37                	jne    c000b46c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b439:	83 c0 20             	add    eax,0x20
c000b43c:	c1 e0 04             	shl    eax,0x4
c000b43f:	8d 50 10             	lea    edx,[eax+0x10]
c000b442:	39 98 a0 03 02 c0    	cmp    DWORD PTR [eax-0x3ffdfc60],ebx
c000b448:	74 0c                	je     c000b456 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b44a:	83 c0 04             	add    eax,0x4
c000b44d:	39 d0                	cmp    eax,edx
c000b44f:	75 f1                	jne    c000b442 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	c7 80 a0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc60],0x0
c000b460:	c7 80 a0 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c60],0x0
c000b46a:	eb de                	jmp    c000b44a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b46c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b471:	7f 12                	jg     c000b485 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b477:	31 c0                	xor    eax,eax
c000b479:	8a 81 60 ec 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe13a0]
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	eb b0                	jmp    c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b485:	83 ec 0c             	sub    esp,0xc
c000b488:	68 55 d4 01 c0       	push   0xc001d455
c000b48d:	e8 ad 3f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b492:	83 c4 10             	add    esp,0x10
c000b495:	eb 9e                	jmp    c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b497 <setupINTS()>:
c000b497:	31 c0                	xor    eax,eax
c000b499:	c7 80 a0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc60],0x0
c000b4a3:	c7 80 a0 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c60],0x0
c000b4ad:	c7 80 a4 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc5c],0x0
c000b4b7:	c7 80 a4 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c5c],0x0
c000b4c1:	c7 80 a8 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc58],0x0
c000b4cb:	c7 80 a8 f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c58],0x0
c000b4d5:	c7 80 ac 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc54],0x0
c000b4df:	c7 80 ac f3 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0c54],0x0
c000b4e9:	83 c0 10             	add    eax,0x10
c000b4ec:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4f1:	75 a6                	jne    c000b499 <setupINTS()+0x2>
c000b4f3:	c3                   	ret    

c000b4f4 <convertLegacyIRQNumber(int)>:
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	8b 15 a8 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2a8
c000b4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b501:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b508:	74 0f                	je     c000b519 <convertLegacyIRQNumber(int)+0x25>
c000b50a:	83 f8 0f             	cmp    eax,0xf
c000b50d:	7f 0e                	jg     c000b51d <convertLegacyIRQNumber(int)+0x29>
c000b50f:	31 c9                	xor    ecx,ecx
c000b511:	8a 88 60 ec 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe13a0]
c000b517:	89 c8                	mov    eax,ecx
c000b519:	83 c4 0c             	add    esp,0xc
c000b51c:	c3                   	ret    
c000b51d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b521:	83 ec 0c             	sub    esp,0xc
c000b524:	68 64 d4 01 c0       	push   0xc001d464
c000b529:	e8 11 3f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b52e:	83 c4 10             	add    esp,0x10
c000b531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b535:	83 c4 0c             	add    esp,0xc
c000b538:	c3                   	ret    
c000b539:	90                   	nop

c000b53a <startGUI(void*)>:
c000b53a:	55                   	push   ebp
c000b53b:	89 e5                	mov    ebp,esp
c000b53d:	53                   	push   ebx
c000b53e:	83 ec 04             	sub    esp,0x4
c000b541:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b546:	48                   	dec    eax
c000b547:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000b54c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b551:	85 c0                	test   eax,eax
c000b553:	75 01                	jne    c000b556 <startGUI(void*)+0x1c>
c000b555:	fb                   	sti    
c000b556:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c000b55c:	83 ec 08             	sub    esp,0x8
c000b55f:	6a 01                	push   0x1
c000b561:	68 c1 d4 01 c0       	push   0xc001d4c1
c000b566:	e8 37 68 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 ec 08             	sub    esp,0x8
c000b571:	53                   	push   ebx
c000b572:	50                   	push   eax
c000b573:	e8 5b 6a 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 01                	push   0x1
c000b586:	68 db d4 01 c0       	push   0xc001d4db
c000b58b:	e8 12 68 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	83 ec 08             	sub    esp,0x8
c000b596:	53                   	push   ebx
c000b597:	50                   	push   eax
c000b598:	e8 36 6a 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	90                   	nop
c000b5a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b5a4:	c9                   	leave  
c000b5a5:	c3                   	ret    

c000b5a6 <startGUIVESA(void*)>:
c000b5a6:	55                   	push   ebp
c000b5a7:	89 e5                	mov    ebp,esp
c000b5a9:	53                   	push   ebx
c000b5aa:	83 ec 04             	sub    esp,0x4
c000b5ad:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b5b2:	48                   	dec    eax
c000b5b3:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000b5b8:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b5bd:	85 c0                	test   eax,eax
c000b5bf:	75 01                	jne    c000b5c2 <startGUIVESA(void*)+0x1c>
c000b5c1:	fb                   	sti    
c000b5c2:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	6a 01                	push   0x1
c000b5cd:	68 f9 d4 01 c0       	push   0xc001d4f9
c000b5d2:	e8 cb 67 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	83 ec 08             	sub    esp,0x8
c000b5dd:	53                   	push   ebx
c000b5de:	50                   	push   eax
c000b5df:	e8 ef 69 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c000b5ed:	83 ec 08             	sub    esp,0x8
c000b5f0:	6a 01                	push   0x1
c000b5f2:	68 db d4 01 c0       	push   0xc001d4db
c000b5f7:	e8 a6 67 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	83 ec 08             	sub    esp,0x8
c000b602:	53                   	push   ebx
c000b603:	50                   	push   eax
c000b604:	e8 ca 69 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000b609:	83 c4 10             	add    esp,0x10
c000b60c:	90                   	nop
c000b60d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b610:	c9                   	leave  
c000b611:	c3                   	ret    

c000b612 <sendKeyToTerminal(unsigned char)>:
c000b612:	55                   	push   ebp
c000b613:	89 e5                	mov    ebp,esp
c000b615:	83 ec 28             	sub    esp,0x28
c000b618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b61b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b61e:	8b 15 f4 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2f4
c000b624:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b627:	25 ff 00 00 00       	and    eax,0xff
c000b62c:	83 ec 08             	sub    esp,0x8
c000b62f:	50                   	push   eax
c000b630:	52                   	push   edx
c000b631:	e8 aa c8 ff ff       	call   c0007ee0 <VgaText::receiveKey(unsigned char)>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b63d:	0f 85 8f 00 00 00    	jne    c000b6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000b643:	fa                   	cli    
c000b644:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b649:	40                   	inc    eax
c000b64a:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000b64f:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c000b654:	40                   	inc    eax
c000b655:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c000b65a:	a1 a0 13 02 c0       	mov    eax,ds:0xc00213a0
c000b65f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b662:	c7 05 a0 13 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00213a0,0x0
c000b66c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b670:	74 1f                	je     c000b691 <sendKeyToTerminal(unsigned char)+0x7f>
c000b672:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b675:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b678:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b67b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b67e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b681:	83 ec 0c             	sub    esp,0xc
c000b684:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b687:	e8 cc 75 00 00       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c000b68c:	83 c4 10             	add    esp,0x10
c000b68f:	eb db                	jmp    c000b66c <sendKeyToTerminal(unsigned char)+0x5a>
c000b691:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c000b696:	48                   	dec    eax
c000b697:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c000b69c:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c000b6a1:	85 c0                	test   eax,eax
c000b6a3:	75 18                	jne    c000b6bd <sendKeyToTerminal(unsigned char)+0xab>
c000b6a5:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c000b6aa:	85 c0                	test   eax,eax
c000b6ac:	74 0f                	je     c000b6bd <sendKeyToTerminal(unsigned char)+0xab>
c000b6ae:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c000b6b8:	e8 d7 70 00 00       	call   c0012794 <schedule()>
c000b6bd:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b6c2:	48                   	dec    eax
c000b6c3:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000b6c8:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000b6cd:	85 c0                	test   eax,eax
c000b6cf:	75 01                	jne    c000b6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000b6d1:	fb                   	sti    
c000b6d2:	90                   	nop
c000b6d3:	c9                   	leave  
c000b6d4:	c3                   	ret    

c000b6d5 <sendKeyboardToken(KeyboardToken)>:
c000b6d5:	55                   	push   ebp
c000b6d6:	89 e5                	mov    ebp,esp
c000b6d8:	83 ec 18             	sub    esp,0x18
c000b6db:	e8 ab 3e 00 00       	call   c000f58b <Krnl::userIOReceived()>
c000b6e0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e6:	25 ff ff 00 00       	and    eax,0xffff
c000b6eb:	83 f2 01             	xor    edx,0x1
c000b6ee:	88 90 c0 13 02 c0    	mov    BYTE PTR [eax-0x3ffdec40],dl
c000b6f4:	a1 a8 13 02 c0       	mov    eax,ds:0xc00213a8
c000b6f9:	85 c0                	test   eax,eax
c000b6fb:	74 24                	je     c000b721 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b6fd:	8b 0d a8 13 02 c0    	mov    ecx,DWORD PTR ds:0xc00213a8
c000b703:	83 ec 04             	sub    esp,0x4
c000b706:	68 c0 13 02 c0       	push   0xc00213c0
c000b70b:	83 ec 08             	sub    esp,0x8
c000b70e:	89 e2                	mov    edx,esp
c000b710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b713:	89 02                	mov    DWORD PTR [edx],eax
c000b715:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b718:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b71c:	ff d1                	call   ecx
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b725:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b728:	a0 c8 17 02 c0       	mov    al,ds:0xc00217c8
c000b72d:	38 c2                	cmp    dl,al
c000b72f:	74 1e                	je     c000b74f <sendKeyboardToken(KeyboardToken)+0x7a>
c000b731:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b734:	a2 c8 17 02 c0       	mov    ds:0xc00217c8,al
c000b739:	a0 c8 17 02 c0       	mov    al,ds:0xc00217c8
c000b73e:	25 ff 00 00 00       	and    eax,0xff
c000b743:	83 ec 0c             	sub    esp,0xc
c000b746:	50                   	push   eax
c000b747:	e8 e6 be ff ff       	call   c0007632 <setTerminalScrollLock(bool)>
c000b74c:	83 c4 10             	add    esp,0x10
c000b74f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b752:	84 c0                	test   al,al
c000b754:	0f 84 ae 00 00 00    	je     c000b808 <sendKeyboardToken(KeyboardToken)+0x133>
c000b75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75d:	66 3d 10 03          	cmp    ax,0x310
c000b761:	75 06                	jne    c000b769 <sendKeyboardToken(KeyboardToken)+0x94>
c000b763:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76c:	66 3d 11 03          	cmp    ax,0x311
c000b770:	75 06                	jne    c000b778 <sendKeyboardToken(KeyboardToken)+0xa3>
c000b772:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77b:	66 3d 12 03          	cmp    ax,0x312
c000b77f:	75 06                	jne    c000b787 <sendKeyboardToken(KeyboardToken)+0xb2>
c000b781:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78a:	66 3d 13 03          	cmp    ax,0x313
c000b78e:	75 06                	jne    c000b796 <sendKeyboardToken(KeyboardToken)+0xc1>
c000b790:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b799:	66 3d 14 03          	cmp    ax,0x314
c000b79d:	75 06                	jne    c000b7a5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000b79f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a8:	66 3d 15 03          	cmp    ax,0x315
c000b7ac:	75 06                	jne    c000b7b4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000b7ae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b7:	66 3d 16 03          	cmp    ax,0x316
c000b7bb:	75 06                	jne    c000b7c3 <sendKeyboardToken(KeyboardToken)+0xee>
c000b7bd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c6:	66 3d 17 03          	cmp    ax,0x317
c000b7ca:	75 06                	jne    c000b7d2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000b7cc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d5:	66 3d 18 03          	cmp    ax,0x318
c000b7d9:	75 06                	jne    c000b7e1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b7db:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e4:	66 3d 19 03          	cmp    ax,0x319
c000b7e8:	75 06                	jne    c000b7f0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b7ea:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f3:	66 3d 1a 03          	cmp    ax,0x31a
c000b7f7:	0f 85 c9 00 00 00    	jne    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b7fd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b803:	e9 be 00 00 00       	jmp    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b80b:	66 3d 10 03          	cmp    ax,0x310
c000b80f:	75 0a                	jne    c000b81b <sendKeyboardToken(KeyboardToken)+0x146>
c000b811:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b817:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b81e:	66 3d 11 03          	cmp    ax,0x311
c000b822:	75 0a                	jne    c000b82e <sendKeyboardToken(KeyboardToken)+0x159>
c000b824:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b82a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b831:	66 3d 12 03          	cmp    ax,0x312
c000b835:	75 0a                	jne    c000b841 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b837:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b83d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b844:	66 3d 13 03          	cmp    ax,0x313
c000b848:	75 0a                	jne    c000b854 <sendKeyboardToken(KeyboardToken)+0x17f>
c000b84a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b850:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b857:	66 3d 14 03          	cmp    ax,0x314
c000b85b:	75 0a                	jne    c000b867 <sendKeyboardToken(KeyboardToken)+0x192>
c000b85d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b863:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b86a:	66 3d 15 03          	cmp    ax,0x315
c000b86e:	75 0a                	jne    c000b87a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b870:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b876:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b87a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b87d:	66 3d 16 03          	cmp    ax,0x316
c000b881:	75 0a                	jne    c000b88d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b883:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b889:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b890:	66 3d 17 03          	cmp    ax,0x317
c000b894:	75 0a                	jne    c000b8a0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b896:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b89c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8a3:	66 3d 18 03          	cmp    ax,0x318
c000b8a7:	75 0a                	jne    c000b8b3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000b8a9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b8af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8b6:	66 3d 19 03          	cmp    ax,0x319
c000b8ba:	75 0a                	jne    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b8bc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b8c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c9:	66 3d 00 02          	cmp    ax,0x200
c000b8cd:	75 2c                	jne    c000b8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000b8cf:	a0 c0 17 02 c0       	mov    al,ds:0xc00217c0
c000b8d4:	83 f0 01             	xor    eax,0x1
c000b8d7:	84 c0                	test   al,al
c000b8d9:	74 20                	je     c000b8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000b8db:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c000b8e0:	6a 01                	push   0x1
c000b8e2:	6a 00                	push   0x0
c000b8e4:	68 3a b5 00 c0       	push   0xc000b53a
c000b8e9:	50                   	push   eax
c000b8ea:	e8 85 6c 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c000b8ef:	83 c4 10             	add    esp,0x10
c000b8f2:	c6 05 c0 17 02 c0 01 	mov    BYTE PTR ds:0xc00217c0,0x1
c000b8f9:	eb 33                	jmp    c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8fe:	66 3d 01 02          	cmp    ax,0x201
c000b902:	75 2a                	jne    c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b904:	a0 c0 17 02 c0       	mov    al,ds:0xc00217c0
c000b909:	83 f0 01             	xor    eax,0x1
c000b90c:	84 c0                	test   al,al
c000b90e:	74 1e                	je     c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b910:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c000b915:	6a 01                	push   0x1
c000b917:	6a 00                	push   0x0
c000b919:	68 a6 b5 00 c0       	push   0xc000b5a6
c000b91e:	50                   	push   eax
c000b91f:	e8 50 6c 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	c6 05 c0 17 02 c0 01 	mov    BYTE PTR ds:0xc00217c0,0x1
c000b92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b931:	66 3d 1d 03          	cmp    ax,0x31d
c000b935:	75 06                	jne    c000b93d <sendKeyboardToken(KeyboardToken)+0x268>
c000b937:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b940:	66 3d 1c 03          	cmp    ax,0x31c
c000b944:	75 06                	jne    c000b94c <sendKeyboardToken(KeyboardToken)+0x277>
c000b946:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b94f:	66 3d 1b 03          	cmp    ax,0x31b
c000b953:	75 06                	jne    c000b95b <sendKeyboardToken(KeyboardToken)+0x286>
c000b955:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b95e:	66 3d 1e 03          	cmp    ax,0x31e
c000b962:	75 06                	jne    c000b96a <sendKeyboardToken(KeyboardToken)+0x295>
c000b964:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b96d:	66 3d 1f 03          	cmp    ax,0x31f
c000b971:	75 06                	jne    c000b979 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000b973:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97c:	66 3d 1a 03          	cmp    ax,0x31a
c000b980:	75 06                	jne    c000b988 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000b982:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b988:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b98c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b98f:	83 f0 01             	xor    eax,0x1
c000b992:	84 c0                	test   al,al
c000b994:	74 7b                	je     c000ba11 <sendKeyboardToken(KeyboardToken)+0x33c>
c000b996:	a0 c1 14 02 c0       	mov    al,ds:0xc00214c1
c000b99b:	84 c0                	test   al,al
c000b99d:	74 43                	je     c000b9e2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000b99f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b9a3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b9a7:	74 2d                	je     c000b9d6 <sendKeyboardToken(KeyboardToken)+0x301>
c000b9a9:	8b 15 c4 17 02 c0    	mov    edx,DWORD PTR ds:0xc00217c4
c000b9af:	89 d0                	mov    eax,edx
c000b9b1:	c1 e0 02             	shl    eax,0x2
c000b9b4:	01 d0                	add    eax,edx
c000b9b6:	01 c0                	add    eax,eax
c000b9b8:	a3 c4 17 02 c0       	mov    ds:0xc00217c4,eax
c000b9bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c0:	25 ff ff 00 00       	and    eax,0xffff
c000b9c5:	8d 50 d0             	lea    edx,[eax-0x30]
c000b9c8:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c000b9cd:	01 d0                	add    eax,edx
c000b9cf:	a3 c4 17 02 c0       	mov    ds:0xc00217c4,eax
c000b9d4:	eb 71                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9d6:	c7 05 c4 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00217c4,0x0
c000b9e0:	eb 65                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9e2:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c000b9e7:	85 c0                	test   eax,eax
c000b9e9:	74 1a                	je     c000ba05 <sendKeyboardToken(KeyboardToken)+0x330>
c000b9eb:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c000b9f0:	25 ff 00 00 00       	and    eax,0xff
c000b9f5:	83 ec 0c             	sub    esp,0xc
c000b9f8:	50                   	push   eax
c000b9f9:	e8 14 fc ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000b9fe:	83 c4 10             	add    esp,0x10
c000ba01:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba05:	c7 05 c4 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00217c4,0x0
c000ba0f:	eb 36                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000ba11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba14:	66 3d 01 01          	cmp    ax,0x101
c000ba18:	75 2d                	jne    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000ba1a:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	74 1a                	je     c000ba3d <sendKeyboardToken(KeyboardToken)+0x368>
c000ba23:	a1 c4 17 02 c0       	mov    eax,ds:0xc00217c4
c000ba28:	25 ff 00 00 00       	and    eax,0xff
c000ba2d:	83 ec 0c             	sub    esp,0xc
c000ba30:	50                   	push   eax
c000ba31:	e8 dc fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba3d:	c7 05 c4 17 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00217c4,0x0
c000ba47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ba4a:	83 f0 01             	xor    eax,0x1
c000ba4d:	84 c0                	test   al,al
c000ba4f:	74 4e                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba51:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba54:	83 f0 01             	xor    eax,0x1
c000ba57:	84 c0                	test   al,al
c000ba59:	74 44                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba5b:	a0 c0 14 02 c0       	mov    al,ds:0xc00214c0
c000ba60:	83 f0 01             	xor    eax,0x1
c000ba63:	84 c0                	test   al,al
c000ba65:	74 38                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba6a:	66 83 f8 1f          	cmp    ax,0x1f
c000ba6e:	76 09                	jbe    c000ba79 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000ba70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba73:	66 83 f8 7e          	cmp    ax,0x7e
c000ba77:	76 12                	jbe    c000ba8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba7c:	66 83 f8 0a          	cmp    ax,0xa
c000ba80:	74 09                	je     c000ba8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba85:	66 83 f8 08          	cmp    ax,0x8
c000ba89:	75 14                	jne    c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba8e:	25 ff 00 00 00       	and    eax,0xff
c000ba93:	83 ec 0c             	sub    esp,0xc
c000ba96:	50                   	push   eax
c000ba97:	e8 76 fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000ba9c:	83 c4 10             	add    esp,0x10
c000ba9f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000baa2:	83 f0 01             	xor    eax,0x1
c000baa5:	84 c0                	test   al,al
c000baa7:	74 51                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000baa9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000baac:	83 f0 01             	xor    eax,0x1
c000baaf:	84 c0                	test   al,al
c000bab1:	74 47                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bab3:	a0 c0 14 02 c0       	mov    al,ds:0xc00214c0
c000bab8:	84 c0                	test   al,al
c000baba:	74 3e                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000babc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000babf:	66 83 f8 3f          	cmp    ax,0x3f
c000bac3:	76 35                	jbe    c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bac8:	66 83 f8 7f          	cmp    ax,0x7f
c000bacc:	77 2c                	ja     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bad1:	88 c2                	mov    dl,al
c000bad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bad6:	66 83 f8 5f          	cmp    ax,0x5f
c000bada:	76 04                	jbe    c000bae0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000badc:	b0 20                	mov    al,0x20
c000bade:	eb 02                	jmp    c000bae2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000bae0:	b0 00                	mov    al,0x0
c000bae2:	29 c2                	sub    edx,eax
c000bae4:	88 d0                	mov    al,dl
c000bae6:	83 e8 40             	sub    eax,0x40
c000bae9:	25 ff 00 00 00       	and    eax,0xff
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	50                   	push   eax
c000baf2:	e8 1b fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bafd:	66 3d 00 03          	cmp    ax,0x300
c000bb01:	75 0f                	jne    c000bb12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb03:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb06:	83 f0 01             	xor    eax,0x1
c000bb09:	84 c0                	test   al,al
c000bb0b:	74 05                	je     c000bb12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb0d:	e8 21 bb ff ff       	call   c0007633 <doTerminalCycle()>
c000bb12:	90                   	nop
c000bb13:	c9                   	leave  
c000bb14:	c3                   	ret    

c000bb15 <clearInternalKeybuffer(VgaText*)>:
c000bb15:	55                   	push   ebp
c000bb16:	89 e5                	mov    ebp,esp
c000bb18:	83 ec 08             	sub    esp,0x8
c000bb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb1e:	05 b2 00 00 00       	add    eax,0xb2
c000bb23:	83 ec 0c             	sub    esp,0xc
c000bb26:	50                   	push   eax
c000bb27:	e8 34 4a ff ff       	call   c0000560 <strlen>
c000bb2c:	83 c4 10             	add    esp,0x10
c000bb2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bb32:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bb38:	83 ec 04             	sub    esp,0x4
c000bb3b:	50                   	push   eax
c000bb3c:	6a 00                	push   0x0
c000bb3e:	52                   	push   edx
c000bb3f:	e8 ac 49 ff ff       	call   c00004f0 <memset>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	90                   	nop
c000bb48:	c9                   	leave  
c000bb49:	c3                   	ret    

c000bb4a <readKeyboard(VgaText*, char*, unsigned long)>:
c000bb4a:	55                   	push   ebp
c000bb4b:	89 e5                	mov    ebp,esp
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	a1 a8 13 02 c0       	mov    eax,ds:0xc00213a8
c000bb55:	85 c0                	test   eax,eax
c000bb57:	74 2a                	je     c000bb83 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bb59:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bb5f:	8b 0d a8 13 02 c0    	mov    ecx,DWORD PTR ds:0xc00213a8
c000bb65:	83 ec 04             	sub    esp,0x4
c000bb68:	68 c0 13 02 c0       	push   0xc00213c0
c000bb6d:	83 ec 08             	sub    esp,0x8
c000bb70:	89 e2                	mov    edx,esp
c000bb72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bb75:	89 02                	mov    DWORD PTR [edx],eax
c000bb77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bb7a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bb7e:	ff d1                	call   ecx
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	fb                   	sti    
c000bb84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bb8b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bb8f:	0f 84 a1 00 00 00    	je     c000bc36 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bb95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb98:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bb9e:	84 c0                	test   al,al
c000bba0:	75 28                	jne    c000bbca <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bba2:	fa                   	cli    
c000bba3:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000bba8:	40                   	inc    eax
c000bba9:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000bbae:	e8 e1 6b 00 00       	call   c0012794 <schedule()>
c000bbb3:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000bbb8:	48                   	dec    eax
c000bbb9:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000bbbe:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000bbc3:	85 c0                	test   eax,eax
c000bbc5:	75 ce                	jne    c000bb95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbc7:	fb                   	sti    
c000bbc8:	eb cb                	jmp    c000bb95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bbcd:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bbd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bbd6:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bbdc:	88 10                	mov    BYTE PTR [eax],dl
c000bbde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbe1:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bbe7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bbea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbed:	05 b2 00 00 00       	add    eax,0xb2
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	50                   	push   eax
c000bbf6:	e8 65 49 ff ff       	call   c0000560 <strlen>
c000bbfb:	83 c4 10             	add    esp,0x10
c000bbfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc01:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc07:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bc0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc0d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc13:	83 ec 04             	sub    esp,0x4
c000bc16:	50                   	push   eax
c000bc17:	51                   	push   ecx
c000bc18:	52                   	push   edx
c000bc19:	e8 e2 47 ff ff       	call   c0000400 <memmove>
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bc24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bc27:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bc2b:	0f 85 5a ff ff ff    	jne    c000bb8b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bc31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc34:	eb 03                	jmp    c000bc39 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bc36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc39:	c9                   	leave  
c000bc3a:	c3                   	ret    
c000bc3b:	90                   	nop

c000bc3c <Keyboard::Keyboard(char const*)>:
c000bc3c:	83 ec 0c             	sub    esp,0xc
c000bc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc43:	83 ec 08             	sub    esp,0x8
c000bc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4a:	50                   	push   eax
c000bc4b:	e8 78 f2 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	ba 1c d5 01 c0       	mov    edx,0xc001d51c
c000bc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc5c:	89 10                	mov    DWORD PTR [eax],edx
c000bc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bc6c:	c6 05 a4 13 02 c0 01 	mov    BYTE PTR ds:0xc00213a4,0x1
c000bc73:	90                   	nop
c000bc74:	83 c4 0c             	add    esp,0xc
c000bc77:	c3                   	ret    

c000bc78 <Keyboard::~Keyboard()>:
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	ba 1c d5 01 c0       	mov    edx,0xc001d51c
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	89 10                	mov    DWORD PTR [eax],edx
c000bc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8a:	83 ec 0c             	sub    esp,0xc
c000bc8d:	50                   	push   eax
c000bc8e:	e8 9f ef ff ff       	call   c000ac32 <Device::~Device()>
c000bc93:	83 c4 10             	add    esp,0x10
c000bc96:	90                   	nop
c000bc97:	83 c4 0c             	add    esp,0xc
c000bc9a:	c3                   	ret    
c000bc9b:	90                   	nop

c000bc9c <Keyboard::~Keyboard()>:
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	83 ec 0c             	sub    esp,0xc
c000bca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca6:	e8 cd ff ff ff       	call   c000bc78 <Keyboard::~Keyboard()>
c000bcab:	83 c4 10             	add    esp,0x10
c000bcae:	83 ec 08             	sub    esp,0x8
c000bcb1:	68 5c 01 00 00       	push   0x15c
c000bcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcba:	e8 3b db ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	83 c4 0c             	add    esp,0xc
c000bcc5:	c3                   	ret    

c000bcc6 <LogicalDisk::close(int, int, void*)>:
c000bcc6:	83 c8 ff             	or     eax,0xffffffff
c000bcc9:	c3                   	ret    

c000bcca <LogicalDisk::~LogicalDisk()>:
c000bcca:	83 ec 0c             	sub    esp,0xc
c000bccd:	ba 94 d5 01 c0       	mov    edx,0xc001d594
c000bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd6:	89 10                	mov    DWORD PTR [eax],edx
c000bcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	50                   	push   eax
c000bce0:	e8 4d ef ff ff       	call   c000ac32 <Device::~Device()>
c000bce5:	83 c4 10             	add    esp,0x10
c000bce8:	90                   	nop
c000bce9:	83 c4 0c             	add    esp,0xc
c000bcec:	c3                   	ret    
c000bced:	90                   	nop

c000bcee <LogicalDisk::~LogicalDisk()>:
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	83 ec 0c             	sub    esp,0xc
c000bcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf8:	e8 cd ff ff ff       	call   c000bcca <LogicalDisk::~LogicalDisk()>
c000bcfd:	83 c4 10             	add    esp,0x10
c000bd00:	83 ec 08             	sub    esp,0x8
c000bd03:	68 74 01 00 00       	push   0x174
c000bd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd0c:	e8 e9 da ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000bd11:	83 c4 10             	add    esp,0x10
c000bd14:	83 c4 0c             	add    esp,0xc
c000bd17:	c3                   	ret    

c000bd18 <LogicalDisk::open(int, int, void*)>:
c000bd18:	83 ec 18             	sub    esp,0x18
c000bd1b:	68 48 d5 01 c0       	push   0xc001d548
c000bd20:	e8 1a 37 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000bd25:	83 c8 ff             	or     eax,0xffffffff
c000bd28:	83 c4 1c             	add    esp,0x1c
c000bd2b:	c3                   	ret    

c000bd2c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000bd2c:	53                   	push   ebx
c000bd2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd39:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bd3f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bd45:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bd4b:	77 10                	ja     c000bd5d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bd4d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bd53:	89 d3                	mov    ebx,edx
c000bd55:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bd5b:	72 05                	jb     c000bd62 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bd5d:	83 c8 ff             	or     eax,0xffffffff
c000bd60:	89 c2                	mov    edx,eax
c000bd62:	5b                   	pop    ebx
c000bd63:	c3                   	ret    

c000bd64 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bd64:	56                   	push   esi
c000bd65:	83 c8 ff             	or     eax,0xffffffff
c000bd68:	53                   	push   ebx
c000bd69:	89 c2                	mov    edx,eax
c000bd6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bd7d:	77 27                	ja     c000bda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd7f:	89 d8                	mov    eax,ebx
c000bd81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bd87:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bd8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bd92:	89 c2                	mov    edx,eax
c000bd94:	73 10                	jae    c000bda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd96:	89 c8                	mov    eax,ecx
c000bd98:	89 da                	mov    edx,ebx
c000bd9a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bda0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bda6:	5b                   	pop    ebx
c000bda7:	5e                   	pop    esi
c000bda8:	c3                   	ret    
c000bda9:	90                   	nop

c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bdaa:	83 ec 1c             	sub    esp,0x1c
c000bdad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bdc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdd0:	83 ec 08             	sub    esp,0x8
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	50                   	push   eax
c000bdd8:	e8 eb f0 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	ba 94 d5 01 c0       	mov    edx,0xc001d594
c000bde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bde9:	89 10                	mov    DWORD PTR [eax],edx
c000bdeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdfa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be05:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000be0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be1b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000be21:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000be27:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000be2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000be32:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000be38:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000be3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be46:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000be4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be50:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000be5a:	90                   	nop
c000be5b:	83 c4 1c             	add    esp,0x1c
c000be5e:	c3                   	ret    
c000be5f:	90                   	nop

c000be60 <LogicalDisk::assignDriveLetter()>:
c000be60:	55                   	push   ebp
c000be61:	57                   	push   edi
c000be62:	56                   	push   esi
c000be63:	53                   	push   ebx
c000be64:	83 ec 14             	sub    esp,0x14
c000be67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be6b:	8b 3d e0 17 02 c0    	mov    edi,DWORD PTR ds:0xc00217e0
c000be71:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000be77:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000be7b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000be81:	8b 3d e4 17 02 c0    	mov    edi,DWORD PTR ds:0xc00217e4
c000be87:	3c 01                	cmp    al,0x1
c000be89:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000be8d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000be91:	19 c0                	sbb    eax,eax
c000be93:	83 e0 02             	and    eax,0x2
c000be96:	83 c0 41             	add    eax,0x41
c000be99:	0f be e8             	movsx  ebp,al
c000be9c:	3c 43                	cmp    al,0x43
c000be9e:	75 10                	jne    c000beb0 <LogicalDisk::assignDriveLetter()+0x50>
c000bea0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bea7:	75 5d                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000bea9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000beae:	75 56                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000beb0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000beb3:	ba 01 00 00 00       	mov    edx,0x1
c000beb8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bebc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bec0:	d3 e2                	shl    edx,cl
c000bec2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bec6:	89 d7                	mov    edi,edx
c000bec8:	89 d6                	mov    esi,edx
c000beca:	c1 ff 1f             	sar    edi,0x1f
c000becd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bed1:	21 f9                	and    ecx,edi
c000bed3:	09 d1                	or     ecx,edx
c000bed5:	75 2f                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000bed7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bedf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bee5:	09 f2                	or     edx,esi
c000bee7:	89 15 e0 17 02 c0    	mov    DWORD PTR ds:0xc00217e0,edx
c000beed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bef1:	09 fa                	or     edx,edi
c000bef3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bef7:	89 15 e4 17 02 c0    	mov    DWORD PTR ds:0xc00217e4,edx
c000befd:	89 1c bd 00 18 02 c0 	mov    DWORD PTR [edi*4-0x3ffde800],ebx
c000bf04:	eb 08                	jmp    c000bf0e <LogicalDisk::assignDriveLetter()+0xae>
c000bf06:	45                   	inc    ebp
c000bf07:	40                   	inc    eax
c000bf08:	3c 5b                	cmp    al,0x5b
c000bf0a:	75 90                	jne    c000be9c <LogicalDisk::assignDriveLetter()+0x3c>
c000bf0c:	31 c0                	xor    eax,eax
c000bf0e:	83 c4 14             	add    esp,0x14
c000bf11:	5b                   	pop    ebx
c000bf12:	5e                   	pop    esi
c000bf13:	5f                   	pop    edi
c000bf14:	5d                   	pop    ebp
c000bf15:	c3                   	ret    

c000bf16 <LogicalDisk::mount()>:
c000bf16:	56                   	push   esi
c000bf17:	53                   	push   ebx
c000bf18:	53                   	push   ebx
c000bf19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf1d:	8b 1d 94 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f394
c000bf23:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bf2d:	85 db                	test   ebx,ebx
c000bf2f:	74 27                	je     c000bf58 <LogicalDisk::mount()+0x42>
c000bf31:	51                   	push   ecx
c000bf32:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bf39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf3b:	83 e8 41             	sub    eax,0x41
c000bf3e:	50                   	push   eax
c000bf3f:	56                   	push   esi
c000bf40:	53                   	push   ebx
c000bf41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bf44:	83 c4 10             	add    esp,0x10
c000bf47:	84 c0                	test   al,al
c000bf49:	74 08                	je     c000bf53 <LogicalDisk::mount()+0x3d>
c000bf4b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bf51:	eb 07                	jmp    c000bf5a <LogicalDisk::mount()+0x44>
c000bf53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000bf56:	eb d5                	jmp    c000bf2d <LogicalDisk::mount()+0x17>
c000bf58:	31 c0                	xor    eax,eax
c000bf5a:	5a                   	pop    edx
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	c3                   	ret    

c000bf5e <LogicalDisk::unmount()>:
c000bf5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf62:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf6c:	c3                   	ret    
c000bf6d:	90                   	nop

c000bf6e <LogicalDisk::eject()>:
c000bf6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bf78:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf7e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000bf81:	90                   	nop

c000bf82 <LogicalDisk::unassignDriveLetter()>:
c000bf82:	57                   	push   edi
c000bf83:	56                   	push   esi
c000bf84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf88:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000bf8f:	84 c9                	test   cl,cl
c000bf91:	75 0f                	jne    c000bfa2 <LogicalDisk::unassignDriveLetter()+0x20>
c000bf93:	c7 44 24 0c 6c d5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d56c
c000bf9b:	5e                   	pop    esi
c000bf9c:	5f                   	pop    edi
c000bf9d:	e9 9d 34 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000bfa2:	83 e9 41             	sub    ecx,0x41
c000bfa5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000bfac:	b8 01 00 00 00       	mov    eax,0x1
c000bfb1:	c7 04 8d 00 18 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde800],0x0
c000bfbc:	d3 e0                	shl    eax,cl
c000bfbe:	89 c7                	mov    edi,eax
c000bfc0:	f7 d0                	not    eax
c000bfc2:	c1 ff 1f             	sar    edi,0x1f
c000bfc5:	21 05 e0 17 02 c0    	and    DWORD PTR ds:0xc00217e0,eax
c000bfcb:	89 fe                	mov    esi,edi
c000bfcd:	f7 d6                	not    esi
c000bfcf:	21 35 e4 17 02 c0    	and    DWORD PTR ds:0xc00217e4,esi
c000bfd5:	5e                   	pop    esi
c000bfd6:	5f                   	pop    edi
c000bfd7:	c3                   	ret    

c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000bfd8:	57                   	push   edi
c000bfd9:	56                   	push   esi
c000bfda:	53                   	push   ebx
c000bfdb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfe3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bfe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bfeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bff1:	77 41                	ja     c000c034 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000bff3:	99                   	cdq    
c000bff4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bffa:	01 c8                	add    eax,ecx
c000bffc:	11 da                	adc    edx,ebx
c000bffe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c004:	19 d7                	sbb    edi,edx
c000c006:	72 33                	jb     c000c03b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c008:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c00e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c018:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c01c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c02c:	5b                   	pop    ebx
c000c02d:	5e                   	pop    esi
c000c02e:	5f                   	pop    edi
c000c02f:	e9 32 0a 00 00       	jmp    c000ca66 <VCache::read(unsigned long long, int, void*)>
c000c034:	b8 05 00 00 00       	mov    eax,0x5
c000c039:	eb 05                	jmp    c000c040 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c03b:	b8 07 00 00 00       	mov    eax,0x7
c000c040:	5b                   	pop    ebx
c000c041:	5e                   	pop    esi
c000c042:	5f                   	pop    edi
c000c043:	c3                   	ret    

c000c044 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c044:	57                   	push   edi
c000c045:	56                   	push   esi
c000c046:	53                   	push   ebx
c000c047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c04f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c057:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c05d:	77 41                	ja     c000c0a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c05f:	99                   	cdq    
c000c060:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c066:	01 c8                	add    eax,ecx
c000c068:	11 da                	adc    edx,ebx
c000c06a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c070:	19 d7                	sbb    edi,edx
c000c072:	72 33                	jb     c000c0a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c074:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c07a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c080:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c084:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c088:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c098:	5b                   	pop    ebx
c000c099:	5e                   	pop    esi
c000c09a:	5f                   	pop    edi
c000c09b:	e9 cc 08 00 00       	jmp    c000c96c <VCache::write(unsigned long long, int, void*)>
c000c0a0:	b8 05 00 00 00       	mov    eax,0x5
c000c0a5:	eb 05                	jmp    c000c0ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c0a7:	b8 07 00 00 00       	mov    eax,0x7
c000c0ac:	5b                   	pop    ebx
c000c0ad:	5e                   	pop    esi
c000c0ae:	5f                   	pop    edi
c000c0af:	c3                   	ret    

c000c0b0 <Mouse::Mouse(char const*)>:
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b7:	83 ec 08             	sub    esp,0x8
c000c0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0be:	50                   	push   eax
c000c0bf:	e8 04 ee ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	ba c0 d5 01 c0       	mov    edx,0xc001d5c0
c000c0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d0:	89 10                	mov    DWORD PTR [eax],edx
c000c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c0e0:	90                   	nop
c000c0e1:	83 c4 0c             	add    esp,0xc
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop
c000c0e6:	66 90                	xchg   ax,ax

c000c0e8 <Mouse::~Mouse()>:
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ba c0 d5 01 c0       	mov    edx,0xc001d5c0
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	50                   	push   eax
c000c0fe:	e8 2f eb ff ff       	call   c000ac32 <Device::~Device()>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	90                   	nop
c000c107:	83 c4 0c             	add    esp,0xc
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <Mouse::~Mouse()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 cd ff ff ff       	call   c000c0e8 <Mouse::~Mouse()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	68 58 01 00 00       	push   0x158
c000c126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12a:	e8 cb d6 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	c3                   	ret    

c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c136:	55                   	push   ebp
c000c137:	57                   	push   edi
c000c138:	56                   	push   esi
c000c139:	53                   	push   ebx
c000c13a:	81 ec 28 01 00 00    	sub    esp,0x128
c000c140:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c147:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c14e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c155:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c15c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c160:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c164:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c16b:	e8 54 ee ff ff       	call   c000afc4 <Device::getName()>
c000c170:	5a                   	pop    edx
c000c171:	59                   	pop    ecx
c000c172:	50                   	push   eax
c000c173:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c177:	55                   	push   ebp
c000c178:	e8 a3 44 ff ff       	call   c0000620 <strcpy>
c000c17d:	5b                   	pop    ebx
c000c17e:	58                   	pop    eax
c000c17f:	68 e4 d5 01 c0       	push   0xc001d5e4
c000c184:	55                   	push   ebp
c000c185:	e8 56 46 ff ff       	call   c00007e0 <strcat>
c000c18a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c191:	e8 cb a9 ff ff       	call   c0006b61 <malloc>
c000c196:	83 c4 0c             	add    esp,0xc
c000c199:	89 c3                	mov    ebx,eax
c000c19b:	57                   	push   edi
c000c19c:	56                   	push   esi
c000c19d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c1ac:	55                   	push   ebp
c000c1ad:	50                   	push   eax
c000c1ae:	e8 f7 fb ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c1b3:	83 c4 14             	add    esp,0x14
c000c1b6:	53                   	push   ebx
c000c1b7:	e8 a4 fc ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c000c1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1bf:	e8 52 fd ff ff       	call   c000bf16 <LogicalDisk::mount()>
c000c1c4:	58                   	pop    eax
c000c1c5:	5a                   	pop    edx
c000c1c6:	53                   	push   ebx
c000c1c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c1ce:	e8 5d eb ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000c1d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c1d9:	5b                   	pop    ebx
c000c1da:	5e                   	pop    esi
c000c1db:	5f                   	pop    edi
c000c1dc:	5d                   	pop    ebp
c000c1dd:	c3                   	ret    

c000c1de <createPartitionsForDisk(PhysicalDisk*)>:
c000c1de:	55                   	push   ebp
c000c1df:	57                   	push   edi
c000c1e0:	56                   	push   esi
c000c1e1:	53                   	push   ebx
c000c1e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c1e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c1ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c1f5:	3d 00 02 00 00       	cmp    eax,0x200
c000c1fa:	74 27                	je     c000c223 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c1fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c202:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c208:	83 ec 10             	sub    esp,0x10
c000c20b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c20f:	99                   	cdq    
c000c210:	c1 e6 0a             	shl    esi,0xa
c000c213:	52                   	push   edx
c000c214:	89 fd                	mov    ebp,edi
c000c216:	50                   	push   eax
c000c217:	55                   	push   ebp
c000c218:	56                   	push   esi
c000c219:	e8 22 f3 00 00       	call   c001b540 <__udivdi3>
c000c21e:	e9 b1 00 00 00       	jmp    c000c2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c223:	83 ec 0c             	sub    esp,0xc
c000c226:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c228:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c22c:	56                   	push   esi
c000c22d:	6a 01                	push   0x1
c000c22f:	6a 00                	push   0x0
c000c231:	6a 00                	push   0x0
c000c233:	53                   	push   ebx
c000c234:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c237:	83 c4 20             	add    esp,0x20
c000c23a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c242:	75 0a                	jne    c000c24e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c244:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c24c:	74 2c                	je     c000c27a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c24e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c254:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c25a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c260:	83 ec 10             	sub    esp,0x10
c000c263:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c267:	89 f7                	mov    edi,esi
c000c269:	c1 e0 0a             	shl    eax,0xa
c000c26c:	c1 ff 1f             	sar    edi,0x1f
c000c26f:	57                   	push   edi
c000c270:	56                   	push   esi
c000c271:	52                   	push   edx
c000c272:	50                   	push   eax
c000c273:	e8 c8 f2 00 00       	call   c001b540 <__udivdi3>
c000c278:	eb 5a                	jmp    c000c2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c27a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c281:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c288:	83 e1 7f             	and    ecx,0x7f
c000c28b:	83 e0 7f             	and    eax,0x7f
c000c28e:	01 c1                	add    ecx,eax
c000c290:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c297:	83 e0 7f             	and    eax,0x7f
c000c29a:	01 c1                	add    ecx,eax
c000c29c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c2a3:	83 e0 7f             	and    eax,0x7f
c000c2a6:	00 c1                	add    cl,al
c000c2a8:	74 41                	je     c000c2eb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c2aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c2b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c2b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c2bc:	83 ec 10             	sub    esp,0x10
c000c2bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c2c3:	89 f7                	mov    edi,esi
c000c2c5:	c1 e0 0a             	shl    eax,0xa
c000c2c8:	c1 ff 1f             	sar    edi,0x1f
c000c2cb:	57                   	push   edi
c000c2cc:	56                   	push   esi
c000c2cd:	52                   	push   edx
c000c2ce:	50                   	push   eax
c000c2cf:	e8 6c f2 00 00       	call   c001b540 <__udivdi3>
c000c2d4:	83 c4 14             	add    esp,0x14
c000c2d7:	52                   	push   edx
c000c2d8:	50                   	push   eax
c000c2d9:	6a 00                	push   0x0
c000c2db:	6a 00                	push   0x0
c000c2dd:	53                   	push   ebx
c000c2de:	e8 53 fe ff ff       	call   c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	e9 79 01 00 00       	jmp    c000c464 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c2eb:	89 f0                	mov    eax,esi
c000c2ed:	31 f6                	xor    esi,esi
c000c2ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c2f6:	75 02                	jne    c000c2fa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c2f8:	89 f1                	mov    ecx,esi
c000c2fa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c301:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c308:	c1 e2 08             	shl    edx,0x8
c000c30b:	c1 e7 10             	shl    edi,0x10
c000c30e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c316:	09 fa                	or     edx,edi
c000c318:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c320:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c327:	83 c0 10             	add    eax,0x10
c000c32a:	09 fa                	or     edx,edi
c000c32c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c333:	c1 e7 18             	shl    edi,0x18
c000c336:	09 fa                	or     edx,edi
c000c338:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c33f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c343:	c1 e7 10             	shl    edi,0x10
c000c346:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c34d:	c1 e2 08             	shl    edx,0x8
c000c350:	09 fa                	or     edx,edi
c000c352:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c359:	09 fa                	or     edx,edi
c000c35b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c362:	c1 e7 18             	shl    edi,0x18
c000c365:	09 fa                	or     edx,edi
c000c367:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c36b:	46                   	inc    esi
c000c36c:	83 fe 04             	cmp    esi,0x4
c000c36f:	0f 85 7a ff ff ff    	jne    c000c2ef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c379:	83 f0 01             	xor    eax,0x1
c000c37c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c380:	75 57                	jne    c000c3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c382:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c386:	83 f0 01             	xor    eax,0x1
c000c389:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c38d:	75 4a                	jne    c000c3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c38f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c393:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c39b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c3a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c3a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c3af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3b9:	89 f7                	mov    edi,esi
c000c3bb:	c1 e0 0a             	shl    eax,0xa
c000c3be:	c1 ff 1f             	sar    edi,0x1f
c000c3c1:	57                   	push   edi
c000c3c2:	56                   	push   esi
c000c3c3:	52                   	push   edx
c000c3c4:	50                   	push   eax
c000c3c5:	e8 76 f1 00 00       	call   c001b540 <__udivdi3>
c000c3ca:	83 c4 10             	add    esp,0x10
c000c3cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c3d9:	84 c9                	test   cl,cl
c000c3db:	74 53                	je     c000c430 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c3dd:	0f b6 c9             	movzx  ecx,cl
c000c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c3e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3ec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3f8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c3fc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c410:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c414:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c418:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c41c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c420:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c424:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c428:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c42c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c430:	31 ed                	xor    ebp,ebp
c000c432:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c436:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c43a:	89 f8                	mov    eax,edi
c000c43c:	09 f0                	or     eax,esi
c000c43e:	74 1e                	je     c000c45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c440:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c444:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c448:	89 d1                	mov    ecx,edx
c000c44a:	09 c1                	or     ecx,eax
c000c44c:	74 10                	je     c000c45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c44e:	83 ec 0c             	sub    esp,0xc
c000c451:	57                   	push   edi
c000c452:	56                   	push   esi
c000c453:	52                   	push   edx
c000c454:	50                   	push   eax
c000c455:	53                   	push   ebx
c000c456:	e8 db fc ff ff       	call   c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c45b:	83 c4 20             	add    esp,0x20
c000c45e:	45                   	inc    ebp
c000c45f:	83 fd 04             	cmp    ebp,0x4
c000c462:	75 ce                	jne    c000c432 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c464:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c46a:	5b                   	pop    ebx
c000c46b:	5e                   	pop    esi
c000c46c:	5f                   	pop    edi
c000c46d:	5d                   	pop    ebp
c000c46e:	c3                   	ret    
c000c46f:	90                   	nop

c000c470 <Serial::Serial(char const*)>:
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c477:	83 ec 08             	sub    esp,0x8
c000c47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c47e:	50                   	push   eax
c000c47f:	e8 44 ea ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c484:	83 c4 10             	add    esp,0x10
c000c487:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c000c48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c490:	89 10                	mov    DWORD PTR [eax],edx
c000c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c496:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c4a0:	90                   	nop
c000c4a1:	83 c4 0c             	add    esp,0xc
c000c4a4:	c3                   	ret    
c000c4a5:	90                   	nop
c000c4a6:	66 90                	xchg   ax,ax

c000c4a8 <Serial::~Serial()>:
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c000c4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b4:	89 10                	mov    DWORD PTR [eax],edx
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	83 ec 0c             	sub    esp,0xc
c000c4bd:	50                   	push   eax
c000c4be:	e8 6f e7 ff ff       	call   c000ac32 <Device::~Device()>
c000c4c3:	83 c4 10             	add    esp,0x10
c000c4c6:	90                   	nop
c000c4c7:	83 c4 0c             	add    esp,0xc
c000c4ca:	c3                   	ret    
c000c4cb:	90                   	nop

c000c4cc <Serial::~Serial()>:
c000c4cc:	83 ec 0c             	sub    esp,0xc
c000c4cf:	83 ec 0c             	sub    esp,0xc
c000c4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d6:	e8 cd ff ff ff       	call   c000c4a8 <Serial::~Serial()>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	83 ec 08             	sub    esp,0x8
c000c4e1:	68 58 01 00 00       	push   0x158
c000c4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ea:	e8 0b d3 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c4ef:	83 c4 10             	add    esp,0x10
c000c4f2:	83 c4 0c             	add    esp,0xc
c000c4f5:	c3                   	ret    
c000c4f6:	66 90                	xchg   ax,ax

c000c4f8 <Timer::Timer(char const*)>:
c000c4f8:	83 ec 0c             	sub    esp,0xc
c000c4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ff:	83 ec 08             	sub    esp,0x8
c000c502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c506:	50                   	push   eax
c000c507:	e8 bc e9 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c50c:	83 c4 10             	add    esp,0x10
c000c50f:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000c514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c518:	89 10                	mov    DWORD PTR [eax],edx
c000c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c51e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c528:	90                   	nop
c000c529:	83 c4 0c             	add    esp,0xc
c000c52c:	c3                   	ret    
c000c52d:	90                   	nop
c000c52e:	66 90                	xchg   ax,ax

c000c530 <Timer::~Timer()>:
c000c530:	83 ec 0c             	sub    esp,0xc
c000c533:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000c538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53c:	89 10                	mov    DWORD PTR [eax],edx
c000c53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c542:	83 ec 0c             	sub    esp,0xc
c000c545:	50                   	push   eax
c000c546:	e8 e7 e6 ff ff       	call   c000ac32 <Device::~Device()>
c000c54b:	83 c4 10             	add    esp,0x10
c000c54e:	90                   	nop
c000c54f:	83 c4 0c             	add    esp,0xc
c000c552:	c3                   	ret    
c000c553:	90                   	nop

c000c554 <Timer::~Timer()>:
c000c554:	83 ec 0c             	sub    esp,0xc
c000c557:	83 ec 0c             	sub    esp,0xc
c000c55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55e:	e8 cd ff ff ff       	call   c000c530 <Timer::~Timer()>
c000c563:	83 c4 10             	add    esp,0x10
c000c566:	83 ec 08             	sub    esp,0x8
c000c569:	68 5c 01 00 00       	push   0x15c
c000c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c572:	e8 83 d2 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	83 c4 0c             	add    esp,0xc
c000c57d:	c3                   	ret    

c000c57e <Timer::read()>:
c000c57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c582:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c588:	c3                   	ret    

c000c589 <setupTimer(int)>:
c000c589:	53                   	push   ebx
c000c58a:	83 ec 14             	sub    esp,0x14
c000c58d:	68 5c 01 00 00       	push   0x15c
c000c592:	e8 ca a5 ff ff       	call   c0006b61 <malloc>
c000c597:	89 04 24             	mov    DWORD PTR [esp],eax
c000c59a:	89 c3                	mov    ebx,eax
c000c59c:	e8 0f e9 00 00       	call   c001aeb0 <PIT::PIT()>
c000c5a1:	58                   	pop    eax
c000c5a2:	5a                   	pop    edx
c000c5a3:	53                   	push   ebx
c000c5a4:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000c5aa:	e8 81 e7 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000c5af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c5b1:	6a 00                	push   0x0
c000c5b3:	6a 00                	push   0x0
c000c5b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5b9:	53                   	push   ebx
c000c5ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c5bd:	89 d8                	mov    eax,ebx
c000c5bf:	83 c4 28             	add    esp,0x28
c000c5c2:	5b                   	pop    ebx
c000c5c3:	c3                   	ret    

c000c5c4 <timerHandler(unsigned int)>:
c000c5c4:	56                   	push   esi
c000c5c5:	53                   	push   ebx
c000c5c6:	51                   	push   ecx
c000c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5cb:	01 05 6c 18 02 c0    	add    DWORD PTR ds:0xc002186c,eax
c000c5d1:	80 3d ad f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f2ad,0x0
c000c5d8:	0f 84 4a 01 00 00    	je     c000c728 <timerHandler(unsigned int)+0x164>
c000c5de:	fa                   	cli    
c000c5df:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c000c5e5:	83 ec 0c             	sub    esp,0xc
c000c5e8:	ff 05 64 27 02 c0    	inc    DWORD PTR ds:0xc0022764
c000c5ee:	68 78 27 02 c0       	push   0xc0022778
c000c5f3:	e8 18 f5 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c5f8:	83 c4 10             	add    esp,0x10
c000c5fb:	84 c0                	test   al,al
c000c5fd:	0f 85 a1 00 00 00    	jne    c000c6a4 <timerHandler(unsigned int)+0xe0>
c000c603:	83 ec 0c             	sub    esp,0xc
c000c606:	68 78 27 02 c0       	push   0xc0022778
c000c60b:	e8 1c f5 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c610:	83 c4 10             	add    esp,0x10
c000c613:	89 c6                	mov    esi,eax
c000c615:	8d 76 00             	lea    esi,[esi+0x0]
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	68 78 27 02 c0       	push   0xc0022778
c000c620:	e8 07 f5 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c625:	c7 04 24 78 27 02 c0 	mov    DWORD PTR [esp],0xc0022778
c000c62c:	89 c3                	mov    ebx,eax
c000c62e:	e8 01 f5 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c633:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c636:	83 c4 10             	add    esp,0x10
c000c639:	3b 05 6c 18 02 c0    	cmp    eax,DWORD PTR ds:0xc002186c
c000c63f:	77 23                	ja     c000c664 <timerHandler(unsigned int)+0xa0>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	53                   	push   ebx
c000c645:	e8 0e 66 00 00       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c000c64a:	83 c4 10             	add    esp,0x10
c000c64d:	39 de                	cmp    esi,ebx
c000c64f:	75 27                	jne    c000c678 <timerHandler(unsigned int)+0xb4>
c000c651:	83 ec 0c             	sub    esp,0xc
c000c654:	68 78 27 02 c0       	push   0xc0022778
c000c659:	e8 ce f4 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c65e:	89 c6                	mov    esi,eax
c000c660:	eb 12                	jmp    c000c674 <timerHandler(unsigned int)+0xb0>
c000c662:	66 90                	xchg   ax,ax
c000c664:	52                   	push   edx
c000c665:	52                   	push   edx
c000c666:	53                   	push   ebx
c000c667:	68 78 27 02 c0       	push   0xc0022778
c000c66c:	e8 7b f5 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c671:	8d 76 00             	lea    esi,[esi+0x0]
c000c674:	83 c4 10             	add    esp,0x10
c000c677:	90                   	nop
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	68 78 27 02 c0       	push   0xc0022778
c000c680:	e8 8b f4 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	84 c0                	test   al,al
c000c68a:	75 18                	jne    c000c6a4 <timerHandler(unsigned int)+0xe0>
c000c68c:	83 ec 0c             	sub    esp,0xc
c000c68f:	68 78 27 02 c0       	push   0xc0022778
c000c694:	e8 93 f4 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c699:	83 c4 10             	add    esp,0x10
c000c69c:	39 f0                	cmp    eax,esi
c000c69e:	0f 85 74 ff ff ff    	jne    c000c618 <timerHandler(unsigned int)+0x54>
c000c6a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c6a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c6ad:	74 41                	je     c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6af:	80 3d ac f2 01 c0 00 	cmp    BYTE PTR ds:0xc001f2ac,0x0
c000c6b6:	74 38                	je     c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6b8:	fa                   	cli    
c000c6b9:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c000c6bf:	a1 6c 18 02 c0       	mov    eax,ds:0xc002186c
c000c6c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c6ca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c6cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c6d3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c6d6:	72 08                	jb     c000c6e0 <timerHandler(unsigned int)+0x11c>
c000c6d8:	e8 b7 60 00 00       	call   c0012794 <schedule()>
c000c6dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c6e0:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000c6e5:	48                   	dec    eax
c000c6e6:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000c6eb:	75 03                	jne    c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6ed:	fb                   	sti    
c000c6ee:	66 90                	xchg   ax,ax
c000c6f0:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c000c6f5:	48                   	dec    eax
c000c6f6:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c000c6fb:	75 1b                	jne    c000c718 <timerHandler(unsigned int)+0x154>
c000c6fd:	83 3d 60 27 02 c0 00 	cmp    DWORD PTR ds:0xc0022760,0x0
c000c704:	74 12                	je     c000c718 <timerHandler(unsigned int)+0x154>
c000c706:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c000c710:	e8 7f 60 00 00       	call   c0012794 <schedule()>
c000c715:	8d 76 00             	lea    esi,[esi+0x0]
c000c718:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000c71d:	48                   	dec    eax
c000c71e:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000c723:	75 03                	jne    c000c728 <timerHandler(unsigned int)+0x164>
c000c725:	fb                   	sti    
c000c726:	66 90                	xchg   ax,ax
c000c728:	58                   	pop    eax
c000c729:	5b                   	pop    ebx
c000c72a:	5e                   	pop    esi
c000c72b:	c3                   	ret    

c000c72c <VCache::VCache(PhysicalDisk*)>:
c000c72c:	53                   	push   ebx
c000c72d:	83 ec 18             	sub    esp,0x18
c000c730:	ba 6c d6 01 c0       	mov    edx,0xc001d66c
c000c735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c739:	89 10                	mov    DWORD PTR [eax],edx
c000c73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c73f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c74a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c755:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c75c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c767:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c76e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c779:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c784:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c793:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c7bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c7c5:	83 ec 0c             	sub    esp,0xc
c000c7c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7cc:	e8 90 a3 ff ff       	call   c0006b61 <malloc>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	89 c3                	mov    ebx,eax
c000c7d6:	83 ec 0c             	sub    esp,0xc
c000c7d9:	53                   	push   ebx
c000c7da:	e8 81 5d 00 00       	call   c0012560 <Mutex::Mutex()>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c7ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c803:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c80d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c814:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c81a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c824:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c827:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c82e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c832:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c836:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c83c:	05 00 01 00 00       	add    eax,0x100
c000c841:	c1 e0 04             	shl    eax,0x4
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	50                   	push   eax
c000c848:	e8 14 a3 ff ff       	call   c0006b61 <malloc>
c000c84d:	83 c4 10             	add    esp,0x10
c000c850:	89 c2                	mov    edx,eax
c000c852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c868:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c86c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c870:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c876:	c1 e0 06             	shl    eax,0x6
c000c879:	83 ec 0c             	sub    esp,0xc
c000c87c:	50                   	push   eax
c000c87d:	e8 df a2 ff ff       	call   c0006b61 <malloc>
c000c882:	83 c4 10             	add    esp,0x10
c000c885:	89 c2                	mov    edx,eax
c000c887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c88e:	90                   	nop
c000c88f:	83 c4 18             	add    esp,0x18
c000c892:	5b                   	pop    ebx
c000c893:	c3                   	ret    

c000c894 <VCache::invalidateReadBuffer()>:
c000c894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c898:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c89e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <VCache::writeWriteBuffer()>:
c000c8a4:	53                   	push   ebx
c000c8a5:	83 ec 08             	sub    esp,0x8
c000c8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c8b0:	74 1e                	je     c000c8d0 <VCache::writeWriteBuffer()+0x2c>
c000c8b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8b5:	83 ec 0c             	sub    esp,0xc
c000c8b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c8bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c8c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c8c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c6:	50                   	push   eax
c000c8c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c8ca:	83 c4 20             	add    esp,0x20
c000c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c8d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c8d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c8de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c8e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c8e9:	83 c4 08             	add    esp,0x8
c000c8ec:	5b                   	pop    ebx
c000c8ed:	c3                   	ret    
c000c8ee:	66 90                	xchg   ax,ax

c000c8f0 <VCache::~VCache()>:
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ba 6c d6 01 c0       	mov    edx,0xc001d66c
c000c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fc:	89 10                	mov    DWORD PTR [eax],edx
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c905:	84 c0                	test   al,al
c000c907:	74 0f                	je     c000c918 <VCache::~VCache()+0x28>
c000c909:	83 ec 0c             	sub    esp,0xc
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	e8 8f ff ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c91f:	83 ec 0c             	sub    esp,0xc
c000c922:	50                   	push   eax
c000c923:	e8 49 a2 ff ff       	call   c0006b71 <free>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c932:	83 ec 0c             	sub    esp,0xc
c000c935:	50                   	push   eax
c000c936:	e8 36 a2 ff ff       	call   c0006b71 <free>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	90                   	nop
c000c93f:	83 c4 0c             	add    esp,0xc
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <VCache::~VCache()>:
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	83 ec 0c             	sub    esp,0xc
c000c94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94e:	e8 9d ff ff ff       	call   c000c8f0 <VCache::~VCache()>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	83 ec 08             	sub    esp,0x8
c000c959:	6a 44                	push   0x44
c000c95b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95f:	e8 96 ce ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	83 c4 0c             	add    esp,0xc
c000c96a:	c3                   	ret    
c000c96b:	90                   	nop

c000c96c <VCache::write(unsigned long long, int, void*)>:
c000c96c:	55                   	push   ebp
c000c96d:	31 c0                	xor    eax,eax
c000c96f:	57                   	push   edi
c000c970:	56                   	push   esi
c000c971:	53                   	push   ebx
c000c972:	83 ec 0c             	sub    esp,0xc
c000c975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c979:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c97d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c981:	8d 76 00             	lea    esi,[esi+0x0]
c000c984:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c988:	7d 1a                	jge    c000c9a4 <VCache::write(unsigned long long, int, void*)+0x38>
c000c98a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c98d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c993:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c997:	0f af c8             	imul   ecx,eax
c000c99a:	01 ca                	add    edx,ecx
c000c99c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c99e:	40                   	inc    eax
c000c99f:	eb e3                	jmp    c000c984 <VCache::write(unsigned long long, int, void*)+0x18>
c000c9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9a4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c9a8:	74 0a                	je     c000c9b4 <VCache::write(unsigned long long, int, void*)+0x48>
c000c9aa:	53                   	push   ebx
c000c9ab:	e8 e4 fe ff ff       	call   c000c894 <VCache::invalidateReadBuffer()>
c000c9b0:	58                   	pop    eax
c000c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c9b8:	74 5e                	je     c000ca18 <VCache::write(unsigned long long, int, void*)+0xac>
c000c9ba:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c9bd:	89 e8                	mov    eax,ebp
c000c9bf:	99                   	cdq    
c000c9c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c9c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c9c6:	89 c1                	mov    ecx,eax
c000c9c8:	89 d0                	mov    eax,edx
c000c9ca:	31 f1                	xor    ecx,esi
c000c9cc:	31 f8                	xor    eax,edi
c000c9ce:	09 c1                	or     ecx,eax
c000c9d0:	75 3a                	jne    c000ca0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000c9d2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000c9d7:	75 33                	jne    c000ca0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000c9d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9dc:	89 ef                	mov    edi,ebp
c000c9de:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c9e8:	0f af f9             	imul   edi,ecx
c000c9eb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000c9ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000c9f3:	40                   	inc    eax
c000c9f4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000c9f7:	83 f8 40             	cmp    eax,0x40
c000c9fa:	75 60                	jne    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000c9fc:	83 ec 0c             	sub    esp,0xc
c000c9ff:	53                   	push   ebx
c000ca00:	e8 9f fe ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	eb 52                	jmp    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca0a:	66 90                	xchg   ax,ax
c000ca0c:	83 ec 0c             	sub    esp,0xc
c000ca0f:	53                   	push   ebx
c000ca10:	e8 8f fe ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca1b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000ca20:	7f 22                	jg     c000ca44 <VCache::write(unsigned long long, int, void*)+0xd8>
c000ca22:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ca25:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ca28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ca2c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ca30:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ca33:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ca36:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ca3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ca40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca42:	eb 18                	jmp    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca44:	83 ec 0c             	sub    esp,0xc
c000ca47:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca51:	57                   	push   edi
c000ca52:	56                   	push   esi
c000ca53:	50                   	push   eax
c000ca54:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca57:	83 c4 20             	add    esp,0x20
c000ca5a:	66 90                	xchg   ax,ax
c000ca5c:	83 c4 0c             	add    esp,0xc
c000ca5f:	31 c0                	xor    eax,eax
c000ca61:	5b                   	pop    ebx
c000ca62:	5e                   	pop    esi
c000ca63:	5f                   	pop    edi
c000ca64:	5d                   	pop    ebp
c000ca65:	c3                   	ret    

c000ca66 <VCache::read(unsigned long long, int, void*)>:
c000ca66:	55                   	push   ebp
c000ca67:	31 c0                	xor    eax,eax
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 1c             	sub    esp,0x1c
c000ca6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ca73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ca77:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ca7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ca7f:	90                   	nop
c000ca80:	39 e8                	cmp    eax,ebp
c000ca82:	7d 18                	jge    c000ca9c <VCache::read(unsigned long long, int, void*)+0x36>
c000ca84:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000ca87:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ca8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ca91:	0f af c8             	imul   ecx,eax
c000ca94:	01 ca                	add    edx,ecx
c000ca96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ca98:	40                   	inc    eax
c000ca99:	eb e5                	jmp    c000ca80 <VCache::read(unsigned long long, int, void*)+0x1a>
c000ca9b:	90                   	nop
c000ca9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000caa0:	74 0e                	je     c000cab0 <VCache::read(unsigned long long, int, void*)+0x4a>
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	53                   	push   ebx
c000caa6:	e8 f9 fd ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	66 90                	xchg   ax,ax
c000cab0:	83 fd 01             	cmp    ebp,0x1
c000cab3:	0f 85 87 00 00 00    	jne    c000cb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000cab9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cabc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cac0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cac7:	75 77                	jne    c000cb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000cac9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cacc:	89 e9                	mov    ecx,ebp
c000cace:	f7 d9                	neg    ecx
c000cad0:	89 c8                	mov    eax,ecx
c000cad2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cad6:	c1 f8 1f             	sar    eax,0x1f
c000cad9:	21 f1                	and    ecx,esi
c000cadb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cadf:	89 c8                	mov    eax,ecx
c000cae1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cae5:	21 f9                	and    ecx,edi
c000cae7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000caeb:	89 ca                	mov    edx,ecx
c000caed:	74 0d                	je     c000cafc <VCache::read(unsigned long long, int, void*)+0x96>
c000caef:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000caf2:	75 08                	jne    c000cafc <VCache::read(unsigned long long, int, void*)+0x96>
c000caf4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000caf7:	74 27                	je     c000cb20 <VCache::read(unsigned long long, int, void*)+0xba>
c000caf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cb03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb07:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cb0a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cb0d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cb0f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cb12:	55                   	push   ebp
c000cb13:	52                   	push   edx
c000cb14:	50                   	push   eax
c000cb15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cb19:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cb1c:	83 c4 20             	add    esp,0x20
c000cb1f:	90                   	nop
c000cb20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb27:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cb30:	48                   	dec    eax
c000cb31:	21 c6                	and    esi,eax
c000cb33:	0f af f1             	imul   esi,ecx
c000cb36:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cb39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb3b:	eb 23                	jmp    c000cb60 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	53                   	push   ebx
c000cb44:	e8 4b fd ff ff       	call   c000c894 <VCache::invalidateReadBuffer()>
c000cb49:	5a                   	pop    edx
c000cb4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb53:	55                   	push   ebp
c000cb54:	57                   	push   edi
c000cb55:	56                   	push   esi
c000cb56:	50                   	push   eax
c000cb57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cb5a:	83 c4 20             	add    esp,0x20
c000cb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb60:	83 c4 1c             	add    esp,0x1c
c000cb63:	31 c0                	xor    eax,eax
c000cb65:	5b                   	pop    ebx
c000cb66:	5e                   	pop    esi
c000cb67:	5f                   	pop    edi
c000cb68:	5d                   	pop    ebp
c000cb69:	c3                   	ret    

c000cb6a <Video::putrect(int, int, int, int, unsigned int)>:
c000cb6a:	55                   	push   ebp
c000cb6b:	57                   	push   edi
c000cb6c:	56                   	push   esi
c000cb6d:	53                   	push   ebx
c000cb6e:	83 ec 1c             	sub    esp,0x1c
c000cb71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cb75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb7d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cb81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb89:	01 df                	add    edi,ebx
c000cb8b:	39 fb                	cmp    ebx,edi
c000cb8d:	7d 1f                	jge    c000cbae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cb8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb93:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cb97:	7d 12                	jge    c000cbab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cb99:	8b 16                	mov    edx,DWORD PTR [esi]
c000cb9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cb9f:	53                   	push   ebx
c000cba0:	55                   	push   ebp
c000cba1:	45                   	inc    ebp
c000cba2:	56                   	push   esi
c000cba3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cba6:	83 c4 10             	add    esp,0x10
c000cba9:	eb e8                	jmp    c000cb93 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cbab:	43                   	inc    ebx
c000cbac:	eb dd                	jmp    c000cb8b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cbae:	83 c4 1c             	add    esp,0x1c
c000cbb1:	5b                   	pop    ebx
c000cbb2:	5e                   	pop    esi
c000cbb3:	5f                   	pop    edi
c000cbb4:	5d                   	pop    ebp
c000cbb5:	c3                   	ret    

c000cbb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cbb6:	55                   	push   ebp
c000cbb7:	57                   	push   edi
c000cbb8:	31 ff                	xor    edi,edi
c000cbba:	56                   	push   esi
c000cbbb:	53                   	push   ebx
c000cbbc:	83 ec 1c             	sub    esp,0x1c
c000cbbf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cbc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cbc7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cbce:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cbd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbd7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cbdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cbdf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cbe2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cbe6:	01 f9                	add    ecx,edi
c000cbe8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cbec:	7d 2f                	jge    c000cc1d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cbee:	31 f6                	xor    esi,esi
c000cbf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cbf4:	01 f2                	add    edx,esi
c000cbf6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cbfa:	7d 1a                	jge    c000cc16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cbfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cc02:	46                   	inc    esi
c000cc03:	51                   	push   ecx
c000cc04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc08:	52                   	push   edx
c000cc09:	55                   	push   ebp
c000cc0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc14:	eb da                	jmp    c000cbf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cc16:	47                   	inc    edi
c000cc17:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cc1b:	eb c5                	jmp    c000cbe2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cc1d:	83 c4 1c             	add    esp,0x1c
c000cc20:	5b                   	pop    ebx
c000cc21:	5e                   	pop    esi
c000cc22:	5f                   	pop    edi
c000cc23:	5d                   	pop    ebp
c000cc24:	c3                   	ret    
c000cc25:	90                   	nop

c000cc26 <Video::blit(unsigned int*, int, int, int, int)>:
c000cc26:	55                   	push   ebp
c000cc27:	57                   	push   edi
c000cc28:	56                   	push   esi
c000cc29:	53                   	push   ebx
c000cc2a:	83 ec 1c             	sub    esp,0x1c
c000cc2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cc35:	85 c0                	test   eax,eax
c000cc37:	79 02                	jns    c000cc3b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cc39:	31 c0                	xor    eax,eax
c000cc3b:	c1 e0 02             	shl    eax,0x2
c000cc3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cc4a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cc4e:	39 d8                	cmp    eax,ebx
c000cc50:	7e 49                	jle    c000cc9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc52:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cc58:	7c 41                	jl     c000cc9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cc5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc66:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cc6a:	39 f9                	cmp    ecx,edi
c000cc6c:	7e 22                	jle    c000cc90 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cc6e:	83 c5 04             	add    ebp,0x4
c000cc71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cc77:	7c 14                	jl     c000cc8d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cc79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cc7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cc7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc86:	56                   	push   esi
c000cc87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	47                   	inc    edi
c000cc8e:	eb d2                	jmp    c000cc62 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc94:	43                   	inc    ebx
c000cc95:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cc99:	eb ab                	jmp    c000cc46 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cc9b:	83 c4 1c             	add    esp,0x1c
c000cc9e:	5b                   	pop    ebx
c000cc9f:	5e                   	pop    esi
c000cca0:	5f                   	pop    edi
c000cca1:	5d                   	pop    ebp
c000cca2:	c3                   	ret    
c000cca3:	90                   	nop

c000cca4 <Video::clearScreen(unsigned int)>:
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	31 db                	xor    ebx,ebx
c000cca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ccb3:	7e 1f                	jle    c000ccd4 <Video::clearScreen(unsigned int)+0x30>
c000ccb5:	31 ff                	xor    edi,edi
c000ccb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ccbd:	7e 12                	jle    c000ccd1 <Video::clearScreen(unsigned int)+0x2d>
c000ccbf:	8b 06                	mov    eax,DWORD PTR [esi]
c000ccc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc5:	53                   	push   ebx
c000ccc6:	57                   	push   edi
c000ccc7:	47                   	inc    edi
c000ccc8:	56                   	push   esi
c000ccc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	eb e6                	jmp    c000ccb7 <Video::clearScreen(unsigned int)+0x13>
c000ccd1:	43                   	inc    ebx
c000ccd2:	eb d9                	jmp    c000ccad <Video::clearScreen(unsigned int)+0x9>
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	c3                   	ret    

c000ccd8 <Video::putpixel(int, int, unsigned int)>:
c000ccd8:	c7 44 24 04 74 d6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d674
c000cce0:	e9 5a 27 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000cce5:	90                   	nop

c000cce6 <Video::Video(char const*)>:
c000cce6:	83 ec 0c             	sub    esp,0xc
c000cce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cced:	83 ec 08             	sub    esp,0x8
c000ccf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf4:	50                   	push   eax
c000ccf5:	e8 ce e1 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	ba e4 d6 01 c0       	mov    edx,0xc001d6e4
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	89 10                	mov    DWORD PTR [eax],edx
c000cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cd16:	90                   	nop
c000cd17:	83 c4 0c             	add    esp,0xc
c000cd1a:	c3                   	ret    
c000cd1b:	90                   	nop

c000cd1c <Video::~Video()>:
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	ba e4 d6 01 c0       	mov    edx,0xc001d6e4
c000cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd28:	89 10                	mov    DWORD PTR [eax],edx
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	83 ec 0c             	sub    esp,0xc
c000cd31:	50                   	push   eax
c000cd32:	e8 fb de ff ff       	call   c000ac32 <Device::~Device()>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	90                   	nop
c000cd3b:	83 c4 0c             	add    esp,0xc
c000cd3e:	c3                   	ret    
c000cd3f:	90                   	nop

c000cd40 <Video::~Video()>:
c000cd40:	83 ec 0c             	sub    esp,0xc
c000cd43:	83 ec 0c             	sub    esp,0xc
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	e8 cd ff ff ff       	call   c000cd1c <Video::~Video()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	83 ec 08             	sub    esp,0x8
c000cd55:	68 64 01 00 00       	push   0x164
c000cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5e:	e8 97 ca ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	83 c4 0c             	add    esp,0xc
c000cd69:	c3                   	ret    

c000cd6a <Video::isMonochrome()>:
c000cd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <Video::getWidth()>:
c000cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd80:	c3                   	ret    
c000cd81:	90                   	nop

c000cd82 <Video::getHeight()>:
c000cd82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <Video::drawCursor(int, int, unsigned char*, int)>:
c000cd8e:	55                   	push   ebp
c000cd8f:	57                   	push   edi
c000cd90:	56                   	push   esi
c000cd91:	53                   	push   ebx
c000cd92:	83 ec 2c             	sub    esp,0x2c
c000cd95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cd9d:	83 f8 01             	cmp    eax,0x1
c000cda0:	19 c9                	sbb    ecx,ecx
c000cda2:	31 db                	xor    ebx,ebx
c000cda4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cda8:	89 cd                	mov    ebp,ecx
c000cdaa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cdb2:	f7 d5                	not    ebp
c000cdb4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cdba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cdbe:	01 d8                	add    eax,ebx
c000cdc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cdc4:	56                   	push   esi
c000cdc5:	e8 b8 ff ff ff       	call   c000cd82 <Video::getHeight()>
c000cdca:	59                   	pop    ecx
c000cdcb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cdcf:	7e 70                	jle    c000ce41 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cdd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cdd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cdd9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cde0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cde4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cdeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdef:	89 f8                	mov    eax,edi
c000cdf1:	83 c0 20             	add    eax,0x20
c000cdf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cdf8:	56                   	push   esi
c000cdf9:	e8 78 ff ff ff       	call   c000cd76 <Video::getWidth()>
c000cdfe:	5a                   	pop    edx
c000cdff:	39 c7                	cmp    edi,eax
c000ce01:	7d 34                	jge    c000ce37 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ce03:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ce08:	74 05                	je     c000ce0f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ce0a:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce0c:	55                   	push   ebp
c000ce0d:	eb 0d                	jmp    c000ce1c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ce0f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ce14:	74 12                	je     c000ce28 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000ce16:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce20:	57                   	push   edi
c000ce21:	56                   	push   esi
c000ce22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ce2c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ce30:	47                   	inc    edi
c000ce31:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ce35:	75 c1                	jne    c000cdf8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000ce37:	43                   	inc    ebx
c000ce38:	83 fb 20             	cmp    ebx,0x20
c000ce3b:	0f 85 79 ff ff ff    	jne    c000cdba <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000ce41:	83 c4 2c             	add    esp,0x2c
c000ce44:	5b                   	pop    ebx
c000ce45:	5e                   	pop    esi
c000ce46:	5f                   	pop    edi
c000ce47:	5d                   	pop    ebp
c000ce48:	c3                   	ret    
c000ce49:	90                   	nop

c000ce4a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ce4a:	55                   	push   ebp
c000ce4b:	57                   	push   edi
c000ce4c:	56                   	push   esi
c000ce4d:	53                   	push   ebx
c000ce4e:	83 ec 28             	sub    esp,0x28
c000ce51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ce55:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ce59:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ce5d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ce61:	c1 e6 08             	shl    esi,0x8
c000ce64:	01 c6                	add    esi,eax
c000ce66:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ce6a:	c1 e0 08             	shl    eax,0x8
c000ce6d:	01 d0                	add    eax,edx
c000ce6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ce73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce77:	0f af c6             	imul   eax,esi
c000ce7a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ce81:	50                   	push   eax
c000ce82:	e8 da 9c ff ff       	call   c0006b61 <malloc>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	89 c7                	mov    edi,eax
c000ce8c:	85 c0                	test   eax,eax
c000ce8e:	75 10                	jne    c000cea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	68 95 d6 01 c0       	push   0xc001d695
c000ce98:	e8 a2 25 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cea3:	ba 12 00 00 00       	mov    edx,0x12
c000cea8:	84 c0                	test   al,al
c000ceaa:	74 11                	je     c000cebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000ceac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ceb0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ceb4:	c1 fa 03             	sar    edx,0x3
c000ceb7:	0f af d1             	imul   edx,ecx
c000ceba:	83 c2 12             	add    edx,0x12
c000cebd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cec1:	74 04                	je     c000cec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cec3:	85 f6                	test   esi,esi
c000cec5:	75 12                	jne    c000ced9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cec7:	83 ec 0c             	sub    esp,0xc
c000ceca:	68 a5 d6 01 c0       	push   0xc001d6a5
c000cecf:	e8 1c ca ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ced4:	e9 b8 00 00 00       	jmp    c000cf91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000ced9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cedd:	80 f9 02             	cmp    cl,0x2
c000cee0:	0f 85 96 00 00 00    	jne    c000cf7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cee6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ceeb:	75 0e                	jne    c000cefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000ceed:	84 c0                	test   al,al
c000ceef:	75 0a                	jne    c000cefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cef1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cef4:	83 e8 18             	sub    eax,0x18
c000cef7:	a8 f7                	test   al,0xf7
c000cef9:	74 0a                	je     c000cf05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cefb:	83 ec 0c             	sub    esp,0xc
c000cefe:	68 ba d6 01 c0       	push   0xc001d6ba
c000cf03:	eb 7f                	jmp    c000cf84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cf05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cf0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cf15:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000cf19:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cf21:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cf25:	75 0c                	jne    c000cf33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000cf27:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cf2c:	c1 e0 18             	shl    eax,0x18
c000cf2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf33:	45                   	inc    ebp
c000cf34:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000cf39:	c1 e1 10             	shl    ecx,0x10
c000cf3c:	89 c8                	mov    eax,ecx
c000cf3e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000cf43:	c1 e1 08             	shl    ecx,0x8
c000cf46:	09 c1                	or     ecx,eax
c000cf48:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000cf4c:	09 c1                	or     ecx,eax
c000cf4e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000cf52:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000cf56:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cf5a:	c1 f8 03             	sar    eax,0x3
c000cf5d:	01 c2                	add    edx,eax
c000cf5f:	89 e8                	mov    eax,ebp
c000cf61:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000cf65:	39 c6                	cmp    esi,eax
c000cf67:	7f b0                	jg     c000cf19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000cf69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cf6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf71:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000cf74:	7e 22                	jle    c000cf98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000cf76:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000cf7a:	eb 99                	jmp    c000cf15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000cf7c:	50                   	push   eax
c000cf7d:	50                   	push   eax
c000cf7e:	51                   	push   ecx
c000cf7f:	68 c8 d6 01 c0       	push   0xc001d6c8
c000cf84:	e8 67 c9 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000cf89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cf8c:	e8 e0 9b ff ff       	call   c0006b71 <free>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	31 ff                	xor    edi,edi
c000cf96:	eb 0f                	jmp    c000cfa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000cf98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cf9c:	89 30                	mov    DWORD PTR [eax],esi
c000cf9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfa2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cfa5:	89 30                	mov    DWORD PTR [eax],esi
c000cfa7:	83 c4 1c             	add    esp,0x1c
c000cfaa:	89 f8                	mov    eax,edi
c000cfac:	5b                   	pop    ebx
c000cfad:	5e                   	pop    esi
c000cfae:	5f                   	pop    edi
c000cfaf:	5d                   	pop    ebp
c000cfb0:	c3                   	ret    
c000cfb1:	90                   	nop

c000cfb2 <Video::putTGA(int, int, unsigned char*, int)>:
c000cfb2:	55                   	push   ebp
c000cfb3:	57                   	push   edi
c000cfb4:	56                   	push   esi
c000cfb5:	53                   	push   ebx
c000cfb6:	83 ec 28             	sub    esp,0x28
c000cfb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000cfbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cfc1:	50                   	push   eax
c000cfc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cfc6:	50                   	push   eax
c000cfc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cfcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cfcf:	56                   	push   esi
c000cfd0:	e8 75 fe ff ff       	call   c000ce4a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000cfd5:	83 c4 20             	add    esp,0x20
c000cfd8:	85 c0                	test   eax,eax
c000cfda:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cfde:	74 35                	je     c000d015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cfe0:	89 c7                	mov    edi,eax
c000cfe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfe6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000cfea:	39 d8                	cmp    eax,ebx
c000cfec:	7e 27                	jle    c000d015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cfee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cff2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cff6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000cffa:	39 e8                	cmp    eax,ebp
c000cffc:	7e 14                	jle    c000d012 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000cffe:	8b 06                	mov    eax,DWORD PTR [esi]
c000d000:	83 c7 04             	add    edi,0x4
c000d003:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d006:	53                   	push   ebx
c000d007:	55                   	push   ebp
c000d008:	45                   	inc    ebp
c000d009:	56                   	push   esi
c000d00a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	eb e0                	jmp    c000cff2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d012:	43                   	inc    ebx
c000d013:	eb cd                	jmp    c000cfe2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d015:	83 c4 1c             	add    esp,0x1c
c000d018:	5b                   	pop    ebx
c000d019:	5e                   	pop    esi
c000d01a:	5f                   	pop    edi
c000d01b:	5d                   	pop    ebp
c000d01c:	c3                   	ret    
c000d01d:	66 90                	xchg   ax,ax
c000d01f:	90                   	nop

c000d020 <ACPI::close(int, int, void*)>:
c000d020:	83 ec 1c             	sub    esp,0x1c
c000d023:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d02b:	74 0b                	je     c000d038 <ACPI::close(int, int, void*)+0x18>
c000d02d:	b8 00 00 00 00       	mov    eax,0x0
c000d032:	e9 9d 00 00 00       	jmp    c000d0d4 <ACPI::close(int, int, void*)+0xb4>
c000d037:	90                   	nop
c000d038:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d03d:	75 29                	jne    c000d068 <ACPI::close(int, int, void*)+0x48>
c000d03f:	a1 88 18 02 c0       	mov    eax,ds:0xc0021888
c000d044:	85 c0                	test   eax,eax
c000d046:	74 08                	je     c000d050 <ACPI::close(int, int, void*)+0x30>
c000d048:	a1 88 18 02 c0       	mov    eax,ds:0xc0021888
c000d04d:	ff d0                	call   eax
c000d04f:	90                   	nop
c000d050:	83 ec 0c             	sub    esp,0xc
c000d053:	68 24 d7 01 c0       	push   0xc001d724
c000d058:	e8 e2 23 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d065:	eb 6d                	jmp    c000d0d4 <ACPI::close(int, int, void*)+0xb4>
c000d067:	90                   	nop
c000d068:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d06d:	75 5d                	jne    c000d0cc <ACPI::close(int, int, void*)+0xac>
c000d06f:	a1 84 18 02 c0       	mov    eax,ds:0xc0021884
c000d074:	85 c0                	test   eax,eax
c000d076:	74 08                	je     c000d080 <ACPI::close(int, int, void*)+0x60>
c000d078:	a1 84 18 02 c0       	mov    eax,ds:0xc0021884
c000d07d:	ff d0                	call   eax
c000d07f:	90                   	nop
c000d080:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d085:	8d 76 00             	lea    esi,[esi+0x0]
c000d088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d08c:	25 ff 00 00 00       	and    eax,0xff
c000d091:	83 e0 02             	and    eax,0x2
c000d094:	74 1e                	je     c000d0b4 <ACPI::close(int, int, void*)+0x94>
c000d096:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d09d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0a1:	89 c2                	mov    edx,eax
c000d0a3:	ec                   	in     al,dx
c000d0a4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d0a8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d0ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d0b0:	eb d6                	jmp    c000d088 <ACPI::close(int, int, void*)+0x68>
c000d0b2:	66 90                	xchg   ax,ax
c000d0b4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d0bb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d0c0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0c8:	ee                   	out    dx,al
c000d0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0d4:	83 c4 1c             	add    esp,0x1c
c000d0d7:	c3                   	ret    

c000d0d8 <findRSDP()>:
c000d0d8:	83 ec 1c             	sub    esp,0x1c
c000d0db:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d0e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d0e6:	83 e0 04             	and    eax,0x4
c000d0e9:	84 c0                	test   al,al
c000d0eb:	75 07                	jne    c000d0f4 <findRSDP()+0x1c>
c000d0ed:	b8 00 00 00 00       	mov    eax,0x0
c000d0f2:	eb 70                	jmp    c000d164 <findRSDP()+0x8c>
c000d0f4:	a1 d8 f2 01 c0       	mov    eax,ds:0xc001f2d8
c000d0f9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d0fe:	7f 1c                	jg     c000d11c <findRSDP()+0x44>
c000d100:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d105:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d10b:	83 e2 fb             	and    edx,0xfffffffb
c000d10e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d114:	b8 00 00 00 00       	mov    eax,0x0
c000d119:	eb 49                	jmp    c000d164 <findRSDP()+0x8c>
c000d11b:	90                   	nop
c000d11c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d124:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d12c:	77 2e                	ja     c000d15c <findRSDP()+0x84>
c000d12e:	83 ec 04             	sub    esp,0x4
c000d131:	6a 08                	push   0x8
c000d133:	68 bf d7 01 c0       	push   0xc001d7bf
c000d138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d13c:	e8 6f 32 ff ff       	call   c00003b0 <memcmp>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	85 c0                	test   eax,eax
c000d146:	0f 94 c0             	sete   al
c000d149:	84 c0                	test   al,al
c000d14b:	74 07                	je     c000d154 <findRSDP()+0x7c>
c000d14d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d151:	eb 11                	jmp    c000d164 <findRSDP()+0x8c>
c000d153:	90                   	nop
c000d154:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d159:	eb c9                	jmp    c000d124 <findRSDP()+0x4c>
c000d15b:	90                   	nop
c000d15c:	b8 00 00 00 00       	mov    eax,0x0
c000d161:	8d 76 00             	lea    esi,[esi+0x0]
c000d164:	83 c4 1c             	add    esp,0x1c
c000d167:	c3                   	ret    

c000d168 <loadACPITables(unsigned char*)>:
c000d168:	57                   	push   edi
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	83 ec 60             	sub    esp,0x60
c000d16e:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d173:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d179:	83 e0 04             	and    eax,0x4
c000d17c:	84 c0                	test   al,al
c000d17e:	0f 84 3c 02 00 00    	je     c000d3c0 <loadACPITables(unsigned char*)+0x258>
c000d184:	a0 a0 1a 02 c0       	mov    al,ds:0xc0021aa0
c000d189:	84 c0                	test   al,al
c000d18b:	74 77                	je     c000d204 <loadACPITables(unsigned char*)+0x9c>
c000d18d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d191:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d195:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d199:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d19c:	83 e8 24             	sub    eax,0x24
c000d19f:	c1 e8 03             	shr    eax,0x3
c000d1a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1a6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d1ae:	66 90                	xchg   ax,ax
c000d1b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d1b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d1b8:	0f 8d b6 00 00 00    	jge    c000d274 <loadACPITables(unsigned char*)+0x10c>
c000d1be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1c2:	83 c0 24             	add    eax,0x24
c000d1c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d1c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d1cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d1d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d1d5:	c1 e0 03             	shl    eax,0x3
c000d1d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d1dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d1e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d1e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1e5:	89 c1                	mov    ecx,eax
c000d1e7:	a1 8c 18 02 c0       	mov    eax,ds:0xc002188c
c000d1ec:	8d 50 01             	lea    edx,[eax+0x1]
c000d1ef:	89 15 8c 18 02 c0    	mov    DWORD PTR ds:0xc002188c,edx
c000d1f5:	89 ca                	mov    edx,ecx
c000d1f7:	89 14 c5 a4 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde75c],edx
c000d1fe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d202:	eb ac                	jmp    c000d1b0 <loadACPITables(unsigned char*)+0x48>
c000d204:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d213:	83 e8 24             	sub    eax,0x24
c000d216:	c1 e8 02             	shr    eax,0x2
c000d219:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d21d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d225:	8d 76 00             	lea    esi,[esi+0x0]
c000d228:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d22c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d230:	7d 42                	jge    c000d274 <loadACPITables(unsigned char*)+0x10c>
c000d232:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d236:	83 c0 24             	add    eax,0x24
c000d239:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d23d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d241:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d245:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d249:	c1 e0 02             	shl    eax,0x2
c000d24c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d250:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d254:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d256:	a1 8c 18 02 c0       	mov    eax,ds:0xc002188c
c000d25b:	8d 50 01             	lea    edx,[eax+0x1]
c000d25e:	89 15 8c 18 02 c0    	mov    DWORD PTR ds:0xc002188c,edx
c000d264:	89 ca                	mov    edx,ecx
c000d266:	89 14 c5 a4 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde75c],edx
c000d26d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d271:	eb b5                	jmp    c000d228 <loadACPITables(unsigned char*)+0xc0>
c000d273:	90                   	nop
c000d274:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d27c:	a1 8c 18 02 c0       	mov    eax,ds:0xc002188c
c000d281:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d285:	0f 8d 39 01 00 00    	jge    c000d3c4 <loadACPITables(unsigned char*)+0x25c>
c000d28b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d28f:	8b 04 c5 a4 18 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde75c]
c000d296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d29e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2a6:	25 ff 0f 00 00       	and    eax,0xfff
c000d2ab:	89 c6                	mov    esi,eax
c000d2ad:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c000d2b3:	83 ec 0c             	sub    esp,0xc
c000d2b6:	6a 01                	push   0x1
c000d2b8:	e8 e0 b3 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d2c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d2ca:	83 ec 0c             	sub    esp,0xc
c000d2cd:	6a 01                	push   0x1
c000d2cf:	6a 01                	push   0x1
c000d2d1:	50                   	push   eax
c000d2d2:	52                   	push   edx
c000d2d3:	53                   	push   ebx
c000d2d4:	e8 53 bd ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d2d9:	83 c4 20             	add    esp,0x20
c000d2dc:	09 f0                	or     eax,esi
c000d2de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d2e6:	c1 e0 03             	shl    eax,0x3
c000d2e9:	05 a0 18 02 c0       	add    eax,0xc00218a0
c000d2ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d30e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d312:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d316:	89 c6                	mov    esi,eax
c000d318:	89 d7                	mov    edi,edx
c000d31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d31c:	89 c8                	mov    eax,ecx
c000d31e:	89 fa                	mov    edx,edi
c000d320:	89 f3                	mov    ebx,esi
c000d322:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d326:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d32a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d33d:	05 00 10 00 00       	add    eax,0x1000
c000d342:	c1 e8 0c             	shr    eax,0xc
c000d345:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d34d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d355:	25 ff 0f 00 00       	and    eax,0xfff
c000d35a:	89 c6                	mov    esi,eax
c000d35c:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c000d362:	83 ec 0c             	sub    esp,0xc
c000d365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d369:	e8 2f b3 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d36e:	83 c4 10             	add    esp,0x10
c000d371:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d375:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d37b:	83 ec 0c             	sub    esp,0xc
c000d37e:	6a 01                	push   0x1
c000d380:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d384:	50                   	push   eax
c000d385:	52                   	push   edx
c000d386:	53                   	push   ebx
c000d387:	e8 a0 bc ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d38c:	83 c4 20             	add    esp,0x20
c000d38f:	09 f0                	or     eax,esi
c000d391:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 2b b6 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d3ad:	89 14 c5 a4 18 02 c0 	mov    DWORD PTR [eax*8-0x3ffde75c],edx
c000d3b4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d3b8:	e9 bf fe ff ff       	jmp    c000d27c <loadACPITables(unsigned char*)+0x114>
c000d3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c0:	90                   	nop
c000d3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c4:	83 c4 60             	add    esp,0x60
c000d3c7:	5b                   	pop    ebx
c000d3c8:	5e                   	pop    esi
c000d3c9:	5f                   	pop    edi
c000d3ca:	c3                   	ret    
c000d3cb:	90                   	nop

c000d3cc <findRSDT(unsigned char*)>:
c000d3cc:	57                   	push   edi
c000d3cd:	56                   	push   esi
c000d3ce:	53                   	push   ebx
c000d3cf:	83 ec 50             	sub    esp,0x50
c000d3d2:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d3d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d3dd:	83 e0 04             	and    eax,0x4
c000d3e0:	84 c0                	test   al,al
c000d3e2:	75 0c                	jne    c000d3f0 <findRSDT(unsigned char*)+0x24>
c000d3e4:	b8 00 00 00 00       	mov    eax,0x0
c000d3e9:	e9 26 01 00 00       	jmp    c000d514 <findRSDT(unsigned char*)+0x148>
c000d3ee:	66 90                	xchg   ax,ax
c000d3f0:	89 e0                	mov    eax,esp
c000d3f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d3f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d3fe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d40a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d40e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d412:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d416:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d41a:	89 c6                	mov    esi,eax
c000d41c:	89 d7                	mov    edi,edx
c000d41e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d420:	89 c8                	mov    eax,ecx
c000d422:	89 fa                	mov    edx,edi
c000d424:	89 f3                	mov    ebx,esi
c000d426:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d42a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d42e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d432:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d436:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d43a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d446:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d44a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d452:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d456:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d45a:	25 ff 0f 00 00       	and    eax,0xfff
c000d45f:	89 c6                	mov    esi,eax
c000d461:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c000d467:	83 ec 0c             	sub    esp,0xc
c000d46a:	6a 02                	push   0x2
c000d46c:	e8 2c b2 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d478:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d47e:	83 ec 0c             	sub    esp,0xc
c000d481:	6a 01                	push   0x1
c000d483:	6a 02                	push   0x2
c000d485:	50                   	push   eax
c000d486:	52                   	push   edx
c000d487:	53                   	push   ebx
c000d488:	e8 9f bb ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d48d:	83 c4 20             	add    esp,0x20
c000d490:	09 f0                	or     eax,esi
c000d492:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d49a:	25 ff 0f 00 00       	and    eax,0xfff
c000d49f:	89 c6                	mov    esi,eax
c000d4a1:	8b 1d 90 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f390
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	6a 02                	push   0x2
c000d4ac:	e8 ec b1 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d4b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d4be:	83 ec 0c             	sub    esp,0xc
c000d4c1:	6a 01                	push   0x1
c000d4c3:	6a 02                	push   0x2
c000d4c5:	50                   	push   eax
c000d4c6:	52                   	push   edx
c000d4c7:	53                   	push   ebx
c000d4c8:	e8 5f bb ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4cd:	83 c4 20             	add    esp,0x20
c000d4d0:	09 f0                	or     eax,esi
c000d4d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4d6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d4db:	75 13                	jne    c000d4f0 <findRSDT(unsigned char*)+0x124>
c000d4dd:	c6 05 a0 1a 02 c0 00 	mov    BYTE PTR ds:0xc0021aa0,0x0
c000d4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d4e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d4ec:	eb 22                	jmp    c000d510 <findRSDT(unsigned char*)+0x144>
c000d4ee:	66 90                	xchg   ax,ax
c000d4f0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d4f5:	75 11                	jne    c000d508 <findRSDT(unsigned char*)+0x13c>
c000d4f7:	c6 05 a0 1a 02 c0 01 	mov    BYTE PTR ds:0xc0021aa0,0x1
c000d4fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d502:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d506:	eb 08                	jmp    c000d510 <findRSDT(unsigned char*)+0x144>
c000d508:	b8 00 00 00 00       	mov    eax,0x0
c000d50d:	eb 05                	jmp    c000d514 <findRSDT(unsigned char*)+0x148>
c000d50f:	90                   	nop
c000d510:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d514:	83 c4 50             	add    esp,0x50
c000d517:	5b                   	pop    ebx
c000d518:	5e                   	pop    esi
c000d519:	5f                   	pop    edi
c000d51a:	c3                   	ret    
c000d51b:	90                   	nop

c000d51c <findDataTable(unsigned char*, char*)>:
c000d51c:	83 ec 1c             	sub    esp,0x1c
c000d51f:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d524:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d52a:	83 e0 04             	and    eax,0x4
c000d52d:	84 c0                	test   al,al
c000d52f:	75 07                	jne    c000d538 <findDataTable(unsigned char*, char*)+0x1c>
c000d531:	b8 00 00 00 00       	mov    eax,0x0
c000d536:	eb 58                	jmp    c000d590 <findDataTable(unsigned char*, char*)+0x74>
c000d538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d540:	a1 8c 18 02 c0       	mov    eax,ds:0xc002188c
c000d545:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d549:	7d 3d                	jge    c000d588 <findDataTable(unsigned char*, char*)+0x6c>
c000d54b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d54f:	c1 e0 03             	shl    eax,0x3
c000d552:	05 a0 18 02 c0       	add    eax,0xc00218a0
c000d557:	83 ec 04             	sub    esp,0x4
c000d55a:	6a 04                	push   0x4
c000d55c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d560:	50                   	push   eax
c000d561:	e8 4a 2e ff ff       	call   c00003b0 <memcmp>
c000d566:	83 c4 10             	add    esp,0x10
c000d569:	85 c0                	test   eax,eax
c000d56b:	0f 94 c0             	sete   al
c000d56e:	84 c0                	test   al,al
c000d570:	74 0e                	je     c000d580 <findDataTable(unsigned char*, char*)+0x64>
c000d572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d576:	8b 04 c5 a4 18 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde75c]
c000d57d:	eb 11                	jmp    c000d590 <findDataTable(unsigned char*, char*)+0x74>
c000d57f:	90                   	nop
c000d580:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d584:	eb ba                	jmp    c000d540 <findDataTable(unsigned char*, char*)+0x24>
c000d586:	66 90                	xchg   ax,ax
c000d588:	b8 00 00 00 00       	mov    eax,0x0
c000d58d:	8d 76 00             	lea    esi,[esi+0x0]
c000d590:	83 c4 1c             	add    esp,0x1c
c000d593:	c3                   	ret    

c000d594 <scanMADT()>:
c000d594:	53                   	push   ebx
c000d595:	83 ec 38             	sub    esp,0x38
c000d598:	a1 c0 f2 01 c0       	mov    eax,ds:0xc001f2c0
c000d59d:	25 00 04 00 00       	and    eax,0x400
c000d5a2:	74 14                	je     c000d5b8 <scanMADT()+0x24>
c000d5a4:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d5a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5af:	83 e2 fb             	and    edx,0xfffffffb
c000d5b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5b8:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d5bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d5c3:	83 e0 04             	and    eax,0x4
c000d5c6:	84 c0                	test   al,al
c000d5c8:	0f 84 8a 04 00 00    	je     c000da58 <scanMADT()+0x4c4>
c000d5ce:	e8 05 fb ff ff       	call   c000d0d8 <findRSDP()>
c000d5d3:	a3 ac 1a 02 c0       	mov    ds:0xc0021aac,eax
c000d5d8:	a1 ac 1a 02 c0       	mov    eax,ds:0xc0021aac
c000d5dd:	85 c0                	test   eax,eax
c000d5df:	75 1b                	jne    c000d5fc <scanMADT()+0x68>
c000d5e1:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d5e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5ec:	83 e2 fb             	and    edx,0xfffffffb
c000d5ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5f5:	e9 66 04 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	a1 ac 1a 02 c0       	mov    eax,ds:0xc0021aac
c000d601:	83 ec 0c             	sub    esp,0xc
c000d604:	50                   	push   eax
c000d605:	e8 c2 fd ff ff       	call   c000d3cc <findRSDT(unsigned char*)>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	a3 a8 1a 02 c0       	mov    ds:0xc0021aa8,eax
c000d612:	a1 a8 1a 02 c0       	mov    eax,ds:0xc0021aa8
c000d617:	85 c0                	test   eax,eax
c000d619:	75 19                	jne    c000d634 <scanMADT()+0xa0>
c000d61b:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d620:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d626:	83 e2 fb             	and    edx,0xfffffffb
c000d629:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d62f:	e9 2c 04 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d634:	a1 a8 1a 02 c0       	mov    eax,ds:0xc0021aa8
c000d639:	83 ec 0c             	sub    esp,0xc
c000d63c:	50                   	push   eax
c000d63d:	e8 26 fb ff ff       	call   c000d168 <loadACPITables(unsigned char*)>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	a1 a8 1a 02 c0       	mov    eax,ds:0xc0021aa8
c000d64a:	83 ec 08             	sub    esp,0x8
c000d64d:	68 c8 d7 01 c0       	push   0xc001d7c8
c000d652:	50                   	push   eax
c000d653:	e8 c4 fe ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d664:	75 1a                	jne    c000d680 <scanMADT()+0xec>
c000d666:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000d66b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d671:	83 e2 fe             	and    edx,0xfffffffe
c000d674:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d67a:	e9 e1 03 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d67f:	90                   	nop
c000d680:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d688:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d68c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d68f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d693:	0f 87 c7 03 00 00    	ja     c000da60 <scanMADT()+0x4cc>
c000d699:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d6a1:	0f 87 b9 03 00 00    	ja     c000da60 <scanMADT()+0x4cc>
c000d6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d6c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6ca:	8d 50 01             	lea    edx,[eax+0x1]
c000d6cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d6d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d6dd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d6e2:	0f 86 74 03 00 00    	jbe    c000da5c <scanMADT()+0x4c8>
c000d6e8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d6ed:	75 5d                	jne    c000d74c <scanMADT()+0x1b8>
c000d6ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6f3:	8d 50 01             	lea    edx,[eax+0x1]
c000d6f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fa:	8a 15 a0 1c 02 c0    	mov    dl,BYTE PTR ds:0xc0021ca0
c000d700:	81 e2 ff 00 00 00    	and    edx,0xff
c000d706:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d70a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d70e:	88 82 e0 1c 02 c0    	mov    BYTE PTR [edx-0x3ffde320],al
c000d714:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d718:	8d 42 01             	lea    eax,[edx+0x1]
c000d71b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d71f:	a0 a0 1c 02 c0       	mov    al,ds:0xc0021ca0
c000d724:	8d 48 01             	lea    ecx,[eax+0x1]
c000d727:	88 0d a0 1c 02 c0    	mov    BYTE PTR ds:0xc0021ca0,cl
c000d72d:	25 ff 00 00 00       	and    eax,0xff
c000d732:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d736:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d73a:	88 90 c0 1c 02 c0    	mov    BYTE PTR [eax-0x3ffde340],dl
c000d740:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d745:	e9 f6 02 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d74a:	66 90                	xchg   ax,ax
c000d74c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d751:	0f 85 29 01 00 00    	jne    c000d880 <scanMADT()+0x2ec>
c000d757:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d75b:	8d 50 01             	lea    edx,[eax+0x1]
c000d75e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d762:	8a 15 60 1b 02 c0    	mov    dl,BYTE PTR ds:0xc0021b60
c000d768:	81 e2 ff 00 00 00    	and    edx,0xff
c000d76e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d772:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d776:	88 82 80 1b 02 c0    	mov    BYTE PTR [edx-0x3ffde480],al
c000d77c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d788:	01 d0                	add    eax,edx
c000d78a:	83 c0 2c             	add    eax,0x2c
c000d78d:	8a 00                	mov    al,BYTE PTR [eax]
c000d78f:	31 d2                	xor    edx,edx
c000d791:	88 c2                	mov    dl,al
c000d793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d797:	8d 48 01             	lea    ecx,[eax+0x1]
c000d79a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d79e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d7a2:	25 ff 00 00 00       	and    eax,0xff
c000d7a7:	c1 e0 08             	shl    eax,0x8
c000d7aa:	89 d1                	mov    ecx,edx
c000d7ac:	09 c1                	or     ecx,eax
c000d7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7b2:	8d 50 02             	lea    edx,[eax+0x2]
c000d7b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7bd:	25 ff 00 00 00       	and    eax,0xff
c000d7c2:	c1 e0 10             	shl    eax,0x10
c000d7c5:	09 c1                	or     ecx,eax
c000d7c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cb:	8d 50 03             	lea    edx,[eax+0x3]
c000d7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7d6:	25 ff 00 00 00       	and    eax,0xff
c000d7db:	c1 e0 18             	shl    eax,0x18
c000d7de:	09 c1                	or     ecx,eax
c000d7e0:	89 ca                	mov    edx,ecx
c000d7e2:	a0 60 1b 02 c0       	mov    al,ds:0xc0021b60
c000d7e7:	25 ff 00 00 00       	and    eax,0xff
c000d7ec:	89 14 85 a0 1b 02 c0 	mov    DWORD PTR [eax*4-0x3ffde460],edx
c000d7f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d7f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d800:	01 d0                	add    eax,edx
c000d802:	83 c0 2c             	add    eax,0x2c
c000d805:	8a 00                	mov    al,BYTE PTR [eax]
c000d807:	31 d2                	xor    edx,edx
c000d809:	88 c2                	mov    dl,al
c000d80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d80f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d816:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d81a:	25 ff 00 00 00       	and    eax,0xff
c000d81f:	c1 e0 08             	shl    eax,0x8
c000d822:	89 d1                	mov    ecx,edx
c000d824:	09 c1                	or     ecx,eax
c000d826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d82a:	8d 50 02             	lea    edx,[eax+0x2]
c000d82d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d831:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d835:	25 ff 00 00 00       	and    eax,0xff
c000d83a:	c1 e0 10             	shl    eax,0x10
c000d83d:	09 c1                	or     ecx,eax
c000d83f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d843:	8d 50 03             	lea    edx,[eax+0x3]
c000d846:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d84a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d84e:	25 ff 00 00 00       	and    eax,0xff
c000d853:	c1 e0 18             	shl    eax,0x18
c000d856:	09 c1                	or     ecx,eax
c000d858:	89 ca                	mov    edx,ecx
c000d85a:	a0 60 1b 02 c0       	mov    al,ds:0xc0021b60
c000d85f:	25 ff 00 00 00       	and    eax,0xff
c000d864:	89 14 85 20 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3e0],edx
c000d86b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d870:	a0 60 1b 02 c0       	mov    al,ds:0xc0021b60
c000d875:	40                   	inc    eax
c000d876:	a2 60 1b 02 c0       	mov    ds:0xc0021b60,al
c000d87b:	e9 c0 01 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d880:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d885:	0f 85 fd 00 00 00    	jne    c000d988 <scanMADT()+0x3f4>
c000d88b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d88f:	8d 50 01             	lea    edx,[eax+0x1]
c000d892:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d896:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d89a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d89e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d8a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000d8a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d8b5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d8b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c1:	01 d0                	add    eax,edx
c000d8c3:	83 c0 2c             	add    eax,0x2c
c000d8c6:	8a 00                	mov    al,BYTE PTR [eax]
c000d8c8:	31 d2                	xor    edx,edx
c000d8ca:	88 c2                	mov    dl,al
c000d8cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8d0:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d8db:	25 ff 00 00 00       	and    eax,0xff
c000d8e0:	c1 e0 08             	shl    eax,0x8
c000d8e3:	89 d1                	mov    ecx,edx
c000d8e5:	09 c1                	or     ecx,eax
c000d8e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8eb:	8d 50 02             	lea    edx,[eax+0x2]
c000d8ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8f6:	25 ff 00 00 00       	and    eax,0xff
c000d8fb:	c1 e0 10             	shl    eax,0x10
c000d8fe:	09 c1                	or     ecx,eax
c000d900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d904:	8d 50 03             	lea    edx,[eax+0x3]
c000d907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d90b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d90f:	25 ff 00 00 00       	and    eax,0xff
c000d914:	c1 e0 18             	shl    eax,0x18
c000d917:	09 c8                	or     eax,ecx
c000d919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d91d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d922:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d92a:	01 d0                	add    eax,edx
c000d92c:	83 c0 2c             	add    eax,0x2c
c000d92f:	8a 00                	mov    al,BYTE PTR [eax]
c000d931:	25 ff 00 00 00       	and    eax,0xff
c000d936:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d93a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d93d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d941:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d945:	81 e2 ff 00 00 00    	and    edx,0xff
c000d94b:	c1 e2 08             	shl    edx,0x8
c000d94e:	09 d0                	or     eax,edx
c000d950:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d955:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d95a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d95e:	25 ff 00 00 00       	and    eax,0xff
c000d963:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d967:	88 90 60 ec 01 c0    	mov    BYTE PTR [eax-0x3ffe13a0],dl
c000d96d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d971:	31 d2                	xor    edx,edx
c000d973:	88 c2                	mov    dl,al
c000d975:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d97a:	66 89 84 12 40 1b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde4c0],ax
c000d982:	e9 b9 00 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d987:	90                   	nop
c000d988:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d98d:	0f 85 a1 00 00 00    	jne    c000da34 <scanMADT()+0x4a0>
c000d993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d997:	8d 50 01             	lea    edx,[eax+0x1]
c000d99a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d99e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9a6:	25 ff 00 00 00       	and    eax,0xff
c000d9ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9b7:	01 d0                	add    eax,edx
c000d9b9:	83 c0 2c             	add    eax,0x2c
c000d9bc:	8a 00                	mov    al,BYTE PTR [eax]
c000d9be:	31 d2                	xor    edx,edx
c000d9c0:	88 c2                	mov    dl,al
c000d9c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9c6:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9cd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d9d1:	25 ff 00 00 00       	and    eax,0xff
c000d9d6:	c1 e0 08             	shl    eax,0x8
c000d9d9:	09 d0                	or     eax,edx
c000d9db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9df:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d9e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9e8:	8d 50 01             	lea    edx,[eax+0x1]
c000d9eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9f3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9f7:	25 ff 00 00 00       	and    eax,0xff
c000d9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da04:	c1 e0 08             	shl    eax,0x8
c000da07:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000da0b:	89 c1                	mov    ecx,eax
c000da0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da11:	c1 e0 18             	shl    eax,0x18
c000da14:	89 c3                	mov    ebx,eax
c000da16:	a1 b0 1a 02 c0       	mov    eax,ds:0xc0021ab0
c000da1b:	8d 50 01             	lea    edx,[eax+0x1]
c000da1e:	89 15 b0 1a 02 c0    	mov    DWORD PTR ds:0xc0021ab0,edx
c000da24:	09 d9                	or     ecx,ebx
c000da26:	89 ca                	mov    edx,ecx
c000da28:	89 14 85 c0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde540],edx
c000da2f:	eb 0f                	jmp    c000da40 <scanMADT()+0x4ac>
c000da31:	8d 76 00             	lea    esi,[esi+0x0]
c000da34:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000da39:	75 05                	jne    c000da40 <scanMADT()+0x4ac>
c000da3b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000da40:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000da44:	31 d2                	xor    edx,edx
c000da46:	88 c2                	mov    dl,al
c000da48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da4c:	01 d0                	add    eax,edx
c000da4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000da52:	e9 31 fc ff ff       	jmp    c000d688 <scanMADT()+0xf4>
c000da57:	90                   	nop
c000da58:	90                   	nop
c000da59:	eb 05                	jmp    c000da60 <scanMADT()+0x4cc>
c000da5b:	90                   	nop
c000da5c:	90                   	nop
c000da5d:	8d 76 00             	lea    esi,[esi+0x0]
c000da60:	83 c4 38             	add    esp,0x38
c000da63:	5b                   	pop    ebx
c000da64:	c3                   	ret    
c000da65:	90                   	nop
c000da66:	66 90                	xchg   ax,ax

c000da68 <ACPI::ACPI()>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6f:	83 ec 08             	sub    esp,0x8
c000da72:	68 cd d7 01 c0       	push   0xc001d7cd
c000da77:	50                   	push   eax
c000da78:	e8 4b d4 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c000da85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da89:	89 10                	mov    DWORD PTR [eax],edx
c000da8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000daa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dab2:	e8 dd fa ff ff       	call   c000d594 <scanMADT()>
c000dab7:	90                   	nop
c000dab8:	83 c4 0c             	add    esp,0xc
c000dabb:	c3                   	ret    

c000dabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dabc:	83 ec 2c             	sub    esp,0x2c
c000dabf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dac7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dacb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dacf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dad4:	88 d0                	mov    al,dl
c000dad6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dada:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dadf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dae7:	90                   	nop
c000dae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000daf2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000daf6:	0f 8d 9c 00 00 00    	jge    c000db98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dafc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db04:	83 c2 2a             	add    edx,0x2a
c000db07:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000db0b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000db10:	75 7a                	jne    c000db8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db1a:	83 c2 2a             	add    edx,0x2a
c000db1d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000db21:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000db25:	75 65                	jne    c000db8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db27:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000db2c:	74 3a                	je     c000db68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000db2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db36:	83 c2 2a             	add    edx,0x2a
c000db39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000db3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db44:	39 c2                	cmp    edx,eax
c000db46:	74 10                	je     c000db58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	68 48 d7 01 c0       	push   0xc001d748
c000db50:	e8 ea 18 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	83 ec 0c             	sub    esp,0xc
c000db5b:	68 d2 d7 01 c0       	push   0xc001d7d2
c000db60:	e8 da 18 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000db6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db74:	83 c2 2a             	add    edx,0x2a
c000db77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000db7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000db7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000db80:	89 01                	mov    DWORD PTR [ecx],eax
c000db82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000db85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db8a:	66 90                	xchg   ax,ax
c000db8c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000db90:	e9 53 ff ff ff       	jmp    c000dae8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000db95:	8d 76 00             	lea    esi,[esi+0x0]
c000db98:	90                   	nop
c000db99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db9d:	83 c4 2c             	add    esp,0x2c
c000dba0:	c2 04 00             	ret    0x4
c000dba3:	90                   	nop

c000dba4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dba4:	83 ec 1c             	sub    esp,0x1c
c000dba7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dbb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dbb8:	88 c8                	mov    al,cl
c000dbba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dbbe:	88 d0                	mov    al,dl
c000dbc0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dbd5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dbd9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dbe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbeb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dbee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbf2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc01:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dc05:	8d 48 01             	lea    ecx,[eax+0x1]
c000dc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0c:	83 c2 2a             	add    edx,0x2a
c000dc0f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc17:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc21:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dc24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dc28:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc30:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc36:	8d 50 01             	lea    edx,[eax+0x1]
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc4d:	3d 00 02 00 00       	cmp    eax,0x200
c000dc52:	75 10                	jne    c000dc64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	68 e1 d7 01 c0       	push   0xc001d7e1
c000dc5c:	e8 de 17 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dc61:	83 c4 10             	add    esp,0x10
c000dc64:	90                   	nop
c000dc65:	83 c4 1c             	add    esp,0x1c
c000dc68:	c3                   	ret    
c000dc69:	90                   	nop
c000dc6a:	66 90                	xchg   ax,ax

c000dc6c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dc6c:	b8 00 00 00 00       	mov    eax,0x0
c000dc71:	c3                   	ret    
c000dc72:	66 90                	xchg   ax,ax

c000dc74 <ACPI::detectPCI()>:
c000dc74:	53                   	push   ebx
c000dc75:	83 ec 28             	sub    esp,0x28
c000dc78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dc82:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000dc87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc8d:	83 e0 04             	and    eax,0x4
c000dc90:	84 c0                	test   al,al
c000dc92:	74 2c                	je     c000dcc0 <ACPI::detectPCI()+0x4c>
c000dc94:	a1 a8 1a 02 c0       	mov    eax,ds:0xc0021aa8
c000dc99:	83 ec 08             	sub    esp,0x8
c000dc9c:	68 fe d7 01 c0       	push   0xc001d7fe
c000dca1:	50                   	push   eax
c000dca2:	e8 75 f8 ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000dca7:	83 c4 10             	add    esp,0x10
c000dcaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000dcb3:	74 0b                	je     c000dcc0 <ACPI::detectPCI()+0x4c>
c000dcb5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dcbf:	90                   	nop
c000dcc0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000dcc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dccc:	8a 00                	mov    al,BYTE PTR [eax]
c000dcce:	3c 01                	cmp    al,0x1
c000dcd0:	75 0e                	jne    c000dce0 <ACPI::detectPCI()+0x6c>
c000dcd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dcdc:	eb 2a                	jmp    c000dd08 <ACPI::detectPCI()+0x94>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dce4:	8a 00                	mov    al,BYTE PTR [eax]
c000dce6:	3c 02                	cmp    al,0x2
c000dce8:	75 1e                	jne    c000dd08 <ACPI::detectPCI()+0x94>
c000dcea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dcf4:	74 12                	je     c000dd08 <ACPI::detectPCI()+0x94>
c000dcf6:	83 ec 0c             	sub    esp,0xc
c000dcf9:	68 78 d7 01 c0       	push   0xc001d778
c000dcfe:	e8 3c 17 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	66 90                	xchg   ax,ax
c000dd08:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000dd0c:	83 f0 01             	xor    eax,0x1
c000dd0f:	84 c0                	test   al,al
c000dd11:	74 41                	je     c000dd54 <ACPI::detectPCI()+0xe0>
c000dd13:	e8 38 24 ff ff       	call   c0000150 <manualPCIProbe>
c000dd18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd1c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd21:	75 0d                	jne    c000dd30 <ACPI::detectPCI()+0xbc>
c000dd23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd28:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dd2d:	eb 25                	jmp    c000dd54 <ACPI::detectPCI()+0xe0>
c000dd2f:	90                   	nop
c000dd30:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000dd35:	75 1d                	jne    c000dd54 <ACPI::detectPCI()+0xe0>
c000dd37:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd3c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dd41:	74 11                	je     c000dd54 <ACPI::detectPCI()+0xe0>
c000dd43:	83 ec 0c             	sub    esp,0xc
c000dd46:	68 78 d7 01 c0       	push   0xc001d778
c000dd4b:	e8 ef 16 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dd50:	83 c4 10             	add    esp,0x10
c000dd53:	90                   	nop
c000dd54:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dd59:	0f 84 85 00 00 00    	je     c000dde4 <ACPI::detectPCI()+0x170>
c000dd5f:	83 ec 0c             	sub    esp,0xc
c000dd62:	68 03 d8 01 c0       	push   0xc001d803
c000dd67:	e8 4f 8e ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000dd77:	83 ec 0c             	sub    esp,0xc
c000dd7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd7e:	e8 de 8d ff ff       	call   c0006b61 <malloc>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 c3                	mov    ebx,eax
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	53                   	push   ebx
c000dd8c:	e8 45 9b 00 00       	call   c00178d6 <PCI::PCI()>
c000dd91:	83 c4 10             	add    esp,0x10
c000dd94:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd9c:	83 ec 08             	sub    esp,0x8
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	50                   	push   eax
c000dda4:	e8 87 cf ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000dda9:	83 c4 10             	add    esp,0x10
c000ddac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddb2:	83 c0 08             	add    eax,0x8
c000ddb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddb7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ddbc:	74 0a                	je     c000ddc8 <ACPI::detectPCI()+0x154>
c000ddbe:	ba 01 00 00 00       	mov    edx,0x1
c000ddc3:	eb 0b                	jmp    c000ddd0 <ACPI::detectPCI()+0x15c>
c000ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc8:	ba 02 00 00 00       	mov    edx,0x2
c000ddcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd0:	6a 00                	push   0x0
c000ddd2:	6a 00                	push   0x0
c000ddd4:	52                   	push   edx
c000ddd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddd9:	ff d0                	call   eax
c000dddb:	83 c4 10             	add    esp,0x10
c000ddde:	e9 91 00 00 00       	jmp    c000de74 <ACPI::detectPCI()+0x200>
c000dde3:	90                   	nop
c000dde4:	83 ec 0c             	sub    esp,0xc
c000dde7:	68 1b d8 01 c0       	push   0xc001d81b
c000ddec:	e8 ca 8d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de02:	e8 5a 8d ff ff       	call   c0006b61 <malloc>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	89 c3                	mov    ebx,eax
c000de0c:	83 ec 0c             	sub    esp,0xc
c000de0f:	53                   	push   ebx
c000de10:	e8 ed a5 00 00       	call   c0018402 <IDE::IDE()>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000de1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de20:	83 ec 08             	sub    esp,0x8
c000de23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de27:	50                   	push   eax
c000de28:	e8 03 cf ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de34:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000de3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de42:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000de4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de4f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000de58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de5e:	83 c0 08             	add    eax,0x8
c000de61:	8b 00                	mov    eax,DWORD PTR [eax]
c000de63:	6a 00                	push   0x0
c000de65:	6a 00                	push   0x0
c000de67:	6a 00                	push   0x0
c000de69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6d:	ff d0                	call   eax
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	66 90                	xchg   ax,ax
c000de74:	90                   	nop
c000de75:	83 c4 28             	add    esp,0x28
c000de78:	5b                   	pop    ebx
c000de79:	c3                   	ret    
c000de7a:	66 90                	xchg   ax,ax

c000de7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000de7c:	83 ec 1c             	sub    esp,0x1c
c000de7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000de83:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de8a:	8b 15 a8 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2a8
c000de90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de94:	25 ff 00 00 00       	and    eax,0xff
c000de99:	83 ec 08             	sub    esp,0x8
c000de9c:	50                   	push   eax
c000de9d:	52                   	push   edx
c000de9e:	e8 6b 83 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000deaa:	8b 15 a8 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2a8
c000deb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000deb4:	25 ff 00 00 00       	and    eax,0xff
c000deb9:	83 ec 04             	sub    esp,0x4
c000debc:	6a 01                	push   0x1
c000debe:	50                   	push   eax
c000debf:	52                   	push   edx
c000dec0:	e8 5f 84 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	90                   	nop
c000dec9:	83 c4 1c             	add    esp,0x1c
c000decc:	c3                   	ret    
c000decd:	90                   	nop
c000dece:	66 90                	xchg   ax,ax

c000ded0 <ACPI::sleep()>:
c000ded0:	83 ec 0c             	sub    esp,0xc
c000ded3:	a1 80 18 02 c0       	mov    eax,ds:0xc0021880
c000ded8:	85 c0                	test   eax,eax
c000deda:	74 08                	je     c000dee4 <ACPI::sleep()+0x14>
c000dedc:	a1 80 18 02 c0       	mov    eax,ds:0xc0021880
c000dee1:	ff d0                	call   eax
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	83 c4 0c             	add    esp,0xc
c000dee8:	c3                   	ret    
c000dee9:	90                   	nop
c000deea:	66 90                	xchg   ax,ax

c000deec <ACPI::open(int, int, void*)>:
c000deec:	57                   	push   edi
c000deed:	56                   	push   esi
c000deee:	53                   	push   ebx
c000deef:	81 ec 70 01 00 00    	sub    esp,0x170
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000deff:	e8 70 fd ff ff       	call   c000dc74 <ACPI::detectPCI()>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	83 ec 0c             	sub    esp,0xc
c000df0a:	68 a0 d7 01 c0       	push   0xc001d7a0
c000df0f:	e8 a7 8c ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	83 ec 0c             	sub    esp,0xc
c000df1a:	68 30 d8 01 c0       	push   0xc001d830
c000df1f:	e8 07 34 00 00       	call   c001132b <Thr::loadKernelSymbolTable(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000df2f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000df3a:	83 ec 0c             	sub    esp,0xc
c000df3d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000df44:	e8 18 8c ff ff       	call   c0006b61 <malloc>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	89 c3                	mov    ebx,eax
c000df4e:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c000df53:	83 ec 04             	sub    esp,0x4
c000df56:	50                   	push   eax
c000df57:	68 4e d8 01 c0       	push   0xc001d84e
c000df5c:	53                   	push   ebx
c000df5d:	e8 04 bf ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000df6c:	83 ec 08             	sub    esp,0x8
c000df6f:	6a 01                	push   0x1
c000df71:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df78:	e8 a9 bf ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000df87:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000df8f:	75 17                	jne    c000dfa8 <ACPI::open(int, int, void*)+0xbc>
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df9b:	e8 e4 bf ff ff       	call   c0009f84 <File::close()>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	eb 0b                	jmp    c000dfb0 <ACPI::open(int, int, void*)+0xc4>
c000dfa5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfa8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000dfb0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000dfb8:	74 1e                	je     c000dfd8 <ACPI::open(int, int, void*)+0xec>
c000dfba:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000dfc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfc3:	83 c0 08             	add    eax,0x8
c000dfc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dfd2:	ff d0                	call   eax
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	90                   	nop
c000dfd8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000dfdf:	83 f0 01             	xor    eax,0x1
c000dfe2:	84 c0                	test   al,al
c000dfe4:	74 42                	je     c000e028 <ACPI::open(int, int, void*)+0x13c>
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	68 6c d8 01 c0       	push   0xc001d86c
c000dfee:	e8 c8 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	83 ec 04             	sub    esp,0x4
c000dff9:	6a 0c                	push   0xc
c000dffb:	68 87 d8 01 c0       	push   0xc001d887
c000e000:	68 98 d8 01 c0       	push   0xc001d898
c000e005:	e8 20 1b 00 00       	call   c000fb2a <Reg::readIntWithDefault(char*, char*, int)>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e01e:	e8 84 a8 ff ff       	call   c00088a7 <Virt::setupPageSwapping(int)>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	66 90                	xchg   ax,ax
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	68 0f c9 01 c0       	push   0xc001c90f
c000e030:	e8 86 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e03f:	83 ec 08             	sub    esp,0x8
c000e042:	6a 12                	push   0x12
c000e044:	50                   	push   eax
c000e045:	e8 fe cf ff ff       	call   c000b048 <getDevicesOfType(DeviceType)>
c000e04a:	83 c4 0c             	add    esp,0xc
c000e04d:	8d 76 00             	lea    esi,[esi+0x0]
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e05a:	50                   	push   eax
c000e05b:	e8 bc dc 00 00       	call   c001bd1c <LinkedList<Device>::isEmpty()>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	83 f0 01             	xor    eax,0x1
c000e066:	84 c0                	test   al,al
c000e068:	0f 84 46 01 00 00    	je     c000e1b4 <ACPI::open(int, int, void*)+0x2c8>
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e078:	50                   	push   eax
c000e079:	e8 ba dc 00 00       	call   c001bd38 <LinkedList<Device>::getFirstElement()>
c000e07e:	83 c4 10             	add    esp,0x10
c000e081:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e088:	83 ec 0c             	sub    esp,0xc
c000e08b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e092:	50                   	push   eax
c000e093:	e8 a8 dc 00 00       	call   c001bd40 <LinkedList<Device>::removeFirst()>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e0a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e0a9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e0b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e0b4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e0ba:	ba 09 00 00 00       	mov    edx,0x9
c000e0bf:	fc                   	cld    
c000e0c0:	89 c7                	mov    edi,eax
c000e0c2:	89 de                	mov    esi,ebx
c000e0c4:	89 d1                	mov    ecx,edx
c000e0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0c8:	83 ec 08             	sub    esp,0x8
c000e0cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e0cf:	50                   	push   eax
c000e0d0:	83 ec 24             	sub    esp,0x24
c000e0d3:	89 e0                	mov    eax,esp
c000e0d5:	89 c3                	mov    ebx,eax
c000e0d7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e0db:	ba 09 00 00 00       	mov    edx,0x9
c000e0e0:	89 df                	mov    edi,ebx
c000e0e2:	89 c6                	mov    esi,eax
c000e0e4:	89 d1                	mov    ecx,edx
c000e0e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0e8:	e8 cb 9c 00 00       	call   c0017db8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e0ed:	83 c4 30             	add    esp,0x30
c000e0f0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e0f7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e0ff:	0f 84 4b ff ff ff    	je     c000e050 <ACPI::open(int, int, void*)+0x164>
c000e105:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e11a:	e8 42 8a ff ff       	call   c0006b61 <malloc>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	89 c3                	mov    ebx,eax
c000e124:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c000e129:	83 ec 04             	sub    esp,0x4
c000e12c:	50                   	push   eax
c000e12d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e134:	53                   	push   ebx
c000e135:	e8 2c bd ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e144:	83 ec 0c             	sub    esp,0xc
c000e147:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e14e:	e8 41 c0 ff ff       	call   c000a194 <File::exists()>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	84 c0                	test   al,al
c000e158:	74 2a                	je     c000e184 <ACPI::open(int, int, void*)+0x298>
c000e15a:	83 ec 08             	sub    esp,0x8
c000e15d:	6a 01                	push   0x1
c000e15f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e166:	e8 37 3c 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	83 ec 08             	sub    esp,0x8
c000e171:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e178:	50                   	push   eax
c000e179:	e8 55 3e 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000e17e:	83 c4 10             	add    esp,0x10
c000e181:	8d 76 00             	lea    esi,[esi+0x0]
c000e184:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e18c:	0f 84 be fe ff ff    	je     c000e050 <ACPI::open(int, int, void*)+0x164>
c000e192:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e199:	8b 00                	mov    eax,DWORD PTR [eax]
c000e19b:	83 c0 08             	add    eax,0x8
c000e19e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1a0:	83 ec 0c             	sub    esp,0xc
c000e1a3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e1aa:	ff d0                	call   eax
c000e1ac:	83 c4 10             	add    esp,0x10
c000e1af:	e9 9c fe ff ff       	jmp    c000e050 <ACPI::open(int, int, void*)+0x164>
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1be:	50                   	push   eax
c000e1bf:	e8 54 db 00 00       	call   c001bd18 <LinkedList<Device>::~LinkedList()>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	8b 1d a8 f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2a8
c000e1cd:	83 ec 08             	sub    esp,0x8
c000e1d0:	6a 01                	push   0x1
c000e1d2:	68 9f d8 01 c0       	push   0xc001d89f
c000e1d7:	e8 c6 3b 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	83 ec 08             	sub    esp,0x8
c000e1e2:	53                   	push   ebx
c000e1e3:	50                   	push   eax
c000e1e4:	e8 ea 3d 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000e1e9:	83 c4 10             	add    esp,0x10
c000e1ec:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000e1f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1f7:	83 e0 04             	and    eax,0x4
c000e1fa:	84 c0                	test   al,al
c000e1fc:	0f 84 16 01 00 00    	je     c000e318 <ACPI::open(int, int, void*)+0x42c>
c000e202:	83 ec 0c             	sub    esp,0xc
c000e205:	68 bc d8 01 c0       	push   0xc001d8bc
c000e20a:	e8 ac 89 ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e21d:	83 ec 0c             	sub    esp,0xc
c000e220:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e227:	e8 35 89 ff ff       	call   c0006b61 <malloc>
c000e22c:	83 c4 10             	add    esp,0x10
c000e22f:	89 c3                	mov    ebx,eax
c000e231:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c000e236:	83 ec 04             	sub    esp,0x4
c000e239:	50                   	push   eax
c000e23a:	68 d9 d8 01 c0       	push   0xc001d8d9
c000e23f:	53                   	push   ebx
c000e240:	e8 21 bc ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e24f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e257:	74 1b                	je     c000e274 <ACPI::open(int, int, void*)+0x388>
c000e259:	83 ec 0c             	sub    esp,0xc
c000e25c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e263:	e8 2c bf ff ff       	call   c000a194 <File::exists()>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	84 c0                	test   al,al
c000e26d:	74 05                	je     c000e274 <ACPI::open(int, int, void*)+0x388>
c000e26f:	b0 01                	mov    al,0x1
c000e271:	eb 05                	jmp    c000e278 <ACPI::open(int, int, void*)+0x38c>
c000e273:	90                   	nop
c000e274:	b0 00                	mov    al,0x0
c000e276:	66 90                	xchg   ax,ax
c000e278:	84 c0                	test   al,al
c000e27a:	74 28                	je     c000e2a4 <ACPI::open(int, int, void*)+0x3b8>
c000e27c:	83 ec 08             	sub    esp,0x8
c000e27f:	6a 01                	push   0x1
c000e281:	68 d9 d8 01 c0       	push   0xc001d8d9
c000e286:	e8 17 3b 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000e28b:	83 c4 10             	add    esp,0x10
c000e28e:	83 ec 08             	sub    esp,0x8
c000e291:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e298:	50                   	push   eax
c000e299:	e8 35 3d 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2ac:	74 2a                	je     c000e2d8 <ACPI::open(int, int, void*)+0x3ec>
c000e2ae:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2b6:	74 20                	je     c000e2d8 <ACPI::open(int, int, void*)+0x3ec>
c000e2b8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e2bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c1:	83 c0 08             	add    eax,0x8
c000e2c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c6:	83 ec 0c             	sub    esp,0xc
c000e2c9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e2d0:	ff d0                	call   eax
c000e2d2:	83 c4 10             	add    esp,0x10
c000e2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d8:	a1 a8 1a 02 c0       	mov    eax,ds:0xc0021aa8
c000e2dd:	83 ec 08             	sub    esp,0x8
c000e2e0:	68 f6 d8 01 c0       	push   0xc001d8f6
c000e2e5:	50                   	push   eax
c000e2e6:	e8 31 f2 ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000e2eb:	83 c4 10             	add    esp,0x10
c000e2ee:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e2f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e2fd:	74 19                	je     c000e318 <ACPI::open(int, int, void*)+0x42c>
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e309:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e310:	e8 67 fb ff ff       	call   c000de7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	b8 00 00 00 00       	mov    eax,0x0
c000e31d:	81 c4 70 01 00 00    	add    esp,0x170
c000e323:	5b                   	pop    ebx
c000e324:	5e                   	pop    esi
c000e325:	5f                   	pop    edi
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <CPU::close(int, int, void*)>:
c000e328:	31 c0                	xor    eax,eax
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e32c:	60                   	pusha  
c000e32d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e339:	9c                   	pushf  
c000e33a:	fa                   	cli    
c000e33b:	0f 09                	wbinvd 
c000e33d:	0f 30                	wrmsr  
c000e33f:	9d                   	popf   
c000e340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e344:	89 02                	mov    DWORD PTR [edx],eax
c000e346:	61                   	popa   
c000e347:	c3                   	ret    

c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e348:	60                   	pusha  
c000e349:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e34d:	9c                   	pushf  
c000e34e:	fa                   	cli    
c000e34f:	0f 09                	wbinvd 
c000e351:	31 c0                	xor    eax,eax
c000e353:	31 d2                	xor    edx,edx
c000e355:	0f 32                	rdmsr  
c000e357:	9d                   	popf   
c000e358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e35c:	89 02                	mov    DWORD PTR [edx],eax
c000e35e:	61                   	popa   
c000e35f:	c3                   	ret    

c000e360 <CPU::AMD_K6_writeback(int, int, int)>:
c000e360:	56                   	push   esi
c000e361:	53                   	push   ebx
c000e362:	83 ec 10             	sub    esp,0x10
c000e365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e369:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e36e:	75 5d                	jne    c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e370:	83 f8 08             	cmp    eax,0x8
c000e373:	75 09                	jne    c000e37e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e375:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e37a:	7e 13                	jle    c000e38f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e37c:	eb 30                	jmp    c000e3ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e37e:	83 f8 06             	cmp    eax,0x6
c000e381:	7c 4a                	jl     c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e383:	83 f8 07             	cmp    eax,0x7
c000e386:	7e 07                	jle    c000e38f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e388:	83 f8 09             	cmp    eax,0x9
c000e38b:	74 21                	je     c000e3ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e38d:	eb 3e                	jmp    c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e38f:	89 e6                	mov    esi,esp
c000e391:	8b 1d cc f2 01 c0    	mov    ebx,DWORD PTR ds:0xc001f2cc
c000e397:	56                   	push   esi
c000e398:	c1 eb 15             	shr    ebx,0x15
c000e39b:	68 82 00 00 c0       	push   0xc0000082
c000e3a0:	83 e3 7e             	and    ebx,0x7e
c000e3a3:	e8 a0 ff ff ff       	call   c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3a8:	56                   	push   esi
c000e3a9:	6a 00                	push   0x0
c000e3ab:	53                   	push   ebx
c000e3ac:	eb 12                	jmp    c000e3c0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e3ae:	89 e3                	mov    ebx,esp
c000e3b0:	53                   	push   ebx
c000e3b1:	68 82 00 00 c0       	push   0xc0000082
c000e3b6:	e8 8d ff ff ff       	call   c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3bb:	53                   	push   ebx
c000e3bc:	6a 00                	push   0x0
c000e3be:	6a 00                	push   0x0
c000e3c0:	68 82 00 00 c0       	push   0xc0000082
c000e3c5:	e8 62 ff ff ff       	call   c000e32c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e3ca:	83 c4 18             	add    esp,0x18
c000e3cd:	83 c4 10             	add    esp,0x10
c000e3d0:	5b                   	pop    ebx
c000e3d1:	5e                   	pop    esi
c000e3d2:	c3                   	ret    
c000e3d3:	90                   	nop

c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e3d4:	55                   	push   ebp
c000e3d5:	57                   	push   edi
c000e3d6:	56                   	push   esi
c000e3d7:	53                   	push   ebx
c000e3d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e3e8:	39 05 70 ec 01 c0    	cmp    DWORD PTR ds:0xc001ec70,eax
c000e3ee:	75 23                	jne    c000e413 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e3f0:	a1 0c 1d 02 c0       	mov    eax,ds:0xc0021d0c
c000e3f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3f9:	89 06                	mov    DWORD PTR [esi],eax
c000e3fb:	a1 08 1d 02 c0       	mov    eax,ds:0xc0021d08
c000e400:	89 07                	mov    DWORD PTR [edi],eax
c000e402:	a1 04 1d 02 c0       	mov    eax,ds:0xc0021d04
c000e407:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e40a:	a1 00 1d 02 c0       	mov    eax,ds:0xc0021d00
c000e40f:	89 02                	mov    DWORD PTR [edx],eax
c000e411:	eb 3f                	jmp    c000e452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e413:	31 c9                	xor    ecx,ecx
c000e415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e419:	0f a2                	cpuid  
c000e41b:	89 06                	mov    DWORD PTR [esi],eax
c000e41d:	89 1f                	mov    DWORD PTR [edi],ebx
c000e41f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e423:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e426:	89 10                	mov    DWORD PTR [eax],edx
c000e428:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e42c:	a3 70 ec 01 c0       	mov    ds:0xc001ec70,eax
c000e431:	8b 06                	mov    eax,DWORD PTR [esi]
c000e433:	a3 0c 1d 02 c0       	mov    ds:0xc0021d0c,eax
c000e438:	8b 07                	mov    eax,DWORD PTR [edi]
c000e43a:	a3 08 1d 02 c0       	mov    ds:0xc0021d08,eax
c000e43f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e442:	a3 04 1d 02 c0       	mov    ds:0xc0021d04,eax
c000e447:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e44b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e44d:	a3 00 1d 02 c0       	mov    ds:0xc0021d00,eax
c000e452:	5b                   	pop    ebx
c000e453:	5e                   	pop    esi
c000e454:	5f                   	pop    edi
c000e455:	5d                   	pop    ebp
c000e456:	c3                   	ret    
c000e457:	90                   	nop

c000e458 <CPU::cpuidCheckEDX(unsigned int)>:
c000e458:	83 ec 10             	sub    esp,0x10
c000e45b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e45f:	50                   	push   eax
c000e460:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e464:	50                   	push   eax
c000e465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e469:	50                   	push   eax
c000e46a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e46e:	50                   	push   eax
c000e46f:	6a 01                	push   0x1
c000e471:	e8 5e ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e476:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e47a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e47e:	0f 95 c0             	setne  al
c000e481:	83 c4 24             	add    esp,0x24
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <CPU::cpuidCheckECX(unsigned int)>:
c000e486:	83 ec 10             	sub    esp,0x10
c000e489:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e48d:	50                   	push   eax
c000e48e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e492:	50                   	push   eax
c000e493:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e497:	50                   	push   eax
c000e498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e49c:	50                   	push   eax
c000e49d:	6a 01                	push   0x1
c000e49f:	e8 30 ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e4ac:	0f 95 c0             	setne  al
c000e4af:	83 c4 24             	add    esp,0x24
c000e4b2:	c3                   	ret    
c000e4b3:	90                   	nop

c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e4b4:	83 ec 10             	sub    esp,0x10
c000e4b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4bb:	50                   	push   eax
c000e4bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c0:	50                   	push   eax
c000e4c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c5:	50                   	push   eax
c000e4c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4ca:	50                   	push   eax
c000e4cb:	6a 07                	push   0x7
c000e4cd:	e8 02 ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e4da:	0f 95 c0             	setne  al
c000e4dd:	83 c4 24             	add    esp,0x24
c000e4e0:	c3                   	ret    
c000e4e1:	90                   	nop

c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e4e2:	83 ec 10             	sub    esp,0x10
c000e4e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4e9:	50                   	push   eax
c000e4ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4ee:	50                   	push   eax
c000e4ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f3:	50                   	push   eax
c000e4f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f8:	50                   	push   eax
c000e4f9:	6a 07                	push   0x7
c000e4fb:	e8 d4 fe ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e500:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e504:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e508:	0f 95 c0             	setne  al
c000e50b:	83 c4 24             	add    esp,0x24
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <CPU::CPU()>:
c000e510:	83 ec 0c             	sub    esp,0xc
c000e513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e517:	83 ec 08             	sub    esp,0x8
c000e51a:	68 19 da 01 c0       	push   0xc001da19
c000e51f:	50                   	push   eax
c000e520:	e8 a3 c9 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000e525:	83 c4 10             	add    esp,0x10
c000e528:	ba a0 da 01 c0       	mov    edx,0xc001daa0
c000e52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e531:	89 10                	mov    DWORD PTR [eax],edx
c000e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e537:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	05 78 01 00 00       	add    eax,0x178
c000e54a:	83 ec 0c             	sub    esp,0xc
c000e54d:	50                   	push   eax
c000e54e:	e8 8f 7e ff ff       	call   c00063e2 <GDT::GDT()>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55a:	05 7c 09 00 00       	add    eax,0x97c
c000e55f:	83 ec 0c             	sub    esp,0xc
c000e562:	50                   	push   eax
c000e563:	e8 f4 80 ff ff       	call   c000665c <IDT::IDT()>
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56f:	05 7c 11 00 00       	add    eax,0x117c
c000e574:	83 ec 0c             	sub    esp,0xc
c000e577:	50                   	push   eax
c000e578:	e8 63 9a ff ff       	call   c0007fe0 <TSS::TSS()>
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e584:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e599:	90                   	nop
c000e59a:	83 c4 0c             	add    esp,0xc
c000e59d:	c3                   	ret    

c000e59e <CPU::displayFeatures()>:
c000e59e:	c3                   	ret    
c000e59f:	90                   	nop

c000e5a0 <CPU::detectFeatures()>:
c000e5a0:	55                   	push   ebp
c000e5a1:	57                   	push   edi
c000e5a2:	56                   	push   esi
c000e5a3:	53                   	push   ebx
c000e5a4:	83 ec 30             	sub    esp,0x30
c000e5a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e5ab:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e5b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e5bc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e5c2:	6a 0d                	push   0xd
c000e5c4:	6a 00                	push   0x0
c000e5c6:	55                   	push   ebp
c000e5c7:	e8 24 1f ff ff       	call   c00004f0 <memset>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000e5d4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000e5db:	0f 84 d5 05 00 00    	je     c000ebb6 <CPU::detectFeatures()+0x616>
c000e5e1:	83 ec 0c             	sub    esp,0xc
c000e5e4:	89 ef                	mov    edi,ebp
c000e5e6:	6a 10                	push   0x10
c000e5e8:	e8 6b fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e5ed:	83 e0 01             	and    eax,0x1
c000e5f0:	8d 14 00             	lea    edx,[eax+eax*1]
c000e5f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e5f9:	83 e0 fd             	and    eax,0xfffffffd
c000e5fc:	09 d0                	or     eax,edx
c000e5fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e604:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e60b:	e8 48 fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e610:	83 e0 01             	and    eax,0x1
c000e613:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e61a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e620:	83 e0 fb             	and    eax,0xfffffffb
c000e623:	09 d0                	or     eax,edx
c000e625:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e62b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e632:	e8 21 fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e637:	83 e0 01             	and    eax,0x1
c000e63a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e641:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e647:	83 e0 f7             	and    eax,0xfffffff7
c000e64a:	09 d0                	or     eax,edx
c000e64c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e652:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e659:	e8 fa fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e65e:	83 e0 01             	and    eax,0x1
c000e661:	c1 e0 04             	shl    eax,0x4
c000e664:	88 c2                	mov    dl,al
c000e666:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e66c:	83 e0 ef             	and    eax,0xffffffef
c000e66f:	09 d0                	or     eax,edx
c000e671:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e677:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e67e:	e8 d5 fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e683:	83 e0 01             	and    eax,0x1
c000e686:	c1 e0 05             	shl    eax,0x5
c000e689:	88 c2                	mov    dl,al
c000e68b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e691:	83 e0 df             	and    eax,0xffffffdf
c000e694:	09 d0                	or     eax,edx
c000e696:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e69c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e6a3:	e8 b0 fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e6a8:	83 e0 01             	and    eax,0x1
c000e6ab:	8d 14 00             	lea    edx,[eax+eax*1]
c000e6ae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e6b4:	83 e0 fd             	and    eax,0xfffffffd
c000e6b7:	09 d0                	or     eax,edx
c000e6b9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e6bf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e6c6:	e8 8d fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e6cb:	83 e0 01             	and    eax,0x1
c000e6ce:	c1 e0 06             	shl    eax,0x6
c000e6d1:	88 c2                	mov    dl,al
c000e6d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e6d9:	83 e0 bf             	and    eax,0xffffffbf
c000e6dc:	09 d0                	or     eax,edx
c000e6de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e6e4:	58                   	pop    eax
c000e6e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6e9:	50                   	push   eax
c000e6ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6ee:	50                   	push   eax
c000e6ef:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e6f3:	56                   	push   esi
c000e6f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6f8:	50                   	push   eax
c000e6f9:	6a 00                	push   0x0
c000e6fb:	e8 d4 fc ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e700:	b8 04 00 00 00       	mov    eax,0x4
c000e705:	89 c1                	mov    ecx,eax
c000e707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e709:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e70f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e713:	89 c1                	mov    ecx,eax
c000e715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e717:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e71d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e721:	89 c1                	mov    ecx,eax
c000e723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e725:	83 c4 18             	add    esp,0x18
c000e728:	68 28 d9 01 c0       	push   0xc001d928
c000e72d:	55                   	push   ebp
c000e72e:	e8 cd 1f ff ff       	call   c0000700 <strcmp>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	85 c0                	test   eax,eax
c000e738:	75 0f                	jne    c000e749 <CPU::detectFeatures()+0x1a9>
c000e73a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e744:	e9 22 02 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e749:	50                   	push   eax
c000e74a:	50                   	push   eax
c000e74b:	68 35 d9 01 c0       	push   0xc001d935
c000e750:	55                   	push   ebp
c000e751:	e8 aa 1f ff ff       	call   c0000700 <strcmp>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	85 c0                	test   eax,eax
c000e75b:	74 dd                	je     c000e73a <CPU::detectFeatures()+0x19a>
c000e75d:	50                   	push   eax
c000e75e:	50                   	push   eax
c000e75f:	68 42 d9 01 c0       	push   0xc001d942
c000e764:	55                   	push   ebp
c000e765:	e8 96 1f ff ff       	call   c0000700 <strcmp>
c000e76a:	83 c4 10             	add    esp,0x10
c000e76d:	85 c0                	test   eax,eax
c000e76f:	74 2a                	je     c000e79b <CPU::detectFeatures()+0x1fb>
c000e771:	50                   	push   eax
c000e772:	50                   	push   eax
c000e773:	68 4f d9 01 c0       	push   0xc001d94f
c000e778:	55                   	push   ebp
c000e779:	e8 82 1f ff ff       	call   c0000700 <strcmp>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	85 c0                	test   eax,eax
c000e783:	74 16                	je     c000e79b <CPU::detectFeatures()+0x1fb>
c000e785:	50                   	push   eax
c000e786:	50                   	push   eax
c000e787:	68 5c d9 01 c0       	push   0xc001d95c
c000e78c:	55                   	push   ebp
c000e78d:	e8 6e 1f ff ff       	call   c0000700 <strcmp>
c000e792:	83 c4 10             	add    esp,0x10
c000e795:	85 c0                	test   eax,eax
c000e797:	74 48                	je     c000e7e1 <CPU::detectFeatures()+0x241>
c000e799:	eb 0f                	jmp    c000e7aa <CPU::detectFeatures()+0x20a>
c000e79b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e7a5:	e9 c1 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7aa:	50                   	push   eax
c000e7ab:	50                   	push   eax
c000e7ac:	68 69 d9 01 c0       	push   0xc001d969
c000e7b1:	55                   	push   ebp
c000e7b2:	e8 49 1f ff ff       	call   c0000700 <strcmp>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	85 c0                	test   eax,eax
c000e7bc:	74 23                	je     c000e7e1 <CPU::detectFeatures()+0x241>
c000e7be:	57                   	push   edi
c000e7bf:	57                   	push   edi
c000e7c0:	68 76 d9 01 c0       	push   0xc001d976
c000e7c5:	55                   	push   ebp
c000e7c6:	e8 35 1f ff ff       	call   c0000700 <strcmp>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	85 c0                	test   eax,eax
c000e7d0:	75 1e                	jne    c000e7f0 <CPU::detectFeatures()+0x250>
c000e7d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e7dc:	e9 8a 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7e1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e7eb:	e9 7b 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7f0:	56                   	push   esi
c000e7f1:	56                   	push   esi
c000e7f2:	68 83 d9 01 c0       	push   0xc001d983
c000e7f7:	55                   	push   ebp
c000e7f8:	e8 03 1f ff ff       	call   c0000700 <strcmp>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	85 c0                	test   eax,eax
c000e802:	75 0f                	jne    c000e813 <CPU::detectFeatures()+0x273>
c000e804:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e80e:	e9 58 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e813:	51                   	push   ecx
c000e814:	51                   	push   ecx
c000e815:	68 42 d9 01 c0       	push   0xc001d942
c000e81a:	55                   	push   ebp
c000e81b:	e8 e0 1e ff ff       	call   c0000700 <strcmp>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	85 c0                	test   eax,eax
c000e825:	75 0f                	jne    c000e836 <CPU::detectFeatures()+0x296>
c000e827:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e831:	e9 35 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e836:	52                   	push   edx
c000e837:	52                   	push   edx
c000e838:	68 90 d9 01 c0       	push   0xc001d990
c000e83d:	55                   	push   ebp
c000e83e:	e8 bd 1e ff ff       	call   c0000700 <strcmp>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	85 c0                	test   eax,eax
c000e848:	75 0f                	jne    c000e859 <CPU::detectFeatures()+0x2b9>
c000e84a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e854:	e9 12 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e859:	50                   	push   eax
c000e85a:	50                   	push   eax
c000e85b:	68 9d d9 01 c0       	push   0xc001d99d
c000e860:	55                   	push   ebp
c000e861:	e8 9a 1e ff ff       	call   c0000700 <strcmp>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	85 c0                	test   eax,eax
c000e86b:	75 0f                	jne    c000e87c <CPU::detectFeatures()+0x2dc>
c000e86d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e877:	e9 ef 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e87c:	50                   	push   eax
c000e87d:	50                   	push   eax
c000e87e:	68 aa d9 01 c0       	push   0xc001d9aa
c000e883:	55                   	push   ebp
c000e884:	e8 77 1e ff ff       	call   c0000700 <strcmp>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	85 c0                	test   eax,eax
c000e88e:	75 0f                	jne    c000e89f <CPU::detectFeatures()+0x2ff>
c000e890:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e89a:	e9 cc 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e89f:	50                   	push   eax
c000e8a0:	50                   	push   eax
c000e8a1:	68 b7 d9 01 c0       	push   0xc001d9b7
c000e8a6:	55                   	push   ebp
c000e8a7:	e8 54 1e ff ff       	call   c0000700 <strcmp>
c000e8ac:	83 c4 10             	add    esp,0x10
c000e8af:	85 c0                	test   eax,eax
c000e8b1:	75 0f                	jne    c000e8c2 <CPU::detectFeatures()+0x322>
c000e8b3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e8bd:	e9 a9 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e8c2:	50                   	push   eax
c000e8c3:	50                   	push   eax
c000e8c4:	68 c4 d9 01 c0       	push   0xc001d9c4
c000e8c9:	55                   	push   ebp
c000e8ca:	e8 31 1e ff ff       	call   c0000700 <strcmp>
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	85 c0                	test   eax,eax
c000e8d4:	75 0f                	jne    c000e8e5 <CPU::detectFeatures()+0x345>
c000e8d6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e8e0:	e9 86 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e8e5:	50                   	push   eax
c000e8e6:	50                   	push   eax
c000e8e7:	68 d1 d9 01 c0       	push   0xc001d9d1
c000e8ec:	55                   	push   ebp
c000e8ed:	e8 0e 1e ff ff       	call   c0000700 <strcmp>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	85 c0                	test   eax,eax
c000e8f7:	75 0c                	jne    c000e905 <CPU::detectFeatures()+0x365>
c000e8f9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e903:	eb 66                	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e905:	50                   	push   eax
c000e906:	50                   	push   eax
c000e907:	68 de d9 01 c0       	push   0xc001d9de
c000e90c:	55                   	push   ebp
c000e90d:	e8 ee 1d ff ff       	call   c0000700 <strcmp>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	85 c0                	test   eax,eax
c000e917:	75 0c                	jne    c000e925 <CPU::detectFeatures()+0x385>
c000e919:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e923:	eb 46                	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e925:	57                   	push   edi
c000e926:	57                   	push   edi
c000e927:	68 eb d9 01 c0       	push   0xc001d9eb
c000e92c:	55                   	push   ebp
c000e92d:	e8 ce 1d ff ff       	call   c0000700 <strcmp>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	85 c0                	test   eax,eax
c000e937:	74 e0                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e939:	56                   	push   esi
c000e93a:	56                   	push   esi
c000e93b:	68 f8 d9 01 c0       	push   0xc001d9f8
c000e940:	55                   	push   ebp
c000e941:	e8 ba 1d ff ff       	call   c0000700 <strcmp>
c000e946:	83 c4 10             	add    esp,0x10
c000e949:	85 c0                	test   eax,eax
c000e94b:	74 cc                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e94d:	51                   	push   ecx
c000e94e:	51                   	push   ecx
c000e94f:	68 05 da 01 c0       	push   0xc001da05
c000e954:	55                   	push   ebp
c000e955:	e8 a6 1d ff ff       	call   c0000700 <strcmp>
c000e95a:	83 c4 10             	add    esp,0x10
c000e95d:	85 c0                	test   eax,eax
c000e95f:	74 b8                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e961:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e96b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e970:	0f 86 be 00 00 00    	jbe    c000ea34 <CPU::detectFeatures()+0x494>
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	68 80 00 00 00       	push   0x80
c000e97e:	e8 31 fb ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e983:	83 e0 01             	and    eax,0x1
c000e986:	c1 e0 06             	shl    eax,0x6
c000e989:	88 c2                	mov    dl,al
c000e98b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e991:	83 e0 bf             	and    eax,0xffffffbf
c000e994:	09 d0                	or     eax,edx
c000e996:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e99c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e9a3:	e8 0c fb ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9a8:	83 e0 01             	and    eax,0x1
c000e9ab:	c1 e0 04             	shl    eax,0x4
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9b6:	83 e0 ef             	and    eax,0xffffffef
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e9c1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e9c8:	e8 e7 fa ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e9e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e9ea:	e8 f3 fa ff ff       	call   c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e9ef:	83 e0 01             	and    eax,0x1
c000e9f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9ff:	83 e0 f7             	and    eax,0xfffffff7
c000ea02:	09 d0                	or     eax,edx
c000ea04:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ea0a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ea11:	e8 cc fa ff ff       	call   c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ea16:	83 c4 10             	add    esp,0x10
c000ea19:	83 e0 01             	and    eax,0x1
c000ea1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea23:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ea29:	83 e0 fb             	and    eax,0xfffffffb
c000ea2c:	09 d0                	or     eax,edx
c000ea2e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ea34:	83 ec 0c             	sub    esp,0xc
c000ea37:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea3b:	50                   	push   eax
c000ea3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea40:	50                   	push   eax
c000ea41:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ea45:	56                   	push   esi
c000ea46:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea4a:	50                   	push   eax
c000ea4b:	6a 01                	push   0x1
c000ea4d:	e8 82 f9 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea56:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000ea5c:	88 ca                	mov    dl,cl
c000ea5e:	83 e0 f0             	and    eax,0xfffffff0
c000ea61:	83 e2 0f             	and    edx,0xf
c000ea64:	09 d0                	or     eax,edx
c000ea66:	88 ca                	mov    dl,cl
c000ea68:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000ea6e:	c0 ea 04             	shr    dl,0x4
c000ea71:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000ea75:	0f b6 c2             	movzx  eax,dl
c000ea78:	83 c4 20             	add    esp,0x20
c000ea7b:	c1 e0 06             	shl    eax,0x6
c000ea7e:	89 c7                	mov    edi,eax
c000ea80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ea86:	66 25 3f c0          	and    ax,0xc03f
c000ea8a:	09 f8                	or     eax,edi
c000ea8c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ea93:	89 c8                	mov    eax,ecx
c000ea95:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ea9c:	c1 e8 08             	shr    eax,0x8
c000ea9f:	83 e5 3f             	and    ebp,0x3f
c000eaa2:	83 e0 0f             	and    eax,0xf
c000eaa5:	89 c7                	mov    edi,eax
c000eaa7:	c1 e7 06             	shl    edi,0x6
c000eaaa:	09 ef                	or     edi,ebp
c000eaac:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000eab3:	89 fa                	mov    edx,edi
c000eab5:	83 e5 c0             	and    ebp,0xffffffc0
c000eab8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000eabe:	88 c2                	mov    dl,al
c000eac0:	c0 ea 02             	shr    dl,0x2
c000eac3:	89 d7                	mov    edi,edx
c000eac5:	09 ef                	or     edi,ebp
c000eac7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000eacd:	89 fa                	mov    edx,edi
c000eacf:	83 e5 cf             	and    ebp,0xffffffcf
c000ead2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ead8:	89 cf                	mov    edi,ecx
c000eada:	c1 ef 0c             	shr    edi,0xc
c000eadd:	83 e7 03             	and    edi,0x3
c000eae0:	c1 e7 04             	shl    edi,0x4
c000eae3:	09 ef                	or     edi,ebp
c000eae5:	3c 06                	cmp    al,0x6
c000eae7:	89 fa                	mov    edx,edi
c000eae9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000eaef:	74 04                	je     c000eaf5 <CPU::detectFeatures()+0x555>
c000eaf1:	3c 0f                	cmp    al,0xf
c000eaf3:	75 5c                	jne    c000eb51 <CPU::detectFeatures()+0x5b1>
c000eaf5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000eaf9:	89 cf                	mov    edi,ecx
c000eafb:	c1 ef 10             	shr    edi,0x10
c000eafe:	c1 e7 04             	shl    edi,0x4
c000eb01:	09 fa                	or     edx,edi
c000eb03:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000eb09:	0f b6 d2             	movzx  edx,dl
c000eb0c:	66 81 e7 3f c0       	and    di,0xc03f
c000eb11:	c1 e2 06             	shl    edx,0x6
c000eb14:	09 fa                	or     edx,edi
c000eb16:	3c 0f                	cmp    al,0xf
c000eb18:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000eb1f:	75 30                	jne    c000eb51 <CPU::detectFeatures()+0x5b1>
c000eb21:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000eb27:	c1 e9 14             	shr    ecx,0x14
c000eb2a:	83 e0 3f             	and    eax,0x3f
c000eb2d:	83 c1 0f             	add    ecx,0xf
c000eb30:	88 ca                	mov    dl,cl
c000eb32:	c0 e9 02             	shr    cl,0x2
c000eb35:	c1 e2 06             	shl    edx,0x6
c000eb38:	09 d0                	or     eax,edx
c000eb3a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000eb40:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000eb46:	83 e0 c0             	and    eax,0xffffffc0
c000eb49:	09 c1                	or     ecx,eax
c000eb4b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000eb5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb5f:	50                   	push   eax
c000eb60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000eb64:	55                   	push   ebp
c000eb65:	56                   	push   esi
c000eb66:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000eb6a:	57                   	push   edi
c000eb6b:	68 00 00 00 80       	push   0x80000000
c000eb70:	e8 5f f8 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb75:	83 c4 20             	add    esp,0x20
c000eb78:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000eb80:	76 22                	jbe    c000eba4 <CPU::detectFeatures()+0x604>
c000eb82:	83 ec 0c             	sub    esp,0xc
c000eb85:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb89:	50                   	push   eax
c000eb8a:	55                   	push   ebp
c000eb8b:	56                   	push   esi
c000eb8c:	57                   	push   edi
c000eb8d:	68 01 00 00 80       	push   0x80000001
c000eb92:	e8 3d f8 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb97:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000eba1:	83 c4 20             	add    esp,0x20
c000eba4:	52                   	push   edx
c000eba5:	52                   	push   edx
c000eba6:	68 11 da 01 c0       	push   0xc001da11
c000ebab:	53                   	push   ebx
c000ebac:	e8 09 c3 ff ff       	call   c000aeba <Device::setName(char const*)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	eb 67                	jmp    c000ec1d <CPU::detectFeatures()+0x67d>
c000ebb6:	50                   	push   eax
c000ebb7:	50                   	push   eax
c000ebb8:	68 76 d9 01 c0       	push   0xc001d976
c000ebbd:	55                   	push   ebp
c000ebbe:	e8 5d 1a ff ff       	call   c0000620 <strcpy>
c000ebc3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ebcd:	e8 11 16 ff ff       	call   c00001e3 <is486>
c000ebd2:	83 c4 10             	add    esp,0x10
c000ebd5:	85 c0                	test   eax,eax
c000ebd7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ebdd:	74 1d                	je     c000ebfc <CPU::detectFeatures()+0x65c>
c000ebdf:	83 c8 07             	or     eax,0x7
c000ebe2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ebe8:	0f 20 c0             	mov    eax,cr0
c000ebeb:	83 e0 14             	and    eax,0x14
c000ebee:	83 f8 04             	cmp    eax,0x4
c000ebf1:	75 0e                	jne    c000ec01 <CPU::detectFeatures()+0x661>
c000ebf3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ebfa:	eb 21                	jmp    c000ec1d <CPU::detectFeatures()+0x67d>
c000ebfc:	83 e0 f8             	and    eax,0xfffffff8
c000ebff:	eb e1                	jmp    c000ebe2 <CPU::detectFeatures()+0x642>
c000ec01:	e8 b8 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec06:	83 e0 01             	and    eax,0x1
c000ec09:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec0c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec12:	83 e0 fd             	and    eax,0xfffffffd
c000ec15:	09 d0                	or     eax,edx
c000ec17:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec1d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ec24:	74 0e                	je     c000ec34 <CPU::detectFeatures()+0x694>
c000ec26:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000ec2b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ec32:	eb 20                	jmp    c000ec54 <CPU::detectFeatures()+0x6b4>
c000ec34:	e8 85 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec39:	83 e0 01             	and    eax,0x1
c000ec3c:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec3f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec45:	83 e0 fd             	and    eax,0xfffffffd
c000ec48:	09 d0                	or     eax,edx
c000ec4a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec50:	a8 02                	test   al,0x2
c000ec52:	75 d2                	jne    c000ec26 <CPU::detectFeatures()+0x686>
c000ec54:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ec5b:	83 c4 2c             	add    esp,0x2c
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	5d                   	pop    ebp
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <CPU::setupSMEP()>:
c000ec64:	0f 20 e0             	mov    eax,cr4
c000ec67:	0d 00 00 10 00       	or     eax,0x100000
c000ec6c:	0f 22 e0             	mov    cr4,eax
c000ec6f:	c3                   	ret    

c000ec70 <CPU::setupUMIP()>:
c000ec70:	0f 20 e0             	mov    eax,cr4
c000ec73:	80 cc 08             	or     ah,0x8
c000ec76:	0f 22 e0             	mov    cr4,eax
c000ec79:	c3                   	ret    

c000ec7a <CPU::setupTSC()>:
c000ec7a:	0f 20 e0             	mov    eax,cr4
c000ec7d:	83 c8 04             	or     eax,0x4
c000ec80:	0f 22 e0             	mov    cr4,eax
c000ec83:	c3                   	ret    

c000ec84 <CPU::setupLargePages()>:
c000ec84:	0f 20 e0             	mov    eax,cr4
c000ec87:	83 c8 10             	or     eax,0x10
c000ec8a:	0f 22 e0             	mov    cr4,eax
c000ec8d:	c3                   	ret    

c000ec8e <CPU::setupPAT()>:
c000ec8e:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000ec93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ec9a:	74 2c                	je     c000ecc8 <CPU::setupPAT()+0x3a>
c000ec9c:	53                   	push   ebx
c000ec9d:	83 ec 10             	sub    esp,0x10
c000eca0:	68 77 02 00 00       	push   0x277
c000eca5:	50                   	push   eax
c000eca6:	e8 af 74 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c000ecab:	83 e2 f8             	and    edx,0xfffffff8
c000ecae:	83 ca 01             	or     edx,0x1
c000ecb1:	52                   	push   edx
c000ecb2:	50                   	push   eax
c000ecb3:	68 77 02 00 00       	push   0x277
c000ecb8:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000ecbe:	e8 c3 74 ff ff       	call   c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ecc3:	83 c4 28             	add    esp,0x28
c000ecc6:	5b                   	pop    ebx
c000ecc7:	c3                   	ret    
c000ecc8:	c3                   	ret    
c000ecc9:	90                   	nop

c000ecca <CPU::setupMTRR()>:
c000ecca:	c3                   	ret    
c000eccb:	90                   	nop

c000eccc <CPU::setupGlobalPages()>:
c000eccc:	0f 20 e0             	mov    eax,cr4
c000eccf:	0c 80                	or     al,0x80
c000ecd1:	0f 22 e0             	mov    cr4,eax
c000ecd4:	c3                   	ret    
c000ecd5:	90                   	nop

c000ecd6 <CPU::allowUsermodeDataAccess()>:
c000ecd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecda:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ece1:	74 03                	je     c000ece6 <CPU::allowUsermodeDataAccess()+0x10>
c000ece3:	0f 01 cb             	stac   
c000ece6:	c3                   	ret    
c000ece7:	90                   	nop

c000ece8 <CPU::prohibitUsermodeDataAccess()>:
c000ece8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecec:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ecf3:	74 03                	je     c000ecf8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ecf5:	0f 01 ca             	clac   
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <CPU::setupSMAP()>:
c000ecfa:	0f 20 e0             	mov    eax,cr4
c000ecfd:	0d 00 00 20 00       	or     eax,0x200000
c000ed02:	0f 22 e0             	mov    cr4,eax
c000ed05:	eb e1                	jmp    c000ece8 <CPU::prohibitUsermodeDataAccess()>
c000ed07:	90                   	nop

c000ed08 <CPU::setupFeatures()>:
c000ed08:	53                   	push   ebx
c000ed09:	83 ec 08             	sub    esp,0x8
c000ed0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed10:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ed17:	74 18                	je     c000ed31 <CPU::setupFeatures()+0x29>
c000ed19:	83 ec 0c             	sub    esp,0xc
c000ed1c:	68 1d da 01 c0       	push   0xc001da1d
c000ed21:	e8 ca ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed29:	e8 42 ff ff ff       	call   c000ec70 <CPU::setupUMIP()>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ed38:	74 18                	je     c000ed52 <CPU::setupFeatures()+0x4a>
c000ed3a:	83 ec 0c             	sub    esp,0xc
c000ed3d:	68 27 da 01 c0       	push   0xc001da27
c000ed42:	e8 a9 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed4a:	e8 2b ff ff ff       	call   c000ec7a <CPU::setupTSC()>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ed59:	74 18                	je     c000ed73 <CPU::setupFeatures()+0x6b>
c000ed5b:	83 ec 0c             	sub    esp,0xc
c000ed5e:	68 30 da 01 c0       	push   0xc001da30
c000ed63:	e8 88 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed6b:	e8 14 ff ff ff       	call   c000ec84 <CPU::setupLargePages()>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ed7a:	74 18                	je     c000ed94 <CPU::setupFeatures()+0x8c>
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	68 39 da 01 c0       	push   0xc001da39
c000ed84:	e8 67 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed8c:	e8 3b ff ff ff       	call   c000eccc <CPU::setupGlobalPages()>
c000ed91:	83 c4 10             	add    esp,0x10
c000ed94:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ed9b:	74 18                	je     c000edb5 <CPU::setupFeatures()+0xad>
c000ed9d:	83 ec 0c             	sub    esp,0xc
c000eda0:	68 4b da 01 c0       	push   0xc001da4b
c000eda5:	e8 46 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000edaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edad:	e8 dc fe ff ff       	call   c000ec8e <CPU::setupPAT()>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000edbc:	74 11                	je     c000edcf <CPU::setupFeatures()+0xc7>
c000edbe:	c7 44 24 10 54 da 01 c0 	mov    DWORD PTR [esp+0x10],0xc001da54
c000edc6:	83 c4 08             	add    esp,0x8
c000edc9:	5b                   	pop    ebx
c000edca:	e9 21 ab ff ff       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c000edcf:	83 c4 08             	add    esp,0x8
c000edd2:	5b                   	pop    ebx
c000edd3:	c3                   	ret    

c000edd4 <CPU::open(int, int, void*)>:
c000edd4:	57                   	push   edi
c000edd5:	56                   	push   esi
c000edd6:	53                   	push   ebx
c000edd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eddb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ede5:	83 ec 0c             	sub    esp,0xc
c000ede8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000edee:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000edf4:	50                   	push   eax
c000edf5:	e8 4a 76 ff ff       	call   c0006444 <GDT::setup()>
c000edfa:	83 c4 0c             	add    esp,0xc
c000edfd:	6a 00                	push   0x0
c000edff:	68 ef be ad de       	push   0xdeadbeef
c000ee04:	57                   	push   edi
c000ee05:	e8 1a 92 ff ff       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c000ee0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee0d:	e8 f2 91 ff ff       	call   c0008004 <TSS::flush()>
c000ee12:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee1b:	e8 b2 78 ff ff       	call   c00066d2 <IDT::setup()>
c000ee20:	b8 00 04 00 00       	mov    eax,0x400
c000ee25:	0f 23 f8             	mov    db7,eax
c000ee28:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ee32:	e8 f7 80 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000ee37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ee3d:	89 30                	mov    DWORD PTR [eax],esi
c000ee3f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ee45:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ee48:	58                   	pop    eax
c000ee49:	5a                   	pop    edx
c000ee4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ee50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee54:	e8 b5 a1 ff ff       	call   c000900e <VAS::setCPUSpecific(unsigned long)>
c000ee59:	c7 04 24 5e da 01 c0 	mov    DWORD PTR [esp],0xc001da5e
c000ee60:	e8 56 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ee65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee68:	e8 33 f7 ff ff       	call   c000e5a0 <CPU::detectFeatures()>
c000ee6d:	c7 04 24 81 da 01 c0 	mov    DWORD PTR [esp],0xc001da81
c000ee74:	e8 42 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ee79:	e8 b8 56 00 00       	call   c0014536 <HalInitialise()>
c000ee7e:	a1 c0 f2 01 c0       	mov    eax,ds:0xc001f2c0
c000ee83:	83 e0 10             	and    eax,0x10
c000ee86:	83 f8 01             	cmp    eax,0x1
c000ee89:	19 c0                	sbb    eax,eax
c000ee8b:	83 e0 46             	and    eax,0x46
c000ee8e:	83 c0 1e             	add    eax,0x1e
c000ee91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee94:	e8 f0 d6 ff ff       	call   c000c589 <setupTimer(int)>
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000eea2:	f6 05 c0 f2 01 c0 20 	test   BYTE PTR ds:0xc001f2c0,0x20
c000eea9:	74 0c                	je     c000eeb7 <CPU::open(int, int, void*)+0xe3>
c000eeab:	83 ec 0c             	sub    esp,0xc
c000eeae:	53                   	push   ebx
c000eeaf:	e8 54 fe ff ff       	call   c000ed08 <CPU::setupFeatures()>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	5b                   	pop    ebx
c000eeb8:	31 c0                	xor    eax,eax
c000eeba:	5e                   	pop    esi
c000eebb:	5f                   	pop    edi
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop

c000eebe <EnvVarContainer::getEnv(char const*)>:
c000eebe:	57                   	push   edi
c000eebf:	56                   	push   esi
c000eec0:	53                   	push   ebx
c000eec1:	31 db                	xor    ebx,ebx
c000eec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eec7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000eec9:	7e 2b                	jle    c000eef6 <EnvVarContainer::getEnv(char const*)+0x38>
c000eecb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000eed2:	50                   	push   eax
c000eed3:	50                   	push   eax
c000eed4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eed7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000eeda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eede:	e8 1d 18 ff ff       	call   c0000700 <strcmp>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	85 c0                	test   eax,eax
c000eee8:	75 09                	jne    c000eef3 <EnvVarContainer::getEnv(char const*)+0x35>
c000eeea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eeed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000eef1:	eb 05                	jmp    c000eef8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000eef3:	43                   	inc    ebx
c000eef4:	eb d1                	jmp    c000eec7 <EnvVarContainer::getEnv(char const*)+0x9>
c000eef6:	31 c0                	xor    eax,eax
c000eef8:	5b                   	pop    ebx
c000eef9:	5e                   	pop    esi
c000eefa:	5f                   	pop    edi
c000eefb:	c3                   	ret    

c000eefc <EnvVarContainer::setEnv(char const*, char const*)>:
c000eefc:	55                   	push   ebp
c000eefd:	57                   	push   edi
c000eefe:	56                   	push   esi
c000eeff:	53                   	push   ebx
c000ef00:	83 ec 28             	sub    esp,0x28
c000ef03:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ef07:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ef0f:	56                   	push   esi
c000ef10:	e8 4b 16 ff ff       	call   c0000560 <strlen>
c000ef15:	40                   	inc    eax
c000ef16:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef19:	e8 43 7c ff ff       	call   c0006b61 <malloc>
c000ef1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef25:	e8 36 16 ff ff       	call   c0000560 <strlen>
c000ef2a:	40                   	inc    eax
c000ef2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2e:	e8 2e 7c ff ff       	call   c0006b61 <malloc>
c000ef33:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef3a:	e8 21 16 ff ff       	call   c0000560 <strlen>
c000ef3f:	83 c4 0c             	add    esp,0xc
c000ef42:	40                   	inc    eax
c000ef43:	50                   	push   eax
c000ef44:	6a 00                	push   0x0
c000ef46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef4a:	e8 a1 15 ff ff       	call   c00004f0 <memset>
c000ef4f:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef52:	e8 09 16 ff ff       	call   c0000560 <strlen>
c000ef57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ef5b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef63:	89 de                	mov    esi,ebx
c000ef65:	e8 f6 15 ff ff       	call   c0000560 <strlen>
c000ef6a:	83 c4 0c             	add    esp,0xc
c000ef6d:	40                   	inc    eax
c000ef6e:	50                   	push   eax
c000ef6f:	6a 00                	push   0x0
c000ef71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef75:	e8 76 15 ff ff       	call   c00004f0 <memset>
c000ef7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef7d:	e8 de 15 ff ff       	call   c0000560 <strlen>
c000ef82:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef86:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef8e:	40                   	inc    eax
c000ef8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef92:	c1 e0 03             	shl    eax,0x3
c000ef95:	5a                   	pop    edx
c000ef96:	59                   	pop    ecx
c000ef97:	50                   	push   eax
c000ef98:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef9b:	e8 ad 7b ff ff       	call   c0006b4d <realloc>
c000efa0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000efa4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000efa7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000efaa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000efae:	b9 08 00 00 00       	mov    ecx,0x8
c000efb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efb5:	83 c4 2c             	add    esp,0x2c
c000efb8:	5b                   	pop    ebx
c000efb9:	5e                   	pop    esi
c000efba:	5f                   	pop    edi
c000efbb:	5d                   	pop    ebp
c000efbc:	c3                   	ret    
c000efbd:	90                   	nop

c000efbe <EnvVarContainer::deleteEnv(char const*)>:
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000efc0:	55                   	push   ebp
c000efc1:	57                   	push   edi
c000efc2:	56                   	push   esi
c000efc3:	53                   	push   ebx
c000efc4:	81 ec 38 01 00 00    	sub    esp,0x138
c000efca:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000efd1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000efd8:	68 14 01 00 00       	push   0x114
c000efdd:	e8 7f 7b ff ff       	call   c0006b61 <malloc>
c000efe2:	83 c4 0c             	add    esp,0xc
c000efe5:	89 c3                	mov    ebx,eax
c000efe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000efea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000eff1:	50                   	push   eax
c000eff2:	e8 6f ae ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000eff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000effa:	e8 95 b1 ff ff       	call   c000a194 <File::exists()>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	84 c0                	test   al,al
c000f004:	75 31                	jne    c000f037 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f006:	50                   	push   eax
c000f007:	50                   	push   eax
c000f008:	6a 12                	push   0x12
c000f00a:	53                   	push   ebx
c000f00b:	e8 16 af ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f010:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f012:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f015:	89 34 24             	mov    DWORD PTR [esp],esi
c000f018:	e8 43 15 ff ff       	call   c0000560 <strlen>
c000f01d:	5a                   	pop    edx
c000f01e:	31 d2                	xor    edx,edx
c000f020:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f024:	51                   	push   ecx
c000f025:	56                   	push   esi
c000f026:	52                   	push   edx
c000f027:	50                   	push   eax
c000f028:	53                   	push   ebx
c000f029:	ff d7                	call   edi
c000f02b:	83 c4 14             	add    esp,0x14
c000f02e:	53                   	push   ebx
c000f02f:	e8 50 af ff ff       	call   c0009f84 <File::close()>
c000f034:	83 c4 10             	add    esp,0x10
c000f037:	56                   	push   esi
c000f038:	31 f6                	xor    esi,esi
c000f03a:	68 00 01 00 00       	push   0x100
c000f03f:	6a 00                	push   0x0
c000f041:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f045:	50                   	push   eax
c000f046:	e8 a5 14 ff ff       	call   c00004f0 <memset>
c000f04b:	5f                   	pop    edi
c000f04c:	58                   	pop    eax
c000f04d:	6a 01                	push   0x1
c000f04f:	53                   	push   ebx
c000f050:	e8 d1 ae ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f060:	83 ec 0c             	sub    esp,0xc
c000f063:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f065:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f069:	51                   	push   ecx
c000f06a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f06e:	52                   	push   edx
c000f06f:	6a 00                	push   0x0
c000f071:	6a 01                	push   0x1
c000f073:	53                   	push   ebx
c000f074:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f077:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f07b:	83 c4 20             	add    esp,0x20
c000f07e:	3c 0d                	cmp    al,0xd
c000f080:	0f 84 09 01 00 00    	je     c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f086:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f08b:	0f 84 ef 00 00 00    	je     c000f180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f091:	3c 0a                	cmp    al,0xa
c000f093:	74 13                	je     c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f095:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f09a:	74 0c                	je     c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f09c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f0a2:	0f 8e d8 00 00 00    	jle    c000f180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f0a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ac:	83 ec 0c             	sub    esp,0xc
c000f0af:	8d 78 01             	lea    edi,[eax+0x1]
c000f0b2:	57                   	push   edi
c000f0b3:	e8 a9 7a ff ff       	call   c0006b61 <malloc>
c000f0b8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f0bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0c0:	8d 56 04             	lea    edx,[esi+0x4]
c000f0c3:	89 14 24             	mov    DWORD PTR [esp],edx
c000f0c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0ca:	e8 92 7a ff ff       	call   c0006b61 <malloc>
c000f0cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0d3:	83 c4 0c             	add    esp,0xc
c000f0d6:	57                   	push   edi
c000f0d7:	6a 00                	push   0x0
c000f0d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f0dd:	e8 0e 14 ff ff       	call   c00004f0 <memset>
c000f0e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f0e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f0ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f0ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0f0:	83 c4 0c             	add    esp,0xc
c000f0f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0f7:	52                   	push   edx
c000f0f8:	6a 00                	push   0x0
c000f0fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0fe:	e8 ed 13 ff ff       	call   c00004f0 <memset>
c000f103:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f107:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f10b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f10e:	e8 4d 14 ff ff       	call   c0000560 <strlen>
c000f113:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f117:	89 c1                	mov    ecx,eax
c000f119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f11b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f11e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f121:	40                   	inc    eax
c000f122:	83 c4 10             	add    esp,0x10
c000f125:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f128:	85 d2                	test   edx,edx
c000f12a:	75 0c                	jne    c000f138 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f12c:	83 ec 0c             	sub    esp,0xc
c000f12f:	6a 08                	push   0x8
c000f131:	e8 2b 7a ff ff       	call   c0006b61 <malloc>
c000f136:	eb 0c                	jmp    c000f144 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f138:	c1 e0 03             	shl    eax,0x3
c000f13b:	51                   	push   ecx
c000f13c:	51                   	push   ecx
c000f13d:	50                   	push   eax
c000f13e:	52                   	push   edx
c000f13f:	e8 09 7a ff ff       	call   c0006b4d <realloc>
c000f144:	83 c4 10             	add    esp,0x10
c000f147:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f14a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f14d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f150:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f154:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f158:	b9 08 00 00 00       	mov    ecx,0x8
c000f15d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f15f:	31 f6                	xor    esi,esi
c000f161:	50                   	push   eax
c000f162:	68 00 01 00 00       	push   0x100
c000f167:	6a 00                	push   0x0
c000f169:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f16d:	50                   	push   eax
c000f16e:	e8 7d 13 ff ff       	call   c00004f0 <memset>
c000f173:	83 c4 10             	add    esp,0x10
c000f176:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f17e:	eb 0f                	jmp    c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f180:	3c 3d                	cmp    al,0x3d
c000f182:	74 07                	je     c000f18b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f184:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f188:	46                   	inc    esi
c000f189:	eb 04                	jmp    c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f18b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f18f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f194:	0f 85 c6 fe ff ff    	jne    c000f060 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f19a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f1a0:	5b                   	pop    ebx
c000f1a1:	5e                   	pop    esi
c000f1a2:	5f                   	pop    edi
c000f1a3:	5d                   	pop    ebp
c000f1a4:	c3                   	ret    
c000f1a5:	90                   	nop

c000f1a6 <EnvVarContainer::__loadSystem()>:
c000f1a6:	83 ec 10             	sub    esp,0x10
c000f1a9:	68 80 ec 01 c0       	push   0xc001ec80
c000f1ae:	68 c4 da 01 c0       	push   0xc001dac4
c000f1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1b7:	e8 04 fe ff ff       	call   c000efc0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f1bc:	83 c4 1c             	add    esp,0x1c
c000f1bf:	c3                   	ret    

c000f1c0 <EnvVarContainer::__loadUser()>:
c000f1c0:	c3                   	ret    
c000f1c1:	90                   	nop

c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f1d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f1e2:	90                   	nop
c000f1e3:	c3                   	ret    

c000f1e4 <EnvVarContainer::~EnvVarContainer()>:
c000f1e4:	83 ec 0c             	sub    esp,0xc
c000f1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1ee:	85 c0                	test   eax,eax
c000f1f0:	74 1d                	je     c000f20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1f8:	85 c0                	test   eax,eax
c000f1fa:	74 13                	je     c000f20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f200:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	50                   	push   eax
c000f207:	e8 65 79 ff ff       	call   c0006b71 <free>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	90                   	nop
c000f210:	83 c4 0c             	add    esp,0xc
c000f213:	c3                   	ret    

c000f214 <Krnl::getEnv(Process*, char const*)>:
c000f214:	53                   	push   ebx
c000f215:	83 ec 08             	sub    esp,0x8
c000f218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f21c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f220:	39 05 90 27 02 c0    	cmp    DWORD PTR ds:0xc0022790,eax
c000f226:	74 04                	je     c000f22c <Krnl::getEnv(Process*, char const*)+0x18>
c000f228:	85 c0                	test   eax,eax
c000f22a:	75 0b                	jne    c000f237 <Krnl::getEnv(Process*, char const*)+0x23>
c000f22c:	a1 10 1d 02 c0       	mov    eax,ds:0xc0021d10
c000f231:	85 c0                	test   eax,eax
c000f233:	75 19                	jne    c000f24e <Krnl::getEnv(Process*, char const*)+0x3a>
c000f235:	eb 27                	jmp    c000f25e <Krnl::getEnv(Process*, char const*)+0x4a>
c000f237:	52                   	push   edx
c000f238:	52                   	push   edx
c000f239:	53                   	push   ebx
c000f23a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f240:	e8 79 fc ff ff       	call   c000eebe <EnvVarContainer::getEnv(char const*)>
c000f245:	83 c4 10             	add    esp,0x10
c000f248:	85 c0                	test   eax,eax
c000f24a:	75 28                	jne    c000f274 <Krnl::getEnv(Process*, char const*)+0x60>
c000f24c:	eb de                	jmp    c000f22c <Krnl::getEnv(Process*, char const*)+0x18>
c000f24e:	52                   	push   edx
c000f24f:	52                   	push   edx
c000f250:	53                   	push   ebx
c000f251:	50                   	push   eax
c000f252:	e8 67 fc ff ff       	call   c000eebe <EnvVarContainer::getEnv(char const*)>
c000f257:	83 c4 10             	add    esp,0x10
c000f25a:	85 c0                	test   eax,eax
c000f25c:	75 16                	jne    c000f274 <Krnl::getEnv(Process*, char const*)+0x60>
c000f25e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f262:	a1 14 1d 02 c0       	mov    eax,ds:0xc0021d14
c000f267:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f26b:	83 c4 08             	add    esp,0x8
c000f26e:	5b                   	pop    ebx
c000f26f:	e9 4a fc ff ff       	jmp    c000eebe <EnvVarContainer::getEnv(char const*)>
c000f274:	83 c4 08             	add    esp,0x8
c000f277:	5b                   	pop    ebx
c000f278:	c3                   	ret    

c000f279 <Krnl::setEnvSystem(char const*, char const*)>:
c000f279:	83 ec 10             	sub    esp,0x10
c000f27c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f284:	ff 35 14 1d 02 c0    	push   DWORD PTR ds:0xc0021d14
c000f28a:	e8 6d fc ff ff       	call   c000eefc <EnvVarContainer::setEnv(char const*, char const*)>
c000f28f:	83 c4 1c             	add    esp,0x1c
c000f292:	c3                   	ret    

c000f293 <Krnl::setEnvUser(char const*, char const*)>:
c000f293:	a1 10 1d 02 c0       	mov    eax,ds:0xc0021d10
c000f298:	85 c0                	test   eax,eax
c000f29a:	74 15                	je     c000f2b1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f29c:	83 ec 10             	sub    esp,0x10
c000f29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a7:	50                   	push   eax
c000f2a8:	e8 4f fc ff ff       	call   c000eefc <EnvVarContainer::setEnv(char const*, char const*)>
c000f2ad:	83 c4 1c             	add    esp,0x1c
c000f2b0:	c3                   	ret    
c000f2b1:	c3                   	ret    

c000f2b2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f2bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2c0:	e9 37 fc ff ff       	jmp    c000eefc <EnvVarContainer::setEnv(char const*, char const*)>

c000f2c5 <Krnl::deleteEnvSystem(char const*)>:
c000f2c5:	c3                   	ret    

c000f2c6 <Krnl::deleteEnvUser(char const*)>:
c000f2c6:	c3                   	ret    

c000f2c7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f2c7:	c3                   	ret    

c000f2c8 <Krnl::newProcessEnv(Process*)>:
c000f2c8:	83 ec 28             	sub    esp,0x28
c000f2cb:	6a 0c                	push   0xc
c000f2cd:	e8 8f 78 ff ff       	call   c0006b61 <malloc>
c000f2d2:	5a                   	pop    edx
c000f2d3:	59                   	pop    ecx
c000f2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2d8:	50                   	push   eax
c000f2d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2dd:	e8 e0 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f2e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2e6:	83 c4 2c             	add    esp,0x2c
c000f2e9:	c3                   	ret    

c000f2ea <Krnl::copyProcessEnv(Process*, Process*)>:
c000f2ea:	57                   	push   edi
c000f2eb:	56                   	push   esi
c000f2ec:	53                   	push   ebx
c000f2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f1:	83 ec 0c             	sub    esp,0xc
c000f2f4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f2fa:	6a 0c                	push   0xc
c000f2fc:	e8 60 78 ff ff       	call   c0006b61 <malloc>
c000f301:	89 c3                	mov    ebx,eax
c000f303:	58                   	pop    eax
c000f304:	5a                   	pop    edx
c000f305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f309:	53                   	push   ebx
c000f30a:	e8 b3 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f30f:	8b 07                	mov    eax,DWORD PTR [edi]
c000f311:	89 03                	mov    DWORD PTR [ebx],eax
c000f313:	c1 e0 03             	shl    eax,0x3
c000f316:	89 04 24             	mov    DWORD PTR [esp],eax
c000f319:	e8 43 78 ff ff       	call   c0006b61 <malloc>
c000f31e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f321:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f323:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f326:	c1 e1 03             	shl    ecx,0x3
c000f329:	89 c7                	mov    edi,eax
c000f32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	89 d8                	mov    eax,ebx
c000f332:	5b                   	pop    ebx
c000f333:	5e                   	pop    esi
c000f334:	5f                   	pop    edi
c000f335:	c3                   	ret    

c000f336 <Krnl::loadSystemEnv()>:
c000f336:	53                   	push   ebx
c000f337:	83 ec 14             	sub    esp,0x14
c000f33a:	6a 0c                	push   0xc
c000f33c:	e8 20 78 ff ff       	call   c0006b61 <malloc>
c000f341:	89 c3                	mov    ebx,eax
c000f343:	58                   	pop    eax
c000f344:	5a                   	pop    edx
c000f345:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000f34b:	53                   	push   ebx
c000f34c:	e8 71 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f351:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f354:	89 1d 14 1d 02 c0    	mov    DWORD PTR ds:0xc0021d14,ebx
c000f35a:	e8 47 fe ff ff       	call   c000f1a6 <EnvVarContainer::__loadSystem()>
c000f35f:	83 c4 18             	add    esp,0x18
c000f362:	5b                   	pop    ebx
c000f363:	c3                   	ret    

c000f364 <Krnl::loadUserEnv()>:
c000f364:	53                   	push   ebx
c000f365:	83 ec 14             	sub    esp,0x14
c000f368:	6a 0c                	push   0xc
c000f36a:	e8 f2 77 ff ff       	call   c0006b61 <malloc>
c000f36f:	89 c3                	mov    ebx,eax
c000f371:	58                   	pop    eax
c000f372:	5a                   	pop    edx
c000f373:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f37f:	89 1d 10 1d 02 c0    	mov    DWORD PTR ds:0xc0021d10,ebx
c000f385:	83 c4 18             	add    esp,0x18
c000f388:	5b                   	pop    ebx
c000f389:	c3                   	ret    

c000f38a <Krnl::flushEnv()>:
c000f38a:	c3                   	ret    

c000f38b <Krnl::getProcessTotalEnvCount(Process*)>:
c000f38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38f:	8b 15 10 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021d10
c000f395:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f39b:	a1 14 1d 02 c0       	mov    eax,ds:0xc0021d14
c000f3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a2:	03 01                	add    eax,DWORD PTR [ecx]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 02                	je     c000f3aa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f3a8:	03 02                	add    eax,DWORD PTR [edx]
c000f3aa:	c3                   	ret    

c000f3ab <Krnl::getProcessEnvPair(Process*, int)>:
c000f3ab:	57                   	push   edi
c000f3ac:	56                   	push   esi
c000f3ad:	8b 35 10 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021d10
c000f3b3:	53                   	push   ebx
c000f3b4:	85 f6                	test   esi,esi
c000f3b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3be:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f3c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f3c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f3ca:	75 16                	jne    c000f3e2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f3cc:	39 c2                	cmp    edx,eax
c000f3ce:	7c 16                	jl     c000f3e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f3d0:	8b 0d 14 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d14
c000f3d6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f3d8:	01 c6                	add    esi,eax
c000f3da:	39 d6                	cmp    esi,edx
c000f3dc:	7e 3c                	jle    c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f3de:	29 c2                	sub    edx,eax
c000f3e0:	eb 04                	jmp    c000f3e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f3e2:	39 c2                	cmp    edx,eax
c000f3e4:	7d 05                	jge    c000f3eb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f3e6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f3e9:	eb 20                	jmp    c000f40b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f3eb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f3ed:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f3f0:	39 d1                	cmp    ecx,edx
c000f3f2:	7e 04                	jle    c000f3f8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f3f4:	29 c2                	sub    edx,eax
c000f3f6:	eb 10                	jmp    c000f408 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f3f8:	8b 35 14 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021d14
c000f3fe:	03 0e                	add    ecx,DWORD PTR [esi]
c000f400:	39 d1                	cmp    ecx,edx
c000f402:	7e 16                	jle    c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f404:	29 c2                	sub    edx,eax
c000f406:	29 fa                	sub    edx,edi
c000f408:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f40b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f40e:	8b 02                	mov    eax,DWORD PTR [edx]
c000f410:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f413:	89 03                	mov    DWORD PTR [ebx],eax
c000f415:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f418:	eb 1d                	jmp    c000f437 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f41a:	83 ec 0c             	sub    esp,0xc
c000f41d:	68 e6 da 01 c0       	push   0xc001dae6
c000f422:	e8 18 00 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000f427:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f42d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	89 d8                	mov    eax,ebx
c000f439:	5b                   	pop    ebx
c000f43a:	5e                   	pop    esi
c000f43b:	5f                   	pop    edi
c000f43c:	c2 04 00             	ret    0x4

c000f43f <Krnl::panic(char const*)>:
c000f43f:	53                   	push   ebx
c000f440:	83 ec 10             	sub    esp,0x10
c000f443:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f447:	fa                   	cli    
c000f448:	c6 05 20 1d 02 c0 01 	mov    BYTE PTR ds:0xc0021d20,0x1
c000f44f:	53                   	push   ebx
c000f450:	68 00 db 01 c0       	push   0xc001db00
c000f455:	e8 96 a4 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 0c             	add    esp,0xc
c000f45d:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c000f462:	6a 01                	push   0x1
c000f464:	6a 0f                	push   0xf
c000f466:	50                   	push   eax
c000f467:	e8 78 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f46c:	5a                   	pop    edx
c000f46d:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f473:	51                   	push   ecx
c000f474:	e8 63 84 ff ff       	call   c00078dc <VgaText::clearScreen()>
c000f479:	58                   	pop    eax
c000f47a:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f480:	5a                   	pop    edx
c000f481:	68 31 db 01 c0       	push   0xc001db31
c000f486:	51                   	push   ecx
c000f487:	e8 90 82 ff ff       	call   c000771c <VgaText::setTitle(char*)>
c000f48c:	83 c4 0c             	add    esp,0xc
c000f48f:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c000f494:	6a 01                	push   0x1
c000f496:	6a 0f                	push   0xf
c000f498:	50                   	push   eax
c000f499:	e8 46 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f49e:	58                   	pop    eax
c000f49f:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f4a5:	5a                   	pop    edx
c000f4a6:	68 19 db 01 c0       	push   0xc001db19
c000f4ab:	51                   	push   ecx
c000f4ac:	e8 1f 87 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4b1:	83 c4 0c             	add    esp,0xc
c000f4b4:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c000f4b9:	6a 0f                	push   0xf
c000f4bb:	6a 01                	push   0x1
c000f4bd:	50                   	push   eax
c000f4be:	e8 21 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4c3:	58                   	pop    eax
c000f4c4:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f4ca:	5a                   	pop    edx
c000f4cb:	68 22 db 01 c0       	push   0xc001db22
c000f4d0:	51                   	push   ecx
c000f4d1:	e8 fa 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4d6:	83 c4 0c             	add    esp,0xc
c000f4d9:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c000f4de:	6a 01                	push   0x1
c000f4e0:	6a 0f                	push   0xf
c000f4e2:	50                   	push   eax
c000f4e3:	e8 fc 81 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4e8:	58                   	pop    eax
c000f4e9:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f4ef:	5a                   	pop    edx
c000f4f0:	68 2f db 01 c0       	push   0xc001db2f
c000f4f5:	51                   	push   ecx
c000f4f6:	e8 d5 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4fb:	58                   	pop    eax
c000f4fc:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f502:	5a                   	pop    edx
c000f503:	68 40 db 01 c0       	push   0xc001db40
c000f508:	51                   	push   ecx
c000f509:	e8 c2 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f50e:	58                   	pop    eax
c000f50f:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f515:	5a                   	pop    edx
c000f516:	68 32 db 01 c0       	push   0xc001db32
c000f51b:	51                   	push   ecx
c000f51c:	e8 af 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f521:	58                   	pop    eax
c000f522:	8b 0d f4 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2f4
c000f528:	5a                   	pop    edx
c000f529:	53                   	push   ebx
c000f52a:	51                   	push   ecx
c000f52b:	e8 a0 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f530:	5b                   	pop    ebx
c000f531:	58                   	pop    eax
c000f532:	a1 f4 f2 01 c0       	mov    eax,ds:0xc001f2f4
c000f537:	68 2f db 01 c0       	push   0xc001db2f
c000f53c:	50                   	push   eax
c000f53d:	e8 8e 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	eb fe                	jmp    c000f545 <Krnl::panic(char const*)+0x106>

c000f547 <Krnl::powerThread(void*)>:
c000f547:	83 ec 0c             	sub    esp,0xc
c000f54a:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000f54f:	48                   	dec    eax
c000f550:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000f555:	75 01                	jne    c000f558 <Krnl::powerThread(void*)+0x11>
c000f557:	fb                   	sti    
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	c6 05 40 1d 02 c0 00 	mov    BYTE PTR ds:0xc0021d40,0x0
c000f562:	6a 0a                	push   0xa
c000f564:	e8 3b 35 00 00       	call   c0012aa4 <sleep(unsigned int)>
c000f569:	83 05 84 1d 02 c0 0a 	add    DWORD PTR ds:0xc0021d84,0xa
c000f570:	83 c4 10             	add    esp,0x10
c000f573:	eb e3                	jmp    c000f558 <Krnl::powerThread(void*)+0x11>

c000f575 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f575:	57                   	push   edi
c000f576:	b9 09 00 00 00       	mov    ecx,0x9
c000f57b:	56                   	push   esi
c000f57c:	bf 60 1d 02 c0       	mov    edi,0xc0021d60
c000f581:	fc                   	cld    
c000f582:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f586:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f588:	5e                   	pop    esi
c000f589:	5f                   	pop    edi
c000f58a:	c3                   	ret    

c000f58b <Krnl::userIOReceived()>:
c000f58b:	c7 05 84 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d84,0x0
c000f595:	c3                   	ret    

c000f596 <Krnl::handlePowerButton()>:
c000f596:	83 ec 0c             	sub    esp,0xc
c000f599:	a1 60 1d 02 c0       	mov    eax,ds:0xc0021d60
c000f59e:	83 f8 02             	cmp    eax,0x2
c000f5a1:	75 10                	jne    c000f5b3 <Krnl::handlePowerButton()+0x1d>
c000f5a3:	83 ec 0c             	sub    esp,0xc
c000f5a6:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000f5ac:	e8 0d 6c ff ff       	call   c00061be <Computer::shutdown()>
c000f5b1:	eb 11                	jmp    c000f5c4 <Krnl::handlePowerButton()+0x2e>
c000f5b3:	48                   	dec    eax
c000f5b4:	75 11                	jne    c000f5c7 <Krnl::handlePowerButton()+0x31>
c000f5b6:	83 ec 0c             	sub    esp,0xc
c000f5b9:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000f5bf:	e8 2a 6c ff ff       	call   c00061ee <Computer::sleep()>
c000f5c4:	83 c4 10             	add    esp,0x10
c000f5c7:	83 c4 0c             	add    esp,0xc
c000f5ca:	c3                   	ret    

c000f5cb <Krnl::handleSleepButton()>:
c000f5cb:	83 ec 0c             	sub    esp,0xc
c000f5ce:	a1 64 1d 02 c0       	mov    eax,ds:0xc0021d64
c000f5d3:	83 f8 02             	cmp    eax,0x2
c000f5d6:	75 10                	jne    c000f5e8 <Krnl::handleSleepButton()+0x1d>
c000f5d8:	83 ec 0c             	sub    esp,0xc
c000f5db:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000f5e1:	e8 d8 6b ff ff       	call   c00061be <Computer::shutdown()>
c000f5e6:	eb 11                	jmp    c000f5f9 <Krnl::handleSleepButton()+0x2e>
c000f5e8:	48                   	dec    eax
c000f5e9:	75 11                	jne    c000f5fc <Krnl::handleSleepButton()+0x31>
c000f5eb:	83 ec 0c             	sub    esp,0xc
c000f5ee:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000f5f4:	e8 f5 6b ff ff       	call   c00061ee <Computer::sleep()>
c000f5f9:	83 c4 10             	add    esp,0x10
c000f5fc:	83 c4 0c             	add    esp,0xc
c000f5ff:	c3                   	ret    

c000f600 <Krnl::setupPowerManager()>:
c000f600:	83 ec 0c             	sub    esp,0xc
c000f603:	c7 05 84 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d84,0x0
c000f60d:	68 f0 00 00 00       	push   0xf0
c000f612:	c6 05 40 1d 02 c0 00 	mov    BYTE PTR ds:0xc0021d40,0x0
c000f619:	6a 00                	push   0x0
c000f61b:	68 47 f5 00 c0       	push   0xc000f547
c000f620:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000f626:	e8 49 2f 00 00       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c000f62b:	c7 05 60 1d 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0021d60,0x2
c000f635:	c7 05 64 1d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021d64,0x1
c000f63f:	c7 05 68 1d 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0021d68,0x3
c000f649:	c7 05 6c 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d6c,0x0
c000f653:	c7 05 78 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d78,0x0
c000f65d:	c7 05 70 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d70,0x0
c000f667:	c7 05 7c 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d7c,0x0
c000f671:	c7 05 74 1d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021d74,0x3c
c000f67b:	c7 05 80 1d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021d80,0x3c
c000f685:	83 c4 1c             	add    esp,0x1c
c000f688:	c3                   	ret    

c000f689 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f689:	55                   	push   ebp
c000f68a:	57                   	push   edi
c000f68b:	56                   	push   esi
c000f68c:	53                   	push   ebx
c000f68d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f693:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f69a:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f69c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f69f:	80 fb 40             	cmp    bl,0x40
c000f6a2:	75 1b                	jne    c000f6bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f6a4:	8a 16                	mov    dl,BYTE PTR [esi]
c000f6a6:	84 d2                	test   dl,dl
c000f6a8:	0f 84 f1 00 00 00    	je     c000f79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6ae:	8d 46 01             	lea    eax,[esi+0x1]
c000f6b1:	80 fa 3a             	cmp    dl,0x3a
c000f6b4:	74 04                	je     c000f6ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f6b6:	89 c6                	mov    esi,eax
c000f6b8:	eb ea                	jmp    c000f6a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f6ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f6bd:	89 c6                	mov    esi,eax
c000f6bf:	50                   	push   eax
c000f6c0:	6a 40                	push   0x40
c000f6c2:	6a 00                	push   0x0
c000f6c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f6c8:	50                   	push   eax
c000f6c9:	e8 22 0e ff ff       	call   c00004f0 <memset>
c000f6ce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f6d5:	31 c0                	xor    eax,eax
c000f6d7:	83 c4 10             	add    esp,0x10
c000f6da:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f6dc:	84 c9                	test   cl,cl
c000f6de:	0f 84 bb 00 00 00    	je     c000f79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6e4:	3d c7 00 00 00       	cmp    eax,0xc7
c000f6e9:	0f 8f b0 00 00 00    	jg     c000f79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f6ef:	80 f9 0a             	cmp    cl,0xa
c000f6f2:	0f 85 98 00 00 00    	jne    c000f790 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f6f8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f6fd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f701:	a8 df                	test   al,0xdf
c000f703:	0f 94 c1             	sete   cl
c000f706:	3c 23                	cmp    al,0x23
c000f708:	0f 94 c2             	sete   dl
c000f70b:	08 d1                	or     cl,dl
c000f70d:	75 4a                	jne    c000f759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f70f:	8d 50 f7             	lea    edx,[eax-0x9]
c000f712:	80 fa 01             	cmp    dl,0x1
c000f715:	76 42                	jbe    c000f759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f717:	3c 5b                	cmp    al,0x5b
c000f719:	75 42                	jne    c000f75d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f71b:	80 fb 40             	cmp    bl,0x40
c000f71e:	75 39                	jne    c000f759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f720:	83 ec 0c             	sub    esp,0xc
c000f723:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f727:	52                   	push   edx
c000f728:	e8 33 0e ff ff       	call   c0000560 <strlen>
c000f72d:	83 c4 10             	add    esp,0x10
c000f730:	83 f8 3f             	cmp    eax,0x3f
c000f733:	77 6a                	ja     c000f79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f735:	50                   	push   eax
c000f736:	50                   	push   eax
c000f737:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f73b:	52                   	push   edx
c000f73c:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f740:	52                   	push   edx
c000f741:	e8 da 0e ff ff       	call   c0000620 <strcpy>
c000f746:	58                   	pop    eax
c000f747:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f74b:	52                   	push   edx
c000f74c:	e8 0f 0e ff ff       	call   c0000560 <strlen>
c000f751:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	31 d2                	xor    edx,edx
c000f75b:	eb 3a                	jmp    c000f797 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f75d:	80 fb 40             	cmp    bl,0x40
c000f760:	74 06                	je     c000f768 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f762:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f766:	eb 20                	jmp    c000f788 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f768:	50                   	push   eax
c000f769:	50                   	push   eax
c000f76a:	55                   	push   ebp
c000f76b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f76f:	50                   	push   eax
c000f770:	e8 8b 0f ff ff       	call   c0000700 <strcmp>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	85 c0                	test   eax,eax
c000f77a:	75 dd                	jne    c000f759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f77c:	eb e4                	jmp    c000f762 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f77e:	8d 50 01             	lea    edx,[eax+0x1]
c000f781:	80 f9 3d             	cmp    cl,0x3d
c000f784:	74 1d                	je     c000f7a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f786:	89 d0                	mov    eax,edx
c000f788:	8a 08                	mov    cl,BYTE PTR [eax]
c000f78a:	84 c9                	test   cl,cl
c000f78c:	75 f0                	jne    c000f77e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f78e:	eb 0f                	jmp    c000f79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f790:	8d 50 01             	lea    edx,[eax+0x1]
c000f793:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f797:	47                   	inc    edi
c000f798:	89 d0                	mov    eax,edx
c000f79a:	e9 3b ff ff ff       	jmp    c000f6da <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f79f:	31 c0                	xor    eax,eax
c000f7a1:	eb 33                	jmp    c000f7d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f7a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7aa:	50                   	push   eax
c000f7ab:	50                   	push   eax
c000f7ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f7b0:	50                   	push   eax
c000f7b1:	56                   	push   esi
c000f7b2:	e8 49 0f ff ff       	call   c0000700 <strcmp>
c000f7b7:	83 c4 10             	add    esp,0x10
c000f7ba:	85 c0                	test   eax,eax
c000f7bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7c0:	75 97                	jne    c000f759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f7c2:	51                   	push   ecx
c000f7c3:	51                   	push   ecx
c000f7c4:	52                   	push   edx
c000f7c5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f7cc:	e8 4f 0e ff ff       	call   c0000620 <strcpy>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	b0 01                	mov    al,0x1
c000f7d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f7dc:	5b                   	pop    ebx
c000f7dd:	5e                   	pop    esi
c000f7de:	5f                   	pop    edi
c000f7df:	5d                   	pop    ebp
c000f7e0:	c3                   	ret    

c000f7e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f7e1:	57                   	push   edi
c000f7e2:	56                   	push   esi
c000f7e3:	53                   	push   ebx
c000f7e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f7ea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f7f1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f7f8:	53                   	push   ebx
c000f7f9:	e8 62 0d ff ff       	call   c0000560 <strlen>
c000f7fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000f801:	89 c7                	mov    edi,eax
c000f803:	e8 58 0d ff ff       	call   c0000560 <strlen>
c000f808:	83 c4 10             	add    esp,0x10
c000f80b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f80f:	3d ff 00 00 00       	cmp    eax,0xff
c000f814:	0f 87 d3 00 00 00    	ja     c000f8ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f81a:	57                   	push   edi
c000f81b:	57                   	push   edi
c000f81c:	56                   	push   esi
c000f81d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f821:	56                   	push   esi
c000f822:	e8 f9 0d ff ff       	call   c0000620 <strcpy>
c000f827:	58                   	pop    eax
c000f828:	5a                   	pop    edx
c000f829:	68 5f de 01 c0       	push   0xc001de5f
c000f82e:	56                   	push   esi
c000f82f:	e8 ac 0f ff ff       	call   c00007e0 <strcat>
c000f834:	59                   	pop    ecx
c000f835:	5f                   	pop    edi
c000f836:	53                   	push   ebx
c000f837:	56                   	push   esi
c000f838:	e8 a3 0f ff ff       	call   c00007e0 <strcat>
c000f83d:	58                   	pop    eax
c000f83e:	5a                   	pop    edx
c000f83f:	68 7a db 01 c0       	push   0xc001db7a
c000f844:	56                   	push   esi
c000f845:	e8 96 0f ff ff       	call   c00007e0 <strcat>
c000f84a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000f851:	e8 0b 73 ff ff       	call   c0006b61 <malloc>
c000f856:	83 c4 0c             	add    esp,0xc
c000f859:	89 c3                	mov    ebx,eax
c000f85b:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c000f861:	56                   	push   esi
c000f862:	50                   	push   eax
c000f863:	e8 fe a5 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000f868:	83 c4 10             	add    esp,0x10
c000f86b:	85 db                	test   ebx,ebx
c000f86d:	74 7e                	je     c000f8ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f86f:	51                   	push   ecx
c000f870:	51                   	push   ecx
c000f871:	6a 01                	push   0x1
c000f873:	53                   	push   ebx
c000f874:	e8 ad a6 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f879:	83 c4 10             	add    esp,0x10
c000f87c:	85 c0                	test   eax,eax
c000f87e:	74 08                	je     c000f888 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f885:	53                   	push   ebx
c000f886:	eb 5f                	jmp    c000f8e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000f888:	52                   	push   edx
c000f889:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f88d:	50                   	push   eax
c000f88e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000f892:	50                   	push   eax
c000f893:	53                   	push   ebx
c000f894:	e8 39 a9 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c000f899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f89d:	83 c4 10             	add    esp,0x10
c000f8a0:	89 c1                	mov    ecx,eax
c000f8a2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000f8a6:	74 31                	je     c000f8d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	50                   	push   eax
c000f8ac:	e8 b0 72 ff ff       	call   c0006b61 <malloc>
c000f8b1:	89 c6                	mov    esi,eax
c000f8b3:	58                   	pop    eax
c000f8b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000f8ba:	52                   	push   edx
c000f8bb:	56                   	push   esi
c000f8bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f8c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f8c4:	53                   	push   ebx
c000f8c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f8c8:	83 c4 20             	add    esp,0x20
c000f8cb:	85 c0                	test   eax,eax
c000f8cd:	75 0a                	jne    c000f8d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f8cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8d3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f8d7:	74 18                	je     c000f8f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000f8d9:	83 ec 0c             	sub    esp,0xc
c000f8dc:	53                   	push   ebx
c000f8dd:	e8 a2 a6 ff ff       	call   c0009f84 <File::close()>
c000f8e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f8ea:	83 c4 10             	add    esp,0x10
c000f8ed:	31 c0                	xor    eax,eax
c000f8ef:	eb 3b                	jmp    c000f92c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000f8f1:	83 ec 0c             	sub    esp,0xc
c000f8f4:	53                   	push   ebx
c000f8f5:	e8 8a a6 ff ff       	call   c0009f84 <File::close()>
c000f8fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f90c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000f913:	56                   	push   esi
c000f914:	e8 70 fd ff ff       	call   c000f689 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000f919:	89 34 24             	mov    DWORD PTR [esp],esi
c000f91c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f920:	e8 4c 72 ff ff       	call   c0006b71 <free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f92c:	81 c4 20 01 00 00    	add    esp,0x120
c000f932:	5b                   	pop    ebx
c000f933:	5e                   	pop    esi
c000f934:	5f                   	pop    edi
c000f935:	c3                   	ret    

c000f936 <Reg::getLine(char*, char*, char*)>:
c000f936:	57                   	push   edi
c000f937:	56                   	push   esi
c000f938:	53                   	push   ebx
c000f939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f93d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000f945:	57                   	push   edi
c000f946:	56                   	push   esi
c000f947:	53                   	push   ebx
c000f948:	68 7f db 01 c0       	push   0xc001db7f
c000f94d:	e8 8f fe ff ff       	call   c000f7e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000f952:	83 c4 10             	add    esp,0x10
c000f955:	84 c0                	test   al,al
c000f957:	75 10                	jne    c000f969 <Reg::getLine(char*, char*, char*)+0x33>
c000f959:	57                   	push   edi
c000f95a:	56                   	push   esi
c000f95b:	53                   	push   ebx
c000f95c:	68 a4 db 01 c0       	push   0xc001dba4
c000f961:	e8 7b fe ff ff       	call   c000f7e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	5b                   	pop    ebx
c000f96a:	5e                   	pop    esi
c000f96b:	5f                   	pop    edi
c000f96c:	c3                   	ret    

c000f96d <Reg::readInt(char*, char*, int*)>:
c000f96d:	55                   	push   ebp
c000f96e:	57                   	push   edi
c000f96f:	56                   	push   esi
c000f970:	53                   	push   ebx
c000f971:	81 ec f0 00 00 00    	sub    esp,0xf0
c000f977:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000f97b:	57                   	push   edi
c000f97c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000f983:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000f98a:	e8 a7 ff ff ff       	call   c000f936 <Reg::getLine(char*, char*, char*)>
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	84 c0                	test   al,al
c000f994:	0f 84 b3 00 00 00    	je     c000fa4d <Reg::readInt(char*, char*, int*)+0xe0>
c000f99a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000f99e:	80 fa 2b             	cmp    dl,0x2b
c000f9a1:	74 0c                	je     c000f9af <Reg::readInt(char*, char*, int*)+0x42>
c000f9a3:	80 fa 2d             	cmp    dl,0x2d
c000f9a6:	75 0e                	jne    c000f9b6 <Reg::readInt(char*, char*, int*)+0x49>
c000f9a8:	ba 01 00 00 00       	mov    edx,0x1
c000f9ad:	eb 0b                	jmp    c000f9ba <Reg::readInt(char*, char*, int*)+0x4d>
c000f9af:	ba 01 00 00 00       	mov    edx,0x1
c000f9b4:	eb 02                	jmp    c000f9b8 <Reg::readInt(char*, char*, int*)+0x4b>
c000f9b6:	31 d2                	xor    edx,edx
c000f9b8:	31 c0                	xor    eax,eax
c000f9ba:	be 0a 00 00 00       	mov    esi,0xa
c000f9bf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000f9c4:	75 20                	jne    c000f9e6 <Reg::readInt(char*, char*, int*)+0x79>
c000f9c6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000f9ca:	80 f9 78             	cmp    cl,0x78
c000f9cd:	75 0a                	jne    c000f9d9 <Reg::readInt(char*, char*, int*)+0x6c>
c000f9cf:	83 c2 02             	add    edx,0x2
c000f9d2:	be 10 00 00 00       	mov    esi,0x10
c000f9d7:	eb 0d                	jmp    c000f9e6 <Reg::readInt(char*, char*, int*)+0x79>
c000f9d9:	80 f9 62             	cmp    cl,0x62
c000f9dc:	75 08                	jne    c000f9e6 <Reg::readInt(char*, char*, int*)+0x79>
c000f9de:	83 c2 02             	add    edx,0x2
c000f9e1:	be 02 00 00 00       	mov    esi,0x2
c000f9e6:	01 d7                	add    edi,edx
c000f9e8:	31 d2                	xor    edx,edx
c000f9ea:	8a 1f                	mov    bl,BYTE PTR [edi]
c000f9ec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000f9f0:	80 fb 0d             	cmp    bl,0xd
c000f9f3:	0f 94 c3             	sete   bl
c000f9f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000f9fb:	0f 94 c1             	sete   cl
c000f9fe:	08 cb                	or     bl,cl
c000fa00:	75 3a                	jne    c000fa3c <Reg::readInt(char*, char*, int*)+0xcf>
c000fa02:	0f af d6             	imul   edx,esi
c000fa05:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fa0a:	83 fe 10             	cmp    esi,0x10
c000fa0d:	75 26                	jne    c000fa35 <Reg::readInt(char*, char*, int*)+0xc8>
c000fa0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fa13:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fa16:	89 e9                	mov    ecx,ebp
c000fa18:	80 f9 05             	cmp    cl,0x5
c000fa1b:	77 06                	ja     c000fa23 <Reg::readInt(char*, char*, int*)+0xb6>
c000fa1d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fa21:	eb 16                	jmp    c000fa39 <Reg::readInt(char*, char*, int*)+0xcc>
c000fa23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fa27:	83 e9 61             	sub    ecx,0x61
c000fa2a:	80 f9 05             	cmp    cl,0x5
c000fa2d:	77 06                	ja     c000fa35 <Reg::readInt(char*, char*, int*)+0xc8>
c000fa2f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fa33:	eb 04                	jmp    c000fa39 <Reg::readInt(char*, char*, int*)+0xcc>
c000fa35:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fa39:	47                   	inc    edi
c000fa3a:	eb ae                	jmp    c000f9ea <Reg::readInt(char*, char*, int*)+0x7d>
c000fa3c:	84 c0                	test   al,al
c000fa3e:	74 02                	je     c000fa42 <Reg::readInt(char*, char*, int*)+0xd5>
c000fa40:	f7 da                	neg    edx
c000fa42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fa49:	89 10                	mov    DWORD PTR [eax],edx
c000fa4b:	88 d8                	mov    al,bl
c000fa4d:	81 c4 ec 00 00 00    	add    esp,0xec
c000fa53:	5b                   	pop    ebx
c000fa54:	5e                   	pop    esi
c000fa55:	5f                   	pop    edi
c000fa56:	5d                   	pop    ebp
c000fa57:	c3                   	ret    

c000fa58 <Reg::readString(char*, char*, char*, int)>:
c000fa58:	57                   	push   edi
c000fa59:	56                   	push   esi
c000fa5a:	53                   	push   ebx
c000fa5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fa61:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fa68:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fa6c:	57                   	push   edi
c000fa6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fa74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fa7b:	e8 b6 fe ff ff       	call   c000f936 <Reg::getLine(char*, char*, char*)>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	89 c6                	mov    esi,eax
c000fa85:	84 c0                	test   al,al
c000fa87:	74 44                	je     c000facd <Reg::readString(char*, char*, char*, int)+0x75>
c000fa89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fa90:	31 c0                	xor    eax,eax
c000fa92:	4a                   	dec    edx
c000fa93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fa96:	84 c9                	test   cl,cl
c000fa98:	74 0f                	je     c000faa9 <Reg::readString(char*, char*, char*, int)+0x51>
c000fa9a:	39 c2                	cmp    edx,eax
c000fa9c:	7e 0b                	jle    c000faa9 <Reg::readString(char*, char*, char*, int)+0x51>
c000fa9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000faa1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000faa6:	40                   	inc    eax
c000faa7:	eb ea                	jmp    c000fa93 <Reg::readString(char*, char*, char*, int)+0x3b>
c000faa9:	83 ec 0c             	sub    esp,0xc
c000faac:	53                   	push   ebx
c000faad:	e8 ae 0a ff ff       	call   c0000560 <strlen>
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000faba:	75 11                	jne    c000facd <Reg::readString(char*, char*, char*, int)+0x75>
c000fabc:	83 ec 0c             	sub    esp,0xc
c000fabf:	53                   	push   ebx
c000fac0:	e8 9b 0a ff ff       	call   c0000560 <strlen>
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000facd:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fad3:	89 f0                	mov    eax,esi
c000fad5:	5b                   	pop    ebx
c000fad6:	5e                   	pop    esi
c000fad7:	5f                   	pop    edi
c000fad8:	c3                   	ret    

c000fad9 <Reg::readBool(char*, char*, bool*)>:
c000fad9:	83 ec 20             	sub    esp,0x20
c000fadc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fae0:	50                   	push   eax
c000fae1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fae5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fae9:	e8 7f fe ff ff       	call   c000f96d <Reg::readInt(char*, char*, int*)>
c000faee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000faf3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000faf7:	0f 95 02             	setne  BYTE PTR [edx]
c000fafa:	83 c4 2c             	add    esp,0x2c
c000fafd:	c3                   	ret    

c000fafe <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fafe:	53                   	push   ebx
c000faff:	83 ec 1c             	sub    esp,0x1c
c000fb02:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fb06:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fb0a:	50                   	push   eax
c000fb0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb13:	e8 c1 ff ff ff       	call   c000fad9 <Reg::readBool(char*, char*, bool*)>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	84 c0                	test   al,al
c000fb1d:	74 04                	je     c000fb23 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fb1f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fb23:	88 d8                	mov    al,bl
c000fb25:	83 c4 18             	add    esp,0x18
c000fb28:	5b                   	pop    ebx
c000fb29:	c3                   	ret    

c000fb2a <Reg::readIntWithDefault(char*, char*, int)>:
c000fb2a:	53                   	push   ebx
c000fb2b:	83 ec 1c             	sub    esp,0x1c
c000fb2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fb32:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fb36:	50                   	push   eax
c000fb37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb3f:	e8 29 fe ff ff       	call   c000f96d <Reg::readInt(char*, char*, int*)>
c000fb44:	83 c4 10             	add    esp,0x10
c000fb47:	84 c0                	test   al,al
c000fb49:	74 04                	je     c000fb4f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fb4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb4f:	89 d8                	mov    eax,ebx
c000fb51:	83 c4 18             	add    esp,0x18
c000fb54:	5b                   	pop    ebx
c000fb55:	c3                   	ret    

c000fb56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fb56:	57                   	push   edi
c000fb57:	56                   	push   esi
c000fb58:	56                   	push   esi
c000fb59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fb61:	56                   	push   esi
c000fb62:	57                   	push   edi
c000fb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb6b:	e8 e8 fe ff ff       	call   c000fa58 <Reg::readString(char*, char*, char*, int)>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	84 c0                	test   al,al
c000fb75:	75 1a                	jne    c000fb91 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fb77:	51                   	push   ecx
c000fb78:	56                   	push   esi
c000fb79:	6a 00                	push   0x0
c000fb7b:	57                   	push   edi
c000fb7c:	e8 6f 09 ff ff       	call   c00004f0 <memset>
c000fb81:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fb84:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fb91:	89 f8                	mov    eax,edi
c000fb93:	5a                   	pop    edx
c000fb94:	5e                   	pop    esi
c000fb95:	5f                   	pop    edi
c000fb96:	c3                   	ret    

c000fb97 <Sys::eject(regs*)>:
c000fb97:	83 ec 0c             	sub    esp,0xc
c000fb9a:	83 ca ff             	or     edx,0xffffffff
c000fb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fba4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fba9:	83 e9 41             	sub    ecx,0x41
c000fbac:	83 f9 19             	cmp    ecx,0x19
c000fbaf:	77 18                	ja     c000fbc9 <Sys::eject(regs*)+0x32>
c000fbb1:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c000fbb8:	85 c9                	test   ecx,ecx
c000fbba:	74 0d                	je     c000fbc9 <Sys::eject(regs*)+0x32>
c000fbbc:	83 ec 0c             	sub    esp,0xc
c000fbbf:	51                   	push   ecx
c000fbc0:	e8 a9 c3 ff ff       	call   c000bf6e <LogicalDisk::eject()>
c000fbc5:	83 c4 10             	add    esp,0x10
c000fbc8:	99                   	cdq    
c000fbc9:	83 c4 0c             	add    esp,0xc
c000fbcc:	c3                   	ret    

c000fbcd <Sys::exit(regs*)>:
c000fbcd:	83 ec 18             	sub    esp,0x18
c000fbd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbd4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fbd7:	e8 dc 34 00 00       	call   c00130b8 <terminateTask(int)>
c000fbdc:	83 c8 ff             	or     eax,0xffffffff
c000fbdf:	83 c4 1c             	add    esp,0x1c
c000fbe2:	89 c2                	mov    edx,eax
c000fbe4:	c3                   	ret    

c000fbe5 <Sys::getCwd(regs*)>:
c000fbe5:	83 ec 10             	sub    esp,0x10
c000fbe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbec:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fbef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fbf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbf7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fbfa:	e8 69 a0 ff ff       	call   c0009c68 <Fs::getcwd(Process*, char*, int)>
c000fbff:	83 c4 1c             	add    esp,0x1c
c000fc02:	99                   	cdq    
c000fc03:	c3                   	ret    

c000fc04 <Sys::getPID(regs*)>:
c000fc04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fc0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0e:	99                   	cdq    
c000fc0f:	c3                   	ret    

c000fc10 <Sys::getRAMData(regs*)>:
c000fc10:	8b 0d d8 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2d8
c000fc16:	69 05 d4 f2 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f2d4,0xc8
c000fc20:	99                   	cdq    
c000fc21:	f7 f9                	idiv   ecx
c000fc23:	c1 e0 18             	shl    eax,0x18
c000fc26:	09 c8                	or     eax,ecx
c000fc28:	99                   	cdq    
c000fc29:	c3                   	ret    

c000fc2a <Sys::getVGAPtr(regs*)>:
c000fc2a:	55                   	push   ebp
c000fc2b:	57                   	push   edi
c000fc2c:	56                   	push   esi
c000fc2d:	53                   	push   ebx
c000fc2e:	83 ec 18             	sub    esp,0x18
c000fc31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fc35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fc38:	e8 7b 2f 00 00       	call   c0012bb8 <Thr::processFromPID(int)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	89 c1                	mov    ecx,eax
c000fc42:	b8 01 00 00 00       	mov    eax,0x1
c000fc47:	85 c9                	test   ecx,ecx
c000fc49:	74 57                	je     c000fca2 <Sys::getVGAPtr(regs*)+0x78>
c000fc4b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fc51:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fc55:	74 0c                	je     c000fc63 <Sys::getVGAPtr(regs*)+0x39>
c000fc57:	83 ec 0c             	sub    esp,0xc
c000fc5a:	55                   	push   ebp
c000fc5b:	e8 31 7c ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fc66:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fc69:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fc6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc70:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fc73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc76:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fc7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc7f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fc82:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fc88:	50                   	push   eax
c000fc89:	50                   	push   eax
c000fc8a:	68 bf db 01 c0       	push   0xc001dbbf
c000fc8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fc92:	05 a8 0f 00 00       	add    eax,0xfa8
c000fc97:	50                   	push   eax
c000fc98:	e8 83 09 ff ff       	call   c0000620 <strcpy>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	31 c0                	xor    eax,eax
c000fca2:	83 c4 0c             	add    esp,0xc
c000fca5:	31 d2                	xor    edx,edx
c000fca7:	5b                   	pop    ebx
c000fca8:	5e                   	pop    esi
c000fca9:	5f                   	pop    edi
c000fcaa:	5d                   	pop    ebp
c000fcab:	c3                   	ret    

c000fcac <Sys::loadDLL(regs*)>:
c000fcac:	56                   	push   esi
c000fcad:	53                   	push   ebx
c000fcae:	31 d2                	xor    edx,edx
c000fcb0:	51                   	push   ecx
c000fcb1:	b8 01 00 00 00       	mov    eax,0x1
c000fcb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcba:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fcbe:	0f 84 8c 00 00 00    	je     c000fd50 <Sys::loadDLL(regs*)+0xa4>
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	68 14 01 00 00       	push   0x114
c000fccc:	e8 90 6e ff ff       	call   c0006b61 <malloc>
c000fcd1:	83 c4 0c             	add    esp,0xc
c000fcd4:	89 c3                	mov    ebx,eax
c000fcd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fcdb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fcde:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fce1:	53                   	push   ebx
c000fce2:	e8 7f a1 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	31 d2                	xor    edx,edx
c000fcec:	b8 02 00 00 00       	mov    eax,0x2
c000fcf1:	85 db                	test   ebx,ebx
c000fcf3:	74 5b                	je     c000fd50 <Sys::loadDLL(regs*)+0xa4>
c000fcf5:	83 ec 0c             	sub    esp,0xc
c000fcf8:	53                   	push   ebx
c000fcf9:	e8 96 a4 ff ff       	call   c000a194 <File::exists()>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	84 c0                	test   al,al
c000fd03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd05:	75 11                	jne    c000fd18 <Sys::loadDLL(regs*)+0x6c>
c000fd07:	83 ec 0c             	sub    esp,0xc
c000fd0a:	53                   	push   ebx
c000fd0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	b8 03 00 00 00       	mov    eax,0x3
c000fd16:	eb 36                	jmp    c000fd4e <Sys::loadDLL(regs*)+0xa2>
c000fd18:	83 ec 0c             	sub    esp,0xc
c000fd1b:	53                   	push   ebx
c000fd1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fd1f:	58                   	pop    eax
c000fd20:	5a                   	pop    edx
c000fd21:	6a 00                	push   0x0
c000fd23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fd26:	e8 77 20 00 00       	call   c0011da2 <Thr::loadDLL(char const*, bool)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	89 c1                	mov    ecx,eax
c000fd30:	31 d2                	xor    edx,edx
c000fd32:	b8 04 00 00 00       	mov    eax,0x4
c000fd37:	85 c9                	test   ecx,ecx
c000fd39:	74 15                	je     c000fd50 <Sys::loadDLL(regs*)+0xa4>
c000fd3b:	53                   	push   ebx
c000fd3c:	53                   	push   ebx
c000fd3d:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c000fd43:	51                   	push   ecx
c000fd44:	e8 8a 22 00 00       	call   c0011fd3 <Thr::executeDLL(unsigned long, void*)>
c000fd49:	83 c4 10             	add    esp,0x10
c000fd4c:	31 c0                	xor    eax,eax
c000fd4e:	31 d2                	xor    edx,edx
c000fd50:	59                   	pop    ecx
c000fd51:	5b                   	pop    ebx
c000fd52:	5e                   	pop    esi
c000fd53:	c3                   	ret    

c000fd54 <Sys::read(regs*)>:
c000fd54:	57                   	push   edi
c000fd55:	56                   	push   esi
c000fd56:	53                   	push   ebx
c000fd57:	83 ec 10             	sub    esp,0x10
c000fd5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd61:	83 f8 02             	cmp    eax,0x2
c000fd64:	77 10                	ja     c000fd76 <Sys::read(regs*)+0x22>
c000fd66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fd6e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fd74:	eb 0e                	jmp    c000fd84 <Sys::read(regs*)+0x30>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	50                   	push   eax
c000fd7a:	e8 c8 87 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	89 c1                	mov    ecx,eax
c000fd84:	83 c8 ff             	or     eax,0xffffffff
c000fd87:	85 c9                	test   ecx,ecx
c000fd89:	89 c2                	mov    edx,eax
c000fd8b:	74 28                	je     c000fdb5 <Sys::read(regs*)+0x61>
c000fd8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd95:	31 ff                	xor    edi,edi
c000fd97:	83 ec 0c             	sub    esp,0xc
c000fd9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fda0:	52                   	push   edx
c000fda1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fda4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000fda7:	57                   	push   edi
c000fda8:	56                   	push   esi
c000fda9:	51                   	push   ecx
c000fdaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fdad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fdb1:	83 c4 20             	add    esp,0x20
c000fdb4:	99                   	cdq    
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	5b                   	pop    ebx
c000fdb9:	5e                   	pop    esi
c000fdba:	5f                   	pop    edi
c000fdbb:	c3                   	ret    

c000fdbc <Sys::sbrk(regs*)>:
c000fdbc:	56                   	push   esi
c000fdbd:	53                   	push   ebx
c000fdbe:	50                   	push   eax
c000fdbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fdcb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000fdce:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000fdd4:	85 db                	test   ebx,ebx
c000fdd6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000fdd9:	74 02                	je     c000fddd <Sys::sbrk(regs*)+0x21>
c000fddb:	79 06                	jns    c000fde3 <Sys::sbrk(regs*)+0x27>
c000fddd:	89 f0                	mov    eax,esi
c000fddf:	31 d2                	xor    edx,edx
c000fde1:	eb 2a                	jmp    c000fe0d <Sys::sbrk(regs*)+0x51>
c000fde3:	83 c8 ff             	or     eax,0xffffffff
c000fde6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000fdec:	89 c2                	mov    edx,eax
c000fdee:	77 1d                	ja     c000fe0d <Sys::sbrk(regs*)+0x51>
c000fdf0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000fdf6:	50                   	push   eax
c000fdf7:	c1 ea 0c             	shr    edx,0xc
c000fdfa:	68 07 0c 00 00       	push   0xc07
c000fdff:	52                   	push   edx
c000fe00:	51                   	push   ecx
c000fe01:	e8 30 90 ff ff       	call   c0008e36 <VAS::allocatePages(int, int)>
c000fe06:	89 f0                	mov    eax,esi
c000fe08:	31 d2                	xor    edx,edx
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	59                   	pop    ecx
c000fe0e:	5b                   	pop    ebx
c000fe0f:	5e                   	pop    esi
c000fe10:	c3                   	ret    

c000fe11 <Sys::setCwd(regs*)>:
c000fe11:	83 ec 14             	sub    esp,0x14
c000fe14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe18:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fe1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe20:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fe23:	e8 0b a4 ff ff       	call   c000a233 <Fs::setcwd(Process*, char*)>
c000fe28:	83 c4 1c             	add    esp,0x1c
c000fe2b:	99                   	cdq    
c000fe2c:	c3                   	ret    

c000fe2d <Sys::setTime(regs*)>:
c000fe2d:	55                   	push   ebp
c000fe2e:	31 c9                	xor    ecx,ecx
c000fe30:	57                   	push   edi
c000fe31:	bd 0c 00 00 00       	mov    ebp,0xc
c000fe36:	56                   	push   esi
c000fe37:	53                   	push   ebx
c000fe38:	31 db                	xor    ebx,ebx
c000fe3a:	83 ec 10             	sub    esp,0x10
c000fe3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe41:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c000fe44:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000fe47:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c000fe4a:	89 c2                	mov    edx,eax
c000fe4c:	66 81 ef 6c 07       	sub    di,0x76c
c000fe51:	83 e2 1f             	and    edx,0x1f
c000fe54:	c1 e7 10             	shl    edi,0x10
c000fe57:	42                   	inc    edx
c000fe58:	c1 e8 05             	shr    eax,0x5
c000fe5b:	88 d1                	mov    cl,dl
c000fe5d:	31 d2                	xor    edx,edx
c000fe5f:	f7 f5                	div    ebp
c000fe61:	89 dd                	mov    ebp,ebx
c000fe63:	88 d5                	mov    ch,dl
c000fe65:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c000fe6b:	0f b7 c1             	movzx  eax,cx
c000fe6e:	31 d2                	xor    edx,edx
c000fe70:	09 f8                	or     eax,edi
c000fe72:	bf 3c 00 00 00       	mov    edi,0x3c
c000fe77:	89 c1                	mov    ecx,eax
c000fe79:	89 f0                	mov    eax,esi
c000fe7b:	f7 f7                	div    edi
c000fe7d:	c1 e2 10             	shl    edx,0x10
c000fe80:	09 d5                	or     ebp,edx
c000fe82:	31 d2                	xor    edx,edx
c000fe84:	89 eb                	mov    ebx,ebp
c000fe86:	f7 f7                	div    edi
c000fe88:	bf 10 0e 00 00       	mov    edi,0xe10
c000fe8d:	88 d7                	mov    bh,dl
c000fe8f:	89 f0                	mov    eax,esi
c000fe91:	31 d2                	xor    edx,edx
c000fe93:	f7 f7                	div    edi
c000fe95:	bf 18 00 00 00       	mov    edi,0x18
c000fe9a:	31 d2                	xor    edx,edx
c000fe9c:	f7 f7                	div    edi
c000fe9e:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c000fea3:	88 d3                	mov    bl,dl
c000fea5:	53                   	push   ebx
c000fea6:	51                   	push   ecx
c000fea7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000fead:	e8 92 ab ff ff       	call   c000aa44 <Clock::setTimeInDatetimeLocal(datetime_t)>
c000feb2:	83 c4 1c             	add    esp,0x1c
c000feb5:	83 f0 01             	xor    eax,0x1
c000feb8:	5b                   	pop    ebx
c000feb9:	0f b6 c0             	movzx  eax,al
c000febc:	5e                   	pop    esi
c000febd:	31 d2                	xor    edx,edx
c000febf:	5f                   	pop    edi
c000fec0:	5d                   	pop    ebp
c000fec1:	c3                   	ret    

c000fec2 <Sys::timezone(regs*)>:
c000fec2:	53                   	push   ebx
c000fec3:	83 ec 08             	sub    esp,0x8
c000fec6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feca:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c000fece:	75 17                	jne    c000fee7 <Sys::timezone(regs*)+0x25>
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	68 c9 db 01 c0       	push   0xc001dbc9
c000fed8:	e8 13 9a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000fedd:	83 c8 ff             	or     eax,0xffffffff
c000fee0:	83 c4 10             	add    esp,0x10
c000fee3:	89 c2                	mov    edx,eax
c000fee5:	eb 20                	jmp    c000ff07 <Sys::timezone(regs*)+0x45>
c000fee7:	83 ec 0c             	sub    esp,0xc
c000feea:	68 de db 01 c0       	push   0xc001dbde
c000feef:	e8 fc 99 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000fef4:	58                   	pop    eax
c000fef5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000fef8:	e8 a3 a8 ff ff       	call   c000a7a0 <User::loadClockSettings(int)>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	b8 01 00 00 00       	mov    eax,0x1
c000ff05:	31 d2                	xor    edx,edx
c000ff07:	83 c4 08             	add    esp,0x8
c000ff0a:	5b                   	pop    ebx
c000ff0b:	c3                   	ret    

c000ff0c <Sys::write(regs*)>:
c000ff0c:	57                   	push   edi
c000ff0d:	56                   	push   esi
c000ff0e:	53                   	push   ebx
c000ff0f:	83 ec 10             	sub    esp,0x10
c000ff12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ff16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ff19:	83 f8 02             	cmp    eax,0x2
c000ff1c:	77 10                	ja     c000ff2e <Sys::write(regs*)+0x22>
c000ff1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff26:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000ff2c:	eb 0e                	jmp    c000ff3c <Sys::write(regs*)+0x30>
c000ff2e:	83 ec 0c             	sub    esp,0xc
c000ff31:	50                   	push   eax
c000ff32:	e8 10 86 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c000ff37:	83 c4 10             	add    esp,0x10
c000ff3a:	89 c1                	mov    ecx,eax
c000ff3c:	83 c8 ff             	or     eax,0xffffffff
c000ff3f:	85 c9                	test   ecx,ecx
c000ff41:	89 c2                	mov    edx,eax
c000ff43:	74 28                	je     c000ff6d <Sys::write(regs*)+0x61>
c000ff45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff4d:	31 ff                	xor    edi,edi
c000ff4f:	83 ec 0c             	sub    esp,0xc
c000ff52:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff54:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ff58:	52                   	push   edx
c000ff59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ff5c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000ff5f:	57                   	push   edi
c000ff60:	56                   	push   esi
c000ff61:	51                   	push   ecx
c000ff62:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ff65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff69:	83 c4 20             	add    esp,0x20
c000ff6c:	99                   	cdq    
c000ff6d:	83 c4 10             	add    esp,0x10
c000ff70:	5b                   	pop    ebx
c000ff71:	5e                   	pop    esi
c000ff72:	5f                   	pop    edi
c000ff73:	c3                   	ret    

c000ff74 <Sys::wsbe(regs*)>:
c000ff74:	57                   	push   edi
c000ff75:	b9 0b 00 00 00       	mov    ecx,0xb
c000ff7a:	56                   	push   esi
c000ff7b:	be 1d dc 01 c0       	mov    esi,0xc001dc1d
c000ff80:	53                   	push   ebx
c000ff81:	83 ec 30             	sub    esp,0x30
c000ff84:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000ff88:	fc                   	cld    
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff8e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ff92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff9a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c000ffa0:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffa2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c000ffa5:	57                   	push   edi
c000ffa6:	e8 b5 05 ff ff       	call   c0000560 <strlen>
c000ffab:	5a                   	pop    edx
c000ffac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000ffb0:	52                   	push   edx
c000ffb1:	31 d2                	xor    edx,edx
c000ffb3:	57                   	push   edi
c000ffb4:	52                   	push   edx
c000ffb5:	50                   	push   eax
c000ffb6:	56                   	push   esi
c000ffb7:	ff d3                	call   ebx
c000ffb9:	83 c4 14             	add    esp,0x14
c000ffbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ffc0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000ffc3:	e8 f0 30 00 00       	call   c00130b8 <terminateTask(int)>
c000ffc8:	83 c4 40             	add    esp,0x40
c000ffcb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000ffd0:	5b                   	pop    ebx
c000ffd1:	31 d2                	xor    edx,edx
c000ffd3:	5e                   	pop    esi
c000ffd4:	5f                   	pop    edi
c000ffd5:	c3                   	ret    

c000ffd6 <Sys::yield(regs*)>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	fa                   	cli    
c000ffda:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c000ffe0:	e8 af 27 00 00       	call   c0012794 <schedule()>
c000ffe5:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c000ffea:	48                   	dec    eax
c000ffeb:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c000fff0:	75 01                	jne    c000fff3 <Sys::yield(regs*)+0x1d>
c000fff2:	fb                   	sti    
c000fff3:	31 c0                	xor    eax,eax
c000fff5:	31 d2                	xor    edx,edx
c000fff7:	83 c4 0c             	add    esp,0xc
c000fffa:	c3                   	ret    

c000fffb <sysCallSeekDir(regs*)>:
c000fffb:	31 c0                	xor    eax,eax
c000fffd:	31 d2                	xor    edx,edx
c000ffff:	c3                   	ret    

c0010000 <sysCallTellDir(regs*)>:
c0010000:	31 c0                	xor    eax,eax
c0010002:	31 d2                	xor    edx,edx
c0010004:	c3                   	ret    

c0010005 <sysCallVerify(regs*)>:
c0010005:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010009:	31 d2                	xor    edx,edx
c001000b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001000e:	c3                   	ret    

c001000f <sysCallGetArgc(regs*)>:
c001000f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010017:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001001d:	99                   	cdq    
c001001e:	c3                   	ret    

c001001f <sysCallTTYName(regs*)>:
c001001f:	b8 01 00 00 00       	mov    eax,0x1
c0010024:	31 d2                	xor    edx,edx
c0010026:	c3                   	ret    

c0010027 <sysFormatDisk(regs*)>:
c0010027:	56                   	push   esi
c0010028:	53                   	push   ebx
c0010029:	50                   	push   eax
c001002a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001002e:	8b 1d 94 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f394
c0010034:	eb 28                	jmp    c001005e <sysFormatDisk(regs*)+0x37>
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001003c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001003f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010041:	51                   	push   ecx
c0010042:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010045:	51                   	push   ecx
c0010046:	50                   	push   eax
c0010047:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c001004e:	50                   	push   eax
c001004f:	53                   	push   ebx
c0010050:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010053:	83 c4 20             	add    esp,0x20
c0010056:	83 f8 08             	cmp    eax,0x8
c0010059:	75 12                	jne    c001006d <sysFormatDisk(regs*)+0x46>
c001005b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001005e:	85 db                	test   ebx,ebx
c0010060:	75 d4                	jne    c0010036 <sysFormatDisk(regs*)+0xf>
c0010062:	59                   	pop    ecx
c0010063:	b8 03 00 00 00       	mov    eax,0x3
c0010068:	31 d2                	xor    edx,edx
c001006a:	5b                   	pop    ebx
c001006b:	5e                   	pop    esi
c001006c:	c3                   	ret    
c001006d:	85 c0                	test   eax,eax
c001006f:	74 1b                	je     c001008c <sysFormatDisk(regs*)+0x65>
c0010071:	83 f8 09             	cmp    eax,0x9
c0010074:	74 0b                	je     c0010081 <sysFormatDisk(regs*)+0x5a>
c0010076:	59                   	pop    ecx
c0010077:	b8 02 00 00 00       	mov    eax,0x2
c001007c:	31 d2                	xor    edx,edx
c001007e:	5b                   	pop    ebx
c001007f:	5e                   	pop    esi
c0010080:	c3                   	ret    
c0010081:	59                   	pop    ecx
c0010082:	b8 01 00 00 00       	mov    eax,0x1
c0010087:	31 d2                	xor    edx,edx
c0010089:	5b                   	pop    ebx
c001008a:	5e                   	pop    esi
c001008b:	c3                   	ret    
c001008c:	59                   	pop    ecx
c001008d:	31 c0                	xor    eax,eax
c001008f:	31 d2                	xor    edx,edx
c0010091:	5b                   	pop    ebx
c0010092:	5e                   	pop    esi
c0010093:	c3                   	ret    

c0010094 <sysSetDiskVolumeLabel(regs*)>:
c0010094:	56                   	push   esi
c0010095:	53                   	push   ebx
c0010096:	53                   	push   ebx
c0010097:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001009b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001009e:	83 f8 19             	cmp    eax,0x19
c00100a1:	77 2d                	ja     c00100d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00100a3:	8b 0c 85 00 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde800]
c00100aa:	85 c9                	test   ecx,ecx
c00100ac:	74 22                	je     c00100d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00100ae:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00100b1:	85 db                	test   ebx,ebx
c00100b3:	74 1b                	je     c00100d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00100b5:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00100bb:	85 d2                	test   edx,edx
c00100bd:	74 11                	je     c00100d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00100bf:	8b 32                	mov    esi,DWORD PTR [edx]
c00100c1:	53                   	push   ebx
c00100c2:	50                   	push   eax
c00100c3:	51                   	push   ecx
c00100c4:	52                   	push   edx
c00100c5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	99                   	cdq    
c00100cc:	59                   	pop    ecx
c00100cd:	5b                   	pop    ebx
c00100ce:	5e                   	pop    esi
c00100cf:	c3                   	ret    
c00100d0:	59                   	pop    ecx
c00100d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00100d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100db:	5b                   	pop    ebx
c00100dc:	5e                   	pop    esi
c00100dd:	c3                   	ret    

c00100de <sysGetDiskVolumeLabel(regs*)>:
c00100de:	57                   	push   edi
c00100df:	56                   	push   esi
c00100e0:	53                   	push   ebx
c00100e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00100e8:	83 fa 19             	cmp    edx,0x19
c00100eb:	77 38                	ja     c0010125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100ed:	8b 0c 95 00 18 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde800]
c00100f4:	85 c9                	test   ecx,ecx
c00100f6:	74 2d                	je     c0010125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100fb:	85 db                	test   ebx,ebx
c00100fd:	74 26                	je     c0010125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00100ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010102:	85 f6                	test   esi,esi
c0010104:	74 1f                	je     c0010125 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010106:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001010c:	85 c0                	test   eax,eax
c001010e:	74 15                	je     c0010125 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	8b 38                	mov    edi,DWORD PTR [eax]
c0010115:	56                   	push   esi
c0010116:	53                   	push   ebx
c0010117:	52                   	push   edx
c0010118:	51                   	push   ecx
c0010119:	50                   	push   eax
c001011a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001011d:	83 c4 20             	add    esp,0x20
c0010120:	99                   	cdq    
c0010121:	5b                   	pop    ebx
c0010122:	5e                   	pop    esi
c0010123:	5f                   	pop    edi
c0010124:	c3                   	ret    
c0010125:	5b                   	pop    ebx
c0010126:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001012b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010130:	5e                   	pop    esi
c0010131:	5f                   	pop    edi
c0010132:	c3                   	ret    

c0010133 <sysShutdown(regs*)>:
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001013d:	85 c0                	test   eax,eax
c001013f:	74 18                	je     c0010159 <sysShutdown(regs*)+0x26>
c0010141:	83 f8 01             	cmp    eax,0x1
c0010144:	74 38                	je     c001017e <sysShutdown(regs*)+0x4b>
c0010146:	83 f8 02             	cmp    eax,0x2
c0010149:	74 24                	je     c001016f <sysShutdown(regs*)+0x3c>
c001014b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010150:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010155:	83 c4 0c             	add    esp,0xc
c0010158:	c3                   	ret    
c0010159:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001015e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010160:	6a 00                	push   0x0
c0010162:	6a 00                	push   0x0
c0010164:	6a 00                	push   0x0
c0010166:	50                   	push   eax
c0010167:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	eb dc                	jmp    c001014b <sysShutdown(regs*)+0x18>
c001016f:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0010174:	8b 10                	mov    edx,DWORD PTR [eax]
c0010176:	6a 00                	push   0x0
c0010178:	6a 00                	push   0x0
c001017a:	6a 01                	push   0x1
c001017c:	eb e8                	jmp    c0010166 <sysShutdown(regs*)+0x33>
c001017e:	a1 80 18 02 c0       	mov    eax,ds:0xc0021880
c0010183:	85 c0                	test   eax,eax
c0010185:	74 02                	je     c0010189 <sysShutdown(regs*)+0x56>
c0010187:	ff d0                	call   eax
c0010189:	31 c0                	xor    eax,eax
c001018b:	31 d2                	xor    edx,edx
c001018d:	83 c4 0c             	add    esp,0xc
c0010190:	c3                   	ret    

c0010191 <sysCallRealpath(regs*)>:
c0010191:	83 ec 0c             	sub    esp,0xc
c0010194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010198:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001019b:	85 d2                	test   edx,edx
c001019d:	74 07                	je     c00101a6 <sysCallRealpath(regs*)+0x15>
c001019f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00101a2:	85 c0                	test   eax,eax
c00101a4:	75 0b                	jne    c00101b1 <sysCallRealpath(regs*)+0x20>
c00101a6:	b8 01 00 00 00       	mov    eax,0x1
c00101ab:	31 d2                	xor    edx,edx
c00101ad:	83 c4 0c             	add    esp,0xc
c00101b0:	c3                   	ret    
c00101b1:	51                   	push   ecx
c00101b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00101b8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00101bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00101c1:	51                   	push   ecx
c00101c2:	52                   	push   edx
c00101c3:	50                   	push   eax
c00101c4:	e8 f3 9a ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c00101c9:	83 c4 10             	add    esp,0x10
c00101cc:	31 c0                	xor    eax,eax
c00101ce:	31 d2                	xor    edx,edx
c00101d0:	83 c4 0c             	add    esp,0xc
c00101d3:	c3                   	ret    

c00101d4 <sysCallReadDir(regs*)>:
c00101d4:	53                   	push   ebx
c00101d5:	83 ec 18             	sub    esp,0x18
c00101d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101df:	83 f8 02             	cmp    eax,0x2
c00101e2:	76 61                	jbe    c0010245 <sysCallReadDir(regs*)+0x71>
c00101e4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101eb:	77 49                	ja     c0010236 <sysCallReadDir(regs*)+0x62>
c00101ed:	83 ec 0c             	sub    esp,0xc
c00101f0:	50                   	push   eax
c00101f1:	e8 51 83 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00101f6:	83 c4 10             	add    esp,0x10
c00101f9:	85 c0                	test   eax,eax
c00101fb:	74 39                	je     c0010236 <sysCallReadDir(regs*)+0x62>
c00101fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010205:	83 ec 0c             	sub    esp,0xc
c0010208:	8b 10                	mov    edx,DWORD PTR [eax]
c001020a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001020e:	51                   	push   ecx
c001020f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010212:	51                   	push   ecx
c0010213:	6a 00                	push   0x0
c0010215:	68 10 01 00 00       	push   0x110
c001021a:	50                   	push   eax
c001021b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001021e:	83 c4 20             	add    esp,0x20
c0010221:	85 c0                	test   eax,eax
c0010223:	74 29                	je     c001024e <sysCallReadDir(regs*)+0x7a>
c0010225:	83 f8 07             	cmp    eax,0x7
c0010228:	74 1b                	je     c0010245 <sysCallReadDir(regs*)+0x71>
c001022a:	b8 02 00 00 00       	mov    eax,0x2
c001022f:	31 d2                	xor    edx,edx
c0010231:	83 c4 18             	add    esp,0x18
c0010234:	5b                   	pop    ebx
c0010235:	c3                   	ret    
c0010236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001023b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010240:	83 c4 18             	add    esp,0x18
c0010243:	5b                   	pop    ebx
c0010244:	c3                   	ret    
c0010245:	b8 01 00 00 00       	mov    eax,0x1
c001024a:	31 d2                	xor    edx,edx
c001024c:	eb e3                	jmp    c0010231 <sysCallReadDir(regs*)+0x5d>
c001024e:	31 c0                	xor    eax,eax
c0010250:	31 d2                	xor    edx,edx
c0010252:	eb dd                	jmp    c0010231 <sysCallReadDir(regs*)+0x5d>

c0010254 <sysCallIsATTY(regs*)>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001025e:	83 f8 02             	cmp    eax,0x2
c0010261:	76 07                	jbe    c001026a <sysCallIsATTY(regs*)+0x16>
c0010263:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010268:	75 28                	jne    c0010292 <sysCallIsATTY(regs*)+0x3e>
c001026a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001026f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010272:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010278:	85 c0                	test   eax,eax
c001027a:	74 26                	je     c00102a2 <sysCallIsATTY(regs*)+0x4e>
c001027c:	83 ec 0c             	sub    esp,0xc
c001027f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010281:	50                   	push   eax
c0010282:	ff 12                	call   DWORD PTR [edx]
c0010284:	31 d2                	xor    edx,edx
c0010286:	25 ff 00 00 00       	and    eax,0xff
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	83 c4 0c             	add    esp,0xc
c0010291:	c3                   	ret    
c0010292:	83 ec 0c             	sub    esp,0xc
c0010295:	50                   	push   eax
c0010296:	e8 ac 82 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	85 c0                	test   eax,eax
c00102a0:	75 da                	jne    c001027c <sysCallIsATTY(regs*)+0x28>
c00102a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102ac:	83 c4 0c             	add    esp,0xc
c00102af:	c3                   	ret    

c00102b0 <sysCallSeek(regs*)>:
c00102b0:	53                   	push   ebx
c00102b1:	83 ec 08             	sub    esp,0x8
c00102b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102bb:	8d 50 fd             	lea    edx,[eax-0x3]
c00102be:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00102c4:	77 34                	ja     c00102fa <sysCallSeek(regs*)+0x4a>
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	50                   	push   eax
c00102ca:	e8 78 82 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00102cf:	83 c4 0c             	add    esp,0xc
c00102d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102d5:	31 db                	xor    ebx,ebx
c00102d7:	53                   	push   ebx
c00102d8:	51                   	push   ecx
c00102d9:	50                   	push   eax
c00102da:	e8 05 9d ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	85 c0                	test   eax,eax
c00102e4:	0f 95 c0             	setne  al
c00102e7:	31 d2                	xor    edx,edx
c00102e9:	25 ff 00 00 00       	and    eax,0xff
c00102ee:	f7 d8                	neg    eax
c00102f0:	83 d2 00             	adc    edx,0x0
c00102f3:	83 c4 08             	add    esp,0x8
c00102f6:	f7 da                	neg    edx
c00102f8:	5b                   	pop    ebx
c00102f9:	c3                   	ret    
c00102fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010304:	83 c4 08             	add    esp,0x8
c0010307:	5b                   	pop    ebx
c0010308:	c3                   	ret    

c0010309 <sysCallTell(regs*)>:
c0010309:	53                   	push   ebx
c001030a:	83 ec 08             	sub    esp,0x8
c001030d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010311:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010314:	83 f8 02             	cmp    eax,0x2
c0010317:	76 50                	jbe    c0010369 <sysCallTell(regs*)+0x60>
c0010319:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001031e:	76 19                	jbe    c0010339 <sysCallTell(regs*)+0x30>
c0010320:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010323:	31 d2                	xor    edx,edx
c0010325:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001032b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010332:	31 c0                	xor    eax,eax
c0010334:	83 c4 08             	add    esp,0x8
c0010337:	5b                   	pop    ebx
c0010338:	c3                   	ret    
c0010339:	83 ec 0c             	sub    esp,0xc
c001033c:	50                   	push   eax
c001033d:	e8 05 82 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010342:	5a                   	pop    edx
c0010343:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010346:	59                   	pop    ecx
c0010347:	53                   	push   ebx
c0010348:	50                   	push   eax
c0010349:	e8 ec 9c ff ff       	call   c000a03a <File::tell(unsigned long long*)>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	85 c0                	test   eax,eax
c0010353:	0f 95 c0             	setne  al
c0010356:	31 d2                	xor    edx,edx
c0010358:	25 ff 00 00 00       	and    eax,0xff
c001035d:	f7 d8                	neg    eax
c001035f:	83 d2 00             	adc    edx,0x0
c0010362:	83 c4 08             	add    esp,0x8
c0010365:	f7 da                	neg    edx
c0010367:	5b                   	pop    ebx
c0010368:	c3                   	ret    
c0010369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001036e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010373:	83 c4 08             	add    esp,0x8
c0010376:	5b                   	pop    ebx
c0010377:	c3                   	ret    

c0010378 <sysCallSize(regs*)>:
c0010378:	53                   	push   ebx
c0010379:	83 ec 18             	sub    esp,0x18
c001037c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010383:	83 f8 02             	cmp    eax,0x2
c0010386:	76 56                	jbe    c00103de <sysCallSize(regs*)+0x66>
c0010388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001038d:	76 19                	jbe    c00103a8 <sysCallSize(regs*)+0x30>
c001038f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010392:	31 d2                	xor    edx,edx
c0010394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001039a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103a1:	31 c0                	xor    eax,eax
c00103a3:	83 c4 18             	add    esp,0x18
c00103a6:	5b                   	pop    ebx
c00103a7:	c3                   	ret    
c00103a8:	83 ec 0c             	sub    esp,0xc
c00103ab:	50                   	push   eax
c00103ac:	e8 96 81 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00103b1:	83 c4 0c             	add    esp,0xc
c00103b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00103b8:	52                   	push   edx
c00103b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00103bc:	52                   	push   edx
c00103bd:	50                   	push   eax
c00103be:	e8 0f 9e ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c00103c3:	83 c4 10             	add    esp,0x10
c00103c6:	85 c0                	test   eax,eax
c00103c8:	0f 95 c0             	setne  al
c00103cb:	31 d2                	xor    edx,edx
c00103cd:	25 ff 00 00 00       	and    eax,0xff
c00103d2:	f7 d8                	neg    eax
c00103d4:	83 d2 00             	adc    edx,0x0
c00103d7:	83 c4 18             	add    esp,0x18
c00103da:	f7 da                	neg    edx
c00103dc:	5b                   	pop    ebx
c00103dd:	c3                   	ret    
c00103de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103e8:	83 c4 18             	add    esp,0x18
c00103eb:	5b                   	pop    ebx
c00103ec:	c3                   	ret    

c00103ed <sysCallSizeFromFilename(regs*)>:
c00103ed:	57                   	push   edi
c00103ee:	56                   	push   esi
c00103ef:	53                   	push   ebx
c00103f0:	83 ec 20             	sub    esp,0x20
c00103f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00103f7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00103fa:	83 fb 02             	cmp    ebx,0x2
c00103fd:	0f 86 8c 00 00 00    	jbe    c001048f <sysCallSizeFromFilename(regs*)+0xa2>
c0010403:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010409:	76 1b                	jbe    c0010426 <sysCallSizeFromFilename(regs*)+0x39>
c001040b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001040e:	31 d2                	xor    edx,edx
c0010410:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010416:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001041d:	83 c4 20             	add    esp,0x20
c0010420:	31 c0                	xor    eax,eax
c0010422:	5b                   	pop    ebx
c0010423:	5e                   	pop    esi
c0010424:	5f                   	pop    edi
c0010425:	c3                   	ret    
c0010426:	83 ec 0c             	sub    esp,0xc
c0010429:	68 14 01 00 00       	push   0x114
c001042e:	e8 2e 67 ff ff       	call   c0006b61 <malloc>
c0010433:	83 c4 0c             	add    esp,0xc
c0010436:	89 c7                	mov    edi,eax
c0010438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001043d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010440:	50                   	push   eax
c0010441:	53                   	push   ebx
c0010442:	57                   	push   edi
c0010443:	e8 1e 9a ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010448:	83 c4 0c             	add    esp,0xc
c001044b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001044f:	50                   	push   eax
c0010450:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010453:	52                   	push   edx
c0010454:	57                   	push   edi
c0010455:	e8 78 9d ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	85 ff                	test   edi,edi
c001045f:	74 14                	je     c0010475 <sysCallSizeFromFilename(regs*)+0x88>
c0010461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010465:	8b 17                	mov    edx,DWORD PTR [edi]
c0010467:	83 ec 0c             	sub    esp,0xc
c001046a:	57                   	push   edi
c001046b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010475:	85 c0                	test   eax,eax
c0010477:	0f 95 c0             	setne  al
c001047a:	31 d2                	xor    edx,edx
c001047c:	25 ff 00 00 00       	and    eax,0xff
c0010481:	f7 d8                	neg    eax
c0010483:	83 d2 00             	adc    edx,0x0
c0010486:	83 c4 20             	add    esp,0x20
c0010489:	f7 da                	neg    edx
c001048b:	5b                   	pop    ebx
c001048c:	5e                   	pop    esi
c001048d:	5f                   	pop    edi
c001048e:	c3                   	ret    
c001048f:	83 c4 20             	add    esp,0x20
c0010492:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010497:	5b                   	pop    ebx
c0010498:	ba ff ff ff ff       	mov    edx,0xffffffff
c001049d:	5e                   	pop    esi
c001049e:	5f                   	pop    edi
c001049f:	c3                   	ret    

c00104a0 <sysCallClose(regs*)>:
c00104a0:	53                   	push   ebx
c00104a1:	83 ec 08             	sub    esp,0x8
c00104a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00104ab:	83 f8 02             	cmp    eax,0x2
c00104ae:	76 41                	jbe    c00104f1 <sysCallClose(regs*)+0x51>
c00104b0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00104b6:	83 fa 01             	cmp    edx,0x1
c00104b9:	76 2d                	jbe    c00104e8 <sysCallClose(regs*)+0x48>
c00104bb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00104c0:	77 2f                	ja     c00104f1 <sysCallClose(regs*)+0x51>
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	50                   	push   eax
c00104c6:	e8 7c 80 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00104cb:	89 c3                	mov    ebx,eax
c00104cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00104d0:	e8 af 9a ff ff       	call   c0009f84 <File::close()>
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	85 db                	test   ebx,ebx
c00104da:	74 0c                	je     c00104e8 <sysCallClose(regs*)+0x48>
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104e1:	53                   	push   ebx
c00104e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	31 c0                	xor    eax,eax
c00104ea:	31 d2                	xor    edx,edx
c00104ec:	83 c4 08             	add    esp,0x8
c00104ef:	5b                   	pop    ebx
c00104f0:	c3                   	ret    
c00104f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104fb:	83 c4 08             	add    esp,0x8
c00104fe:	5b                   	pop    ebx
c00104ff:	c3                   	ret    

c0010500 <sysCallOpenDir(regs*)>:
c0010500:	56                   	push   esi
c0010501:	53                   	push   ebx
c0010502:	50                   	push   eax
c0010503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010507:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001050a:	85 c0                	test   eax,eax
c001050c:	74 5b                	je     c0010569 <sysCallOpenDir(regs*)+0x69>
c001050e:	83 ec 0c             	sub    esp,0xc
c0010511:	68 14 01 00 00       	push   0x114
c0010516:	e8 46 66 ff ff       	call   c0006b61 <malloc>
c001051b:	83 c4 0c             	add    esp,0xc
c001051e:	89 c6                	mov    esi,eax
c0010520:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010525:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010528:	50                   	push   eax
c0010529:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001052c:	50                   	push   eax
c001052d:	56                   	push   esi
c001052e:	e8 5d 9e ff ff       	call   c000a390 <Directory::Directory(char const*, Process*)>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	85 f6                	test   esi,esi
c0010538:	74 2f                	je     c0010569 <sysCallOpenDir(regs*)+0x69>
c001053a:	83 ec 0c             	sub    esp,0xc
c001053d:	56                   	push   esi
c001053e:	e8 0d 9f ff ff       	call   c000a450 <Directory::open()>
c0010543:	83 c4 10             	add    esp,0x10
c0010546:	85 c0                	test   eax,eax
c0010548:	75 1f                	jne    c0010569 <sysCallOpenDir(regs*)+0x69>
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	56                   	push   esi
c001054e:	e8 ff 7c ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010553:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	89 02                	mov    DWORD PTR [edx],eax
c001055b:	c1 f8 1f             	sar    eax,0x1f
c001055e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010561:	31 c0                	xor    eax,eax
c0010563:	59                   	pop    ecx
c0010564:	31 d2                	xor    edx,edx
c0010566:	5b                   	pop    ebx
c0010567:	5e                   	pop    esi
c0010568:	c3                   	ret    
c0010569:	59                   	pop    ecx
c001056a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001056f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010574:	5b                   	pop    ebx
c0010575:	5e                   	pop    esi
c0010576:	c3                   	ret    

c0010577 <sysCallCloseDir(regs*)>:
c0010577:	53                   	push   ebx
c0010578:	83 ec 08             	sub    esp,0x8
c001057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010582:	8d 50 fd             	lea    edx,[eax-0x3]
c0010585:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001058b:	77 2f                	ja     c00105bc <sysCallCloseDir(regs*)+0x45>
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	50                   	push   eax
c0010591:	e8 b1 7f ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010596:	89 c3                	mov    ebx,eax
c0010598:	89 04 24             	mov    DWORD PTR [esp],eax
c001059b:	e8 0c 9f ff ff       	call   c000a4ac <Directory::close()>
c00105a0:	83 c4 10             	add    esp,0x10
c00105a3:	85 db                	test   ebx,ebx
c00105a5:	74 0c                	je     c00105b3 <sysCallCloseDir(regs*)+0x3c>
c00105a7:	83 ec 0c             	sub    esp,0xc
c00105aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ac:	53                   	push   ebx
c00105ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105b0:	83 c4 10             	add    esp,0x10
c00105b3:	31 c0                	xor    eax,eax
c00105b5:	31 d2                	xor    edx,edx
c00105b7:	83 c4 08             	add    esp,0x8
c00105ba:	5b                   	pop    ebx
c00105bb:	c3                   	ret    
c00105bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105c6:	83 c4 08             	add    esp,0x8
c00105c9:	5b                   	pop    ebx
c00105ca:	c3                   	ret    

c00105cb <sysCallMakeDir(regs*)>:
c00105cb:	56                   	push   esi
c00105cc:	53                   	push   ebx
c00105cd:	83 ec 10             	sub    esp,0x10
c00105d0:	68 14 01 00 00       	push   0x114
c00105d5:	e8 87 65 ff ff       	call   c0006b61 <malloc>
c00105da:	83 c4 0c             	add    esp,0xc
c00105dd:	89 c3                	mov    ebx,eax
c00105df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105e4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00105e7:	56                   	push   esi
c00105e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105ef:	50                   	push   eax
c00105f0:	53                   	push   ebx
c00105f1:	e8 9a 9d ff ff       	call   c000a390 <Directory::Directory(char const*, Process*)>
c00105f6:	83 c4 10             	add    esp,0x10
c00105f9:	85 db                	test   ebx,ebx
c00105fb:	74 32                	je     c001062f <sysCallMakeDir(regs*)+0x64>
c00105fd:	83 ec 0c             	sub    esp,0xc
c0010600:	53                   	push   ebx
c0010601:	e8 2a a0 ff ff       	call   c000a630 <Directory::create()>
c0010606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010609:	89 c6                	mov    esi,eax
c001060b:	e8 9c 9e ff ff       	call   c000a4ac <Directory::close()>
c0010610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010612:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010615:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	31 c0                	xor    eax,eax
c001061d:	59                   	pop    ecx
c001061e:	85 f6                	test   esi,esi
c0010620:	5b                   	pop    ebx
c0010621:	0f 95 c0             	setne  al
c0010624:	5e                   	pop    esi
c0010625:	31 d2                	xor    edx,edx
c0010627:	f7 d8                	neg    eax
c0010629:	83 d2 00             	adc    edx,0x0
c001062c:	f7 da                	neg    edx
c001062e:	c3                   	ret    
c001062f:	59                   	pop    ecx
c0010630:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010635:	ba ff ff ff ff       	mov    edx,0xffffffff
c001063a:	5b                   	pop    ebx
c001063b:	5e                   	pop    esi
c001063c:	c3                   	ret    

c001063d <sysCallWait(regs*)>:
c001063d:	83 ec 10             	sub    esp,0x10
c0010640:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010644:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010647:	52                   	push   edx
c0010648:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001064b:	51                   	push   ecx
c001064c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001064f:	50                   	push   eax
c0010650:	e8 6b 23 00 00       	call   c00129c0 <waitTask(int, int*, int)>
c0010655:	83 c4 1c             	add    esp,0x1c
c0010658:	99                   	cdq    
c0010659:	c3                   	ret    

c001065a <sysCallNotImpl(regs*)>:
c001065a:	83 ec 18             	sub    esp,0x18
c001065d:	68 49 dc 01 c0       	push   0xc001dc49
c0010662:	e8 d8 ed ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0010667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001066c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010671:	83 c4 1c             	add    esp,0x1c
c0010674:	c3                   	ret    

c0010675 <sysPanic(regs*)>:
c0010675:	83 ec 18             	sub    esp,0x18
c0010678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001067c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001067f:	50                   	push   eax
c0010680:	e8 ba ed ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0010685:	b8 01 00 00 00       	mov    eax,0x1
c001068a:	31 d2                	xor    edx,edx
c001068c:	83 c4 1c             	add    esp,0x1c
c001068f:	c3                   	ret    

c0010690 <sysCallRmdir(regs*)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	83 ec 20             	sub    esp,0x20
c0010695:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010699:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001069c:	68 14 01 00 00       	push   0x114
c00106a1:	e8 bb 64 ff ff       	call   c0006b61 <malloc>
c00106a6:	83 c4 0c             	add    esp,0xc
c00106a9:	89 c3                	mov    ebx,eax
c00106ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106b3:	50                   	push   eax
c00106b4:	56                   	push   esi
c00106b5:	53                   	push   ebx
c00106b6:	e8 ab 97 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00106bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106be:	e8 db 99 ff ff       	call   c000a09e <File::unlink()>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 db                	test   ebx,ebx
c00106c8:	74 14                	je     c00106de <sysCallRmdir(regs*)+0x4e>
c00106ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00106d0:	83 ec 0c             	sub    esp,0xc
c00106d3:	53                   	push   ebx
c00106d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106de:	85 c0                	test   eax,eax
c00106e0:	0f 95 c0             	setne  al
c00106e3:	31 d2                	xor    edx,edx
c00106e5:	25 ff 00 00 00       	and    eax,0xff
c00106ea:	f7 d8                	neg    eax
c00106ec:	83 d2 00             	adc    edx,0x0
c00106ef:	83 c4 14             	add    esp,0x14
c00106f2:	f7 da                	neg    edx
c00106f4:	5b                   	pop    ebx
c00106f5:	5e                   	pop    esi
c00106f6:	c3                   	ret    

c00106f7 <sysCallUnlink(regs*)>:
c00106f7:	56                   	push   esi
c00106f8:	53                   	push   ebx
c00106f9:	83 ec 20             	sub    esp,0x20
c00106fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010700:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010703:	68 14 01 00 00       	push   0x114
c0010708:	e8 54 64 ff ff       	call   c0006b61 <malloc>
c001070d:	83 c4 0c             	add    esp,0xc
c0010710:	89 c3                	mov    ebx,eax
c0010712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001071a:	50                   	push   eax
c001071b:	56                   	push   esi
c001071c:	53                   	push   ebx
c001071d:	e8 44 97 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010722:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010725:	e8 74 99 ff ff       	call   c000a09e <File::unlink()>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	85 db                	test   ebx,ebx
c001072f:	74 14                	je     c0010745 <sysCallUnlink(regs*)+0x4e>
c0010731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010735:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010737:	83 ec 0c             	sub    esp,0xc
c001073a:	53                   	push   ebx
c001073b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010745:	85 c0                	test   eax,eax
c0010747:	0f 95 c0             	setne  al
c001074a:	31 d2                	xor    edx,edx
c001074c:	25 ff 00 00 00       	and    eax,0xff
c0010751:	f7 d8                	neg    eax
c0010753:	83 d2 00             	adc    edx,0x0
c0010756:	83 c4 14             	add    esp,0x14
c0010759:	f7 da                	neg    edx
c001075b:	5b                   	pop    ebx
c001075c:	5e                   	pop    esi
c001075d:	c3                   	ret    

c001075e <sysCallGetArgv(regs*)>:
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010765:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010768:	85 c0                	test   eax,eax
c001076a:	78 2c                	js     c0010798 <sysCallGetArgv(regs*)+0x3a>
c001076c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010772:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010775:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001077b:	7d 1b                	jge    c0010798 <sysCallGetArgv(regs*)+0x3a>
c001077d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010784:	85 c0                	test   eax,eax
c0010786:	74 18                	je     c00107a0 <sysCallGetArgv(regs*)+0x42>
c0010788:	83 ec 08             	sub    esp,0x8
c001078b:	50                   	push   eax
c001078c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001078f:	50                   	push   eax
c0010790:	e8 8b fe fe ff       	call   c0000620 <strcpy>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	31 c0                	xor    eax,eax
c001079a:	31 d2                	xor    edx,edx
c001079c:	83 c4 0c             	add    esp,0xc
c001079f:	c3                   	ret    
c00107a0:	b8 01 00 00 00       	mov    eax,0x1
c00107a5:	31 d2                	xor    edx,edx
c00107a7:	83 c4 0c             	add    esp,0xc
c00107aa:	c3                   	ret    

c00107ab <sysCallUSleep(regs*)>:
c00107ab:	83 ec 1c             	sub    esp,0x1c
c00107ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00107b2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00107b5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00107b8:	6a 00                	push   0x0
c00107ba:	6a 64                	push   0x64
c00107bc:	52                   	push   edx
c00107bd:	50                   	push   eax
c00107be:	e8 7d ad 00 00       	call   c001b540 <__udivdi3>
c00107c3:	83 c4 14             	add    esp,0x14
c00107c6:	50                   	push   eax
c00107c7:	e8 c8 22 00 00       	call   c0012a94 <milliTenthSleep(unsigned int)>
c00107cc:	31 c0                	xor    eax,eax
c00107ce:	31 d2                	xor    edx,edx
c00107d0:	83 c4 1c             	add    esp,0x1c
c00107d3:	c3                   	ret    

c00107d4 <sysCallSpawn(regs*)>:
c00107d4:	56                   	push   esi
c00107d5:	53                   	push   ebx
c00107d6:	50                   	push   eax
c00107d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00107de:	85 c0                	test   eax,eax
c00107e0:	75 08                	jne    c00107ea <sysCallSpawn(regs*)+0x16>
c00107e2:	59                   	pop    ecx
c00107e3:	31 c0                	xor    eax,eax
c00107e5:	31 d2                	xor    edx,edx
c00107e7:	5b                   	pop    ebx
c00107e8:	5e                   	pop    esi
c00107e9:	c3                   	ret    
c00107ea:	83 ec 0c             	sub    esp,0xc
c00107ed:	68 1f 07 00 00       	push   0x71f
c00107f2:	e8 6a 63 ff ff       	call   c0006b61 <malloc>
c00107f7:	83 c4 10             	add    esp,0x10
c00107fa:	89 c6                	mov    esi,eax
c00107fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010802:	85 c0                	test   eax,eax
c0010804:	75 33                	jne    c0010839 <sysCallSpawn(regs*)+0x65>
c0010806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001080b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001080e:	52                   	push   edx
c001080f:	50                   	push   eax
c0010810:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010813:	53                   	push   ebx
c0010814:	56                   	push   esi
c0010815:	e8 5e 19 00 00       	call   c0012178 <Process::Process(char const*, Process*, char**)>
c001081a:	83 c4 10             	add    esp,0x10
c001081d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010824:	75 bc                	jne    c00107e2 <sysCallSpawn(regs*)+0xe>
c0010826:	83 ec 0c             	sub    esp,0xc
c0010829:	56                   	push   esi
c001082a:	e8 3d 1e 00 00       	call   c001266c <Process::createUserThread()>
c001082f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	99                   	cdq    
c0010835:	59                   	pop    ecx
c0010836:	5b                   	pop    ebx
c0010837:	5e                   	pop    esi
c0010838:	c3                   	ret    
c0010839:	31 c0                	xor    eax,eax
c001083b:	eb d1                	jmp    c001080e <sysCallSpawn(regs*)+0x3a>

c001083d <sysCallGetEnv(regs*)>:
c001083d:	57                   	push   edi
c001083e:	56                   	push   esi
c001083f:	53                   	push   ebx
c0010840:	83 ec 1c             	sub    esp,0x1c
c0010843:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001084c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001084f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010852:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010855:	50                   	push   eax
c0010856:	e8 30 eb ff ff       	call   c000f38b <Krnl::getProcessTotalEnvCount(Process*)>
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	39 c7                	cmp    edi,eax
c0010860:	7c 14                	jl     c0010876 <sysCallGetEnv(regs*)+0x39>
c0010862:	85 f6                	test   esi,esi
c0010864:	75 0b                	jne    c0010871 <sysCallGetEnv(regs*)+0x34>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	31 c0                	xor    eax,eax
c001086b:	5b                   	pop    ebx
c001086c:	31 d2                	xor    edx,edx
c001086e:	5e                   	pop    esi
c001086f:	5f                   	pop    edi
c0010870:	c3                   	ret    
c0010871:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010874:	eb f0                	jmp    c0010866 <sysCallGetEnv(regs*)+0x29>
c0010876:	8d 44 24 08          	lea    eax,[esp+0x8]
c001087a:	52                   	push   edx
c001087b:	57                   	push   edi
c001087c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010882:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010885:	51                   	push   ecx
c0010886:	50                   	push   eax
c0010887:	e8 1f eb ff ff       	call   c000f3ab <Krnl::getProcessEnvPair(Process*, int)>
c001088c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010897:	83 c4 0c             	add    esp,0xc
c001089a:	85 db                	test   ebx,ebx
c001089c:	75 23                	jne    c00108c1 <sysCallGetEnv(regs*)+0x84>
c001089e:	83 ec 0c             	sub    esp,0xc
c00108a1:	50                   	push   eax
c00108a2:	e8 b9 fc fe ff       	call   c0000560 <strlen>
c00108a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00108aa:	89 c3                	mov    ebx,eax
c00108ac:	e8 af fc fe ff       	call   c0000560 <strlen>
c00108b1:	31 d2                	xor    edx,edx
c00108b3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00108b7:	83 c4 10             	add    esp,0x10
c00108ba:	83 c4 10             	add    esp,0x10
c00108bd:	5b                   	pop    ebx
c00108be:	5e                   	pop    esi
c00108bf:	5f                   	pop    edi
c00108c0:	c3                   	ret    
c00108c1:	83 ec 08             	sub    esp,0x8
c00108c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00108c7:	50                   	push   eax
c00108c8:	56                   	push   esi
c00108c9:	e8 52 fd fe ff       	call   c0000620 <strcpy>
c00108ce:	58                   	pop    eax
c00108cf:	5a                   	pop    edx
c00108d0:	68 63 dc 01 c0       	push   0xc001dc63
c00108d5:	56                   	push   esi
c00108d6:	e8 05 ff fe ff       	call   c00007e0 <strcat>
c00108db:	59                   	pop    ecx
c00108dc:	5b                   	pop    ebx
c00108dd:	57                   	push   edi
c00108de:	56                   	push   esi
c00108df:	e8 fc fe fe ff       	call   c00007e0 <strcat>
c00108e4:	83 c4 10             	add    esp,0x10
c00108e7:	e9 7a ff ff ff       	jmp    c0010866 <sysCallGetEnv(regs*)+0x29>

c00108ec <sysSetFatAttrib(regs*)>:
c00108ec:	57                   	push   edi
c00108ed:	56                   	push   esi
c00108ee:	53                   	push   ebx
c00108ef:	83 ec 1c             	sub    esp,0x1c
c00108f2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00108f6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00108f9:	68 14 01 00 00       	push   0x114
c00108fe:	e8 5e 62 ff ff       	call   c0006b61 <malloc>
c0010903:	83 c4 0c             	add    esp,0xc
c0010906:	89 c3                	mov    ebx,eax
c0010908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010910:	50                   	push   eax
c0010911:	57                   	push   edi
c0010912:	53                   	push   ebx
c0010913:	e8 4e 95 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010918:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001091b:	83 c4 0c             	add    esp,0xc
c001091e:	0f b6 d4             	movzx  edx,ah
c0010921:	25 ff 00 00 00       	and    eax,0xff
c0010926:	52                   	push   edx
c0010927:	50                   	push   eax
c0010928:	53                   	push   ebx
c0010929:	e8 0a 98 ff ff       	call   c000a138 <File::chfatattr(unsigned char, unsigned char)>
c001092e:	83 c4 10             	add    esp,0x10
c0010931:	85 db                	test   ebx,ebx
c0010933:	74 14                	je     c0010949 <sysSetFatAttrib(regs*)+0x5d>
c0010935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010939:	8b 13                	mov    edx,DWORD PTR [ebx]
c001093b:	83 ec 0c             	sub    esp,0xc
c001093e:	53                   	push   ebx
c001093f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010942:	83 c4 10             	add    esp,0x10
c0010945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010949:	85 c0                	test   eax,eax
c001094b:	0f 95 c0             	setne  al
c001094e:	31 d2                	xor    edx,edx
c0010950:	25 ff 00 00 00       	and    eax,0xff
c0010955:	f7 d8                	neg    eax
c0010957:	83 d2 00             	adc    edx,0x0
c001095a:	83 c4 10             	add    esp,0x10
c001095d:	f7 da                	neg    edx
c001095f:	5b                   	pop    ebx
c0010960:	5e                   	pop    esi
c0010961:	5f                   	pop    edi
c0010962:	c3                   	ret    

c0010963 <sysPipe(regs*)>:
c0010963:	57                   	push   edi
c0010964:	56                   	push   esi
c0010965:	53                   	push   ebx
c0010966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010970:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010973:	6a 20                	push   0x20
c0010975:	e8 e7 61 ff ff       	call   c0006b61 <malloc>
c001097a:	89 c3                	mov    ebx,eax
c001097c:	58                   	pop    eax
c001097d:	5a                   	pop    edx
c001097e:	68 00 50 00 00       	push   0x5000
c0010983:	53                   	push   ebx
c0010984:	e8 cf 6b ff ff       	call   c0007558 <Pipe::Pipe(int)>
c0010989:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001098c:	e8 c1 78 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010991:	89 07                	mov    DWORD PTR [edi],eax
c0010993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010996:	e8 b7 78 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	89 06                	mov    DWORD PTR [esi],eax
c00109a0:	31 d2                	xor    edx,edx
c00109a2:	5b                   	pop    ebx
c00109a3:	31 c0                	xor    eax,eax
c00109a5:	5e                   	pop    esi
c00109a6:	5f                   	pop    edi
c00109a7:	c3                   	ret    

c00109a8 <sysGetUnixTime(regs*)>:
c00109a8:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c00109ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00109b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109b7:	e9 ba 9e ff ff       	jmp    c000a876 <Clock::timeInSecondsLocal()>

c00109bc <string_ends_with(char const*, char const*)>:
c00109bc:	57                   	push   edi
c00109bd:	56                   	push   esi
c00109be:	53                   	push   ebx
c00109bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	53                   	push   ebx
c00109cb:	e8 90 fb fe ff       	call   c0000560 <strlen>
c00109d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109d3:	89 c6                	mov    esi,eax
c00109d5:	e8 86 fb fe ff       	call   c0000560 <strlen>
c00109da:	83 c4 10             	add    esp,0x10
c00109dd:	39 c6                	cmp    esi,eax
c00109df:	7d 06                	jge    c00109e7 <string_ends_with(char const*, char const*)+0x2b>
c00109e1:	5b                   	pop    ebx
c00109e2:	31 c0                	xor    eax,eax
c00109e4:	5e                   	pop    esi
c00109e5:	5f                   	pop    edi
c00109e6:	c3                   	ret    
c00109e7:	83 ec 08             	sub    esp,0x8
c00109ea:	29 c6                	sub    esi,eax
c00109ec:	57                   	push   edi
c00109ed:	01 f3                	add    ebx,esi
c00109ef:	53                   	push   ebx
c00109f0:	e8 0b fd fe ff       	call   c0000700 <strcmp>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	85 c0                	test   eax,eax
c00109fa:	5b                   	pop    ebx
c00109fb:	0f 94 c0             	sete   al
c00109fe:	5e                   	pop    esi
c00109ff:	25 ff 00 00 00       	and    eax,0xff
c0010a04:	5f                   	pop    edi
c0010a05:	c3                   	ret    

c0010a06 <sysCallOpen(regs*)>:
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	81 ec 04 01 00 00    	sub    esp,0x104
c0010a0e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010a15:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010a18:	85 c9                	test   ecx,ecx
c0010a1a:	0f 84 b9 01 00 00    	je     c0010bd9 <sysCallOpen(regs*)+0x1d3>
c0010a20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a23:	85 c0                	test   eax,eax
c0010a25:	0f 84 ae 01 00 00    	je     c0010bd9 <sysCallOpen(regs*)+0x1d3>
c0010a2b:	52                   	push   edx
c0010a2c:	68 65 dc 01 c0       	push   0xc001dc65
c0010a31:	50                   	push   eax
c0010a32:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010a36:	56                   	push   esi
c0010a37:	e8 80 92 ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010a3f:	e8 1c fb fe ff       	call   c0000560 <strlen>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	48                   	dec    eax
c0010a48:	74 1d                	je     c0010a67 <sysCallOpen(regs*)+0x61>
c0010a4a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010a4d:	eb 0f                	jmp    c0010a5e <sysCallOpen(regs*)+0x58>
c0010a4f:	80 fa 3a             	cmp    dl,0x3a
c0010a52:	74 0f                	je     c0010a63 <sysCallOpen(regs*)+0x5d>
c0010a54:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010a58:	48                   	dec    eax
c0010a59:	74 0c                	je     c0010a67 <sysCallOpen(regs*)+0x61>
c0010a5b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010a5e:	80 fa 2e             	cmp    dl,0x2e
c0010a61:	75 ec                	jne    c0010a4f <sysCallOpen(regs*)+0x49>
c0010a63:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010a67:	83 ec 08             	sub    esp,0x8
c0010a6a:	68 69 dc 01 c0       	push   0xc001dc69
c0010a6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a72:	50                   	push   eax
c0010a73:	e8 44 ff ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010a78:	83 c4 10             	add    esp,0x10
c0010a7b:	85 c0                	test   eax,eax
c0010a7d:	74 1d                	je     c0010a9c <sysCallOpen(regs*)+0x96>
c0010a7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a82:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010a88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a8f:	81 c4 04 01 00 00    	add    esp,0x104
c0010a95:	31 c0                	xor    eax,eax
c0010a97:	31 d2                	xor    edx,edx
c0010a99:	5b                   	pop    ebx
c0010a9a:	5e                   	pop    esi
c0010a9b:	c3                   	ret    
c0010a9c:	83 ec 08             	sub    esp,0x8
c0010a9f:	68 6e dc 01 c0       	push   0xc001dc6e
c0010aa4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010aa7:	50                   	push   eax
c0010aa8:	e8 0f ff ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010aad:	83 c4 10             	add    esp,0x10
c0010ab0:	85 c0                	test   eax,eax
c0010ab2:	75 cb                	jne    c0010a7f <sysCallOpen(regs*)+0x79>
c0010ab4:	83 ec 08             	sub    esp,0x8
c0010ab7:	68 6a dc 01 c0       	push   0xc001dc6a
c0010abc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010abf:	50                   	push   eax
c0010ac0:	e8 3b fc fe ff       	call   c0000700 <strcmp>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	74 b3                	je     c0010a7f <sysCallOpen(regs*)+0x79>
c0010acc:	83 ec 08             	sub    esp,0x8
c0010acf:	68 69 dc 01 c0       	push   0xc001dc69
c0010ad4:	56                   	push   esi
c0010ad5:	e8 e2 fe ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010ada:	83 c4 10             	add    esp,0x10
c0010add:	85 c0                	test   eax,eax
c0010adf:	75 9e                	jne    c0010a7f <sysCallOpen(regs*)+0x79>
c0010ae1:	83 ec 08             	sub    esp,0x8
c0010ae4:	68 73 dc 01 c0       	push   0xc001dc73
c0010ae9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010aec:	50                   	push   eax
c0010aed:	e8 ca fe ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	85 c0                	test   eax,eax
c0010af7:	0f 85 ef 00 00 00    	jne    c0010bec <sysCallOpen(regs*)+0x1e6>
c0010afd:	83 ec 08             	sub    esp,0x8
c0010b00:	68 78 dc 01 c0       	push   0xc001dc78
c0010b05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b08:	50                   	push   eax
c0010b09:	e8 ae fe ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010b0e:	83 c4 10             	add    esp,0x10
c0010b11:	85 c0                	test   eax,eax
c0010b13:	0f 85 d3 00 00 00    	jne    c0010bec <sysCallOpen(regs*)+0x1e6>
c0010b19:	83 ec 08             	sub    esp,0x8
c0010b1c:	68 74 dc 01 c0       	push   0xc001dc74
c0010b21:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010b24:	51                   	push   ecx
c0010b25:	e8 d6 fb fe ff       	call   c0000700 <strcmp>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	0f 84 b7 00 00 00    	je     c0010bec <sysCallOpen(regs*)+0x1e6>
c0010b35:	83 ec 08             	sub    esp,0x8
c0010b38:	68 73 dc 01 c0       	push   0xc001dc73
c0010b3d:	56                   	push   esi
c0010b3e:	e8 79 fe ff ff       	call   c00109bc <string_ends_with(char const*, char const*)>
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	85 c0                	test   eax,eax
c0010b48:	0f 85 9e 00 00 00    	jne    c0010bec <sysCallOpen(regs*)+0x1e6>
c0010b4e:	83 ec 0c             	sub    esp,0xc
c0010b51:	68 14 01 00 00       	push   0x114
c0010b56:	e8 06 60 ff ff       	call   c0006b61 <malloc>
c0010b5b:	83 c4 0c             	add    esp,0xc
c0010b5e:	89 c6                	mov    esi,eax
c0010b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b68:	50                   	push   eax
c0010b69:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010b6c:	52                   	push   edx
c0010b6d:	56                   	push   esi
c0010b6e:	e8 f3 92 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	85 f6                	test   esi,esi
c0010b78:	74 5f                	je     c0010bd9 <sysCallOpen(regs*)+0x1d3>
c0010b7a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b7d:	89 d0                	mov    eax,edx
c0010b7f:	25 ff 00 00 00       	and    eax,0xff
c0010b84:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010b87:	89 d0                	mov    eax,edx
c0010b89:	83 e0 01             	and    eax,0x1
c0010b8c:	f6 c2 02             	test   dl,0x2
c0010b8f:	74 03                	je     c0010b94 <sysCallOpen(regs*)+0x18e>
c0010b91:	83 c8 02             	or     eax,0x2
c0010b94:	f6 c2 04             	test   dl,0x4
c0010b97:	74 03                	je     c0010b9c <sysCallOpen(regs*)+0x196>
c0010b99:	83 c8 04             	or     eax,0x4
c0010b9c:	f6 c2 08             	test   dl,0x8
c0010b9f:	74 03                	je     c0010ba4 <sysCallOpen(regs*)+0x19e>
c0010ba1:	83 c8 0a             	or     eax,0xa
c0010ba4:	83 e2 10             	and    edx,0x10
c0010ba7:	74 03                	je     c0010bac <sysCallOpen(regs*)+0x1a6>
c0010ba9:	83 c8 12             	or     eax,0x12
c0010bac:	83 ec 08             	sub    esp,0x8
c0010baf:	50                   	push   eax
c0010bb0:	56                   	push   esi
c0010bb1:	e8 70 93 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	85 c0                	test   eax,eax
c0010bbb:	75 1c                	jne    c0010bd9 <sysCallOpen(regs*)+0x1d3>
c0010bbd:	83 ec 0c             	sub    esp,0xc
c0010bc0:	56                   	push   esi
c0010bc1:	e8 8c 76 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010bc6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	89 02                	mov    DWORD PTR [edx],eax
c0010bce:	c1 f8 1f             	sar    eax,0x1f
c0010bd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010bd4:	e9 b6 fe ff ff       	jmp    c0010a8f <sysCallOpen(regs*)+0x89>
c0010bd9:	81 c4 04 01 00 00    	add    esp,0x104
c0010bdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010be4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010be9:	5b                   	pop    ebx
c0010bea:	5e                   	pop    esi
c0010beb:	c3                   	ret    
c0010bec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bef:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010bf5:	e9 8e fe ff ff       	jmp    c0010a88 <sysCallOpen(regs*)+0x82>

c0010bfa <Sys::loadSyscalls()>:
c0010bfa:	c7 05 a0 1d 02 c0 d6 ff 00 c0 	mov    DWORD PTR ds:0xc0021da0,0xc000ffd6
c0010c04:	c7 05 a4 1d 02 c0 cd fb 00 c0 	mov    DWORD PTR ds:0xc0021da4,0xc000fbcd
c0010c0e:	c7 05 a8 1d 02 c0 bc fd 00 c0 	mov    DWORD PTR ds:0xc0021da8,0xc000fdbc
c0010c18:	c7 05 ac 1d 02 c0 0c ff 00 c0 	mov    DWORD PTR ds:0xc0021dac,0xc000ff0c
c0010c22:	c7 05 b0 1d 02 c0 54 fd 00 c0 	mov    DWORD PTR ds:0xc0021db0,0xc000fd54
c0010c2c:	c7 05 b4 1d 02 c0 04 fc 00 c0 	mov    DWORD PTR ds:0xc0021db4,0xc000fc04
c0010c36:	c7 05 b8 1d 02 c0 e5 fb 00 c0 	mov    DWORD PTR ds:0xc0021db8,0xc000fbe5
c0010c40:	c7 05 bc 1d 02 c0 11 fe 00 c0 	mov    DWORD PTR ds:0xc0021dbc,0xc000fe11
c0010c4a:	c7 05 c4 1d 02 c0 a0 04 01 c0 	mov    DWORD PTR ds:0xc0021dc4,0xc00104a0
c0010c54:	c7 05 c0 1d 02 c0 06 0a 01 c0 	mov    DWORD PTR ds:0xc0021dc0,0xc0010a06
c0010c5e:	c7 05 c8 1d 02 c0 00 05 01 c0 	mov    DWORD PTR ds:0xc0021dc8,0xc0010500
c0010c68:	c7 05 cc 1d 02 c0 d4 01 01 c0 	mov    DWORD PTR ds:0xc0021dcc,0xc00101d4
c0010c72:	c7 05 d0 1d 02 c0 fb ff 00 c0 	mov    DWORD PTR ds:0xc0021dd0,0xc000fffb
c0010c7c:	c7 05 d4 1d 02 c0 00 00 01 c0 	mov    DWORD PTR ds:0xc0021dd4,0xc0010000
c0010c86:	c7 05 d8 1d 02 c0 cb 05 01 c0 	mov    DWORD PTR ds:0xc0021dd8,0xc00105cb
c0010c90:	c7 05 dc 1d 02 c0 77 05 01 c0 	mov    DWORD PTR ds:0xc0021ddc,0xc0010577
c0010c9a:	c7 05 e0 1d 02 c0 b0 02 01 c0 	mov    DWORD PTR ds:0xc0021de0,0xc00102b0
c0010ca4:	c7 05 e4 1d 02 c0 09 03 01 c0 	mov    DWORD PTR ds:0xc0021de4,0xc0010309
c0010cae:	c7 05 e8 1d 02 c0 78 03 01 c0 	mov    DWORD PTR ds:0xc0021de8,0xc0010378
c0010cb8:	c7 05 ec 1d 02 c0 05 00 01 c0 	mov    DWORD PTR ds:0xc0021dec,0xc0010005
c0010cc2:	c7 05 f0 1d 02 c0 3d 06 01 c0 	mov    DWORD PTR ds:0xc0021df0,0xc001063d
c0010ccc:	c7 05 f4 1d 02 c0 5a 06 01 c0 	mov    DWORD PTR ds:0xc0021df4,0xc001065a
c0010cd6:	c7 05 f8 1d 02 c0 5a 06 01 c0 	mov    DWORD PTR ds:0xc0021df8,0xc001065a
c0010ce0:	c7 05 fc 1d 02 c0 90 06 01 c0 	mov    DWORD PTR ds:0xc0021dfc,0xc0010690
c0010cea:	c7 05 00 1e 02 c0 f7 06 01 c0 	mov    DWORD PTR ds:0xc0021e00,0xc00106f7
c0010cf4:	c7 05 04 1e 02 c0 0f 00 01 c0 	mov    DWORD PTR ds:0xc0021e04,0xc001000f
c0010cfe:	c7 05 08 1e 02 c0 5e 07 01 c0 	mov    DWORD PTR ds:0xc0021e08,0xc001075e
c0010d08:	c7 05 0c 1e 02 c0 91 01 01 c0 	mov    DWORD PTR ds:0xc0021e0c,0xc0010191
c0010d12:	c7 05 10 1e 02 c0 1f 00 01 c0 	mov    DWORD PTR ds:0xc0021e10,0xc001001f
c0010d1c:	c7 05 14 1e 02 c0 54 02 01 c0 	mov    DWORD PTR ds:0xc0021e14,0xc0010254
c0010d26:	c7 05 18 1e 02 c0 ab 07 01 c0 	mov    DWORD PTR ds:0xc0021e18,0xc00107ab
c0010d30:	c7 05 1c 1e 02 c0 ed 03 01 c0 	mov    DWORD PTR ds:0xc0021e1c,0xc00103ed
c0010d3a:	c7 05 20 1e 02 c0 d4 07 01 c0 	mov    DWORD PTR ds:0xc0021e20,0xc00107d4
c0010d44:	c7 05 24 1e 02 c0 3d 08 01 c0 	mov    DWORD PTR ds:0xc0021e24,0xc001083d
c0010d4e:	c7 05 2c 1e 02 c0 27 00 01 c0 	mov    DWORD PTR ds:0xc0021e2c,0xc0010027
c0010d58:	c7 05 30 1e 02 c0 94 00 01 c0 	mov    DWORD PTR ds:0xc0021e30,0xc0010094
c0010d62:	c7 05 34 1e 02 c0 de 00 01 c0 	mov    DWORD PTR ds:0xc0021e34,0xc00100de
c0010d6c:	c7 05 38 1e 02 c0 ec 08 01 c0 	mov    DWORD PTR ds:0xc0021e38,0xc00108ec
c0010d76:	c7 05 3c 1e 02 c0 75 06 01 c0 	mov    DWORD PTR ds:0xc0021e3c,0xc0010675
c0010d80:	c7 05 40 1e 02 c0 33 01 01 c0 	mov    DWORD PTR ds:0xc0021e40,0xc0010133
c0010d8a:	c7 05 44 1e 02 c0 63 09 01 c0 	mov    DWORD PTR ds:0xc0021e44,0xc0010963
c0010d94:	c7 05 48 1e 02 c0 a8 09 01 c0 	mov    DWORD PTR ds:0xc0021e48,0xc00109a8
c0010d9e:	c7 05 4c 1e 02 c0 ac fc 00 c0 	mov    DWORD PTR ds:0xc0021e4c,0xc000fcac
c0010da8:	c7 05 50 1e 02 c0 2d fe 00 c0 	mov    DWORD PTR ds:0xc0021e50,0xc000fe2d
c0010db2:	c7 05 54 1e 02 c0 c2 fe 00 c0 	mov    DWORD PTR ds:0xc0021e54,0xc000fec2
c0010dbc:	c7 05 58 1e 02 c0 97 fb 00 c0 	mov    DWORD PTR ds:0xc0021e58,0xc000fb97
c0010dc6:	c7 05 5c 1e 02 c0 74 ff 00 c0 	mov    DWORD PTR ds:0xc0021e5c,0xc000ff74
c0010dd0:	c7 05 60 1e 02 c0 10 fc 00 c0 	mov    DWORD PTR ds:0xc0021e60,0xc000fc10
c0010dda:	c7 05 64 1e 02 c0 2a fc 00 c0 	mov    DWORD PTR ds:0xc0021e64,0xc000fc2a
c0010de4:	c3                   	ret    

c0010de5 <Sys::systemCall(regs*, void*)>:
c0010de5:	53                   	push   ebx
c0010de6:	83 ec 08             	sub    esp,0x8
c0010de9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ded:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010df0:	83 f8 7f             	cmp    eax,0x7f
c0010df3:	77 16                	ja     c0010e0b <Sys::systemCall(regs*, void*)+0x26>
c0010df5:	8b 14 85 a0 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde260]
c0010dfc:	85 d2                	test   edx,edx
c0010dfe:	74 0b                	je     c0010e0b <Sys::systemCall(regs*, void*)+0x26>
c0010e00:	83 ec 0c             	sub    esp,0xc
c0010e03:	53                   	push   ebx
c0010e04:	ff d2                	call   edx
c0010e06:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010e09:	eb 0d                	jmp    c0010e18 <Sys::systemCall(regs*, void*)+0x33>
c0010e0b:	52                   	push   edx
c0010e0c:	52                   	push   edx
c0010e0d:	50                   	push   eax
c0010e0e:	68 7d dc 01 c0       	push   0xc001dc7d
c0010e13:	e8 d8 8a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0010e18:	83 c4 10             	add    esp,0x10
c0010e1b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e20:	31 d2                	xor    edx,edx
c0010e22:	83 c4 08             	add    esp,0x8
c0010e25:	5b                   	pop    ebx
c0010e26:	c3                   	ret    

c0010e27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010e27:	55                   	push   ebp
c0010e28:	57                   	push   edi
c0010e29:	56                   	push   esi
c0010e2a:	53                   	push   ebx
c0010e2b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010e31:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010e39:	0f 95 c2             	setne  dl
c0010e3c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010e44:	0f 94 c0             	sete   al
c0010e47:	84 c2                	test   dl,al
c0010e49:	74 34                	je     c0010e7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010e4b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0010e56:	74 27                	je     c0010e7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010e58:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0010e5f:	05 00 10 00 00       	add    eax,0x1000
c0010e64:	89 c1                	mov    ecx,eax
c0010e66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010e6b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0010e71:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0010e78:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0010e7f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0010e86:	83 ec 0c             	sub    esp,0xc
c0010e89:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010e8f:	6a 01                	push   0x1
c0010e91:	e8 07 78 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	89 c3                	mov    ebx,eax
c0010e9b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010ea1:	0f 86 25 01 00 00    	jbe    c0010fcc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0010ea7:	c1 ee 0c             	shr    esi,0xc
c0010eaa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010eb1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010eb5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ebd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0010ec4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ec8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0010ecf:	29 ef                	sub    edi,ebp
c0010ed1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0010ed5:	0f 83 f8 00 00 00    	jae    c0010fd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0010edb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0010ee1:	76 05                	jbe    c0010ee8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0010ee3:	bf 00 10 00 00       	mov    edi,0x1000
c0010ee8:	83 ec 0c             	sub    esp,0xc
c0010eeb:	31 d2                	xor    edx,edx
c0010eed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0010ef4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010ef6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010efa:	50                   	push   eax
c0010efb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010eff:	56                   	push   esi
c0010f00:	52                   	push   edx
c0010f01:	57                   	push   edi
c0010f02:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0010f09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0010f0c:	83 c4 20             	add    esp,0x20
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	75 06                	jne    c0010f19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0010f13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0010f17:	74 13                	je     c0010f2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0010f19:	83 ec 0c             	sub    esp,0xc
c0010f1c:	53                   	push   ebx
c0010f1d:	e8 ab 7a ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	31 c0                	xor    eax,eax
c0010f27:	e9 7c 01 00 00       	jmp    c00110a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0010f2c:	fa                   	cli    
c0010f2d:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0010f33:	e8 f6 5f ff ff       	call   c0006f2e <Phys::allocatePage()>
c0010f38:	6a 07                	push   0x7
c0010f3a:	89 c7                	mov    edi,eax
c0010f3c:	53                   	push   ebx
c0010f3d:	50                   	push   eax
c0010f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f4c:	e8 e1 7d ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010f51:	83 c4 0c             	add    esp,0xc
c0010f54:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0010f5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f61:	6a 00                	push   0x0
c0010f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f71:	e8 2e 7c ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0010f76:	58                   	pop    eax
c0010f77:	5a                   	pop    edx
c0010f78:	68 07 0c 00 00       	push   0xc07
c0010f7d:	55                   	push   ebp
c0010f7e:	57                   	push   edi
c0010f7f:	89 df                	mov    edi,ebx
c0010f81:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0010f88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f8e:	6a 00                	push   0x0
c0010f90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f98:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0010f9e:	e8 4f 81 ff ff       	call   c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0010fa3:	b9 00 10 00 00       	mov    ecx,0x1000
c0010fa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010faa:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0010faf:	83 c4 20             	add    esp,0x20
c0010fb2:	48                   	dec    eax
c0010fb3:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0010fb8:	85 c0                	test   eax,eax
c0010fba:	75 01                	jne    c0010fbd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0010fbc:	fb                   	sti    
c0010fbd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0010fc3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010fc7:	e9 f1 fe ff ff       	jmp    c0010ebd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0010fcc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010fd3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0010fda:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010fe0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010fe6:	0f 86 ae 00 00 00    	jbe    c001109a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0010fec:	fa                   	cli    
c0010fed:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0010ff3:	c1 ee 0c             	shr    esi,0xc
c0010ff6:	51                   	push   ecx
c0010ff7:	31 ff                	xor    edi,edi
c0010ff9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011000:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011006:	6a 00                	push   0x0
c0011008:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001100d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011010:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011016:	e8 89 7b ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c001101b:	83 c4 10             	add    esp,0x10
c001101e:	e8 0b 5f ff ff       	call   c0006f2e <Phys::allocatePage()>
c0011023:	47                   	inc    edi
c0011024:	6a 07                	push   0x7
c0011026:	53                   	push   ebx
c0011027:	50                   	push   eax
c0011028:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001102c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011032:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011035:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001103b:	e8 f2 7c ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011040:	58                   	pop    eax
c0011041:	5a                   	pop    edx
c0011042:	68 07 0c 00 00       	push   0xc07
c0011047:	55                   	push   ebp
c0011048:	81 c5 00 10 00 00    	add    ebp,0x1000
c001104e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011052:	50                   	push   eax
c0011053:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001105a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011060:	6a 00                	push   0x0
c0011062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011067:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011070:	e8 7d 80 ff ff       	call   c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011075:	83 c4 1c             	add    esp,0x1c
c0011078:	68 00 10 00 00       	push   0x1000
c001107d:	6a 00                	push   0x0
c001107f:	53                   	push   ebx
c0011080:	e8 6b f4 fe ff       	call   c00004f0 <memset>
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	39 fe                	cmp    esi,edi
c001108a:	77 92                	ja     c001101e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001108c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0011091:	48                   	dec    eax
c0011092:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0011097:	75 01                	jne    c001109a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011099:	fb                   	sti    
c001109a:	83 ec 0c             	sub    esp,0xc
c001109d:	53                   	push   ebx
c001109e:	e8 2a 79 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	b0 01                	mov    al,0x1
c00110a8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00110ae:	5b                   	pop    ebx
c00110af:	5e                   	pop    esi
c00110b0:	5f                   	pop    edi
c00110b1:	5d                   	pop    ebp
c00110b2:	c3                   	ret    

c00110b3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00110b3:	55                   	push   ebp
c00110b4:	57                   	push   edi
c00110b5:	56                   	push   esi
c00110b6:	53                   	push   ebx
c00110b7:	83 ec 48             	sub    esp,0x48
c00110ba:	68 14 01 00 00       	push   0x114
c00110bf:	e8 9d 5a ff ff       	call   c0006b61 <malloc>
c00110c4:	83 c4 0c             	add    esp,0xc
c00110c7:	89 c6                	mov    esi,eax
c00110c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00110cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00110d1:	50                   	push   eax
c00110d2:	e8 8f 8d ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00110d7:	58                   	pop    eax
c00110d8:	5a                   	pop    edx
c00110d9:	6a 01                	push   0x1
c00110db:	56                   	push   esi
c00110dc:	e8 45 8e ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c00110e1:	83 c4 10             	add    esp,0x10
c00110e4:	85 c0                	test   eax,eax
c00110e6:	0f 85 47 01 00 00    	jne    c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00110ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	6a 34                	push   0x34
c00110f9:	e8 63 5a ff ff       	call   c0006b61 <malloc>
c00110fe:	89 c3                	mov    ebx,eax
c0011100:	58                   	pop    eax
c0011101:	8b 06                	mov    eax,DWORD PTR [esi]
c0011103:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011107:	57                   	push   edi
c0011108:	53                   	push   ebx
c0011109:	6a 00                	push   0x0
c001110b:	6a 34                	push   0x34
c001110d:	56                   	push   esi
c001110e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011111:	83 c4 20             	add    esp,0x20
c0011114:	85 c0                	test   eax,eax
c0011116:	0f 85 17 01 00 00    	jne    c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001111c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011122:	0f 85 0b 01 00 00    	jne    c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011128:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001112b:	85 c0                	test   eax,eax
c001112d:	0f 84 00 01 00 00    	je     c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011133:	31 d2                	xor    edx,edx
c0011135:	55                   	push   ebp
c0011136:	52                   	push   edx
c0011137:	50                   	push   eax
c0011138:	56                   	push   esi
c0011139:	e8 a6 8e ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	85 c0                	test   eax,eax
c0011143:	0f 85 ea 00 00 00    	jne    c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011149:	83 ec 0c             	sub    esp,0xc
c001114c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001114f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011157:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001115b:	0f af c2             	imul   eax,edx
c001115e:	50                   	push   eax
c001115f:	e8 fd 59 ff ff       	call   c0006b61 <malloc>
c0011164:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001116a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001116d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011171:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011175:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011179:	0f af c2             	imul   eax,edx
c001117c:	99                   	cdq    
c001117d:	52                   	push   edx
c001117e:	50                   	push   eax
c001117f:	56                   	push   esi
c0011180:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011183:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011186:	83 c4 20             	add    esp,0x20
c0011189:	85 c0                	test   eax,eax
c001118b:	0f 84 a2 00 00 00    	je     c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011191:	31 d2                	xor    edx,edx
c0011193:	51                   	push   ecx
c0011194:	52                   	push   edx
c0011195:	50                   	push   eax
c0011196:	56                   	push   esi
c0011197:	e8 48 8e ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	85 c0                	test   eax,eax
c00111a1:	0f 85 8c 00 00 00    	jne    c0011233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00111a7:	83 ec 0c             	sub    esp,0xc
c00111aa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00111ae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00111b2:	31 ed                	xor    ebp,ebp
c00111b4:	0f af c2             	imul   eax,edx
c00111b7:	50                   	push   eax
c00111b8:	e8 a4 59 ff ff       	call   c0006b61 <malloc>
c00111bd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00111bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00111ce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00111d2:	0f af c2             	imul   eax,edx
c00111d5:	99                   	cdq    
c00111d6:	52                   	push   edx
c00111d7:	50                   	push   eax
c00111d8:	56                   	push   esi
c00111d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00111dc:	83 c4 20             	add    esp,0x20
c00111df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111e7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00111eb:	0f 86 80 00 00 00    	jbe    c0011271 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00111f1:	0f b7 fd             	movzx  edi,bp
c00111f4:	c1 e7 05             	shl    edi,0x5
c00111f7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00111fb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00111fe:	75 6b                	jne    c001126b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011200:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011207:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001120a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001120e:	52                   	push   edx
c001120f:	31 d2                	xor    edx,edx
c0011211:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011214:	52                   	push   edx
c0011215:	50                   	push   eax
c0011216:	56                   	push   esi
c0011217:	e8 c8 8d ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	85 c0                	test   eax,eax
c0011221:	74 17                	je     c001123a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011223:	83 ec 0c             	sub    esp,0xc
c0011226:	68 91 dc 01 c0       	push   0xc001dc91
c001122b:	e8 c0 86 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	31 c0                	xor    eax,eax
c0011235:	e9 87 00 00 00       	jmp    c00112c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011240:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011243:	50                   	push   eax
c0011244:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011248:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001124c:	56                   	push   esi
c001124d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011251:	e8 d1 fb ff ff       	call   c0010e27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011256:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001125a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001125e:	83 c4 20             	add    esp,0x20
c0011261:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011265:	73 04                	jae    c001126b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001126b:	45                   	inc    ebp
c001126c:	e9 76 ff ff ff       	jmp    c00111e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011271:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001127d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011283:	83 ec 0c             	sub    esp,0xc
c0011286:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001128c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011291:	05 00 10 00 00       	add    eax,0x1000
c0011296:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129d:	e8 cf 58 ff ff       	call   c0006b71 <free>
c00112a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112a5:	e8 c7 58 ff ff       	call   c0006b71 <free>
c00112aa:	58                   	pop    eax
c00112ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112af:	e8 bd 58 ff ff       	call   c0006b71 <free>
c00112b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00112b7:	e8 c8 8c ff ff       	call   c0009f84 <File::close()>
c00112bc:	83 c4 10             	add    esp,0x10
c00112bf:	b0 01                	mov    al,0x1
c00112c1:	83 c4 3c             	add    esp,0x3c
c00112c4:	5b                   	pop    ebx
c00112c5:	5e                   	pop    esi
c00112c6:	5f                   	pop    edi
c00112c7:	5d                   	pop    ebp
c00112c8:	c3                   	ret    

c00112c9 <Thr::runtimeReferenceHelper()>:
c00112c9:	83 ec 18             	sub    esp,0x18
c00112cc:	68 99 dc 01 c0       	push   0xc001dc99
c00112d1:	e8 1a 86 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00112d6:	fa                   	cli    
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	eb fe                	jmp    c00112da <Thr::runtimeReferenceHelper()+0x11>

c00112dc <Thr::getAddressOfKernelSymbol(char const*)>:
c00112dc:	57                   	push   edi
c00112dd:	56                   	push   esi
c00112de:	53                   	push   ebx
c00112df:	31 db                	xor    ebx,ebx
c00112e1:	39 1d 40 27 02 c0    	cmp    DWORD PTR ds:0xc0022740,ebx
c00112e7:	7e 3c                	jle    c0011325 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00112e9:	8b 34 9d c0 26 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd940]
c00112f0:	31 ff                	xor    edi,edi
c00112f2:	39 3c 9d c0 25 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdda40],edi
c00112f9:	7e 27                	jle    c0011322 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00112fb:	50                   	push   eax
c00112fc:	50                   	push   eax
c00112fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011301:	8b 06                	mov    eax,DWORD PTR [esi]
c0011303:	03 04 9d 40 26 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd9c0]
c001130a:	50                   	push   eax
c001130b:	e8 f0 f3 fe ff       	call   c0000700 <strcmp>
c0011310:	83 c4 10             	add    esp,0x10
c0011313:	85 c0                	test   eax,eax
c0011315:	75 05                	jne    c001131c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011317:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001131a:	eb 0b                	jmp    c0011327 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001131c:	83 c6 10             	add    esi,0x10
c001131f:	47                   	inc    edi
c0011320:	eb d0                	jmp    c00112f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011322:	43                   	inc    ebx
c0011323:	eb bc                	jmp    c00112e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011325:	31 c0                	xor    eax,eax
c0011327:	5b                   	pop    ebx
c0011328:	5e                   	pop    esi
c0011329:	5f                   	pop    edi
c001132a:	c3                   	ret    

c001132b <Thr::loadKernelSymbolTable(char const*)>:
c001132b:	55                   	push   ebp
c001132c:	57                   	push   edi
c001132d:	56                   	push   esi
c001132e:	53                   	push   ebx
c001132f:	83 ec 68             	sub    esp,0x68
c0011332:	8b 35 90 27 02 c0    	mov    esi,DWORD PTR ds:0xc0022790
c0011338:	68 14 01 00 00       	push   0x114
c001133d:	e8 1f 58 ff ff       	call   c0006b61 <malloc>
c0011342:	83 c4 0c             	add    esp,0xc
c0011345:	89 c3                	mov    ebx,eax
c0011347:	56                   	push   esi
c0011348:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001134c:	50                   	push   eax
c001134d:	e8 14 8b ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0011352:	5e                   	pop    esi
c0011353:	5f                   	pop    edi
c0011354:	6a 01                	push   0x1
c0011356:	53                   	push   ebx
c0011357:	e8 ca 8b ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	85 c0                	test   eax,eax
c0011361:	74 0a                	je     c001136d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	68 bb dc 01 c0       	push   0xc001dcbb
c001136b:	eb 34                	jmp    c00113a1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001136d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011375:	83 ec 0c             	sub    esp,0xc
c0011378:	6a 34                	push   0x34
c001137a:	e8 e2 57 ff ff       	call   c0006b61 <malloc>
c001137f:	59                   	pop    ecx
c0011380:	89 c7                	mov    edi,eax
c0011382:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011388:	56                   	push   esi
c0011389:	57                   	push   edi
c001138a:	6a 00                	push   0x0
c001138c:	6a 34                	push   0x34
c001138e:	53                   	push   ebx
c001138f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011392:	83 c4 20             	add    esp,0x20
c0011395:	85 c0                	test   eax,eax
c0011397:	74 17                	je     c00113b0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011399:	83 ec 0c             	sub    esp,0xc
c001139c:	68 d2 dc 01 c0       	push   0xc001dcd2
c00113a1:	e8 99 e0 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	31 c0                	xor    eax,eax
c00113ab:	e9 31 02 00 00       	jmp    c00115e1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00113b0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00113b6:	75 e1                	jne    c0011399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00113b8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00113bb:	85 c0                	test   eax,eax
c00113bd:	74 da                	je     c0011399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00113bf:	52                   	push   edx
c00113c0:	31 d2                	xor    edx,edx
c00113c2:	52                   	push   edx
c00113c3:	50                   	push   eax
c00113c4:	53                   	push   ebx
c00113c5:	e8 1a 8c ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	85 c0                	test   eax,eax
c00113cf:	75 c8                	jne    c0011399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00113d1:	83 ec 0c             	sub    esp,0xc
c00113d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00113d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00113dc:	31 ed                	xor    ebp,ebp
c00113de:	0f af c2             	imul   eax,edx
c00113e1:	50                   	push   eax
c00113e2:	e8 7a 57 ff ff       	call   c0006b61 <malloc>
c00113e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00113e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113f4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00113f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00113fc:	0f af c2             	imul   eax,edx
c00113ff:	99                   	cdq    
c0011400:	52                   	push   edx
c0011401:	50                   	push   eax
c0011402:	53                   	push   ebx
c0011403:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011406:	83 c4 20             	add    esp,0x20
c0011409:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011411:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011419:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011421:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011429:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001142d:	0f 86 aa 00 00 00    	jbe    c00114dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011433:	0f b7 f5             	movzx  esi,bp
c0011436:	6b f6 28             	imul   esi,esi,0x28
c0011439:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001143d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011444:	50                   	push   eax
c0011445:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011449:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001144d:	8b 16                	mov    edx,DWORD PTR [esi]
c001144f:	6b c0 28             	imul   eax,eax,0x28
c0011452:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011456:	89 d0                	mov    eax,edx
c0011458:	31 d2                	xor    edx,edx
c001145a:	52                   	push   edx
c001145b:	50                   	push   eax
c001145c:	53                   	push   ebx
c001145d:	e8 82 8b ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011462:	83 c4 0c             	add    esp,0xc
c0011465:	6a 20                	push   0x20
c0011467:	6a 00                	push   0x0
c0011469:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001146d:	52                   	push   edx
c001146e:	e8 7d f0 fe ff       	call   c00004f0 <memset>
c0011473:	58                   	pop    eax
c0011474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011476:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001147a:	51                   	push   ecx
c001147b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001147f:	52                   	push   edx
c0011480:	6a 00                	push   0x0
c0011482:	6a 1f                	push   0x1f
c0011484:	53                   	push   ebx
c0011485:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011488:	83 c4 18             	add    esp,0x18
c001148b:	68 e9 dc 01 c0       	push   0xc001dce9
c0011490:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011494:	52                   	push   edx
c0011495:	e8 66 f2 fe ff       	call   c0000700 <strcmp>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	85 c0                	test   eax,eax
c001149f:	75 0f                	jne    c00114b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00114a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00114a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114b0:	50                   	push   eax
c00114b1:	50                   	push   eax
c00114b2:	68 f1 dc 01 c0       	push   0xc001dcf1
c00114b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00114bb:	50                   	push   eax
c00114bc:	e8 3f f2 fe ff       	call   c0000700 <strcmp>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	85 c0                	test   eax,eax
c00114c6:	75 0f                	jne    c00114d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00114c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00114cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00114cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00114d7:	45                   	inc    ebp
c00114d8:	e9 4c ff ff ff       	jmp    c0011429 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00114dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00114e2:	75 10                	jne    c00114f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	68 f9 dc 01 c0       	push   0xc001dcf9
c00114ec:	e8 4e df ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00114f9:	75 10                	jne    c001150b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00114fb:	83 ec 0c             	sub    esp,0xc
c00114fe:	68 f9 dc 01 c0       	push   0xc001dcf9
c0011503:	e8 37 df ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	31 d2                	xor    edx,edx
c001150d:	50                   	push   eax
c001150e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011512:	52                   	push   edx
c0011513:	50                   	push   eax
c0011514:	53                   	push   ebx
c0011515:	e8 ca 8a ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001151a:	5a                   	pop    edx
c001151b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001151f:	e8 3d 56 ff ff       	call   c0006b61 <malloc>
c0011524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011528:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001152c:	31 c9                	xor    ecx,ecx
c001152e:	5e                   	pop    esi
c001152f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011531:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0011535:	55                   	push   ebp
c0011536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153a:	51                   	push   ecx
c001153b:	52                   	push   edx
c001153c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0011540:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011544:	53                   	push   ebx
c0011545:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011548:	83 c4 14             	add    esp,0x14
c001154b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001154f:	e8 0d 56 ff ff       	call   c0006b61 <malloc>
c0011554:	89 c6                	mov    esi,eax
c0011556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011558:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001155b:	56                   	push   esi
c001155c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011564:	51                   	push   ecx
c0011565:	52                   	push   edx
c0011566:	53                   	push   ebx
c0011567:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001156a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001156e:	8b 15 40 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022740
c0011574:	83 c4 1c             	add    esp,0x1c
c0011577:	c1 e8 04             	shr    eax,0x4
c001157a:	89 04 95 c0 25 02 c0 	mov    DWORD PTR [edx*4-0x3ffdda40],eax
c0011581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011585:	31 d2                	xor    edx,edx
c0011587:	52                   	push   edx
c0011588:	50                   	push   eax
c0011589:	53                   	push   ebx
c001158a:	e8 55 8a ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001158f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011591:	31 d2                	xor    edx,edx
c0011593:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011596:	56                   	push   esi
c0011597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001159b:	52                   	push   edx
c001159c:	50                   	push   eax
c001159d:	53                   	push   ebx
c001159e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00115a1:	83 c4 14             	add    esp,0x14
c00115a4:	53                   	push   ebx
c00115a5:	e8 da 89 ff ff       	call   c0009f84 <File::close()>
c00115aa:	5d                   	pop    ebp
c00115ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00115af:	e8 bd 55 ff ff       	call   c0006b71 <free>
c00115b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115b7:	e8 b5 55 ff ff       	call   c0006b71 <free>
c00115bc:	a1 40 27 02 c0       	mov    eax,ds:0xc0022740
c00115c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00115c5:	8d 50 01             	lea    edx,[eax+0x1]
c00115c8:	89 0c 85 c0 26 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd940],ecx
c00115cf:	89 34 85 40 26 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd9c0],esi
c00115d6:	89 15 40 27 02 c0    	mov    DWORD PTR ds:0xc0022740,edx
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	b0 01                	mov    al,0x1
c00115e1:	83 c4 5c             	add    esp,0x5c
c00115e4:	5b                   	pop    ebx
c00115e5:	5e                   	pop    esi
c00115e6:	5f                   	pop    edi
c00115e7:	5d                   	pop    ebp
c00115e8:	c3                   	ret    

c00115e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00115e9:	55                   	push   ebp
c00115ea:	57                   	push   edi
c00115eb:	56                   	push   esi
c00115ec:	53                   	push   ebx
c00115ed:	81 ec 68 03 00 00    	sub    esp,0x368
c00115f3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00115fa:	8b 1d 90 27 02 c0    	mov    ebx,DWORD PTR ds:0xc0022790
c0011600:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0011604:	68 14 01 00 00       	push   0x114
c0011609:	e8 53 55 ff ff       	call   c0006b61 <malloc>
c001160e:	83 c4 0c             	add    esp,0xc
c0011611:	89 c5                	mov    ebp,eax
c0011613:	53                   	push   ebx
c0011614:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001161b:	50                   	push   eax
c001161c:	e8 45 88 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0011621:	5e                   	pop    esi
c0011622:	5f                   	pop    edi
c0011623:	6a 01                	push   0x1
c0011625:	55                   	push   ebp
c0011626:	e8 fb 88 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c001162b:	83 c4 10             	add    esp,0x10
c001162e:	85 c0                	test   eax,eax
c0011630:	0f 85 a7 06 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011636:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	6a 34                	push   0x34
c0011643:	e8 19 55 ff ff       	call   c0006b61 <malloc>
c0011648:	5b                   	pop    ebx
c0011649:	89 c7                	mov    edi,eax
c001164b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001164f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011652:	53                   	push   ebx
c0011653:	57                   	push   edi
c0011654:	6a 00                	push   0x0
c0011656:	6a 34                	push   0x34
c0011658:	55                   	push   ebp
c0011659:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001165c:	83 c4 20             	add    esp,0x20
c001165f:	85 c0                	test   eax,eax
c0011661:	0f 85 76 06 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011667:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001166d:	0f 85 6a 06 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011673:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011676:	85 c0                	test   eax,eax
c0011678:	0f 84 5f 06 00 00    	je     c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001167e:	31 d2                	xor    edx,edx
c0011680:	51                   	push   ecx
c0011681:	52                   	push   edx
c0011682:	50                   	push   eax
c0011683:	55                   	push   ebp
c0011684:	e8 5b 89 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	85 c0                	test   eax,eax
c001168e:	0f 85 49 06 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011694:	83 ec 0c             	sub    esp,0xc
c0011697:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001169a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001169e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00116a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00116a6:	0f af c2             	imul   eax,edx
c00116a9:	50                   	push   eax
c00116aa:	e8 b2 54 ff ff       	call   c0006b61 <malloc>
c00116af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00116b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00116c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00116c5:	0f af c2             	imul   eax,edx
c00116c8:	99                   	cdq    
c00116c9:	52                   	push   edx
c00116ca:	50                   	push   eax
c00116cb:	55                   	push   ebp
c00116cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116cf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00116d2:	83 c4 20             	add    esp,0x20
c00116d5:	85 c0                	test   eax,eax
c00116d7:	0f 84 00 06 00 00    	je     c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00116dd:	52                   	push   edx
c00116de:	31 d2                	xor    edx,edx
c00116e0:	52                   	push   edx
c00116e1:	50                   	push   eax
c00116e2:	55                   	push   ebp
c00116e3:	e8 fc 88 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00116e8:	83 c4 10             	add    esp,0x10
c00116eb:	85 c0                	test   eax,eax
c00116ed:	0f 85 ea 05 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00116f3:	83 ec 0c             	sub    esp,0xc
c00116f6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00116fa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00116fe:	31 f6                	xor    esi,esi
c0011700:	0f af c2             	imul   eax,edx
c0011703:	50                   	push   eax
c0011704:	e8 58 54 ff ff       	call   c0006b61 <malloc>
c0011709:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001170c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011710:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011713:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011717:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001171b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001171f:	0f af c2             	imul   eax,edx
c0011722:	99                   	cdq    
c0011723:	52                   	push   edx
c0011724:	50                   	push   eax
c0011725:	55                   	push   ebp
c0011726:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011729:	83 c4 20             	add    esp,0x20
c001172c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0011730:	0f 86 8a 00 00 00    	jbe    c00117c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0011736:	0f b7 de             	movzx  ebx,si
c0011739:	c1 e3 05             	shl    ebx,0x5
c001173c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0011740:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011743:	75 75                	jne    c00117ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011745:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011748:	31 d2                	xor    edx,edx
c001174a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001174e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0011751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011755:	50                   	push   eax
c0011756:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011759:	52                   	push   edx
c001175a:	50                   	push   eax
c001175b:	55                   	push   ebp
c001175c:	e8 83 88 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	85 c0                	test   eax,eax
c0011766:	0f 85 71 05 00 00    	jne    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001176c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011773:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011776:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001177a:	31 d2                	xor    edx,edx
c001177c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011787:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001178e:	50                   	push   eax
c001178f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011797:	52                   	push   edx
c0011798:	50                   	push   eax
c0011799:	55                   	push   ebp
c001179a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001179d:	83 c4 1c             	add    esp,0x1c
c00117a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00117a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00117a6:	50                   	push   eax
c00117a7:	6a 00                	push   0x0
c00117a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00117b1:	50                   	push   eax
c00117b2:	e8 39 ed fe ff       	call   c00004f0 <memset>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	46                   	inc    esi
c00117bb:	e9 6c ff ff ff       	jmp    c001172c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00117c0:	53                   	push   ebx
c00117c1:	31 db                	xor    ebx,ebx
c00117c3:	68 00 01 00 00       	push   0x100
c00117c8:	6a 00                	push   0x0
c00117ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00117ce:	50                   	push   eax
c00117cf:	e8 1c ed fe ff       	call   c00004f0 <memset>
c00117d4:	83 c4 0c             	add    esp,0xc
c00117d7:	68 00 01 00 00       	push   0x100
c00117dc:	6a 00                	push   0x0
c00117de:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00117e5:	50                   	push   eax
c00117e6:	e8 05 ed fe ff       	call   c00004f0 <memset>
c00117eb:	83 c4 10             	add    esp,0x10
c00117ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00117f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00117fe:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011806:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001180e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011816:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001181a:	0f 86 30 01 00 00    	jbe    c0011950 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011820:	0f b7 f3             	movzx  esi,bx
c0011823:	6b f6 28             	imul   esi,esi,0x28
c0011826:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001182a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001182d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011831:	52                   	push   edx
c0011832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011836:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001183a:	8b 06                	mov    eax,DWORD PTR [esi]
c001183c:	6b d2 28             	imul   edx,edx,0x28
c001183f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011843:	31 d2                	xor    edx,edx
c0011845:	52                   	push   edx
c0011846:	50                   	push   eax
c0011847:	55                   	push   ebp
c0011848:	e8 97 87 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001184d:	83 c4 0c             	add    esp,0xc
c0011850:	6a 20                	push   0x20
c0011852:	6a 00                	push   0x0
c0011854:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001185b:	51                   	push   ecx
c001185c:	e8 8f ec fe ff       	call   c00004f0 <memset>
c0011861:	59                   	pop    ecx
c0011862:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011865:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011869:	52                   	push   edx
c001186a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0011871:	51                   	push   ecx
c0011872:	6a 00                	push   0x0
c0011874:	6a 1f                	push   0x1f
c0011876:	55                   	push   ebp
c0011877:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001187a:	83 c4 1c             	add    esp,0x1c
c001187d:	6a 09                	push   0x9
c001187f:	68 13 dd 01 c0       	push   0xc001dd13
c0011884:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001188b:	51                   	push   ecx
c001188c:	e8 1f eb fe ff       	call   c00003b0 <memcmp>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	85 c0                	test   eax,eax
c0011896:	75 21                	jne    c00118b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0011898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00118a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00118a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00118a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00118ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00118b2:	89 d0                	mov    eax,edx
c00118b4:	40                   	inc    eax
c00118b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118b9:	50                   	push   eax
c00118ba:	6a 09                	push   0x9
c00118bc:	68 1d dd 01 c0       	push   0xc001dd1d
c00118c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00118c8:	50                   	push   eax
c00118c9:	e8 e2 ea fe ff       	call   c00003b0 <memcmp>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	85 c0                	test   eax,eax
c00118d3:	75 21                	jne    c00118f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00118d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00118dd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00118e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00118e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00118e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00118ef:	89 d0                	mov    eax,edx
c00118f1:	40                   	inc    eax
c00118f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118f6:	50                   	push   eax
c00118f7:	50                   	push   eax
c00118f8:	68 e9 dc 01 c0       	push   0xc001dce9
c00118fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011904:	50                   	push   eax
c0011905:	e8 f6 ed fe ff       	call   c0000700 <strcmp>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	85 c0                	test   eax,eax
c001190f:	75 0f                	jne    c0011920 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011911:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011914:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001191c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011920:	50                   	push   eax
c0011921:	50                   	push   eax
c0011922:	68 f1 dc 01 c0       	push   0xc001dcf1
c0011927:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001192e:	50                   	push   eax
c001192f:	e8 cc ed fe ff       	call   c0000700 <strcmp>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	85 c0                	test   eax,eax
c0011939:	75 0f                	jne    c001194a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001193b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001193e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011946:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001194a:	43                   	inc    ebx
c001194b:	e9 c6 fe ff ff       	jmp    c0011816 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011950:	31 d2                	xor    edx,edx
c0011952:	50                   	push   eax
c0011953:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011957:	52                   	push   edx
c0011958:	50                   	push   eax
c0011959:	55                   	push   ebp
c001195a:	e8 85 86 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001195f:	58                   	pop    eax
c0011960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011964:	e8 f8 51 ff ff       	call   c0006b61 <malloc>
c0011969:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001196c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011970:	31 d2                	xor    edx,edx
c0011972:	58                   	pop    eax
c0011973:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011977:	53                   	push   ebx
c0011978:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001197c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011980:	52                   	push   edx
c0011981:	50                   	push   eax
c0011982:	55                   	push   ebp
c0011983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011986:	83 c4 14             	add    esp,0x14
c0011989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001198d:	e8 cf 51 ff ff       	call   c0006b61 <malloc>
c0011992:	31 d2                	xor    edx,edx
c0011994:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011998:	83 c4 0c             	add    esp,0xc
c001199b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001199f:	52                   	push   edx
c00119a0:	50                   	push   eax
c00119a1:	55                   	push   ebp
c00119a2:	e8 3d 86 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00119a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119b7:	52                   	push   edx
c00119b8:	50                   	push   eax
c00119b9:	55                   	push   ebp
c00119ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00119bd:	83 c4 20             	add    esp,0x20
c00119c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00119c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00119cc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00119d0:	0f 84 0b 03 00 00    	je     c0011ce1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00119d6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00119dd:	31 d2                	xor    edx,edx
c00119df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119e3:	c1 e8 03             	shr    eax,0x3
c00119e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00119ea:	51                   	push   ecx
c00119eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119ef:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00119f3:	52                   	push   edx
c00119f4:	50                   	push   eax
c00119f5:	55                   	push   ebp
c00119f6:	e8 e9 85 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00119fb:	5b                   	pop    ebx
c00119fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a00:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011a07:	e8 55 51 ff ff       	call   c0006b61 <malloc>
c0011a0c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a13:	31 d2                	xor    edx,edx
c0011a15:	5e                   	pop    esi
c0011a16:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011a1a:	50                   	push   eax
c0011a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a23:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011a2a:	52                   	push   edx
c0011a2b:	50                   	push   eax
c0011a2c:	55                   	push   ebp
c0011a2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a30:	83 c4 20             	add    esp,0x20
c0011a33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011a3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011a3f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011a43:	0f 8d 7c 02 00 00    	jge    c0011cc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011a49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a51:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011a56:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011a59:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a61:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011a65:	89 d8                	mov    eax,ebx
c0011a67:	c1 e8 08             	shr    eax,0x8
c0011a6a:	89 c6                	mov    esi,eax
c0011a6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a70:	c1 e6 04             	shl    esi,0x4
c0011a73:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011a77:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011a7a:	85 d2                	test   edx,edx
c0011a7c:	0f 85 bf 00 00 00    	jne    c0011b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011a89:	03 06                	add    eax,DWORD PTR [esi]
c0011a8b:	50                   	push   eax
c0011a8c:	e8 4b f8 ff ff       	call   c00112dc <Thr::getAddressOfKernelSymbol(char const*)>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	89 c2                	mov    edx,eax
c0011a96:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011a9b:	85 c0                	test   eax,eax
c0011a9d:	0f 85 9e 00 00 00    	jne    c0011b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011aaa:	03 06                	add    eax,DWORD PTR [esi]
c0011aac:	50                   	push   eax
c0011aad:	e8 52 41 ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	89 c2                	mov    edx,eax
c0011ab7:	85 c0                	test   eax,eax
c0011ab9:	0f 85 82 00 00 00    	jne    c0011b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011abf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011ac3:	50                   	push   eax
c0011ac4:	50                   	push   eax
c0011ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ac9:	03 06                	add    eax,DWORD PTR [esi]
c0011acb:	50                   	push   eax
c0011acc:	68 27 dd 01 c0       	push   0xc001dd27
c0011ad1:	e8 1a 7e ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011ad6:	58                   	pop    eax
c0011ad7:	5a                   	pop    edx
c0011ad8:	68 41 dd 01 c0       	push   0xc001dd41
c0011add:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011ae4:	50                   	push   eax
c0011ae5:	e8 36 eb fe ff       	call   c0000620 <strcpy>
c0011aea:	59                   	pop    ecx
c0011aeb:	58                   	pop    eax
c0011aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011af0:	03 06                	add    eax,DWORD PTR [esi]
c0011af2:	50                   	push   eax
c0011af3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011afa:	50                   	push   eax
c0011afb:	e8 e0 ec fe ff       	call   c00007e0 <strcat>
c0011b00:	58                   	pop    eax
c0011b01:	5a                   	pop    edx
c0011b02:	68 d7 dd 01 c0       	push   0xc001ddd7
c0011b07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b0e:	50                   	push   eax
c0011b0f:	e8 cc ec fe ff       	call   c00007e0 <strcat>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011b1c:	0f 84 5d 01 00 00    	je     c0011c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011b2c:	50                   	push   eax
c0011b2d:	e8 0d d9 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011b39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011b3d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011b41:	80 fb 01             	cmp    bl,0x1
c0011b44:	0f 85 88 00 00 00    	jne    c0011bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011b4a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011b51:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b55:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011b59:	01 ce                	add    esi,ecx
c0011b5b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011b61:	0f 94 c0             	sete   al
c0011b64:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011b6a:	0f 94 c3             	sete   bl
c0011b6d:	09 c3                	or     ebx,eax
c0011b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b71:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011b76:	74 41                	je     c0011bb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011b78:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011b7b:	84 db                	test   bl,bl
c0011b7d:	75 15                	jne    c0011b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011b7f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011b83:	66 83 f8 0c          	cmp    ax,0xc
c0011b87:	76 05                	jbe    c0011b8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011b89:	b8 0c 00 00 00       	mov    eax,0xc
c0011b8e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011b92:	76 37                	jbe    c0011bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011b94:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011b98:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011b9d:	0f 84 dc 00 00 00    	je     c0011c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	68 58 dd 01 c0       	push   0xc001dd58
c0011bab:	e8 8f d8 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011bb7:	eb 12                	jmp    c0011bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011bb9:	01 c1                	add    ecx,eax
c0011bbb:	84 db                	test   bl,bl
c0011bbd:	75 0c                	jne    c0011bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011bbf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011bc3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011bc7:	77 02                	ja     c0011bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011bc9:	01 d1                	add    ecx,edx
c0011bcb:	89 0e                	mov    DWORD PTR [esi],ecx
c0011bcd:	e9 ea 00 00 00       	jmp    c0011cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011bd2:	80 fb 02             	cmp    bl,0x2
c0011bd5:	75 7c                	jne    c0011c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011bd7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011bde:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011be2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011be6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011bec:	74 20                	je     c0011c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011bee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011bf4:	74 18                	je     c0011c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011bf6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011bfa:	b9 0a 00 00 00       	mov    ecx,0xa
c0011bff:	66 83 f8 0e          	cmp    ax,0xe
c0011c03:	77 03                	ja     c0011c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011c05:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011c08:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011c0c:	76 1f                	jbe    c0011c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011c0e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011c12:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c17:	74 66                	je     c0011c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c19:	83 ec 0c             	sub    esp,0xc
c0011c1c:	68 74 dd 01 c0       	push   0xc001dd74
c0011c21:	e8 19 d8 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c2f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011c34:	74 13                	je     c0011c49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011c36:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011c3a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011c41:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011c45:	01 c8                	add    eax,ecx
c0011c47:	eb 04                	jmp    c0011c4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011c49:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011c4d:	01 c2                	add    edx,eax
c0011c4f:	89 16                	mov    DWORD PTR [esi],edx
c0011c51:	eb 69                	jmp    c0011cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011c53:	0f b6 db             	movzx  ebx,bl
c0011c56:	50                   	push   eax
c0011c57:	50                   	push   eax
c0011c58:	53                   	push   ebx
c0011c59:	68 90 dd 01 c0       	push   0xc001dd90
c0011c5e:	e8 8d 7c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c6b:	74 12                	je     c0011c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	68 9b dd 01 c0       	push   0xc001dd9b
c0011c75:	e8 c5 d7 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	eb 3d                	jmp    c0011cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	55                   	push   ebp
c0011c83:	e8 fc 82 ff ff       	call   c0009f84 <File::close()>
c0011c88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011c8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011c8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c91:	59                   	pop    ecx
c0011c92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c96:	e8 d6 4e ff ff       	call   c0006b71 <free>
c0011c9b:	5b                   	pop    ebx
c0011c9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ca0:	e8 cc 4e ff ff       	call   c0006b71 <free>
c0011ca5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ca8:	e8 c4 4e ff ff       	call   c0006b71 <free>
c0011cad:	5e                   	pop    esi
c0011cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cb2:	e8 ba 4e ff ff       	call   c0006b71 <free>
c0011cb7:	83 c4 10             	add    esp,0x10
c0011cba:	eb 21                	jmp    c0011cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011cbc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011cc0:	e9 76 fd ff ff       	jmp    c0011a3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ccc:	e8 a0 4e ff ff       	call   c0006b71 <free>
c0011cd1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	e9 eb fc ff ff       	jmp    c00119c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011cdd:	31 c0                	xor    eax,eax
c0011cdf:	eb 33                	jmp    c0011d14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011ce1:	83 ec 0c             	sub    esp,0xc
c0011ce4:	55                   	push   ebp
c0011ce5:	e8 9a 82 ff ff       	call   c0009f84 <File::close()>
c0011cea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ced:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011cf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cf3:	58                   	pop    eax
c0011cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cf8:	e8 74 4e ff ff       	call   c0006b71 <free>
c0011cfd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d00:	e8 6c 4e ff ff       	call   c0006b71 <free>
c0011d05:	5a                   	pop    edx
c0011d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d0a:	e8 62 4e ff ff       	call   c0006b71 <free>
c0011d0f:	83 c4 10             	add    esp,0x10
c0011d12:	b0 01                	mov    al,0x1
c0011d14:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011d1a:	5b                   	pop    ebx
c0011d1b:	5e                   	pop    esi
c0011d1c:	5f                   	pop    edi
c0011d1d:	5d                   	pop    ebp
c0011d1e:	c3                   	ret    

c0011d1f <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011d1f:	56                   	push   esi
c0011d20:	31 d2                	xor    edx,edx
c0011d22:	53                   	push   ebx
c0011d23:	8b 1d a0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fa0
c0011d29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011d2d:	39 d3                	cmp    ebx,edx
c0011d2f:	7e 1b                	jle    c0011d4c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011d31:	8b 04 95 c0 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdde40]
c0011d38:	39 c8                	cmp    eax,ecx
c0011d3a:	77 0d                	ja     c0011d49 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011d3c:	8b 34 95 c0 1f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffde040]
c0011d43:	01 c6                	add    esi,eax
c0011d45:	39 ce                	cmp    esi,ecx
c0011d47:	77 05                	ja     c0011d4e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011d49:	42                   	inc    edx
c0011d4a:	eb e1                	jmp    c0011d2d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011d4c:	31 c0                	xor    eax,eax
c0011d4e:	5b                   	pop    ebx
c0011d4f:	5e                   	pop    esi
c0011d50:	c3                   	ret    

c0011d51 <Thr::getDriverNameFromAddress(unsigned long)>:
c0011d51:	53                   	push   ebx
c0011d52:	31 c0                	xor    eax,eax
c0011d54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d58:	8b 1d a0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fa0
c0011d5e:	39 c3                	cmp    ebx,eax
c0011d60:	7e 22                	jle    c0011d84 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011d62:	8b 14 85 c0 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdde40]
c0011d69:	39 ca                	cmp    edx,ecx
c0011d6b:	77 14                	ja     c0011d81 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011d6d:	03 14 85 c0 1f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffde040]
c0011d74:	39 ca                	cmp    edx,ecx
c0011d76:	76 09                	jbe    c0011d81 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011d78:	8b 04 85 c0 23 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddc40]
c0011d7f:	eb 05                	jmp    c0011d86 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011d81:	40                   	inc    eax
c0011d82:	eb da                	jmp    c0011d5e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011d84:	31 c0                	xor    eax,eax
c0011d86:	5b                   	pop    ebx
c0011d87:	c3                   	ret    

c0011d88 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011d88:	53                   	push   ebx
c0011d89:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011d8d:	53                   	push   ebx
c0011d8e:	e8 8c ff ff ff       	call   c0011d1f <Thr::getDriverBaseFromAddress(unsigned long)>
c0011d93:	5a                   	pop    edx
c0011d94:	31 d2                	xor    edx,edx
c0011d96:	85 c0                	test   eax,eax
c0011d98:	74 04                	je     c0011d9e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011d9a:	89 da                	mov    edx,ebx
c0011d9c:	29 c2                	sub    edx,eax
c0011d9e:	89 d0                	mov    eax,edx
c0011da0:	5b                   	pop    ebx
c0011da1:	c3                   	ret    

c0011da2 <Thr::loadDLL(char const*, bool)>:
c0011da2:	55                   	push   ebp
c0011da3:	57                   	push   edi
c0011da4:	56                   	push   esi
c0011da5:	53                   	push   ebx
c0011da6:	81 ec 34 01 00 00    	sub    esp,0x134
c0011dac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011db3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011dba:	56                   	push   esi
c0011dbb:	68 b3 dd 01 c0       	push   0xc001ddb3
c0011dc0:	e8 2b 7b ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011dc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011dcc:	e8 90 4d ff ff       	call   c0006b61 <malloc>
c0011dd1:	83 c4 0c             	add    esp,0xc
c0011dd4:	89 c3                	mov    ebx,eax
c0011dd6:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c0011ddc:	56                   	push   esi
c0011ddd:	50                   	push   eax
c0011dde:	e8 83 80 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0011de3:	83 c4 10             	add    esp,0x10
c0011de6:	85 db                	test   ebx,ebx
c0011de8:	75 3c                	jne    c0011e26 <Thr::loadDLL(char const*, bool)+0x84>
c0011dea:	89 f8                	mov    eax,edi
c0011dec:	84 c0                	test   al,al
c0011dee:	0f 84 d2 01 00 00    	je     c0011fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0011df4:	55                   	push   ebp
c0011df5:	55                   	push   ebp
c0011df6:	68 c4 dd 01 c0       	push   0xc001ddc4
c0011dfb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011dff:	55                   	push   ebp
c0011e00:	e8 1b e8 fe ff       	call   c0000620 <strcpy>
c0011e05:	58                   	pop    eax
c0011e06:	5a                   	pop    edx
c0011e07:	56                   	push   esi
c0011e08:	55                   	push   ebp
c0011e09:	e8 d2 e9 fe ff       	call   c00007e0 <strcat>
c0011e0e:	59                   	pop    ecx
c0011e0f:	58                   	pop    eax
c0011e10:	68 d7 dd 01 c0       	push   0xc001ddd7
c0011e15:	55                   	push   ebp
c0011e16:	e8 c5 e9 fe ff       	call   c00007e0 <strcat>
c0011e1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e1e:	e8 1c d6 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	51                   	push   ecx
c0011e27:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011e2b:	50                   	push   eax
c0011e2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011e30:	50                   	push   eax
c0011e31:	53                   	push   ebx
c0011e32:	e8 9b 83 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	85 db                	test   ebx,ebx
c0011e3c:	74 0c                	je     c0011e4a <Thr::loadDLL(char const*, bool)+0xa8>
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e43:	53                   	push   ebx
c0011e44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011e4f:	75 0a                	jne    c0011e5b <Thr::loadDLL(char const*, bool)+0xb9>
c0011e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e55:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e59:	75 3c                	jne    c0011e97 <Thr::loadDLL(char const*, bool)+0xf5>
c0011e5b:	89 f8                	mov    eax,edi
c0011e5d:	84 c0                	test   al,al
c0011e5f:	0f 84 49 01 00 00    	je     c0011fae <Thr::loadDLL(char const*, bool)+0x20c>
c0011e65:	51                   	push   ecx
c0011e66:	51                   	push   ecx
c0011e67:	68 c4 dd 01 c0       	push   0xc001ddc4
c0011e6c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0011e70:	53                   	push   ebx
c0011e71:	e8 aa e7 fe ff       	call   c0000620 <strcpy>
c0011e76:	5d                   	pop    ebp
c0011e77:	58                   	pop    eax
c0011e78:	56                   	push   esi
c0011e79:	53                   	push   ebx
c0011e7a:	e8 61 e9 fe ff       	call   c00007e0 <strcat>
c0011e7f:	58                   	pop    eax
c0011e80:	5a                   	pop    edx
c0011e81:	68 d7 dd 01 c0       	push   0xc001ddd7
c0011e86:	53                   	push   ebx
c0011e87:	e8 54 e9 fe ff       	call   c00007e0 <strcat>
c0011e8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e8f:	e8 ab d5 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	52                   	push   edx
c0011e98:	6a 03                	push   0x3
c0011e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011ea2:	05 ff 0f 00 00       	add    eax,0xfff
c0011ea7:	83 d2 00             	adc    edx,0x0
c0011eaa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011eae:	50                   	push   eax
c0011eaf:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c0011eb5:	e8 7c 6f ff ff       	call   c0008e36 <VAS::allocatePages(int, int)>
c0011eba:	59                   	pop    ecx
c0011ebb:	89 c3                	mov    ebx,eax
c0011ebd:	5d                   	pop    ebp
c0011ebe:	50                   	push   eax
c0011ebf:	68 ae cb 01 c0       	push   0xc001cbae
c0011ec4:	e8 27 7a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011ec9:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ecc:	e8 8f e6 fe ff       	call   c0000560 <strlen>
c0011ed1:	8b 2d a0 1f 02 c0    	mov    ebp,DWORD PTR ds:0xc0021fa0
c0011ed7:	40                   	inc    eax
c0011ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0011edb:	e8 81 4c ff ff       	call   c0006b61 <malloc>
c0011ee0:	89 04 ad c0 23 02 c0 	mov    DWORD PTR [ebp*4-0x3ffddc40],eax
c0011ee7:	58                   	pop    eax
c0011ee8:	a1 a0 1f 02 c0       	mov    eax,ds:0xc0021fa0
c0011eed:	5a                   	pop    edx
c0011eee:	56                   	push   esi
c0011eef:	ff 34 85 c0 23 02 c0 	push   DWORD PTR [eax*4-0x3ffddc40]
c0011ef6:	e8 25 e7 fe ff       	call   c0000620 <strcpy>
c0011efb:	a1 a0 1f 02 c0       	mov    eax,ds:0xc0021fa0
c0011f00:	8d 50 01             	lea    edx,[eax+0x1]
c0011f03:	89 1c 85 c0 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffdde40],ebx
c0011f0a:	89 15 a0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa0,edx
c0011f10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f14:	83 c4 0c             	add    esp,0xc
c0011f17:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c0011f1e:	6a 01                	push   0x1
c0011f20:	53                   	push   ebx
c0011f21:	56                   	push   esi
c0011f22:	e8 c2 f6 ff ff       	call   c00115e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0011f27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f33:	0f 85 89 00 00 00    	jne    c0011fc2 <Thr::loadDLL(char const*, bool)+0x220>
c0011f39:	89 f8                	mov    eax,edi
c0011f3b:	84 c0                	test   al,al
c0011f3d:	74 73                	je     c0011fb2 <Thr::loadDLL(char const*, bool)+0x210>
c0011f3f:	83 ec 0c             	sub    esp,0xc
c0011f42:	68 d9 dd 01 c0       	push   0xc001ddd9
c0011f47:	e8 f3 d4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011f4c:	83 c4 10             	add    esp,0x10
c0011f4f:	eb 61                	jmp    c0011fb2 <Thr::loadDLL(char const*, bool)+0x210>
c0011f51:	50                   	push   eax
c0011f52:	50                   	push   eax
c0011f53:	89 e8                	mov    eax,ebp
c0011f55:	c1 e0 0c             	shl    eax,0xc
c0011f58:	01 d8                	add    eax,ebx
c0011f5a:	50                   	push   eax
c0011f5b:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c0011f61:	e8 48 6a ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6b:	a8 60                	test   al,0x60
c0011f6d:	75 11                	jne    c0011f80 <Thr::loadDLL(char const*, bool)+0x1de>
c0011f6f:	83 ec 0c             	sub    esp,0xc
c0011f72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f77:	50                   	push   eax
c0011f78:	e8 4f 4f ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	45                   	inc    ebp
c0011f81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f89:	05 ff 0f 00 00       	add    eax,0xfff
c0011f8e:	bf 00 00 00 00       	mov    edi,0x0
c0011f93:	83 d2 00             	adc    edx,0x0
c0011f96:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011f9a:	c1 ea 0c             	shr    edx,0xc
c0011f9d:	39 c5                	cmp    ebp,eax
c0011f9f:	89 d1                	mov    ecx,edx
c0011fa1:	89 f8                	mov    eax,edi
c0011fa3:	19 c8                	sbb    eax,ecx
c0011fa5:	72 aa                	jb     c0011f51 <Thr::loadDLL(char const*, bool)+0x1af>
c0011fa7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011fac:	75 18                	jne    c0011fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0011fae:	31 db                	xor    ebx,ebx
c0011fb0:	eb 14                	jmp    c0011fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	68 f8 dd 01 c0       	push   0xc001ddf8
c0011fba:	e8 80 d4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	31 ed                	xor    ebp,ebp
c0011fc4:	eb bb                	jmp    c0011f81 <Thr::loadDLL(char const*, bool)+0x1df>
c0011fc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011fcc:	89 d8                	mov    eax,ebx
c0011fce:	5b                   	pop    ebx
c0011fcf:	5e                   	pop    esi
c0011fd0:	5f                   	pop    edi
c0011fd1:	5d                   	pop    ebp
c0011fd2:	c3                   	ret    

c0011fd3 <Thr::executeDLL(unsigned long, void*)>:
c0011fd3:	56                   	push   esi
c0011fd4:	53                   	push   ebx
c0011fd5:	52                   	push   edx
c0011fd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011fde:	85 db                	test   ebx,ebx
c0011fe0:	75 10                	jne    c0011ff2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0011fe2:	83 ec 0c             	sub    esp,0xc
c0011fe5:	68 14 de 01 c0       	push   0xc001de14
c0011fea:	e8 50 d4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	50                   	push   eax
c0011ff3:	50                   	push   eax
c0011ff4:	53                   	push   ebx
c0011ff5:	68 3e de 01 c0       	push   0xc001de3e
c0011ffa:	e8 f1 78 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011fff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012003:	89 d8                	mov    eax,ebx
c0012005:	83 c4 14             	add    esp,0x14
c0012008:	5b                   	pop    ebx
c0012009:	5e                   	pop    esi
c001200a:	ff e0                	jmp    eax

c001200c <userModeEntryPoint(void*)>:
c001200c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012011:	48                   	dec    eax
c0012012:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012017:	75 03                	jne    c001201c <userModeEntryPoint(void*)+0x10>
c0012019:	fb                   	sti    
c001201a:	66 90                	xchg   ax,ax
c001201c:	fb                   	sti    
c001201d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012022:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012025:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001202b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001202f:	e9 2b e2 fe ff       	jmp    c000025f <goToUsermode>

c0012034 <changeTSS>:
c0012034:	83 ec 14             	sub    esp,0x14
c0012037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001203c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001203f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012044:	c1 e2 15             	shl    edx,0x15
c0012047:	29 d0                	sub    eax,edx
c0012049:	50                   	push   eax
c001204a:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001204f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012055:	05 7c 11 00 00       	add    eax,0x117c
c001205a:	50                   	push   eax
c001205b:	e8 90 5f ff ff       	call   c0007ff0 <TSS::setESP(unsigned long)>
c0012060:	83 c4 1c             	add    esp,0x1c
c0012063:	c3                   	ret    

c0012064 <switchToThread(ThreadControlBlock*)>:
c0012064:	57                   	push   edi
c0012065:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c001206a:	56                   	push   esi
c001206b:	85 c0                	test   eax,eax
c001206d:	53                   	push   ebx
c001206e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012072:	0f 85 90 00 00 00    	jne    c0012108 <switchToThread(ThreadControlBlock*)+0xa4>
c0012078:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001207b:	80 fa ff             	cmp    dl,0xff
c001207e:	0f 84 80 00 00 00    	je     c0012104 <switchToThread(ThreadControlBlock*)+0xa0>
c0012084:	81 e2 ff 00 00 00    	and    edx,0xff
c001208a:	b8 00 04 00 00       	mov    eax,0x400
c001208f:	29 d0                	sub    eax,edx
c0012091:	d1 f8                	sar    eax,1
c0012093:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012096:	66 90                	xchg   ax,ax
c0012098:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001209b:	e8 7b 24 00 00       	call   c001451b <HalQueryPerformanceCounter()>
c00120a0:	a3 a8 27 02 c0       	mov    ds:0xc00227a8,eax
c00120a5:	89 15 ac 27 02 c0    	mov    DWORD PTR ds:0xc00227ac,edx
c00120ab:	89 c6                	mov    esi,eax
c00120ad:	89 d7                	mov    edi,edx
c00120af:	2b 35 98 27 02 c0    	sub    esi,DWORD PTR ds:0xc0022798
c00120b5:	a3 98 27 02 c0       	mov    ds:0xc0022798,eax
c00120ba:	1b 3d 9c 27 02 c0    	sbb    edi,DWORD PTR ds:0xc002279c
c00120c0:	89 35 a0 27 02 c0    	mov    DWORD PTR ds:0xc00227a0,esi
c00120c6:	89 3d a4 27 02 c0    	mov    DWORD PTR ds:0xc00227a4,edi
c00120cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120d2:	89 15 9c 27 02 c0    	mov    DWORD PTR ds:0xc002279c,edx
c00120d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00120db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00120de:	01 c6                	add    esi,eax
c00120e0:	11 d7                	adc    edi,edx
c00120e2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00120eb:	53                   	push   ebx
c00120ec:	e8 a6 e1 fe ff       	call   c0000297 <switchToThreadASM>
c00120f1:	0f 20 c0             	mov    eax,cr0
c00120f4:	83 c8 08             	or     eax,0x8
c00120f7:	0f 22 c0             	mov    cr0,eax
c00120fa:	83 c4 10             	add    esp,0x10
c00120fd:	5b                   	pop    ebx
c00120fe:	5e                   	pop    esi
c00120ff:	5f                   	pop    edi
c0012100:	c3                   	ret    
c0012101:	8d 76 00             	lea    esi,[esi+0x0]
c0012104:	31 c0                	xor    eax,eax
c0012106:	eb 90                	jmp    c0012098 <switchToThread(ThreadControlBlock*)+0x34>
c0012108:	5b                   	pop    ebx
c0012109:	c7 05 60 27 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x1
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	c3                   	ret    
c0012116:	66 90                	xchg   ax,ax

c0012118 <Process::addArgs(char**)>:
c0012118:	57                   	push   edi
c0012119:	56                   	push   esi
c001211a:	53                   	push   ebx
c001211b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001211f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012123:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001212d:	85 ff                	test   edi,edi
c001212f:	74 43                	je     c0012174 <Process::addArgs(char**)+0x5c>
c0012131:	8b 07                	mov    eax,DWORD PTR [edi]
c0012133:	85 c0                	test   eax,eax
c0012135:	74 3d                	je     c0012174 <Process::addArgs(char**)+0x5c>
c0012137:	31 db                	xor    ebx,ebx
c0012139:	8d 76 00             	lea    esi,[esi+0x0]
c001213c:	83 ec 0c             	sub    esp,0xc
c001213f:	50                   	push   eax
c0012140:	e8 1b e4 fe ff       	call   c0000560 <strlen>
c0012145:	40                   	inc    eax
c0012146:	89 04 24             	mov    DWORD PTR [esp],eax
c0012149:	e8 13 4a ff ff       	call   c0006b61 <malloc>
c001214e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012155:	5a                   	pop    edx
c0012156:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012159:	59                   	pop    ecx
c001215a:	43                   	inc    ebx
c001215b:	52                   	push   edx
c001215c:	50                   	push   eax
c001215d:	e8 be e4 fe ff       	call   c0000620 <strcpy>
c0012162:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012168:	83 c4 10             	add    esp,0x10
c001216b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001216e:	85 c0                	test   eax,eax
c0012170:	75 ca                	jne    c001213c <Process::addArgs(char**)+0x24>
c0012172:	66 90                	xchg   ax,ax
c0012174:	5b                   	pop    ebx
c0012175:	5e                   	pop    esi
c0012176:	5f                   	pop    edi
c0012177:	c3                   	ret    

c0012178 <Process::Process(char const*, Process*, char**)>:
c0012178:	56                   	push   esi
c0012179:	53                   	push   ebx
c001217a:	83 ec 14             	sub    esp,0x14
c001217d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012181:	05 0c 02 00 00       	add    eax,0x20c
c0012186:	bb 07 00 00 00       	mov    ebx,0x7
c001218b:	89 c6                	mov    esi,eax
c001218d:	8d 76 00             	lea    esi,[esi+0x0]
c0012190:	85 db                	test   ebx,ebx
c0012192:	78 14                	js     c00121a8 <Process::Process(char const*, Process*, char**)+0x30>
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	56                   	push   esi
c0012198:	e8 af 9c 00 00       	call   c001be4c <ThreadControlBlock::ThreadControlBlock()>
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	83 c6 5f             	add    esi,0x5f
c00121a3:	4b                   	dec    ebx
c00121a4:	eb ea                	jmp    c0012190 <Process::Process(char const*, Process*, char**)+0x18>
c00121a6:	66 90                	xchg   ax,ax
c00121a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00121b3:	83 ec 0c             	sub    esp,0xc
c00121b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00121ba:	e8 09 d1 ff ff       	call   c000f2c8 <Krnl::newProcessEnv(Process*)>
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	89 c2                	mov    edx,eax
c00121c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121c8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00121ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121d2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00121db:	a1 d0 ec 01 c0       	mov    eax,ds:0xc001ecd0
c00121e0:	8d 50 01             	lea    edx,[eax+0x1]
c00121e3:	89 15 d0 ec 01 c0    	mov    DWORD PTR ds:0xc001ecd0,edx
c00121e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00121ed:	89 02                	mov    DWORD PTR [edx],eax
c00121ef:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00121f7:	83 ec 0c             	sub    esp,0xc
c00121fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121fe:	e8 5e 49 ff ff       	call   c0006b61 <malloc>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	89 c3                	mov    ebx,eax
c0012208:	83 ec 08             	sub    esp,0x8
c001220b:	6a 00                	push   0x0
c001220d:	53                   	push   ebx
c001220e:	e8 cd 6f ff ff       	call   c00091e0 <VAS::VAS(bool)>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001221a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012224:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001222e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012232:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012236:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001223c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012240:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012246:	85 c0                	test   eax,eax
c0012248:	74 42                	je     c001228c <Process::Process(char const*, Process*, char**)+0x114>
c001224a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001224e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012254:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001225a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001225e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012268:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001226e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012278:	05 0c 01 00 00       	add    eax,0x10c
c001227d:	83 ec 08             	sub    esp,0x8
c0012280:	52                   	push   edx
c0012281:	50                   	push   eax
c0012282:	e8 99 e3 fe ff       	call   c0000620 <strcpy>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	eb 64                	jmp    c00122f0 <Process::Process(char const*, Process*, char**)+0x178>
c001228c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012294:	83 ec 0c             	sub    esp,0xc
c0012297:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001229b:	e8 c1 48 ff ff       	call   c0006b61 <malloc>
c00122a0:	83 c4 10             	add    esp,0x10
c00122a3:	89 c3                	mov    ebx,eax
c00122a5:	83 ec 08             	sub    esp,0x8
c00122a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122ac:	53                   	push   ebx
c00122ad:	e8 e2 5a ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00122bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00122c9:	83 ec 0c             	sub    esp,0xc
c00122cc:	50                   	push   eax
c00122cd:	e8 62 53 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c00122d2:	83 c4 10             	add    esp,0x10
c00122d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122d9:	05 0c 01 00 00       	add    eax,0x10c
c00122de:	83 ec 08             	sub    esp,0x8
c00122e1:	68 5d de 01 c0       	push   0xc001de5d
c00122e6:	50                   	push   eax
c00122e7:	e8 34 e3 fe ff       	call   c0000620 <strcpy>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	90                   	nop
c00122f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f4:	83 c0 0c             	add    eax,0xc
c00122f7:	83 ec 08             	sub    esp,0x8
c00122fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122fe:	50                   	push   eax
c00122ff:	e8 1c e3 fe ff       	call   c0000620 <strcpy>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	83 ec 08             	sub    esp,0x8
c001230a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001230e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012312:	e8 01 fe ff ff       	call   c0012118 <Process::addArgs(char**)>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	83 ec 08             	sub    esp,0x8
c001231d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012325:	e8 89 ed ff ff       	call   c00110b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012331:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012335:	83 f0 01             	xor    eax,0x1
c0012338:	88 c2                	mov    dl,al
c001233a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012344:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012348:	25 ff 00 00 00       	and    eax,0xff
c001234d:	83 ec 08             	sub    esp,0x8
c0012350:	50                   	push   eax
c0012351:	68 b4 de 01 c0       	push   0xc001deb4
c0012356:	e8 95 75 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	90                   	nop
c001235f:	83 c4 14             	add    esp,0x14
c0012362:	5b                   	pop    ebx
c0012363:	5e                   	pop    esi
c0012364:	c3                   	ret    
c0012365:	90                   	nop
c0012366:	66 90                	xchg   ax,ax

c0012368 <Process::Process(bool, char const*, Process*, char**)>:
c0012368:	56                   	push   esi
c0012369:	53                   	push   ebx
c001236a:	83 ec 24             	sub    esp,0x24
c001236d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012371:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012379:	05 0c 02 00 00       	add    eax,0x20c
c001237e:	bb 07 00 00 00       	mov    ebx,0x7
c0012383:	89 c6                	mov    esi,eax
c0012385:	8d 76 00             	lea    esi,[esi+0x0]
c0012388:	85 db                	test   ebx,ebx
c001238a:	78 14                	js     c00123a0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	56                   	push   esi
c0012390:	e8 b7 9a 00 00       	call   c001be4c <ThreadControlBlock::ThreadControlBlock()>
c0012395:	83 c4 10             	add    esp,0x10
c0012398:	83 c6 5f             	add    esi,0x5f
c001239b:	4b                   	dec    ebx
c001239c:	eb ea                	jmp    c0012388 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001239e:	66 90                	xchg   ax,ax
c00123a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00123ab:	83 ec 0c             	sub    esp,0xc
c00123ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123b2:	e8 11 cf ff ff       	call   c000f2c8 <Krnl::newProcessEnv(Process*)>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	89 c2                	mov    edx,eax
c00123bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00123c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123ca:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00123d3:	a1 d0 ec 01 c0       	mov    eax,ds:0xc001ecd0
c00123d8:	8d 50 01             	lea    edx,[eax+0x1]
c00123db:	89 15 d0 ec 01 c0    	mov    DWORD PTR ds:0xc001ecd0,edx
c00123e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00123e5:	89 02                	mov    DWORD PTR [edx],eax
c00123e7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00123f6:	e8 66 47 ff ff       	call   c0006b61 <malloc>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	89 c3                	mov    ebx,eax
c0012400:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012404:	25 ff 00 00 00       	and    eax,0xff
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	50                   	push   eax
c001240d:	53                   	push   ebx
c001240e:	e8 cd 6d ff ff       	call   c00091e0 <VAS::VAS(bool)>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001241a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012424:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001242e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012432:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012436:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001243c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012440:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012446:	85 c0                	test   eax,eax
c0012448:	74 42                	je     c001248c <Process::Process(bool, char const*, Process*, char**)+0x124>
c001244a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001244e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012454:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001245a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001245e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012468:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001246e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012478:	05 0c 01 00 00       	add    eax,0x10c
c001247d:	83 ec 08             	sub    esp,0x8
c0012480:	52                   	push   edx
c0012481:	50                   	push   eax
c0012482:	e8 99 e1 fe ff       	call   c0000620 <strcpy>
c0012487:	83 c4 10             	add    esp,0x10
c001248a:	eb 64                	jmp    c00124f0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001248c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001249b:	e8 c1 46 ff ff       	call   c0006b61 <malloc>
c00124a0:	83 c4 10             	add    esp,0x10
c00124a3:	89 c3                	mov    ebx,eax
c00124a5:	83 ec 08             	sub    esp,0x8
c00124a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ac:	53                   	push   ebx
c00124ad:	e8 e2 58 ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00124bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00124c9:	83 ec 0c             	sub    esp,0xc
c00124cc:	50                   	push   eax
c00124cd:	e8 62 51 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c00124d2:	83 c4 10             	add    esp,0x10
c00124d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d9:	05 0c 01 00 00       	add    eax,0x10c
c00124de:	83 ec 08             	sub    esp,0x8
c00124e1:	68 5d de 01 c0       	push   0xc001de5d
c00124e6:	50                   	push   eax
c00124e7:	e8 34 e1 fe ff       	call   c0000620 <strcpy>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	90                   	nop
c00124f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f4:	83 c0 0c             	add    eax,0xc
c00124f7:	83 ec 08             	sub    esp,0x8
c00124fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124fe:	50                   	push   eax
c00124ff:	e8 1c e1 fe ff       	call   c0000620 <strcpy>
c0012504:	83 c4 10             	add    esp,0x10
c0012507:	83 ec 08             	sub    esp,0x8
c001250a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001250e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012512:	e8 01 fc ff ff       	call   c0012118 <Process::addArgs(char**)>
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	90                   	nop
c001251b:	83 c4 24             	add    esp,0x24
c001251e:	5b                   	pop    ebx
c001251f:	5e                   	pop    esi
c0012520:	c3                   	ret    
c0012521:	8d 76 00             	lea    esi,[esi+0x0]

c0012524 <taskStartupFunction>:
c0012524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012529:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001252c:	c3                   	ret    
c001252d:	90                   	nop
c001252e:	66 90                	xchg   ax,ax

c0012530 <Semaphore::Semaphore(int)>:
c0012530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012538:	89 10                	mov    DWORD PTR [eax],edx
c001253a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001253e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012549:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012554:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001255b:	90                   	nop
c001255c:	c3                   	ret    
c001255d:	90                   	nop
c001255e:	66 90                	xchg   ax,ax

c0012560 <Mutex::Mutex()>:
c0012560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012564:	6a 01                	push   0x1
c0012566:	50                   	push   eax
c0012567:	e8 c4 ff ff ff       	call   c0012530 <Semaphore::Semaphore(int)>
c001256c:	83 c4 08             	add    esp,0x8
c001256f:	90                   	nop
c0012570:	c3                   	ret    
c0012571:	90                   	nop
c0012572:	66 90                	xchg   ax,ax

c0012574 <Process::createThread(void (*)(void*), void*, int)>:
c0012574:	57                   	push   edi
c0012575:	31 c9                	xor    ecx,ecx
c0012577:	56                   	push   esi
c0012578:	53                   	push   ebx
c0012579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001257d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0012584:	89 f2                	mov    edx,esi
c0012586:	66 90                	xchg   ax,ax
c0012588:	31 c0                	xor    eax,eax
c001258a:	66 89 d0             	mov    ax,dx
c001258d:	83 e2 01             	and    edx,0x1
c0012590:	74 12                	je     c00125a4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0012592:	d1 f8                	sar    eax,1
c0012594:	41                   	inc    ecx
c0012595:	89 c2                	mov    edx,eax
c0012597:	83 f9 10             	cmp    ecx,0x10
c001259a:	75 ec                	jne    c0012588 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001259c:	31 db                	xor    ebx,ebx
c001259e:	89 d8                	mov    eax,ebx
c00125a0:	5b                   	pop    ebx
c00125a1:	5e                   	pop    esi
c00125a2:	5f                   	pop    edi
c00125a3:	c3                   	ret    
c00125a4:	b8 01 00 00 00       	mov    eax,0x1
c00125a9:	d3 e0                	shl    eax,cl
c00125ab:	09 c6                	or     esi,eax
c00125ad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00125b0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00125b7:	01 c0                	add    eax,eax
c00125b9:	01 c8                	add    eax,ecx
c00125bb:	8d 04 80             	lea    eax,[eax+eax*4]
c00125be:	01 d8                	add    eax,ebx
c00125c0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00125c7:	75 0b                	jne    c00125d4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00125c9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00125d3:	90                   	nop
c00125d4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00125e0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00125e3:	01 c0                	add    eax,eax
c00125e5:	01 c8                	add    eax,ecx
c00125e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00125ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00125ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00125f3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00125f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00125fd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0012603:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0012609:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0012610:	89 ca                	mov    edx,ecx
c0012612:	f7 da                	neg    edx
c0012614:	c1 e2 15             	shl    edx,0x15
c0012617:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001261d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0012623:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012627:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0012631:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0012637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001263b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0012641:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001264b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012655:	53                   	push   ebx
c0012656:	68 84 27 02 c0       	push   0xc0022784
c001265b:	e8 8c 95 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012660:	83 c4 10             	add    esp,0x10
c0012663:	89 d8                	mov    eax,ebx
c0012665:	5b                   	pop    ebx
c0012666:	5e                   	pop    esi
c0012667:	5f                   	pop    edi
c0012668:	c3                   	ret    
c0012669:	90                   	nop
c001266a:	66 90                	xchg   ax,ax

c001266c <Process::createUserThread()>:
c001266c:	83 ec 0c             	sub    esp,0xc
c001266f:	68 80 00 00 00       	push   0x80
c0012674:	6a 00                	push   0x0
c0012676:	68 0c 20 01 c0       	push   0xc001200c
c001267b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001267f:	50                   	push   eax
c0012680:	e8 ef fe ff ff       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c0012685:	83 c4 1c             	add    esp,0x1c
c0012688:	c3                   	ret    
c0012689:	8d 76 00             	lea    esi,[esi+0x0]

c001268c <setupMultitasking(void (*)())>:
c001268c:	56                   	push   esi
c001268d:	53                   	push   ebx
c001268e:	53                   	push   ebx
c001268f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012693:	eb 13                	jmp    c00126a8 <setupMultitasking(void (*)())+0x1c>
c0012695:	8d 76 00             	lea    esi,[esi+0x0]
c0012698:	83 ec 0c             	sub    esp,0xc
c001269b:	68 84 27 02 c0       	push   0xc0022784
c00126a0:	e8 8f 94 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	68 84 27 02 c0       	push   0xc0022784
c00126b0:	e8 5b 94 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	84 c0                	test   al,al
c00126ba:	74 dc                	je     c0012698 <setupMultitasking(void (*)())+0xc>
c00126bc:	83 ec 0c             	sub    esp,0xc
c00126bf:	68 1f 07 00 00       	push   0x71f
c00126c4:	e8 98 44 ff ff       	call   c0006b61 <malloc>
c00126c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00126d0:	89 c3                	mov    ebx,eax
c00126d2:	6a 00                	push   0x0
c00126d4:	68 61 de 01 c0       	push   0xc001de61
c00126d9:	6a 01                	push   0x1
c00126db:	50                   	push   eax
c00126dc:	e8 87 fc ff ff       	call   c0012368 <Process::Process(bool, char const*, Process*, char**)>
c00126e1:	83 c4 14             	add    esp,0x14
c00126e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00126ea:	89 1d 90 27 02 c0    	mov    DWORD PTR ds:0xc0022790,ebx
c00126f0:	50                   	push   eax
c00126f1:	e8 9b 51 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c00126f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00126fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0012708:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001270e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012711:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001271b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012721:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0012727:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012731:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001273b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012745:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001274b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012751:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001275b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012761:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001276b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012771:	5a                   	pop    edx
c0012772:	59                   	pop    ecx
c0012773:	68 5d de 01 c0       	push   0xc001de5d
c0012778:	50                   	push   eax
c0012779:	e8 a2 de fe ff       	call   c0000620 <strcpy>
c001277e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0012785:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012789:	83 c4 14             	add    esp,0x14
c001278c:	5b                   	pop    ebx
c001278d:	5e                   	pop    esi
c001278e:	e9 f6 da fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0012793:	90                   	nop

c0012794 <schedule()>:
c0012794:	8b 15 64 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022764
c001279a:	85 d2                	test   edx,edx
c001279c:	74 0e                	je     c00127ac <schedule()+0x18>
c001279e:	c7 05 60 27 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x1
c00127a8:	c3                   	ret    
c00127a9:	8d 76 00             	lea    esi,[esi+0x0]
c00127ac:	53                   	push   ebx
c00127ad:	83 ec 14             	sub    esp,0x14
c00127b0:	68 84 27 02 c0       	push   0xc0022784
c00127b5:	e8 56 93 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00127ba:	83 c4 10             	add    esp,0x10
c00127bd:	84 c0                	test   al,al
c00127bf:	75 3b                	jne    c00127fc <schedule()+0x68>
c00127c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00127c9:	4a                   	dec    edx
c00127ca:	74 38                	je     c0012804 <schedule()+0x70>
c00127cc:	83 ec 0c             	sub    esp,0xc
c00127cf:	68 84 27 02 c0       	push   0xc0022784
c00127d4:	e8 53 93 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00127d9:	c7 04 24 84 27 02 c0 	mov    DWORD PTR [esp],0xc0022784
c00127e0:	89 c3                	mov    ebx,eax
c00127e2:	e8 4d 93 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00127e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00127ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127f1:	e8 6e f8 ff ff       	call   c0012064 <switchToThread(ThreadControlBlock*)>
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	8d 76 00             	lea    esi,[esi+0x0]
c00127fc:	83 c4 08             	add    esp,0x8
c00127ff:	5b                   	pop    ebx
c0012800:	c3                   	ret    
c0012801:	8d 76 00             	lea    esi,[esi+0x0]
c0012804:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001280b:	83 ec 08             	sub    esp,0x8
c001280e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012813:	50                   	push   eax
c0012814:	68 84 27 02 c0       	push   0xc0022784
c0012819:	e8 ce 93 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	eb a9                	jmp    c00127cc <schedule()+0x38>
c0012823:	90                   	nop

c0012824 <Semaphore::tryAcquire()>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 08             	sub    esp,0x8
c0012828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001282c:	fa                   	cli    
c001282d:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012832:	8d 50 01             	lea    edx,[eax+0x1]
c0012835:	89 15 68 27 02 c0    	mov    DWORD PTR ds:0xc0022768,edx
c001283b:	8b 15 64 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022764
c0012841:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012844:	89 1d 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,ebx
c001284a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001284d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001284f:	7c 33                	jl     c0012884 <Semaphore::tryAcquire()+0x60>
c0012851:	89 15 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,edx
c0012857:	85 d2                	test   edx,edx
c0012859:	75 0d                	jne    c0012868 <Semaphore::tryAcquire()+0x44>
c001285b:	8b 15 60 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022760
c0012861:	85 d2                	test   edx,edx
c0012863:	75 6b                	jne    c00128d0 <Semaphore::tryAcquire()+0xac>
c0012865:	8d 76 00             	lea    esi,[esi+0x0]
c0012868:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001286d:	85 c0                	test   eax,eax
c001286f:	74 0b                	je     c001287c <Semaphore::tryAcquire()+0x58>
c0012871:	8d 76 00             	lea    esi,[esi+0x0]
c0012874:	31 c0                	xor    eax,eax
c0012876:	83 c4 08             	add    esp,0x8
c0012879:	5b                   	pop    ebx
c001287a:	c3                   	ret    
c001287b:	90                   	nop
c001287c:	fb                   	sti    
c001287d:	83 c4 08             	add    esp,0x8
c0012880:	5b                   	pop    ebx
c0012881:	c3                   	ret    
c0012882:	66 90                	xchg   ax,ax
c0012884:	43                   	inc    ebx
c0012885:	89 15 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,edx
c001288b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001288e:	85 d2                	test   edx,edx
c0012890:	75 22                	jne    c00128b4 <Semaphore::tryAcquire()+0x90>
c0012892:	8b 0d 60 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022760
c0012898:	85 c9                	test   ecx,ecx
c001289a:	74 18                	je     c00128b4 <Semaphore::tryAcquire()+0x90>
c001289c:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c00128a6:	e8 e9 fe ff ff       	call   c0012794 <schedule()>
c00128ab:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00128b0:	48                   	dec    eax
c00128b1:	8d 76 00             	lea    esi,[esi+0x0]
c00128b4:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00128b9:	85 c0                	test   eax,eax
c00128bb:	75 0b                	jne    c00128c8 <Semaphore::tryAcquire()+0xa4>
c00128bd:	fb                   	sti    
c00128be:	b0 01                	mov    al,0x1
c00128c0:	83 c4 08             	add    esp,0x8
c00128c3:	5b                   	pop    ebx
c00128c4:	c3                   	ret    
c00128c5:	8d 76 00             	lea    esi,[esi+0x0]
c00128c8:	b0 01                	mov    al,0x1
c00128ca:	83 c4 08             	add    esp,0x8
c00128cd:	5b                   	pop    ebx
c00128ce:	c3                   	ret    
c00128cf:	90                   	nop
c00128d0:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c00128da:	e8 b5 fe ff ff       	call   c0012794 <schedule()>
c00128df:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00128e4:	48                   	dec    eax
c00128e5:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00128ea:	85 c0                	test   eax,eax
c00128ec:	75 86                	jne    c0012874 <Semaphore::tryAcquire()+0x50>
c00128ee:	eb 8c                	jmp    c001287c <Semaphore::tryAcquire()+0x58>

c00128f0 <Semaphore::assertLocked(char const*)>:
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00128f7:	fa                   	cli    
c00128f8:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c00128fe:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0012903:	8d 48 01             	lea    ecx,[eax+0x1]
c0012906:	89 0d 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,ecx
c001290c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001290e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012911:	7c 29                	jl     c001293c <Semaphore::assertLocked(char const*)+0x4c>
c0012913:	90                   	nop
c0012914:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0012919:	85 c0                	test   eax,eax
c001291b:	75 0b                	jne    c0012928 <Semaphore::assertLocked(char const*)+0x38>
c001291d:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c0012922:	85 c0                	test   eax,eax
c0012924:	75 2e                	jne    c0012954 <Semaphore::assertLocked(char const*)+0x64>
c0012926:	66 90                	xchg   ax,ax
c0012928:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c001292d:	48                   	dec    eax
c001292e:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012933:	75 03                	jne    c0012938 <Semaphore::assertLocked(char const*)+0x48>
c0012935:	fb                   	sti    
c0012936:	66 90                	xchg   ax,ax
c0012938:	83 c4 0c             	add    esp,0xc
c001293b:	c3                   	ret    
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012943:	52                   	push   edx
c0012944:	e8 f6 ca ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012949:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c001294e:	83 c4 10             	add    esp,0x10
c0012951:	48                   	dec    eax
c0012952:	eb c0                	jmp    c0012914 <Semaphore::assertLocked(char const*)+0x24>
c0012954:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c001295e:	e8 31 fe ff ff       	call   c0012794 <schedule()>
c0012963:	eb c3                	jmp    c0012928 <Semaphore::assertLocked(char const*)+0x38>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]

c0012968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012974:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012977:	e8 18 fe ff ff       	call   c0012794 <schedule()>
c001297c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012981:	48                   	dec    eax
c0012982:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012987:	75 03                	jne    c001298c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012989:	fb                   	sti    
c001298a:	66 90                	xchg   ax,ax
c001298c:	83 c4 0c             	add    esp,0xc
c001298f:	c3                   	ret    

c0012990 <blockTask(TaskState)>:
c0012990:	83 ec 0c             	sub    esp,0xc
c0012993:	fa                   	cli    
c0012994:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001299a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001299e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00129a6:	e8 e9 fd ff ff       	call   c0012794 <schedule()>
c00129ab:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00129b0:	48                   	dec    eax
c00129b1:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00129b6:	75 04                	jne    c00129bc <blockTask(TaskState)+0x2c>
c00129b8:	fb                   	sti    
c00129b9:	8d 76 00             	lea    esi,[esi+0x0]
c00129bc:	83 c4 0c             	add    esp,0xc
c00129bf:	c3                   	ret    

c00129c0 <waitTask(int, int*, int)>:
c00129c0:	83 ec 18             	sub    esp,0x18
c00129c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129cc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00129cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00129d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00129db:	6a 07                	push   0x7
c00129dd:	e8 ae ff ff ff       	call   c0012990 <blockTask(TaskState)>
c00129e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00129ed:	85 d2                	test   edx,edx
c00129ef:	74 0b                	je     c00129fc <waitTask(int, int*, int)+0x3c>
c00129f1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00129f4:	89 02                	mov    DWORD PTR [edx],eax
c00129f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129fb:	90                   	nop
c00129fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00129ff:	83 c4 0c             	add    esp,0xc
c0012a02:	c3                   	ret    
c0012a03:	90                   	nop

c0012a04 <milliTenthSleepUntil(unsigned int)>:
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0b:	39 05 6c 18 02 c0    	cmp    DWORD PTR ds:0xc002186c,eax
c0012a11:	76 05                	jbe    c0012a18 <milliTenthSleepUntil(unsigned int)+0x14>
c0012a13:	90                   	nop
c0012a14:	83 c4 0c             	add    esp,0xc
c0012a17:	c3                   	ret    
c0012a18:	fa                   	cli    
c0012a19:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0012a1f:	83 ec 08             	sub    esp,0x8
c0012a22:	ff 05 64 27 02 c0    	inc    DWORD PTR ds:0xc0022764
c0012a28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012a2e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012a31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012a37:	52                   	push   edx
c0012a38:	68 78 27 02 c0       	push   0xc0022778
c0012a3d:	e8 aa 91 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012a42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a49:	e8 42 ff ff ff       	call   c0012990 <blockTask(TaskState)>
c0012a4e:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	48                   	dec    eax
c0012a57:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0012a5c:	85 c0                	test   eax,eax
c0012a5e:	75 0c                	jne    c0012a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0012a60:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c0012a65:	85 c0                	test   eax,eax
c0012a67:	75 17                	jne    c0012a80 <milliTenthSleepUntil(unsigned int)+0x7c>
c0012a69:	8d 76 00             	lea    esi,[esi+0x0]
c0012a6c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012a71:	48                   	dec    eax
c0012a72:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012a77:	75 9b                	jne    c0012a14 <milliTenthSleepUntil(unsigned int)+0x10>
c0012a79:	fb                   	sti    
c0012a7a:	83 c4 0c             	add    esp,0xc
c0012a7d:	c3                   	ret    
c0012a7e:	66 90                	xchg   ax,ax
c0012a80:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c0012a8a:	e8 05 fd ff ff       	call   c0012794 <schedule()>
c0012a8f:	eb db                	jmp    c0012a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0012a91:	8d 76 00             	lea    esi,[esi+0x0]

c0012a94 <milliTenthSleep(unsigned int)>:
c0012a94:	a1 6c 18 02 c0       	mov    eax,ds:0xc002186c
c0012a99:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012a9d:	e9 62 ff ff ff       	jmp    c0012a04 <milliTenthSleepUntil(unsigned int)>
c0012aa2:	66 90                	xchg   ax,ax

c0012aa4 <sleep(unsigned int)>:
c0012aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa8:	8d 04 80             	lea    eax,[eax+eax*4]
c0012aab:	8d 04 80             	lea    eax,[eax+eax*4]
c0012aae:	8d 04 80             	lea    eax,[eax+eax*4]
c0012ab1:	8d 04 80             	lea    eax,[eax+eax*4]
c0012ab4:	c1 e0 04             	shl    eax,0x4
c0012ab7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012abb:	eb d7                	jmp    c0012a94 <milliTenthSleep(unsigned int)>
c0012abd:	90                   	nop
c0012abe:	66 90                	xchg   ax,ax

c0012ac0 <Semaphore::acquire()>:
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac7:	fa                   	cli    
c0012ac8:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0012acd:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0012ad3:	8d 48 01             	lea    ecx,[eax+0x1]
c0012ad6:	89 0d 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,ecx
c0012adc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012adf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012ae1:	7d 2d                	jge    c0012b10 <Semaphore::acquire()+0x50>
c0012ae3:	41                   	inc    ecx
c0012ae4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012ae7:	90                   	nop
c0012ae8:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0012aed:	85 c0                	test   eax,eax
c0012aef:	75 0b                	jne    c0012afc <Semaphore::acquire()+0x3c>
c0012af1:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c0012af6:	85 c0                	test   eax,eax
c0012af8:	75 62                	jne    c0012b5c <Semaphore::acquire()+0x9c>
c0012afa:	66 90                	xchg   ax,ax
c0012afc:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012b01:	48                   	dec    eax
c0012b02:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012b07:	75 03                	jne    c0012b0c <Semaphore::acquire()+0x4c>
c0012b09:	fb                   	sti    
c0012b0a:	66 90                	xchg   ax,ax
c0012b0c:	83 c4 0c             	add    esp,0xc
c0012b0f:	c3                   	ret    
c0012b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012b1c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012b1f:	85 c9                	test   ecx,ecx
c0012b21:	74 4d                	je     c0012b70 <Semaphore::acquire()+0xb0>
c0012b23:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012b26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012b2c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012b2f:	90                   	nop
c0012b30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012b3b:	68 dc de 01 c0       	push   0xc001dedc
c0012b40:	e8 ab 6d ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012b45:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012b4c:	e8 3f fe ff ff       	call   c0012990 <blockTask(TaskState)>
c0012b51:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	48                   	dec    eax
c0012b5a:	eb 8c                	jmp    c0012ae8 <Semaphore::acquire()+0x28>
c0012b5c:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c0012b66:	e8 29 fc ff ff       	call   c0012794 <schedule()>
c0012b6b:	eb 8f                	jmp    c0012afc <Semaphore::acquire()+0x3c>
c0012b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b78:	eb b6                	jmp    c0012b30 <Semaphore::acquire()+0x70>
c0012b7a:	66 90                	xchg   ax,ax

c0012b7c <taskReturned>:
c0012b7c:	83 ec 18             	sub    esp,0x18
c0012b7f:	68 fc de 01 c0       	push   0xc001defc
c0012b84:	e8 b6 c8 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	6a 02                	push   0x2
c0012b91:	e8 fa fd ff ff       	call   c0012990 <blockTask(TaskState)>
c0012b96:	fa                   	cli    
c0012b97:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0012b9d:	e8 f2 fb ff ff       	call   c0012794 <schedule()>
c0012ba2:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	48                   	dec    eax
c0012bab:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012bb0:	85 c0                	test   eax,eax
c0012bb2:	75 d8                	jne    c0012b8c <taskReturned+0x10>
c0012bb4:	fb                   	sti    
c0012bb5:	eb d5                	jmp    c0012b8c <taskReturned+0x10>
c0012bb7:	90                   	nop

c0012bb8 <Thr::processFromPID(int)>:
c0012bb8:	57                   	push   edi
c0012bb9:	56                   	push   esi
c0012bba:	53                   	push   ebx
c0012bbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bbf:	fa                   	cli    
c0012bc0:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0012bc6:	83 ec 0c             	sub    esp,0xc
c0012bc9:	68 84 27 02 c0       	push   0xc0022784
c0012bce:	e8 59 8f 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	89 c7                	mov    edi,eax
c0012bd8:	eb 16                	jmp    c0012bf0 <Thr::processFromPID(int)+0x38>
c0012bda:	66 90                	xchg   ax,ax
c0012bdc:	83 ec 0c             	sub    esp,0xc
c0012bdf:	68 84 27 02 c0       	push   0xc0022784
c0012be4:	e8 43 8f 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	39 f8                	cmp    eax,edi
c0012bee:	74 4c                	je     c0012c3c <Thr::processFromPID(int)+0x84>
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	68 84 27 02 c0       	push   0xc0022784
c0012bf8:	e8 2f 8f 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bfd:	c7 04 24 84 27 02 c0 	mov    DWORD PTR [esp],0xc0022784
c0012c04:	89 c3                	mov    ebx,eax
c0012c06:	e8 29 8f 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012c0b:	58                   	pop    eax
c0012c0c:	5a                   	pop    edx
c0012c0d:	53                   	push   ebx
c0012c0e:	68 84 27 02 c0       	push   0xc0022784
c0012c13:	e8 d4 8f 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012c18:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012c1b:	83 c4 10             	add    esp,0x10
c0012c1e:	39 30                	cmp    DWORD PTR [eax],esi
c0012c20:	75 ba                	jne    c0012bdc <Thr::processFromPID(int)+0x24>
c0012c22:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012c27:	48                   	dec    eax
c0012c28:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012c2d:	74 09                	je     c0012c38 <Thr::processFromPID(int)+0x80>
c0012c2f:	90                   	nop
c0012c30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012c33:	5b                   	pop    ebx
c0012c34:	5e                   	pop    esi
c0012c35:	5f                   	pop    edi
c0012c36:	c3                   	ret    
c0012c37:	90                   	nop
c0012c38:	fb                   	sti    
c0012c39:	eb f5                	jmp    c0012c30 <Thr::processFromPID(int)+0x78>
c0012c3b:	90                   	nop
c0012c3c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012c41:	48                   	dec    eax
c0012c42:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012c47:	75 07                	jne    c0012c50 <Thr::processFromPID(int)+0x98>
c0012c49:	fb                   	sti    
c0012c4a:	5b                   	pop    ebx
c0012c4b:	5e                   	pop    esi
c0012c4c:	5f                   	pop    edi
c0012c4d:	c3                   	ret    
c0012c4e:	66 90                	xchg   ax,ax
c0012c50:	5b                   	pop    ebx
c0012c51:	31 c0                	xor    eax,eax
c0012c53:	5e                   	pop    esi
c0012c54:	5f                   	pop    edi
c0012c55:	c3                   	ret    
c0012c56:	66 90                	xchg   ax,ax

c0012c58 <unblockTask(ThreadControlBlock*)>:
c0012c58:	53                   	push   ebx
c0012c59:	83 ec 08             	sub    esp,0x8
c0012c5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c60:	fa                   	cli    
c0012c61:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0012c67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c6a:	85 c0                	test   eax,eax
c0012c6c:	74 66                	je     c0012cd4 <unblockTask(ThreadControlBlock*)+0x7c>
c0012c6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012c71:	48                   	dec    eax
c0012c72:	74 38                	je     c0012cac <unblockTask(ThreadControlBlock*)+0x54>
c0012c74:	83 ec 0c             	sub    esp,0xc
c0012c77:	68 84 27 02 c0       	push   0xc0022784
c0012c7c:	e8 ab 8e 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	85 c0                	test   eax,eax
c0012c86:	75 1c                	jne    c0012ca4 <unblockTask(ThreadControlBlock*)+0x4c>
c0012c88:	eb 5e                	jmp    c0012ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0012c8a:	66 90                	xchg   ax,ax
c0012c8c:	83 ec 08             	sub    esp,0x8
c0012c8f:	50                   	push   eax
c0012c90:	68 84 27 02 c0       	push   0xc0022784
c0012c95:	e8 42 92 00 00       	call   c001bedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	85 c0                	test   eax,eax
c0012c9f:	74 47                	je     c0012ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0012ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca4:	39 c3                	cmp    ebx,eax
c0012ca6:	75 e4                	jne    c0012c8c <unblockTask(ThreadControlBlock*)+0x34>
c0012ca8:	eb 12                	jmp    c0012cbc <unblockTask(ThreadControlBlock*)+0x64>
c0012caa:	66 90                	xchg   ax,ax
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	68 7f de 01 c0       	push   0xc001de7f
c0012cb4:	e8 37 6c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012cb9:	83 c4 10             	add    esp,0x10
c0012cbc:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012cc1:	48                   	dec    eax
c0012cc2:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012cc7:	75 03                	jne    c0012ccc <unblockTask(ThreadControlBlock*)+0x74>
c0012cc9:	fb                   	sti    
c0012cca:	66 90                	xchg   ax,ax
c0012ccc:	83 c4 08             	add    esp,0x8
c0012ccf:	5b                   	pop    ebx
c0012cd0:	c3                   	ret    
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	68 68 de 01 c0       	push   0xc001de68
c0012cdc:	e8 0f 6c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	eb d6                	jmp    c0012cbc <unblockTask(ThreadControlBlock*)+0x64>
c0012ce6:	66 90                	xchg   ax,ax
c0012ce8:	83 ec 08             	sub    esp,0x8
c0012ceb:	53                   	push   ebx
c0012cec:	68 84 27 02 c0       	push   0xc0022784
c0012cf1:	e8 f6 8e 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012cf6:	83 c4 10             	add    esp,0x10
c0012cf9:	eb c1                	jmp    c0012cbc <unblockTask(ThreadControlBlock*)+0x64>
c0012cfb:	90                   	nop

c0012cfc <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012cfc:	55                   	push   ebp
c0012cfd:	57                   	push   edi
c0012cfe:	56                   	push   esi
c0012cff:	53                   	push   ebx
c0012d00:	83 ec 1c             	sub    esp,0x1c
c0012d03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012d07:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d0a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012d10:	85 ed                	test   ebp,ebp
c0012d12:	7e 24                	jle    c0012d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012d14:	31 f6                	xor    esi,esi
c0012d16:	66 90                	xchg   ax,ax
c0012d18:	83 ec 0c             	sub    esp,0xc
c0012d1b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012d22:	46                   	inc    esi
c0012d23:	57                   	push   edi
c0012d24:	e8 48 3e ff ff       	call   c0006b71 <free>
c0012d29:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012d35:	7f e1                	jg     c0012d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012d37:	90                   	nop
c0012d38:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012d42:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012d47:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012d4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012d4d:	d3 c0                	rol    eax,cl
c0012d4f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012d56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012d59:	89 f7                	mov    edi,esi
c0012d5b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012d63:	0f 85 77 01 00 00    	jne    c0012ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012d69:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012d6f:	85 ed                	test   ebp,ebp
c0012d71:	74 1d                	je     c0012d90 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012d73:	83 ec 0c             	sub    esp,0xc
c0012d76:	55                   	push   ebp
c0012d77:	e8 68 c4 ff ff       	call   c000f1e4 <EnvVarContainer::~EnvVarContainer()>
c0012d7c:	59                   	pop    ecx
c0012d7d:	5e                   	pop    esi
c0012d7e:	6a 0c                	push   0xc
c0012d80:	55                   	push   ebp
c0012d81:	e8 74 6a ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0012d86:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012d89:	83 c4 10             	add    esp,0x10
c0012d8c:	89 f7                	mov    edi,esi
c0012d8e:	66 90                	xchg   ax,ax
c0012d90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012d96:	85 c0                	test   eax,eax
c0012d98:	0f 84 b6 00 00 00    	je     c0012e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012d9e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012da1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012da5:	31 c9                	xor    ecx,ecx
c0012da7:	eb 17                	jmp    c0012dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012da9:	8d 76 00             	lea    esi,[esi+0x0]
c0012dac:	41                   	inc    ecx
c0012dad:	83 f9 10             	cmp    ecx,0x10
c0012db0:	0f 84 9e 00 00 00    	je     c0012e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012db6:	66 90                	xchg   ax,ax
c0012db8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012dbe:	66 90                	xchg   ax,ax
c0012dc0:	31 d2                	xor    edx,edx
c0012dc2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0012dc9:	d3 fa                	sar    edx,cl
c0012dcb:	83 e2 01             	and    edx,0x1
c0012dce:	74 dc                	je     c0012dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012dd0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012dd3:	01 d2                	add    edx,edx
c0012dd5:	01 ca                	add    edx,ecx
c0012dd7:	8d 14 92             	lea    edx,[edx+edx*4]
c0012dda:	01 d0                	add    eax,edx
c0012ddc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012de2:	83 fd 07             	cmp    ebp,0x7
c0012de5:	75 c5                	jne    c0012dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012de7:	05 40 02 00 00       	add    eax,0x240
c0012dec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012def:	83 fd ff             	cmp    ebp,0xffffffff
c0012df2:	0f 8c f0 00 00 00    	jl     c0012ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0012df8:	0f 84 ae 01 00 00    	je     c0012fac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0012dfe:	85 ed                	test   ebp,ebp
c0012e00:	0f 84 92 01 00 00    	je     c0012f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0012e06:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012e08:	75 a2                	jne    c0012dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012e0a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012e10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012e14:	01 d0                	add    eax,edx
c0012e16:	66 90                	xchg   ax,ax
c0012e18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012e1c:	83 ec 0c             	sub    esp,0xc
c0012e1f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012e25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e2e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012e35:	50                   	push   eax
c0012e36:	e8 1d fe ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012e41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012e45:	89 f7                	mov    edi,esi
c0012e47:	41                   	inc    ecx
c0012e48:	83 f9 10             	cmp    ecx,0x10
c0012e4b:	0f 85 67 ff ff ff    	jne    c0012db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012e51:	8d 76 00             	lea    esi,[esi+0x0]
c0012e54:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 62                	je     c0012ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012e5e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012e64:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0012e6a:	74 54                	je     c0012ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	68 84 27 02 c0       	push   0xc0022784
c0012e74:	e8 b3 8c 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e79:	c7 04 24 84 27 02 c0 	mov    DWORD PTR [esp],0xc0022784
c0012e80:	89 c7                	mov    edi,eax
c0012e82:	e8 89 8c 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	84 c0                	test   al,al
c0012e8c:	0f 84 ce 00 00 00    	je     c0012f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0012e92:	66 90                	xchg   ax,ax
c0012e94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e97:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e9d:	85 d2                	test   edx,edx
c0012e9f:	74 0f                	je     c0012eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0012ea1:	83 ec 0c             	sub    esp,0xc
c0012ea4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ea6:	52                   	push   edx
c0012ea7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eaa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012ead:	83 c4 10             	add    esp,0x10
c0012eb0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0012eba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0012ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ec0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0012ec6:	85 db                	test   ebx,ebx
c0012ec8:	74 16                	je     c0012ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012eca:	83 ec 0c             	sub    esp,0xc
c0012ecd:	53                   	push   ebx
c0012ece:	e8 fb 5c ff ff       	call   c0008bce <VAS::~VAS()>
c0012ed3:	58                   	pop    eax
c0012ed4:	5a                   	pop    edx
c0012ed5:	6a 14                	push   0x14
c0012ed7:	53                   	push   ebx
c0012ed8:	e8 1d 69 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	83 c4 1c             	add    esp,0x1c
c0012ee3:	5b                   	pop    ebx
c0012ee4:	5e                   	pop    esi
c0012ee5:	5f                   	pop    edi
c0012ee6:	5d                   	pop    ebp
c0012ee7:	c3                   	ret    
c0012ee8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	68 30 df 01 c0       	push   0xc001df30
c0012ef4:	e8 46 c5 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012ef9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	89 f7                	mov    edi,esi
c0012f01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012f05:	e9 a2 fe ff ff       	jmp    c0012dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012f12:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0012f18:	75 1e                	jne    c0012f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	68 98 df 01 c0       	push   0xc001df98
c0012f22:	e8 c9 69 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012f27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012f2e:	e8 5d fa ff ff       	call   c0012990 <blockTask(TaskState)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	66 90                	xchg   ax,ax
c0012f38:	83 ec 08             	sub    esp,0x8
c0012f3b:	56                   	push   esi
c0012f3c:	68 84 27 02 c0       	push   0xc0022784
c0012f41:	e8 a6 8c 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012f46:	c7 04 24 84 27 02 c0 	mov    DWORD PTR [esp],0xc0022784
c0012f4d:	e8 da 8b 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	39 f8                	cmp    eax,edi
c0012f57:	0f 84 37 ff ff ff    	je     c0012e94 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0012f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f60:	83 ec 0c             	sub    esp,0xc
c0012f63:	68 84 27 02 c0       	push   0xc0022784
c0012f68:	e8 bf 8b 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f6d:	c7 04 24 84 27 02 c0 	mov    DWORD PTR [esp],0xc0022784
c0012f74:	89 c6                	mov    esi,eax
c0012f76:	e8 b9 8b 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	39 f3                	cmp    ebx,esi
c0012f80:	74 b6                	je     c0012f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012f82:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0012f85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f88:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0012f8e:	75 a8                	jne    c0012f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0012f90:	e9 77 ff ff ff       	jmp    c0012f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0012f95:	8d 76 00             	lea    esi,[esi+0x0]
c0012f98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	68 64 df 01 c0       	push   0xc001df64
c0012fa4:	e9 4b ff ff ff       	jmp    c0012ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0012fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0012fac:	8b 36                	mov    esi,DWORD PTR [esi]
c0012fae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012fb2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0012fb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fb8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0012fbe:	01 d7                	add    edi,edx
c0012fc0:	89 f8                	mov    eax,edi
c0012fc2:	e9 51 fe ff ff       	jmp    c0012e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0012fc7:	90                   	nop

c0012fc8 <cleanerTaskFunction(void*)>:
c0012fc8:	53                   	push   ebx
c0012fc9:	83 ec 08             	sub    esp,0x8
c0012fcc:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012fd1:	48                   	dec    eax
c0012fd2:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012fd7:	75 03                	jne    c0012fdc <cleanerTaskFunction(void*)+0x14>
c0012fd9:	fb                   	sti    
c0012fda:	66 90                	xchg   ax,ax
c0012fdc:	fa                   	cli    
c0012fdd:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0012fe2:	80 3d 4c 27 02 c0 00 	cmp    BYTE PTR ds:0xc002274c,0x0
c0012fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0012fec:	89 15 68 27 02 c0    	mov    DWORD PTR ds:0xc0022768,edx
c0012ff2:	0f 84 ac 00 00 00    	je     c00130a4 <cleanerTaskFunction(void*)+0xdc>
c0012ff8:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0012ffd:	85 c0                	test   eax,eax
c0012fff:	75 03                	jne    c0013004 <cleanerTaskFunction(void*)+0x3c>
c0013001:	fb                   	sti    
c0013002:	66 90                	xchg   ax,ax
c0013004:	c6 05 4c 27 02 c0 00 	mov    BYTE PTR ds:0xc002274c,0x0
c001300b:	fa                   	cli    
c001300c:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0013012:	ff 05 64 27 02 c0    	inc    DWORD PTR ds:0xc0022764
c0013018:	fa                   	cli    
c0013019:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001301f:	eb 2b                	jmp    c001304c <cleanerTaskFunction(void*)+0x84>
c0013021:	8d 76 00             	lea    esi,[esi+0x0]
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	68 6c 27 02 c0       	push   0xc002276c
c001302c:	e8 fb 8a 00 00       	call   c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013031:	c7 04 24 6c 27 02 c0 	mov    DWORD PTR [esp],0xc002276c
c0013038:	89 c3                	mov    ebx,eax
c001303a:	e8 f5 8a 00 00       	call   c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001303f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013042:	e8 b5 fc ff ff       	call   c0012cfc <cleanupTerminatedTask(ThreadControlBlock*)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	66 90                	xchg   ax,ax
c001304c:	83 ec 0c             	sub    esp,0xc
c001304f:	68 6c 27 02 c0       	push   0xc002276c
c0013054:	e8 b7 8a 00 00       	call   c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	84 c0                	test   al,al
c001305e:	74 c4                	je     c0013024 <cleanerTaskFunction(void*)+0x5c>
c0013060:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013065:	48                   	dec    eax
c0013066:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001306b:	75 03                	jne    c0013070 <cleanerTaskFunction(void*)+0xa8>
c001306d:	fb                   	sti    
c001306e:	66 90                	xchg   ax,ax
c0013070:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0013075:	48                   	dec    eax
c0013076:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c001307b:	0f 85 4b ff ff ff    	jne    c0012fcc <cleanerTaskFunction(void*)+0x4>
c0013081:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c0013086:	85 c0                	test   eax,eax
c0013088:	0f 84 3e ff ff ff    	je     c0012fcc <cleanerTaskFunction(void*)+0x4>
c001308e:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c0013098:	e8 f7 f6 ff ff       	call   c0012794 <schedule()>
c001309d:	e9 2a ff ff ff       	jmp    c0012fcc <cleanerTaskFunction(void*)+0x4>
c00130a2:	66 90                	xchg   ax,ax
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	6a 02                	push   0x2
c00130a9:	e8 ba f8 ff ff       	call   c0012968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	e9 4e ff ff ff       	jmp    c0013004 <cleanerTaskFunction(void*)+0x3c>
c00130b6:	66 90                	xchg   ax,ax

c00130b8 <terminateTask(int)>:
c00130b8:	83 ec 14             	sub    esp,0x14
c00130bb:	fa                   	cli    
c00130bc:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c00130c2:	ff 05 64 27 02 c0    	inc    DWORD PTR ds:0xc0022764
c00130c8:	fa                   	cli    
c00130c9:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c00130cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130d8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00130db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00130e3:	50                   	push   eax
c00130e4:	68 6c 27 02 c0       	push   0xc002276c
c00130e9:	e8 fe 8a 00 00       	call   c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00130ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00130fd:	a1 48 27 02 c0       	mov    eax,ds:0xc0022748
c0013102:	85 c0                	test   eax,eax
c0013104:	74 5e                	je     c0013164 <terminateTask(int)+0xac>
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	c6 05 4c 27 02 c0 01 	mov    BYTE PTR ds:0xc002274c,0x1
c0013110:	50                   	push   eax
c0013111:	e8 42 fb ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c0013116:	83 c4 10             	add    esp,0x10
c0013119:	8d 76 00             	lea    esi,[esi+0x0]
c001311c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013121:	48                   	dec    eax
c0013122:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0013127:	75 03                	jne    c001312c <terminateTask(int)+0x74>
c0013129:	fb                   	sti    
c001312a:	66 90                	xchg   ax,ax
c001312c:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c0013131:	48                   	dec    eax
c0013132:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c0013137:	75 0b                	jne    c0013144 <terminateTask(int)+0x8c>
c0013139:	83 3d 60 27 02 c0 00 	cmp    DWORD PTR ds:0xc0022760,0x0
c0013140:	75 36                	jne    c0013178 <terminateTask(int)+0xc0>
c0013142:	66 90                	xchg   ax,ax
c0013144:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013149:	48                   	dec    eax
c001314a:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001314f:	75 03                	jne    c0013154 <terminateTask(int)+0x9c>
c0013151:	fb                   	sti    
c0013152:	66 90                	xchg   ax,ax
c0013154:	fa                   	cli    
c0013155:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001315b:	90                   	nop
c001315c:	e8 33 f6 ff ff       	call   c0012794 <schedule()>
c0013161:	eb e1                	jmp    c0013144 <terminateTask(int)+0x8c>
c0013163:	90                   	nop
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	68 96 de 01 c0       	push   0xc001de96
c001316c:	e8 7f 67 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	eb a6                	jmp    c001311c <terminateTask(int)+0x64>
c0013176:	66 90                	xchg   ax,ax
c0013178:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c0013182:	eb d8                	jmp    c001315c <terminateTask(int)+0xa4>

c0013184 <Thr::terminateFromIRQ(int)>:
c0013184:	83 ec 18             	sub    esp,0x18
c0013187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318b:	50                   	push   eax
c001318c:	e8 27 ff ff ff       	call   c00130b8 <terminateTask(int)>
c0013191:	90                   	nop
c0013192:	66 90                	xchg   ax,ax

c0013194 <Semaphore::release()>:
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001319b:	fa                   	cli    
c001319c:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c00131a1:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c00131a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00131aa:	89 0d 64 27 02 c0    	mov    DWORD PTR ds:0xc0022764,ecx
c00131b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00131b3:	85 c9                	test   ecx,ecx
c00131b5:	74 41                	je     c00131f8 <Semaphore::release()+0x64>
c00131b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00131ba:	83 ec 0c             	sub    esp,0xc
c00131bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00131c0:	51                   	push   ecx
c00131c1:	e8 92 fa ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c00131c6:	a1 64 27 02 c0       	mov    eax,ds:0xc0022764
c00131cb:	83 c4 10             	add    esp,0x10
c00131ce:	48                   	dec    eax
c00131cf:	90                   	nop
c00131d0:	a3 64 27 02 c0       	mov    ds:0xc0022764,eax
c00131d5:	85 c0                	test   eax,eax
c00131d7:	75 0b                	jne    c00131e4 <Semaphore::release()+0x50>
c00131d9:	a1 60 27 02 c0       	mov    eax,ds:0xc0022760
c00131de:	85 c0                	test   eax,eax
c00131e0:	75 1e                	jne    c0013200 <Semaphore::release()+0x6c>
c00131e2:	66 90                	xchg   ax,ax
c00131e4:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00131e9:	48                   	dec    eax
c00131ea:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00131ef:	75 03                	jne    c00131f4 <Semaphore::release()+0x60>
c00131f1:	fb                   	sti    
c00131f2:	66 90                	xchg   ax,ax
c00131f4:	83 c4 0c             	add    esp,0xc
c00131f7:	c3                   	ret    
c00131f8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00131fb:	eb d3                	jmp    c00131d0 <Semaphore::release()+0x3c>
c00131fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013200:	c7 05 60 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022760,0x0
c001320a:	e8 85 f5 ff ff       	call   c0012794 <schedule()>
c001320f:	eb d3                	jmp    c00131e4 <Semaphore::release()+0x50>
c0013211:	8d 76 00             	lea    esi,[esi+0x0]

c0013214 <__static_initialization_and_destruction_0(int, int)>:
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001321c:	0f 85 8e 00 00 00    	jne    c00132b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013222:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001322a:	0f 85 80 00 00 00    	jne    c00132b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	68 84 27 02 c0       	push   0xc0022784
c0013238:	e8 5b 8c 00 00       	call   c001be98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	83 ec 04             	sub    esp,0x4
c0013243:	68 5c ea 01 c0       	push   0xc001ea5c
c0013248:	68 84 27 02 c0       	push   0xc0022784
c001324d:	68 48 be 01 c0       	push   0xc001be48
c0013252:	e8 53 65 ff ff       	call   c00097aa <__cxa_atexit>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	68 78 27 02 c0       	push   0xc0022778
c0013262:	e8 31 8c 00 00       	call   c001be98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	83 ec 04             	sub    esp,0x4
c001326d:	68 5c ea 01 c0       	push   0xc001ea5c
c0013272:	68 78 27 02 c0       	push   0xc0022778
c0013277:	68 48 be 01 c0       	push   0xc001be48
c001327c:	e8 29 65 ff ff       	call   c00097aa <__cxa_atexit>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	83 ec 0c             	sub    esp,0xc
c0013287:	68 6c 27 02 c0       	push   0xc002276c
c001328c:	e8 07 8c 00 00       	call   c001be98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013291:	83 c4 10             	add    esp,0x10
c0013294:	83 ec 04             	sub    esp,0x4
c0013297:	68 5c ea 01 c0       	push   0xc001ea5c
c001329c:	68 6c 27 02 c0       	push   0xc002276c
c00132a1:	68 48 be 01 c0       	push   0xc001be48
c00132a6:	e8 ff 64 ff ff       	call   c00097aa <__cxa_atexit>
c00132ab:	83 c4 10             	add    esp,0x10
c00132ae:	66 90                	xchg   ax,ax
c00132b0:	90                   	nop
c00132b1:	83 c4 0c             	add    esp,0xc
c00132b4:	c3                   	ret    
c00132b5:	8d 76 00             	lea    esi,[esi+0x0]

c00132b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00132b8:	83 ec 0c             	sub    esp,0xc
c00132bb:	83 ec 08             	sub    esp,0x8
c00132be:	68 ff ff 00 00       	push   0xffff
c00132c3:	6a 01                	push   0x1
c00132c5:	e8 4a ff ff ff       	call   c0013214 <__static_initialization_and_destruction_0(int, int)>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	83 c4 0c             	add    esp,0xc
c00132d0:	c3                   	ret    

c00132d1 <Vm::inbv(unsigned short)>:
c00132d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00132da:	75 06                	jne    c00132e2 <Vm::inbv(unsigned short)+0x11>
c00132dc:	a0 cc 27 02 c0       	mov    al,ds:0xc00227cc
c00132e1:	c3                   	ret    
c00132e2:	ec                   	in     al,dx
c00132e3:	c3                   	ret    

c00132e4 <Vm::outbv(unsigned short, unsigned char)>:
c00132e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c00132f1:	75 25                	jne    c0013318 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00132f3:	8b 0d cc 27 02 c0    	mov    ecx,DWORD PTR ds:0xc00227cc
c00132f9:	8d 51 01             	lea    edx,[ecx+0x1]
c00132fc:	88 81 e0 27 02 c0    	mov    BYTE PTR [ecx-0x3ffdd820],al
c0013302:	89 15 cc 27 02 c0    	mov    DWORD PTR ds:0xc00227cc,edx
c0013308:	83 fa 20             	cmp    edx,0x20
c001330b:	75 0c                	jne    c0013319 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001330d:	c7 05 cc 27 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00227cc,0x1f
c0013317:	c3                   	ret    
c0013318:	ee                   	out    dx,al
c0013319:	c3                   	ret    

c001331a <Vm::realToLinear(unsigned short, unsigned short)>:
c001331a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001331f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013324:	c1 e0 04             	shl    eax,0x4
c0013327:	01 d0                	add    eax,edx
c0013329:	c3                   	ret    

c001332a <Vm::getSegment(unsigned int)>:
c001332a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001332e:	c1 e8 10             	shr    eax,0x10
c0013331:	c3                   	ret    

c0013332 <Vm::getOffset(unsigned int)>:
c0013332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013336:	c3                   	ret    

c0013337 <Vm::mainloop2()>:
c0013337:	83 ec 18             	sub    esp,0x18
c001333a:	fa                   	cli    
c001333b:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0013341:	6a 02                	push   0x2
c0013343:	c6 05 c5 27 02 c0 01 	mov    BYTE PTR ds:0xc00227c5,0x1
c001334a:	e8 19 f6 ff ff       	call   c0012968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001334f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013354:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013358:	52                   	push   edx
c0013359:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001335d:	52                   	push   edx
c001335e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013362:	52                   	push   edx
c0013363:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013367:	50                   	push   eax
c0013368:	e8 c2 ce fe ff       	call   c000022f <goToVM86>
c001336d:	83 c4 2c             	add    esp,0x2c
c0013370:	c3                   	ret    

c0013371 <Vm::mainVm8086Loop(void*)>:
c0013371:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013376:	48                   	dec    eax
c0013377:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001337c:	75 01                	jne    c001337f <Vm::mainVm8086Loop(void*)+0xe>
c001337e:	fb                   	sti    
c001337f:	eb b6                	jmp    c0013337 <Vm::mainloop2()>

c0013381 <Vm::mainloop3(unsigned long)>:
c0013381:	83 ec 18             	sub    esp,0x18
c0013384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013388:	fa                   	cli    
c0013389:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001338f:	6a 02                	push   0x2
c0013391:	c6 05 c4 27 02 c0 01 	mov    BYTE PTR ds:0xc00227c4,0x1
c0013398:	a3 c0 27 02 c0       	mov    ds:0xc00227c0,eax
c001339d:	e8 c6 f5 ff ff       	call   c0012968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00133a2:	83 c4 1c             	add    esp,0x1c
c00133a5:	eb 90                	jmp    c0013337 <Vm::mainloop2()>

c00133a7 <Vm::initialise8086()>:
c00133a7:	83 ec 0c             	sub    esp,0xc
c00133aa:	68 80 00 00 00       	push   0x80
c00133af:	6a 00                	push   0x0
c00133b1:	68 71 33 01 c0       	push   0xc0013371
c00133b6:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c00133bc:	e8 b3 f1 ff ff       	call   c0012574 <Process::createThread(void (*)(void*), void*, int)>
c00133c1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00133c8:	a3 c8 27 02 c0       	mov    ds:0xc00227c8,eax
c00133cd:	68 00 01 00 00       	push   0x100
c00133d2:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c00133d7:	6a 00                	push   0x0
c00133d9:	6a 00                	push   0x0
c00133db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00133e1:	e8 46 5c ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00133e6:	83 c4 2c             	add    esp,0x2c
c00133e9:	c3                   	ret    

c00133ea <Vm::finish8086()>:
c00133ea:	53                   	push   ebx
c00133eb:	83 ec 08             	sub    esp,0x8
c00133ee:	fa                   	cli    
c00133ef:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c00133f5:	80 3d c4 27 02 c0 00 	cmp    BYTE PTR ds:0xc00227c4,0x0
c00133fc:	75 15                	jne    c0013413 <Vm::finish8086()+0x29>
c00133fe:	e8 91 f3 ff ff       	call   c0012794 <schedule()>
c0013403:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013408:	48                   	dec    eax
c0013409:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001340e:	75 de                	jne    c00133ee <Vm::finish8086()+0x4>
c0013410:	fb                   	sti    
c0013411:	eb db                	jmp    c00133ee <Vm::finish8086()+0x4>
c0013413:	83 ec 0c             	sub    esp,0xc
c0013416:	8b 1d c0 27 02 c0    	mov    ebx,DWORD PTR ds:0xc00227c0
c001341c:	ff 35 c8 27 02 c0    	push   DWORD PTR ds:0xc00227c8
c0013422:	c6 05 c4 27 02 c0 00 	mov    BYTE PTR ds:0xc00227c4,0x0
c0013429:	e8 2a f8 ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c001342e:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	8d 50 ff             	lea    edx,[eax-0x1]
c0013439:	89 15 68 27 02 c0    	mov    DWORD PTR ds:0xc0022768,edx
c001343f:	85 d2                	test   edx,edx
c0013441:	75 01                	jne    c0013444 <Vm::finish8086()+0x5a>
c0013443:	fb                   	sti    
c0013444:	89 d8                	mov    eax,ebx
c0013446:	83 c4 08             	add    esp,0x8
c0013449:	5b                   	pop    ebx
c001344a:	c3                   	ret    

c001344b <Vm::getOutput8086(unsigned char*)>:
c001344b:	57                   	push   edi
c001344c:	8b 0d cc 27 02 c0    	mov    ecx,DWORD PTR ds:0xc00227cc
c0013452:	56                   	push   esi
c0013453:	be e0 27 02 c0       	mov    esi,0xc00227e0
c0013458:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001345c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001345e:	a1 cc 27 02 c0       	mov    eax,ds:0xc00227cc
c0013463:	5e                   	pop    esi
c0013464:	c7 05 cc 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00227cc,0x0
c001346e:	5f                   	pop    edi
c001346f:	c3                   	ret    

c0013470 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013470:	55                   	push   ebp
c0013471:	57                   	push   edi
c0013472:	56                   	push   esi
c0013473:	53                   	push   ebx
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001347b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001347f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013483:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013487:	fa                   	cli    
c0013488:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001348e:	80 3d c5 27 02 c0 00 	cmp    BYTE PTR ds:0xc00227c5,0x0
c0013495:	75 15                	jne    c00134ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013497:	e8 f8 f2 ff ff       	call   c0012794 <schedule()>
c001349c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c00134a1:	48                   	dec    eax
c00134a2:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c00134a7:	75 de                	jne    c0013487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00134a9:	fb                   	sti    
c00134aa:	eb db                	jmp    c0013487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00134ac:	a1 c8 27 02 c0       	mov    eax,ds:0xc00227c8
c00134b1:	c7 05 cc 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00227cc,0x0
c00134bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00134bf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00134c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00134c7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00134cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00134cf:	0f b7 ff             	movzx  edi,di
c00134d2:	0f b7 f6             	movzx  esi,si
c00134d5:	50                   	push   eax
c00134d6:	6a 20                	push   0x20
c00134d8:	6a 00                	push   0x0
c00134da:	68 e0 27 02 c0       	push   0xc00227e0
c00134df:	e8 0c d0 fe ff       	call   c00004f0 <memset>
c00134e4:	5a                   	pop    edx
c00134e5:	59                   	pop    ecx
c00134e6:	57                   	push   edi
c00134e7:	56                   	push   esi
c00134e8:	e8 2d fe ff ff       	call   c001331a <Vm::realToLinear(unsigned short, unsigned short)>
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	89 c7                	mov    edi,eax
c00134f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00134f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00134fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134fc:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013501:	c6 05 c5 27 02 c0 00 	mov    BYTE PTR ds:0xc00227c5,0x0
c0013508:	48                   	dec    eax
c0013509:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001350e:	75 01                	jne    c0013511 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0013510:	fb                   	sti    
c0013511:	83 ec 0c             	sub    esp,0xc
c0013514:	ff 35 c8 27 02 c0    	push   DWORD PTR ds:0xc00227c8
c001351a:	e8 39 f7 ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c001351f:	83 c4 1c             	add    esp,0x1c
c0013522:	b0 01                	mov    al,0x1
c0013524:	5b                   	pop    ebx
c0013525:	5e                   	pop    esi
c0013526:	5f                   	pop    edi
c0013527:	5d                   	pop    ebp
c0013528:	c3                   	ret    

c0013529 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013529:	55                   	push   ebp
c001352a:	57                   	push   edi
c001352b:	56                   	push   esi
c001352c:	53                   	push   ebx
c001352d:	83 ec 2c             	sub    esp,0x2c
c0013530:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0013534:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0013538:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001353c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013540:	fa                   	cli    
c0013541:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c0013547:	0f b6 35 c5 27 02 c0 	movzx  esi,BYTE PTR ds:0xc00227c5
c001354e:	89 f0                	mov    eax,esi
c0013550:	84 c0                	test   al,al
c0013552:	75 1d                	jne    c0013571 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013554:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013558:	e8 37 f2 ff ff       	call   c0012794 <schedule()>
c001355d:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013562:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013566:	48                   	dec    eax
c0013567:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001356c:	75 d2                	jne    c0013540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001356e:	fb                   	sti    
c001356f:	eb cf                	jmp    c0013540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013571:	a1 c8 27 02 c0       	mov    eax,ds:0xc00227c8
c0013576:	c7 05 cc 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00227cc,0x0
c0013580:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0013584:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013588:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001358c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0013590:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013594:	50                   	push   eax
c0013595:	6a 20                	push   0x20
c0013597:	6a 00                	push   0x0
c0013599:	68 e0 27 02 c0       	push   0xc00227e0
c001359e:	e8 4d cf fe ff       	call   c00004f0 <memset>
c00135a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135aa:	e8 b2 35 ff ff       	call   c0006b61 <malloc>
c00135af:	83 c4 0c             	add    esp,0xc
c00135b2:	89 c3                	mov    ebx,eax
c00135b4:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c00135ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00135be:	50                   	push   eax
c00135bf:	e8 a2 68 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	85 db                	test   ebx,ebx
c00135c9:	75 0a                	jne    c00135d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	68 c0 df 01 c0       	push   0xc001dfc0
c00135d3:	eb 3e                	jmp    c0013613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00135d5:	50                   	push   eax
c00135d6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135da:	50                   	push   eax
c00135db:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135df:	50                   	push   eax
c00135e0:	53                   	push   ebx
c00135e1:	e8 ec 6b ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c00135e6:	83 c4 10             	add    esp,0x10
c00135e9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00135ee:	74 0a                	je     c00135fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00135f0:	83 ec 0c             	sub    esp,0xc
c00135f3:	68 d4 df 01 c0       	push   0xc001dfd4
c00135f8:	eb 19                	jmp    c0013613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00135fa:	51                   	push   ecx
c00135fb:	51                   	push   ecx
c00135fc:	6a 01                	push   0x1
c00135fe:	53                   	push   ebx
c00135ff:	e8 22 69 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	85 c0                	test   eax,eax
c0013609:	74 24                	je     c001362f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001360b:	83 ec 0c             	sub    esp,0xc
c001360e:	68 ed df 01 c0       	push   0xc001dfed
c0013613:	e8 27 be ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0013618:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	48                   	dec    eax
c0013621:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0013626:	85 c0                	test   eax,eax
c0013628:	75 01                	jne    c001362b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001362a:	fb                   	sti    
c001362b:	31 f6                	xor    esi,esi
c001362d:	eb 58                	jmp    c0013687 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001362f:	0f b7 ed             	movzx  ebp,bp
c0013632:	50                   	push   eax
c0013633:	0f b7 ff             	movzx  edi,di
c0013636:	50                   	push   eax
c0013637:	55                   	push   ebp
c0013638:	57                   	push   edi
c0013639:	e8 dc fc ff ff       	call   c001331a <Vm::realToLinear(unsigned short, unsigned short)>
c001363e:	5a                   	pop    edx
c001363f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013641:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013645:	51                   	push   ecx
c0013646:	50                   	push   eax
c0013647:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001364b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001364f:	53                   	push   ebx
c0013650:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013653:	83 c4 14             	add    esp,0x14
c0013656:	53                   	push   ebx
c0013657:	e8 28 69 ff ff       	call   c0009f84 <File::close()>
c001365c:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	48                   	dec    eax
c0013665:	c6 05 c5 27 02 c0 00 	mov    BYTE PTR ds:0xc00227c5,0x0
c001366c:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0013671:	85 c0                	test   eax,eax
c0013673:	75 01                	jne    c0013676 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013675:	fb                   	sti    
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	ff 35 c8 27 02 c0    	push   DWORD PTR ds:0xc00227c8
c001367f:	e8 d4 f5 ff ff       	call   c0012c58 <unblockTask(ThreadControlBlock*)>
c0013684:	83 c4 10             	add    esp,0x10
c0013687:	83 c4 2c             	add    esp,0x2c
c001368a:	89 f0                	mov    eax,esi
c001368c:	5b                   	pop    ebx
c001368d:	5e                   	pop    esi
c001368e:	5f                   	pop    edi
c001368f:	5d                   	pop    ebp
c0013690:	c3                   	ret    

c0013691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0013691:	57                   	push   edi
c0013692:	56                   	push   esi
c0013693:	53                   	push   ebx
c0013694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001369c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136a0:	83 e8 06             	sub    eax,0x6
c00136a3:	0f b7 c0             	movzx  eax,ax
c00136a6:	50                   	push   eax
c00136a7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00136ac:	50                   	push   eax
c00136ad:	e8 68 fc ff ff       	call   c001331a <Vm::realToLinear(unsigned short, unsigned short)>
c00136b2:	5a                   	pop    edx
c00136b3:	5e                   	pop    esi
c00136b4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00136b7:	8d 56 fa             	lea    edx,[esi-0x6]
c00136ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00136c0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00136c3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00136c6:	83 c2 02             	add    edx,0x2
c00136c9:	66 89 10             	mov    WORD PTR [eax],dx
c00136cc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00136cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00136d3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00136d6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00136da:	89 d6                	mov    esi,edx
c00136dc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00136e2:	66 81 e6 ff fd       	and    si,0xfdff
c00136e7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00136eb:	74 07                	je     c00136f4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00136ed:	89 d6                	mov    esi,edx
c00136ef:	66 81 ce 00 02       	or     si,0x200
c00136f4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00136f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136fd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013701:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0013709:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001370c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0013714:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	c3                   	ret    

c001371b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001371b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013720:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013725:	c1 e0 04             	shl    eax,0x4
c0013728:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001372b:	c3                   	ret    

c001372c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001372c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013731:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013736:	c1 e0 04             	shl    eax,0x4
c0013739:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001373d:	c3                   	ret    

c001373e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001373e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013743:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013748:	c1 e0 04             	shl    eax,0x4
c001374b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001374e:	c3                   	ret    

c001374f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001374f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013754:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013759:	c1 e0 04             	shl    eax,0x4
c001375c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013760:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0013763:	c3                   	ret    

c0013764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001376e:	c1 e0 04             	shl    eax,0x4
c0013771:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013775:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013779:	c3                   	ret    

c001377a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001377a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001377f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013784:	c1 e0 04             	shl    eax,0x4
c0013787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001378b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001378e:	c3                   	ret    

c001378f <Vm::faultHandler(regs*)>:
c001378f:	55                   	push   ebp
c0013790:	57                   	push   edi
c0013791:	56                   	push   esi
c0013792:	53                   	push   ebx
c0013793:	83 ec 1c             	sub    esp,0x1c
c0013796:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001379a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001379d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00137a1:	0f b7 f8             	movzx  edi,ax
c00137a4:	52                   	push   edx
c00137a5:	0f b7 c0             	movzx  eax,ax
c00137a8:	50                   	push   eax
c00137a9:	e8 6c fb ff ff       	call   c001331a <Vm::realToLinear(unsigned short, unsigned short)>
c00137ae:	5a                   	pop    edx
c00137af:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00137b2:	59                   	pop    ecx
c00137b3:	89 c1                	mov    ecx,eax
c00137b5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00137b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00137c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137c5:	0f b7 c5             	movzx  eax,bp
c00137c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00137d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00137d4:	e8 41 fb ff ff       	call   c001331a <Vm::realToLinear(unsigned short, unsigned short)>
c00137d9:	5e                   	pop    esi
c00137da:	be 06 00 00 00       	mov    esi,0x6
c00137df:	5a                   	pop    edx
c00137e0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00137e5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00137ea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00137ed:	80 fa 9d             	cmp    dl,0x9d
c00137f0:	0f 84 2c 02 00 00    	je     c0013a22 <Vm::faultHandler(regs*)+0x293>
c00137f6:	0f 87 91 00 00 00    	ja     c001388d <Vm::faultHandler(regs*)+0xfe>
c00137fc:	80 fa 66             	cmp    dl,0x66
c00137ff:	0f 84 98 01 00 00    	je     c001399d <Vm::faultHandler(regs*)+0x20e>
c0013805:	77 47                	ja     c001384e <Vm::faultHandler(regs*)+0xbf>
c0013807:	80 fa 36             	cmp    dl,0x36
c001380a:	0f 84 80 01 00 00    	je     c0013990 <Vm::faultHandler(regs*)+0x201>
c0013810:	77 1a                	ja     c001382c <Vm::faultHandler(regs*)+0x9d>
c0013812:	80 fa 26             	cmp    dl,0x26
c0013815:	0f 84 4e 01 00 00    	je     c0013969 <Vm::faultHandler(regs*)+0x1da>
c001381b:	80 fa 2e             	cmp    dl,0x2e
c001381e:	0f 85 e2 05 00 00    	jne    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013824:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013827:	31 f6                	xor    esi,esi
c0013829:	41                   	inc    ecx
c001382a:	eb be                	jmp    c00137ea <Vm::faultHandler(regs*)+0x5b>
c001382c:	80 fa 64             	cmp    dl,0x64
c001382f:	0f 84 41 01 00 00    	je     c0013976 <Vm::faultHandler(regs*)+0x1e7>
c0013835:	0f 87 48 01 00 00    	ja     c0013983 <Vm::faultHandler(regs*)+0x1f4>
c001383b:	80 fa 3e             	cmp    dl,0x3e
c001383e:	0f 85 c2 05 00 00    	jne    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013844:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013847:	be 01 00 00 00       	mov    esi,0x1
c001384c:	eb db                	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c001384e:	80 fa 6d             	cmp    dl,0x6d
c0013851:	0f 84 ec 02 00 00    	je     c0013b43 <Vm::faultHandler(regs*)+0x3b4>
c0013857:	77 17                	ja     c0013870 <Vm::faultHandler(regs*)+0xe1>
c0013859:	80 fa 67             	cmp    dl,0x67
c001385c:	0f 84 48 01 00 00    	je     c00139aa <Vm::faultHandler(regs*)+0x21b>
c0013862:	80 fa 6c             	cmp    dl,0x6c
c0013865:	0f 84 69 02 00 00    	je     c0013ad4 <Vm::faultHandler(regs*)+0x345>
c001386b:	e9 96 05 00 00       	jmp    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013870:	80 fa 6f             	cmp    dl,0x6f
c0013873:	0f 84 f4 03 00 00    	je     c0013c6d <Vm::faultHandler(regs*)+0x4de>
c0013879:	0f 82 59 03 00 00    	jb     c0013bd8 <Vm::faultHandler(regs*)+0x449>
c001387f:	80 fa 9c             	cmp    dl,0x9c
c0013882:	0f 84 2f 01 00 00    	je     c00139b7 <Vm::faultHandler(regs*)+0x228>
c0013888:	e9 79 05 00 00       	jmp    c0013e06 <Vm::faultHandler(regs*)+0x677>
c001388d:	80 fa ec             	cmp    dl,0xec
c0013890:	0f 84 14 05 00 00    	je     c0013daa <Vm::faultHandler(regs*)+0x61b>
c0013896:	77 7b                	ja     c0013913 <Vm::faultHandler(regs*)+0x184>
c0013898:	80 fa e4             	cmp    dl,0xe4
c001389b:	0f 84 93 04 00 00    	je     c0013d34 <Vm::faultHandler(regs*)+0x5a5>
c00138a1:	77 53                	ja     c00138f6 <Vm::faultHandler(regs*)+0x167>
c00138a3:	80 fa cd             	cmp    dl,0xcd
c00138a6:	0f 84 d9 01 00 00    	je     c0013a85 <Vm::faultHandler(regs*)+0x2f6>
c00138ac:	80 fa cf             	cmp    dl,0xcf
c00138af:	0f 85 51 05 00 00    	jne    c0013e06 <Vm::faultHandler(regs*)+0x677>
c00138b5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00138b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00138bb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00138bf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00138c2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00138c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00138cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00138cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00138d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00138d9:	66 c1 e8 09          	shr    ax,0x9
c00138dd:	83 e0 01             	and    eax,0x1
c00138e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00138e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00138e6:	83 c0 06             	add    eax,0x6
c00138e9:	25 ff ff 00 00       	and    eax,0xffff
c00138ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00138f1:	e9 0c 05 00 00       	jmp    c0013e02 <Vm::faultHandler(regs*)+0x673>
c00138f6:	80 fa e6             	cmp    dl,0xe6
c00138f9:	0f 84 7f 04 00 00    	je     c0013d7e <Vm::faultHandler(regs*)+0x5ef>
c00138ff:	0f 82 4b 04 00 00    	jb     c0013d50 <Vm::faultHandler(regs*)+0x5c1>
c0013905:	80 fa e7             	cmp    dl,0xe7
c0013908:	0f 84 87 04 00 00    	je     c0013d95 <Vm::faultHandler(regs*)+0x606>
c001390e:	e9 f3 04 00 00       	jmp    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013913:	80 fa ef             	cmp    dl,0xef
c0013916:	0f 84 d1 04 00 00    	je     c0013ded <Vm::faultHandler(regs*)+0x65e>
c001391c:	77 28                	ja     c0013946 <Vm::faultHandler(regs*)+0x1b7>
c001391e:	80 fa ed             	cmp    dl,0xed
c0013921:	0f 84 9f 04 00 00    	je     c0013dc6 <Vm::faultHandler(regs*)+0x637>
c0013927:	80 fa ee             	cmp    dl,0xee
c001392a:	0f 85 d6 04 00 00    	jne    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013930:	50                   	push   eax
c0013931:	50                   	push   eax
c0013932:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013936:	50                   	push   eax
c0013937:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001393b:	50                   	push   eax
c001393c:	e8 a3 f9 ff ff       	call   c00132e4 <Vm::outbv(unsigned short, unsigned char)>
c0013941:	e9 9f 04 00 00       	jmp    c0013de5 <Vm::faultHandler(regs*)+0x656>
c0013946:	80 fa fa             	cmp    dl,0xfa
c0013949:	0f 84 69 01 00 00    	je     c0013ab8 <Vm::faultHandler(regs*)+0x329>
c001394f:	80 fa fb             	cmp    dl,0xfb
c0013952:	0f 84 6e 01 00 00    	je     c0013ac6 <Vm::faultHandler(regs*)+0x337>
c0013958:	80 fa f3             	cmp    dl,0xf3
c001395b:	0f 85 a5 04 00 00    	jne    c0013e06 <Vm::faultHandler(regs*)+0x677>
c0013961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013964:	e9 c0 fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c0013969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001396c:	be 02 00 00 00       	mov    esi,0x2
c0013971:	e9 b3 fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c0013976:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013979:	be 03 00 00 00       	mov    esi,0x3
c001397e:	e9 a6 fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c0013983:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013986:	be 04 00 00 00       	mov    esi,0x4
c001398b:	e9 99 fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c0013990:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013993:	be 05 00 00 00       	mov    esi,0x5
c0013998:	e9 8c fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c001399d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139a0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00139a5:	e9 7f fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c00139aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00139ad:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00139b2:	e9 72 fe ff ff       	jmp    c0013829 <Vm::faultHandler(regs*)+0x9a>
c00139b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00139ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00139be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00139c3:	74 30                	je     c00139f5 <Vm::faultHandler(regs*)+0x266>
c00139c5:	83 e9 04             	sub    ecx,0x4
c00139c8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00139ce:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00139d4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00139d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00139da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00139e0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00139e4:	0f 84 15 04 00 00    	je     c0013dff <Vm::faultHandler(regs*)+0x670>
c00139ea:	80 ce 02             	or     dh,0x2
c00139ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00139f0:	e9 0a 04 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c00139f5:	83 e9 02             	sub    ecx,0x2
c00139f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00139fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013a01:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013a05:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013a0b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013a0f:	74 05                	je     c0013a16 <Vm::faultHandler(regs*)+0x287>
c0013a11:	80 ce 02             	or     dh,0x2
c0013a14:	eb 03                	jmp    c0013a19 <Vm::faultHandler(regs*)+0x28a>
c0013a16:	80 e6 fd             	and    dh,0xfd
c0013a19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013a1d:	e9 dd 03 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013a22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013a27:	74 2a                	je     c0013a53 <Vm::faultHandler(regs*)+0x2c4>
c0013a29:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013a31:	81 ca 00 02 02 00    	or     edx,0x20200
c0013a37:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a42:	c1 e8 09             	shr    eax,0x9
c0013a45:	83 e0 01             	and    eax,0x1
c0013a48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a4e:	83 c0 04             	add    eax,0x4
c0013a51:	eb 25                	jmp    c0013a78 <Vm::faultHandler(regs*)+0x2e9>
c0013a53:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013a56:	81 ca 00 02 02 00    	or     edx,0x20200
c0013a5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013a5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013a62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a68:	66 c1 e8 09          	shr    ax,0x9
c0013a6c:	83 e0 01             	and    eax,0x1
c0013a6f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a72:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a75:	83 c0 02             	add    eax,0x2
c0013a78:	25 ff ff 00 00       	and    eax,0xffff
c0013a7d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013a80:	e9 7a 03 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013a85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013a89:	3c ee                	cmp    al,0xee
c0013a8b:	75 10                	jne    c0013a9d <Vm::faultHandler(regs*)+0x30e>
c0013a8d:	83 ec 0c             	sub    esp,0xc
c0013a90:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013a93:	e8 e9 f8 ff ff       	call   c0013381 <Vm::mainloop3(unsigned long)>
c0013a98:	e9 4b 03 00 00       	jmp    c0013de8 <Vm::faultHandler(regs*)+0x659>
c0013a9d:	83 ec 0c             	sub    esp,0xc
c0013aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa8:	51                   	push   ecx
c0013aa9:	50                   	push   eax
c0013aaa:	53                   	push   ebx
c0013aab:	e8 e1 fb ff ff       	call   c0013691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013ab0:	83 c4 20             	add    esp,0x20
c0013ab3:	e9 4a 03 00 00       	jmp    c0013e02 <Vm::faultHandler(regs*)+0x673>
c0013ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013ac1:	e9 39 03 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013acb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013acf:	e9 2b 03 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013ad4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013ad7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013adc:	74 2b                	je     c0013b09 <Vm::faultHandler(regs*)+0x37a>
c0013ade:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013ae5:	76 22                	jbe    c0013b09 <Vm::faultHandler(regs*)+0x37a>
c0013ae7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013aeb:	50                   	push   eax
c0013aec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013af0:	50                   	push   eax
c0013af1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013af5:	50                   	push   eax
c0013af6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013afa:	50                   	push   eax
c0013afb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013aff:	50                   	push   eax
c0013b00:	6a 6c                	push   0x6c
c0013b02:	6a 6c                	push   0x6c
c0013b04:	e9 b9 01 00 00       	jmp    c0013cc2 <Vm::faultHandler(regs*)+0x533>
c0013b09:	83 ec 0c             	sub    esp,0xc
c0013b0c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013b10:	0f b7 f6             	movzx  esi,si
c0013b13:	50                   	push   eax
c0013b14:	e8 b8 f7 ff ff       	call   c00132d1 <Vm::inbv(unsigned short)>
c0013b19:	83 c4 0c             	add    esp,0xc
c0013b1c:	0f b6 c0             	movzx  eax,al
c0013b1f:	50                   	push   eax
c0013b20:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013b24:	50                   	push   eax
c0013b25:	56                   	push   esi
c0013b26:	e8 24 fc ff ff       	call   c001374f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013b35:	74 03                	je     c0013b3a <Vm::faultHandler(regs*)+0x3ab>
c0013b37:	48                   	dec    eax
c0013b38:	eb 01                	jmp    c0013b3b <Vm::faultHandler(regs*)+0x3ac>
c0013b3a:	40                   	inc    eax
c0013b3b:	0f b7 c0             	movzx  eax,ax
c0013b3e:	e9 8d 00 00 00       	jmp    c0013bd0 <Vm::faultHandler(regs*)+0x441>
c0013b43:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013b46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013b4e:	74 29                	je     c0013b79 <Vm::faultHandler(regs*)+0x3ea>
c0013b50:	3d ff ff 00 00       	cmp    eax,0xffff
c0013b55:	76 22                	jbe    c0013b79 <Vm::faultHandler(regs*)+0x3ea>
c0013b57:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013b5b:	50                   	push   eax
c0013b5c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013b60:	50                   	push   eax
c0013b61:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013b65:	50                   	push   eax
c0013b66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013b6a:	50                   	push   eax
c0013b6b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013b6f:	50                   	push   eax
c0013b70:	6a 6d                	push   0x6d
c0013b72:	6a 6d                	push   0x6d
c0013b74:	e9 49 01 00 00       	jmp    c0013cc2 <Vm::faultHandler(regs*)+0x533>
c0013b79:	0f b7 c8             	movzx  ecx,ax
c0013b7c:	0f b7 f6             	movzx  esi,si
c0013b7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013b82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b87:	74 20                	je     c0013ba9 <Vm::faultHandler(regs*)+0x41a>
c0013b89:	ed                   	in     eax,dx
c0013b8a:	55                   	push   ebp
c0013b8b:	50                   	push   eax
c0013b8c:	51                   	push   ecx
c0013b8d:	56                   	push   esi
c0013b8e:	e8 e7 fb ff ff       	call   c001377a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013b93:	83 c4 10             	add    esp,0x10
c0013b96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013b99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013b9d:	74 05                	je     c0013ba4 <Vm::faultHandler(regs*)+0x415>
c0013b9f:	83 e8 04             	sub    eax,0x4
c0013ba2:	eb 27                	jmp    c0013bcb <Vm::faultHandler(regs*)+0x43c>
c0013ba4:	83 c0 04             	add    eax,0x4
c0013ba7:	eb 22                	jmp    c0013bcb <Vm::faultHandler(regs*)+0x43c>
c0013ba9:	66 ed                	in     ax,dx
c0013bab:	0f b7 c0             	movzx  eax,ax
c0013bae:	57                   	push   edi
c0013baf:	50                   	push   eax
c0013bb0:	51                   	push   ecx
c0013bb1:	56                   	push   esi
c0013bb2:	e8 ad fb ff ff       	call   c0013764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013bbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013bc1:	74 05                	je     c0013bc8 <Vm::faultHandler(regs*)+0x439>
c0013bc3:	83 e8 02             	sub    eax,0x2
c0013bc6:	eb 03                	jmp    c0013bcb <Vm::faultHandler(regs*)+0x43c>
c0013bc8:	83 c0 02             	add    eax,0x2
c0013bcb:	25 ff ff 00 00       	and    eax,0xffff
c0013bd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013bd3:	e9 27 02 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013bd8:	8d 46 ff             	lea    eax,[esi-0x1]
c0013bdb:	3c 05                	cmp    al,0x5
c0013bdd:	77 24                	ja     c0013c03 <Vm::faultHandler(regs*)+0x474>
c0013bdf:	0f b6 c0             	movzx  eax,al
c0013be2:	ff 24 85 60 e0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1fa0]
c0013be9:	0f b7 fd             	movzx  edi,bp
c0013bec:	eb 15                	jmp    c0013c03 <Vm::faultHandler(regs*)+0x474>
c0013bee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013bf2:	eb 0f                	jmp    c0013c03 <Vm::faultHandler(regs*)+0x474>
c0013bf4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013bf8:	eb 09                	jmp    c0013c03 <Vm::faultHandler(regs*)+0x474>
c0013bfa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013bfe:	eb 03                	jmp    c0013c03 <Vm::faultHandler(regs*)+0x474>
c0013c00:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013c03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013c06:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c0b:	74 29                	je     c0013c36 <Vm::faultHandler(regs*)+0x4a7>
c0013c0d:	3d ff ff 00 00       	cmp    eax,0xffff
c0013c12:	76 22                	jbe    c0013c36 <Vm::faultHandler(regs*)+0x4a7>
c0013c14:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c18:	50                   	push   eax
c0013c19:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c1d:	50                   	push   eax
c0013c1e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c22:	50                   	push   eax
c0013c23:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c27:	50                   	push   eax
c0013c28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c2c:	50                   	push   eax
c0013c2d:	6a 6e                	push   0x6e
c0013c2f:	6a 6e                	push   0x6e
c0013c31:	e9 8c 00 00 00       	jmp    c0013cc2 <Vm::faultHandler(regs*)+0x533>
c0013c36:	0f b7 c0             	movzx  eax,ax
c0013c39:	52                   	push   edx
c0013c3a:	52                   	push   edx
c0013c3b:	50                   	push   eax
c0013c3c:	57                   	push   edi
c0013c3d:	e8 d9 fa ff ff       	call   c001371b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013c42:	59                   	pop    ecx
c0013c43:	0f b6 c0             	movzx  eax,al
c0013c46:	5e                   	pop    esi
c0013c47:	50                   	push   eax
c0013c48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013c4c:	50                   	push   eax
c0013c4d:	e8 92 f6 ff ff       	call   c00132e4 <Vm::outbv(unsigned short, unsigned char)>
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013c58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c5c:	74 03                	je     c0013c61 <Vm::faultHandler(regs*)+0x4d2>
c0013c5e:	48                   	dec    eax
c0013c5f:	eb 01                	jmp    c0013c62 <Vm::faultHandler(regs*)+0x4d3>
c0013c61:	40                   	inc    eax
c0013c62:	0f b7 c0             	movzx  eax,ax
c0013c65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013c68:	e9 92 01 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013c6d:	8d 46 ff             	lea    eax,[esi-0x1]
c0013c70:	3c 05                	cmp    al,0x5
c0013c72:	77 1f                	ja     c0013c93 <Vm::faultHandler(regs*)+0x504>
c0013c74:	0f b6 c0             	movzx  eax,al
c0013c77:	ff 24 85 78 e0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1f88]
c0013c7e:	89 ef                	mov    edi,ebp
c0013c80:	eb 11                	jmp    c0013c93 <Vm::faultHandler(regs*)+0x504>
c0013c82:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013c85:	eb 0c                	jmp    c0013c93 <Vm::faultHandler(regs*)+0x504>
c0013c87:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013c8a:	eb 07                	jmp    c0013c93 <Vm::faultHandler(regs*)+0x504>
c0013c8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013c8f:	eb 02                	jmp    c0013c93 <Vm::faultHandler(regs*)+0x504>
c0013c91:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013c93:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013c96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c9b:	74 37                	je     c0013cd4 <Vm::faultHandler(regs*)+0x545>
c0013c9d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013ca3:	76 2f                	jbe    c0013cd4 <Vm::faultHandler(regs*)+0x545>
c0013ca5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013ca9:	50                   	push   eax
c0013caa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013cae:	50                   	push   eax
c0013caf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013cb3:	50                   	push   eax
c0013cb4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013cb8:	50                   	push   eax
c0013cb9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013cbd:	50                   	push   eax
c0013cbe:	6a 6f                	push   0x6f
c0013cc0:	6a 6f                	push   0x6f
c0013cc2:	68 06 e0 01 c0       	push   0xc001e006
c0013cc7:	e8 24 5c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013ccc:	83 c4 20             	add    esp,0x20
c0013ccf:	e9 86 01 00 00       	jmp    c0013e5a <Vm::faultHandler(regs*)+0x6cb>
c0013cd4:	0f b7 d7             	movzx  edx,di
c0013cd7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013cda:	0f b7 c6             	movzx  eax,si
c0013cdd:	81 e1 00 04 00 00    	and    ecx,0x400
c0013ce3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013ce6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ceb:	74 1d                	je     c0013d0a <Vm::faultHandler(regs*)+0x57b>
c0013ced:	55                   	push   ebp
c0013cee:	55                   	push   ebp
c0013cef:	50                   	push   eax
c0013cf0:	52                   	push   edx
c0013cf1:	e8 48 fa ff ff       	call   c001373e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	89 fa                	mov    edx,edi
c0013cfb:	ef                   	out    dx,eax
c0013cfc:	85 c9                	test   ecx,ecx
c0013cfe:	74 05                	je     c0013d05 <Vm::faultHandler(regs*)+0x576>
c0013d00:	83 ee 04             	sub    esi,0x4
c0013d03:	eb 21                	jmp    c0013d26 <Vm::faultHandler(regs*)+0x597>
c0013d05:	83 c6 04             	add    esi,0x4
c0013d08:	eb 1c                	jmp    c0013d26 <Vm::faultHandler(regs*)+0x597>
c0013d0a:	55                   	push   ebp
c0013d0b:	55                   	push   ebp
c0013d0c:	50                   	push   eax
c0013d0d:	52                   	push   edx
c0013d0e:	e8 19 fa ff ff       	call   c001372c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	89 fa                	mov    edx,edi
c0013d18:	66 ef                	out    dx,ax
c0013d1a:	85 c9                	test   ecx,ecx
c0013d1c:	74 05                	je     c0013d23 <Vm::faultHandler(regs*)+0x594>
c0013d1e:	83 ee 02             	sub    esi,0x2
c0013d21:	eb 03                	jmp    c0013d26 <Vm::faultHandler(regs*)+0x597>
c0013d23:	83 c6 02             	add    esi,0x2
c0013d26:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013d2c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013d2f:	e9 cb 00 00 00       	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013d34:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013d3b:	83 ec 0c             	sub    esp,0xc
c0013d3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d42:	50                   	push   eax
c0013d43:	e8 89 f5 ff ff       	call   c00132d1 <Vm::inbv(unsigned short)>
c0013d48:	0f b6 c0             	movzx  eax,al
c0013d4b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013d4e:	eb 3f                	jmp    c0013d8f <Vm::faultHandler(regs*)+0x600>
c0013d50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013d55:	74 07                	je     c0013d5e <Vm::faultHandler(regs*)+0x5cf>
c0013d57:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d5b:	ed                   	in     eax,dx
c0013d5c:	eb 14                	jmp    c0013d72 <Vm::faultHandler(regs*)+0x5e3>
c0013d5e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013d61:	66 31 f6             	xor    si,si
c0013d64:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013d67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d6b:	66 ed                	in     ax,dx
c0013d6d:	0f b7 c0             	movzx  eax,ax
c0013d70:	09 f0                	or     eax,esi
c0013d72:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013d75:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013d79:	e9 84 00 00 00       	jmp    c0013e02 <Vm::faultHandler(regs*)+0x673>
c0013d7e:	52                   	push   edx
c0013d7f:	52                   	push   edx
c0013d80:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013d84:	50                   	push   eax
c0013d85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d89:	50                   	push   eax
c0013d8a:	e8 55 f5 ff ff       	call   c00132e4 <Vm::outbv(unsigned short, unsigned char)>
c0013d8f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013d93:	eb 53                	jmp    c0013de8 <Vm::faultHandler(regs*)+0x659>
c0013d95:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013d98:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013d9c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013da1:	74 03                	je     c0013da6 <Vm::faultHandler(regs*)+0x617>
c0013da3:	ef                   	out    dx,eax
c0013da4:	eb cf                	jmp    c0013d75 <Vm::faultHandler(regs*)+0x5e6>
c0013da6:	66 ef                	out    dx,ax
c0013da8:	eb cb                	jmp    c0013d75 <Vm::faultHandler(regs*)+0x5e6>
c0013daa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013db1:	83 ec 0c             	sub    esp,0xc
c0013db4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013db8:	50                   	push   eax
c0013db9:	e8 13 f5 ff ff       	call   c00132d1 <Vm::inbv(unsigned short)>
c0013dbe:	0f b6 c0             	movzx  eax,al
c0013dc1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013dc4:	eb 1f                	jmp    c0013de5 <Vm::faultHandler(regs*)+0x656>
c0013dc6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013dc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013dce:	74 03                	je     c0013dd3 <Vm::faultHandler(regs*)+0x644>
c0013dd0:	ed                   	in     eax,dx
c0013dd1:	eb 0d                	jmp    c0013de0 <Vm::faultHandler(regs*)+0x651>
c0013dd3:	66 ed                	in     ax,dx
c0013dd5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013dd8:	0f b7 c0             	movzx  eax,ax
c0013ddb:	66 31 d2             	xor    dx,dx
c0013dde:	09 d0                	or     eax,edx
c0013de0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013de3:	eb 1a                	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013de5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	eb 15                	jmp    c0013e02 <Vm::faultHandler(regs*)+0x673>
c0013ded:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013df0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013df3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013df8:	74 03                	je     c0013dfd <Vm::faultHandler(regs*)+0x66e>
c0013dfa:	ef                   	out    dx,eax
c0013dfb:	eb 02                	jmp    c0013dff <Vm::faultHandler(regs*)+0x670>
c0013dfd:	66 ef                	out    dx,ax
c0013dff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013e02:	b0 01                	mov    al,0x1
c0013e04:	eb 56                	jmp    c0013e5c <Vm::faultHandler(regs*)+0x6cd>
c0013e06:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013e0a:	50                   	push   eax
c0013e0b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e0f:	50                   	push   eax
c0013e10:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e14:	50                   	push   eax
c0013e15:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e19:	50                   	push   eax
c0013e1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e1e:	50                   	push   eax
c0013e1f:	52                   	push   edx
c0013e20:	52                   	push   edx
c0013e21:	68 33 e0 01 c0       	push   0xc001e033
c0013e26:	e8 c5 5a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013e2b:	83 c4 20             	add    esp,0x20
c0013e2e:	83 ec 0c             	sub    esp,0xc
c0013e31:	6a 60                	push   0x60
c0013e33:	e8 99 f4 ff ff       	call   c00132d1 <Vm::inbv(unsigned short)>
c0013e38:	83 c4 10             	add    esp,0x10
c0013e3b:	3c 1c                	cmp    al,0x1c
c0013e3d:	74 04                	je     c0013e43 <Vm::faultHandler(regs*)+0x6b4>
c0013e3f:	3c 5a                	cmp    al,0x5a
c0013e41:	75 eb                	jne    c0013e2e <Vm::faultHandler(regs*)+0x69f>
c0013e43:	3c 5a                	cmp    al,0x5a
c0013e45:	74 04                	je     c0013e4b <Vm::faultHandler(regs*)+0x6bc>
c0013e47:	3c 1c                	cmp    al,0x1c
c0013e49:	75 0f                	jne    c0013e5a <Vm::faultHandler(regs*)+0x6cb>
c0013e4b:	83 ec 0c             	sub    esp,0xc
c0013e4e:	6a 60                	push   0x60
c0013e50:	e8 7c f4 ff ff       	call   c00132d1 <Vm::inbv(unsigned short)>
c0013e55:	83 c4 10             	add    esp,0x10
c0013e58:	eb e9                	jmp    c0013e43 <Vm::faultHandler(regs*)+0x6b4>
c0013e5a:	31 c0                	xor    eax,eax
c0013e5c:	83 c4 1c             	add    esp,0x1c
c0013e5f:	5b                   	pop    ebx
c0013e60:	5e                   	pop    esi
c0013e61:	5f                   	pop    edi
c0013e62:	5d                   	pop    ebp
c0013e63:	c3                   	ret    

c0013e64 <noCopro(unsigned long)>:
c0013e64:	c3                   	ret    

c0013e65 <nmiHandler(regs*, void*)>:
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0013e6d:	83 ec 0c             	sub    esp,0xc
c0013e70:	50                   	push   eax
c0013e71:	e8 cc 24 ff ff       	call   c0006342 <Computer::handleNMI()>
c0013e76:	83 c4 10             	add    esp,0x10
c0013e79:	90                   	nop
c0013e7a:	83 c4 0c             	add    esp,0xc
c0013e7d:	c3                   	ret    

c0013e7e <doubleFault(regs*, void*)>:
c0013e7e:	55                   	push   ebp
c0013e7f:	89 e5                	mov    ebp,esp
c0013e81:	83 ec 08             	sub    esp,0x8
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 90 e0 01 c0       	push   0xc001e090
c0013e8c:	e8 ae b5 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	90                   	nop
c0013e95:	c9                   	leave  
c0013e96:	c3                   	ret    

c0013e97 <displayDebugInfo(regs*)>:
c0013e97:	83 ec 1c             	sub    esp,0x1c
c0013e9a:	0f 20 c0             	mov    eax,cr0
c0013e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ea1:	0f 20 d0             	mov    eax,cr2
c0013ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ea8:	0f 20 d8             	mov    eax,cr3
c0013eab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013eaf:	0f 20 e0             	mov    eax,cr4
c0013eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0013ebc:	83 ec 08             	sub    esp,0x8
c0013ebf:	50                   	push   eax
c0013ec0:	68 ac e0 01 c0       	push   0xc001e0ac
c0013ec5:	e8 26 5a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0013ed4:	83 ec 08             	sub    esp,0x8
c0013ed7:	50                   	push   eax
c0013ed8:	68 9d e0 01 c0       	push   0xc001e09d
c0013edd:	e8 0e 5a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0013eec:	83 ec 08             	sub    esp,0x8
c0013eef:	50                   	push   eax
c0013ef0:	68 a8 e0 01 c0       	push   0xc001e0a8
c0013ef5:	e8 f6 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0013f04:	83 ec 08             	sub    esp,0x8
c0013f07:	50                   	push   eax
c0013f08:	68 b7 e0 01 c0       	push   0xc001e0b7
c0013f0d:	e8 de 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f19:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0013f1c:	83 ec 08             	sub    esp,0x8
c0013f1f:	50                   	push   eax
c0013f20:	68 c2 e0 01 c0       	push   0xc001e0c2
c0013f25:	e8 c6 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	83 ec 08             	sub    esp,0x8
c0013f30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013f34:	68 cd e0 01 c0       	push   0xc001e0cd
c0013f39:	e8 b2 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013f3e:	83 c4 10             	add    esp,0x10
c0013f41:	83 ec 08             	sub    esp,0x8
c0013f44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013f48:	68 d8 e0 01 c0       	push   0xc001e0d8
c0013f4d:	e8 9e 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013f5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f60:	83 ec 0c             	sub    esp,0xc
c0013f63:	50                   	push   eax
c0013f64:	e8 28 39 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c0013f69:	83 c4 10             	add    esp,0x10
c0013f6c:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013f71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f77:	83 ec 08             	sub    esp,0x8
c0013f7a:	68 e3 e0 01 c0       	push   0xc001e0e3
c0013f7f:	50                   	push   eax
c0013f80:	e8 4b 3c ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0013f85:	83 c4 10             	add    esp,0x10
c0013f88:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013f8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f93:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0013f98:	8b 12                	mov    edx,DWORD PTR [edx]
c0013f9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013f9d:	83 c2 0c             	add    edx,0xc
c0013fa0:	83 ec 08             	sub    esp,0x8
c0013fa3:	52                   	push   edx
c0013fa4:	50                   	push   eax
c0013fa5:	e8 26 3c ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fb8:	83 ec 08             	sub    esp,0x8
c0013fbb:	68 ec e0 01 c0       	push   0xc001e0ec
c0013fc0:	50                   	push   eax
c0013fc1:	e8 0a 3c ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0013fc6:	83 c4 10             	add    esp,0x10
c0013fc9:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013fce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fd8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0013fdb:	83 ec 08             	sub    esp,0x8
c0013fde:	52                   	push   edx
c0013fdf:	50                   	push   eax
c0013fe0:	e8 a5 3b ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0013fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013ff3:	83 ec 08             	sub    esp,0x8
c0013ff6:	68 f4 e0 01 c0       	push   0xc001e0f4
c0013ffb:	50                   	push   eax
c0013ffc:	e8 cf 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014009:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001400f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014013:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014016:	83 ec 08             	sub    esp,0x8
c0014019:	52                   	push   edx
c001401a:	50                   	push   eax
c001401b:	e8 6a 3b ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014028:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001402e:	83 ec 08             	sub    esp,0x8
c0014031:	68 fc e0 01 c0       	push   0xc001e0fc
c0014036:	50                   	push   eax
c0014037:	e8 94 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001403c:	83 c4 10             	add    esp,0x10
c001403f:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014044:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001404a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001404e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014051:	83 ec 08             	sub    esp,0x8
c0014054:	52                   	push   edx
c0014055:	50                   	push   eax
c0014056:	e8 2f 3b ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014063:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014069:	83 ec 08             	sub    esp,0x8
c001406c:	68 04 e1 01 c0       	push   0xc001e104
c0014071:	50                   	push   eax
c0014072:	e8 59 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c001407f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014089:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001408c:	83 ec 08             	sub    esp,0x8
c001408f:	52                   	push   edx
c0014090:	50                   	push   eax
c0014091:	e8 f4 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c001409e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140a4:	83 ec 08             	sub    esp,0x8
c00140a7:	68 0c e1 01 c0       	push   0xc001e10c
c00140ac:	50                   	push   eax
c00140ad:	e8 1e 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c00140ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140c4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00140c7:	83 ec 08             	sub    esp,0x8
c00140ca:	52                   	push   edx
c00140cb:	50                   	push   eax
c00140cc:	e8 b9 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c00140d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	68 14 e1 01 c0       	push   0xc001e114
c00140e7:	50                   	push   eax
c00140e8:	e8 e3 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c00140f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140ff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014102:	83 ec 08             	sub    esp,0x8
c0014105:	52                   	push   edx
c0014106:	50                   	push   eax
c0014107:	e8 7e 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014114:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001411a:	83 ec 08             	sub    esp,0x8
c001411d:	68 1c e1 01 c0       	push   0xc001e11c
c0014122:	50                   	push   eax
c0014123:	e8 a8 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014128:	83 c4 10             	add    esp,0x10
c001412b:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014130:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014136:	83 ec 08             	sub    esp,0x8
c0014139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001413d:	50                   	push   eax
c001413e:	e8 47 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c001414b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014151:	83 ec 08             	sub    esp,0x8
c0014154:	68 25 e1 01 c0       	push   0xc001e125
c0014159:	50                   	push   eax
c001415a:	e8 71 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014167:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001416d:	83 ec 08             	sub    esp,0x8
c0014170:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014174:	50                   	push   eax
c0014175:	e8 10 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c0014182:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014188:	83 ec 08             	sub    esp,0x8
c001418b:	68 2d e1 01 c0       	push   0xc001e12d
c0014190:	50                   	push   eax
c0014191:	e8 3a 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014196:	83 c4 10             	add    esp,0x10
c0014199:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c001419e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141a4:	83 ec 08             	sub    esp,0x8
c00141a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00141ab:	50                   	push   eax
c00141ac:	e8 d9 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00141b1:	83 c4 10             	add    esp,0x10
c00141b4:	fa                   	cli    
c00141b5:	f4                   	hlt    
c00141b6:	eb fe                	jmp    c00141b6 <displayDebugInfo(regs*)+0x31f>

c00141b8 <displayProgramFault(char const*)>:
c00141b8:	83 ec 0c             	sub    esp,0xc
c00141bb:	83 ec 0c             	sub    esp,0xc
c00141be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c2:	e8 29 57 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00141cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00141d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141da:	85 c0                	test   eax,eax
c00141dc:	74 21                	je     c00141ff <displayProgramFault(char const*)+0x47>
c00141de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00141e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00141e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141ee:	6a 04                	push   0x4
c00141f0:	6a 0f                	push   0xf
c00141f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141f6:	50                   	push   eax
c00141f7:	e8 46 3a ff ff       	call   c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	90                   	nop
c0014200:	83 c4 0c             	add    esp,0xc
c0014203:	c3                   	ret    

c0014204 <gpFault(regs*, void*)>:
c0014204:	83 ec 1c             	sub    esp,0x1c
c0014207:	c7 05 10 28 02 c0 8f 37 01 c0 	mov    DWORD PTR ds:0xc0022810,0xc001378f
c0014211:	a1 10 28 02 c0       	mov    eax,ds:0xc0022810
c0014216:	85 c0                	test   eax,eax
c0014218:	74 1c                	je     c0014236 <gpFault(regs*, void*)+0x32>
c001421a:	a1 10 28 02 c0       	mov    eax,ds:0xc0022810
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014226:	ff d0                	call   eax
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001422f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014234:	75 2e                	jne    c0014264 <gpFault(regs*, void*)+0x60>
c0014236:	83 ec 0c             	sub    esp,0xc
c0014239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001423d:	e8 55 fc ff ff       	call   c0013e97 <displayDebugInfo(regs*)>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	83 ec 0c             	sub    esp,0xc
c0014248:	68 35 e1 01 c0       	push   0xc001e135
c001424d:	e8 66 ff ff ff       	call   c00141b8 <displayProgramFault(char const*)>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	83 ec 0c             	sub    esp,0xc
c0014258:	6a 00                	push   0x0
c001425a:	e8 25 ef ff ff       	call   c0013184 <Thr::terminateFromIRQ(int)>
c001425f:	83 c4 10             	add    esp,0x10
c0014262:	eb 01                	jmp    c0014265 <gpFault(regs*, void*)+0x61>
c0014264:	90                   	nop
c0014265:	83 c4 1c             	add    esp,0x1c
c0014268:	c3                   	ret    

c0014269 <pgFault(regs*, void*)>:
c0014269:	83 ec 1c             	sub    esp,0x1c
c001426c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014270:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014273:	0f 20 d0             	mov    eax,cr2
c0014276:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001427e:	83 ec 04             	sub    esp,0x4
c0014281:	52                   	push   edx
c0014282:	50                   	push   eax
c0014283:	68 a0 e1 01 c0       	push   0xc001e1a0
c0014288:	e8 63 56 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014295:	8b 00                	mov    eax,DWORD PTR [eax]
c0014297:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001429a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00142a0:	0f 20 d2             	mov    edx,cr2
c00142a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00142a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00142ab:	83 ec 08             	sub    esp,0x8
c00142ae:	52                   	push   edx
c00142af:	50                   	push   eax
c00142b0:	e8 6d 52 ff ff       	call   c0009522 <VAS::tryLoadBackOffDisk(unsigned long)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	84 c0                	test   al,al
c00142ba:	75 2e                	jne    c00142ea <pgFault(regs*, void*)+0x81>
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142c3:	e8 cf fb ff ff       	call   c0013e97 <displayDebugInfo(regs*)>
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	83 ec 0c             	sub    esp,0xc
c00142ce:	68 4e e1 01 c0       	push   0xc001e14e
c00142d3:	e8 e0 fe ff ff       	call   c00141b8 <displayProgramFault(char const*)>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	83 ec 0c             	sub    esp,0xc
c00142de:	6a 00                	push   0x0
c00142e0:	e8 9f ee ff ff       	call   c0013184 <Thr::terminateFromIRQ(int)>
c00142e5:	83 c4 10             	add    esp,0x10
c00142e8:	eb 01                	jmp    c00142eb <pgFault(regs*, void*)+0x82>
c00142ea:	90                   	nop
c00142eb:	83 c4 1c             	add    esp,0x1c
c00142ee:	c3                   	ret    

c00142ef <otherISRHandler(regs*, void*)>:
c00142ef:	83 ec 0c             	sub    esp,0xc
c00142f2:	83 ec 0c             	sub    esp,0xc
c00142f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142f9:	e8 99 fb ff ff       	call   c0013e97 <displayDebugInfo(regs*)>
c00142fe:	83 c4 10             	add    esp,0x10
c0014301:	83 ec 0c             	sub    esp,0xc
c0014304:	68 c8 e1 01 c0       	push   0xc001e1c8
c0014309:	e8 aa fe ff ff       	call   c00141b8 <displayProgramFault(char const*)>
c001430e:	83 c4 10             	add    esp,0x10
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	6a 00                	push   0x0
c0014316:	e8 69 ee ff ff       	call   c0013184 <Thr::terminateFromIRQ(int)>
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	90                   	nop
c001431f:	83 c4 0c             	add    esp,0xc
c0014322:	c3                   	ret    

c0014323 <opcodeFault(regs*, void*)>:
c0014323:	55                   	push   ebp
c0014324:	89 e5                	mov    ebp,esp
c0014326:	83 ec 08             	sub    esp,0x8
c0014329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001432c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001432f:	83 ec 08             	sub    esp,0x8
c0014332:	50                   	push   eax
c0014333:	68 59 e1 01 c0       	push   0xc001e159
c0014338:	e8 b3 55 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0014345:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001434b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014351:	84 c0                	test   al,al
c0014353:	74 21                	je     c0014376 <opcodeFault(regs*, void*)+0x53>
c0014355:	83 ec 0c             	sub    esp,0xc
c0014358:	68 f0 e1 01 c0       	push   0xc001e1f0
c001435d:	e8 8e 55 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014362:	83 c4 10             	add    esp,0x10
c0014365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014368:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001436b:	8d 50 19             	lea    edx,[eax+0x19]
c001436e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014371:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014374:	eb 2b                	jmp    c00143a1 <opcodeFault(regs*, void*)+0x7e>
c0014376:	83 ec 0c             	sub    esp,0xc
c0014379:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001437c:	e8 16 fb ff ff       	call   c0013e97 <displayDebugInfo(regs*)>
c0014381:	83 c4 10             	add    esp,0x10
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	68 67 e1 01 c0       	push   0xc001e167
c001438c:	e8 27 fe ff ff       	call   c00141b8 <displayProgramFault(char const*)>
c0014391:	83 c4 10             	add    esp,0x10
c0014394:	83 ec 0c             	sub    esp,0xc
c0014397:	6a 00                	push   0x0
c0014399:	e8 e6 ed ff ff       	call   c0013184 <Thr::terminateFromIRQ(int)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	c9                   	leave  
c00143a2:	c3                   	ret    

c00143a3 <i386SaveCoprocessor(void*)>:
c00143a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143a7:	83 c0 3f             	add    eax,0x3f
c00143aa:	83 e0 c0             	and    eax,0xffffffc0
c00143ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143b1:	ff 25 0c 28 02 c0    	jmp    DWORD PTR ds:0xc002280c

c00143b7 <i386LoadCoprocessor(void*)>:
c00143b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143bb:	83 c0 3f             	add    eax,0x3f
c00143be:	83 e0 c0             	and    eax,0xffffffc0
c00143c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143c5:	ff 25 08 28 02 c0    	jmp    DWORD PTR ds:0xc0022808

c00143cb <x87EmulHandler(regs*, void*)>:
c00143cb:	53                   	push   ebx
c00143cc:	83 ec 08             	sub    esp,0x8
c00143cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00143d8:	74 10                	je     c00143ea <x87EmulHandler(regs*, void*)+0x1f>
c00143da:	83 ec 0c             	sub    esp,0xc
c00143dd:	68 74 e1 01 c0       	push   0xc001e174
c00143e2:	e8 58 b0 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00143e7:	83 c4 10             	add    esp,0x10
c00143ea:	0f 20 c0             	mov    eax,cr0
c00143ed:	a8 08                	test   al,0x8
c00143ef:	74 59                	je     c001444a <x87EmulHandler(regs*, void*)+0x7f>
c00143f1:	0f 06                	clts   
c00143f3:	a1 04 28 02 c0       	mov    eax,ds:0xc0022804
c00143f8:	85 c0                	test   eax,eax
c00143fa:	74 0e                	je     c001440a <x87EmulHandler(regs*, void*)+0x3f>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014402:	e8 9c ff ff ff       	call   c00143a3 <i386SaveCoprocessor(void*)>
c0014407:	83 c4 10             	add    esp,0x10
c001440a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014410:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014414:	75 12                	jne    c0014428 <x87EmulHandler(regs*, void*)+0x5d>
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	68 40 02 00 00       	push   0x240
c001441e:	e8 3e 27 ff ff       	call   c0006b61 <malloc>
c0014423:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0014426:	eb 10                	jmp    c0014438 <x87EmulHandler(regs*, void*)+0x6d>
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	a1 04 28 02 c0       	mov    eax,ds:0xc0022804
c0014430:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014433:	e8 7f ff ff ff       	call   c00143b7 <i386LoadCoprocessor(void*)>
c0014438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001443d:	83 c4 10             	add    esp,0x10
c0014440:	a3 04 28 02 c0       	mov    ds:0xc0022804,eax
c0014445:	83 c4 08             	add    esp,0x8
c0014448:	5b                   	pop    ebx
c0014449:	c3                   	ret    
c001444a:	83 ec 0c             	sub    esp,0xc
c001444d:	68 88 e1 01 c0       	push   0xc001e188
c0014452:	e8 99 54 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014457:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001445f:	83 c4 18             	add    esp,0x18
c0014462:	5b                   	pop    ebx
c0014463:	e9 1c ed ff ff       	jmp    c0013184 <Thr::terminateFromIRQ(int)>

c0014468 <HalInitialiseCoprocessor()>:
c0014468:	83 ec 10             	sub    esp,0x10
c001446b:	c7 05 04 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022804,0x0
c0014475:	6a 00                	push   0x0
c0014477:	68 cb 43 01 c0       	push   0xc00143cb
c001447c:	6a 07                	push   0x7
c001447e:	e8 e1 6d ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014483:	e8 b8 6a 00 00       	call   c001af40 <avxDetect>
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	85 c0                	test   eax,eax
c001448d:	74 1c                	je     c00144ab <HalInitialiseCoprocessor()+0x43>
c001448f:	c7 05 0c 28 02 c0 6a af 01 c0 	mov    DWORD PTR ds:0xc002280c,0xc001af6a
c0014499:	c7 05 08 28 02 c0 7b af 01 c0 	mov    DWORD PTR ds:0xc0022808,0xc001af7b
c00144a3:	83 c4 0c             	add    esp,0xc
c00144a6:	e9 e1 6a 00 00       	jmp    c001af8c <avxInit>
c00144ab:	e8 10 6d 00 00       	call   c001b1c0 <absolutelyNoChanceInHell>
c00144b0:	85 c0                	test   eax,eax
c00144b2:	74 1c                	je     c00144d0 <HalInitialiseCoprocessor()+0x68>
c00144b4:	c7 05 0c 28 02 c0 d8 b1 01 c0 	mov    DWORD PTR ds:0xc002280c,0xc001b1d8
c00144be:	c7 05 08 28 02 c0 e0 b1 01 c0 	mov    DWORD PTR ds:0xc0022808,0xc001b1e0
c00144c8:	83 c4 0c             	add    esp,0xc
c00144cb:	e9 18 6d 00 00       	jmp    c001b1e8 <sseInit>
c00144d0:	e8 31 6d 00 00       	call   c001b206 <x87Detect>
c00144d5:	85 c0                	test   eax,eax
c00144d7:	74 1c                	je     c00144f5 <HalInitialiseCoprocessor()+0x8d>
c00144d9:	c7 05 0c 28 02 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc002280c,0xc001b221
c00144e3:	c7 05 08 28 02 c0 28 b2 01 c0 	mov    DWORD PTR ds:0xc0022808,0xc001b228
c00144ed:	83 c4 0c             	add    esp,0xc
c00144f0:	e9 3a 6d 00 00       	jmp    c001b22f <x87Init>
c00144f5:	c7 05 0c 28 02 c0 64 3e 01 c0 	mov    DWORD PTR ds:0xc002280c,0xc0013e64
c00144ff:	c7 05 08 28 02 c0 64 3e 01 c0 	mov    DWORD PTR ds:0xc0022808,0xc0013e64
c0014509:	0f 20 c0             	mov    eax,cr0
c001450c:	83 c8 04             	or     eax,0x4
c001450f:	0f 22 c0             	mov    cr0,eax
c0014512:	83 c4 0c             	add    esp,0xc
c0014515:	c3                   	ret    

c0014516 <HalPanic(char const*)>:
c0014516:	e9 24 af ff ff       	jmp    c000f43f <Krnl::panic(char const*)>

c001451b <HalQueryPerformanceCounter()>:
c001451b:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0014520:	31 d2                	xor    edx,edx
c0014522:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0014528:	31 c0                	xor    eax,eax
c001452a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0014531:	74 02                	je     c0014535 <HalQueryPerformanceCounter()+0x1a>
c0014533:	0f 31                	rdtsc  
c0014535:	c3                   	ret    

c0014536 <HalInitialise()>:
c0014536:	53                   	push   ebx
c0014537:	83 ec 08             	sub    esp,0x8
c001453a:	e8 58 6f ff ff       	call   c000b497 <setupINTS()>
c001453f:	80 3d 60 1b 02 c0 00 	cmp    BYTE PTR ds:0xc0021b60,0x0
c0014546:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001454b:	75 07                	jne    c0014554 <HalInitialise()+0x1e>
c001454d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0014554:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001455a:	83 e0 01             	and    eax,0x1
c001455d:	a2 00 28 02 c0       	mov    ds:0xc0022800,al
c0014562:	e8 a9 02 00 00       	call   c0014810 <picOpen()>
c0014567:	80 3d 00 28 02 c0 00 	cmp    BYTE PTR ds:0xc0022800,0x0
c001456e:	74 0a                	je     c001457a <HalInitialise()+0x44>
c0014570:	e8 e3 01 00 00       	call   c0014758 <picDisable()>
c0014575:	e8 36 63 00 00       	call   c001a8b0 <apicOpen()>
c001457a:	bb 0f 00 00 00       	mov    ebx,0xf
c001457f:	50                   	push   eax
c0014580:	6a 00                	push   0x0
c0014582:	68 ef 42 01 c0       	push   0xc00142ef
c0014587:	6a 00                	push   0x0
c0014589:	e8 d6 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001458e:	83 c4 0c             	add    esp,0xc
c0014591:	6a 00                	push   0x0
c0014593:	68 ef 42 01 c0       	push   0xc00142ef
c0014598:	6a 01                	push   0x1
c001459a:	e8 c5 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001459f:	83 c4 0c             	add    esp,0xc
c00145a2:	6a 00                	push   0x0
c00145a4:	68 65 3e 01 c0       	push   0xc0013e65
c00145a9:	6a 02                	push   0x2
c00145ab:	e8 b4 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145b0:	83 c4 0c             	add    esp,0xc
c00145b3:	6a 00                	push   0x0
c00145b5:	68 ef 42 01 c0       	push   0xc00142ef
c00145ba:	6a 03                	push   0x3
c00145bc:	e8 a3 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145c1:	83 c4 0c             	add    esp,0xc
c00145c4:	6a 00                	push   0x0
c00145c6:	68 ef 42 01 c0       	push   0xc00142ef
c00145cb:	6a 04                	push   0x4
c00145cd:	e8 92 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145d2:	83 c4 0c             	add    esp,0xc
c00145d5:	6a 00                	push   0x0
c00145d7:	68 ef 42 01 c0       	push   0xc00142ef
c00145dc:	6a 05                	push   0x5
c00145de:	e8 81 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145e3:	83 c4 0c             	add    esp,0xc
c00145e6:	6a 00                	push   0x0
c00145e8:	68 23 43 01 c0       	push   0xc0014323
c00145ed:	6a 06                	push   0x6
c00145ef:	e8 70 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145f4:	83 c4 0c             	add    esp,0xc
c00145f7:	6a 00                	push   0x0
c00145f9:	68 7e 3e 01 c0       	push   0xc0013e7e
c00145fe:	6a 08                	push   0x8
c0014600:	e8 5f 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014605:	83 c4 0c             	add    esp,0xc
c0014608:	6a 00                	push   0x0
c001460a:	68 ef 42 01 c0       	push   0xc00142ef
c001460f:	6a 09                	push   0x9
c0014611:	e8 4e 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014616:	83 c4 0c             	add    esp,0xc
c0014619:	6a 00                	push   0x0
c001461b:	68 ef 42 01 c0       	push   0xc00142ef
c0014620:	6a 0a                	push   0xa
c0014622:	e8 3d 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014627:	83 c4 0c             	add    esp,0xc
c001462a:	6a 00                	push   0x0
c001462c:	68 ef 42 01 c0       	push   0xc00142ef
c0014631:	6a 0b                	push   0xb
c0014633:	e8 2c 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014638:	83 c4 0c             	add    esp,0xc
c001463b:	6a 00                	push   0x0
c001463d:	68 04 42 01 c0       	push   0xc0014204
c0014642:	6a 0d                	push   0xd
c0014644:	e8 1b 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014649:	83 c4 0c             	add    esp,0xc
c001464c:	6a 00                	push   0x0
c001464e:	68 69 42 01 c0       	push   0xc0014269
c0014653:	6a 0e                	push   0xe
c0014655:	e8 0a 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001465a:	83 c4 10             	add    esp,0x10
c001465d:	50                   	push   eax
c001465e:	6a 00                	push   0x0
c0014660:	68 ef 42 01 c0       	push   0xc00142ef
c0014665:	53                   	push   ebx
c0014666:	43                   	inc    ebx
c0014667:	e8 f8 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	83 fb 1e             	cmp    ebx,0x1e
c0014672:	75 e9                	jne    c001465d <HalInitialise()+0x127>
c0014674:	50                   	push   eax
c0014675:	6a 00                	push   0x0
c0014677:	68 e5 0d 01 c0       	push   0xc0010de5
c001467c:	6a 60                	push   0x60
c001467e:	e8 e1 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014683:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0014688:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014692:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0014699:	e8 c3 24 ff ff       	call   c0006b61 <malloc>
c001469e:	89 04 24             	mov    DWORD PTR [esp],eax
c00146a1:	89 c3                	mov    ebx,eax
c00146a3:	e8 30 09 00 00       	call   c0014fd8 <RTC::RTC()>
c00146a8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00146b2:	5a                   	pop    edx
c00146b3:	59                   	pop    ecx
c00146b4:	53                   	push   ebx
c00146b5:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c00146bb:	e8 70 66 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c00146c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c2:	6a 00                	push   0x0
c00146c4:	6a 00                	push   0x0
c00146c6:	6a 00                	push   0x0
c00146c8:	53                   	push   ebx
c00146c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146cc:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c00146d1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00146d7:	83 c4 28             	add    esp,0x28
c00146da:	5b                   	pop    ebx
c00146db:	c3                   	ret    

c00146dc <HalMakeBeep(int)>:
c00146dc:	53                   	push   ebx
c00146dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00146e1:	85 db                	test   ebx,ebx
c00146e3:	75 07                	jne    c00146ec <HalMakeBeep(int)+0x10>
c00146e5:	e4 61                	in     al,0x61
c00146e7:	83 e0 fc             	and    eax,0xfffffffc
c00146ea:	eb 26                	jmp    c0014712 <HalMakeBeep(int)+0x36>
c00146ec:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00146f1:	99                   	cdq    
c00146f2:	f7 fb                	idiv   ebx
c00146f4:	89 c1                	mov    ecx,eax
c00146f6:	b0 b6                	mov    al,0xb6
c00146f8:	e6 43                	out    0x43,al
c00146fa:	88 c8                	mov    al,cl
c00146fc:	e6 42                	out    0x42,al
c00146fe:	89 c8                	mov    eax,ecx
c0014700:	c1 e8 08             	shr    eax,0x8
c0014703:	e6 42                	out    0x42,al
c0014705:	e4 61                	in     al,0x61
c0014707:	88 c2                	mov    dl,al
c0014709:	83 ca 03             	or     edx,0x3
c001470c:	38 c2                	cmp    dl,al
c001470e:	74 04                	je     c0014714 <HalMakeBeep(int)+0x38>
c0014710:	88 d0                	mov    al,dl
c0014712:	e6 61                	out    0x61,al
c0014714:	5b                   	pop    ebx
c0014715:	c3                   	ret    

c0014716 <HalGetRand()>:
c0014716:	31 c0                	xor    eax,eax
c0014718:	c3                   	ret    

c0014719 <HalEndOfInterrupt(int)>:
c0014719:	80 3d 00 28 02 c0 00 	cmp    BYTE PTR ds:0xc0022800,0x0
c0014720:	74 23                	je     c0014745 <HalEndOfInterrupt(int)+0x2c>
c0014722:	83 ec 14             	sub    esp,0x14
c0014725:	6a 1b                	push   0x1b
c0014727:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c001472d:	e8 28 1a ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c0014732:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014737:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0014741:	83 c4 1c             	add    esp,0x1c
c0014744:	c3                   	ret    
c0014745:	e9 56 02 00 00       	jmp    c00149a0 <picEOI(int)>

c001474a <HalRestart()>:
c001474a:	c3                   	ret    

c001474b <HalShutdown()>:
c001474b:	c3                   	ret    

c001474c <HalSleep()>:
c001474c:	c3                   	ret    
c001474d:	66 90                	xchg   ax,ax
c001474f:	90                   	nop

c0014750 <picIoWait()>:
c0014750:	eb 00                	jmp    c0014752 <picIoWait()+0x2>
c0014752:	eb 00                	jmp    c0014754 <picIoWait()+0x4>
c0014754:	90                   	nop
c0014755:	c3                   	ret    
c0014756:	66 90                	xchg   ax,ax

c0014758 <picDisable()>:
c0014758:	83 ec 10             	sub    esp,0x10
c001475b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0014762:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0014767:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001476b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014770:	ee                   	out    dx,al
c0014771:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0014778:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001477d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014781:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014786:	ee                   	out    dx,al
c0014787:	90                   	nop
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	c3                   	ret    

c001478c <picGetIRQReg(int)>:
c001478c:	83 ec 10             	sub    esp,0x10
c001478f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014793:	25 ff 00 00 00       	and    eax,0xff
c0014798:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001479f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00147a3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00147a7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00147ac:	ee                   	out    dx,al
c00147ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147b1:	25 ff 00 00 00       	and    eax,0xff
c00147b6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00147bd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00147c1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00147c5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00147ca:	ee                   	out    dx,al
c00147cb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00147d2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00147d7:	89 c2                	mov    edx,eax
c00147d9:	ec                   	in     al,dx
c00147da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00147de:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00147e2:	25 ff 00 00 00       	and    eax,0xff
c00147e7:	c1 e0 08             	shl    eax,0x8
c00147ea:	89 c1                	mov    ecx,eax
c00147ec:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00147f3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00147f8:	89 c2                	mov    edx,eax
c00147fa:	ec                   	in     al,dx
c00147fb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00147ff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014803:	25 ff 00 00 00       	and    eax,0xff
c0014808:	09 c8                	or     eax,ecx
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	c3                   	ret    
c001480e:	66 90                	xchg   ax,ax

c0014810 <picOpen()>:
c0014810:	83 ec 50             	sub    esp,0x50
c0014813:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001481a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001481f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014823:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014827:	ee                   	out    dx,al
c0014828:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001482f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014834:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0014838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001483c:	ee                   	out    dx,al
c001483d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014845:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001484d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014858:	89 c2                	mov    edx,eax
c001485a:	ec                   	in     al,dx
c001485b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001485f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014863:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014867:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001486e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014872:	89 c2                	mov    edx,eax
c0014874:	ec                   	in     al,dx
c0014875:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014879:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001487d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0014881:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0014888:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001488d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014891:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014895:	ee                   	out    dx,al
c0014896:	e8 b5 fe ff ff       	call   c0014750 <picIoWait()>
c001489b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00148a2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00148a7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00148ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00148af:	ee                   	out    dx,al
c00148b0:	e8 9b fe ff ff       	call   c0014750 <picIoWait()>
c00148b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00148b9:	25 ff 00 00 00       	and    eax,0xff
c00148be:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00148c5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00148c9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00148cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00148d1:	ee                   	out    dx,al
c00148d2:	e8 79 fe ff ff       	call   c0014750 <picIoWait()>
c00148d7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00148db:	25 ff 00 00 00       	and    eax,0xff
c00148e0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00148e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00148eb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00148ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00148f3:	ee                   	out    dx,al
c00148f4:	e8 57 fe ff ff       	call   c0014750 <picIoWait()>
c00148f9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014900:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014905:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001490d:	ee                   	out    dx,al
c001490e:	e8 3d fe ff ff       	call   c0014750 <picIoWait()>
c0014913:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001491a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001491f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014923:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014927:	ee                   	out    dx,al
c0014928:	e8 23 fe ff ff       	call   c0014750 <picIoWait()>
c001492d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014934:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014939:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001493d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014941:	ee                   	out    dx,al
c0014942:	e8 09 fe ff ff       	call   c0014750 <picIoWait()>
c0014947:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001494e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014953:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001495b:	ee                   	out    dx,al
c001495c:	e8 ef fd ff ff       	call   c0014750 <picIoWait()>
c0014961:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014965:	25 ff 00 00 00       	and    eax,0xff
c001496a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014971:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014975:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014979:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001497d:	ee                   	out    dx,al
c001497e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014982:	25 ff 00 00 00       	and    eax,0xff
c0014987:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001498e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014992:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014996:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001499a:	ee                   	out    dx,al
c001499b:	90                   	nop
c001499c:	83 c4 50             	add    esp,0x50
c001499f:	c3                   	ret    

c00149a0 <picEOI(int)>:
c00149a0:	83 ec 10             	sub    esp,0x10
c00149a3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00149a8:	75 22                	jne    c00149cc <picEOI(int)+0x2c>
c00149aa:	6a 0b                	push   0xb
c00149ac:	e8 db fd ff ff       	call   c001478c <picGetIRQReg(int)>
c00149b1:	83 c4 04             	add    esp,0x4
c00149b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00149b9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00149be:	25 ff ff 00 00       	and    eax,0xffff
c00149c3:	25 80 00 00 00       	and    eax,0x80
c00149c8:	74 72                	je     c0014a3c <picEOI(int)+0x9c>
c00149ca:	66 90                	xchg   ax,ax
c00149cc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00149d1:	75 31                	jne    c0014a04 <picEOI(int)+0x64>
c00149d3:	6a 0b                	push   0xb
c00149d5:	e8 b2 fd ff ff       	call   c001478c <picGetIRQReg(int)>
c00149da:	83 c4 04             	add    esp,0x4
c00149dd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00149e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149e6:	66 85 c0             	test   ax,ax
c00149e9:	78 19                	js     c0014a04 <picEOI(int)+0x64>
c00149eb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00149f2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00149f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00149fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014a00:	ee                   	out    dx,al
c0014a01:	eb 3d                	jmp    c0014a40 <picEOI(int)+0xa0>
c0014a03:	90                   	nop
c0014a04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014a09:	7e 19                	jle    c0014a24 <picEOI(int)+0x84>
c0014a0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014a12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014a17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014a1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014a20:	ee                   	out    dx,al
c0014a21:	8d 76 00             	lea    esi,[esi+0x0]
c0014a24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014a2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014a30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014a34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014a39:	ee                   	out    dx,al
c0014a3a:	eb 04                	jmp    c0014a40 <picEOI(int)+0xa0>
c0014a3c:	90                   	nop
c0014a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	c3                   	ret    

c0014a44 <RTC::open(int, int, void*)>:
c0014a44:	31 c0                	xor    eax,eax
c0014a46:	c3                   	ret    
c0014a47:	90                   	nop

c0014a48 <RTC::close(int, int, void*)>:
c0014a48:	31 c0                	xor    eax,eax
c0014a4a:	c3                   	ret    
c0014a4b:	90                   	nop

c0014a4c <RTC::timeInSecondsUTC()>:
c0014a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014a56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014a5c:	c3                   	ret    
c0014a5d:	90                   	nop

c0014a5e <RTC::timeInDatetimeUTC()>:
c0014a5e:	53                   	push   ebx
c0014a5f:	83 ec 14             	sub    esp,0x14
c0014a62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a6c:	50                   	push   eax
c0014a6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014a70:	83 c4 0c             	add    esp,0xc
c0014a73:	52                   	push   edx
c0014a74:	50                   	push   eax
c0014a75:	53                   	push   ebx
c0014a76:	e8 29 60 ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c0014a7b:	89 d8                	mov    eax,ebx
c0014a7d:	83 c4 14             	add    esp,0x14
c0014a80:	5b                   	pop    ebx
c0014a81:	c2 04 00             	ret    0x4

c0014a84 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014a84:	56                   	push   esi
c0014a85:	53                   	push   ebx
c0014a86:	83 ec 14             	sub    esp,0x14
c0014a89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a8f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014a92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014a96:	52                   	push   edx
c0014a97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a9f:	50                   	push   eax
c0014aa0:	e8 ff 5f ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c0014aa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aa9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014aad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014ab1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014ab5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014ab9:	89 f0                	mov    eax,esi
c0014abb:	83 c4 20             	add    esp,0x20
c0014abe:	5b                   	pop    ebx
c0014abf:	5e                   	pop    esi
c0014ac0:	ff e0                	jmp    eax

c0014ac2 <RTC::~RTC()>:
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	ba 30 e2 01 c0       	mov    edx,0xc001e230
c0014aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ace:	89 10                	mov    DWORD PTR [eax],edx
c0014ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	50                   	push   eax
c0014ad8:	e8 4b 5d ff ff       	call   c000a828 <Clock::~Clock()>
c0014add:	83 c4 10             	add    esp,0x10
c0014ae0:	90                   	nop
c0014ae1:	83 c4 0c             	add    esp,0xc
c0014ae4:	c3                   	ret    
c0014ae5:	90                   	nop

c0014ae6 <RTC::~RTC()>:
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	83 ec 0c             	sub    esp,0xc
c0014aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014af0:	e8 cd ff ff ff       	call   c0014ac2 <RTC::~RTC()>
c0014af5:	83 c4 10             	add    esp,0x10
c0014af8:	83 ec 08             	sub    esp,0x8
c0014afb:	68 60 01 00 00       	push   0x160
c0014b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b04:	e8 f1 4c ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	83 c4 0c             	add    esp,0xc
c0014b0f:	c3                   	ret    

c0014b10 <RTC::get_update_in_progress_flag()>:
c0014b10:	83 ec 14             	sub    esp,0x14
c0014b13:	6a 0a                	push   0xa
c0014b15:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014b1b:	e8 ee 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b20:	83 c4 1c             	add    esp,0x1c
c0014b23:	c0 e8 07             	shr    al,0x7
c0014b26:	c3                   	ret    
c0014b27:	90                   	nop

c0014b28 <RTC::completeRTCRefresh()>:
c0014b28:	55                   	push   ebp
c0014b29:	57                   	push   edi
c0014b2a:	56                   	push   esi
c0014b2b:	53                   	push   ebx
c0014b2c:	83 ec 2c             	sub    esp,0x2c
c0014b2f:	8b 1d 6c 18 02 c0    	mov    ebx,DWORD PTR ds:0xc002186c
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014b3c:	e8 cf ff ff ff       	call   c0014b10 <RTC::get_update_in_progress_flag()>
c0014b41:	83 c4 10             	add    esp,0x10
c0014b44:	84 c0                	test   al,al
c0014b46:	74 0e                	je     c0014b56 <RTC::completeRTCRefresh()+0x2e>
c0014b48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014b4e:	3b 05 6c 18 02 c0    	cmp    eax,DWORD PTR ds:0xc002186c
c0014b54:	73 df                	jae    c0014b35 <RTC::completeRTCRefresh()+0xd>
c0014b56:	55                   	push   ebp
c0014b57:	55                   	push   ebp
c0014b58:	6a 00                	push   0x0
c0014b5a:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014b60:	e8 a9 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b65:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014b69:	58                   	pop    eax
c0014b6a:	5a                   	pop    edx
c0014b6b:	6a 02                	push   0x2
c0014b6d:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014b73:	e8 96 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b78:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014b7c:	59                   	pop    ecx
c0014b7d:	5b                   	pop    ebx
c0014b7e:	6a 04                	push   0x4
c0014b80:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014b86:	e8 83 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b8b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014b8f:	5e                   	pop    esi
c0014b90:	5f                   	pop    edi
c0014b91:	6a 07                	push   0x7
c0014b93:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014b99:	e8 70 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014b9e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014ba2:	5d                   	pop    ebp
c0014ba3:	58                   	pop    eax
c0014ba4:	6a 08                	push   0x8
c0014ba6:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014bac:	e8 5d 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014bb1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014bb5:	58                   	pop    eax
c0014bb6:	5a                   	pop    edx
c0014bb7:	6a 09                	push   0x9
c0014bb9:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014bbf:	e8 4a 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	0f b6 e8             	movzx  ebp,al
c0014bca:	8b 1d 6c 18 02 c0    	mov    ebx,DWORD PTR ds:0xc002186c
c0014bd0:	83 ec 0c             	sub    esp,0xc
c0014bd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014bd7:	e8 34 ff ff ff       	call   c0014b10 <RTC::get_update_in_progress_flag()>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	84 c0                	test   al,al
c0014be1:	74 0e                	je     c0014bf1 <RTC::completeRTCRefresh()+0xc9>
c0014be3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014be9:	3b 05 6c 18 02 c0    	cmp    eax,DWORD PTR ds:0xc002186c
c0014bef:	73 df                	jae    c0014bd0 <RTC::completeRTCRefresh()+0xa8>
c0014bf1:	50                   	push   eax
c0014bf2:	50                   	push   eax
c0014bf3:	6a 00                	push   0x0
c0014bf5:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014bfb:	e8 0e 16 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c00:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014c04:	58                   	pop    eax
c0014c05:	5a                   	pop    edx
c0014c06:	6a 02                	push   0x2
c0014c08:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014c0e:	e8 fb 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c13:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014c17:	59                   	pop    ecx
c0014c18:	5b                   	pop    ebx
c0014c19:	6a 04                	push   0x4
c0014c1b:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014c21:	e8 e8 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c26:	5e                   	pop    esi
c0014c27:	88 c3                	mov    bl,al
c0014c29:	5f                   	pop    edi
c0014c2a:	6a 07                	push   0x7
c0014c2c:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014c32:	e8 d7 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c37:	89 c6                	mov    esi,eax
c0014c39:	58                   	pop    eax
c0014c3a:	5a                   	pop    edx
c0014c3b:	6a 08                	push   0x8
c0014c3d:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014c43:	e8 c6 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c48:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014c4c:	59                   	pop    ecx
c0014c4d:	5f                   	pop    edi
c0014c4e:	6a 09                	push   0x9
c0014c50:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014c56:	e8 b3 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014c5f:	0f b6 f8             	movzx  edi,al
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014c69:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014c6d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014c71:	89 f1                	mov    ecx,esi
c0014c73:	0f 94 c0             	sete   al
c0014c76:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014c7a:	0f 94 c2             	sete   dl
c0014c7d:	21 d0                	and    eax,edx
c0014c7f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014c83:	0f 94 c2             	sete   dl
c0014c86:	21 c2                	and    edx,eax
c0014c88:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014c8c:	0f 94 c0             	sete   al
c0014c8f:	21 d0                	and    eax,edx
c0014c91:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014c95:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014c99:	0f 94 c1             	sete   cl
c0014c9c:	84 c8                	test   al,cl
c0014c9e:	75 29                	jne    c0014cc9 <RTC::completeRTCRefresh()+0x1a1>
c0014ca0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014ca4:	89 fd                	mov    ebp,edi
c0014ca6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014caa:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014cae:	89 f0                	mov    eax,esi
c0014cb0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014cb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014cb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014cbc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014cc0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014cc4:	e9 01 ff ff ff       	jmp    c0014bca <RTC::completeRTCRefresh()+0xa2>
c0014cc9:	39 fd                	cmp    ebp,edi
c0014ccb:	75 d3                	jne    c0014ca0 <RTC::completeRTCRefresh()+0x178>
c0014ccd:	55                   	push   ebp
c0014cce:	55                   	push   ebp
c0014ccf:	6a 0b                	push   0xb
c0014cd1:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014cd7:	e8 32 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cdc:	83 c4 10             	add    esp,0x10
c0014cdf:	89 c5                	mov    ebp,eax
c0014ce1:	a8 04                	test   al,0x4
c0014ce3:	75 78                	jne    c0014d5d <RTC::completeRTCRefresh()+0x235>
c0014ce5:	b1 0a                	mov    cl,0xa
c0014ce7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014ceb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014cef:	83 e2 0f             	and    edx,0xf
c0014cf2:	c0 e8 04             	shr    al,0x4
c0014cf5:	c1 ef 04             	shr    edi,0x4
c0014cf8:	f6 e1                	mul    cl
c0014cfa:	6b ff 0a             	imul   edi,edi,0xa
c0014cfd:	01 d0                	add    eax,edx
c0014cff:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014d03:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014d07:	83 e2 0f             	and    edx,0xf
c0014d0a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014d0e:	c0 e8 04             	shr    al,0x4
c0014d11:	f6 e1                	mul    cl
c0014d13:	01 d0                	add    eax,edx
c0014d15:	88 da                	mov    dl,bl
c0014d17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014d1b:	83 e2 0f             	and    edx,0xf
c0014d1e:	88 d8                	mov    al,bl
c0014d20:	83 e3 80             	and    ebx,0xffffff80
c0014d23:	c0 e8 04             	shr    al,0x4
c0014d26:	83 e0 07             	and    eax,0x7
c0014d29:	f6 e1                	mul    cl
c0014d2b:	01 d0                	add    eax,edx
c0014d2d:	89 f2                	mov    edx,esi
c0014d2f:	09 c3                	or     ebx,eax
c0014d31:	83 e2 0f             	and    edx,0xf
c0014d34:	89 f0                	mov    eax,esi
c0014d36:	c0 e8 04             	shr    al,0x4
c0014d39:	f6 e1                	mul    cl
c0014d3b:	8d 34 02             	lea    esi,[edx+eax*1]
c0014d3e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014d42:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014d46:	83 e2 0f             	and    edx,0xf
c0014d49:	c0 e8 04             	shr    al,0x4
c0014d4c:	f6 e1                	mul    cl
c0014d4e:	01 d0                	add    eax,edx
c0014d50:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014d54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d58:	83 e0 0f             	and    eax,0xf
c0014d5b:	01 c7                	add    edi,eax
c0014d5d:	83 e5 02             	and    ebp,0x2
c0014d60:	75 14                	jne    c0014d76 <RTC::completeRTCRefresh()+0x24e>
c0014d62:	84 db                	test   bl,bl
c0014d64:	79 10                	jns    c0014d76 <RTC::completeRTCRefresh()+0x24e>
c0014d66:	83 e3 7f             	and    ebx,0x7f
c0014d69:	b9 18 00 00 00       	mov    ecx,0x18
c0014d6e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0014d71:	99                   	cdq    
c0014d72:	f7 f9                	idiv   ecx
c0014d74:	88 d3                	mov    bl,dl
c0014d76:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0014d7c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0014d82:	77 06                	ja     c0014d8a <RTC::completeRTCRefresh()+0x262>
c0014d84:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0014d8a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0014d8f:	31 d2                	xor    edx,edx
c0014d91:	c1 e1 10             	shl    ecx,0x10
c0014d94:	89 d7                	mov    edi,edx
c0014d96:	c1 e5 10             	shl    ebp,0x10
c0014d99:	31 c0                	xor    eax,eax
c0014d9b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0014da1:	09 cf                	or     edi,ecx
c0014da3:	89 fa                	mov    edx,edi
c0014da5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0014da9:	88 da                	mov    dl,bl
c0014dab:	89 f3                	mov    ebx,esi
c0014dad:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0014db1:	88 d8                	mov    al,bl
c0014db3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0014db7:	0f b7 c8             	movzx  ecx,ax
c0014dba:	09 e9                	or     ecx,ebp
c0014dbc:	89 c8                	mov    eax,ecx
c0014dbe:	51                   	push   ecx
c0014dbf:	51                   	push   ecx
c0014dc0:	52                   	push   edx
c0014dc1:	50                   	push   eax
c0014dc2:	e8 50 5b ff ff       	call   c000a917 <datetimeToSeconds(datetime_t)>
c0014dc7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0014dcb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0014dd1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0014dd7:	83 c4 3c             	add    esp,0x3c
c0014dda:	5b                   	pop    ebx
c0014ddb:	5e                   	pop    esi
c0014ddc:	5f                   	pop    edi
c0014ddd:	5d                   	pop    ebp
c0014dde:	c3                   	ret    
c0014ddf:	90                   	nop

c0014de0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0014de0:	55                   	push   ebp
c0014de1:	57                   	push   edi
c0014de2:	56                   	push   esi
c0014de3:	53                   	push   ebx
c0014de4:	83 ec 30             	sub    esp,0x30
c0014de7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0014deb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0014def:	6a 00                	push   0x0
c0014df1:	6a 00                	push   0x0
c0014df3:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014df9:	e8 26 15 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014dfe:	83 c4 0c             	add    esp,0xc
c0014e01:	6a 00                	push   0x0
c0014e03:	6a 02                	push   0x2
c0014e05:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014e0b:	e8 14 15 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014e10:	31 d2                	xor    edx,edx
c0014e12:	89 f9                	mov    ecx,edi
c0014e14:	89 f8                	mov    eax,edi
c0014e16:	c1 e9 10             	shr    ecx,0x10
c0014e19:	0f b6 c4             	movzx  eax,ah
c0014e1c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0014e20:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0014e24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e28:	b9 64 00 00 00       	mov    ecx,0x64
c0014e2d:	89 f0                	mov    eax,esi
c0014e2f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0014e33:	89 f0                	mov    eax,esi
c0014e35:	0f b6 c4             	movzx  eax,ah
c0014e38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014e3c:	89 f0                	mov    eax,esi
c0014e3e:	c1 e8 10             	shr    eax,0x10
c0014e41:	66 f7 f1             	div    cx
c0014e44:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0014e49:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0014e4e:	59                   	pop    ecx
c0014e4f:	5b                   	pop    ebx
c0014e50:	89 fb                	mov    ebx,edi
c0014e52:	6a 0b                	push   0xb
c0014e54:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014e5a:	e8 af 13 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014e5f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0014e6b:	75 74                	jne    c0014ee1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0014e6d:	b2 0a                	mov    dl,0xa
c0014e6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e73:	0f b6 c1             	movzx  eax,cl
c0014e76:	f6 f2                	div    dl
c0014e78:	88 c3                	mov    bl,al
c0014e7a:	88 e0                	mov    al,ah
c0014e7c:	c1 e3 04             	shl    ebx,0x4
c0014e7f:	09 c3                	or     ebx,eax
c0014e81:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014e86:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0014e8a:	f6 f2                	div    dl
c0014e8c:	88 c1                	mov    cl,al
c0014e8e:	88 e0                	mov    al,ah
c0014e90:	c1 e1 04             	shl    ecx,0x4
c0014e93:	09 c1                	or     ecx,eax
c0014e95:	89 f8                	mov    eax,edi
c0014e97:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0014e9b:	0f b6 c0             	movzx  eax,al
c0014e9e:	f6 f2                	div    dl
c0014ea0:	88 c3                	mov    bl,al
c0014ea2:	88 e0                	mov    al,ah
c0014ea4:	c1 e3 04             	shl    ebx,0x4
c0014ea7:	09 c3                	or     ebx,eax
c0014ea9:	89 f0                	mov    eax,esi
c0014eab:	0f b6 c0             	movzx  eax,al
c0014eae:	f6 f2                	div    dl
c0014eb0:	88 c1                	mov    cl,al
c0014eb2:	88 e0                	mov    al,ah
c0014eb4:	c1 e1 04             	shl    ecx,0x4
c0014eb7:	09 c1                	or     ecx,eax
c0014eb9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014ebe:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0014ec2:	f6 f2                	div    dl
c0014ec4:	88 c1                	mov    cl,al
c0014ec6:	88 e0                	mov    al,ah
c0014ec8:	c1 e1 04             	shl    ecx,0x4
c0014ecb:	09 c1                	or     ecx,eax
c0014ecd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0014ed2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0014ed6:	f6 f2                	div    dl
c0014ed8:	89 c5                	mov    ebp,eax
c0014eda:	88 e0                	mov    al,ah
c0014edc:	c1 e5 04             	shl    ebp,0x4
c0014edf:	09 c5                	or     ebp,eax
c0014ee1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0014ee6:	75 17                	jne    c0014eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014ee8:	80 fb 0b             	cmp    bl,0xb
c0014eeb:	76 0c                	jbe    c0014ef9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0014eed:	80 eb 0c             	sub    bl,0xc
c0014ef0:	75 02                	jne    c0014ef4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0014ef2:	b3 0c                	mov    bl,0xc
c0014ef4:	83 cb 80             	or     ebx,0xffffff80
c0014ef7:	eb 06                	jmp    c0014eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014ef9:	84 db                	test   bl,bl
c0014efb:	75 02                	jne    c0014eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0014efd:	b3 0c                	mov    bl,0xc
c0014eff:	0f b6 db             	movzx  ebx,bl
c0014f02:	50                   	push   eax
c0014f03:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014f08:	50                   	push   eax
c0014f09:	6a 00                	push   0x0
c0014f0b:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f11:	e8 0e 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f16:	83 c4 0c             	add    esp,0xc
c0014f19:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014f1e:	50                   	push   eax
c0014f1f:	6a 02                	push   0x2
c0014f21:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f27:	e8 f8 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f2c:	83 c4 0c             	add    esp,0xc
c0014f2f:	53                   	push   ebx
c0014f30:	6a 04                	push   0x4
c0014f32:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f38:	e8 e7 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f3d:	83 c4 0c             	add    esp,0xc
c0014f40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014f45:	50                   	push   eax
c0014f46:	6a 07                	push   0x7
c0014f48:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f4e:	e8 d1 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f53:	83 c4 0c             	add    esp,0xc
c0014f56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0014f5b:	50                   	push   eax
c0014f5c:	6a 08                	push   0x8
c0014f5e:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f64:	e8 bb 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f69:	83 c4 0c             	add    esp,0xc
c0014f6c:	89 e8                	mov    eax,ebp
c0014f6e:	0f b6 e8             	movzx  ebp,al
c0014f71:	55                   	push   ebp
c0014f72:	6a 09                	push   0x9
c0014f74:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014f7a:	e8 a5 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f7f:	5a                   	pop    edx
c0014f80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014f84:	e8 9f fb ff ff       	call   c0014b28 <RTC::completeRTCRefresh()>
c0014f89:	83 c4 3c             	add    esp,0x3c
c0014f8c:	b0 01                	mov    al,0x1
c0014f8e:	5b                   	pop    ebx
c0014f8f:	5e                   	pop    esi
c0014f90:	5f                   	pop    edi
c0014f91:	5d                   	pop    ebp
c0014f92:	c3                   	ret    

c0014f93 <rtcIRQHandler(regs*, void*)>:
c0014f93:	53                   	push   ebx
c0014f94:	83 ec 10             	sub    esp,0x10
c0014f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014f9b:	6a 0c                	push   0xc
c0014f9d:	ff 35 a8 f2 01 c0    	push   DWORD PTR ds:0xc001f2a8
c0014fa3:	e8 66 12 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014fa8:	83 c4 10             	add    esp,0x10
c0014fab:	84 c0                	test   al,al
c0014fad:	79 24                	jns    c0014fd3 <rtcIRQHandler(regs*, void*)+0x40>
c0014faf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0014fb6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0014fbd:	66 ff 05 14 28 02 c0 	inc    WORD PTR ds:0xc0022814
c0014fc4:	75 0d                	jne    c0014fd3 <rtcIRQHandler(regs*, void*)+0x40>
c0014fc6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014fca:	83 c4 08             	add    esp,0x8
c0014fcd:	5b                   	pop    ebx
c0014fce:	e9 55 fb ff ff       	jmp    c0014b28 <RTC::completeRTCRefresh()>
c0014fd3:	83 c4 08             	add    esp,0x8
c0014fd6:	5b                   	pop    ebx
c0014fd7:	c3                   	ret    

c0014fd8 <RTC::RTC()>:
c0014fd8:	83 ec 1c             	sub    esp,0x1c
c0014fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fdf:	83 ec 08             	sub    esp,0x8
c0014fe2:	68 13 e2 01 c0       	push   0xc001e213
c0014fe7:	50                   	push   eax
c0014fe8:	e8 05 58 ff ff       	call   c000a7f2 <Clock::Clock(char const*)>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	ba 30 e2 01 c0       	mov    edx,0xc001e230
c0014ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff9:	89 10                	mov    DWORD PTR [eax],edx
c0014ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fff:	83 ec 0c             	sub    esp,0xc
c0015002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015006:	6a 01                	push   0x1
c0015008:	68 93 4f 01 c0       	push   0xc0014f93
c001500d:	6a 08                	push   0x8
c001500f:	50                   	push   eax
c0015010:	e8 c7 5c ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015015:	83 c4 20             	add    esp,0x20
c0015018:	89 c2                	mov    edx,eax
c001501a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001501e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015024:	fa                   	cli    
c0015025:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c001502a:	40                   	inc    eax
c001502b:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0015030:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0015035:	83 ec 08             	sub    esp,0x8
c0015038:	6a 0b                	push   0xb
c001503a:	50                   	push   eax
c001503b:	e8 ce 11 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0015040:	83 c4 10             	add    esp,0x10
c0015043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015047:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001504c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015050:	83 ca 10             	or     edx,0x10
c0015053:	81 e2 ff 00 00 00    	and    edx,0xff
c0015059:	83 ec 04             	sub    esp,0x4
c001505c:	52                   	push   edx
c001505d:	6a 0b                	push   0xb
c001505f:	50                   	push   eax
c0015060:	e8 bf 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001506f:	e8 b4 fa ff ff       	call   c0014b28 <RTC::completeRTCRefresh()>
c0015074:	83 c4 10             	add    esp,0x10
c0015077:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c001507c:	48                   	dec    eax
c001507d:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c0015082:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c0015087:	85 c0                	test   eax,eax
c0015089:	75 01                	jne    c001508c <RTC::RTC()+0xb4>
c001508b:	fb                   	sti    
c001508c:	90                   	nop
c001508d:	83 c4 1c             	add    esp,0x1c
c0015090:	c3                   	ret    
c0015091:	66 90                	xchg   ax,ax
c0015093:	90                   	nop

c0015094 <HalConsoleScroll(int, int)>:
c0015094:	83 ec 10             	sub    esp,0x10
c0015097:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001509f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00150a7:	90                   	nop
c00150a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00150ad:	0f 8f e1 00 00 00    	jg     c0015194 <HalConsoleScroll(int, int)+0x100>
c00150b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00150bb:	90                   	nop
c00150bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00150c4:	0f 8f be 00 00 00    	jg     c0015188 <HalConsoleScroll(int, int)+0xf4>
c00150ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150ce:	89 d0                	mov    eax,edx
c00150d0:	c1 e0 02             	shl    eax,0x2
c00150d3:	01 d0                	add    eax,edx
c00150d5:	c1 e0 05             	shl    eax,0x5
c00150d8:	89 c2                	mov    edx,eax
c00150da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150de:	01 d0                	add    eax,edx
c00150e0:	89 c2                	mov    edx,eax
c00150e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00150e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150ed:	89 d0                	mov    eax,edx
c00150ef:	c1 e0 02             	shl    eax,0x2
c00150f2:	01 d0                	add    eax,edx
c00150f4:	c1 e0 05             	shl    eax,0x5
c00150f7:	89 c2                	mov    edx,eax
c00150f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150fd:	01 d0                	add    eax,edx
c00150ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015109:	01 c2                	add    edx,eax
c001510b:	8a 01                	mov    al,BYTE PTR [ecx]
c001510d:	88 02                	mov    BYTE PTR [edx],al
c001510f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015114:	75 66                	jne    c001517c <HalConsoleScroll(int, int)+0xe8>
c0015116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001511a:	83 e0 01             	and    eax,0x1
c001511d:	74 39                	je     c0015158 <HalConsoleScroll(int, int)+0xc4>
c001511f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015123:	83 e0 0f             	and    eax,0xf
c0015126:	88 c2                	mov    dl,al
c0015128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512c:	c1 e0 04             	shl    eax,0x4
c001512f:	88 d1                	mov    cl,dl
c0015131:	09 c1                	or     ecx,eax
c0015133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015137:	89 d0                	mov    eax,edx
c0015139:	c1 e0 02             	shl    eax,0x2
c001513c:	01 d0                	add    eax,edx
c001513e:	c1 e0 05             	shl    eax,0x5
c0015141:	89 c2                	mov    edx,eax
c0015143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015147:	01 d0                	add    eax,edx
c0015149:	89 c2                	mov    edx,eax
c001514b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001514f:	01 d0                	add    eax,edx
c0015151:	88 ca                	mov    dl,cl
c0015153:	88 10                	mov    BYTE PTR [eax],dl
c0015155:	eb 25                	jmp    c001517c <HalConsoleScroll(int, int)+0xe8>
c0015157:	90                   	nop
c0015158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001515c:	89 d0                	mov    eax,edx
c001515e:	c1 e0 02             	shl    eax,0x2
c0015161:	01 d0                	add    eax,edx
c0015163:	c1 e0 05             	shl    eax,0x5
c0015166:	89 c2                	mov    edx,eax
c0015168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001516c:	01 d0                	add    eax,edx
c001516e:	89 c2                	mov    edx,eax
c0015170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015174:	01 d0                	add    eax,edx
c0015176:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015179:	8d 76 00             	lea    esi,[esi+0x0]
c001517c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015180:	e9 37 ff ff ff       	jmp    c00150bc <HalConsoleScroll(int, int)+0x28>
c0015185:	8d 76 00             	lea    esi,[esi+0x0]
c0015188:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001518c:	e9 17 ff ff ff       	jmp    c00150a8 <HalConsoleScroll(int, int)+0x14>
c0015191:	8d 76 00             	lea    esi,[esi+0x0]
c0015194:	90                   	nop
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	c3                   	ret    
c0015199:	8d 76 00             	lea    esi,[esi+0x0]

c001519c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001519c:	83 ec 14             	sub    esp,0x14
c001519f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151a3:	88 04 24             	mov    BYTE PTR [esp],al
c00151a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00151a9:	25 ff 00 00 00       	and    eax,0xff
c00151ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151b2:	89 d1                	mov    ecx,edx
c00151b4:	83 e1 0f             	and    ecx,0xf
c00151b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151bb:	c1 e2 04             	shl    edx,0x4
c00151be:	81 e2 ff 00 00 00    	and    edx,0xff
c00151c4:	09 ca                	or     edx,ecx
c00151c6:	c1 e2 08             	shl    edx,0x8
c00151c9:	09 d0                	or     eax,edx
c00151cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00151d0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00151d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151dc:	89 d0                	mov    eax,edx
c00151de:	c1 e0 02             	shl    eax,0x2
c00151e1:	01 d0                	add    eax,edx
c00151e3:	c1 e0 04             	shl    eax,0x4
c00151e6:	89 c2                	mov    edx,eax
c00151e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151ec:	01 d0                	add    eax,edx
c00151ee:	01 c0                	add    eax,eax
c00151f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00151f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00151fd:	66 89 02             	mov    WORD PTR [edx],ax
c0015200:	90                   	nop
c0015201:	83 c4 14             	add    esp,0x14
c0015204:	c3                   	ret    
c0015205:	8d 76 00             	lea    esi,[esi+0x0]

c0015208 <HalConsoleCursorUpdate(int, int)>:
c0015208:	83 ec 20             	sub    esp,0x20
c001520b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001520f:	89 c2                	mov    edx,eax
c0015211:	89 d0                	mov    eax,edx
c0015213:	c1 e0 02             	shl    eax,0x2
c0015216:	01 d0                	add    eax,edx
c0015218:	c1 e0 04             	shl    eax,0x4
c001521b:	89 c2                	mov    edx,eax
c001521d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015221:	01 d0                	add    eax,edx
c0015223:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015228:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001522f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015234:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001523c:	ee                   	out    dx,al
c001523d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015242:	25 ff 00 00 00       	and    eax,0xff
c0015247:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001524e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015252:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001525a:	ee                   	out    dx,al
c001525b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015262:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015267:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001526b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001526f:	ee                   	out    dx,al
c0015270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015275:	66 c1 e8 08          	shr    ax,0x8
c0015279:	25 ff 00 00 00       	and    eax,0xff
c001527e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015285:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015289:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001528d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015291:	ee                   	out    dx,al
c0015292:	90                   	nop
c0015293:	83 c4 20             	add    esp,0x20
c0015296:	c3                   	ret    
c0015297:	90                   	nop

c0015298 <FAT::getName()>:
c0015298:	b8 64 e2 01 c0       	mov    eax,0xc001e264
c001529d:	c3                   	ret    
c001529e:	66 90                	xchg   ax,ax

c00152a0 <FAT::tell(void*, unsigned long long*)>:
c00152a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00152a5:	75 09                	jne    c00152b0 <FAT::tell(void*, unsigned long long*)+0x10>
c00152a7:	b8 04 00 00 00       	mov    eax,0x4
c00152ac:	c3                   	ret    
c00152ad:	8d 76 00             	lea    esi,[esi+0x0]
c00152b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152b5:	75 09                	jne    c00152c0 <FAT::tell(void*, unsigned long long*)+0x20>
c00152b7:	b8 04 00 00 00       	mov    eax,0x4
c00152bc:	c3                   	ret    
c00152bd:	8d 76 00             	lea    esi,[esi+0x0]
c00152c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00152c7:	ba 00 00 00 00       	mov    edx,0x0
c00152cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152d0:	89 01                	mov    DWORD PTR [ecx],eax
c00152d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152d5:	b8 00 00 00 00       	mov    eax,0x0
c00152da:	c3                   	ret    
c00152db:	90                   	nop

c00152dc <FAT::stat(void*, unsigned long long*)>:
c00152dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00152e1:	75 09                	jne    c00152ec <FAT::stat(void*, unsigned long long*)+0x10>
c00152e3:	b8 04 00 00 00       	mov    eax,0x4
c00152e8:	c3                   	ret    
c00152e9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152f1:	75 09                	jne    c00152fc <FAT::stat(void*, unsigned long long*)+0x20>
c00152f3:	b8 04 00 00 00       	mov    eax,0x4
c00152f8:	c3                   	ret    
c00152f9:	8d 76 00             	lea    esi,[esi+0x0]
c00152fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015300:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015303:	ba 00 00 00 00       	mov    edx,0x0
c0015308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001530c:	89 01                	mov    DWORD PTR [ecx],eax
c001530e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015311:	b8 00 00 00 00       	mov    eax,0x0
c0015316:	c3                   	ret    
c0015317:	90                   	nop

c0015318 <FAT::~FAT()>:
c0015318:	83 ec 0c             	sub    esp,0xc
c001531b:	ba b0 e2 01 c0       	mov    edx,0xc001e2b0
c0015320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015324:	89 10                	mov    DWORD PTR [eax],edx
c0015326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001532a:	83 ec 0c             	sub    esp,0xc
c001532d:	50                   	push   eax
c001532e:	e8 03 49 ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	90                   	nop
c0015337:	83 c4 0c             	add    esp,0xc
c001533a:	c3                   	ret    
c001533b:	90                   	nop

c001533c <FAT::~FAT()>:
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015346:	e8 cd ff ff ff       	call   c0015318 <FAT::~FAT()>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	83 ec 08             	sub    esp,0x8
c0015351:	6a 08                	push   0x8
c0015353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015357:	e8 9e 44 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	83 c4 0c             	add    esp,0xc
c0015362:	c3                   	ret    
c0015363:	90                   	nop

c0015364 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0015364:	83 ec 1c             	sub    esp,0x1c
c0015367:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001536e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015377:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c001537e:	83 f8 ff             	cmp    eax,0xffffffff
c0015381:	75 35                	jne    c00153b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0015383:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015387:	88 c2                	mov    dl,al
c0015389:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c001538e:	01 d0                	add    eax,edx
c0015390:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015394:	8b 15 20 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022820
c001539a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001539e:	89 14 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],edx
c00153a5:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c00153aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00153ae:	89 14 85 c0 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd740],edx
c00153b5:	eb 19                	jmp    c00153d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00153b7:	90                   	nop
c00153b8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00153bc:	88 c2                	mov    dl,al
c00153be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153c2:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c00153c9:	01 d0                	add    eax,edx
c00153cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00153cf:	90                   	nop
c00153d0:	83 ec 04             	sub    esp,0x4
c00153d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00153d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00153db:	8d 44 24 15          	lea    eax,[esp+0x15]
c00153df:	50                   	push   eax
c00153e0:	e8 9c f8 fe ff       	call   c0004c81 <f_getlabel>
c00153e5:	83 c4 10             	add    esp,0x10
c00153e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153f1:	75 09                	jne    c00153fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00153f3:	b8 00 00 00 00       	mov    eax,0x0
c00153f8:	eb 0a                	jmp    c0015404 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00153fa:	66 90                	xchg   ax,ax
c00153fc:	b8 01 00 00 00       	mov    eax,0x1
c0015401:	8d 76 00             	lea    esi,[esi+0x0]
c0015404:	83 c4 1c             	add    esp,0x1c
c0015407:	c3                   	ret    

c0015408 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0015408:	57                   	push   edi
c0015409:	83 ec 58             	sub    esp,0x58
c001540c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0015414:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015418:	b8 00 00 00 00       	mov    eax,0x0
c001541d:	b9 0f 00 00 00       	mov    ecx,0xf
c0015422:	fc                   	cld    
c0015423:	89 d7                	mov    edi,edx
c0015425:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0015427:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001542b:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c0015432:	83 f8 ff             	cmp    eax,0xffffffff
c0015435:	75 35                	jne    c001546c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0015437:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001543b:	88 c2                	mov    dl,al
c001543d:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c0015442:	01 d0                	add    eax,edx
c0015444:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015448:	8b 15 20 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022820
c001544e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015452:	89 14 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],edx
c0015459:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c001545e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0015462:	89 14 85 c0 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd740],edx
c0015469:	eb 19                	jmp    c0015484 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001546b:	90                   	nop
c001546c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015470:	88 c2                	mov    dl,al
c0015472:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015476:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c001547d:	01 d0                	add    eax,edx
c001547f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015483:	90                   	nop
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001548b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001548f:	50                   	push   eax
c0015490:	e8 4b b3 fe ff       	call   c00007e0 <strcat>
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	83 ec 0c             	sub    esp,0xc
c001549b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001549f:	50                   	push   eax
c00154a0:	e8 2d f9 fe ff       	call   c0004dd2 <f_setlabel>
c00154a5:	83 c4 10             	add    esp,0x10
c00154a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00154ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00154b1:	75 09                	jne    c00154bc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00154b3:	b8 00 00 00 00       	mov    eax,0x0
c00154b8:	eb 0a                	jmp    c00154c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00154ba:	66 90                	xchg   ax,ax
c00154bc:	b8 01 00 00 00       	mov    eax,0x1
c00154c1:	8d 76 00             	lea    esi,[esi+0x0]
c00154c4:	83 c4 58             	add    esp,0x58
c00154c7:	5f                   	pop    edi
c00154c8:	c3                   	ret    
c00154c9:	90                   	nop
c00154ca:	66 90                	xchg   ax,ax

c00154cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00154cc:	83 ec 2c             	sub    esp,0x2c
c00154cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00154d7:	83 ec 08             	sub    esp,0x8
c00154da:	68 88 e2 01 c0       	push   0xc001e288
c00154df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00154e3:	e8 18 b2 fe ff       	call   c0000700 <strcmp>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	85 c0                	test   eax,eax
c00154ed:	0f 94 c0             	sete   al
c00154f0:	84 c0                	test   al,al
c00154f2:	74 10                	je     c0015504 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00154f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00154fc:	e9 b3 00 00 00       	jmp    c00155b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015501:	8d 76 00             	lea    esi,[esi+0x0]
c0015504:	83 ec 08             	sub    esp,0x8
c0015507:	68 7a e2 01 c0       	push   0xc001e27a
c001550c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015510:	e8 eb b1 fe ff       	call   c0000700 <strcmp>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	85 c0                	test   eax,eax
c001551a:	0f 94 c0             	sete   al
c001551d:	84 c0                	test   al,al
c001551f:	74 0f                	je     c0015530 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0015521:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015529:	e9 86 00 00 00       	jmp    c00155b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001552e:	66 90                	xchg   ax,ax
c0015530:	83 ec 08             	sub    esp,0x8
c0015533:	68 80 e2 01 c0       	push   0xc001e280
c0015538:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001553c:	e8 bf b1 fe ff       	call   c0000700 <strcmp>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	85 c0                	test   eax,eax
c0015546:	0f 94 c0             	sete   al
c0015549:	84 c0                	test   al,al
c001554b:	74 0b                	je     c0015558 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001554d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015555:	eb 5d                	jmp    c00155b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015557:	90                   	nop
c0015558:	83 ec 08             	sub    esp,0x8
c001555b:	68 3c c3 01 c0       	push   0xc001c33c
c0015560:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015564:	e8 97 b1 fe ff       	call   c0000700 <strcmp>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	85 c0                	test   eax,eax
c001556e:	0f 94 c0             	sete   al
c0015571:	84 c0                	test   al,al
c0015573:	74 0b                	je     c0015580 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015575:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001557d:	eb 35                	jmp    c00155b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001557f:	90                   	nop
c0015580:	83 ec 08             	sub    esp,0x8
c0015583:	68 86 e2 01 c0       	push   0xc001e286
c0015588:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001558c:	e8 6f b1 fe ff       	call   c0000700 <strcmp>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	85 c0                	test   eax,eax
c0015596:	0f 94 c0             	sete   al
c0015599:	84 c0                	test   al,al
c001559b:	74 0b                	je     c00155a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001559d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00155a5:	eb 0d                	jmp    c00155b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00155a7:	90                   	nop
c00155a8:	b8 08 00 00 00       	mov    eax,0x8
c00155ad:	e9 ea 00 00 00       	jmp    c001569c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00155b2:	66 90                	xchg   ax,ax
c00155b4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00155bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00155c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00155c4:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c00155cb:	83 f8 ff             	cmp    eax,0xffffffff
c00155ce:	75 34                	jne    c0015604 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00155d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00155d4:	88 c2                	mov    dl,al
c00155d6:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c00155db:	01 d0                	add    eax,edx
c00155dd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00155e1:	8b 15 20 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022820
c00155e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00155eb:	89 14 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],edx
c00155f2:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c00155f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155fb:	89 14 85 c0 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd740],edx
c0015602:	eb 18                	jmp    c001561c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0015604:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015608:	88 c2                	mov    dl,al
c001560a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001560e:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c0015615:	01 d0                	add    eax,edx
c0015617:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001561b:	90                   	nop
c001561c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015620:	88 04 24             	mov    BYTE PTR [esp],al
c0015623:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001562b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015633:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0015638:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	68 00 20 00 00       	push   0x2000
c0015648:	e8 14 15 ff ff       	call   c0006b61 <malloc>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015654:	68 00 20 00 00       	push   0x2000
c0015659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001565d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015661:	50                   	push   eax
c0015662:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0015666:	50                   	push   eax
c0015667:	e8 56 fa fe ff       	call   c00050c2 <f_mkfs>
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015678:	75 0a                	jne    c0015684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001567a:	b8 00 00 00 00       	mov    eax,0x0
c001567f:	eb 1b                	jmp    c001569c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015681:	8d 76 00             	lea    esi,[esi+0x0]
c0015684:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0015689:	75 09                	jne    c0015694 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001568b:	b8 09 00 00 00       	mov    eax,0x9
c0015690:	eb 0a                	jmp    c001569c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015692:	66 90                	xchg   ax,ax
c0015694:	b8 01 00 00 00       	mov    eax,0x1
c0015699:	8d 76 00             	lea    esi,[esi+0x0]
c001569c:	83 c4 2c             	add    esp,0x2c
c001569f:	c3                   	ret    

c00156a0 <FAT::tryMount(LogicalDisk*, int)>:
c00156a0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00156a6:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c00156ab:	83 f8 14             	cmp    eax,0x14
c00156ae:	75 18                	jne    c00156c8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00156b0:	83 ec 0c             	sub    esp,0xc
c00156b3:	68 8c e2 01 c0       	push   0xc001e28c
c00156b8:	e8 82 9d ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	b0 00                	mov    al,0x0
c00156c2:	e9 e9 01 00 00       	jmp    c00158b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00156c7:	90                   	nop
c00156c8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00156cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00156d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00156db:	3d 00 02 00 00       	cmp    eax,0x200
c00156e0:	74 0a                	je     c00156ec <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00156e2:	b0 00                	mov    al,0x0
c00156e4:	e9 c7 01 00 00       	jmp    c00158b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00156e9:	8d 76 00             	lea    esi,[esi+0x0]
c00156ec:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00156f4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00156fb:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c0015702:	83 f8 ff             	cmp    eax,0xffffffff
c0015705:	74 09                	je     c0015710 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0015707:	b0 01                	mov    al,0x1
c0015709:	e9 a2 01 00 00       	jmp    c00158b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001570e:	66 90                	xchg   ax,ax
c0015710:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001571a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0015722:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0015729:	88 c2                	mov    dl,al
c001572b:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c0015730:	01 d0                	add    eax,edx
c0015732:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0015739:	8b 15 20 28 02 c0    	mov    edx,DWORD PTR ds:0xc0022820
c001573f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0015746:	89 14 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],edx
c001574d:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c0015752:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0015759:	89 14 85 c0 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd740],edx
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	68 34 02 00 00       	push   0x234
c0015768:	e8 f4 13 ff ff       	call   c0006b61 <malloc>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0015777:	83 ec 04             	sub    esp,0x4
c001577a:	6a 00                	push   0x0
c001577c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015783:	50                   	push   eax
c0015784:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001578b:	e8 58 e1 fe ff       	call   c00038e8 <f_mount>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001579a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00157a2:	74 1c                	je     c00157c0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00157a4:	83 ec 0c             	sub    esp,0xc
c00157a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00157ae:	e8 ce 13 ff ff       	call   c0006b81 <rfree>
c00157b3:	83 c4 10             	add    esp,0x10
c00157b6:	b0 00                	mov    al,0x0
c00157b8:	e9 f3 00 00 00       	jmp    c00158b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00157bd:	8d 76 00             	lea    esi,[esi+0x0]
c00157c0:	83 ec 04             	sub    esp,0x4
c00157c3:	68 00 01 00 00       	push   0x100
c00157c8:	6a 00                	push   0x0
c00157ca:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00157d1:	50                   	push   eax
c00157d2:	e8 19 ad fe ff       	call   c00004f0 <memset>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	83 ec 08             	sub    esp,0x8
c00157dd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00157e4:	50                   	push   eax
c00157e5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00157ec:	50                   	push   eax
c00157ed:	e8 ee af fe ff       	call   c00007e0 <strcat>
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	83 ec 08             	sub    esp,0x8
c00157f8:	68 9a e2 01 c0       	push   0xc001e29a
c00157fd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015804:	50                   	push   eax
c0015805:	e8 d6 af fe ff       	call   c00007e0 <strcat>
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	83 ec 04             	sub    esp,0x4
c0015810:	6a 01                	push   0x1
c0015812:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0015819:	50                   	push   eax
c001581a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001581e:	50                   	push   eax
c001581f:	e8 26 e1 fe ff       	call   c000394a <f_open>
c0015824:	83 c4 10             	add    esp,0x10
c0015827:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001582e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015835:	85 c0                	test   eax,eax
c0015837:	74 0b                	je     c0015844 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0015839:	78 31                	js     c001586c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001583b:	83 e8 04             	sub    eax,0x4
c001583e:	83 f8 01             	cmp    eax,0x1
c0015841:	77 29                	ja     c001586c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015843:	90                   	nop
c0015844:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015853:	50                   	push   eax
c0015854:	e8 a4 e8 fe ff       	call   c00040fd <f_close>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	90                   	nop
c001585d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015865:	74 41                	je     c00158a8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015867:	eb 33                	jmp    c001589c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015869:	8d 76 00             	lea    esi,[esi+0x0]
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015876:	e8 06 13 ff ff       	call   c0006b81 <rfree>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	83 ec 04             	sub    esp,0x4
c0015881:	6a 00                	push   0x0
c0015883:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001588a:	50                   	push   eax
c001588b:	6a 00                	push   0x0
c001588d:	e8 56 e0 fe ff       	call   c00038e8 <f_mount>
c0015892:	83 c4 10             	add    esp,0x10
c0015895:	b0 00                	mov    al,0x0
c0015897:	eb 17                	jmp    c00158b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015899:	8d 76 00             	lea    esi,[esi+0x0]
c001589c:	a1 20 28 02 c0       	mov    eax,ds:0xc0022820
c00158a1:	40                   	inc    eax
c00158a2:	a3 20 28 02 c0       	mov    ds:0xc0022820,eax
c00158a7:	90                   	nop
c00158a8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00158af:	90                   	nop
c00158b0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00158b6:	c3                   	ret    
c00158b7:	90                   	nop

c00158b8 <FAT::allocateSwapfile(char const*, int)>:
c00158b8:	55                   	push   ebp
c00158b9:	57                   	push   edi
c00158ba:	56                   	push   esi
c00158bb:	53                   	push   ebx
c00158bc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00158c2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00158cd:	83 ec 0c             	sub    esp,0xc
c00158d0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00158d7:	e8 85 12 ff ff       	call   c0006b61 <malloc>
c00158dc:	83 c4 10             	add    esp,0x10
c00158df:	89 c7                	mov    edi,eax
c00158e1:	a1 90 27 02 c0       	mov    eax,ds:0xc0022790
c00158e6:	83 ec 04             	sub    esp,0x4
c00158e9:	50                   	push   eax
c00158ea:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00158f1:	57                   	push   edi
c00158f2:	e8 6f 45 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015901:	83 ec 04             	sub    esp,0x4
c0015904:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015908:	50                   	push   eax
c0015909:	8d 44 24 18          	lea    eax,[esp+0x18]
c001590d:	50                   	push   eax
c001590e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015915:	e8 b8 48 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015924:	c1 e0 14             	shl    eax,0x14
c0015927:	89 c7                	mov    edi,eax
c0015929:	89 c5                	mov    ebp,eax
c001592b:	c1 fd 1f             	sar    ebp,0x1f
c001592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015936:	89 f9                	mov    ecx,edi
c0015938:	31 c1                	xor    ecx,eax
c001593a:	89 cb                	mov    ebx,ecx
c001593c:	89 e9                	mov    ecx,ebp
c001593e:	31 d1                	xor    ecx,edx
c0015940:	89 ce                	mov    esi,ecx
c0015942:	89 f0                	mov    eax,esi
c0015944:	09 d8                	or     eax,ebx
c0015946:	0f 84 9c 00 00 00    	je     c00159e8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015956:	e8 43 47 ff ff       	call   c000a09e <File::unlink()>
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	83 ec 08             	sub    esp,0x8
c0015961:	6a 12                	push   0x12
c0015963:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001596a:	e8 b7 45 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c001596f:	83 c4 10             	add    esp,0x10
c0015972:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015979:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001597f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015986:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001598d:	c1 e0 14             	shl    eax,0x14
c0015990:	83 ec 04             	sub    esp,0x4
c0015993:	6a 01                	push   0x1
c0015995:	50                   	push   eax
c0015996:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001599d:	e8 c0 f5 fe ff       	call   c0004f62 <f_expand>
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00159ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ae:	83 c0 10             	add    eax,0x10
c00159b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b3:	83 ec 0c             	sub    esp,0xc
c00159b6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00159ba:	52                   	push   edx
c00159bb:	8d 54 24 30          	lea    edx,[esp+0x30]
c00159bf:	52                   	push   edx
c00159c0:	6a 00                	push   0x0
c00159c2:	68 00 04 00 00       	push   0x400
c00159c7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00159ce:	ff d0                	call   eax
c00159d0:	83 c4 20             	add    esp,0x20
c00159d3:	83 ec 0c             	sub    esp,0xc
c00159d6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00159dd:	e8 a2 45 ff ff       	call   c0009f84 <File::close()>
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	8d 76 00             	lea    esi,[esi+0x0]
c00159e8:	83 ec 08             	sub    esp,0x8
c00159eb:	6a 01                	push   0x1
c00159ed:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00159f4:	e8 2d 45 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a05:	83 c0 0c             	add    eax,0xc
c0015a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0a:	83 ec 0c             	sub    esp,0xc
c0015a0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a11:	52                   	push   edx
c0015a12:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015a16:	52                   	push   edx
c0015a17:	6a 00                	push   0x0
c0015a19:	6a 04                	push   0x4
c0015a1b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015a22:	ff d0                	call   eax
c0015a24:	83 c4 20             	add    esp,0x20
c0015a27:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015a2e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015a34:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015a3b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015a42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015a45:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a56:	e8 29 45 ff ff       	call   c0009f84 <File::close()>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015a65:	ba 00 00 00 00       	mov    edx,0x0
c0015a6a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015a70:	5b                   	pop    ebx
c0015a71:	5e                   	pop    esi
c0015a72:	5f                   	pop    edi
c0015a73:	5d                   	pop    ebp
c0015a74:	c3                   	ret    
c0015a75:	90                   	nop
c0015a76:	66 90                	xchg   ax,ax

c0015a78 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015a78:	57                   	push   edi
c0015a79:	56                   	push   esi
c0015a7a:	53                   	push   ebx
c0015a7b:	81 ec 50 02 00 00    	sub    esp,0x250
c0015a81:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015a89:	74 0d                	je     c0015a98 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015a8b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015a93:	75 0f                	jne    c0015aa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015a95:	8d 76 00             	lea    esi,[esi+0x0]
c0015a98:	b8 04 00 00 00       	mov    eax,0x4
c0015a9d:	e9 36 01 00 00       	jmp    c0015bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015aa2:	66 90                	xchg   ax,ax
c0015aa4:	83 ec 08             	sub    esp,0x8
c0015aa7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015aae:	50                   	push   eax
c0015aaf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015ab6:	e8 05 e9 fe ff       	call   c00043c0 <f_readdir>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015ac5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015ad6:	83 c0 16             	add    eax,0x16
c0015ad9:	50                   	push   eax
c0015ada:	e8 81 aa fe ff       	call   c0000560 <strlen>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	ba 00 00 00 00       	mov    edx,0x0
c0015ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015aeb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015aef:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015af6:	25 ff 00 00 00       	and    eax,0xff
c0015afb:	83 e0 10             	and    eax,0x10
c0015afe:	74 08                	je     c0015b08 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015b00:	b8 02 00 00 00       	mov    eax,0x2
c0015b05:	eb 09                	jmp    c0015b10 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015b07:	90                   	nop
c0015b08:	b8 01 00 00 00       	mov    eax,0x1
c0015b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b14:	83 ec 08             	sub    esp,0x8
c0015b17:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015b1e:	83 c0 16             	add    eax,0x16
c0015b21:	50                   	push   eax
c0015b22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015b26:	83 c0 10             	add    eax,0x10
c0015b29:	50                   	push   eax
c0015b2a:	e8 f1 aa fe ff       	call   c0000620 <strcpy>
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015b39:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015b40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015b44:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015b4b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015b52:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015b59:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015b60:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015b67:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015b6e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015b75:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015b7c:	89 c6                	mov    esi,eax
c0015b7e:	89 d7                	mov    edi,edx
c0015b80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b82:	89 c8                	mov    eax,ecx
c0015b84:	89 fa                	mov    edx,edi
c0015b86:	89 f3                	mov    ebx,esi
c0015b88:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015b8f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015b96:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015b9d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015ba4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015baa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015bb1:	84 c0                	test   al,al
c0015bb3:	75 07                	jne    c0015bbc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015bb5:	b8 07 00 00 00       	mov    eax,0x7
c0015bba:	eb 1c                	jmp    c0015bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015bbc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015bc3:	85 c0                	test   eax,eax
c0015bc5:	75 09                	jne    c0015bd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015bc7:	b8 00 00 00 00       	mov    eax,0x0
c0015bcc:	eb 0a                	jmp    c0015bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015bce:	66 90                	xchg   ax,ax
c0015bd0:	b8 01 00 00 00       	mov    eax,0x1
c0015bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd8:	81 c4 50 02 00 00    	add    esp,0x250
c0015bde:	5b                   	pop    ebx
c0015bdf:	5e                   	pop    esi
c0015be0:	5f                   	pop    edi
c0015be1:	c3                   	ret    
c0015be2:	66 90                	xchg   ax,ax

c0015be4 <FAT::read(void*, unsigned long, void*, int*)>:
c0015be4:	83 ec 1c             	sub    esp,0x1c
c0015be7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015bec:	74 0a                	je     c0015bf8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015bee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015bf3:	75 0b                	jne    c0015c00 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf8:	b8 04 00 00 00       	mov    eax,0x4
c0015bfd:	eb 41                	jmp    c0015c40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015bff:	90                   	nop
c0015c00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c04:	50                   	push   eax
c0015c05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c11:	e8 ff df fe ff       	call   c0003c15 <f_read>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c21:	89 c2                	mov    edx,eax
c0015c23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c27:	89 10                	mov    DWORD PTR [eax],edx
c0015c29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c2d:	85 c0                	test   eax,eax
c0015c2f:	75 07                	jne    c0015c38 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015c31:	b8 00 00 00 00       	mov    eax,0x0
c0015c36:	eb 08                	jmp    c0015c40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015c38:	b8 01 00 00 00       	mov    eax,0x1
c0015c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c40:	83 c4 1c             	add    esp,0x1c
c0015c43:	c3                   	ret    

c0015c44 <FAT::write(void*, unsigned long, void*, int*)>:
c0015c44:	83 ec 1c             	sub    esp,0x1c
c0015c47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015c4c:	74 0a                	je     c0015c58 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015c4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015c53:	75 0b                	jne    c0015c60 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015c55:	8d 76 00             	lea    esi,[esi+0x0]
c0015c58:	b8 04 00 00 00       	mov    eax,0x4
c0015c5d:	eb 41                	jmp    c0015ca0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015c5f:	90                   	nop
c0015c60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c64:	50                   	push   eax
c0015c65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c71:	e8 9e e1 fe ff       	call   c0003e14 <f_write>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c81:	89 c2                	mov    edx,eax
c0015c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c87:	89 10                	mov    DWORD PTR [eax],edx
c0015c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c8d:	85 c0                	test   eax,eax
c0015c8f:	75 07                	jne    c0015c98 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015c91:	b8 00 00 00 00       	mov    eax,0x0
c0015c96:	eb 08                	jmp    c0015ca0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015c98:	b8 01 00 00 00       	mov    eax,0x1
c0015c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015ca0:	83 c4 1c             	add    esp,0x1c
c0015ca3:	c3                   	ret    

c0015ca4 <FAT::close(void*)>:
c0015ca4:	83 ec 1c             	sub    esp,0x1c
c0015ca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015cac:	75 0a                	jne    c0015cb8 <FAT::close(void*)+0x14>
c0015cae:	b8 04 00 00 00       	mov    eax,0x4
c0015cb3:	eb 3f                	jmp    c0015cf4 <FAT::close(void*)+0x50>
c0015cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb8:	83 ec 0c             	sub    esp,0xc
c0015cbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015cbf:	e8 39 e4 fe ff       	call   c00040fd <f_close>
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ccb:	83 ec 0c             	sub    esp,0xc
c0015cce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015cd2:	e8 9a 0e ff ff       	call   c0006b71 <free>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cde:	85 c0                	test   eax,eax
c0015ce0:	75 0a                	jne    c0015cec <FAT::close(void*)+0x48>
c0015ce2:	b8 00 00 00 00       	mov    eax,0x0
c0015ce7:	eb 0b                	jmp    c0015cf4 <FAT::close(void*)+0x50>
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	b8 01 00 00 00       	mov    eax,0x1
c0015cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf4:	83 c4 1c             	add    esp,0x1c
c0015cf7:	c3                   	ret    

c0015cf8 <FAT::closeDir(void*)>:
c0015cf8:	83 ec 1c             	sub    esp,0x1c
c0015cfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015d00:	75 0a                	jne    c0015d0c <FAT::closeDir(void*)+0x14>
c0015d02:	b8 04 00 00 00       	mov    eax,0x4
c0015d07:	eb 3f                	jmp    c0015d48 <FAT::closeDir(void*)+0x50>
c0015d09:	8d 76 00             	lea    esi,[esi+0x0]
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d13:	e8 86 e6 fe ff       	call   c000439e <f_closedir>
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d1f:	83 ec 0c             	sub    esp,0xc
c0015d22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d26:	e8 46 0e ff ff       	call   c0006b71 <free>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d32:	85 c0                	test   eax,eax
c0015d34:	75 0a                	jne    c0015d40 <FAT::closeDir(void*)+0x48>
c0015d36:	b8 00 00 00 00       	mov    eax,0x0
c0015d3b:	eb 0b                	jmp    c0015d48 <FAT::closeDir(void*)+0x50>
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d40:	b8 01 00 00 00       	mov    eax,0x1
c0015d45:	8d 76 00             	lea    esi,[esi+0x0]
c0015d48:	83 c4 1c             	add    esp,0x1c
c0015d4b:	c3                   	ret    

c0015d4c <FAT::seek(void*, unsigned long long)>:
c0015d4c:	83 ec 2c             	sub    esp,0x2c
c0015d4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015d64:	75 0a                	jne    c0015d70 <FAT::seek(void*, unsigned long long)+0x24>
c0015d66:	b8 04 00 00 00       	mov    eax,0x4
c0015d6b:	eb 33                	jmp    c0015da0 <FAT::seek(void*, unsigned long long)+0x54>
c0015d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d74:	83 ec 08             	sub    esp,0x8
c0015d77:	50                   	push   eax
c0015d78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d7c:	e8 ab e3 fe ff       	call   c000412c <f_lseek>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d8c:	85 c0                	test   eax,eax
c0015d8e:	75 08                	jne    c0015d98 <FAT::seek(void*, unsigned long long)+0x4c>
c0015d90:	b8 00 00 00 00       	mov    eax,0x0
c0015d95:	eb 09                	jmp    c0015da0 <FAT::seek(void*, unsigned long long)+0x54>
c0015d97:	90                   	nop
c0015d98:	b8 01 00 00 00       	mov    eax,0x1
c0015d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015da0:	83 c4 2c             	add    esp,0x2c
c0015da3:	c3                   	ret    

c0015da4 <fatWrapperReadDisk>:
c0015da4:	53                   	push   ebx
c0015da5:	83 ec 18             	sub    esp,0x18
c0015da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015db0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015db4:	25 ff 00 00 00       	and    eax,0xff
c0015db9:	8b 0c 85 00 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde800]
c0015dc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dc8:	ba 00 00 00 00       	mov    edx,0x0
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dd4:	53                   	push   ebx
c0015dd5:	52                   	push   edx
c0015dd6:	50                   	push   eax
c0015dd7:	51                   	push   ecx
c0015dd8:	e8 fb 61 ff ff       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0015ddd:	83 c4 20             	add    esp,0x20
c0015de0:	83 c4 18             	add    esp,0x18
c0015de3:	5b                   	pop    ebx
c0015de4:	c3                   	ret    
c0015de5:	8d 76 00             	lea    esi,[esi+0x0]

c0015de8 <fatWrapperWriteDisk>:
c0015de8:	53                   	push   ebx
c0015de9:	83 ec 18             	sub    esp,0x18
c0015dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015df0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015df4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015df8:	25 ff 00 00 00       	and    eax,0xff
c0015dfd:	8b 0c 85 00 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde800]
c0015e04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e0c:	ba 00 00 00 00       	mov    edx,0x0
c0015e11:	83 ec 0c             	sub    esp,0xc
c0015e14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e18:	53                   	push   ebx
c0015e19:	52                   	push   edx
c0015e1a:	50                   	push   eax
c0015e1b:	51                   	push   ecx
c0015e1c:	e8 23 62 ff ff       	call   c000c044 <LogicalDisk::write(unsigned long long, int, void*)>
c0015e21:	83 c4 20             	add    esp,0x20
c0015e24:	83 c4 18             	add    esp,0x18
c0015e27:	5b                   	pop    ebx
c0015e28:	c3                   	ret    
c0015e29:	8d 76 00             	lea    esi,[esi+0x0]

c0015e2c <fatWrapperIoctl>:
c0015e2c:	53                   	push   ebx
c0015e2d:	83 ec 28             	sub    esp,0x28
c0015e30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015e34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0015e3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0015e40:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0015e45:	75 35                	jne    c0015e7c <fatWrapperIoctl+0x50>
c0015e47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e4f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e53:	25 ff 00 00 00       	and    eax,0xff
c0015e58:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0015e5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015e65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e6f:	66 89 02             	mov    WORD PTR [edx],ax
c0015e72:	b8 00 00 00 00       	mov    eax,0x0
c0015e77:	e9 c4 00 00 00       	jmp    c0015f40 <fatWrapperIoctl+0x114>
c0015e7c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0015e81:	75 75                	jne    c0015ef8 <fatWrapperIoctl+0xcc>
c0015e83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e8f:	25 ff 00 00 00       	and    eax,0xff
c0015e94:	8b 04 85 00 18 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde800]
c0015e9b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ea1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015ea7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0015ead:	89 c8                	mov    eax,ecx
c0015eaf:	89 da                	mov    edx,ebx
c0015eb1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015eb5:	c1 e0 0a             	shl    eax,0xa
c0015eb8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0015ebc:	81 e1 ff 00 00 00    	and    ecx,0xff
c0015ec2:	8b 0c 8d 00 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde800]
c0015ec9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0015ecf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0015ed5:	89 cb                	mov    ebx,ecx
c0015ed7:	c1 fb 1f             	sar    ebx,0x1f
c0015eda:	53                   	push   ebx
c0015edb:	51                   	push   ecx
c0015edc:	52                   	push   edx
c0015edd:	50                   	push   eax
c0015ede:	e8 5d 56 00 00       	call   c001b540 <__udivdi3>
c0015ee3:	83 c4 10             	add    esp,0x10
c0015ee6:	89 c2                	mov    edx,eax
c0015ee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015eec:	89 10                	mov    DWORD PTR [eax],edx
c0015eee:	b8 00 00 00 00       	mov    eax,0x0
c0015ef3:	eb 4b                	jmp    c0015f40 <fatWrapperIoctl+0x114>
c0015ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ef8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0015efd:	75 09                	jne    c0015f08 <fatWrapperIoctl+0xdc>
c0015eff:	b8 00 00 00 00       	mov    eax,0x0
c0015f04:	eb 3a                	jmp    c0015f40 <fatWrapperIoctl+0x114>
c0015f06:	66 90                	xchg   ax,ax
c0015f08:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0015f0d:	75 19                	jne    c0015f28 <fatWrapperIoctl+0xfc>
c0015f0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f1b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0015f21:	b8 00 00 00 00       	mov    eax,0x0
c0015f26:	eb 18                	jmp    c0015f40 <fatWrapperIoctl+0x114>
c0015f28:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0015f2d:	75 09                	jne    c0015f38 <fatWrapperIoctl+0x10c>
c0015f2f:	b8 00 00 00 00       	mov    eax,0x0
c0015f34:	eb 0a                	jmp    c0015f40 <fatWrapperIoctl+0x114>
c0015f36:	66 90                	xchg   ax,ax
c0015f38:	b8 04 00 00 00       	mov    eax,0x4
c0015f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f40:	83 c4 28             	add    esp,0x28
c0015f43:	5b                   	pop    ebx
c0015f44:	c3                   	ret    
c0015f45:	90                   	nop
c0015f46:	66 90                	xchg   ax,ax

c0015f48 <FAT::FAT()>:
c0015f48:	83 ec 1c             	sub    esp,0x1c
c0015f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f4f:	83 ec 0c             	sub    esp,0xc
c0015f52:	50                   	push   eax
c0015f53:	e8 ba 3c ff ff       	call   c0009c12 <Filesystem::Filesystem()>
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	ba b0 e2 01 c0       	mov    edx,0xc001e2b0
c0015f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f64:	89 10                	mov    DWORD PTR [eax],edx
c0015f66:	c7 05 20 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022820,0x0
c0015f70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015f78:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0015f7d:	7f 15                	jg     c0015f94 <FAT::FAT()+0x4c>
c0015f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f83:	c7 04 85 40 28 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd7c0],0xffffffff
c0015f8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015f92:	eb e4                	jmp    c0015f78 <FAT::FAT()+0x30>
c0015f94:	90                   	nop
c0015f95:	83 c4 1c             	add    esp,0x1c
c0015f98:	c3                   	ret    
c0015f99:	90                   	nop
c0015f9a:	66 90                	xchg   ax,ax

c0015f9c <FAT::fixFilepath(char*)>:
c0015f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0015fa2:	3c 40                	cmp    al,0x40
c0015fa4:	7e 2e                	jle    c0015fd4 <FAT::fixFilepath(char*)+0x38>
c0015fa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015faa:	8a 00                	mov    al,BYTE PTR [eax]
c0015fac:	83 e8 41             	sub    eax,0x41
c0015faf:	88 c2                	mov    dl,al
c0015fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fb5:	88 10                	mov    BYTE PTR [eax],dl
c0015fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fbb:	8a 00                	mov    al,BYTE PTR [eax]
c0015fbd:	0f be c0             	movsx  eax,al
c0015fc0:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c0015fc7:	83 c0 30             	add    eax,0x30
c0015fca:	88 c2                	mov    dl,al
c0015fcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fd0:	88 10                	mov    BYTE PTR [eax],dl
c0015fd2:	66 90                	xchg   ax,ax
c0015fd4:	90                   	nop
c0015fd5:	c3                   	ret    
c0015fd6:	66 90                	xchg   ax,ax

c0015fd8 <FAT::open(char const*, void**, FileOpenMode)>:
c0015fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0015fe6:	74 0c                	je     c0015ff4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0015fe8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0015ff0:	75 0e                	jne    c0016000 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0015ff2:	66 90                	xchg   ax,ax
c0015ff4:	b8 04 00 00 00       	mov    eax,0x4
c0015ff9:	e9 0a 01 00 00       	jmp    c0016108 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0015ffe:	66 90                	xchg   ax,ax
c0016000:	83 ec 08             	sub    esp,0x8
c0016003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001600a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001600e:	50                   	push   eax
c001600f:	e8 0c a6 fe ff       	call   c0000620 <strcpy>
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	83 ec 08             	sub    esp,0x8
c001601a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001601e:	50                   	push   eax
c001601f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016026:	e8 71 ff ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c001602b:	83 c4 10             	add    esp,0x10
c001602e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016036:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001603d:	83 e0 01             	and    eax,0x1
c0016040:	74 0a                	je     c001604c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016042:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001604a:	66 90                	xchg   ax,ax
c001604c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016053:	83 e0 04             	and    eax,0x4
c0016056:	74 10                	je     c0016068 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016058:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016060:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001606f:	83 e0 02             	and    eax,0x2
c0016072:	74 08                	je     c001607c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016074:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001607c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016083:	83 e0 08             	and    eax,0x8
c0016086:	74 08                	je     c0016090 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016088:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016097:	83 e0 10             	and    eax,0x10
c001609a:	74 08                	je     c00160a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001609c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	68 28 02 00 00       	push   0x228
c00160ac:	e8 b0 0a ff ff       	call   c0006b61 <malloc>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	89 c2                	mov    edx,eax
c00160b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00160bd:	89 10                	mov    DWORD PTR [eax],edx
c00160bf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00160c6:	31 d2                	xor    edx,edx
c00160c8:	88 c2                	mov    dl,al
c00160ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00160d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00160d3:	83 ec 04             	sub    esp,0x4
c00160d6:	52                   	push   edx
c00160d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00160db:	52                   	push   edx
c00160dc:	50                   	push   eax
c00160dd:	e8 68 d8 fe ff       	call   c000394a <f_open>
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00160ec:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00160f4:	74 0a                	je     c0016100 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00160f6:	b8 01 00 00 00       	mov    eax,0x1
c00160fb:	eb 0b                	jmp    c0016108 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00160fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016100:	b8 00 00 00 00       	mov    eax,0x0
c0016105:	8d 76 00             	lea    esi,[esi+0x0]
c0016108:	81 c4 1c 01 00 00    	add    esp,0x11c
c001610e:	c3                   	ret    
c001610f:	90                   	nop

c0016110 <FAT::openDir(char const*, void**)>:
c0016110:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016116:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001611e:	74 0c                	je     c001612c <FAT::openDir(char const*, void**)+0x1c>
c0016120:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016128:	75 0e                	jne    c0016138 <FAT::openDir(char const*, void**)+0x28>
c001612a:	66 90                	xchg   ax,ax
c001612c:	b8 04 00 00 00       	mov    eax,0x4
c0016131:	e9 82 00 00 00       	jmp    c00161b8 <FAT::openDir(char const*, void**)+0xa8>
c0016136:	66 90                	xchg   ax,ax
c0016138:	83 ec 08             	sub    esp,0x8
c001613b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016146:	50                   	push   eax
c0016147:	e8 d4 a4 fe ff       	call   c0000620 <strcpy>
c001614c:	83 c4 10             	add    esp,0x10
c001614f:	83 ec 08             	sub    esp,0x8
c0016152:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016156:	50                   	push   eax
c0016157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001615e:	e8 39 fe ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	83 ec 0c             	sub    esp,0xc
c0016169:	6a 30                	push   0x30
c001616b:	e8 f1 09 ff ff       	call   c0006b61 <malloc>
c0016170:	83 c4 10             	add    esp,0x10
c0016173:	89 c2                	mov    edx,eax
c0016175:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001617c:	89 10                	mov    DWORD PTR [eax],edx
c001617e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016185:	8b 00                	mov    eax,DWORD PTR [eax]
c0016187:	83 ec 08             	sub    esp,0x8
c001618a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001618e:	52                   	push   edx
c001618f:	50                   	push   eax
c0016190:	e8 3e e1 fe ff       	call   c00042d3 <f_opendir>
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001619f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00161a7:	74 07                	je     c00161b0 <FAT::openDir(char const*, void**)+0xa0>
c00161a9:	b8 01 00 00 00       	mov    eax,0x1
c00161ae:	eb 08                	jmp    c00161b8 <FAT::openDir(char const*, void**)+0xa8>
c00161b0:	b8 00 00 00 00       	mov    eax,0x0
c00161b5:	8d 76 00             	lea    esi,[esi+0x0]
c00161b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00161be:	c3                   	ret    
c00161bf:	90                   	nop

c00161c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00161c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00161c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00161ce:	75 0c                	jne    c00161dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00161d0:	b8 04 00 00 00       	mov    eax,0x4
c00161d5:	e9 d6 00 00 00       	jmp    c00162b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00161da:	66 90                	xchg   ax,ax
c00161dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00161e4:	75 0a                	jne    c00161f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00161e6:	b8 04 00 00 00       	mov    eax,0x4
c00161eb:	e9 c0 00 00 00       	jmp    c00162b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00161f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00161f8:	75 0a                	jne    c0016204 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00161fa:	b8 04 00 00 00       	mov    eax,0x4
c00161ff:	e9 ac 00 00 00       	jmp    c00162b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016204:	83 ec 08             	sub    esp,0x8
c0016207:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001620e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016215:	50                   	push   eax
c0016216:	e8 05 a4 fe ff       	call   c0000620 <strcpy>
c001621b:	83 c4 10             	add    esp,0x10
c001621e:	83 ec 08             	sub    esp,0x8
c0016221:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016228:	50                   	push   eax
c0016229:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016230:	e8 67 fd ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	83 ec 08             	sub    esp,0x8
c001623b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001623f:	50                   	push   eax
c0016240:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016247:	50                   	push   eax
c0016248:	e8 05 e2 fe ff       	call   c0004452 <f_stat>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016257:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001625e:	85 c0                	test   eax,eax
c0016260:	74 0a                	je     c001626c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016262:	83 f8 04             	cmp    eax,0x4
c0016265:	74 39                	je     c00162a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016267:	eb 3f                	jmp    c00162a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016269:	8d 76 00             	lea    esi,[esi+0x0]
c001626c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016270:	25 ff 00 00 00       	and    eax,0xff
c0016275:	83 e0 10             	and    eax,0x10
c0016278:	0f 95 c2             	setne  dl
c001627b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016282:	88 10                	mov    BYTE PTR [eax],dl
c0016284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016288:	ba 00 00 00 00       	mov    edx,0x0
c001628d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016294:	89 01                	mov    DWORD PTR [ecx],eax
c0016296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016299:	b8 00 00 00 00       	mov    eax,0x0
c001629e:	eb 10                	jmp    c00162b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00162a0:	b8 02 00 00 00       	mov    eax,0x2
c00162a5:	eb 09                	jmp    c00162b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00162a7:	90                   	nop
c00162a8:	b8 01 00 00 00       	mov    eax,0x1
c00162ad:	8d 76 00             	lea    esi,[esi+0x0]
c00162b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00162b6:	c3                   	ret    
c00162b7:	90                   	nop

c00162b8 <FAT::unlink(char const*)>:
c00162b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00162be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00162c6:	75 08                	jne    c00162d0 <FAT::unlink(char const*)+0x18>
c00162c8:	b8 04 00 00 00       	mov    eax,0x4
c00162cd:	eb 61                	jmp    c0016330 <FAT::unlink(char const*)+0x78>
c00162cf:	90                   	nop
c00162d0:	83 ec 08             	sub    esp,0x8
c00162d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162de:	50                   	push   eax
c00162df:	e8 3c a3 fe ff       	call   c0000620 <strcpy>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	83 ec 08             	sub    esp,0x8
c00162ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00162ee:	50                   	push   eax
c00162ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162f6:	e8 a1 fc ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016305:	50                   	push   eax
c0016306:	e8 ac e3 fe ff       	call   c00046b7 <f_unlink>
c001630b:	83 c4 10             	add    esp,0x10
c001630e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016315:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001631c:	85 c0                	test   eax,eax
c001631e:	75 08                	jne    c0016328 <FAT::unlink(char const*)+0x70>
c0016320:	b8 00 00 00 00       	mov    eax,0x0
c0016325:	eb 09                	jmp    c0016330 <FAT::unlink(char const*)+0x78>
c0016327:	90                   	nop
c0016328:	b8 01 00 00 00       	mov    eax,0x1
c001632d:	8d 76 00             	lea    esi,[esi+0x0]
c0016330:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016336:	c3                   	ret    
c0016337:	90                   	nop

c0016338 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0016338:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001633e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016345:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001634c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016354:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001635c:	75 0a                	jne    c0016368 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001635e:	b8 04 00 00 00       	mov    eax,0x4
c0016363:	e9 54 01 00 00       	jmp    c00164bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016368:	83 ec 08             	sub    esp,0x8
c001636b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016372:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016376:	50                   	push   eax
c0016377:	e8 a4 a2 fe ff       	call   c0000620 <strcpy>
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	83 ec 08             	sub    esp,0x8
c0016382:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016386:	50                   	push   eax
c0016387:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001638e:	e8 09 fc ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001639e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00163a6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00163aa:	25 ff 00 00 00       	and    eax,0xff
c00163af:	83 e0 01             	and    eax,0x1
c00163b2:	74 08                	je     c00163bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00163b4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00163bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00163c0:	25 ff 00 00 00       	and    eax,0xff
c00163c5:	83 e0 02             	and    eax,0x2
c00163c8:	74 0a                	je     c00163d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00163ca:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00163d2:	66 90                	xchg   ax,ax
c00163d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00163d8:	25 ff 00 00 00       	and    eax,0xff
c00163dd:	83 e0 04             	and    eax,0x4
c00163e0:	74 0a                	je     c00163ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00163e2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00163ea:	66 90                	xchg   ax,ax
c00163ec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00163f0:	25 ff 00 00 00       	and    eax,0xff
c00163f5:	83 e0 08             	and    eax,0x8
c00163f8:	74 0a                	je     c0016404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00163fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0016402:	66 90                	xchg   ax,ax
c0016404:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016408:	25 ff 00 00 00       	and    eax,0xff
c001640d:	83 e0 01             	and    eax,0x1
c0016410:	74 0a                	je     c001641c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0016412:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001641a:	66 90                	xchg   ax,ax
c001641c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016420:	25 ff 00 00 00       	and    eax,0xff
c0016425:	83 e0 02             	and    eax,0x2
c0016428:	74 0a                	je     c0016434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001642a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0016432:	66 90                	xchg   ax,ax
c0016434:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016438:	25 ff 00 00 00       	and    eax,0xff
c001643d:	83 e0 04             	and    eax,0x4
c0016440:	74 0a                	je     c001644c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0016442:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001644a:	66 90                	xchg   ax,ax
c001644c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016450:	25 ff 00 00 00       	and    eax,0xff
c0016455:	83 e0 08             	and    eax,0x8
c0016458:	74 0a                	je     c0016464 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001645a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0016462:	66 90                	xchg   ax,ax
c0016464:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001646b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0016472:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0016479:	31 d2                	xor    edx,edx
c001647b:	88 c2                	mov    dl,al
c001647d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0016484:	25 ff 00 00 00       	and    eax,0xff
c0016489:	83 ec 04             	sub    esp,0x4
c001648c:	52                   	push   edx
c001648d:	50                   	push   eax
c001648e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016492:	50                   	push   eax
c0016493:	e8 92 e6 fe ff       	call   c0004b2a <f_chmod>
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00164a2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00164a9:	85 c0                	test   eax,eax
c00164ab:	75 07                	jne    c00164b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00164ad:	b8 00 00 00 00       	mov    eax,0x0
c00164b2:	eb 08                	jmp    c00164bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00164b4:	b8 01 00 00 00       	mov    eax,0x1
c00164b9:	8d 76 00             	lea    esi,[esi+0x0]
c00164bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164c2:	c3                   	ret    
c00164c3:	90                   	nop

c00164c4 <FAT::rename(char const*, char const*)>:
c00164c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00164ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00164d2:	74 0c                	je     c00164e0 <FAT::rename(char const*, char const*)+0x1c>
c00164d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00164dc:	75 0e                	jne    c00164ec <FAT::rename(char const*, char const*)+0x28>
c00164de:	66 90                	xchg   ax,ax
c00164e0:	b8 04 00 00 00       	mov    eax,0x4
c00164e5:	e9 9e 00 00 00       	jmp    c0016588 <FAT::rename(char const*, char const*)+0xc4>
c00164ea:	66 90                	xchg   ax,ax
c00164ec:	83 ec 08             	sub    esp,0x8
c00164ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00164f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00164fd:	50                   	push   eax
c00164fe:	e8 1d a1 fe ff       	call   c0000620 <strcpy>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	83 ec 08             	sub    esp,0x8
c0016509:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0016510:	50                   	push   eax
c0016511:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016518:	e8 7f fa ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	83 ec 08             	sub    esp,0x8
c0016523:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001652a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001652e:	50                   	push   eax
c001652f:	e8 ec a0 fe ff       	call   c0000620 <strcpy>
c0016534:	83 c4 10             	add    esp,0x10
c0016537:	83 ec 08             	sub    esp,0x8
c001653a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001653e:	50                   	push   eax
c001653f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016546:	e8 51 fa ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	83 ec 08             	sub    esp,0x8
c0016551:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016555:	50                   	push   eax
c0016556:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001655d:	50                   	push   eax
c001655e:	e8 11 e4 fe ff       	call   c0004974 <f_rename>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001656d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016574:	85 c0                	test   eax,eax
c0016576:	75 08                	jne    c0016580 <FAT::rename(char const*, char const*)+0xbc>
c0016578:	b8 00 00 00 00       	mov    eax,0x0
c001657d:	eb 09                	jmp    c0016588 <FAT::rename(char const*, char const*)+0xc4>
c001657f:	90                   	nop
c0016580:	b8 01 00 00 00       	mov    eax,0x1
c0016585:	8d 76 00             	lea    esi,[esi+0x0]
c0016588:	81 c4 1c 02 00 00    	add    esp,0x21c
c001658e:	c3                   	ret    
c001658f:	90                   	nop

c0016590 <FAT::mkdir(char const*)>:
c0016590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001659e:	75 08                	jne    c00165a8 <FAT::mkdir(char const*)+0x18>
c00165a0:	b8 04 00 00 00       	mov    eax,0x4
c00165a5:	eb 61                	jmp    c0016608 <FAT::mkdir(char const*)+0x78>
c00165a7:	90                   	nop
c00165a8:	83 ec 08             	sub    esp,0x8
c00165ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00165b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165b6:	50                   	push   eax
c00165b7:	e8 64 a0 fe ff       	call   c0000620 <strcpy>
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	83 ec 08             	sub    esp,0x8
c00165c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00165c6:	50                   	push   eax
c00165c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00165ce:	e8 c9 f9 ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c00165d3:	83 c4 10             	add    esp,0x10
c00165d6:	83 ec 0c             	sub    esp,0xc
c00165d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165dd:	50                   	push   eax
c00165de:	e8 f6 e1 fe ff       	call   c00047d9 <f_mkdir>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00165ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00165f4:	85 c0                	test   eax,eax
c00165f6:	75 08                	jne    c0016600 <FAT::mkdir(char const*)+0x70>
c00165f8:	b8 00 00 00 00       	mov    eax,0x0
c00165fd:	eb 09                	jmp    c0016608 <FAT::mkdir(char const*)+0x78>
c00165ff:	90                   	nop
c0016600:	b8 01 00 00 00       	mov    eax,0x1
c0016605:	8d 76 00             	lea    esi,[esi+0x0]
c0016608:	81 c4 1c 01 00 00    	add    esp,0x11c
c001660e:	c3                   	ret    
c001660f:	90                   	nop

c0016610 <FAT::exists(char const*)>:
c0016610:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016616:	83 ec 08             	sub    esp,0x8
c0016619:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016620:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016624:	50                   	push   eax
c0016625:	e8 f6 9f fe ff       	call   c0000620 <strcpy>
c001662a:	83 c4 10             	add    esp,0x10
c001662d:	83 ec 08             	sub    esp,0x8
c0016630:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016634:	50                   	push   eax
c0016635:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001663c:	e8 5b f9 ff ff       	call   c0015f9c <FAT::fixFilepath(char*)>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	83 ec 08             	sub    esp,0x8
c0016647:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001664e:	50                   	push   eax
c001664f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016653:	50                   	push   eax
c0016654:	e8 f9 dd fe ff       	call   c0004452 <f_stat>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016663:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001666a:	85 c0                	test   eax,eax
c001666c:	75 06                	jne    c0016674 <FAT::exists(char const*)+0x64>
c001666e:	b0 01                	mov    al,0x1
c0016670:	eb 06                	jmp    c0016678 <FAT::exists(char const*)+0x68>
c0016672:	66 90                	xchg   ax,ax
c0016674:	b0 00                	mov    al,0x0
c0016676:	66 90                	xchg   ax,ax
c0016678:	81 c4 2c 02 00 00    	add    esp,0x22c
c001667e:	c3                   	ret    
c001667f:	90                   	nop

c0016680 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0016680:	b8 08 00 00 00       	mov    eax,0x8
c0016685:	c3                   	ret    

c0016686 <ISO9660::seek(void*, unsigned long long)>:
c0016686:	53                   	push   ebx
c0016687:	b8 04 00 00 00       	mov    eax,0x4
c001668c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016690:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016694:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016698:	85 d2                	test   edx,edx
c001669a:	74 17                	je     c00166b3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001669c:	89 c8                	mov    eax,ecx
c001669e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00166a1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00166a4:	b8 01 00 00 00       	mov    eax,0x1
c00166a9:	73 08                	jae    c00166b3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00166ab:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00166ae:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00166b1:	31 c0                	xor    eax,eax
c00166b3:	5b                   	pop    ebx
c00166b4:	c3                   	ret    
c00166b5:	90                   	nop

c00166b6 <ISO9660::tell(void*, unsigned long long*)>:
c00166b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166be:	85 d2                	test   edx,edx
c00166c0:	74 12                	je     c00166d4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00166c2:	85 c0                	test   eax,eax
c00166c4:	74 0e                	je     c00166d4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00166c6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00166c9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00166cc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00166cf:	89 10                	mov    DWORD PTR [eax],edx
c00166d1:	31 c0                	xor    eax,eax
c00166d3:	c3                   	ret    
c00166d4:	b8 04 00 00 00       	mov    eax,0x4
c00166d9:	c3                   	ret    

c00166da <ISO9660::getName()>:
c00166da:	b8 10 e3 01 c0       	mov    eax,0xc001e310
c00166df:	c3                   	ret    

c00166e0 <ISO9660::stat(void*, unsigned long long*)>:
c00166e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166e8:	85 d2                	test   edx,edx
c00166ea:	74 12                	je     c00166fe <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00166ec:	85 c0                	test   eax,eax
c00166ee:	74 0e                	je     c00166fe <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00166f0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166f3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00166f6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00166f9:	89 10                	mov    DWORD PTR [eax],edx
c00166fb:	31 c0                	xor    eax,eax
c00166fd:	c3                   	ret    
c00166fe:	b8 04 00 00 00       	mov    eax,0x4
c0016703:	c3                   	ret    

c0016704 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0016704:	b8 01 00 00 00       	mov    eax,0x1
c0016709:	c3                   	ret    

c001670a <ISO9660::unlink(char const*)>:
c001670a:	b8 01 00 00 00       	mov    eax,0x1
c001670f:	c3                   	ret    

c0016710 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0016710:	b8 01 00 00 00       	mov    eax,0x1
c0016715:	c3                   	ret    

c0016716 <ISO9660::rename(char const*, char const*)>:
c0016716:	b8 01 00 00 00       	mov    eax,0x1
c001671b:	c3                   	ret    

c001671c <ISO9660::mkdir(char const*)>:
c001671c:	b8 01 00 00 00       	mov    eax,0x1
c0016721:	c3                   	ret    

c0016722 <ISO9660::close(void*)>:
c0016722:	83 ec 0c             	sub    esp,0xc
c0016725:	b8 04 00 00 00       	mov    eax,0x4
c001672a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001672e:	85 d2                	test   edx,edx
c0016730:	74 0e                	je     c0016740 <ISO9660::close(void*)+0x1e>
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	52                   	push   edx
c0016736:	e8 36 04 ff ff       	call   c0006b71 <free>
c001673b:	83 c4 10             	add    esp,0x10
c001673e:	31 c0                	xor    eax,eax
c0016740:	83 c4 0c             	add    esp,0xc
c0016743:	c3                   	ret    

c0016744 <ISO9660::closeDir(void*)>:
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	b8 04 00 00 00       	mov    eax,0x4
c001674c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016750:	85 d2                	test   edx,edx
c0016752:	74 0e                	je     c0016762 <ISO9660::closeDir(void*)+0x1e>
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	52                   	push   edx
c0016758:	e8 14 04 ff ff       	call   c0006b71 <free>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	31 c0                	xor    eax,eax
c0016762:	83 c4 0c             	add    esp,0xc
c0016765:	c3                   	ret    

c0016766 <ISO9660::~ISO9660()>:
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	ba 94 e3 01 c0       	mov    edx,0xc001e394
c001676e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016772:	89 10                	mov    DWORD PTR [eax],edx
c0016774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	50                   	push   eax
c001677c:	e8 b5 34 ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c0016781:	83 c4 10             	add    esp,0x10
c0016784:	90                   	nop
c0016785:	83 c4 0c             	add    esp,0xc
c0016788:	c3                   	ret    
c0016789:	90                   	nop

c001678a <ISO9660::~ISO9660()>:
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016794:	e8 cd ff ff ff       	call   c0016766 <ISO9660::~ISO9660()>
c0016799:	83 c4 10             	add    esp,0x10
c001679c:	83 ec 08             	sub    esp,0x8
c001679f:	6a 08                	push   0x8
c00167a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a5:	e8 50 30 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    

c00167b1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00167b1:	55                   	push   ebp
c00167b2:	31 c9                	xor    ecx,ecx
c00167b4:	57                   	push   edi
c00167b5:	56                   	push   esi
c00167b6:	53                   	push   ebx
c00167b7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00167bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00167bf:	89 eb                	mov    ebx,ebp
c00167c1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00167c5:	39 ce                	cmp    esi,ecx
c00167c7:	7e 17                	jle    c00167e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00167c9:	31 d2                	xor    edx,edx
c00167cb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00167cf:	7d 13                	jge    c00167e4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00167d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00167d5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00167d8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00167db:	75 0d                	jne    c00167ea <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00167dd:	42                   	inc    edx
c00167de:	eb eb                	jmp    c00167cb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00167e0:	31 c0                	xor    eax,eax
c00167e2:	eb 0a                	jmp    c00167ee <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00167e4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00167e8:	eb 04                	jmp    c00167ee <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00167ea:	41                   	inc    ecx
c00167eb:	43                   	inc    ebx
c00167ec:	eb d7                	jmp    c00167c5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00167ee:	5b                   	pop    ebx
c00167ef:	5e                   	pop    esi
c00167f0:	5f                   	pop    edi
c00167f1:	5d                   	pop    ebp
c00167f2:	c3                   	ret    

c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00167f3:	57                   	push   edi
c00167f4:	56                   	push   esi
c00167f5:	53                   	push   ebx
c00167f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167fa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016802:	39 35 24 29 02 c0    	cmp    DWORD PTR ds:0xc0022924,esi
c0016808:	75 08                	jne    c0016812 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001680a:	38 1d d4 ec 01 c0    	cmp    BYTE PTR ds:0xc001ecd4,bl
c0016810:	74 59                	je     c001686b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0016812:	83 ec 0c             	sub    esp,0xc
c0016815:	31 d2                	xor    edx,edx
c0016817:	68 40 29 02 c0       	push   0xc0022940
c001681c:	0f be c3             	movsx  eax,bl
c001681f:	6a 01                	push   0x1
c0016821:	52                   	push   edx
c0016822:	56                   	push   esi
c0016823:	ff 34 85 fc 16 02 c0 	push   DWORD PTR [eax*4-0x3ffde904]
c001682a:	e8 a9 57 ff ff       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001682f:	83 c4 20             	add    esp,0x20
c0016832:	85 c0                	test   eax,eax
c0016834:	75 0e                	jne    c0016844 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0016836:	89 35 24 29 02 c0    	mov    DWORD PTR ds:0xc0022924,esi
c001683c:	88 1d d4 ec 01 c0    	mov    BYTE PTR ds:0xc001ecd4,bl
c0016842:	eb 27                	jmp    c001686b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	68 2b e3 01 c0       	push   0xc001e32b
c001684c:	e8 9f 30 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0016851:	83 c4 0c             	add    esp,0xc
c0016854:	68 00 08 00 00       	push   0x800
c0016859:	6a 00                	push   0x0
c001685b:	57                   	push   edi
c001685c:	e8 8f 9c fe ff       	call   c00004f0 <memset>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	b8 01 00 00 00       	mov    eax,0x1
c0016869:	eb 0e                	jmp    c0016879 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c001686b:	be 40 29 02 c0       	mov    esi,0xc0022940
c0016870:	b9 00 08 00 00       	mov    ecx,0x800
c0016875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016877:	31 c0                	xor    eax,eax
c0016879:	5b                   	pop    ebx
c001687a:	5e                   	pop    esi
c001687b:	5f                   	pop    edi
c001687c:	c3                   	ret    
c001687d:	90                   	nop

c001687e <ISO9660::tryMount(LogicalDisk*, int)>:
c001687e:	81 ec 10 08 00 00    	sub    esp,0x810
c0016884:	c7 05 24 29 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022924,0xdeadbeef
c001688e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0016895:	83 c0 41             	add    eax,0x41
c0016898:	0f be c0             	movsx  eax,al
c001689b:	50                   	push   eax
c001689c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168a0:	50                   	push   eax
c00168a1:	6a 10                	push   0x10
c00168a3:	e8 4b ff ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00168a8:	83 c4 10             	add    esp,0x10
c00168ab:	31 d2                	xor    edx,edx
c00168ad:	85 c0                	test   eax,eax
c00168af:	75 24                	jne    c00168d5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00168b1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00168b6:	75 1d                	jne    c00168d5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00168b8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00168bd:	75 16                	jne    c00168d5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00168bf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00168c4:	75 0f                	jne    c00168d5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00168c6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00168cb:	75 08                	jne    c00168d5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00168cd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00168d2:	0f 94 c2             	sete   dl
c00168d5:	88 d0                	mov    al,dl
c00168d7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00168dd:	c3                   	ret    

c00168de <ISO9660::read(void*, unsigned long, void*, int*)>:
c00168de:	55                   	push   ebp
c00168df:	57                   	push   edi
c00168e0:	56                   	push   esi
c00168e1:	53                   	push   ebx
c00168e2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00168e8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00168ef:	85 ed                	test   ebp,ebp
c00168f1:	0f 84 da 01 00 00    	je     c0016ad1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00168f7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00168ff:	0f 84 cc 01 00 00    	je     c0016ad1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016905:	b8 01 00 00 00       	mov    eax,0x1
c001690a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001690e:	0f 85 c2 01 00 00    	jne    c0016ad6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016914:	31 d2                	xor    edx,edx
c0016916:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001691d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016920:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016923:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016926:	89 04 24             	mov    DWORD PTR [esp],eax
c0016929:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001692d:	01 c8                	add    eax,ecx
c001692f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016932:	11 da                	adc    edx,ebx
c0016934:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016938:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001693c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016940:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016944:	19 d7                	sbb    edi,edx
c0016946:	72 11                	jb     c0016959 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016948:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001694b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001694f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016957:	eb 0c                	jmp    c0016965 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016959:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001695d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016961:	29 ce                	sub    esi,ecx
c0016963:	19 df                	sbb    edi,ebx
c0016965:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016968:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001696b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001696f:	c1 e0 0b             	shl    eax,0xb
c0016972:	01 c8                	add    eax,ecx
c0016974:	11 da                	adc    edx,ebx
c0016976:	89 04 24             	mov    DWORD PTR [esp],eax
c0016979:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001697d:	51                   	push   ecx
c001697e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016982:	50                   	push   eax
c0016983:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016987:	53                   	push   ebx
c0016988:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001698c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016990:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016994:	50                   	push   eax
c0016995:	e8 59 fe ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001699a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001699d:	b8 00 08 00 00       	mov    eax,0x800
c00169a2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00169a8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00169ac:	29 d0                	sub    eax,edx
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	89 f9                	mov    ecx,edi
c00169b3:	39 c6                	cmp    esi,eax
c00169b5:	83 d9 00             	sbb    ecx,0x0
c00169b8:	7d 1b                	jge    c00169d5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00169ba:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00169bf:	75 12                	jne    c00169d3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00169c1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00169c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169ce:	e9 fa 00 00 00       	jmp    c0016acd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00169d3:	89 f0                	mov    eax,esi
c00169d5:	01 d3                	add    ebx,edx
c00169d7:	31 d2                	xor    edx,edx
c00169d9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00169dd:	39 c2                	cmp    edx,eax
c00169df:	7d 14                	jge    c00169f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00169e1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00169e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00169ec:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00169ef:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00169f2:	42                   	inc    edx
c00169f3:	eb e8                	jmp    c00169dd <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00169f5:	89 c2                	mov    edx,eax
c00169f7:	85 c0                	test   eax,eax
c00169f9:	79 02                	jns    c00169fd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00169fb:	31 d2                	xor    edx,edx
c00169fd:	01 c2                	add    edx,eax
c00169ff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016a02:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016a09:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016a0d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016a11:	99                   	cdq    
c0016a12:	01 c1                	add    ecx,eax
c0016a14:	11 d3                	adc    ebx,edx
c0016a16:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016a1a:	29 c6                	sub    esi,eax
c0016a1c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016a20:	19 d7                	sbb    edi,edx
c0016a22:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a25:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016a29:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016a2e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016a31:	b8 00 00 00 00       	mov    eax,0x0
c0016a36:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016a3a:	7d 43                	jge    c0016a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016a3c:	52                   	push   edx
c0016a3d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016a41:	50                   	push   eax
c0016a42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a4e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016a52:	50                   	push   eax
c0016a53:	e8 9b fd ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016a58:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016a60:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016a65:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016a6d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016a75:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	eb aa                	jmp    c0016a29 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a83:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016a86:	74 2a                	je     c0016ab2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016a88:	50                   	push   eax
c0016a89:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016a8d:	50                   	push   eax
c0016a8e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016a92:	56                   	push   esi
c0016a93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016a97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a9b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016a9f:	51                   	push   ecx
c0016aa0:	e8 4e fd ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016aa5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016aa9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016aad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aaf:	83 c4 10             	add    esp,0x10
c0016ab2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016ab9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016abd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ac1:	89 18                	mov    DWORD PTR [eax],ebx
c0016ac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ac7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016aca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016acd:	31 c0                	xor    eax,eax
c0016acf:	eb 05                	jmp    c0016ad6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016ad1:	b8 04 00 00 00       	mov    eax,0x4
c0016ad6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016adc:	5b                   	pop    ebx
c0016add:	5e                   	pop    esi
c0016ade:	5f                   	pop    edi
c0016adf:	5d                   	pop    ebp
c0016ae0:	c3                   	ret    
c0016ae1:	90                   	nop

c0016ae2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016ae2:	55                   	push   ebp
c0016ae3:	57                   	push   edi
c0016ae4:	56                   	push   esi
c0016ae5:	53                   	push   ebx
c0016ae6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016aec:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016af3:	85 ed                	test   ebp,ebp
c0016af5:	0f 84 4f 02 00 00    	je     c0016d4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016afb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016b03:	0f 84 41 02 00 00    	je     c0016d4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016b09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016b0c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016b0f:	75 0a                	jne    c0016b1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016b11:	b8 07 00 00 00       	mov    eax,0x7
c0016b16:	e9 34 02 00 00       	jmp    c0016d4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016b1b:	50                   	push   eax
c0016b1c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b20:	50                   	push   eax
c0016b21:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016b28:	53                   	push   ebx
c0016b29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b2c:	c1 e0 0b             	shl    eax,0xb
c0016b2f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016b32:	c1 e8 0b             	shr    eax,0xb
c0016b35:	50                   	push   eax
c0016b36:	e8 b8 fc ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	89 c1                	mov    ecx,eax
c0016b43:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016b46:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016b4c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016b4f:	84 db                	test   bl,bl
c0016b51:	0f 85 8b 00 00 00    	jne    c0016be2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016b57:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016b5d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016b60:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016b66:	29 c6                	sub    esi,eax
c0016b68:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016b6c:	89 f3                	mov    ebx,esi
c0016b6e:	89 f1                	mov    ecx,esi
c0016b70:	c1 fb 1f             	sar    ebx,0x1f
c0016b73:	01 f0                	add    eax,esi
c0016b75:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016b78:	11 da                	adc    edx,ebx
c0016b7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016b84:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016b87:	89 d8                	mov    eax,ebx
c0016b89:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016b8d:	ba 00 00 00 00       	mov    edx,0x0
c0016b92:	19 f8                	sbb    eax,edi
c0016b94:	b8 00 00 00 00       	mov    eax,0x0
c0016b99:	73 08                	jae    c0016ba3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016b9b:	89 f0                	mov    eax,esi
c0016b9d:	89 fa                	mov    edx,edi
c0016b9f:	29 c8                	sub    eax,ecx
c0016ba1:	19 da                	sbb    edx,ebx
c0016ba3:	89 d7                	mov    edi,edx
c0016ba5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016ba8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016bab:	09 c7                	or     edi,eax
c0016bad:	0f 84 5e ff ff ff    	je     c0016b11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016bb3:	57                   	push   edi
c0016bb4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016bb8:	50                   	push   eax
c0016bb9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016bc0:	53                   	push   ebx
c0016bc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bc4:	c1 e0 0b             	shl    eax,0xb
c0016bc7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016bcb:	c1 e8 0b             	shr    eax,0xb
c0016bce:	50                   	push   eax
c0016bcf:	e8 1f fc ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016bd4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	25 ff 07 00 00       	and    eax,0x7ff
c0016bdf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016be2:	31 ff                	xor    edi,edi
c0016be4:	56                   	push   esi
c0016be5:	6a 28                	push   0x28
c0016be7:	6a 00                	push   0x0
c0016be9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016bed:	50                   	push   eax
c0016bee:	e8 fd 98 fe ff       	call   c00004f0 <memset>
c0016bf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bf6:	25 ff 07 00 00       	and    eax,0x7ff
c0016bfb:	89 c6                	mov    esi,eax
c0016bfd:	83 c6 21             	add    esi,0x21
c0016c00:	83 d7 00             	adc    edi,0x0
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	31 c9                	xor    ecx,ecx
c0016c08:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016c0f:	83 f9 28             	cmp    ecx,0x28
c0016c12:	88 04 24             	mov    BYTE PTR [esp],al
c0016c15:	0f 94 c2             	sete   dl
c0016c18:	88 d0                	mov    al,dl
c0016c1a:	ba ff 07 00 00       	mov    edx,0x7ff
c0016c1f:	39 f2                	cmp    edx,esi
c0016c21:	ba 00 00 00 00       	mov    edx,0x0
c0016c26:	19 fa                	sbb    edx,edi
c0016c28:	0f 92 c2             	setb   dl
c0016c2b:	09 c2                	or     edx,eax
c0016c2d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016c31:	0f 94 c0             	sete   al
c0016c34:	08 d0                	or     al,dl
c0016c36:	75 16                	jne    c0016c4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016c38:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016c3c:	74 10                	je     c0016c4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016c3e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016c41:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016c45:	41                   	inc    ecx
c0016c46:	83 c6 01             	add    esi,0x1
c0016c49:	83 d7 00             	adc    edi,0x0
c0016c4c:	eb ba                	jmp    c0016c08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016c4e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016c55:	83 ec 0c             	sub    esp,0xc
c0016c58:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016c5c:	56                   	push   esi
c0016c5d:	e8 fe 98 fe ff       	call   c0000560 <strlen>
c0016c62:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016c69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016c6d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016c75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c78:	5a                   	pop    edx
c0016c79:	25 ff 07 00 00       	and    eax,0x7ff
c0016c7e:	59                   	pop    ecx
c0016c7f:	01 f8                	add    eax,edi
c0016c81:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016c88:	0f 95 c0             	setne  al
c0016c8b:	0f b6 c0             	movzx  eax,al
c0016c8e:	40                   	inc    eax
c0016c8f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016c93:	56                   	push   esi
c0016c94:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016c98:	50                   	push   eax
c0016c99:	e8 82 99 fe ff       	call   c0000620 <strcpy>
c0016c9e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	84 c0                	test   al,al
c0016ca7:	75 21                	jne    c0016cca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016ca9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016cb1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016cb9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016cc1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016cc8:	eb 28                	jmp    c0016cf2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016cca:	fe c8                	dec    al
c0016ccc:	75 24                	jne    c0016cf2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016cce:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016cd6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016cde:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016ce6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016ced:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016cf2:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016cf6:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016cfd:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016d04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d06:	0f b6 f3             	movzx  esi,bl
c0016d09:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016d10:	31 db                	xor    ebx,ebx
c0016d12:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d18:	89 df                	mov    edi,ebx
c0016d1a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d20:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016d23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016d26:	39 c6                	cmp    esi,eax
c0016d28:	19 d7                	sbb    edi,edx
c0016d2a:	72 10                	jb     c0016d3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016d2c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016d33:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016d3a:	eb 0a                	jmp    c0016d46 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016d3c:	29 f0                	sub    eax,esi
c0016d3e:	19 da                	sbb    edx,ebx
c0016d40:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016d43:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016d46:	31 c0                	xor    eax,eax
c0016d48:	eb 05                	jmp    c0016d4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016d4a:	b8 04 00 00 00       	mov    eax,0x4
c0016d4f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016d55:	5b                   	pop    ebx
c0016d56:	5e                   	pop    esi
c0016d57:	5f                   	pop    edi
c0016d58:	5d                   	pop    ebp
c0016d59:	c3                   	ret    

c0016d5a <readRoot(unsigned int*, unsigned int*, char)>:
c0016d5a:	57                   	push   edi
c0016d5b:	56                   	push   esi
c0016d5c:	81 ec 38 08 00 00    	sub    esp,0x838
c0016d62:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016d6a:	50                   	push   eax
c0016d6b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016d6f:	50                   	push   eax
c0016d70:	6a 10                	push   0x10
c0016d72:	e8 7c fa ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d77:	83 c4 10             	add    esp,0x10
c0016d7a:	85 c0                	test   eax,eax
c0016d7c:	74 14                	je     c0016d92 <readRoot(unsigned int*, unsigned int*, char)+0x38>
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	68 46 e3 01 c0       	push   0xc001e346
c0016d86:	e8 65 2b ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	31 c0                	xor    eax,eax
c0016d90:	eb 2e                	jmp    c0016dc0 <readRoot(unsigned int*, unsigned int*, char)+0x66>
c0016d92:	8d b4 24 cc 00 00 00 	lea    esi,[esp+0xcc]
c0016d99:	8d 7c 24 0e          	lea    edi,[esp+0xe]
c0016d9d:	b9 22 00 00 00       	mov    ecx,0x22
c0016da2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016da4:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
c0016dab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016daf:	89 10                	mov    DWORD PTR [eax],edx
c0016db1:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0016db8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016dbc:	89 10                	mov    DWORD PTR [eax],edx
c0016dbe:	b0 01                	mov    al,0x1
c0016dc0:	81 c4 34 08 00 00    	add    esp,0x834
c0016dc6:	5e                   	pop    esi
c0016dc7:	5f                   	pop    edi
c0016dc8:	c3                   	ret    

c0016dc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0016dc9:	55                   	push   ebp
c0016dca:	57                   	push   edi
c0016dcb:	56                   	push   esi
c0016dcc:	53                   	push   ebx
c0016dcd:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016dd3:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0016dda:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0016de1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016de5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016de9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ded:	a1 20 29 02 c0       	mov    eax,ds:0xc0022920
c0016df2:	40                   	inc    eax
c0016df3:	a3 20 29 02 c0       	mov    ds:0xc0022920,eax
c0016df8:	83 f8 1e             	cmp    eax,0x1e
c0016dfb:	7e 10                	jle    c0016e0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x44>
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	68 56 e3 01 c0       	push   0xc001e356
c0016e05:	e8 35 86 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0016e0a:	83 c4 10             	add    esp,0x10
c0016e0d:	85 db                	test   ebx,ebx
c0016e0f:	74 05                	je     c0016e16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4d>
c0016e11:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0016e14:	75 0b                	jne    c0016e21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x58>
c0016e16:	ff 0d 20 29 02 c0    	dec    DWORD PTR ds:0xc0022920
c0016e1c:	e9 f3 00 00 00       	jmp    c0016f14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x14b>
c0016e21:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0016e25:	75 03                	jne    c0016e2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x61>
c0016e27:	83 c3 02             	add    ebx,0x2
c0016e2a:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0016e2d:	75 03                	jne    c0016e32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x69>
c0016e2f:	43                   	inc    ebx
c0016e30:	eb f8                	jmp    c0016e2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x61>
c0016e32:	52                   	push   edx
c0016e33:	68 00 01 00 00       	push   0x100
c0016e38:	6a 00                	push   0x0
c0016e3a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016e3e:	50                   	push   eax
c0016e3f:	e8 ac 96 fe ff       	call   c00004f0 <memset>
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	31 d2                	xor    edx,edx
c0016e49:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016e4c:	84 c0                	test   al,al
c0016e4e:	74 21                	je     c0016e71 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xa8>
c0016e50:	3c 2f                	cmp    al,0x2f
c0016e52:	75 0b                	jne    c0016e5f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x96>
c0016e54:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0016e58:	bd 01 00 00 00       	mov    ebp,0x1
c0016e5d:	eb 14                	jmp    c0016e73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0016e5f:	8d 48 9f             	lea    ecx,[eax-0x61]
c0016e62:	80 f9 19             	cmp    cl,0x19
c0016e65:	77 03                	ja     c0016e6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xa1>
c0016e67:	83 e8 20             	sub    eax,0x20
c0016e6a:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0016e6e:	42                   	inc    edx
c0016e6f:	eb d8                	jmp    c0016e49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x80>
c0016e71:	31 ed                	xor    ebp,ebp
c0016e73:	83 ec 0c             	sub    esp,0xc
c0016e76:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016e7d:	e8 df fc fe ff       	call   c0006b61 <malloc>
c0016e82:	89 c6                	mov    esi,eax
c0016e84:	89 c2                	mov    edx,eax
c0016e86:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0016e8d:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0016e93:	c1 ef 0b             	shr    edi,0xb
c0016e96:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0016e9d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016ea1:	83 c4 10             	add    esp,0x10
c0016ea4:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0016ea9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ead:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0016eb4:	74 29                	je     c0016edf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x116>
c0016eb6:	50                   	push   eax
c0016eb7:	57                   	push   edi
c0016eb8:	52                   	push   edx
c0016eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016ebd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0016ec4:	e8 2a f9 ff ff       	call   c00167f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016ec9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ecd:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0016ed4:	81 c2 00 08 00 00    	add    edx,0x800
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	eb ca                	jmp    c0016ea9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe0>
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016ee6:	57                   	push   edi
c0016ee7:	e8 74 96 fe ff       	call   c0000560 <strlen>
c0016eec:	50                   	push   eax
c0016eed:	57                   	push   edi
c0016eee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0016ef5:	56                   	push   esi
c0016ef6:	e8 b6 f8 ff ff       	call   c00167b1 <__memmem(unsigned char*, int, unsigned char*, int)>
c0016efb:	83 c4 20             	add    esp,0x20
c0016efe:	85 c0                	test   eax,eax
c0016f00:	75 19                	jne    c0016f1b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x152>
c0016f02:	83 ec 0c             	sub    esp,0xc
c0016f05:	56                   	push   esi
c0016f06:	e8 66 fc fe ff       	call   c0006b71 <free>
c0016f0b:	ff 0d 20 29 02 c0    	dec    DWORD PTR ds:0xc0022920
c0016f11:	83 c4 10             	add    esp,0x10
c0016f14:	31 c0                	xor    eax,eax
c0016f16:	e9 bf 00 00 00       	jmp    c0016fda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x211>
c0016f1b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0016f1f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0016f23:	c1 e7 08             	shl    edi,0x8
c0016f26:	c1 e2 10             	shl    edx,0x10
c0016f29:	09 d7                	or     edi,edx
c0016f2b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0016f2f:	09 d7                	or     edi,edx
c0016f31:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0016f35:	c1 e2 18             	shl    edx,0x18
c0016f38:	09 d7                	or     edi,edx
c0016f3a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0016f3e:	89 d1                	mov    ecx,edx
c0016f40:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0016f44:	c1 e1 08             	shl    ecx,0x8
c0016f47:	c1 e2 10             	shl    edx,0x10
c0016f4a:	09 ca                	or     edx,ecx
c0016f4c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0016f50:	09 ca                	or     edx,ecx
c0016f52:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0016f56:	c1 e1 18             	shl    ecx,0x18
c0016f59:	09 ca                	or     edx,ecx
c0016f5b:	89 e9                	mov    ecx,ebp
c0016f5d:	84 c9                	test   cl,cl
c0016f5f:	74 42                	je     c0016fa3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1da>
c0016f61:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016f65:	83 ec 0c             	sub    esp,0xc
c0016f68:	56                   	push   esi
c0016f69:	e8 03 fc fe ff       	call   c0006b71 <free>
c0016f6e:	83 c4 0c             	add    esp,0xc
c0016f71:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f78:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0016f7d:	50                   	push   eax
c0016f7e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f85:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0016f8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f90:	52                   	push   edx
c0016f91:	57                   	push   edi
c0016f92:	53                   	push   ebx
c0016f93:	e8 31 fe ff ff       	call   c0016dc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0016f98:	ff 0d 20 29 02 c0    	dec    DWORD PTR ds:0xc0022920
c0016f9e:	83 c4 20             	add    esp,0x20
c0016fa1:	eb 37                	jmp    c0016fda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x211>
c0016fa3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0016fa6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0016fad:	d0 e8                	shr    al,1
c0016faf:	89 3b                	mov    DWORD PTR [ebx],edi
c0016fb1:	83 e0 01             	and    eax,0x1
c0016fb4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	89 13                	mov    DWORD PTR [ebx],edx
c0016fc0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0016fc7:	89 03                	mov    DWORD PTR [ebx],eax
c0016fc9:	56                   	push   esi
c0016fca:	e8 a2 fb fe ff       	call   c0006b71 <free>
c0016fcf:	ff 0d 20 29 02 c0    	dec    DWORD PTR ds:0xc0022920
c0016fd5:	83 c4 10             	add    esp,0x10
c0016fd8:	b0 01                	mov    al,0x1
c0016fda:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016fe0:	5b                   	pop    ebx
c0016fe1:	5e                   	pop    esi
c0016fe2:	5f                   	pop    edi
c0016fe3:	5d                   	pop    ebp
c0016fe4:	c3                   	ret    

c0016fe5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0016fe5:	55                   	push   ebp
c0016fe6:	57                   	push   edi
c0016fe7:	56                   	push   esi
c0016fe8:	53                   	push   ebx
c0016fe9:	83 ec 20             	sub    esp,0x20
c0016fec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016ff0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ff4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ffc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017004:	c7 45 00 ff ff ff ff 	mov    DWORD PTR [ebp+0x0],0xffffffff
c001700b:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0017010:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0017016:	57                   	push   edi
c0017017:	8d 44 24 14          	lea    eax,[esp+0x14]
c001701b:	50                   	push   eax
c001701c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017020:	50                   	push   eax
c0017021:	e8 34 fd ff ff       	call   c0016d5a <readRoot(unsigned int*, unsigned int*, char)>
c0017026:	83 c4 10             	add    esp,0x10
c0017029:	88 c3                	mov    bl,al
c001702b:	84 c0                	test   al,al
c001702d:	75 12                	jne    c0017041 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x5c>
c001702f:	83 ec 0c             	sub    esp,0xc
c0017032:	68 63 e3 01 c0       	push   0xc001e363
c0017037:	e8 b4 28 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001703c:	83 c4 10             	add    esp,0x10
c001703f:	eb 4b                	jmp    c001708c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0017041:	83 ec 0c             	sub    esp,0xc
c0017044:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017048:	e8 13 95 fe ff       	call   c0000560 <strlen>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	83 f8 03             	cmp    eax,0x3
c0017053:	77 19                	ja     c001706e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x89>
c0017055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017059:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001705c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017060:	89 06                	mov    DWORD PTR [esi],eax
c0017062:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017066:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001706c:	eb 1e                	jmp    c001708c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c001706e:	50                   	push   eax
c001706f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017073:	57                   	push   edi
c0017074:	56                   	push   esi
c0017075:	55                   	push   ebp
c0017076:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001707a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001707e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017082:	e8 42 fd ff ff       	call   c0016dc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017087:	83 c4 20             	add    esp,0x20
c001708a:	88 c3                	mov    bl,al
c001708c:	83 c4 1c             	add    esp,0x1c
c001708f:	88 d8                	mov    al,bl
c0017091:	5b                   	pop    ebx
c0017092:	5e                   	pop    esi
c0017093:	5f                   	pop    edi
c0017094:	5d                   	pop    ebp
c0017095:	c3                   	ret    

c0017096 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017096:	57                   	push   edi
c0017097:	56                   	push   esi
c0017098:	53                   	push   ebx
c0017099:	83 ec 10             	sub    esp,0x10
c001709c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00170a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00170a4:	85 ff                	test   edi,edi
c00170a6:	0f 84 9f 00 00 00    	je     c001714b <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c00170ac:	85 f6                	test   esi,esi
c00170ae:	0f 84 97 00 00 00    	je     c001714b <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c00170b4:	b8 03 00 00 00       	mov    eax,0x3
c00170b9:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00170be:	0f 85 8c 00 00 00    	jne    c0017150 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	6a 1c                	push   0x1c
c00170c9:	e8 93 fa fe ff       	call   c0006b61 <malloc>
c00170ce:	89 07                	mov    DWORD PTR [edi],eax
c00170d0:	89 c3                	mov    ebx,eax
c00170d2:	58                   	pop    eax
c00170d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170d7:	50                   	push   eax
c00170d8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00170db:	50                   	push   eax
c00170dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00170e0:	50                   	push   eax
c00170e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00170e5:	50                   	push   eax
c00170e6:	56                   	push   esi
c00170e7:	e8 f9 fe ff ff       	call   c0016fe5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00170ec:	83 c4 20             	add    esp,0x20
c00170ef:	84 c0                	test   al,al
c00170f1:	74 07                	je     c00170fa <ISO9660::open(char const*, void**, FileOpenMode)+0x64>
c00170f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00170f8:	74 1b                	je     c0017115 <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c00170fa:	83 ec 0c             	sub    esp,0xc
c00170fd:	68 76 e3 01 c0       	push   0xc001e376
c0017102:	e8 e9 27 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0017107:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	b8 01 00 00 00       	mov    eax,0x1
c0017113:	eb 3b                	jmp    c0017150 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c0017115:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017119:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001711d:	89 03                	mov    DWORD PTR [ebx],eax
c001711f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001712a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017131:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017138:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001713b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0017142:	8a 06                	mov    al,BYTE PTR [esi]
c0017144:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017147:	31 c0                	xor    eax,eax
c0017149:	eb 05                	jmp    c0017150 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c001714b:	b8 04 00 00 00       	mov    eax,0x4
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	5b                   	pop    ebx
c0017154:	5e                   	pop    esi
c0017155:	5f                   	pop    edi
c0017156:	c3                   	ret    
c0017157:	90                   	nop

c0017158 <ISO9660::exists(char const*)>:
c0017158:	83 ec 28             	sub    esp,0x28
c001715b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001715f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0017163:	52                   	push   edx
c0017164:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0017167:	52                   	push   edx
c0017168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001716c:	52                   	push   edx
c001716d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017171:	52                   	push   edx
c0017172:	50                   	push   eax
c0017173:	e8 6d fe ff ff       	call   c0016fe5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017178:	83 c4 3c             	add    esp,0x3c
c001717b:	c3                   	ret    

c001717c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001717c:	56                   	push   esi
c001717d:	53                   	push   ebx
c001717e:	83 ec 14             	sub    esp,0x14
c0017181:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017185:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017189:	85 db                	test   ebx,ebx
c001718b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001718f:	0f 94 c2             	sete   dl
c0017192:	85 f6                	test   esi,esi
c0017194:	0f 94 c0             	sete   al
c0017197:	08 c2                	or     dl,al
c0017199:	75 68                	jne    c0017203 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001719b:	85 c9                	test   ecx,ecx
c001719d:	74 64                	je     c0017203 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001719f:	83 ec 0c             	sub    esp,0xc
c00171a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00171a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00171af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00171b6:	50                   	push   eax
c00171b7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00171ba:	50                   	push   eax
c00171bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171bf:	50                   	push   eax
c00171c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171c4:	50                   	push   eax
c00171c5:	51                   	push   ecx
c00171c6:	e8 1a fe ff ff       	call   c0016fe5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00171cb:	83 c4 20             	add    esp,0x20
c00171ce:	ba 01 00 00 00       	mov    edx,0x1
c00171d3:	84 c0                	test   al,al
c00171d5:	74 31                	je     c0017208 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00171d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00171e2:	89 03                	mov    DWORD PTR [ebx],eax
c00171e4:	ba 00 00 00 00       	mov    edx,0x0
c00171e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ed:	85 c0                	test   eax,eax
c00171ef:	0f 95 06             	setne  BYTE PTR [esi]
c00171f2:	74 14                	je     c0017208 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00171f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00171fa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017201:	eb 05                	jmp    c0017208 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017203:	ba 04 00 00 00       	mov    edx,0x4
c0017208:	83 c4 14             	add    esp,0x14
c001720b:	89 d0                	mov    eax,edx
c001720d:	5b                   	pop    ebx
c001720e:	5e                   	pop    esi
c001720f:	c3                   	ret    

c0017210 <ISO9660::openDir(char const*, void**)>:
c0017210:	57                   	push   edi
c0017211:	56                   	push   esi
c0017212:	53                   	push   ebx
c0017213:	83 ec 10             	sub    esp,0x10
c0017216:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001721a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001721e:	85 ff                	test   edi,edi
c0017220:	74 7b                	je     c001729d <ISO9660::openDir(char const*, void**)+0x8d>
c0017222:	85 f6                	test   esi,esi
c0017224:	74 77                	je     c001729d <ISO9660::openDir(char const*, void**)+0x8d>
c0017226:	83 ec 0c             	sub    esp,0xc
c0017229:	6a 1c                	push   0x1c
c001722b:	e8 31 f9 fe ff       	call   c0006b61 <malloc>
c0017230:	89 07                	mov    DWORD PTR [edi],eax
c0017232:	89 c3                	mov    ebx,eax
c0017234:	58                   	pop    eax
c0017235:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017239:	50                   	push   eax
c001723a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001723d:	50                   	push   eax
c001723e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017242:	50                   	push   eax
c0017243:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017247:	50                   	push   eax
c0017248:	56                   	push   esi
c0017249:	e8 97 fd ff ff       	call   c0016fe5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001724e:	83 c4 20             	add    esp,0x20
c0017251:	84 c0                	test   al,al
c0017253:	74 07                	je     c001725c <ISO9660::openDir(char const*, void**)+0x4c>
c0017255:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001725a:	75 0b                	jne    c0017267 <ISO9660::openDir(char const*, void**)+0x57>
c001725c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0017260:	b8 01 00 00 00       	mov    eax,0x1
c0017265:	eb 3b                	jmp    c00172a2 <ISO9660::openDir(char const*, void**)+0x92>
c0017267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001726b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001726f:	89 03                	mov    DWORD PTR [ebx],eax
c0017271:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001727c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017283:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001728a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001728d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0017294:	8a 06                	mov    al,BYTE PTR [esi]
c0017296:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017299:	31 c0                	xor    eax,eax
c001729b:	eb 05                	jmp    c00172a2 <ISO9660::openDir(char const*, void**)+0x92>
c001729d:	b8 04 00 00 00       	mov    eax,0x4
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	5b                   	pop    ebx
c00172a6:	5e                   	pop    esi
c00172a7:	5f                   	pop    edi
c00172a8:	c3                   	ret    
c00172a9:	90                   	nop

c00172aa <ISO9660::ISO9660()>:
c00172aa:	83 ec 0c             	sub    esp,0xc
c00172ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b1:	83 ec 0c             	sub    esp,0xc
c00172b4:	50                   	push   eax
c00172b5:	e8 58 29 ff ff       	call   c0009c12 <Filesystem::Filesystem()>
c00172ba:	83 c4 10             	add    esp,0x10
c00172bd:	ba 94 e3 01 c0       	mov    edx,0xc001e394
c00172c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172c6:	89 10                	mov    DWORD PTR [eax],edx
c00172c8:	90                   	nop
c00172c9:	83 c4 0c             	add    esp,0xc
c00172cc:	c3                   	ret    
c00172cd:	90                   	nop

c00172ce <SoundCard::beginPlayback()>:
c00172ce:	c7 44 24 04 f4 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e3f4
c00172d6:	e9 64 81 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c00172db:	90                   	nop

c00172dc <SoundCard::stopPlayback()>:
c00172dc:	c7 44 24 04 f4 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e3f4
c00172e4:	e9 56 81 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c00172e9:	90                   	nop

c00172ea <SoundCard::SoundCard(char const*)>:
c00172ea:	83 ec 1c             	sub    esp,0x1c
c00172ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172f1:	83 ec 08             	sub    esp,0x8
c00172f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172f8:	50                   	push   eax
c00172f9:	e8 ca 3b ff ff       	call   c000aec8 <Device::Device(char const*)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	ba 40 e4 01 c0       	mov    edx,0xc001e440
c0017306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001730a:	89 10                	mov    DWORD PTR [eax],edx
c001730c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017310:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001731b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017329:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017337:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017345:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001734f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017357:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001735c:	7f 19                	jg     c0017377 <SoundCard::SoundCard(char const*)+0x8d>
c001735e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017362:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017366:	83 c2 54             	add    edx,0x54
c0017369:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017371:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017375:	eb e0                	jmp    c0017357 <SoundCard::SoundCard(char const*)+0x6d>
c0017377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001737b:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017382:	90                   	nop
c0017383:	83 c4 1c             	add    esp,0x1c
c0017386:	c3                   	ret    
c0017387:	90                   	nop

c0017388 <SoundCard::~SoundCard()>:
c0017388:	83 ec 0c             	sub    esp,0xc
c001738b:	ba 40 e4 01 c0       	mov    edx,0xc001e440
c0017390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017394:	89 10                	mov    DWORD PTR [eax],edx
c0017396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001739a:	83 ec 0c             	sub    esp,0xc
c001739d:	50                   	push   eax
c001739e:	e8 8f 38 ff ff       	call   c000ac32 <Device::~Device()>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	90                   	nop
c00173a7:	83 c4 0c             	add    esp,0xc
c00173aa:	c3                   	ret    
c00173ab:	90                   	nop

c00173ac <SoundCard::~SoundCard()>:
c00173ac:	83 ec 0c             	sub    esp,0xc
c00173af:	83 ec 0c             	sub    esp,0xc
c00173b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173b6:	e8 cd ff ff ff       	call   c0017388 <SoundCard::~SoundCard()>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	83 ec 08             	sub    esp,0x8
c00173c1:	68 e8 01 00 00       	push   0x1e8
c00173c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ca:	e8 2b 24 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	83 c4 0c             	add    esp,0xc
c00173d5:	c3                   	ret    

c00173d6 <SoundCard::configureRates(int, int, int)>:
c00173d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00173da:	31 c0                	xor    eax,eax
c00173dc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00173e3:	75 20                	jne    c0017405 <SoundCard::configureRates(int, int, int)+0x2f>
c00173e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173e9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00173ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173f3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00173f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173fd:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017403:	b0 01                	mov    al,0x1
c0017405:	c3                   	ret    

c0017406 <SoundCard::getSamples16(int, short*)>:
c0017406:	55                   	push   ebp
c0017407:	57                   	push   edi
c0017408:	31 ff                	xor    edi,edi
c001740a:	56                   	push   esi
c001740b:	53                   	push   ebx
c001740c:	31 db                	xor    ebx,ebx
c001740e:	83 ec 10             	sub    esp,0x10
c0017411:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017415:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017419:	8d 04 36             	lea    eax,[esi+esi*1]
c001741c:	50                   	push   eax
c001741d:	6a 00                	push   0x0
c001741f:	55                   	push   ebp
c0017420:	e8 cb 90 fe ff       	call   c00004f0 <memset>
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001742c:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017433:	85 c0                	test   eax,eax
c0017435:	74 1b                	je     c0017452 <SoundCard::getSamples16(int, short*)+0x4c>
c0017437:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001743b:	75 15                	jne    c0017452 <SoundCard::getSamples16(int, short*)+0x4c>
c001743d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017441:	55                   	push   ebp
c0017442:	56                   	push   esi
c0017443:	50                   	push   eax
c0017444:	e8 ef 02 00 00       	call   c0017738 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	39 c7                	cmp    edi,eax
c001744e:	7d 02                	jge    c0017452 <SoundCard::getSamples16(int, short*)+0x4c>
c0017450:	89 c7                	mov    edi,eax
c0017452:	43                   	inc    ebx
c0017453:	83 fb 20             	cmp    ebx,0x20
c0017456:	75 d0                	jne    c0017428 <SoundCard::getSamples16(int, short*)+0x22>
c0017458:	83 c4 0c             	add    esp,0xc
c001745b:	89 f8                	mov    eax,edi
c001745d:	5b                   	pop    ebx
c001745e:	5e                   	pop    esi
c001745f:	5f                   	pop    edi
c0017460:	5d                   	pop    ebp
c0017461:	c3                   	ret    

c0017462 <SoundCard::getSamples32(int, int*)>:
c0017462:	55                   	push   ebp
c0017463:	57                   	push   edi
c0017464:	31 ff                	xor    edi,edi
c0017466:	56                   	push   esi
c0017467:	31 f6                	xor    esi,esi
c0017469:	53                   	push   ebx
c001746a:	83 ec 10             	sub    esp,0x10
c001746d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017471:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017475:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017479:	c1 e0 02             	shl    eax,0x2
c001747c:	50                   	push   eax
c001747d:	6a 00                	push   0x0
c001747f:	55                   	push   ebp
c0017480:	e8 6b 90 fe ff       	call   c00004f0 <memset>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001748f:	85 c0                	test   eax,eax
c0017491:	74 1b                	je     c00174ae <SoundCard::getSamples32(int, int*)+0x4c>
c0017493:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017497:	75 15                	jne    c00174ae <SoundCard::getSamples32(int, int*)+0x4c>
c0017499:	53                   	push   ebx
c001749a:	55                   	push   ebp
c001749b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001749f:	50                   	push   eax
c00174a0:	e8 57 03 00 00       	call   c00177fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	39 c6                	cmp    esi,eax
c00174aa:	7d 02                	jge    c00174ae <SoundCard::getSamples32(int, int*)+0x4c>
c00174ac:	89 c6                	mov    esi,eax
c00174ae:	47                   	inc    edi
c00174af:	83 ff 20             	cmp    edi,0x20
c00174b2:	75 d4                	jne    c0017488 <SoundCard::getSamples32(int, int*)+0x26>
c00174b4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00174ba:	85 f6                	test   esi,esi
c00174bc:	75 0f                	jne    c00174cd <SoundCard::getSamples32(int, int*)+0x6b>
c00174be:	84 c0                	test   al,al
c00174c0:	74 1b                	je     c00174dd <SoundCard::getSamples32(int, int*)+0x7b>
c00174c2:	83 ec 0c             	sub    esp,0xc
c00174c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174c7:	53                   	push   ebx
c00174c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00174cb:	eb 0d                	jmp    c00174da <SoundCard::getSamples32(int, int*)+0x78>
c00174cd:	84 c0                	test   al,al
c00174cf:	75 0c                	jne    c00174dd <SoundCard::getSamples32(int, int*)+0x7b>
c00174d1:	83 ec 0c             	sub    esp,0xc
c00174d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174d6:	53                   	push   ebx
c00174d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174da:	83 c4 10             	add    esp,0x10
c00174dd:	83 c4 0c             	add    esp,0xc
c00174e0:	89 f0                	mov    eax,esi
c00174e2:	5b                   	pop    ebx
c00174e3:	5e                   	pop    esi
c00174e4:	5f                   	pop    edi
c00174e5:	5d                   	pop    ebp
c00174e6:	c3                   	ret    
c00174e7:	90                   	nop

c00174e8 <SoundCard::addChannel(SoundPort*)>:
c00174e8:	83 ec 0c             	sub    esp,0xc
c00174eb:	31 c0                	xor    eax,eax
c00174ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00174f1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00174f9:	74 1b                	je     c0017516 <SoundCard::addChannel(SoundPort*)+0x2e>
c00174fb:	40                   	inc    eax
c00174fc:	83 f8 20             	cmp    eax,0x20
c00174ff:	75 f0                	jne    c00174f1 <SoundCard::addChannel(SoundPort*)+0x9>
c0017501:	83 ec 0c             	sub    esp,0xc
c0017504:	68 19 e4 01 c0       	push   0xc001e419
c0017509:	e8 31 7f ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001750e:	83 c4 10             	add    esp,0x10
c0017511:	83 c8 ff             	or     eax,0xffffffff
c0017514:	eb 0b                	jmp    c0017521 <SoundCard::addChannel(SoundPort*)+0x39>
c0017516:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001751a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017521:	83 c4 0c             	add    esp,0xc
c0017524:	c3                   	ret    
c0017525:	90                   	nop

c0017526 <SoundCard::removeChannel(int)>:
c0017526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001752a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001752e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017539:	c3                   	ret    
c001753a:	66 90                	xchg   ax,ax

c001753c <SoundPort::SoundPort(int, int, int, int)>:
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017543:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001755a:	89 10                	mov    DWORD PTR [eax],edx
c001755c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017560:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017564:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001756f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017572:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017577:	75 13                	jne    c001758c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757d:	8b 00                	mov    eax,DWORD PTR [eax]
c001757f:	05 a0 0f 00 00       	add    eax,0xfa0
c0017584:	01 c0                	add    eax,eax
c0017586:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001758a:	66 90                	xchg   ax,ax
c001758c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017590:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017594:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00175a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00175a9:	c1 e0 02             	shl    eax,0x2
c00175ac:	83 ec 0c             	sub    esp,0xc
c00175af:	50                   	push   eax
c00175b0:	e8 ac f5 fe ff       	call   c0006b61 <malloc>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	89 c2                	mov    edx,eax
c00175ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00175c1:	90                   	nop
c00175c2:	83 c4 0c             	add    esp,0xc
c00175c5:	c3                   	ret    
c00175c6:	66 90                	xchg   ax,ax

c00175c8 <SoundPort::~SoundPort()>:
c00175c8:	83 ec 0c             	sub    esp,0xc
c00175cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00175d2:	85 c0                	test   eax,eax
c00175d4:	74 1e                	je     c00175f4 <SoundPort::~SoundPort()+0x2c>
c00175d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00175dd:	83 ec 0c             	sub    esp,0xc
c00175e0:	50                   	push   eax
c00175e1:	e8 8b f5 fe ff       	call   c0006b71 <free>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ed:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00175f4:	90                   	nop
c00175f5:	83 c4 0c             	add    esp,0xc
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop
c00175fa:	66 90                	xchg   ax,ax

c00175fc <SoundPort::unpause()>:
c00175fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017600:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017604:	c3                   	ret    
c0017605:	90                   	nop
c0017606:	66 90                	xchg   ax,ax

c0017608 <SoundPort::pause()>:
c0017608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017610:	c3                   	ret    
c0017611:	90                   	nop
c0017612:	66 90                	xchg   ax,ax

c0017614 <SoundPort::getBufferUsed()>:
c0017614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017618:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001761b:	c3                   	ret    

c001761c <SoundPort::getBufferSize()>:
c001761c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017620:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017623:	c3                   	ret    

c0017624 <SoundPort::buffer16(short*, int)>:
c0017624:	55                   	push   ebp
c0017625:	57                   	push   edi
c0017626:	56                   	push   esi
c0017627:	53                   	push   ebx
c0017628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001762c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017630:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017633:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017636:	74 68                	je     c00176a0 <SoundPort::buffer16(short*, int)+0x7c>
c0017638:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001763c:	85 c9                	test   ecx,ecx
c001763e:	7e 60                	jle    c00176a0 <SoundPort::buffer16(short*, int)+0x7c>
c0017640:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017644:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017647:	c1 e1 0f             	shl    ecx,0xf
c001764a:	8d 70 01             	lea    esi,[eax+0x1]
c001764d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017650:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017653:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017656:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017659:	74 4d                	je     c00176a8 <SoundPort::buffer16(short*, int)+0x84>
c001765b:	31 f6                	xor    esi,esi
c001765d:	eb 21                	jmp    c0017680 <SoundPort::buffer16(short*, int)+0x5c>
c001765f:	90                   	nop
c0017660:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017665:	8d 79 01             	lea    edi,[ecx+0x1]
c0017668:	c1 e3 0f             	shl    ebx,0xf
c001766b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001766e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017671:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017674:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017677:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001767a:	74 1c                	je     c0017698 <SoundPort::buffer16(short*, int)+0x74>
c001767c:	89 c6                	mov    esi,eax
c001767e:	66 90                	xchg   ax,ax
c0017680:	8d 46 01             	lea    eax,[esi+0x1]
c0017683:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017687:	75 d7                	jne    c0017660 <SoundPort::buffer16(short*, int)+0x3c>
c0017689:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001768d:	8d 76 00             	lea    esi,[esi+0x0]
c0017690:	5b                   	pop    ebx
c0017691:	5e                   	pop    esi
c0017692:	5f                   	pop    edi
c0017693:	5d                   	pop    ebp
c0017694:	c3                   	ret    
c0017695:	8d 76 00             	lea    esi,[esi+0x0]
c0017698:	5b                   	pop    ebx
c0017699:	8d 46 02             	lea    eax,[esi+0x2]
c001769c:	5e                   	pop    esi
c001769d:	5f                   	pop    edi
c001769e:	5d                   	pop    ebp
c001769f:	c3                   	ret    
c00176a0:	5b                   	pop    ebx
c00176a1:	31 c0                	xor    eax,eax
c00176a3:	5e                   	pop    esi
c00176a4:	5f                   	pop    edi
c00176a5:	5d                   	pop    ebp
c00176a6:	c3                   	ret    
c00176a7:	90                   	nop
c00176a8:	b8 01 00 00 00       	mov    eax,0x1
c00176ad:	eb e1                	jmp    c0017690 <SoundPort::buffer16(short*, int)+0x6c>
c00176af:	90                   	nop

c00176b0 <SoundPort::buffer32(int*, int)>:
c00176b0:	55                   	push   ebp
c00176b1:	57                   	push   edi
c00176b2:	56                   	push   esi
c00176b3:	53                   	push   ebx
c00176b4:	51                   	push   ecx
c00176b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176bd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176c0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00176c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00176c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00176ca:	74 5c                	je     c0017728 <SoundPort::buffer32(int*, int)+0x78>
c00176cc:	85 c0                	test   eax,eax
c00176ce:	7e 58                	jle    c0017728 <SoundPort::buffer32(int*, int)+0x78>
c00176d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00176d3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00176d6:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00176d9:	8b 37                	mov    esi,DWORD PTR [edi]
c00176db:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00176de:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176e1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00176e4:	74 4a                	je     c0017730 <SoundPort::buffer32(int*, int)+0x80>
c00176e6:	31 f6                	xor    esi,esi
c00176e8:	eb 1e                	jmp    c0017708 <SoundPort::buffer32(int*, int)+0x58>
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8d 69 01             	lea    ebp,[ecx+0x1]
c00176ef:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00176f2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00176f5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00176f8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00176fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017702:	74 18                	je     c001771c <SoundPort::buffer32(int*, int)+0x6c>
c0017704:	89 de                	mov    esi,ebx
c0017706:	66 90                	xchg   ax,ax
c0017708:	8d 5e 01             	lea    ebx,[esi+0x1]
c001770b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001770e:	75 dc                	jne    c00176ec <SoundPort::buffer32(int*, int)+0x3c>
c0017710:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017713:	90                   	nop
c0017714:	5a                   	pop    edx
c0017715:	5b                   	pop    ebx
c0017716:	5e                   	pop    esi
c0017717:	5f                   	pop    edi
c0017718:	5d                   	pop    ebp
c0017719:	c3                   	ret    
c001771a:	66 90                	xchg   ax,ax
c001771c:	5a                   	pop    edx
c001771d:	8d 46 02             	lea    eax,[esi+0x2]
c0017720:	5b                   	pop    ebx
c0017721:	5e                   	pop    esi
c0017722:	5f                   	pop    edi
c0017723:	5d                   	pop    ebp
c0017724:	c3                   	ret    
c0017725:	8d 76 00             	lea    esi,[esi+0x0]
c0017728:	5a                   	pop    edx
c0017729:	31 c0                	xor    eax,eax
c001772b:	5b                   	pop    ebx
c001772c:	5e                   	pop    esi
c001772d:	5f                   	pop    edi
c001772e:	5d                   	pop    ebp
c001772f:	c3                   	ret    
c0017730:	b8 01 00 00 00       	mov    eax,0x1
c0017735:	eb dd                	jmp    c0017714 <SoundPort::buffer32(int*, int)+0x64>
c0017737:	90                   	nop

c0017738 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017738:	57                   	push   edi
c0017739:	56                   	push   esi
c001773a:	53                   	push   ebx
c001773b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001773f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017743:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017749:	39 03                	cmp    DWORD PTR [ebx],eax
c001774b:	74 13                	je     c0017760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001774d:	83 ec 0c             	sub    esp,0xc
c0017750:	68 6c e4 01 c0       	push   0xc001e46c
c0017755:	e8 e5 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	8d 76 00             	lea    esi,[esi+0x0]
c0017760:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017766:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017769:	74 11                	je     c001777c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001776b:	83 ec 0c             	sub    esp,0xc
c001776e:	68 ab e4 01 c0       	push   0xc001e4ab
c0017773:	e8 c7 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	90                   	nop
c001777c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017782:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017785:	74 11                	je     c0017798 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017787:	83 ec 0c             	sub    esp,0xc
c001778a:	68 ab e4 01 c0       	push   0xc001e4ab
c001778f:	e8 ab 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	90                   	nop
c0017798:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001779b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001779f:	7e 07                	jle    c00177a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00177a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177a5:	8d 76 00             	lea    esi,[esi+0x0]
c00177a8:	85 f6                	test   esi,esi
c00177aa:	7e 2c                	jle    c00177d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00177ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177b0:	8d 3c 36             	lea    edi,[esi+esi*1]
c00177b3:	31 c9                	xor    ecx,ecx
c00177b5:	01 d7                	add    edi,edx
c00177b7:	90                   	nop
c00177b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00177bb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00177be:	85 c0                	test   eax,eax
c00177c0:	79 06                	jns    c00177c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00177c2:	05 ff 7f 00 00       	add    eax,0x7fff
c00177c7:	90                   	nop
c00177c8:	c1 f8 0f             	sar    eax,0xf
c00177cb:	83 c1 04             	add    ecx,0x4
c00177ce:	66 01 02             	add    WORD PTR [edx],ax
c00177d1:	83 c2 02             	add    edx,0x2
c00177d4:	39 d7                	cmp    edi,edx
c00177d6:	75 e0                	jne    c00177b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00177d8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00177db:	50                   	push   eax
c00177dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00177df:	29 f0                	sub    eax,esi
c00177e1:	c1 e0 02             	shl    eax,0x2
c00177e4:	50                   	push   eax
c00177e5:	8d 04 b2             	lea    eax,[edx+esi*4]
c00177e8:	50                   	push   eax
c00177e9:	52                   	push   edx
c00177ea:	e8 11 8c fe ff       	call   c0000400 <memmove>
c00177ef:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	89 f0                	mov    eax,esi
c00177f7:	5b                   	pop    ebx
c00177f8:	5e                   	pop    esi
c00177f9:	5f                   	pop    edi
c00177fa:	c3                   	ret    
c00177fb:	90                   	nop

c00177fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00177fc:	57                   	push   edi
c00177fd:	56                   	push   esi
c00177fe:	53                   	push   ebx
c00177ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017803:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017807:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001780b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017811:	39 06                	cmp    DWORD PTR [esi],eax
c0017813:	74 13                	je     c0017828 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017815:	83 ec 0c             	sub    esp,0xc
c0017818:	68 8c e4 01 c0       	push   0xc001e48c
c001781d:	e8 1d 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017822:	83 c4 10             	add    esp,0x10
c0017825:	8d 76 00             	lea    esi,[esi+0x0]
c0017828:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001782e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017831:	74 11                	je     c0017844 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	68 c7 e4 01 c0       	push   0xc001e4c7
c001783b:	e8 ff 7b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	90                   	nop
c0017844:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001784a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001784d:	74 11                	je     c0017860 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001784f:	83 ec 0c             	sub    esp,0xc
c0017852:	68 c7 e4 01 c0       	push   0xc001e4c7
c0017857:	e8 e3 7b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	90                   	nop
c0017860:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017863:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017867:	7e 07                	jle    c0017870 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017869:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	85 ff                	test   edi,edi
c0017872:	7e 1c                	jle    c0017890 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017874:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001787b:	31 c0                	xor    eax,eax
c001787d:	8d 76 00             	lea    esi,[esi+0x0]
c0017880:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017883:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017886:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017889:	83 c0 04             	add    eax,0x4
c001788c:	39 c1                	cmp    ecx,eax
c001788e:	75 f0                	jne    c0017880 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017890:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017893:	50                   	push   eax
c0017894:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017897:	29 f8                	sub    eax,edi
c0017899:	c1 e0 02             	shl    eax,0x2
c001789c:	50                   	push   eax
c001789d:	8d 04 ba             	lea    eax,[edx+edi*4]
c00178a0:	50                   	push   eax
c00178a1:	52                   	push   edx
c00178a2:	e8 59 8b fe ff       	call   c0000400 <memmove>
c00178a7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	89 f8                	mov    eax,edi
c00178af:	5b                   	pop    ebx
c00178b0:	5e                   	pop    esi
c00178b1:	5f                   	pop    edi
c00178b2:	c3                   	ret    
c00178b3:	90                   	nop

c00178b4 <PCI::open(int, int, void*)>:
c00178b4:	83 ec 18             	sub    esp,0x18
c00178b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00178c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00178c7:	50                   	push   eax
c00178c8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00178cb:	31 c0                	xor    eax,eax
c00178cd:	83 c4 1c             	add    esp,0x1c
c00178d0:	c3                   	ret    
c00178d1:	90                   	nop

c00178d2 <PCI::close(int, int, void*)>:
c00178d2:	31 c0                	xor    eax,eax
c00178d4:	c3                   	ret    
c00178d5:	90                   	nop

c00178d6 <PCI::PCI()>:
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	83 ec 08             	sub    esp,0x8
c00178e0:	68 e3 e4 01 c0       	push   0xc001e4e3
c00178e5:	50                   	push   eax
c00178e6:	e8 99 2d ff ff       	call   c000a684 <Bus::Bus(char const*)>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	ba 8c e5 01 c0       	mov    edx,0xc001e58c
c00178f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f7:	89 10                	mov    DWORD PTR [eax],edx
c00178f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790b:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0017910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017914:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001791a:	31 d2                	xor    edx,edx
c001791c:	88 c2                	mov    dl,al
c001791e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017922:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017933:	31 d2                	xor    edx,edx
c0017935:	88 c2                	mov    dl,al
c0017937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017944:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001794a:	8d 50 01             	lea    edx,[eax+0x1]
c001794d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017951:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017957:	31 d2                	xor    edx,edx
c0017959:	88 c2                	mov    dl,al
c001795b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017963:	83 c9 c0             	or     ecx,0xffffffc0
c0017966:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001796a:	90                   	nop
c001796b:	83 c4 0c             	add    esp,0xc
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <PCI::readBAR8(unsigned int, int)>:
c0017970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017974:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017978:	f6 c2 01             	test   dl,0x1
c001797b:	74 07                	je     c0017984 <PCI::readBAR8(unsigned int, int)+0x14>
c001797d:	83 e2 fc             	and    edx,0xfffffffc
c0017980:	01 c2                	add    edx,eax
c0017982:	ec                   	in     al,dx
c0017983:	c3                   	ret    
c0017984:	83 e2 f0             	and    edx,0xfffffff0
c0017987:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001798a:	c3                   	ret    
c001798b:	90                   	nop

c001798c <PCI::readBAR16(unsigned int, int)>:
c001798c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017994:	f6 c2 01             	test   dl,0x1
c0017997:	74 08                	je     c00179a1 <PCI::readBAR16(unsigned int, int)+0x15>
c0017999:	83 e2 fc             	and    edx,0xfffffffc
c001799c:	01 c2                	add    edx,eax
c001799e:	66 ed                	in     ax,dx
c00179a0:	c3                   	ret    
c00179a1:	83 e2 f0             	and    edx,0xfffffff0
c00179a4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00179a8:	c3                   	ret    
c00179a9:	90                   	nop

c00179aa <PCI::readBAR32(unsigned int, int)>:
c00179aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b2:	f6 c2 01             	test   dl,0x1
c00179b5:	74 07                	je     c00179be <PCI::readBAR32(unsigned int, int)+0x14>
c00179b7:	83 e2 fc             	and    edx,0xfffffffc
c00179ba:	01 c2                	add    edx,eax
c00179bc:	ed                   	in     eax,dx
c00179bd:	c3                   	ret    
c00179be:	83 e2 f0             	and    edx,0xfffffff0
c00179c1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00179c4:	c3                   	ret    
c00179c5:	90                   	nop

c00179c6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00179c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00179d2:	f6 c2 01             	test   dl,0x1
c00179d5:	74 07                	je     c00179de <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00179d7:	83 e2 fc             	and    edx,0xfffffffc
c00179da:	01 ca                	add    edx,ecx
c00179dc:	ee                   	out    dx,al
c00179dd:	c3                   	ret    
c00179de:	83 e2 f0             	and    edx,0xfffffff0
c00179e1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00179e4:	c3                   	ret    
c00179e5:	90                   	nop

c00179e6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00179e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00179f2:	f6 c2 01             	test   dl,0x1
c00179f5:	74 08                	je     c00179ff <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00179f7:	83 e2 fc             	and    edx,0xfffffffc
c00179fa:	01 ca                	add    edx,ecx
c00179fc:	66 ef                	out    dx,ax
c00179fe:	c3                   	ret    
c00179ff:	83 e2 f0             	and    edx,0xfffffff0
c0017a02:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017a06:	c3                   	ret    
c0017a07:	90                   	nop

c0017a08 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a14:	f6 c2 01             	test   dl,0x1
c0017a17:	74 07                	je     c0017a20 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017a19:	83 e2 fc             	and    edx,0xfffffffc
c0017a1c:	01 ca                	add    edx,ecx
c0017a1e:	ef                   	out    dx,eax
c0017a1f:	c3                   	ret    
c0017a20:	83 e2 f0             	and    edx,0xfffffff0
c0017a23:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017a26:	c3                   	ret    
c0017a27:	90                   	nop

c0017a28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017a28:	55                   	push   ebp
c0017a29:	57                   	push   edi
c0017a2a:	56                   	push   esi
c0017a2b:	53                   	push   ebx
c0017a2c:	83 ec 0c             	sub    esp,0xc
c0017a2f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017a33:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017a37:	89 f0                	mov    eax,esi
c0017a39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017a3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017a41:	3c 07                	cmp    al,0x7
c0017a43:	76 10                	jbe    c0017a55 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017a45:	83 ec 0c             	sub    esp,0xc
c0017a48:	68 eb e4 01 c0       	push   0xc001e4eb
c0017a4d:	e8 ed 79 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	80 fb 0f             	cmp    bl,0xf
c0017a58:	76 10                	jbe    c0017a6a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017a5a:	83 ec 0c             	sub    esp,0xc
c0017a5d:	68 1b e5 01 c0       	push   0xc001e51b
c0017a62:	e8 d8 79 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017a67:	83 c4 10             	add    esp,0x10
c0017a6a:	8d 04 36             	lea    eax,[esi+esi*1]
c0017a6d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017a72:	83 c8 f0             	or     eax,0xfffffff0
c0017a75:	ee                   	out    dx,al
c0017a76:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017a7b:	89 e8                	mov    eax,ebp
c0017a7d:	ee                   	out    dx,al
c0017a7e:	83 c4 0c             	add    esp,0xc
c0017a81:	89 d8                	mov    eax,ebx
c0017a83:	66 81 e7 fc 00       	and    di,0xfc
c0017a88:	5b                   	pop    ebx
c0017a89:	c1 e0 08             	shl    eax,0x8
c0017a8c:	5e                   	pop    esi
c0017a8d:	09 f8                	or     eax,edi
c0017a8f:	5f                   	pop    edi
c0017a90:	66 0d 00 c0          	or     ax,0xc000
c0017a94:	5d                   	pop    ebp
c0017a95:	c3                   	ret    

c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017a96:	57                   	push   edi
c0017a97:	56                   	push   esi
c0017a98:	53                   	push   ebx
c0017a99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017aa7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017aab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017aaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ab3:	83 ff 01             	cmp    edi,0x1
c0017ab6:	75 3e                	jne    c0017af6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017ab8:	89 de                	mov    esi,ebx
c0017aba:	0f b6 c0             	movzx  eax,al
c0017abd:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017ac3:	c1 e0 10             	shl    eax,0x10
c0017ac6:	0f b6 c9             	movzx  ecx,cl
c0017ac9:	09 f0                	or     eax,esi
c0017acb:	c1 e1 08             	shl    ecx,0x8
c0017ace:	0f b6 d2             	movzx  edx,dl
c0017ad1:	09 c8                	or     eax,ecx
c0017ad3:	c1 e2 0b             	shl    edx,0xb
c0017ad6:	09 d0                	or     eax,edx
c0017ad8:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017add:	0d 00 00 00 80       	or     eax,0x80000000
c0017ae2:	ef                   	out    dx,eax
c0017ae3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017ae8:	ed                   	in     eax,dx
c0017ae9:	83 e3 02             	and    ebx,0x2
c0017aec:	0f b6 cb             	movzx  ecx,bl
c0017aef:	c1 e1 03             	shl    ecx,0x3
c0017af2:	d3 e8                	shr    eax,cl
c0017af4:	eb 43                	jmp    c0017b39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017af6:	83 ff 02             	cmp    edi,0x2
c0017af9:	75 2c                	jne    c0017b27 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017afb:	83 ec 0c             	sub    esp,0xc
c0017afe:	0f b6 c9             	movzx  ecx,cl
c0017b01:	0f b6 d2             	movzx  edx,dl
c0017b04:	0f b6 fb             	movzx  edi,bl
c0017b07:	0f b6 c0             	movzx  eax,al
c0017b0a:	57                   	push   edi
c0017b0b:	51                   	push   ecx
c0017b0c:	52                   	push   edx
c0017b0d:	50                   	push   eax
c0017b0e:	56                   	push   esi
c0017b0f:	e8 14 ff ff ff       	call   c0017a28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b14:	89 c2                	mov    edx,eax
c0017b16:	ed                   	in     eax,dx
c0017b17:	83 e3 02             	and    ebx,0x2
c0017b1a:	83 c4 20             	add    esp,0x20
c0017b1d:	0f b6 cb             	movzx  ecx,bl
c0017b20:	c1 e1 03             	shl    ecx,0x3
c0017b23:	d3 e8                	shr    eax,cl
c0017b25:	eb 12                	jmp    c0017b39 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 4b e5 01 c0       	push   0xc001e54b
c0017b2f:	e8 0b 79 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	31 c0                	xor    eax,eax
c0017b39:	5b                   	pop    ebx
c0017b3a:	5e                   	pop    esi
c0017b3b:	5f                   	pop    edi
c0017b3c:	c3                   	ret    
c0017b3d:	90                   	nop

c0017b3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017b3e:	83 ec 18             	sub    esp,0x18
c0017b41:	6a 00                	push   0x0
c0017b43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b48:	50                   	push   eax
c0017b49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b4e:	50                   	push   eax
c0017b4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b54:	50                   	push   eax
c0017b55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b59:	e8 38 ff ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b5e:	83 c4 2c             	add    esp,0x2c
c0017b61:	c3                   	ret    

c0017b62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017b62:	83 ec 18             	sub    esp,0x18
c0017b65:	6a 0e                	push   0xe
c0017b67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b6c:	50                   	push   eax
c0017b6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b72:	50                   	push   eax
c0017b73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017b78:	50                   	push   eax
c0017b79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b7d:	e8 14 ff ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b82:	83 c4 2c             	add    esp,0x2c
c0017b85:	0f b6 c0             	movzx  eax,al
c0017b88:	c3                   	ret    
c0017b89:	90                   	nop

c0017b8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017b8a:	55                   	push   ebp
c0017b8b:	57                   	push   edi
c0017b8c:	56                   	push   esi
c0017b8d:	53                   	push   ebx
c0017b8e:	83 ec 18             	sub    esp,0x18
c0017b91:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017b96:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017b9b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017ba0:	6a 0a                	push   0xa
c0017ba2:	56                   	push   esi
c0017ba3:	55                   	push   ebp
c0017ba4:	57                   	push   edi
c0017ba5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ba9:	e8 e8 fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bae:	83 c4 14             	add    esp,0x14
c0017bb1:	89 c3                	mov    ebx,eax
c0017bb3:	6a 0a                	push   0xa
c0017bb5:	0f b6 db             	movzx  ebx,bl
c0017bb8:	56                   	push   esi
c0017bb9:	55                   	push   ebp
c0017bba:	57                   	push   edi
c0017bbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017bbf:	e8 d2 fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bc4:	83 c4 2c             	add    esp,0x2c
c0017bc7:	25 00 ff 00 00       	and    eax,0xff00
c0017bcc:	09 d8                	or     eax,ebx
c0017bce:	5b                   	pop    ebx
c0017bcf:	5e                   	pop    esi
c0017bd0:	5f                   	pop    edi
c0017bd1:	5d                   	pop    ebp
c0017bd2:	c3                   	ret    
c0017bd3:	90                   	nop

c0017bd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017bd4:	83 ec 18             	sub    esp,0x18
c0017bd7:	6a 08                	push   0x8
c0017bd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bde:	50                   	push   eax
c0017bdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017be4:	50                   	push   eax
c0017be5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bea:	50                   	push   eax
c0017beb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bef:	e8 a2 fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bf4:	83 c4 2c             	add    esp,0x2c
c0017bf7:	0f b6 c4             	movzx  eax,ah
c0017bfa:	c3                   	ret    
c0017bfb:	90                   	nop

c0017bfc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017bfc:	83 ec 18             	sub    esp,0x18
c0017bff:	6a 08                	push   0x8
c0017c01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c06:	50                   	push   eax
c0017c07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c0c:	50                   	push   eax
c0017c0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c12:	50                   	push   eax
c0017c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c17:	e8 7a fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c1c:	83 c4 2c             	add    esp,0x2c
c0017c1f:	c3                   	ret    

c0017c20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017c20:	83 ec 18             	sub    esp,0x18
c0017c23:	6a 3c                	push   0x3c
c0017c25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c2a:	50                   	push   eax
c0017c2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c30:	50                   	push   eax
c0017c31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c36:	50                   	push   eax
c0017c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c3b:	e8 56 fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c40:	83 c4 2c             	add    esp,0x2c
c0017c43:	c3                   	ret    

c0017c44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017c44:	83 ec 18             	sub    esp,0x18
c0017c47:	6a 18                	push   0x18
c0017c49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c4e:	50                   	push   eax
c0017c4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c54:	50                   	push   eax
c0017c55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c5a:	50                   	push   eax
c0017c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c5f:	e8 32 fe ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c64:	83 c4 2c             	add    esp,0x2c
c0017c67:	0f b6 c4             	movzx  eax,ah
c0017c6a:	c3                   	ret    
c0017c6b:	90                   	nop

c0017c6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017c6c:	55                   	push   ebp
c0017c6d:	57                   	push   edi
c0017c6e:	56                   	push   esi
c0017c6f:	53                   	push   ebx
c0017c70:	83 ec 28             	sub    esp,0x28
c0017c73:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017c77:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017c7c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017c81:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017c86:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017c8d:	8d 43 12             	lea    eax,[ebx+0x12]
c0017c90:	83 c3 10             	add    ebx,0x10
c0017c93:	0f b6 c0             	movzx  eax,al
c0017c96:	0f b6 db             	movzx  ebx,bl
c0017c99:	50                   	push   eax
c0017c9a:	51                   	push   ecx
c0017c9b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017c9f:	57                   	push   edi
c0017ca0:	55                   	push   ebp
c0017ca1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ca5:	e8 ec fd ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017caa:	83 c4 14             	add    esp,0x14
c0017cad:	89 c6                	mov    esi,eax
c0017caf:	53                   	push   ebx
c0017cb0:	c1 e6 10             	shl    esi,0x10
c0017cb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017cb7:	51                   	push   ecx
c0017cb8:	57                   	push   edi
c0017cb9:	55                   	push   ebp
c0017cba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017cbe:	e8 d3 fd ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cc3:	83 c4 3c             	add    esp,0x3c
c0017cc6:	0f b7 c0             	movzx  eax,ax
c0017cc9:	5b                   	pop    ebx
c0017cca:	09 f0                	or     eax,esi
c0017ccc:	5e                   	pop    esi
c0017ccd:	5f                   	pop    edi
c0017cce:	5d                   	pop    ebp
c0017ccf:	c3                   	ret    

c0017cd0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017cd0:	55                   	push   ebp
c0017cd1:	57                   	push   edi
c0017cd2:	56                   	push   esi
c0017cd3:	53                   	push   ebx
c0017cd4:	83 ec 0c             	sub    esp,0xc
c0017cd7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017cdb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017cdf:	89 f5                	mov    ebp,esi
c0017ce1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017ce7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ceb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017cf3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017cf7:	83 f9 01             	cmp    ecx,0x1
c0017cfa:	75 5d                	jne    c0017d59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017cfc:	0f b6 c8             	movzx  ecx,al
c0017cff:	0f b6 d2             	movzx  edx,dl
c0017d02:	c1 e1 10             	shl    ecx,0x10
c0017d05:	c1 e2 0b             	shl    edx,0xb
c0017d08:	89 f0                	mov    eax,esi
c0017d0a:	25 fc 00 00 00       	and    eax,0xfc
c0017d0f:	09 c1                	or     ecx,eax
c0017d11:	89 e8                	mov    eax,ebp
c0017d13:	0f b6 c0             	movzx  eax,al
c0017d16:	c1 e0 08             	shl    eax,0x8
c0017d19:	09 c1                	or     ecx,eax
c0017d1b:	09 d1                	or     ecx,edx
c0017d1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017d22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017d28:	89 c8                	mov    eax,ecx
c0017d2a:	ef                   	out    dx,eax
c0017d2b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017d30:	ed                   	in     eax,dx
c0017d31:	0f b7 db             	movzx  ebx,bx
c0017d34:	83 e6 02             	and    esi,0x2
c0017d37:	74 0a                	je     c0017d43 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017d39:	0f b7 d0             	movzx  edx,ax
c0017d3c:	c1 e3 10             	shl    ebx,0x10
c0017d3f:	09 d3                	or     ebx,edx
c0017d41:	eb 05                	jmp    c0017d48 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017d43:	66 31 c0             	xor    ax,ax
c0017d46:	09 c3                	or     ebx,eax
c0017d48:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017d4d:	89 c8                	mov    eax,ecx
c0017d4f:	ef                   	out    dx,eax
c0017d50:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017d55:	89 d8                	mov    eax,ebx
c0017d57:	eb 41                	jmp    c0017d9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017d59:	83 f9 02             	cmp    ecx,0x2
c0017d5c:	75 45                	jne    c0017da3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	0f b6 d2             	movzx  edx,dl
c0017d64:	89 f1                	mov    ecx,esi
c0017d66:	0f b6 c0             	movzx  eax,al
c0017d69:	0f b6 f1             	movzx  esi,cl
c0017d6c:	89 e9                	mov    ecx,ebp
c0017d6e:	56                   	push   esi
c0017d6f:	0f b6 c9             	movzx  ecx,cl
c0017d72:	51                   	push   ecx
c0017d73:	52                   	push   edx
c0017d74:	50                   	push   eax
c0017d75:	57                   	push   edi
c0017d76:	e8 ad fc ff ff       	call   c0017a28 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d7b:	89 c2                	mov    edx,eax
c0017d7d:	ed                   	in     eax,dx
c0017d7e:	83 c4 20             	add    esp,0x20
c0017d81:	0f b7 db             	movzx  ebx,bx
c0017d84:	f6 c2 02             	test   dl,0x2
c0017d87:	74 0c                	je     c0017d95 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017d89:	0f b7 c8             	movzx  ecx,ax
c0017d8c:	89 d8                	mov    eax,ebx
c0017d8e:	c1 e0 10             	shl    eax,0x10
c0017d91:	09 c8                	or     eax,ecx
c0017d93:	eb 05                	jmp    c0017d9a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017d95:	66 31 c0             	xor    ax,ax
c0017d98:	09 d8                	or     eax,ebx
c0017d9a:	ef                   	out    dx,eax
c0017d9b:	83 c4 0c             	add    esp,0xc
c0017d9e:	5b                   	pop    ebx
c0017d9f:	5e                   	pop    esi
c0017da0:	5f                   	pop    edi
c0017da1:	5d                   	pop    ebp
c0017da2:	c3                   	ret    
c0017da3:	c7 44 24 20 4b e5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e54b
c0017dab:	83 c4 0c             	add    esp,0xc
c0017dae:	5b                   	pop    ebx
c0017daf:	5e                   	pop    esi
c0017db0:	5f                   	pop    edi
c0017db1:	5d                   	pop    ebp
c0017db2:	e9 88 76 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c0017db7:	90                   	nop

c0017db8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017db8:	55                   	push   ebp
c0017db9:	57                   	push   edi
c0017dba:	56                   	push   esi
c0017dbb:	53                   	push   ebx
c0017dbc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017dc2:	80 3d 4c 31 02 c0 00 	cmp    BYTE PTR ds:0xc002314c,0x0
c0017dc9:	0f 85 84 00 00 00    	jne    c0017e53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	68 14 01 00 00       	push   0x114
c0017dd7:	e8 85 ed fe ff       	call   c0006b61 <malloc>
c0017ddc:	83 c4 0c             	add    esp,0xc
c0017ddf:	89 c3                	mov    ebx,eax
c0017de1:	ff 35 90 27 02 c0    	push   DWORD PTR ds:0xc0022790
c0017de7:	68 51 e5 01 c0       	push   0xc001e551
c0017dec:	50                   	push   eax
c0017ded:	e8 74 20 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0017df2:	5a                   	pop    edx
c0017df3:	59                   	pop    ecx
c0017df4:	6a 01                	push   0x1
c0017df6:	53                   	push   ebx
c0017df7:	e8 2a 21 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0017dfc:	83 c4 0c             	add    esp,0xc
c0017dff:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017e03:	50                   	push   eax
c0017e04:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017e08:	50                   	push   eax
c0017e09:	53                   	push   ebx
c0017e0a:	e8 c3 23 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0017e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e13:	40                   	inc    eax
c0017e14:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e17:	e8 45 ed fe ff       	call   c0006b61 <malloc>
c0017e1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e20:	a3 48 31 02 c0       	mov    ds:0xc0023148,eax
c0017e25:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0017e29:	5e                   	pop    esi
c0017e2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017e2c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017e30:	51                   	push   ecx
c0017e31:	50                   	push   eax
c0017e32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017e36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017e3a:	53                   	push   ebx
c0017e3b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017e3e:	83 c4 14             	add    esp,0x14
c0017e41:	53                   	push   ebx
c0017e42:	e8 3d 21 ff ff       	call   c0009f84 <File::close()>
c0017e47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e4b:	83 c4 10             	add    esp,0x10
c0017e4e:	a3 44 31 02 c0       	mov    ds:0xc0023144,eax
c0017e53:	a1 44 31 02 c0       	mov    eax,ds:0xc0023144
c0017e58:	8b 15 48 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023148
c0017e5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e61:	31 ff                	xor    edi,edi
c0017e63:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0017e6b:	31 f6                	xor    esi,esi
c0017e6d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017e72:	31 db                	xor    ebx,ebx
c0017e74:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0017e7c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e81:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0017e88:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0017e8c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0017e93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017e97:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017e9a:	0f 8e 6b 01 00 00    	jle    c001800b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0017ea0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017ea3:	d4 40                	aam    0x40
c0017ea5:	d5 39                	aad    0x39
c0017ea7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017eab:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0017eaf:	d4 40                	aam    0x40
c0017eb1:	d5 39                	aad    0x39
c0017eb3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017eb7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0017ebb:	d4 40                	aam    0x40
c0017ebd:	d5 39                	aad    0x39
c0017ebf:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ec3:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0017ec7:	d4 40                	aam    0x40
c0017ec9:	d5 39                	aad    0x39
c0017ecb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ecf:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0017ed3:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017ed7:	3c 56                	cmp    al,0x56
c0017ed9:	74 45                	je     c0017f20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0017edb:	d4 40                	aam    0x40
c0017edd:	d5 39                	aad    0x39
c0017edf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017ee2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0017ee6:	0f b6 c9             	movzx  ecx,cl
c0017ee9:	c1 e1 04             	shl    ecx,0x4
c0017eec:	d4 40                	aam    0x40
c0017eee:	d5 39                	aad    0x39
c0017ef0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017ef3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0017ef7:	0f b6 db             	movzx  ebx,bl
c0017efa:	09 cb                	or     ebx,ecx
c0017efc:	c1 e3 04             	shl    ebx,0x4
c0017eff:	d4 40                	aam    0x40
c0017f01:	d5 39                	aad    0x39
c0017f03:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017f06:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0017f0a:	0f b6 c9             	movzx  ecx,cl
c0017f0d:	09 cb                	or     ebx,ecx
c0017f0f:	c1 e3 04             	shl    ebx,0x4
c0017f12:	89 d9                	mov    ecx,ebx
c0017f14:	d4 40                	aam    0x40
c0017f16:	d5 39                	aad    0x39
c0017f18:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017f1b:	0f b6 db             	movzx  ebx,bl
c0017f1e:	09 cb                	or     ebx,ecx
c0017f20:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0017f24:	80 f9 44             	cmp    cl,0x44
c0017f27:	74 47                	je     c0017f70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0017f29:	88 c8                	mov    al,cl
c0017f2b:	d4 40                	aam    0x40
c0017f2d:	d5 39                	aad    0x39
c0017f2f:	83 e8 30             	sub    eax,0x30
c0017f32:	0f b6 e8             	movzx  ebp,al
c0017f35:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0017f39:	c1 e5 04             	shl    ebp,0x4
c0017f3c:	d4 40                	aam    0x40
c0017f3e:	d5 39                	aad    0x39
c0017f40:	83 e8 30             	sub    eax,0x30
c0017f43:	0f b6 f0             	movzx  esi,al
c0017f46:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0017f4a:	09 ee                	or     esi,ebp
c0017f4c:	c1 e6 04             	shl    esi,0x4
c0017f4f:	d4 40                	aam    0x40
c0017f51:	d5 39                	aad    0x39
c0017f53:	83 e8 30             	sub    eax,0x30
c0017f56:	0f b6 e8             	movzx  ebp,al
c0017f59:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0017f5d:	09 ee                	or     esi,ebp
c0017f5f:	c1 e6 04             	shl    esi,0x4
c0017f62:	89 f5                	mov    ebp,esi
c0017f64:	d4 40                	aam    0x40
c0017f66:	d5 39                	aad    0x39
c0017f68:	83 e8 30             	sub    eax,0x30
c0017f6b:	0f b6 f0             	movzx  esi,al
c0017f6e:	09 ee                	or     esi,ebp
c0017f70:	83 c7 10             	add    edi,0x10
c0017f73:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0017f77:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017f7a:	3c 0a                	cmp    al,0xa
c0017f7c:	74 09                	je     c0017f87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0017f7e:	45                   	inc    ebp
c0017f7f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017f82:	75 16                	jne    c0017f9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0017f84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0017f87:	3c 0a                	cmp    al,0xa
c0017f89:	0f 94 c0             	sete   al
c0017f8c:	0f b6 c0             	movzx  eax,al
c0017f8f:	01 c7                	add    edi,eax
c0017f91:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0017f96:	75 0c                	jne    c0017fa4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0017f98:	eb 15                	jmp    c0017faf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0017f9a:	47                   	inc    edi
c0017f9b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0017f9e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0017fa2:	eb d3                	jmp    c0017f77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0017fa4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0017fa9:	0f 85 e8 fe ff ff    	jne    c0017e97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017faf:	80 f9 44             	cmp    cl,0x44
c0017fb2:	74 0b                	je     c0017fbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0017fb4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0017fb9:	0f 85 d8 fe ff ff    	jne    c0017e97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017fbf:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017fc3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017fc7:	c1 e1 04             	shl    ecx,0x4
c0017fca:	83 e8 30             	sub    eax,0x30
c0017fcd:	09 c8                	or     eax,ecx
c0017fcf:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0017fd3:	0f 85 be fe ff ff    	jne    c0017e97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017fd9:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0017fdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fe1:	c1 e1 04             	shl    ecx,0x4
c0017fe4:	83 e8 30             	sub    eax,0x30
c0017fe7:	09 c8                	or     eax,ecx
c0017fe9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0017fed:	0f 85 a4 fe ff ff    	jne    c0017e97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0017ff3:	50                   	push   eax
c0017ff4:	50                   	push   eax
c0017ff5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017ff9:	50                   	push   eax
c0017ffa:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018001:	e8 1a 86 fe ff       	call   c0000620 <strcpy>
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	eb 15                	jmp    c0018020 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001800b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018012:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001801d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018020:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018027:	81 c4 2c 01 00 00    	add    esp,0x12c
c001802d:	5b                   	pop    ebx
c001802e:	5e                   	pop    esi
c001802f:	5f                   	pop    edi
c0018030:	5d                   	pop    ebp
c0018031:	c3                   	ret    

c0018032 <PCI::checkBus(unsigned char)>:
c0018032:	56                   	push   esi
c0018033:	53                   	push   ebx
c0018034:	31 f6                	xor    esi,esi
c0018036:	51                   	push   ecx
c0018037:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001803b:	0f b6 c3             	movzx  eax,bl
c001803e:	52                   	push   edx
c001803f:	56                   	push   esi
c0018040:	46                   	inc    esi
c0018041:	50                   	push   eax
c0018042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018046:	e8 f3 02 00 00       	call   c001833e <PCI::checkDevice(unsigned char, unsigned char)>
c001804b:	83 c4 10             	add    esp,0x10
c001804e:	83 fe 20             	cmp    esi,0x20
c0018051:	75 e8                	jne    c001803b <PCI::checkBus(unsigned char)+0x9>
c0018053:	58                   	pop    eax
c0018054:	5b                   	pop    ebx
c0018055:	5e                   	pop    esi
c0018056:	c3                   	ret    
c0018057:	90                   	nop

c0018058 <PCI::foundDevice(PCIDeviceInfo)>:
c0018058:	55                   	push   ebp
c0018059:	57                   	push   edi
c001805a:	56                   	push   esi
c001805b:	53                   	push   ebx
c001805c:	83 ec 1c             	sub    esp,0x1c
c001805f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018063:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018069:	0f 84 52 01 00 00    	je     c00181c1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001806f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018073:	66 81 f9 06 04       	cmp    cx,0x406
c0018078:	75 2c                	jne    c00180a6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001807a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001807f:	50                   	push   eax
c0018080:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018085:	50                   	push   eax
c0018086:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001808b:	50                   	push   eax
c001808c:	56                   	push   esi
c001808d:	e8 b2 fb ff ff       	call   c0017c44 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018092:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018096:	0f b6 c0             	movzx  eax,al
c0018099:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001809d:	83 c4 2c             	add    esp,0x2c
c00180a0:	5b                   	pop    ebx
c00180a1:	5e                   	pop    esi
c00180a2:	5f                   	pop    edi
c00180a3:	5d                   	pop    ebp
c00180a4:	eb 8c                	jmp    c0018032 <PCI::checkBus(unsigned char)>
c00180a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180aa:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00180b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00180b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00180b8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00180bc:	88 d3                	mov    bl,dl
c00180be:	85 c0                	test   eax,eax
c00180c0:	74 33                	je     c00180f5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00180c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00180c5:	85 d2                	test   edx,edx
c00180c7:	74 28                	je     c00180f1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00180c9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00180cf:	31 ef                	xor    edi,ebp
c00180d1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00180d7:	75 18                	jne    c00180f1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00180d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00180dd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00180e3:	75 0c                	jne    c00180f1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00180e5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00180eb:	0f 84 d0 00 00 00    	je     c00181c1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00180f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f3:	eb c9                	jmp    c00180be <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00180f5:	66 81 f9 01 06       	cmp    cx,0x601
c00180fa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00180fe:	75 19                	jne    c0018119 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	68 64 01 00 00       	push   0x164
c0018108:	e8 54 ea fe ff       	call   c0006b61 <malloc>
c001810d:	89 c5                	mov    ebp,eax
c001810f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018112:	e8 47 0e 00 00       	call   c0018f5e <SATABus::SATABus()>
c0018117:	eb 1e                	jmp    c0018137 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018119:	66 81 f9 01 01       	cmp    cx,0x101
c001811e:	75 60                	jne    c0018180 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018120:	83 ec 0c             	sub    esp,0xc
c0018123:	68 70 02 00 00       	push   0x270
c0018128:	e8 34 ea fe ff       	call   c0006b61 <malloc>
c001812d:	89 c5                	mov    ebp,eax
c001812f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018132:	e8 cb 02 00 00       	call   c0018402 <IDE::IDE()>
c0018137:	58                   	pop    eax
c0018138:	5a                   	pop    edx
c0018139:	55                   	push   ebp
c001813a:	56                   	push   esi
c001813b:	e8 f0 2b ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0018140:	83 ec 1c             	sub    esp,0x1c
c0018143:	b9 09 00 00 00       	mov    ecx,0x9
c0018148:	fc                   	cld    
c0018149:	89 e7                	mov    edi,esp
c001814b:	89 de                	mov    esi,ebx
c001814d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001814f:	55                   	push   ebp
c0018150:	e8 21 2b ff ff       	call   c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>
c0018155:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018158:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001815c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018164:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001816c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018174:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018177:	83 c4 4c             	add    esp,0x4c
c001817a:	5b                   	pop    ebx
c001817b:	5e                   	pop    esi
c001817c:	5f                   	pop    edi
c001817d:	5d                   	pop    ebp
c001817e:	ff e0                	jmp    eax
c0018180:	83 ec 0c             	sub    esp,0xc
c0018183:	68 58 01 00 00       	push   0x158
c0018188:	e8 d4 e9 fe ff       	call   c0006b61 <malloc>
c001818d:	89 c5                	mov    ebp,eax
c001818f:	58                   	pop    eax
c0018190:	5a                   	pop    edx
c0018191:	68 6a e5 01 c0       	push   0xc001e56a
c0018196:	55                   	push   ebp
c0018197:	e8 32 2e ff ff       	call   c000afce <DriverlessDevice::DriverlessDevice(char const*)>
c001819c:	59                   	pop    ecx
c001819d:	5f                   	pop    edi
c001819e:	55                   	push   ebp
c001819f:	56                   	push   esi
c00181a0:	e8 8b 2b ff ff       	call   c000ad30 <Device::addChild(Device*)>
c00181a5:	b9 09 00 00 00       	mov    ecx,0x9
c00181aa:	fc                   	cld    
c00181ab:	89 df                	mov    edi,ebx
c00181ad:	89 de                	mov    esi,ebx
c00181af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181b1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00181b5:	83 c4 2c             	add    esp,0x2c
c00181b8:	5b                   	pop    ebx
c00181b9:	5e                   	pop    esi
c00181ba:	5f                   	pop    edi
c00181bb:	5d                   	pop    ebp
c00181bc:	e9 b5 2a ff ff       	jmp    c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>
c00181c1:	83 c4 1c             	add    esp,0x1c
c00181c4:	5b                   	pop    ebx
c00181c5:	5e                   	pop    esi
c00181c6:	5f                   	pop    edi
c00181c7:	5d                   	pop    ebp
c00181c8:	c3                   	ret    
c00181c9:	90                   	nop

c00181ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00181ca:	55                   	push   ebp
c00181cb:	57                   	push   edi
c00181cc:	56                   	push   esi
c00181cd:	53                   	push   ebx
c00181ce:	83 ec 68             	sub    esp,0x68
c00181d1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00181d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00181dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00181e7:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c00181ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00181f7:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00181fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018200:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018205:	6a 0c                	push   0xc
c0018207:	57                   	push   edi
c0018208:	53                   	push   ebx
c0018209:	56                   	push   esi
c001820a:	55                   	push   ebp
c001820b:	e8 86 f8 ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018210:	83 c4 20             	add    esp,0x20
c0018213:	57                   	push   edi
c0018214:	53                   	push   ebx
c0018215:	56                   	push   esi
c0018216:	55                   	push   ebp
c0018217:	e8 6e f9 ff ff       	call   c0017b8a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001821c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018221:	57                   	push   edi
c0018222:	53                   	push   ebx
c0018223:	56                   	push   esi
c0018224:	55                   	push   ebp
c0018225:	e8 f6 f9 ff ff       	call   c0017c20 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001822a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001822e:	83 c4 14             	add    esp,0x14
c0018231:	6a 3c                	push   0x3c
c0018233:	57                   	push   edi
c0018234:	53                   	push   ebx
c0018235:	56                   	push   esi
c0018236:	55                   	push   ebp
c0018237:	e8 5a f8 ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001823c:	0f b6 c4             	movzx  eax,ah
c001823f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018243:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018247:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001824b:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c0018250:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018256:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001825c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018260:	83 c4 20             	add    esp,0x20
c0018263:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018268:	74 30                	je     c001829a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001826a:	31 c0                	xor    eax,eax
c001826c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018270:	7e 28                	jle    c001829a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018272:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001827a:	39 cb                	cmp    ebx,ecx
c001827c:	75 19                	jne    c0018297 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001827e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018286:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001828a:	75 0b                	jne    c0018297 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001828c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018293:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018297:	40                   	inc    eax
c0018298:	eb d2                	jmp    c001826c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001829a:	31 d2                	xor    edx,edx
c001829c:	83 ec 0c             	sub    esp,0xc
c001829f:	57                   	push   edi
c00182a0:	53                   	push   ebx
c00182a1:	56                   	push   esi
c00182a2:	52                   	push   edx
c00182a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00182a7:	55                   	push   ebp
c00182a8:	e8 bf f9 ff ff       	call   c0017c6c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182b1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00182b5:	42                   	inc    edx
c00182b6:	83 c4 20             	add    esp,0x20
c00182b9:	83 fa 06             	cmp    edx,0x6
c00182bc:	75 de                	jne    c001829c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00182be:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00182c3:	83 ec 0c             	sub    esp,0xc
c00182c6:	86 e0                	xchg   al,ah
c00182c8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00182cd:	6a 02                	push   0x2
c00182cf:	57                   	push   edi
c00182d0:	53                   	push   ebx
c00182d1:	56                   	push   esi
c00182d2:	55                   	push   ebp
c00182d3:	e8 be f7 ff ff       	call   c0017a96 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182d8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00182dd:	83 c4 20             	add    esp,0x20
c00182e0:	57                   	push   edi
c00182e1:	53                   	push   ebx
c00182e2:	56                   	push   esi
c00182e3:	55                   	push   ebp
c00182e4:	e8 eb f8 ff ff       	call   c0017bd4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00182e9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00182ed:	57                   	push   edi
c00182ee:	53                   	push   ebx
c00182ef:	56                   	push   esi
c00182f0:	55                   	push   ebp
c00182f1:	e8 48 f8 ff ff       	call   c0017b3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00182f6:	b9 09 00 00 00       	mov    ecx,0x9
c00182fb:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018300:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018304:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018308:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001830c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018310:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018314:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018318:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001831c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018320:	83 ec 0c             	sub    esp,0xc
c0018323:	fc                   	cld    
c0018324:	89 e7                	mov    edi,esp
c0018326:	8d 74 24 58          	lea    esi,[esp+0x58]
c001832a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001832c:	55                   	push   ebp
c001832d:	e8 26 fd ff ff       	call   c0018058 <PCI::foundDevice(PCIDeviceInfo)>
c0018332:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018338:	5b                   	pop    ebx
c0018339:	5e                   	pop    esi
c001833a:	5f                   	pop    edi
c001833b:	5d                   	pop    ebp
c001833c:	c3                   	ret    
c001833d:	90                   	nop

c001833e <PCI::checkDevice(unsigned char, unsigned char)>:
c001833e:	55                   	push   ebp
c001833f:	57                   	push   edi
c0018340:	56                   	push   esi
c0018341:	53                   	push   ebx
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018349:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001834e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018353:	6a 00                	push   0x0
c0018355:	56                   	push   esi
c0018356:	57                   	push   edi
c0018357:	55                   	push   ebp
c0018358:	e8 e1 f7 ff ff       	call   c0017b3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001835d:	6a 00                	push   0x0
c001835f:	56                   	push   esi
c0018360:	57                   	push   edi
c0018361:	55                   	push   ebp
c0018362:	e8 63 fe ff ff       	call   c00181ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018367:	83 c4 20             	add    esp,0x20
c001836a:	6a 00                	push   0x0
c001836c:	56                   	push   esi
c001836d:	57                   	push   edi
c001836e:	55                   	push   ebp
c001836f:	e8 ee f7 ff ff       	call   c0017b62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	84 c0                	test   al,al
c0018379:	79 27                	jns    c00183a2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001837b:	bb 01 00 00 00       	mov    ebx,0x1
c0018380:	53                   	push   ebx
c0018381:	56                   	push   esi
c0018382:	57                   	push   edi
c0018383:	55                   	push   ebp
c0018384:	e8 b5 f7 ff ff       	call   c0017b3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	66 40                	inc    ax
c001838e:	74 0c                	je     c001839c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018390:	53                   	push   ebx
c0018391:	56                   	push   esi
c0018392:	57                   	push   edi
c0018393:	55                   	push   ebp
c0018394:	e8 31 fe ff ff       	call   c00181ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018399:	83 c4 10             	add    esp,0x10
c001839c:	43                   	inc    ebx
c001839d:	83 fb 08             	cmp    ebx,0x8
c00183a0:	75 de                	jne    c0018380 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00183a2:	83 c4 0c             	add    esp,0xc
c00183a5:	5b                   	pop    ebx
c00183a6:	5e                   	pop    esi
c00183a7:	5f                   	pop    edi
c00183a8:	5d                   	pop    ebp
c00183a9:	c3                   	ret    

c00183aa <PCI::detect()>:
c00183aa:	56                   	push   esi
c00183ab:	53                   	push   ebx
c00183ac:	53                   	push   ebx
c00183ad:	31 db                	xor    ebx,ebx
c00183af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183b3:	6a 00                	push   0x0
c00183b5:	6a 00                	push   0x0
c00183b7:	6a 00                	push   0x0
c00183b9:	56                   	push   esi
c00183ba:	e8 a3 f7 ff ff       	call   c0017b62 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	a8 80                	test   al,0x80
c00183c4:	75 21                	jne    c00183e7 <PCI::detect()+0x3d>
c00183c6:	51                   	push   ecx
c00183c7:	51                   	push   ecx
c00183c8:	6a 00                	push   0x0
c00183ca:	56                   	push   esi
c00183cb:	e8 62 fc ff ff       	call   c0018032 <PCI::checkBus(unsigned char)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	eb 24                	jmp    c00183f9 <PCI::detect()+0x4f>
c00183d5:	52                   	push   edx
c00183d6:	52                   	push   edx
c00183d7:	53                   	push   ebx
c00183d8:	43                   	inc    ebx
c00183d9:	56                   	push   esi
c00183da:	e8 53 fc ff ff       	call   c0018032 <PCI::checkBus(unsigned char)>
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	83 fb 08             	cmp    ebx,0x8
c00183e5:	74 12                	je     c00183f9 <PCI::detect()+0x4f>
c00183e7:	53                   	push   ebx
c00183e8:	6a 00                	push   0x0
c00183ea:	6a 00                	push   0x0
c00183ec:	56                   	push   esi
c00183ed:	e8 4c f7 ff ff       	call   c0017b3e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	66 40                	inc    ax
c00183f7:	74 dc                	je     c00183d5 <PCI::detect()+0x2b>
c00183f9:	58                   	pop    eax
c00183fa:	5b                   	pop    ebx
c00183fb:	5e                   	pop    esi
c00183fc:	c3                   	ret    
c00183fd:	90                   	nop

c00183fe <IDE::close(int, int, void*)>:
c00183fe:	83 c8 ff             	or     eax,0xffffffff
c0018401:	c3                   	ret    

c0018402 <IDE::IDE()>:
c0018402:	83 ec 0c             	sub    esp,0xc
c0018405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018409:	83 ec 08             	sub    esp,0x8
c001840c:	68 b0 e5 01 c0       	push   0xc001e5b0
c0018411:	50                   	push   eax
c0018412:	e8 5d 2c ff ff       	call   c000b074 <HardDiskController::HardDiskController(char const*)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c001841f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018423:	89 10                	mov    DWORD PTR [eax],edx
c0018425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018429:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018430:	90                   	nop
c0018431:	83 c4 0c             	add    esp,0xc
c0018434:	c3                   	ret    
c0018435:	90                   	nop

c0018436 <IDE::prepareInterrupt(unsigned char)>:
c0018436:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001843b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001843f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018447:	c3                   	ret    

c0018448 <selectDrive(unsigned char, unsigned char)>:
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <IDE::getBase(unsigned char)>:
c001844a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001844f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018453:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001845b:	c3                   	ret    

c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001845c:	55                   	push   ebp
c001845d:	57                   	push   edi
c001845e:	56                   	push   esi
c001845f:	53                   	push   ebx
c0018460:	83 ec 1c             	sub    esp,0x1c
c0018463:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018467:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001846b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001846e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018472:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018476:	80 f9 03             	cmp    cl,0x3
c0018479:	77 51                	ja     c00184cc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001847b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001847f:	0f b6 f2             	movzx  esi,dl
c0018482:	0f b6 db             	movzx  ebx,bl
c0018485:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018488:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001848c:	83 ca 80             	or     edx,0xffffff80
c001848f:	0f b6 d2             	movzx  edx,dl
c0018492:	52                   	push   edx
c0018493:	6a 0c                	push   0xc
c0018495:	56                   	push   esi
c0018496:	57                   	push   edi
c0018497:	e8 c0 ff ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001849c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00184a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184a5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00184a9:	ee                   	out    dx,al
c00184aa:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00184af:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00184b3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00184b7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00184bb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00184c3:	83 c4 2c             	add    esp,0x2c
c00184c6:	5b                   	pop    ebx
c00184c7:	5e                   	pop    esi
c00184c8:	5f                   	pop    edi
c00184c9:	5d                   	pop    ebp
c00184ca:	eb 90                	jmp    c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00184cc:	80 fb 07             	cmp    bl,0x7
c00184cf:	77 12                	ja     c00184e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00184d1:	0f b6 d2             	movzx  edx,dl
c00184d4:	0f b6 db             	movzx  ebx,bl
c00184d7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00184df:	89 da                	mov    edx,ebx
c00184e1:	eb 2f                	jmp    c0018512 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00184e3:	80 fb 0d             	cmp    bl,0xd
c00184e6:	77 13                	ja     c00184fb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00184e8:	0f b6 d2             	movzx  edx,dl
c00184eb:	0f b6 db             	movzx  ebx,bl
c00184ee:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00184f5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00184f9:	eb 17                	jmp    c0018512 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00184fb:	80 fb 15             	cmp    bl,0x15
c00184fe:	77 13                	ja     c0018513 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018500:	0f b6 d2             	movzx  edx,dl
c0018503:	0f b6 db             	movzx  ebx,bl
c0018506:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001850e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018512:	ee                   	out    dx,al
c0018513:	83 c4 1c             	add    esp,0x1c
c0018516:	5b                   	pop    ebx
c0018517:	5e                   	pop    esi
c0018518:	5f                   	pop    edi
c0018519:	5d                   	pop    ebp
c001851a:	c3                   	ret    
c001851b:	90                   	nop

c001851c <IDE::read(unsigned char, unsigned char)>:
c001851c:	55                   	push   ebp
c001851d:	57                   	push   edi
c001851e:	56                   	push   esi
c001851f:	53                   	push   ebx
c0018520:	83 ec 1c             	sub    esp,0x1c
c0018523:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018527:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001852b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001852e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018532:	3c 03                	cmp    al,0x3
c0018534:	77 43                	ja     c0018579 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018536:	0f b6 f2             	movzx  esi,dl
c0018539:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001853c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018540:	83 c8 80             	or     eax,0xffffff80
c0018543:	0f b6 c0             	movzx  eax,al
c0018546:	50                   	push   eax
c0018547:	6a 0c                	push   0xc
c0018549:	56                   	push   esi
c001854a:	57                   	push   edi
c001854b:	e8 0c ff ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018550:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018555:	0f b6 c3             	movzx  eax,bl
c0018558:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001855c:	ec                   	in     al,dx
c001855d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018561:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018566:	52                   	push   edx
c0018567:	6a 0c                	push   0xc
c0018569:	56                   	push   esi
c001856a:	57                   	push   edi
c001856b:	e8 ec fe ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018570:	83 c4 20             	add    esp,0x20
c0018573:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018577:	eb 49                	jmp    c00185c2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018579:	80 fb 07             	cmp    bl,0x7
c001857c:	77 12                	ja     c0018590 <IDE::read(unsigned char, unsigned char)+0x74>
c001857e:	0f b6 d2             	movzx  edx,dl
c0018581:	0f b6 c3             	movzx  eax,bl
c0018584:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001858c:	89 c2                	mov    edx,eax
c001858e:	eb 31                	jmp    c00185c1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018590:	80 fb 0d             	cmp    bl,0xd
c0018593:	77 13                	ja     c00185a8 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018595:	0f b6 d2             	movzx  edx,dl
c0018598:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001859f:	0f b6 d3             	movzx  edx,bl
c00185a2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00185a6:	eb 19                	jmp    c00185c1 <IDE::read(unsigned char, unsigned char)+0xa5>
c00185a8:	31 c0                	xor    eax,eax
c00185aa:	80 fb 15             	cmp    bl,0x15
c00185ad:	77 13                	ja     c00185c2 <IDE::read(unsigned char, unsigned char)+0xa6>
c00185af:	0f b6 d2             	movzx  edx,dl
c00185b2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00185ba:	0f b6 d3             	movzx  edx,bl
c00185bd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00185c1:	ec                   	in     al,dx
c00185c2:	83 c4 1c             	add    esp,0x1c
c00185c5:	5b                   	pop    ebx
c00185c6:	5e                   	pop    esi
c00185c7:	5f                   	pop    edi
c00185c8:	5d                   	pop    ebp
c00185c9:	c3                   	ret    

c00185ca <IDE::waitInterrupt(unsigned char)>:
c00185ca:	57                   	push   edi
c00185cb:	56                   	push   esi
c00185cc:	31 f6                	xor    esi,esi
c00185ce:	53                   	push   ebx
c00185cf:	83 ec 10             	sub    esp,0x10
c00185d2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00185d6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185de:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00185e3:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00185ea:	84 db                	test   bl,bl
c00185ec:	75 33                	jne    c0018621 <IDE::waitInterrupt(unsigned char)+0x57>
c00185ee:	52                   	push   edx
c00185ef:	6a 0c                	push   0xc
c00185f1:	50                   	push   eax
c00185f2:	57                   	push   edi
c00185f3:	e8 24 ff ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	a8 01                	test   al,0x1
c00185fd:	75 2a                	jne    c0018629 <IDE::waitInterrupt(unsigned char)+0x5f>
c00185ff:	f7 c6 04 00 00 00    	test   esi,0x4
c0018605:	75 12                	jne    c0018619 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018607:	83 fe 32             	cmp    esi,0x32
c001860a:	7e 0d                	jle    c0018619 <IDE::waitInterrupt(unsigned char)+0x4f>
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	6a 64                	push   0x64
c0018611:	e8 7e a4 ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c0018616:	83 c4 10             	add    esp,0x10
c0018619:	83 fe 3c             	cmp    esi,0x3c
c001861c:	74 0b                	je     c0018629 <IDE::waitInterrupt(unsigned char)+0x5f>
c001861e:	46                   	inc    esi
c001861f:	eb bd                	jmp    c00185de <IDE::waitInterrupt(unsigned char)+0x14>
c0018621:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	88 d8                	mov    al,bl
c001862e:	5b                   	pop    ebx
c001862f:	5e                   	pop    esi
c0018630:	5f                   	pop    edi
c0018631:	c3                   	ret    

c0018632 <ideChannel0IRQHandler(regs*, void*)>:
c0018632:	83 ec 10             	sub    esp,0x10
c0018635:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018639:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018640:	6a 07                	push   0x7
c0018642:	6a 00                	push   0x0
c0018644:	50                   	push   eax
c0018645:	e8 d2 fe ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c001864a:	83 c4 1c             	add    esp,0x1c
c001864d:	c3                   	ret    

c001864e <ideChannel1IRQHandler(regs*, void*)>:
c001864e:	83 ec 10             	sub    esp,0x10
c0018651:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018655:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001865c:	6a 07                	push   0x7
c001865e:	6a 01                	push   0x1
c0018660:	50                   	push   eax
c0018661:	e8 b6 fe ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018666:	83 c4 1c             	add    esp,0x1c
c0018669:	c3                   	ret    

c001866a <IDE::enableIRQs(unsigned char, bool)>:
c001866a:	57                   	push   edi
c001866b:	56                   	push   esi
c001866c:	be 04 00 00 00       	mov    esi,0x4
c0018671:	53                   	push   ebx
c0018672:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001867b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018680:	0f 94 c0             	sete   al
c0018683:	01 c0                	add    eax,eax
c0018685:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001868c:	0f b6 c0             	movzx  eax,al
c001868f:	50                   	push   eax
c0018690:	6a 0c                	push   0xc
c0018692:	57                   	push   edi
c0018693:	53                   	push   ebx
c0018694:	e8 c3 fd ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	50                   	push   eax
c001869d:	6a 0c                	push   0xc
c001869f:	57                   	push   edi
c00186a0:	53                   	push   ebx
c00186a1:	e8 76 fe ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c00186a6:	83 c4 10             	add    esp,0x10
c00186a9:	4e                   	dec    esi
c00186aa:	75 f0                	jne    c001869c <IDE::enableIRQs(unsigned char, bool)+0x32>
c00186ac:	5b                   	pop    ebx
c00186ad:	5e                   	pop    esi
c00186ae:	5f                   	pop    edi
c00186af:	c3                   	ret    

c00186b0 <IDE::open(int, int, void*)>:
c00186b0:	55                   	push   ebp
c00186b1:	57                   	push   edi
c00186b2:	56                   	push   esi
c00186b3:	53                   	push   ebx
c00186b4:	83 ec 1c             	sub    esp,0x1c
c00186b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00186bb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00186c4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00186cd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00186d4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00186db:	0f 85 b0 02 00 00    	jne    c0018991 <IDE::open(int, int, void*)+0x2e1>
c00186e1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00186e7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00186eb:	83 e0 7f             	and    eax,0x7f
c00186ee:	3c 05                	cmp    al,0x5
c00186f0:	74 04                	je     c00186f6 <IDE::open(int, int, void*)+0x46>
c00186f2:	3c 0f                	cmp    al,0xf
c00186f4:	75 32                	jne    c0018728 <IDE::open(int, int, void*)+0x78>
c00186f6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00186fc:	83 e0 fc             	and    eax,0xfffffffc
c00186ff:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018706:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001870c:	83 e0 fc             	and    eax,0xfffffffc
c001870f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018716:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001871c:	83 e0 fc             	and    eax,0xfffffffc
c001871f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018726:	eb 14                	jmp    c001873c <IDE::open(int, int, void*)+0x8c>
c0018728:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018732:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001873c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018743:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001874a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001874e:	89 c6                	mov    esi,eax
c0018750:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018755:	c1 e6 10             	shl    esi,0x10
c0018758:	89 e8                	mov    eax,ebp
c001875a:	89 fa                	mov    edx,edi
c001875c:	c1 e0 0b             	shl    eax,0xb
c001875f:	09 f0                	or     eax,esi
c0018761:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018768:	c1 e6 08             	shl    esi,0x8
c001876b:	09 c6                	or     esi,eax
c001876d:	89 f0                	mov    eax,esi
c001876f:	0d 08 00 00 80       	or     eax,0x80000008
c0018774:	ef                   	out    dx,eax
c0018775:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001877a:	89 ca                	mov    edx,ecx
c001877c:	ed                   	in     eax,dx
c001877d:	c1 e8 10             	shr    eax,0x10
c0018780:	3d ff ff 00 00       	cmp    eax,0xffff
c0018785:	0f 84 f5 00 00 00    	je     c0018880 <IDE::open(int, int, void*)+0x1d0>
c001878b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018791:	89 fa                	mov    edx,edi
c0018793:	89 f0                	mov    eax,esi
c0018795:	ef                   	out    dx,eax
c0018796:	b0 fe                	mov    al,0xfe
c0018798:	89 ca                	mov    edx,ecx
c001879a:	ee                   	out    dx,al
c001879b:	89 f0                	mov    eax,esi
c001879d:	89 fa                	mov    edx,edi
c001879f:	ef                   	out    dx,eax
c00187a0:	89 ca                	mov    edx,ecx
c00187a2:	ed                   	in     eax,dx
c00187a3:	3c fe                	cmp    al,0xfe
c00187a5:	0f 85 a9 00 00 00    	jne    c0018854 <IDE::open(int, int, void*)+0x1a4>
c00187ab:	8b 15 a8 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f2a8
c00187b1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00187b8:	74 33                	je     c00187ed <IDE::open(int, int, void*)+0x13d>
c00187ba:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00187c0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00187c4:	40                   	inc    eax
c00187c5:	83 ec 0c             	sub    esp,0xc
c00187c8:	0f b6 c0             	movzx  eax,al
c00187cb:	50                   	push   eax
c00187cc:	55                   	push   ebp
c00187cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187d1:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00187d7:	51                   	push   ecx
c00187d8:	e8 df 52 ff ff       	call   c000dabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00187dd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00187e2:	83 c4 1c             	add    esp,0x1c
c00187e5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00187eb:	eb 0a                	jmp    c00187f7 <IDE::open(int, int, void*)+0x147>
c00187ed:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00187f7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00187fe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018805:	c1 e1 10             	shl    ecx,0x10
c0018808:	c1 e0 08             	shl    eax,0x8
c001880b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018810:	09 c1                	or     ecx,eax
c0018812:	89 fa                	mov    edx,edi
c0018814:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001881b:	c1 e0 0b             	shl    eax,0xb
c001881e:	09 c1                	or     ecx,eax
c0018820:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018826:	89 c8                	mov    eax,ecx
c0018828:	ef                   	out    dx,eax
c0018829:	be fc 0c 00 00       	mov    esi,0xcfc
c001882e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018834:	89 f2                	mov    edx,esi
c0018836:	ee                   	out    dx,al
c0018837:	89 c8                	mov    eax,ecx
c0018839:	89 fa                	mov    edx,edi
c001883b:	ef                   	out    dx,eax
c001883c:	89 f2                	mov    edx,esi
c001883e:	ed                   	in     eax,dx
c001883f:	0f b6 c0             	movzx  eax,al
c0018842:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018848:	74 46                	je     c0018890 <IDE::open(int, int, void*)+0x1e0>
c001884a:	83 ec 0c             	sub    esp,0xc
c001884d:	68 c8 e5 01 c0       	push   0xc001e5c8
c0018852:	eb 34                	jmp    c0018888 <IDE::open(int, int, void*)+0x1d8>
c0018854:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001885d:	75 17                	jne    c0018876 <IDE::open(int, int, void*)+0x1c6>
c001885f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018864:	74 07                	je     c001886d <IDE::open(int, int, void*)+0x1bd>
c0018866:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001886b:	75 09                	jne    c0018876 <IDE::open(int, int, void*)+0x1c6>
c001886d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018874:	eb 1a                	jmp    c0018890 <IDE::open(int, int, void*)+0x1e0>
c0018876:	83 ec 0c             	sub    esp,0xc
c0018879:	68 d0 e5 01 c0       	push   0xc001e5d0
c001887e:	eb 08                	jmp    c0018888 <IDE::open(int, int, void*)+0x1d8>
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	68 01 e6 01 c0       	push   0xc001e601
c0018888:	e8 b2 6b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018897:	79 1a                	jns    c00188b3 <IDE::open(int, int, void*)+0x203>
c0018899:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001889f:	83 e0 fc             	and    eax,0xfffffffc
c00188a2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00188a9:	83 c0 08             	add    eax,0x8
c00188ac:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00188b3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188b9:	89 c2                	mov    edx,eax
c00188bb:	83 e2 0f             	and    edx,0xf
c00188be:	66 83 fa 08          	cmp    dx,0x8
c00188c2:	75 0a                	jne    c00188ce <IDE::open(int, int, void*)+0x21e>
c00188c4:	83 e8 02             	sub    eax,0x2
c00188c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00188ce:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00188d4:	89 c2                	mov    edx,eax
c00188d6:	83 e2 0f             	and    edx,0xf
c00188d9:	66 83 fa 08          	cmp    dx,0x8
c00188dd:	75 0a                	jne    c00188e9 <IDE::open(int, int, void*)+0x239>
c00188df:	83 e8 02             	sub    eax,0x2
c00188e2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00188e9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00188f0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00188f7:	89 d0                	mov    eax,edx
c00188f9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00188fc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018900:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018904:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018907:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001890c:	0f b6 c9             	movzx  ecx,cl
c001890f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018916:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018919:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001891d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018921:	8d 50 02             	lea    edx,[eax+0x2]
c0018924:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018929:	0f b6 d2             	movzx  edx,dl
c001892c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018932:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018935:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018939:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001893d:	8d 48 03             	lea    ecx,[eax+0x3]
c0018940:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018945:	0f b6 c9             	movzx  ecx,cl
c0018948:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001894e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018951:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018955:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018959:	8d 50 04             	lea    edx,[eax+0x4]
c001895c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018962:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018967:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001896e:	66 85 f6             	test   si,si
c0018971:	74 5b                	je     c00189ce <IDE::open(int, int, void*)+0x31e>
c0018973:	0f b6 d2             	movzx  edx,dl
c0018976:	83 c0 05             	add    eax,0x5
c0018979:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001897c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018980:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018984:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001898a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001898f:	eb 3d                	jmp    c00189ce <IDE::open(int, int, void*)+0x31e>
c0018991:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018997:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001899e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00189a5:	66 05 06 02          	add    ax,0x206
c00189a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189b0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00189b7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00189be:	66 05 06 02          	add    ax,0x206
c00189c2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00189c9:	e9 e5 fe ff ff       	jmp    c00188b3 <IDE::open(int, int, void*)+0x203>
c00189ce:	50                   	push   eax
c00189cf:	50                   	push   eax
c00189d0:	6a 00                	push   0x0
c00189d2:	53                   	push   ebx
c00189d3:	e8 5e fa ff ff       	call   c0018436 <IDE::prepareInterrupt(unsigned char)>
c00189d8:	5a                   	pop    edx
c00189d9:	59                   	pop    ecx
c00189da:	6a 01                	push   0x1
c00189dc:	53                   	push   ebx
c00189dd:	e8 54 fa ff ff       	call   c0018436 <IDE::prepareInterrupt(unsigned char)>
c00189e2:	83 c4 0c             	add    esp,0xc
c00189e5:	6a 00                	push   0x0
c00189e7:	6a 00                	push   0x0
c00189e9:	53                   	push   ebx
c00189ea:	e8 7b fc ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c00189ef:	83 c4 0c             	add    esp,0xc
c00189f2:	6a 00                	push   0x0
c00189f4:	6a 01                	push   0x1
c00189f6:	53                   	push   ebx
c00189f7:	e8 6e fc ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c00189fc:	83 c4 10             	add    esp,0x10
c00189ff:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018a06:	74 34                	je     c0018a3c <IDE::open(int, int, void*)+0x38c>
c0018a08:	83 ec 0c             	sub    esp,0xc
c0018a0b:	53                   	push   ebx
c0018a0c:	6a 01                	push   0x1
c0018a0e:	68 32 86 01 c0       	push   0xc0018632
c0018a13:	6a 0e                	push   0xe
c0018a15:	53                   	push   ebx
c0018a16:	e8 c1 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a1b:	83 c4 14             	add    esp,0x14
c0018a1e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018a24:	53                   	push   ebx
c0018a25:	6a 01                	push   0x1
c0018a27:	68 4e 86 01 c0       	push   0xc001864e
c0018a2c:	6a 0f                	push   0xf
c0018a2e:	53                   	push   ebx
c0018a2f:	e8 a8 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a34:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018a3a:	eb 38                	jmp    c0018a74 <IDE::open(int, int, void*)+0x3c4>
c0018a3c:	83 ec 0c             	sub    esp,0xc
c0018a3f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018a49:	53                   	push   ebx
c0018a4a:	6a 00                	push   0x0
c0018a4c:	68 32 86 01 c0       	push   0xc0018632
c0018a51:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018a57:	53                   	push   ebx
c0018a58:	e8 7f 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a5d:	83 c4 14             	add    esp,0x14
c0018a60:	53                   	push   ebx
c0018a61:	6a 00                	push   0x0
c0018a63:	68 4e 86 01 c0       	push   0xc001864e
c0018a68:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018a6e:	53                   	push   ebx
c0018a6f:	e8 68 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018a76:	83 c4 20             	add    esp,0x20
c0018a79:	83 ec 0c             	sub    esp,0xc
c0018a7c:	53                   	push   ebx
c0018a7d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018a80:	83 c4 0c             	add    esp,0xc
c0018a83:	6a 07                	push   0x7
c0018a85:	6a 00                	push   0x0
c0018a87:	53                   	push   ebx
c0018a88:	e8 8f fa ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018a8d:	83 c4 0c             	add    esp,0xc
c0018a90:	6a 07                	push   0x7
c0018a92:	6a 01                	push   0x1
c0018a94:	53                   	push   ebx
c0018a95:	e8 82 fa ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018a9a:	83 c4 0c             	add    esp,0xc
c0018a9d:	6a 01                	push   0x1
c0018a9f:	6a 00                	push   0x0
c0018aa1:	53                   	push   ebx
c0018aa2:	e8 c3 fb ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c0018aa7:	83 c4 0c             	add    esp,0xc
c0018aaa:	6a 01                	push   0x1
c0018aac:	6a 01                	push   0x1
c0018aae:	53                   	push   ebx
c0018aaf:	e8 b6 fb ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c0018ab4:	83 c4 2c             	add    esp,0x2c
c0018ab7:	31 c0                	xor    eax,eax
c0018ab9:	5b                   	pop    ebx
c0018aba:	5e                   	pop    esi
c0018abb:	5f                   	pop    edi
c0018abc:	5d                   	pop    ebp
c0018abd:	c3                   	ret    

c0018abe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018abe:	55                   	push   ebp
c0018abf:	57                   	push   edi
c0018ac0:	56                   	push   esi
c0018ac1:	53                   	push   ebx
c0018ac2:	83 ec 1c             	sub    esp,0x1c
c0018ac5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ac9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018acd:	8d 50 f8             	lea    edx,[eax-0x8]
c0018ad0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018ad4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018ad8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018adc:	80 fa 03             	cmp    dl,0x3
c0018adf:	77 5d                	ja     c0018b3e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018ae1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ae5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ae9:	0f b6 db             	movzx  ebx,bl
c0018aec:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018aef:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018af3:	83 ca 80             	or     edx,0xffffff80
c0018af6:	0f b6 d2             	movzx  edx,dl
c0018af9:	52                   	push   edx
c0018afa:	6a 0c                	push   0xc
c0018afc:	53                   	push   ebx
c0018afd:	56                   	push   esi
c0018afe:	e8 59 f9 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b03:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018b08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b0c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b10:	0f b6 c0             	movzx  eax,al
c0018b13:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018b17:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018b19:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018b1e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018b22:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018b26:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b2a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018b32:	83 c4 2c             	add    esp,0x2c
c0018b35:	5b                   	pop    ebx
c0018b36:	5e                   	pop    esi
c0018b37:	5f                   	pop    edi
c0018b38:	5d                   	pop    ebp
c0018b39:	e9 1e f9 ff ff       	jmp    c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b3e:	3c 07                	cmp    al,0x7
c0018b40:	77 10                	ja     c0018b52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018b42:	0f b6 db             	movzx  ebx,bl
c0018b45:	0f b6 d0             	movzx  edx,al
c0018b48:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018b50:	eb 2d                	jmp    c0018b7f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018b52:	3c 0d                	cmp    al,0xd
c0018b54:	77 13                	ja     c0018b69 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018b56:	0f b6 db             	movzx  ebx,bl
c0018b59:	0f b6 c0             	movzx  eax,al
c0018b5c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018b63:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018b67:	eb 16                	jmp    c0018b7f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018b69:	3c 15                	cmp    al,0x15
c0018b6b:	77 14                	ja     c0018b81 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018b6d:	0f b6 db             	movzx  ebx,bl
c0018b70:	0f b6 c0             	movzx  eax,al
c0018b73:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018b7b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018b7f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018b81:	83 c4 1c             	add    esp,0x1c
c0018b84:	5b                   	pop    ebx
c0018b85:	5e                   	pop    esi
c0018b86:	5f                   	pop    edi
c0018b87:	5d                   	pop    ebp
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <IDE::detect()>:
c0018b8a:	55                   	push   ebp
c0018b8b:	57                   	push   edi
c0018b8c:	56                   	push   esi
c0018b8d:	53                   	push   ebx
c0018b8e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018b94:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018b9b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018ba2:	0f 85 97 02 00 00    	jne    c0018e3f <IDE::detect()+0x2b5>
c0018ba8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018baf:	31 f6                	xor    esi,esi
c0018bb1:	31 ed                	xor    ebp,ebp
c0018bb3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018bbb:	89 e8                	mov    eax,ebp
c0018bbd:	c1 e0 06             	shl    eax,0x6
c0018bc0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018bc8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018bcc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018bd0:	c1 e0 04             	shl    eax,0x4
c0018bd3:	83 c8 a0             	or     eax,0xffffffa0
c0018bd6:	0f b6 c0             	movzx  eax,al
c0018bd9:	50                   	push   eax
c0018bda:	6a 06                	push   0x6
c0018bdc:	56                   	push   esi
c0018bdd:	53                   	push   ebx
c0018bde:	e8 79 f8 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018be3:	83 c4 0c             	add    esp,0xc
c0018be6:	6a 0c                	push   0xc
c0018be8:	56                   	push   esi
c0018be9:	53                   	push   ebx
c0018bea:	e8 2d f9 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018bef:	83 c4 0c             	add    esp,0xc
c0018bf2:	6a 0c                	push   0xc
c0018bf4:	56                   	push   esi
c0018bf5:	53                   	push   ebx
c0018bf6:	e8 21 f9 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018bfb:	83 c4 0c             	add    esp,0xc
c0018bfe:	6a 0c                	push   0xc
c0018c00:	56                   	push   esi
c0018c01:	53                   	push   ebx
c0018c02:	e8 15 f9 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c07:	83 c4 0c             	add    esp,0xc
c0018c0a:	6a 0c                	push   0xc
c0018c0c:	56                   	push   esi
c0018c0d:	53                   	push   ebx
c0018c0e:	e8 09 f9 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c13:	68 ec 00 00 00       	push   0xec
c0018c18:	6a 07                	push   0x7
c0018c1a:	56                   	push   esi
c0018c1b:	53                   	push   ebx
c0018c1c:	e8 3b f8 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c21:	83 c4 1c             	add    esp,0x1c
c0018c24:	6a 0c                	push   0xc
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	e8 ef f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c2d:	83 c4 0c             	add    esp,0xc
c0018c30:	6a 0c                	push   0xc
c0018c32:	56                   	push   esi
c0018c33:	53                   	push   ebx
c0018c34:	e8 e3 f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c39:	83 c4 0c             	add    esp,0xc
c0018c3c:	6a 0c                	push   0xc
c0018c3e:	56                   	push   esi
c0018c3f:	53                   	push   ebx
c0018c40:	e8 d7 f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c45:	83 c4 0c             	add    esp,0xc
c0018c48:	6a 0c                	push   0xc
c0018c4a:	56                   	push   esi
c0018c4b:	53                   	push   ebx
c0018c4c:	e8 cb f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c51:	83 c4 0c             	add    esp,0xc
c0018c54:	6a 0c                	push   0xc
c0018c56:	56                   	push   esi
c0018c57:	53                   	push   ebx
c0018c58:	e8 bf f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	84 c0                	test   al,al
c0018c62:	0f 84 5f 01 00 00    	je     c0018dc7 <IDE::detect()+0x23d>
c0018c68:	31 ff                	xor    edi,edi
c0018c6a:	50                   	push   eax
c0018c6b:	6a 0c                	push   0xc
c0018c6d:	56                   	push   esi
c0018c6e:	53                   	push   ebx
c0018c6f:	e8 a8 f8 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018c74:	83 c4 10             	add    esp,0x10
c0018c77:	a8 01                	test   al,0x1
c0018c79:	0f 85 69 01 00 00    	jne    c0018de8 <IDE::detect()+0x25e>
c0018c7f:	84 c0                	test   al,al
c0018c81:	78 04                	js     c0018c87 <IDE::detect()+0xfd>
c0018c83:	a8 08                	test   al,0x8
c0018c85:	75 23                	jne    c0018caa <IDE::detect()+0x120>
c0018c87:	47                   	inc    edi
c0018c88:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018c8e:	7e da                	jle    c0018c6a <IDE::detect()+0xe0>
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	6a 32                	push   0x32
c0018c95:	e8 fa 9d ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c0018c9a:	83 c4 10             	add    esp,0x10
c0018c9d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018ca3:	75 c5                	jne    c0018c6a <IDE::detect()+0xe0>
c0018ca5:	e9 3e 01 00 00       	jmp    c0018de8 <IDE::detect()+0x25e>
c0018caa:	31 c9                	xor    ecx,ecx
c0018cac:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018cb0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	68 80 00 00 00       	push   0x80
c0018cbc:	57                   	push   edi
c0018cbd:	6a 00                	push   0x0
c0018cbf:	56                   	push   esi
c0018cc0:	53                   	push   ebx
c0018cc1:	e8 f8 fd ff ff       	call   c0018abe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018cc6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018ccb:	89 e8                	mov    eax,ebp
c0018ccd:	89 d1                	mov    ecx,edx
c0018ccf:	c1 e0 06             	shl    eax,0x6
c0018cd2:	01 d8                	add    eax,ebx
c0018cd4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018cdb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018ce2:	89 f2                	mov    edx,esi
c0018ce4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018cea:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018cee:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018cf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cf8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018cff:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018d07:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018d0e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018d16:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018d1c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018d23:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018d29:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018d2d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018d31:	83 c4 20             	add    esp,0x20
c0018d34:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018d37:	83 c0 02             	add    eax,0x2
c0018d3a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018d40:	83 c7 02             	add    edi,0x2
c0018d43:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018d46:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018d4c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018d50:	75 e2                	jne    c0018d34 <IDE::detect()+0x1aa>
c0018d52:	89 e8                	mov    eax,ebp
c0018d54:	c1 e0 06             	shl    eax,0x6
c0018d57:	01 d8                	add    eax,ebx
c0018d59:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018d5f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018d66:	66 c1 ea 09          	shr    dx,0x9
c0018d6a:	83 e2 01             	and    edx,0x1
c0018d6d:	84 c9                	test   cl,cl
c0018d6f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018d75:	75 22                	jne    c0018d99 <IDE::detect()+0x20f>
c0018d77:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018d7e:	74 46                	je     c0018dc6 <IDE::detect()+0x23c>
c0018d80:	83 ec 0c             	sub    esp,0xc
c0018d83:	68 7c 01 00 00       	push   0x17c
c0018d88:	e8 d4 dd fe ff       	call   c0006b61 <malloc>
c0018d8d:	89 c7                	mov    edi,eax
c0018d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d92:	e8 11 05 00 00       	call   c00192a8 <ATA::ATA()>
c0018d97:	eb 17                	jmp    c0018db0 <IDE::detect()+0x226>
c0018d99:	83 ec 0c             	sub    esp,0xc
c0018d9c:	68 84 01 00 00       	push   0x184
c0018da1:	e8 bb dd fe ff       	call   c0006b61 <malloc>
c0018da6:	89 c7                	mov    edi,eax
c0018da8:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dab:	e8 f0 0a 00 00       	call   c00198a0 <ATAPI::ATAPI()>
c0018db0:	5a                   	pop    edx
c0018db1:	59                   	pop    ecx
c0018db2:	57                   	push   edi
c0018db3:	53                   	push   ebx
c0018db4:	e8 77 1f ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0018db9:	8b 07                	mov    eax,DWORD PTR [edi]
c0018dbb:	53                   	push   ebx
c0018dbc:	55                   	push   ebp
c0018dbd:	6a 00                	push   0x0
c0018dbf:	57                   	push   edi
c0018dc0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018dc3:	83 c4 20             	add    esp,0x20
c0018dc6:	45                   	inc    ebp
c0018dc7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018dcc:	74 0d                	je     c0018ddb <IDE::detect()+0x251>
c0018dce:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018dd6:	e9 e0 fd ff ff       	jmp    c0018bbb <IDE::detect()+0x31>
c0018ddb:	4e                   	dec    esi
c0018ddc:	74 61                	je     c0018e3f <IDE::detect()+0x2b5>
c0018dde:	be 01 00 00 00       	mov    esi,0x1
c0018de3:	e9 cb fd ff ff       	jmp    c0018bb3 <IDE::detect()+0x29>
c0018de8:	50                   	push   eax
c0018de9:	6a 04                	push   0x4
c0018deb:	56                   	push   esi
c0018dec:	53                   	push   ebx
c0018ded:	e8 2a f7 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018df2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018df6:	83 c4 0c             	add    esp,0xc
c0018df9:	6a 05                	push   0x5
c0018dfb:	56                   	push   esi
c0018dfc:	53                   	push   ebx
c0018dfd:	e8 1a f7 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018e02:	83 c4 10             	add    esp,0x10
c0018e05:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e09:	80 fa 14             	cmp    dl,0x14
c0018e0c:	75 04                	jne    c0018e12 <IDE::detect()+0x288>
c0018e0e:	3c eb                	cmp    al,0xeb
c0018e10:	eb 07                	jmp    c0018e19 <IDE::detect()+0x28f>
c0018e12:	3c 96                	cmp    al,0x96
c0018e14:	75 b1                	jne    c0018dc7 <IDE::detect()+0x23d>
c0018e16:	80 fa 69             	cmp    dl,0x69
c0018e19:	75 ac                	jne    c0018dc7 <IDE::detect()+0x23d>
c0018e1b:	68 a1 00 00 00       	push   0xa1
c0018e20:	6a 07                	push   0x7
c0018e22:	56                   	push   esi
c0018e23:	53                   	push   ebx
c0018e24:	e8 33 f6 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e29:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0018e30:	e8 5f 9c ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	b1 01                	mov    cl,0x1
c0018e3a:	e9 6d fe ff ff       	jmp    c0018cac <IDE::detect()+0x122>
c0018e3f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018e45:	5b                   	pop    ebx
c0018e46:	5e                   	pop    esi
c0018e47:	5f                   	pop    edi
c0018e48:	5d                   	pop    ebp
c0018e49:	c3                   	ret    

c0018e4a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0018e4a:	55                   	push   ebp
c0018e4b:	57                   	push   edi
c0018e4c:	56                   	push   esi
c0018e4d:	53                   	push   ebx
c0018e4e:	83 ec 1c             	sub    esp,0x1c
c0018e51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018e55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018e59:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018e5d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0018e61:	88 c3                	mov    bl,al
c0018e63:	84 c0                	test   al,al
c0018e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e69:	0f 84 81 00 00 00    	je     c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018e6f:	83 ec 0c             	sub    esp,0xc
c0018e72:	68 2b e6 01 c0       	push   0xc001e62b
c0018e77:	e8 74 0a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e83:	3c 01                	cmp    al,0x1
c0018e85:	74 63                	je     c0018eea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0018e87:	3c 02                	cmp    al,0x2
c0018e89:	75 53                	jne    c0018ede <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0018e8b:	01 f6                	add    esi,esi
c0018e8d:	09 ee                	or     esi,ebp
c0018e8f:	50                   	push   eax
c0018e90:	89 f0                	mov    eax,esi
c0018e92:	6a 01                	push   0x1
c0018e94:	0f b6 f0             	movzx  esi,al
c0018e97:	c1 e6 06             	shl    esi,0x6
c0018e9a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0018ea2:	50                   	push   eax
c0018ea3:	57                   	push   edi
c0018ea4:	e8 73 f6 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	a8 01                	test   al,0x1
c0018eae:	74 02                	je     c0018eb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0018eb0:	b3 07                	mov    bl,0x7
c0018eb2:	a8 02                	test   al,0x2
c0018eb4:	74 02                	je     c0018eb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0018eb6:	b3 03                	mov    bl,0x3
c0018eb8:	a8 04                	test   al,0x4
c0018eba:	74 02                	je     c0018ebe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0018ebc:	b3 14                	mov    bl,0x14
c0018ebe:	a8 08                	test   al,0x8
c0018ec0:	74 02                	je     c0018ec4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0018ec2:	b3 03                	mov    bl,0x3
c0018ec4:	a8 10                	test   al,0x10
c0018ec6:	74 02                	je     c0018eca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0018ec8:	b3 15                	mov    bl,0x15
c0018eca:	a8 20                	test   al,0x20
c0018ecc:	74 02                	je     c0018ed0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0018ece:	b3 03                	mov    bl,0x3
c0018ed0:	a8 40                	test   al,0x40
c0018ed2:	74 02                	je     c0018ed6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0018ed4:	b3 16                	mov    bl,0x16
c0018ed6:	84 c0                	test   al,al
c0018ed8:	79 16                	jns    c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018eda:	b3 0d                	mov    bl,0xd
c0018edc:	eb 12                	jmp    c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018ede:	3c 03                	cmp    al,0x3
c0018ee0:	74 0c                	je     c0018eee <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0018ee2:	3c 04                	cmp    al,0x4
c0018ee4:	75 0a                	jne    c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018ee6:	b3 08                	mov    bl,0x8
c0018ee8:	eb 06                	jmp    c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018eea:	b3 13                	mov    bl,0x13
c0018eec:	eb 02                	jmp    c0018ef0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018eee:	b3 17                	mov    bl,0x17
c0018ef0:	83 c4 1c             	add    esp,0x1c
c0018ef3:	88 d8                	mov    al,bl
c0018ef5:	5b                   	pop    ebx
c0018ef6:	5e                   	pop    esi
c0018ef7:	5f                   	pop    edi
c0018ef8:	5d                   	pop    ebp
c0018ef9:	c3                   	ret    

c0018efa <IDE::polling(unsigned char, unsigned int)>:
c0018efa:	55                   	push   ebp
c0018efb:	bd 04 00 00 00       	mov    ebp,0x4
c0018f00:	57                   	push   edi
c0018f01:	56                   	push   esi
c0018f02:	53                   	push   ebx
c0018f03:	83 ec 0c             	sub    esp,0xc
c0018f06:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018f0a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0018f0e:	0f b6 f3             	movzx  esi,bl
c0018f11:	52                   	push   edx
c0018f12:	6a 0c                	push   0xc
c0018f14:	56                   	push   esi
c0018f15:	57                   	push   edi
c0018f16:	e8 01 f6 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	4d                   	dec    ebp
c0018f1f:	75 ed                	jne    c0018f0e <IDE::polling(unsigned char, unsigned int)+0x14>
c0018f21:	bb a0 86 01 00       	mov    ebx,0x186a0
c0018f26:	50                   	push   eax
c0018f27:	6a 0c                	push   0xc
c0018f29:	56                   	push   esi
c0018f2a:	57                   	push   edi
c0018f2b:	e8 ec f5 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	a8 01                	test   al,0x1
c0018f35:	75 17                	jne    c0018f4e <IDE::polling(unsigned char, unsigned int)+0x54>
c0018f37:	a8 20                	test   al,0x20
c0018f39:	75 0f                	jne    c0018f4a <IDE::polling(unsigned char, unsigned int)+0x50>
c0018f3b:	4b                   	dec    ebx
c0018f3c:	74 10                	je     c0018f4e <IDE::polling(unsigned char, unsigned int)+0x54>
c0018f3e:	84 c0                	test   al,al
c0018f40:	78 e4                	js     c0018f26 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018f42:	a8 08                	test   al,0x8
c0018f44:	74 e0                	je     c0018f26 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018f46:	31 c0                	xor    eax,eax
c0018f48:	eb 06                	jmp    c0018f50 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018f4a:	b0 01                	mov    al,0x1
c0018f4c:	eb 02                	jmp    c0018f50 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018f4e:	b0 02                	mov    al,0x2
c0018f50:	83 c4 0c             	add    esp,0xc
c0018f53:	5b                   	pop    ebx
c0018f54:	5e                   	pop    esi
c0018f55:	5f                   	pop    edi
c0018f56:	5d                   	pop    ebp
c0018f57:	c3                   	ret    

c0018f58 <SATABus::close(int, int, void*)>:
c0018f58:	31 c0                	xor    eax,eax
c0018f5a:	c3                   	ret    
c0018f5b:	90                   	nop

c0018f5c <SATABus::detect()>:
c0018f5c:	c3                   	ret    
c0018f5d:	90                   	nop

c0018f5e <SATABus::SATABus()>:
c0018f5e:	83 ec 0c             	sub    esp,0xc
c0018f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f65:	83 ec 08             	sub    esp,0x8
c0018f68:	68 64 e6 01 c0       	push   0xc001e664
c0018f6d:	50                   	push   eax
c0018f6e:	e8 01 21 ff ff       	call   c000b074 <HardDiskController::HardDiskController(char const*)>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	ba 90 e6 01 c0       	mov    edx,0xc001e690
c0018f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f7f:	89 10                	mov    DWORD PTR [eax],edx
c0018f81:	83 ec 0c             	sub    esp,0xc
c0018f84:	6a 50                	push   0x50
c0018f86:	e8 61 e0 fe ff       	call   c0006fec <Phys::allocateContiguousPages(int)>
c0018f8b:	83 c4 10             	add    esp,0x10
c0018f8e:	89 c2                	mov    edx,eax
c0018f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f94:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018f9a:	83 ec 0c             	sub    esp,0xc
c0018f9d:	6a 50                	push   0x50
c0018f9f:	e8 f9 f6 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	89 c2                	mov    edx,eax
c0018fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018fb3:	a1 90 f3 01 c0       	mov    eax,ds:0xc001f390
c0018fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fbc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0018fc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fc6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0018fcc:	83 ec 0c             	sub    esp,0xc
c0018fcf:	6a 03                	push   0x3
c0018fd1:	6a 50                	push   0x50
c0018fd3:	51                   	push   ecx
c0018fd4:	52                   	push   edx
c0018fd5:	50                   	push   eax
c0018fd6:	e8 51 00 ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018fdb:	83 c4 20             	add    esp,0x20
c0018fde:	90                   	nop
c0018fdf:	83 c4 0c             	add    esp,0xc
c0018fe2:	c3                   	ret    
c0018fe3:	90                   	nop

c0018fe4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0018fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fe8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0018feb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fee:	09 c2                	or     edx,eax
c0018ff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ff4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ffa:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018ffc:	31 c0                	xor    eax,eax
c0018ffe:	c1 e9 08             	shr    ecx,0x8
c0019001:	83 e1 0f             	and    ecx,0xf
c0019004:	39 c8                	cmp    eax,ecx
c0019006:	74 0a                	je     c0019012 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019008:	f6 c2 01             	test   dl,0x1
c001900b:	74 08                	je     c0019015 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001900d:	d1 ea                	shr    edx,1
c001900f:	40                   	inc    eax
c0019010:	eb f2                	jmp    c0019004 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019012:	83 c8 ff             	or     eax,0xffffffff
c0019015:	c3                   	ret    

c0019016 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019016:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001901a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001901d:	89 c2                	mov    edx,eax
c001901f:	c1 ea 08             	shr    edx,0x8
c0019022:	83 e2 0f             	and    edx,0xf
c0019025:	fe ca                	dec    dl
c0019027:	75 31                	jne    c001905a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019029:	83 e0 0f             	and    eax,0xf
c001902c:	3c 03                	cmp    al,0x3
c001902e:	75 2a                	jne    c001905a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019030:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019033:	b8 02 00 00 00       	mov    eax,0x2
c0019038:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001903e:	74 1c                	je     c001905c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019040:	b8 04 00 00 00       	mov    eax,0x4
c0019045:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001904b:	74 0f                	je     c001905c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001904d:	31 c0                	xor    eax,eax
c001904f:	83 fa 03             	cmp    edx,0x3
c0019052:	0f 94 c0             	sete   al
c0019055:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019059:	c3                   	ret    
c001905a:	31 c0                	xor    eax,eax
c001905c:	c3                   	ret    
c001905d:	90                   	nop

c001905e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001905e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019062:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019065:	0f ba e2 0f          	bt     edx,0xf
c0019069:	72 f7                	jb     c0019062 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001906b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001906e:	83 ca 10             	or     edx,0x10
c0019071:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019074:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019077:	83 ca 01             	or     edx,0x1
c001907a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001907d:	c3                   	ret    

c001907e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001907e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019082:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019085:	83 e2 fe             	and    edx,0xfffffffe
c0019088:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001908b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001908e:	83 e2 ef             	and    edx,0xffffffef
c0019091:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019094:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019097:	0f ba e2 0e          	bt     edx,0xe
c001909b:	72 f7                	jb     c0019094 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001909d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00190a0:	0f ba e2 0f          	bt     edx,0xf
c00190a4:	72 ee                	jb     c0019094 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00190a6:	c3                   	ret    
c00190a7:	90                   	nop

c00190a8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00190a8:	55                   	push   ebp
c00190a9:	57                   	push   edi
c00190aa:	56                   	push   esi
c00190ab:	53                   	push   ebx
c00190ac:	83 ec 1c             	sub    esp,0x1c
c00190af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00190b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00190b7:	53                   	push   ebx
c00190b8:	56                   	push   esi
c00190b9:	e8 c0 ff ff ff       	call   c001907e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00190be:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00190c2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	c1 e5 0a             	shl    ebp,0xa
c00190ce:	01 e8                	add    eax,ebp
c00190d0:	89 03                	mov    DWORD PTR [ebx],eax
c00190d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00190d4:	68 00 04 00 00       	push   0x400
c00190d9:	6a 00                	push   0x0
c00190db:	50                   	push   eax
c00190dc:	e8 0f 74 fe ff       	call   c00004f0 <memset>
c00190e1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00190e7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00190eb:	01 e8                	add    eax,ebp
c00190ed:	83 c4 1c             	add    esp,0x1c
c00190f0:	89 03                	mov    DWORD PTR [ebx],eax
c00190f2:	c1 e2 08             	shl    edx,0x8
c00190f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00190fc:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019102:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019108:	01 f8                	add    eax,edi
c001910a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001910d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019110:	68 00 01 00 00       	push   0x100
c0019115:	6a 00                	push   0x0
c0019117:	50                   	push   eax
c0019118:	e8 d3 73 fe ff       	call   c00004f0 <memset>
c001911d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019123:	01 fa                	add    edx,edi
c0019125:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019129:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001912c:	c1 e7 0d             	shl    edi,0xd
c001912f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019136:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001913c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019142:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019146:	31 ff                	xor    edi,edi
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019155:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001915b:	83 c5 20             	add    ebp,0x20
c001915e:	01 f8                	add    eax,edi
c0019160:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019163:	52                   	push   edx
c0019164:	68 00 01 00 00       	push   0x100
c0019169:	6a 00                	push   0x0
c001916b:	50                   	push   eax
c001916c:	e8 7f 73 fe ff       	call   c00004f0 <memset>
c0019171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001917e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019185:	01 f8                	add    eax,edi
c0019187:	81 c7 00 01 00 00    	add    edi,0x100
c001918d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019190:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019196:	75 b3                	jne    c001914b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019198:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001919f:	50                   	push   eax
c00191a0:	50                   	push   eax
c00191a1:	53                   	push   ebx
c00191a2:	56                   	push   esi
c00191a3:	e8 b6 fe ff ff       	call   c001905e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00191a8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00191af:	83 c4 2c             	add    esp,0x2c
c00191b2:	5b                   	pop    ebx
c00191b3:	5e                   	pop    esi
c00191b4:	5f                   	pop    edi
c00191b5:	5d                   	pop    ebp
c00191b6:	c3                   	ret    
c00191b7:	90                   	nop

c00191b8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00191b8:	55                   	push   ebp
c00191b9:	57                   	push   edi
c00191ba:	56                   	push   esi
c00191bb:	53                   	push   ebx
c00191bc:	31 db                	xor    ebx,ebx
c00191be:	83 ec 0c             	sub    esp,0xc
c00191c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00191c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00191c9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00191cc:	f7 c7 01 00 00 00    	test   edi,0x1
c00191d2:	74 7a                	je     c001924e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00191d4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00191d8:	89 d8                	mov    eax,ebx
c00191da:	c1 e0 07             	shl    eax,0x7
c00191dd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00191e4:	55                   	push   ebp
c00191e5:	56                   	push   esi
c00191e6:	e8 2b fe ff ff       	call   c0019016 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00191eb:	5a                   	pop    edx
c00191ec:	83 f8 01             	cmp    eax,0x1
c00191ef:	59                   	pop    ecx
c00191f0:	75 21                	jne    c0019213 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00191f2:	50                   	push   eax
c00191f3:	53                   	push   ebx
c00191f4:	55                   	push   ebp
c00191f5:	56                   	push   esi
c00191f6:	e8 ad fe ff ff       	call   c00190a8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00191fb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019202:	e8 5a d9 fe ff       	call   c0006b61 <malloc>
c0019207:	89 c5                	mov    ebp,eax
c0019209:	89 04 24             	mov    DWORD PTR [esp],eax
c001920c:	e8 43 0d 00 00       	call   c0019f54 <SATA::SATA()>
c0019211:	eb 24                	jmp    c0019237 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019213:	83 f8 04             	cmp    eax,0x4
c0019216:	75 36                	jne    c001924e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019218:	51                   	push   ecx
c0019219:	53                   	push   ebx
c001921a:	55                   	push   ebp
c001921b:	56                   	push   esi
c001921c:	e8 87 fe ff ff       	call   c00190a8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019221:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019228:	e8 34 d9 fe ff       	call   c0006b61 <malloc>
c001922d:	89 c5                	mov    ebp,eax
c001922f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019232:	e8 71 11 00 00       	call   c001a3a8 <SATAPI::SATAPI()>
c0019237:	58                   	pop    eax
c0019238:	5a                   	pop    edx
c0019239:	55                   	push   ebp
c001923a:	56                   	push   esi
c001923b:	e8 f0 1a ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0019240:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019243:	56                   	push   esi
c0019244:	6a 00                	push   0x0
c0019246:	53                   	push   ebx
c0019247:	55                   	push   ebp
c0019248:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001924b:	83 c4 20             	add    esp,0x20
c001924e:	d1 ef                	shr    edi,1
c0019250:	43                   	inc    ebx
c0019251:	83 fb 20             	cmp    ebx,0x20
c0019254:	0f 85 72 ff ff ff    	jne    c00191cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001925a:	83 c4 0c             	add    esp,0xc
c001925d:	5b                   	pop    ebx
c001925e:	5e                   	pop    esi
c001925f:	5f                   	pop    edi
c0019260:	5d                   	pop    ebp
c0019261:	c3                   	ret    

c0019262 <SATABus::open(int, int, void*)>:
c0019262:	83 ec 14             	sub    esp,0x14
c0019265:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019269:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001926f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019275:	52                   	push   edx
c0019276:	50                   	push   eax
c0019277:	e8 3c ff ff ff       	call   c00191b8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001927c:	31 c0                	xor    eax,eax
c001927e:	83 c4 1c             	add    esp,0x1c
c0019281:	c3                   	ret    

c0019282 <ATA::close(int, int, void*)>:
c0019282:	83 ec 0c             	sub    esp,0xc
c0019285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019289:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001928f:	85 c0                	test   eax,eax
c0019291:	74 0c                	je     c001929f <ATA::close(int, int, void*)+0x1d>
c0019293:	83 ec 0c             	sub    esp,0xc
c0019296:	8b 10                	mov    edx,DWORD PTR [eax]
c0019298:	50                   	push   eax
c0019299:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	31 c0                	xor    eax,eax
c00192a1:	83 c4 0c             	add    esp,0xc
c00192a4:	c3                   	ret    
c00192a5:	90                   	nop

c00192a6 <ATA::powerSaving(PowerSavingLevel)>:
c00192a6:	c3                   	ret    
c00192a7:	90                   	nop

c00192a8 <ATA::ATA()>:
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192af:	83 ec 04             	sub    esp,0x4
c00192b2:	68 00 02 00 00       	push   0x200
c00192b7:	68 5d e7 01 c0       	push   0xc001e75d
c00192bc:	50                   	push   eax
c00192bd:	e8 3c 1e ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c00192ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192ce:	89 10                	mov    DWORD PTR [eax],edx
c00192d0:	90                   	nop
c00192d1:	83 c4 0c             	add    esp,0xc
c00192d4:	c3                   	ret    
c00192d5:	90                   	nop

c00192d6 <ATA::flush(bool)>:
c00192d6:	53                   	push   ebx
c00192d7:	83 ec 08             	sub    esp,0x8
c00192da:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00192df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192e3:	19 c0                	sbb    eax,eax
c00192e5:	83 e0 fd             	and    eax,0xfffffffd
c00192e8:	05 ea 00 00 00       	add    eax,0xea
c00192ed:	50                   	push   eax
c00192ee:	6a 07                	push   0x7
c00192f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00192f7:	50                   	push   eax
c00192f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00192fe:	e8 59 f1 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019303:	83 c4 0c             	add    esp,0xc
c0019306:	6a 00                	push   0x0
c0019308:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001930f:	50                   	push   eax
c0019310:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019316:	e8 df fb ff ff       	call   c0018efa <IDE::polling(unsigned char, unsigned int)>
c001931b:	83 c4 18             	add    esp,0x18
c001931e:	5b                   	pop    ebx
c001931f:	c3                   	ret    

c0019320 <ATA::readyForCommand()>:
c0019320:	56                   	push   esi
c0019321:	53                   	push   ebx
c0019322:	53                   	push   ebx
c0019323:	31 db                	xor    ebx,ebx
c0019325:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019329:	51                   	push   ecx
c001932a:	6a 0c                	push   0xc
c001932c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019333:	50                   	push   eax
c0019334:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001933a:	e8 dd f1 ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c001933f:	83 c4 10             	add    esp,0x10
c0019342:	a8 88                	test   al,0x88
c0019344:	74 1f                	je     c0019365 <ATA::readyForCommand()+0x45>
c0019346:	43                   	inc    ebx
c0019347:	83 fb 63             	cmp    ebx,0x63
c001934a:	7e dd                	jle    c0019329 <ATA::readyForCommand()+0x9>
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	6a 0a                	push   0xa
c0019351:	e8 3e 97 ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001935f:	75 c8                	jne    c0019329 <ATA::readyForCommand()+0x9>
c0019361:	31 c0                	xor    eax,eax
c0019363:	eb 02                	jmp    c0019367 <ATA::readyForCommand()+0x47>
c0019365:	b0 01                	mov    al,0x1
c0019367:	5a                   	pop    edx
c0019368:	5b                   	pop    ebx
c0019369:	5e                   	pop    esi
c001936a:	c3                   	ret    
c001936b:	90                   	nop

c001936c <ATA::access(unsigned long long, int, void*, bool)>:
c001936c:	55                   	push   ebp
c001936d:	57                   	push   edi
c001936e:	56                   	push   esi
c001936f:	53                   	push   ebx
c0019370:	83 ec 2c             	sub    esp,0x2c
c0019373:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019377:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001937b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001937f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019383:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019387:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001938b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001938f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019399:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001939f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00193a3:	c1 e0 06             	shl    eax,0x6
c00193a6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00193ae:	74 5d                	je     c001940d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00193b0:	89 fa                	mov    edx,edi
c00193b2:	89 f0                	mov    eax,esi
c00193b4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00193b8:	c1 ea 1c             	shr    edx,0x1c
c00193bb:	89 d1                	mov    ecx,edx
c00193bd:	09 c1                	or     ecx,eax
c00193bf:	74 25                	je     c00193e6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00193c1:	31 ed                	xor    ebp,ebp
c00193c3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00193ca:	89 fa                	mov    edx,edi
c00193cc:	89 f0                	mov    eax,esi
c00193ce:	0f ad d0             	shrd   eax,edx,cl
c00193d1:	d3 ea                	shr    edx,cl
c00193d3:	f6 c1 20             	test   cl,0x20
c00193d6:	74 02                	je     c00193da <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00193d8:	89 d0                	mov    eax,edx
c00193da:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00193de:	45                   	inc    ebp
c00193df:	83 fd 06             	cmp    ebp,0x6
c00193e2:	75 df                	jne    c00193c3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00193e4:	eb 76                	jmp    c001945c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00193e6:	89 f0                	mov    eax,esi
c00193e8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00193ed:	89 fa                	mov    edx,edi
c00193ef:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00193f6:	0f ac d0 10          	shrd   eax,edx,0x10
c00193fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00193ff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019403:	c1 ee 18             	shr    esi,0x18
c0019406:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001940b:	eb 56                	jmp    c0019463 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001940d:	6a 00                	push   0x0
c001940f:	6a 3f                	push   0x3f
c0019411:	57                   	push   edi
c0019412:	56                   	push   esi
c0019413:	e8 28 22 00 00       	call   c001b640 <__umoddi3>
c0019418:	83 c4 10             	add    esp,0x10
c001941b:	40                   	inc    eax
c001941c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019420:	6a 00                	push   0x0
c0019422:	68 f0 03 00 00       	push   0x3f0
c0019427:	57                   	push   edi
c0019428:	56                   	push   esi
c0019429:	e8 12 21 00 00       	call   c001b540 <__udivdi3>
c001942e:	83 c4 10             	add    esp,0x10
c0019431:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019436:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001943d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019442:	6a 00                	push   0x0
c0019444:	6a 3f                	push   0x3f
c0019446:	57                   	push   edi
c0019447:	56                   	push   esi
c0019448:	e8 f3 20 00 00       	call   c001b540 <__udivdi3>
c001944d:	83 c4 10             	add    esp,0x10
c0019450:	89 c6                	mov    esi,eax
c0019452:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019457:	83 e6 0f             	and    esi,0xf
c001945a:	eb 07                	jmp    c0019463 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001945c:	31 f6                	xor    esi,esi
c001945e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019463:	bf 01 00 00 00       	mov    edi,0x1
c0019468:	50                   	push   eax
c0019469:	6a 00                	push   0x0
c001946b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019472:	50                   	push   eax
c0019473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019477:	e8 ee f1 ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c001947c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001947f:	e8 9c fe ff ff       	call   c0019320 <ATA::readyForCommand()>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	84 c0                	test   al,al
c0019489:	0f 84 4e 02 00 00    	je     c00196dd <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001948f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019495:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001949b:	c1 e0 04             	shl    eax,0x4
c001949e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00194a5:	09 c6                	or     esi,eax
c00194a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00194ac:	75 05                	jne    c00194b3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00194ae:	83 ce a0             	or     esi,0xffffffa0
c00194b1:	eb 03                	jmp    c00194b6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00194b3:	83 ce e0             	or     esi,0xffffffe0
c00194b6:	89 f0                	mov    eax,esi
c00194b8:	0f b6 f0             	movzx  esi,al
c00194bb:	56                   	push   esi
c00194bc:	6a 06                	push   0x6
c00194be:	51                   	push   ecx
c00194bf:	52                   	push   edx
c00194c0:	e8 97 ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194c5:	83 c4 10             	add    esp,0x10
c00194c8:	6a 00                	push   0x0
c00194ca:	6a 01                	push   0x1
c00194cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194d3:	50                   	push   eax
c00194d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194da:	e8 7d ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194df:	83 c4 10             	add    esp,0x10
c00194e2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00194e7:	75 6e                	jne    c0019557 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00194e9:	6a 00                	push   0x0
c00194eb:	6a 08                	push   0x8
c00194ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00194f4:	50                   	push   eax
c00194f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194fb:	e8 5c ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019500:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019505:	50                   	push   eax
c0019506:	6a 09                	push   0x9
c0019508:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001950f:	50                   	push   eax
c0019510:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019516:	e8 41 ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001951b:	83 c4 20             	add    esp,0x20
c001951e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019523:	50                   	push   eax
c0019524:	6a 0a                	push   0xa
c0019526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001952d:	50                   	push   eax
c001952e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019534:	e8 23 ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019539:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001953e:	50                   	push   eax
c001953f:	6a 0b                	push   0xb
c0019541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019548:	50                   	push   eax
c0019549:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001954f:	e8 08 ef ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019554:	83 c4 20             	add    esp,0x20
c0019557:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001955c:	50                   	push   eax
c001955d:	6a 02                	push   0x2
c001955f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019566:	50                   	push   eax
c0019567:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001956d:	e8 ea ee ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019572:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019577:	50                   	push   eax
c0019578:	6a 03                	push   0x3
c001957a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019581:	50                   	push   eax
c0019582:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019588:	e8 cf ee ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001958d:	83 c4 20             	add    esp,0x20
c0019590:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019595:	50                   	push   eax
c0019596:	6a 04                	push   0x4
c0019598:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001959f:	50                   	push   eax
c00195a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195a6:	e8 b1 ee ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00195b0:	50                   	push   eax
c00195b1:	6a 05                	push   0x5
c00195b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195ba:	50                   	push   eax
c00195bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195c1:	e8 96 ee ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195c6:	83 c4 20             	add    esp,0x20
c00195c9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00195ce:	0f 94 c0             	sete   al
c00195d1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00195d6:	74 09                	je     c00195e1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00195d8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00195df:	eb 07                	jmp    c00195e8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00195e1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00195e8:	0f b6 c0             	movzx  eax,al
c00195eb:	50                   	push   eax
c00195ec:	6a 07                	push   0x7
c00195ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195f5:	50                   	push   eax
c00195f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195fc:	e8 5b ee ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019601:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019605:	83 c4 10             	add    esp,0x10
c0019608:	85 f6                	test   esi,esi
c001960a:	0f 84 ae 00 00 00    	je     c00196be <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019610:	50                   	push   eax
c0019611:	6a 01                	push   0x1
c0019613:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001961a:	50                   	push   eax
c001961b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019621:	e8 d4 f8 ff ff       	call   c0018efa <IDE::polling(unsigned char, unsigned int)>
c0019626:	83 c4 10             	add    esp,0x10
c0019629:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001962f:	84 c0                	test   al,al
c0019631:	74 20                	je     c0019653 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019633:	0f b6 f8             	movzx  edi,al
c0019636:	0f b6 d2             	movzx  edx,dl
c0019639:	57                   	push   edi
c001963a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019641:	50                   	push   eax
c0019642:	52                   	push   edx
c0019643:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019649:	e8 fc f7 ff ff       	call   c0018e4a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001964e:	e9 87 00 00 00       	jmp    c00196da <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019653:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019658:	74 33                	je     c001968d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001965a:	31 ed                	xor    ebp,ebp
c001965c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019660:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019664:	50                   	push   eax
c0019665:	50                   	push   eax
c0019666:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001966d:	50                   	push   eax
c001966e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019674:	e8 d1 ed ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c0019679:	89 c2                	mov    edx,eax
c001967b:	89 f8                	mov    eax,edi
c001967d:	66 ef                	out    dx,ax
c001967f:	45                   	inc    ebp
c0019680:	83 c4 10             	add    esp,0x10
c0019683:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019689:	75 d1                	jne    c001965c <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001968b:	eb 23                	jmp    c00196b0 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001968d:	0f b6 d2             	movzx  edx,dl
c0019690:	51                   	push   ecx
c0019691:	51                   	push   ecx
c0019692:	52                   	push   edx
c0019693:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019699:	e8 ac ed ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c001969e:	b9 00 01 00 00       	mov    ecx,0x100
c00196a3:	89 c2                	mov    edx,eax
c00196a5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00196a9:	fc                   	cld    
c00196aa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00196b8:	4e                   	dec    esi
c00196b9:	e9 4a ff ff ff       	jmp    c0019608 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00196be:	31 ff                	xor    edi,edi
c00196c0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00196c5:	74 16                	je     c00196dd <ATA::access(unsigned long long, int, void*, bool)+0x371>
c00196c7:	50                   	push   eax
c00196c8:	50                   	push   eax
c00196c9:	31 c0                	xor    eax,eax
c00196cb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00196d0:	0f 94 c0             	sete   al
c00196d3:	50                   	push   eax
c00196d4:	53                   	push   ebx
c00196d5:	e8 fc fb ff ff       	call   c00192d6 <ATA::flush(bool)>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	83 c4 2c             	add    esp,0x2c
c00196e0:	89 f8                	mov    eax,edi
c00196e2:	5b                   	pop    ebx
c00196e3:	5e                   	pop    esi
c00196e4:	5f                   	pop    edi
c00196e5:	5d                   	pop    ebp
c00196e6:	c3                   	ret    
c00196e7:	90                   	nop

c00196e8 <ATA::read(unsigned long long, int, void*)>:
c00196e8:	57                   	push   edi
c00196e9:	b8 04 00 00 00       	mov    eax,0x4
c00196ee:	56                   	push   esi
c00196ef:	53                   	push   ebx
c00196f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00196f8:	8d 7a ff             	lea    edi,[edx-0x1]
c00196fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00196ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019703:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019709:	77 25                	ja     c0019730 <ATA::read(unsigned long long, int, void*)+0x48>
c001970b:	b8 06 00 00 00       	mov    eax,0x6
c0019710:	85 f6                	test   esi,esi
c0019712:	74 1c                	je     c0019730 <ATA::read(unsigned long long, int, void*)+0x48>
c0019714:	50                   	push   eax
c0019715:	50                   	push   eax
c0019716:	6a 00                	push   0x0
c0019718:	56                   	push   esi
c0019719:	52                   	push   edx
c001971a:	53                   	push   ebx
c001971b:	51                   	push   ecx
c001971c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019720:	e8 47 fc ff ff       	call   c001936c <ATA::access(unsigned long long, int, void*, bool)>
c0019725:	83 c4 20             	add    esp,0x20
c0019728:	85 c0                	test   eax,eax
c001972a:	0f 95 c0             	setne  al
c001972d:	0f b6 c0             	movzx  eax,al
c0019730:	5b                   	pop    ebx
c0019731:	5e                   	pop    esi
c0019732:	5f                   	pop    edi
c0019733:	c3                   	ret    

c0019734 <ATA::write(unsigned long long, int, void*)>:
c0019734:	57                   	push   edi
c0019735:	b8 04 00 00 00       	mov    eax,0x4
c001973a:	56                   	push   esi
c001973b:	53                   	push   ebx
c001973c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019740:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019744:	8d 7a ff             	lea    edi,[edx-0x1]
c0019747:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001974b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001974f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019755:	77 25                	ja     c001977c <ATA::write(unsigned long long, int, void*)+0x48>
c0019757:	b8 06 00 00 00       	mov    eax,0x6
c001975c:	85 f6                	test   esi,esi
c001975e:	74 1c                	je     c001977c <ATA::write(unsigned long long, int, void*)+0x48>
c0019760:	50                   	push   eax
c0019761:	50                   	push   eax
c0019762:	6a 01                	push   0x1
c0019764:	56                   	push   esi
c0019765:	52                   	push   edx
c0019766:	53                   	push   ebx
c0019767:	51                   	push   ecx
c0019768:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001976c:	e8 fb fb ff ff       	call   c001936c <ATA::access(unsigned long long, int, void*, bool)>
c0019771:	83 c4 20             	add    esp,0x20
c0019774:	85 c0                	test   eax,eax
c0019776:	0f 95 c0             	setne  al
c0019779:	0f b6 c0             	movzx  eax,al
c001977c:	5b                   	pop    ebx
c001977d:	5e                   	pop    esi
c001977e:	5f                   	pop    edi
c001977f:	c3                   	ret    

c0019780 <ATA::detectCHS()>:
c0019780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019784:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001978a:	c1 e0 06             	shl    eax,0x6
c001978d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019793:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001979d:	c7 44 24 04 b4 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6b4
c00197a5:	e9 95 5c ff ff       	jmp    c000f43f <Krnl::panic(char const*)>

c00197aa <ATA::open(int, int, void*)>:
c00197aa:	53                   	push   ebx
c00197ab:	83 ec 08             	sub    esp,0x8
c00197ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00197c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00197c6:	c1 e0 06             	shl    eax,0x6
c00197c9:	01 d0                	add    eax,edx
c00197cb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00197d2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00197d8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00197df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00197e9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00197ef:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00197f6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00197fd:	75 0c                	jne    c001980b <ATA::open(int, int, void*)+0x61>
c00197ff:	83 ec 0c             	sub    esp,0xc
c0019802:	53                   	push   ebx
c0019803:	e8 78 ff ff ff       	call   c0019780 <ATA::detectCHS()>
c0019808:	83 c4 10             	add    esp,0x10
c001980b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019811:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019817:	c1 e0 06             	shl    eax,0x6
c001981a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019821:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001982b:	d1 e8                	shr    eax,1
c001982d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019833:	6a 04                	push   0x4
c0019835:	6a 0c                	push   0xc
c0019837:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001983e:	50                   	push   eax
c001983f:	52                   	push   edx
c0019840:	e8 17 ec ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019845:	90                   	nop
c0019846:	90                   	nop
c0019847:	6a 00                	push   0x0
c0019849:	6a 0c                	push   0xc
c001984b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019852:	50                   	push   eax
c0019853:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019859:	e8 fe eb ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001985e:	83 c4 14             	add    esp,0x14
c0019861:	53                   	push   ebx
c0019862:	e8 ff 18 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001986a:	e8 6f 29 ff ff       	call   c000c1de <createPartitionsForDisk(PhysicalDisk*)>
c001986f:	31 c0                	xor    eax,eax
c0019871:	83 c4 18             	add    esp,0x18
c0019874:	5b                   	pop    ebx
c0019875:	c3                   	ret    

c0019876 <ATAPI::write(unsigned long long, int, void*)>:
c0019876:	b8 03 00 00 00       	mov    eax,0x3
c001987b:	c3                   	ret    

c001987c <ATAPI::close(int, int, void*)>:
c001987c:	83 ec 0c             	sub    esp,0xc
c001987f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019883:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019889:	85 c0                	test   eax,eax
c001988b:	74 0c                	je     c0019899 <ATAPI::close(int, int, void*)+0x1d>
c001988d:	83 ec 0c             	sub    esp,0xc
c0019890:	8b 10                	mov    edx,DWORD PTR [eax]
c0019892:	50                   	push   eax
c0019893:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019896:	83 c4 10             	add    esp,0x10
c0019899:	31 c0                	xor    eax,eax
c001989b:	83 c4 0c             	add    esp,0xc
c001989e:	c3                   	ret    
c001989f:	90                   	nop

c00198a0 <ATAPI::ATAPI()>:
c00198a0:	83 ec 0c             	sub    esp,0xc
c00198a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198a7:	83 ec 04             	sub    esp,0x4
c00198aa:	68 00 08 00 00       	push   0x800
c00198af:	68 21 e8 01 c0       	push   0xc001e821
c00198b4:	50                   	push   eax
c00198b5:	e8 44 18 ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	ba 18 e7 01 c0       	mov    edx,0xc001e718
c00198c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198c6:	89 10                	mov    DWORD PTR [eax],edx
c00198c8:	90                   	nop
c00198c9:	83 c4 0c             	add    esp,0xc
c00198cc:	c3                   	ret    
c00198cd:	90                   	nop

c00198ce <ATAPI::readyForCommand()>:
c00198ce:	56                   	push   esi
c00198cf:	53                   	push   ebx
c00198d0:	53                   	push   ebx
c00198d1:	31 db                	xor    ebx,ebx
c00198d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198d7:	51                   	push   ecx
c00198d8:	6a 0c                	push   0xc
c00198da:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00198e1:	50                   	push   eax
c00198e2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00198e8:	e8 2f ec ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c00198ed:	83 c4 10             	add    esp,0x10
c00198f0:	a8 88                	test   al,0x88
c00198f2:	74 25                	je     c0019919 <ATAPI::readyForCommand()+0x4b>
c00198f4:	43                   	inc    ebx
c00198f5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00198fb:	7e da                	jle    c00198d7 <ATAPI::readyForCommand()+0x9>
c00198fd:	83 ec 0c             	sub    esp,0xc
c0019900:	68 5e 01 00 00       	push   0x15e
c0019905:	e8 8a 91 ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c001990a:	83 c4 10             	add    esp,0x10
c001990d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019913:	75 c2                	jne    c00198d7 <ATAPI::readyForCommand()+0x9>
c0019915:	31 c0                	xor    eax,eax
c0019917:	eb 02                	jmp    c001991b <ATAPI::readyForCommand()+0x4d>
c0019919:	b0 01                	mov    al,0x1
c001991b:	5a                   	pop    edx
c001991c:	5b                   	pop    ebx
c001991d:	5e                   	pop    esi
c001991e:	c3                   	ret    
c001991f:	90                   	nop

c0019920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019920:	55                   	push   ebp
c0019921:	57                   	push   edi
c0019922:	56                   	push   esi
c0019923:	53                   	push   ebx
c0019924:	83 ec 20             	sub    esp,0x20
c0019927:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001992b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001992f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019933:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019937:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001993b:	6a 01                	push   0x1
c001993d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019944:	50                   	push   eax
c0019945:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001994b:	e8 1a ed ff ff       	call   c001866a <IDE::enableIRQs(unsigned char, bool)>
c0019950:	5e                   	pop    esi
c0019951:	58                   	pop    eax
c0019952:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019959:	50                   	push   eax
c001995a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019960:	e8 d1 ea ff ff       	call   c0018436 <IDE::prepareInterrupt(unsigned char)>
c0019965:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019968:	e8 61 ff ff ff       	call   c00198ce <ATAPI::readyForCommand()>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	84 c0                	test   al,al
c0019972:	75 0a                	jne    c001997e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019974:	bb 01 00 00 00       	mov    ebx,0x1
c0019979:	e9 57 02 00 00       	jmp    c0019bd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001997e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019984:	c1 e0 04             	shl    eax,0x4
c0019987:	0f b6 c0             	movzx  eax,al
c001998a:	50                   	push   eax
c001998b:	6a 06                	push   0x6
c001998d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019994:	50                   	push   eax
c0019995:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001999b:	e8 bc ea ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199a0:	6a 00                	push   0x0
c00199a2:	6a 01                	push   0x1
c00199a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199ab:	50                   	push   eax
c00199ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199b2:	e8 a5 ea ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199b7:	83 c4 20             	add    esp,0x20
c00199ba:	0f b6 c3             	movzx  eax,bl
c00199bd:	0f b6 df             	movzx  ebx,bh
c00199c0:	50                   	push   eax
c00199c1:	6a 04                	push   0x4
c00199c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199ca:	50                   	push   eax
c00199cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199d1:	e8 86 ea ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199d6:	53                   	push   ebx
c00199d7:	6a 05                	push   0x5
c00199d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199e0:	50                   	push   eax
c00199e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199e7:	e8 70 ea ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199ec:	83 c4 20             	add    esp,0x20
c00199ef:	68 a0 00 00 00       	push   0xa0
c00199f4:	6a 07                	push   0x7
c00199f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199fd:	50                   	push   eax
c00199fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a04:	e8 53 ea ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a09:	83 c4 0c             	add    esp,0xc
c0019a0c:	6a 01                	push   0x1
c0019a0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a15:	50                   	push   eax
c0019a16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a1c:	e8 d9 f4 ff ff       	call   c0018efa <IDE::polling(unsigned char, unsigned int)>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019a2a:	84 c0                	test   al,al
c0019a2c:	74 23                	je     c0019a51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019a2e:	0f b6 d8             	movzx  ebx,al
c0019a31:	0f b6 d2             	movzx  edx,dl
c0019a34:	53                   	push   ebx
c0019a35:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019a3c:	50                   	push   eax
c0019a3d:	52                   	push   edx
c0019a3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a44:	e8 01 f4 ff ff       	call   c0018e4a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	e9 84 01 00 00       	jmp    c0019bd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019a51:	0f b6 d2             	movzx  edx,dl
c0019a54:	53                   	push   ebx
c0019a55:	53                   	push   ebx
c0019a56:	52                   	push   edx
c0019a57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a5d:	e8 e8 e9 ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c0019a62:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a66:	b9 06 00 00 00       	mov    ecx,0x6
c0019a6b:	89 c2                	mov    edx,eax
c0019a6d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019a70:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019a7d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019a84:	85 db                	test   ebx,ebx
c0019a86:	0f 84 ec 00 00 00    	je     c0019b78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019a8c:	51                   	push   ecx
c0019a8d:	51                   	push   ecx
c0019a8e:	52                   	push   edx
c0019a8f:	50                   	push   eax
c0019a90:	e8 35 eb ff ff       	call   c00185ca <IDE::waitInterrupt(unsigned char)>
c0019a95:	83 c4 10             	add    esp,0x10
c0019a98:	84 c0                	test   al,al
c0019a9a:	0f 84 d4 fe ff ff    	je     c0019974 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019aa0:	56                   	push   esi
c0019aa1:	56                   	push   esi
c0019aa2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019aa9:	50                   	push   eax
c0019aaa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ab0:	e8 81 e9 ff ff       	call   c0018436 <IDE::prepareInterrupt(unsigned char)>
c0019ab5:	83 c4 0c             	add    esp,0xc
c0019ab8:	6a 04                	push   0x4
c0019aba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ac1:	50                   	push   eax
c0019ac2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ac8:	e8 4f ea ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0019acd:	83 c4 0c             	add    esp,0xc
c0019ad0:	89 c6                	mov    esi,eax
c0019ad2:	6a 05                	push   0x5
c0019ad4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019adb:	50                   	push   eax
c0019adc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ae2:	e8 35 ea ff ff       	call   c001851c <IDE::read(unsigned char, unsigned char)>
c0019ae7:	89 f1                	mov    ecx,esi
c0019ae9:	0f b6 c0             	movzx  eax,al
c0019aec:	0f b6 f1             	movzx  esi,cl
c0019aef:	c1 e0 08             	shl    eax,0x8
c0019af2:	09 c6                	or     esi,eax
c0019af4:	d1 fe                	sar    esi,1
c0019af6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019afa:	83 c4 10             	add    esp,0x10
c0019afd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019b02:	74 41                	je     c0019b45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019b04:	31 c9                	xor    ecx,ecx
c0019b06:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019b0c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019b13:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019b17:	75 0a                	jne    c0019b23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019b19:	01 c9                	add    ecx,ecx
c0019b1b:	01 cd                	add    ebp,ecx
c0019b1d:	4b                   	dec    ebx
c0019b1e:	e9 54 ff ff ff       	jmp    c0019a77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019b23:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019b28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019b2c:	51                   	push   ecx
c0019b2d:	51                   	push   ecx
c0019b2e:	52                   	push   edx
c0019b2f:	50                   	push   eax
c0019b30:	e8 15 e9 ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c0019b35:	89 c2                	mov    edx,eax
c0019b37:	89 f0                	mov    eax,esi
c0019b39:	66 ef                	out    dx,ax
c0019b3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	41                   	inc    ecx
c0019b43:	eb c1                	jmp    c0019b06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019b45:	31 f6                	xor    esi,esi
c0019b47:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019b4d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019b54:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019b58:	75 06                	jne    c0019b60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019b5a:	01 f6                	add    esi,esi
c0019b5c:	01 f5                	add    ebp,esi
c0019b5e:	eb bd                	jmp    c0019b1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019b60:	51                   	push   ecx
c0019b61:	51                   	push   ecx
c0019b62:	52                   	push   edx
c0019b63:	50                   	push   eax
c0019b64:	e8 e1 e8 ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c0019b69:	89 c2                	mov    edx,eax
c0019b6b:	66 ed                	in     ax,dx
c0019b6d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019b72:	83 c4 10             	add    esp,0x10
c0019b75:	46                   	inc    esi
c0019b76:	eb cf                	jmp    c0019b47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019b78:	51                   	push   ecx
c0019b79:	51                   	push   ecx
c0019b7a:	52                   	push   edx
c0019b7b:	50                   	push   eax
c0019b7c:	e8 49 ea ff ff       	call   c00185ca <IDE::waitInterrupt(unsigned char)>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	84 c0                	test   al,al
c0019b86:	0f 84 e8 fd ff ff    	je     c0019974 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019b8c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b91:	52                   	push   edx
c0019b92:	52                   	push   edx
c0019b93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b9a:	50                   	push   eax
c0019b9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ba1:	e8 90 e8 ff ff       	call   c0018436 <IDE::prepareInterrupt(unsigned char)>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	50                   	push   eax
c0019baa:	50                   	push   eax
c0019bab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019bb2:	50                   	push   eax
c0019bb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019bb9:	e8 8c e8 ff ff       	call   c001844a <IDE::getBase(unsigned char)>
c0019bbe:	8d 50 07             	lea    edx,[eax+0x7]
c0019bc1:	ec                   	in     al,dx
c0019bc2:	83 c4 10             	add    esp,0x10
c0019bc5:	a8 88                	test   al,0x88
c0019bc7:	74 0a                	je     c0019bd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019bc9:	4b                   	dec    ebx
c0019bca:	75 dd                	jne    c0019ba9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019bcc:	bb 02 00 00 00       	mov    ebx,0x2
c0019bd1:	eb 02                	jmp    c0019bd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019bd3:	31 db                	xor    ebx,ebx
c0019bd5:	83 c4 1c             	add    esp,0x1c
c0019bd8:	89 d8                	mov    eax,ebx
c0019bda:	5b                   	pop    ebx
c0019bdb:	5e                   	pop    esi
c0019bdc:	5f                   	pop    edi
c0019bdd:	5d                   	pop    ebp
c0019bde:	c3                   	ret    
c0019bdf:	90                   	nop

c0019be0 <ATAPI::diskRemoved()>:
c0019be0:	53                   	push   ebx
c0019be1:	83 ec 14             	sub    esp,0x14
c0019be4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019be8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019bef:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019bf5:	e8 64 23 ff ff       	call   c000bf5e <LogicalDisk::unmount()>
c0019bfa:	58                   	pop    eax
c0019bfb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019c01:	e8 9e 2c ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c0019c06:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019c0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019c10:	83 c4 18             	add    esp,0x18
c0019c13:	5b                   	pop    ebx
c0019c14:	e9 7b 2c ff ff       	jmp    c000c894 <VCache::invalidateReadBuffer()>
c0019c19:	90                   	nop

c0019c1a <ATAPI::eject()>:
c0019c1a:	57                   	push   edi
c0019c1b:	b9 03 00 00 00       	mov    ecx,0x3
c0019c20:	53                   	push   ebx
c0019c21:	83 ec 14             	sub    esp,0x14
c0019c24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019c2c:	fc                   	cld    
c0019c2d:	31 c0                	xor    eax,eax
c0019c2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019c31:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019c36:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019c3b:	50                   	push   eax
c0019c3c:	50                   	push   eax
c0019c3d:	6a 00                	push   0x0
c0019c3f:	6a 00                	push   0x0
c0019c41:	6a 00                	push   0x0
c0019c43:	6a 02                	push   0x2
c0019c45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c49:	50                   	push   eax
c0019c4a:	53                   	push   ebx
c0019c4b:	e8 d0 fc ff ff       	call   c0019920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019c50:	83 c4 14             	add    esp,0x14
c0019c53:	53                   	push   ebx
c0019c54:	e8 87 ff ff ff       	call   c0019be0 <ATAPI::diskRemoved()>
c0019c59:	83 c4 24             	add    esp,0x24
c0019c5c:	31 c0                	xor    eax,eax
c0019c5e:	5b                   	pop    ebx
c0019c5f:	5f                   	pop    edi
c0019c60:	c3                   	ret    
c0019c61:	90                   	nop

c0019c62 <ATAPI::diskInserted()>:
c0019c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c66:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019c6d:	c3                   	ret    

c0019c6e <ATAPI::detectMedia()>:
c0019c6e:	56                   	push   esi
c0019c6f:	53                   	push   ebx
c0019c70:	83 ec 28             	sub    esp,0x28
c0019c73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c77:	6a 0c                	push   0xc
c0019c79:	6a 00                	push   0x0
c0019c7b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019c7f:	56                   	push   esi
c0019c80:	e8 6b 68 fe ff       	call   c00004f0 <memset>
c0019c85:	58                   	pop    eax
c0019c86:	5a                   	pop    edx
c0019c87:	6a 00                	push   0x0
c0019c89:	6a 00                	push   0x0
c0019c8b:	6a 00                	push   0x0
c0019c8d:	6a 00                	push   0x0
c0019c8f:	56                   	push   esi
c0019c90:	53                   	push   ebx
c0019c91:	e8 8a fc ff ff       	call   c0019920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019c96:	83 c4 1c             	add    esp,0x1c
c0019c99:	6a 0c                	push   0xc
c0019c9b:	6a 00                	push   0x0
c0019c9d:	56                   	push   esi
c0019c9e:	e8 4d 68 fe ff       	call   c00004f0 <memset>
c0019ca3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019ca8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019cad:	59                   	pop    ecx
c0019cae:	58                   	pop    eax
c0019caf:	6a 01                	push   0x1
c0019cb1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019cb5:	50                   	push   eax
c0019cb6:	6a 00                	push   0x0
c0019cb8:	6a 12                	push   0x12
c0019cba:	56                   	push   esi
c0019cbb:	53                   	push   ebx
c0019cbc:	e8 5f fc ff ff       	call   c0019920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019cc1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019cc5:	83 c4 20             	add    esp,0x20
c0019cc8:	83 e0 7f             	and    eax,0x7f
c0019ccb:	3c 70                	cmp    al,0x70
c0019ccd:	74 15                	je     c0019ce4 <ATAPI::detectMedia()+0x76>
c0019ccf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019cd6:	75 0c                	jne    c0019ce4 <ATAPI::detectMedia()+0x76>
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	53                   	push   ebx
c0019cdc:	e8 81 ff ff ff       	call   c0019c62 <ATAPI::diskInserted()>
c0019ce1:	83 c4 10             	add    esp,0x10
c0019ce4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019ce8:	83 e0 0f             	and    eax,0xf
c0019ceb:	3c 02                	cmp    al,0x2
c0019ced:	75 1b                	jne    c0019d0a <ATAPI::detectMedia()+0x9c>
c0019cef:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019cf4:	75 2d                	jne    c0019d23 <ATAPI::detectMedia()+0xb5>
c0019cf6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019cfd:	74 24                	je     c0019d23 <ATAPI::detectMedia()+0xb5>
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	53                   	push   ebx
c0019d03:	e8 d8 fe ff ff       	call   c0019be0 <ATAPI::diskRemoved()>
c0019d08:	eb 16                	jmp    c0019d20 <ATAPI::detectMedia()+0xb2>
c0019d0a:	84 c0                	test   al,al
c0019d0c:	75 15                	jne    c0019d23 <ATAPI::detectMedia()+0xb5>
c0019d0e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019d15:	75 0c                	jne    c0019d23 <ATAPI::detectMedia()+0xb5>
c0019d17:	83 ec 0c             	sub    esp,0xc
c0019d1a:	53                   	push   ebx
c0019d1b:	e8 42 ff ff ff       	call   c0019c62 <ATAPI::diskInserted()>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 c4 24             	add    esp,0x24
c0019d26:	5b                   	pop    ebx
c0019d27:	5e                   	pop    esi
c0019d28:	c3                   	ret    
c0019d29:	90                   	nop

c0019d2a <ATAPI::open(int, int, void*)>:
c0019d2a:	56                   	push   esi
c0019d2b:	53                   	push   ebx
c0019d2c:	50                   	push   eax
c0019d2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d39:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019d3f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019d45:	c1 e0 06             	shl    eax,0x6
c0019d48:	01 d0                	add    eax,edx
c0019d4a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019d51:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019d57:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019d5e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019d68:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019d6e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019d75:	6a 04                	push   0x4
c0019d77:	6a 0c                	push   0xc
c0019d79:	51                   	push   ecx
c0019d7a:	52                   	push   edx
c0019d7b:	e8 dc e6 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d80:	90                   	nop
c0019d81:	90                   	nop
c0019d82:	6a 00                	push   0x0
c0019d84:	6a 0c                	push   0xc
c0019d86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d8d:	50                   	push   eax
c0019d8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d94:	e8 c3 e6 ff ff       	call   c001845c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d99:	83 c4 14             	add    esp,0x14
c0019d9c:	68 74 01 00 00       	push   0x174
c0019da1:	e8 bb cd fe ff       	call   c0006b61 <malloc>
c0019da6:	83 c4 0c             	add    esp,0xc
c0019da9:	89 c6                	mov    esi,eax
c0019dab:	6a 00                	push   0x0
c0019dad:	68 ff ff ff 7f       	push   0x7fffffff
c0019db2:	6a 00                	push   0x0
c0019db4:	6a 00                	push   0x0
c0019db6:	53                   	push   ebx
c0019db7:	68 13 e8 01 c0       	push   0xc001e813
c0019dbc:	50                   	push   eax
c0019dbd:	e8 e8 1f ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019dc2:	83 c4 14             	add    esp,0x14
c0019dc5:	56                   	push   esi
c0019dc6:	e8 95 20 ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c0019dcb:	5a                   	pop    edx
c0019dcc:	0f be c0             	movsx  eax,al
c0019dcf:	59                   	pop    ecx
c0019dd0:	50                   	push   eax
c0019dd1:	68 00 e7 01 c0       	push   0xc001e700
c0019dd6:	e8 15 fb fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0019ddb:	58                   	pop    eax
c0019ddc:	5a                   	pop    edx
c0019ddd:	56                   	push   esi
c0019dde:	53                   	push   ebx
c0019ddf:	e8 4c 0f ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0019de4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019dea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ded:	e8 74 13 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019df2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019df9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dfc:	e8 6d fe ff ff       	call   c0019c6e <ATAPI::detectMedia()>
c0019e01:	83 c4 14             	add    esp,0x14
c0019e04:	31 c0                	xor    eax,eax
c0019e06:	5b                   	pop    ebx
c0019e07:	5e                   	pop    esi
c0019e08:	c3                   	ret    
c0019e09:	90                   	nop

c0019e0a <ATAPI::read(unsigned long long, int, void*)>:
c0019e0a:	55                   	push   ebp
c0019e0b:	57                   	push   edi
c0019e0c:	56                   	push   esi
c0019e0d:	53                   	push   ebx
c0019e0e:	83 ec 1c             	sub    esp,0x1c
c0019e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019e15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019e19:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e1d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019e24:	74 3c                	je     c0019e62 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0019e26:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019e2a:	b9 03 00 00 00       	mov    ecx,0x3
c0019e2f:	fc                   	cld    
c0019e30:	31 c0                	xor    eax,eax
c0019e32:	0f ce                	bswap  esi
c0019e34:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e36:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0019e3b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0019e3f:	89 e8                	mov    eax,ebp
c0019e41:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019e45:	50                   	push   eax
c0019e46:	50                   	push   eax
c0019e47:	55                   	push   ebp
c0019e48:	c1 e5 0b             	shl    ebp,0xb
c0019e4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019e4f:	6a 00                	push   0x0
c0019e51:	55                   	push   ebp
c0019e52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e56:	50                   	push   eax
c0019e57:	53                   	push   ebx
c0019e58:	e8 c3 fa ff ff       	call   c0019920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019e5d:	83 c4 20             	add    esp,0x20
c0019e60:	eb 1a                	jmp    c0019e7c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0019e62:	83 ec 0c             	sub    esp,0xc
c0019e65:	53                   	push   ebx
c0019e66:	e8 03 fe ff ff       	call   c0019c6e <ATAPI::detectMedia()>
c0019e6b:	83 c4 10             	add    esp,0x10
c0019e6e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019e75:	75 af                	jne    c0019e26 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0019e77:	b8 02 00 00 00       	mov    eax,0x2
c0019e7c:	83 c4 1c             	add    esp,0x1c
c0019e7f:	5b                   	pop    ebx
c0019e80:	5e                   	pop    esi
c0019e81:	5f                   	pop    edi
c0019e82:	5d                   	pop    ebp
c0019e83:	c3                   	ret    

c0019e84 <SATA::close(int, int, void*)>:
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e8b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e91:	85 c0                	test   eax,eax
c0019e93:	74 0c                	je     c0019ea1 <SATA::close(int, int, void*)+0x1d>
c0019e95:	83 ec 0c             	sub    esp,0xc
c0019e98:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e9a:	50                   	push   eax
c0019e9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e9e:	83 c4 10             	add    esp,0x10
c0019ea1:	31 c0                	xor    eax,eax
c0019ea3:	83 c4 0c             	add    esp,0xc
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop

c0019ea8 <SATA::powerSaving(PowerSavingLevel)>:
c0019ea8:	c3                   	ret    
c0019ea9:	90                   	nop

c0019eaa <SATA::open(int, int, void*)>:
c0019eaa:	56                   	push   esi
c0019eab:	53                   	push   ebx
c0019eac:	50                   	push   eax
c0019ead:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eb5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019ebf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0019ec5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0019ecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ed3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019edd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ee3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019eea:	e8 3f d0 fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019eef:	89 c6                	mov    esi,eax
c0019ef1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019ef7:	81 c6 00 10 00 00    	add    esi,0x1000
c0019efd:	e8 2c d0 fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019f02:	39 c6                	cmp    esi,eax
c0019f04:	74 10                	je     c0019f16 <SATA::open(int, int, void*)+0x6c>
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	68 48 e7 01 c0       	push   0xc001e748
c0019f0e:	e8 2c 55 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	83 ec 0c             	sub    esp,0xc
c0019f19:	6a 02                	push   0x2
c0019f1b:	e8 7d e7 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0019f20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f26:	6a 03                	push   0x3
c0019f28:	50                   	push   eax
c0019f29:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019f2f:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c0019f35:	e8 f8 ed fe ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019f3a:	83 c4 14             	add    esp,0x14
c0019f3d:	53                   	push   ebx
c0019f3e:	e8 23 12 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019f43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f46:	e8 93 22 ff ff       	call   c000c1de <createPartitionsForDisk(PhysicalDisk*)>
c0019f4b:	83 c4 14             	add    esp,0x14
c0019f4e:	31 c0                	xor    eax,eax
c0019f50:	5b                   	pop    ebx
c0019f51:	5e                   	pop    esi
c0019f52:	c3                   	ret    
c0019f53:	90                   	nop

c0019f54 <SATA::SATA()>:
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f5b:	83 ec 04             	sub    esp,0x4
c0019f5e:	68 00 02 00 00       	push   0x200
c0019f63:	68 5c e7 01 c0       	push   0xc001e75c
c0019f68:	50                   	push   eax
c0019f69:	e8 90 11 ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	ba cc e7 01 c0       	mov    edx,0xc001e7cc
c0019f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7a:	89 10                	mov    DWORD PTR [eax],edx
c0019f7c:	90                   	nop
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <SATA::access(unsigned long long, int, void*, bool)>:
c0019f82:	55                   	push   ebp
c0019f83:	57                   	push   edi
c0019f84:	56                   	push   esi
c0019f85:	53                   	push   ebx
c0019f86:	83 ec 2c             	sub    esp,0x2c
c0019f89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019f8d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f95:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019f99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f9d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0019fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fa6:	7e 10                	jle    c0019fb8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	68 6c e7 01 c0       	push   0xc001e76c
c0019fb0:	e8 8a 54 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019fbe:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0019fc4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019fca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fce:	89 d0                	mov    eax,edx
c0019fd0:	c1 e0 07             	shl    eax,0x7
c0019fd3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0019fd7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0019fe1:	51                   	push   ecx
c0019fe2:	8d 42 02             	lea    eax,[edx+0x2]
c0019fe5:	51                   	push   ecx
c0019fe6:	c1 e0 07             	shl    eax,0x7
c0019fe9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fed:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019ff1:	50                   	push   eax
c0019ff2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0019ff8:	e8 e7 ef ff ff       	call   c0018fe4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0019ffd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a001:	83 c4 10             	add    esp,0x10
c001a004:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a009:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a00d:	0f 84 4f 01 00 00    	je     c001a162 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a013:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a017:	c1 e0 09             	shl    eax,0x9
c001a01a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a01f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a023:	74 0e                	je     c001a033 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a025:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a02b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a02f:	89 c1                	mov    ecx,eax
c001a031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a033:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a037:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a03d:	8d 42 02             	lea    eax,[edx+0x2]
c001a040:	c1 e0 07             	shl    eax,0x7
c001a043:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a047:	8b 00                	mov    eax,DWORD PTR [eax]
c001a049:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a04f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a055:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a059:	c1 e1 05             	shl    ecx,0x5
c001a05c:	01 c8                	add    eax,ecx
c001a05e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a062:	83 e1 01             	and    ecx,0x1
c001a065:	89 ce                	mov    esi,ecx
c001a067:	8a 08                	mov    cl,BYTE PTR [eax]
c001a069:	c1 e6 06             	shl    esi,0x6
c001a06c:	83 e1 bf             	and    ecx,0xffffffbf
c001a06f:	09 f1                	or     ecx,esi
c001a071:	88 08                	mov    BYTE PTR [eax],cl
c001a073:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a075:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a07b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a081:	89 08                	mov    DWORD PTR [eax],ecx
c001a083:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a089:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a08f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a095:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a098:	50                   	push   eax
c001a099:	68 90 00 00 00       	push   0x90
c001a09e:	6a 00                	push   0x0
c001a0a0:	56                   	push   esi
c001a0a1:	e8 4a 64 fe ff       	call   c00004f0 <memset>
c001a0a6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0ac:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a0b0:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a0b6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a0ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	48                   	dec    eax
c001a0c2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a0c7:	89 c1                	mov    ecx,eax
c001a0c9:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a0cf:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a0d4:	09 c8                	or     eax,ecx
c001a0d6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a0dc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a0df:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a0e6:	66 25 00 7f          	and    ax,0x7f00
c001a0ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0ee:	66 0d 27 80          	or     ax,0x8027
c001a0f2:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a0f7:	66 89 06             	mov    WORD PTR [esi],ax
c001a0fa:	19 c0                	sbb    eax,eax
c001a0fc:	83 e0 f0             	and    eax,0xfffffff0
c001a0ff:	83 c0 35             	add    eax,0x35
c001a102:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a105:	89 e8                	mov    eax,ebp
c001a107:	c1 e8 10             	shr    eax,0x10
c001a10a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a10d:	89 e8                	mov    eax,ebp
c001a10f:	c1 e8 18             	shr    eax,0x18
c001a112:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a115:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a119:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a11c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a120:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a127:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a12b:	89 d6                	mov    esi,edx
c001a12d:	31 c0                	xor    eax,eax
c001a12f:	c1 e6 07             	shl    esi,0x7
c001a132:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a136:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a13c:	80 e1 88             	and    cl,0x88
c001a13f:	74 0a                	je     c001a14b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a141:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a146:	74 0a                	je     c001a152 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a148:	40                   	inc    eax
c001a149:	eb eb                	jmp    c001a136 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a14b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a150:	75 17                	jne    c001a169 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a152:	83 ec 0c             	sub    esp,0xc
c001a155:	68 a5 e7 01 c0       	push   0xc001e7a5
c001a15a:	e8 91 f7 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	b8 01 00 00 00       	mov    eax,0x1
c001a167:	eb 5d                	jmp    c001a1c6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a169:	b8 01 00 00 00       	mov    eax,0x1
c001a16e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a172:	c1 e2 07             	shl    edx,0x7
c001a175:	d3 e0                	shl    eax,cl
c001a177:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a17b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a181:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a187:	85 c8                	test   eax,ecx
c001a189:	74 16                	je     c001a1a1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a18b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a191:	0f ba e1 1e          	bt     ecx,0x1e
c001a195:	73 ea                	jae    c001a181 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a197:	83 ec 0c             	sub    esp,0xc
c001a19a:	68 b3 e7 01 c0       	push   0xc001e7b3
c001a19f:	eb b9                	jmp    c001a15a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a1a1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a1a7:	0f ba e0 1e          	bt     eax,0x1e
c001a1ab:	72 b5                	jb     c001a162 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a1ad:	31 c0                	xor    eax,eax
c001a1af:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a1b4:	75 10                	jne    c001a1c6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a1b6:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a1bc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a1c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a1c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1c6:	83 c4 2c             	add    esp,0x2c
c001a1c9:	5b                   	pop    ebx
c001a1ca:	5e                   	pop    esi
c001a1cb:	5f                   	pop    edi
c001a1cc:	5d                   	pop    ebp
c001a1cd:	c3                   	ret    

c001a1ce <SATA::read(unsigned long long, int, void*)>:
c001a1ce:	57                   	push   edi
c001a1cf:	b8 04 00 00 00       	mov    eax,0x4
c001a1d4:	56                   	push   esi
c001a1d5:	53                   	push   ebx
c001a1d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a1de:	8d 7a ff             	lea    edi,[edx-0x1]
c001a1e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a1e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a1ef:	77 25                	ja     c001a216 <SATA::read(unsigned long long, int, void*)+0x48>
c001a1f1:	b8 06 00 00 00       	mov    eax,0x6
c001a1f6:	85 f6                	test   esi,esi
c001a1f8:	74 1c                	je     c001a216 <SATA::read(unsigned long long, int, void*)+0x48>
c001a1fa:	50                   	push   eax
c001a1fb:	50                   	push   eax
c001a1fc:	6a 00                	push   0x0
c001a1fe:	56                   	push   esi
c001a1ff:	52                   	push   edx
c001a200:	53                   	push   ebx
c001a201:	51                   	push   ecx
c001a202:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a206:	e8 77 fd ff ff       	call   c0019f82 <SATA::access(unsigned long long, int, void*, bool)>
c001a20b:	83 c4 20             	add    esp,0x20
c001a20e:	85 c0                	test   eax,eax
c001a210:	0f 95 c0             	setne  al
c001a213:	0f b6 c0             	movzx  eax,al
c001a216:	5b                   	pop    ebx
c001a217:	5e                   	pop    esi
c001a218:	5f                   	pop    edi
c001a219:	c3                   	ret    

c001a21a <SATA::write(unsigned long long, int, void*)>:
c001a21a:	55                   	push   ebp
c001a21b:	b8 04 00 00 00       	mov    eax,0x4
c001a220:	57                   	push   edi
c001a221:	56                   	push   esi
c001a222:	53                   	push   ebx
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a22a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a22e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a231:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a235:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a239:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a23f:	77 3d                	ja     c001a27e <SATA::write(unsigned long long, int, void*)+0x64>
c001a241:	b8 06 00 00 00       	mov    eax,0x6
c001a246:	85 ed                	test   ebp,ebp
c001a248:	74 34                	je     c001a27e <SATA::write(unsigned long long, int, void*)+0x64>
c001a24a:	c1 e3 09             	shl    ebx,0x9
c001a24d:	01 eb                	add    ebx,ebp
c001a24f:	89 d6                	mov    esi,edx
c001a251:	89 cf                	mov    edi,ecx
c001a253:	83 c6 01             	add    esi,0x1
c001a256:	83 d7 00             	adc    edi,0x0
c001a259:	50                   	push   eax
c001a25a:	50                   	push   eax
c001a25b:	6a 01                	push   0x1
c001a25d:	55                   	push   ebp
c001a25e:	81 c5 00 02 00 00    	add    ebp,0x200
c001a264:	6a 01                	push   0x1
c001a266:	51                   	push   ecx
c001a267:	52                   	push   edx
c001a268:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a26c:	e8 11 fd ff ff       	call   c0019f82 <SATA::access(unsigned long long, int, void*, bool)>
c001a271:	83 c4 20             	add    esp,0x20
c001a274:	89 f2                	mov    edx,esi
c001a276:	89 f9                	mov    ecx,edi
c001a278:	39 dd                	cmp    ebp,ebx
c001a27a:	75 d3                	jne    c001a24f <SATA::write(unsigned long long, int, void*)+0x35>
c001a27c:	31 c0                	xor    eax,eax
c001a27e:	83 c4 0c             	add    esp,0xc
c001a281:	5b                   	pop    ebx
c001a282:	5e                   	pop    esi
c001a283:	5f                   	pop    edi
c001a284:	5d                   	pop    ebp
c001a285:	c3                   	ret    

c001a286 <SATAPI::write(unsigned long long, int, void*)>:
c001a286:	b8 03 00 00 00       	mov    eax,0x3
c001a28b:	c3                   	ret    

c001a28c <SATAPI::close(int, int, void*)>:
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a293:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a299:	85 c0                	test   eax,eax
c001a29b:	74 0c                	je     c001a2a9 <SATAPI::close(int, int, void*)+0x1d>
c001a29d:	83 ec 0c             	sub    esp,0xc
c001a2a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001a2a2:	50                   	push   eax
c001a2a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	31 c0                	xor    eax,eax
c001a2ab:	83 c4 0c             	add    esp,0xc
c001a2ae:	c3                   	ret    
c001a2af:	90                   	nop

c001a2b0 <SATAPI::open(int, int, void*)>:
c001a2b0:	56                   	push   esi
c001a2b1:	53                   	push   ebx
c001a2b2:	51                   	push   ecx
c001a2b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a2c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a2cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a2e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a2e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a2f0:	e8 39 cc fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a2f5:	89 c6                	mov    esi,eax
c001a2f7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a2fd:	81 c6 00 10 00 00    	add    esi,0x1000
c001a303:	e8 26 cc fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a308:	39 c6                	cmp    esi,eax
c001a30a:	74 10                	je     c001a31c <SATAPI::open(int, int, void*)+0x6c>
c001a30c:	83 ec 0c             	sub    esp,0xc
c001a30f:	68 fc e7 01 c0       	push   0xc001e7fc
c001a314:	e8 26 51 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	83 ec 0c             	sub    esp,0xc
c001a31f:	6a 02                	push   0x2
c001a321:	e8 77 e3 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c001a326:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a32c:	6a 03                	push   0x3
c001a32e:	50                   	push   eax
c001a32f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a335:	ff 35 90 f3 01 c0    	push   DWORD PTR ds:0xc001f390
c001a33b:	e8 f2 e9 fe ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a340:	83 c4 14             	add    esp,0x14
c001a343:	68 74 01 00 00       	push   0x174
c001a348:	e8 14 c8 fe ff       	call   c0006b61 <malloc>
c001a34d:	83 c4 0c             	add    esp,0xc
c001a350:	89 c6                	mov    esi,eax
c001a352:	6a 00                	push   0x0
c001a354:	68 ff ff ff 7f       	push   0x7fffffff
c001a359:	6a 00                	push   0x0
c001a35b:	6a 00                	push   0x0
c001a35d:	53                   	push   ebx
c001a35e:	68 12 e8 01 c0       	push   0xc001e812
c001a363:	50                   	push   eax
c001a364:	e8 41 1a ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a369:	83 c4 14             	add    esp,0x14
c001a36c:	56                   	push   esi
c001a36d:	e8 ee 1a ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c001a372:	5a                   	pop    edx
c001a373:	0f be c0             	movsx  eax,al
c001a376:	59                   	pop    ecx
c001a377:	50                   	push   eax
c001a378:	68 00 e7 01 c0       	push   0xc001e700
c001a37d:	e8 6e f5 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a382:	58                   	pop    eax
c001a383:	5a                   	pop    edx
c001a384:	56                   	push   esi
c001a385:	53                   	push   ebx
c001a386:	e8 a5 09 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c001a38b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a394:	e8 cd 0d ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c001a399:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a3a0:	31 c0                	xor    eax,eax
c001a3a2:	83 c4 14             	add    esp,0x14
c001a3a5:	5b                   	pop    ebx
c001a3a6:	5e                   	pop    esi
c001a3a7:	c3                   	ret    

c001a3a8 <SATAPI::SATAPI()>:
c001a3a8:	83 ec 0c             	sub    esp,0xc
c001a3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3af:	83 ec 04             	sub    esp,0x4
c001a3b2:	68 00 08 00 00       	push   0x800
c001a3b7:	68 20 e8 01 c0       	push   0xc001e820
c001a3bc:	50                   	push   eax
c001a3bd:	e8 3c 0d ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a3c2:	83 c4 10             	add    esp,0x10
c001a3c5:	ba 5c e9 01 c0       	mov    edx,0xc001e95c
c001a3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ce:	89 10                	mov    DWORD PTR [eax],edx
c001a3d0:	90                   	nop
c001a3d1:	83 c4 0c             	add    esp,0xc
c001a3d4:	c3                   	ret    
c001a3d5:	90                   	nop

c001a3d6 <SATAPI::diskRemoved()>:
c001a3d6:	c3                   	ret    
c001a3d7:	90                   	nop

c001a3d8 <SATAPI::diskInserted()>:
c001a3d8:	83 ec 18             	sub    esp,0x18
c001a3db:	68 2c e8 01 c0       	push   0xc001e82c
c001a3e0:	e8 0b f5 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a3e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3e9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a3f0:	83 c4 1c             	add    esp,0x1c
c001a3f3:	c3                   	ret    

c001a3f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a3f4:	55                   	push   ebp
c001a3f5:	57                   	push   edi
c001a3f6:	56                   	push   esi
c001a3f7:	53                   	push   ebx
c001a3f8:	83 ec 38             	sub    esp,0x38
c001a3fb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a3ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a403:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a407:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a40b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a40f:	68 44 e8 01 c0       	push   0xc001e844
c001a414:	e8 d7 f4 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a419:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a41f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a429:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a42f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a433:	c1 e0 07             	shl    eax,0x7
c001a436:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a43a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a43e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a448:	58                   	pop    eax
c001a449:	5a                   	pop    edx
c001a44a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a44e:	8d 58 02             	lea    ebx,[eax+0x2]
c001a451:	c1 e3 07             	shl    ebx,0x7
c001a454:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a458:	53                   	push   ebx
c001a459:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a45f:	e8 80 eb ff ff       	call   c0018fe4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a464:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a468:	83 c4 10             	add    esp,0x10
c001a46b:	b8 01 00 00 00       	mov    eax,0x1
c001a470:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a475:	0f 84 4c 02 00 00    	je     c001a6c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001a47b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a481:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a483:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a489:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a48f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a493:	c1 e1 05             	shl    ecx,0x5
c001a496:	01 c8                	add    eax,ecx
c001a498:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a49a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a4a0:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a4a6:	89 08                	mov    DWORD PTR [eax],ecx
c001a4a8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a4ae:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a4b4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a4ba:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a4bd:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a4c0:	50                   	push   eax
c001a4c1:	68 90 00 00 00       	push   0x90
c001a4c6:	6a 00                	push   0x0
c001a4c8:	53                   	push   ebx
c001a4c9:	e8 22 60 fe ff       	call   c00004f0 <memset>
c001a4ce:	b9 0c 00 00 00       	mov    ecx,0xc
c001a4d3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a4d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4d9:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a4df:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a4e3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a4e9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a4ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a4f1:	48                   	dec    eax
c001a4f2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a4f7:	89 c1                	mov    ecx,eax
c001a4f9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a4ff:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a504:	09 c8                	or     eax,ecx
c001a506:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a50c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a50f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a516:	66 25 00 7f          	and    ax,0x7f00
c001a51a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a51e:	66 0d 27 80          	or     ax,0x8027
c001a522:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a526:	66 89 03             	mov    WORD PTR [ebx],ax
c001a529:	89 d0                	mov    eax,edx
c001a52b:	c1 ea 18             	shr    edx,0x18
c001a52e:	c1 e8 10             	shr    eax,0x10
c001a531:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a534:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a537:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a53b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a53e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a542:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a545:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a554:	31 c0                	xor    eax,eax
c001a556:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a55c:	80 e1 88             	and    cl,0x88
c001a55f:	74 0a                	je     c001a56b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a561:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a566:	74 0a                	je     c001a572 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a568:	40                   	inc    eax
c001a569:	eb eb                	jmp    c001a556 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a56b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a570:	75 16                	jne    c001a588 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001a572:	83 ec 0c             	sub    esp,0xc
c001a575:	68 5e e8 01 c0       	push   0xc001e85e
c001a57a:	e8 71 f3 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a57f:	5f                   	pop    edi
c001a580:	5d                   	pop    ebp
c001a581:	68 73 e8 01 c0       	push   0xc001e873
c001a586:	eb 4f                	jmp    c001a5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001a588:	be 01 00 00 00       	mov    esi,0x1
c001a58d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a591:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a595:	d3 e6                	shl    esi,cl
c001a597:	c1 e7 07             	shl    edi,0x7
c001a59a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a5a0:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001a5a5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a5a9:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a5af:	85 c6                	test   esi,eax
c001a5b1:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a5b7:	0f 84 cb 00 00 00    	je     c001a688 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001a5bd:	0f ba e0 1e          	bt     eax,0x1e
c001a5c1:	73 2c                	jae    c001a5ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001a5c3:	83 ec 0c             	sub    esp,0xc
c001a5c6:	68 85 e8 01 c0       	push   0xc001e885
c001a5cb:	e8 20 f3 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a5d0:	5b                   	pop    ebx
c001a5d1:	5e                   	pop    esi
c001a5d2:	68 98 e8 01 c0       	push   0xc001e898
c001a5d7:	ff 35 f4 f2 01 c0    	push   DWORD PTR ds:0xc001f2f4
c001a5dd:	e8 ee d5 fe ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001a5e2:	83 c4 10             	add    esp,0x10
c001a5e5:	b8 01 00 00 00       	mov    eax,0x1
c001a5ea:	e9 d8 00 00 00       	jmp    c001a6c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001a5ef:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001a5f5:	83 f8 0d             	cmp    eax,0xd
c001a5f8:	77 0a                	ja     c001a604 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	68 c8 00 00 00       	push   0xc8
c001a602:	eb 28                	jmp    c001a62c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001a604:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001a60a:	83 f8 0d             	cmp    eax,0xd
c001a60d:	77 0a                	ja     c001a619 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001a60f:	83 ec 0c             	sub    esp,0xc
c001a612:	68 58 02 00 00       	push   0x258
c001a617:	eb 13                	jmp    c001a62c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001a619:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001a61f:	83 f8 06             	cmp    eax,0x6
c001a622:	77 10                	ja     c001a634 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	68 dc 05 00 00       	push   0x5dc
c001a62c:	e8 63 84 ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001a638:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001a63b:	75 06                	jne    c001a643 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001a63d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001a641:	74 15                	je     c001a658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001a643:	83 fb 06             	cmp    ebx,0x6
c001a646:	77 10                	ja     c001a658 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	68 c4 09 00 00       	push   0x9c4
c001a650:	e8 3f 84 ff ff       	call   c0012a94 <milliTenthSleep(unsigned int)>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	43                   	inc    ebx
c001a659:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001a65f:	0f 85 44 ff ff ff    	jne    c001a5a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001a665:	51                   	push   ecx
c001a666:	51                   	push   ecx
c001a667:	68 a9 e8 01 c0       	push   0xc001e8a9
c001a66c:	ff 35 f4 f2 01 c0    	push   DWORD PTR ds:0xc001f2f4
c001a672:	e8 59 d5 fe ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001a677:	c7 04 24 b9 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8b9
c001a67e:	e8 6d f2 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a683:	e9 5a ff ff ff       	jmp    c001a5e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001a688:	0f ba e0 1e          	bt     eax,0x1e
c001a68c:	73 19                	jae    c001a6a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001a68e:	83 ec 0c             	sub    esp,0xc
c001a691:	68 cd e8 01 c0       	push   0xc001e8cd
c001a696:	e8 55 f2 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a69b:	58                   	pop    eax
c001a69c:	5a                   	pop    edx
c001a69d:	68 e2 e8 01 c0       	push   0xc001e8e2
c001a6a2:	e9 30 ff ff ff       	jmp    c001a5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001a6a7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a6ac:	74 17                	je     c001a6c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001a6ae:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a6b3:	74 10                	je     c001a6c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001a6b5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a6bf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a6c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6c5:	31 c0                	xor    eax,eax
c001a6c7:	83 c4 2c             	add    esp,0x2c
c001a6ca:	5b                   	pop    ebx
c001a6cb:	5e                   	pop    esi
c001a6cc:	5f                   	pop    edi
c001a6cd:	5d                   	pop    ebp
c001a6ce:	c3                   	ret    
c001a6cf:	90                   	nop

c001a6d0 <SATAPI::eject()>:
c001a6d0:	57                   	push   edi
c001a6d1:	b9 03 00 00 00       	mov    ecx,0x3
c001a6d6:	83 ec 18             	sub    esp,0x18
c001a6d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a6dd:	fc                   	cld    
c001a6de:	31 c0                	xor    eax,eax
c001a6e0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6e2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a6e7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a6ec:	50                   	push   eax
c001a6ed:	6a 00                	push   0x0
c001a6ef:	6a 00                	push   0x0
c001a6f1:	6a 00                	push   0x0
c001a6f3:	6a 00                	push   0x0
c001a6f5:	6a 02                	push   0x2
c001a6f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6fb:	50                   	push   eax
c001a6fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a700:	e8 ef fc ff ff       	call   c001a3f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a705:	31 c0                	xor    eax,eax
c001a707:	83 c4 38             	add    esp,0x38
c001a70a:	5f                   	pop    edi
c001a70b:	c3                   	ret    

c001a70c <SATAPI::read(unsigned long long, int, void*)>:
c001a70c:	57                   	push   edi
c001a70d:	56                   	push   esi
c001a70e:	53                   	push   ebx
c001a70f:	83 ec 3c             	sub    esp,0x3c
c001a712:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a716:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a71a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001a71e:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001a722:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a726:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a72a:	68 f5 e8 01 c0       	push   0xc001e8f5
c001a72f:	e8 bc f1 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a734:	83 c4 10             	add    esp,0x10
c001a737:	83 fe 04             	cmp    esi,0x4
c001a73a:	7e 10                	jle    c001a74c <SATAPI::read(unsigned long long, int, void*)+0x40>
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	68 06 e9 01 c0       	push   0xc001e906
c001a744:	e8 f6 4c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a752:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a758:	51                   	push   ecx
c001a759:	50                   	push   eax
c001a75a:	83 c0 02             	add    eax,0x2
c001a75d:	c1 e0 07             	shl    eax,0x7
c001a760:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001a766:	50                   	push   eax
c001a767:	52                   	push   edx
c001a768:	e8 3b e9 ff ff       	call   c00190a8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a76d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001a771:	b9 03 00 00 00       	mov    ecx,0x3
c001a776:	fc                   	cld    
c001a777:	31 c0                	xor    eax,eax
c001a779:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a77b:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001a780:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001a785:	83 c4 0c             	add    esp,0xc
c001a788:	6a 00                	push   0x0
c001a78a:	6a 00                	push   0x0
c001a78c:	6a 00                	push   0x0
c001a78e:	6a 00                	push   0x0
c001a790:	6a 02                	push   0x2
c001a792:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a796:	50                   	push   eax
c001a797:	53                   	push   ebx
c001a798:	e8 57 fc ff ff       	call   c001a3f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a79d:	83 c4 20             	add    esp,0x20
c001a7a0:	85 c0                	test   eax,eax
c001a7a2:	74 1f                	je     c001a7c3 <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001a7a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7a8:	50                   	push   eax
c001a7a9:	50                   	push   eax
c001a7aa:	68 30 e9 01 c0       	push   0xc001e930
c001a7af:	ff 35 f4 f2 01 c0    	push   DWORD PTR ds:0xc001f2f4
c001a7b5:	e8 16 d4 fe ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001a7ba:	58                   	pop    eax
c001a7bb:	5a                   	pop    edx
c001a7bc:	68 38 e9 01 c0       	push   0xc001e938
c001a7c1:	eb 61                	jmp    c001a824 <SATAPI::read(unsigned long long, int, void*)+0x118>
c001a7c3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a7c7:	b9 03 00 00 00       	mov    ecx,0x3
c001a7cc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7d2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001a7d7:	0f c8                	bswap  eax
c001a7d9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001a7dd:	89 f0                	mov    eax,esi
c001a7df:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001a7e3:	57                   	push   edi
c001a7e4:	56                   	push   esi
c001a7e5:	c1 e6 0b             	shl    esi,0xb
c001a7e8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a7ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f4:	56                   	push   esi
c001a7f5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a7f9:	50                   	push   eax
c001a7fa:	53                   	push   ebx
c001a7fb:	e8 f4 fb ff ff       	call   c001a3f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a800:	83 c4 20             	add    esp,0x20
c001a803:	85 c0                	test   eax,eax
c001a805:	74 2f                	je     c001a836 <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001a807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a80b:	50                   	push   eax
c001a80c:	50                   	push   eax
c001a80d:	68 42 e9 01 c0       	push   0xc001e942
c001a812:	ff 35 f4 f2 01 c0    	push   DWORD PTR ds:0xc001f2f4
c001a818:	e8 b3 d3 fe ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001a81d:	5a                   	pop    edx
c001a81e:	59                   	pop    ecx
c001a81f:	68 4a e9 01 c0       	push   0xc001e94a
c001a824:	ff 35 f4 f2 01 c0    	push   DWORD PTR ds:0xc001f2f4
c001a82a:	e8 a1 d3 fe ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a836:	83 c4 30             	add    esp,0x30
c001a839:	5b                   	pop    ebx
c001a83a:	5e                   	pop    esi
c001a83b:	5f                   	pop    edi
c001a83c:	c3                   	ret    
c001a83d:	90                   	nop

c001a83e <SATAPI::detectMedia()>:
c001a83e:	c3                   	ret    
c001a83f:	90                   	nop

c001a840 <IOAPIC::close(int, int, void*)>:
c001a840:	b8 00 00 00 00       	mov    eax,0x0
c001a845:	c3                   	ret    

c001a846 <apicGetBase()>:
c001a846:	55                   	push   ebp
c001a847:	89 e5                	mov    ebp,esp
c001a849:	83 ec 18             	sub    esp,0x18
c001a84c:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001a851:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001a857:	83 e0 08             	and    eax,0x8
c001a85a:	84 c0                	test   al,al
c001a85c:	75 07                	jne    c001a865 <apicGetBase()+0x1f>
c001a85e:	b8 00 00 00 00       	mov    eax,0x0
c001a863:	eb 21                	jmp    c001a886 <apicGetBase()+0x40>
c001a865:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001a86a:	83 ec 08             	sub    esp,0x8
c001a86d:	6a 1b                	push   0x1b
c001a86f:	50                   	push   eax
c001a870:	e8 e5 b8 fe ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001a87b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001a87e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a881:	25 00 00 ff ff       	and    eax,0xffff0000
c001a886:	c9                   	leave  
c001a887:	c3                   	ret    

c001a888 <IOAPIC::IOAPIC()>:
c001a888:	83 ec 0c             	sub    esp,0xc
c001a88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88f:	83 ec 08             	sub    esp,0x8
c001a892:	68 8c e9 01 c0       	push   0xc001e98c
c001a897:	50                   	push   eax
c001a898:	e8 2b 06 ff ff       	call   c000aec8 <Device::Device(char const*)>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	ba 9c e9 01 c0       	mov    edx,0xc001e99c
c001a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a9:	89 10                	mov    DWORD PTR [eax],edx
c001a8ab:	90                   	nop
c001a8ac:	83 c4 0c             	add    esp,0xc
c001a8af:	c3                   	ret    

c001a8b0 <apicOpen()>:
c001a8b0:	55                   	push   ebp
c001a8b1:	89 e5                	mov    ebp,esp
c001a8b3:	53                   	push   ebx
c001a8b4:	83 ec 34             	sub    esp,0x34
c001a8b7:	a0 a0 31 02 c0       	mov    al,ds:0xc00231a0
c001a8bc:	83 f0 01             	xor    eax,0x1
c001a8bf:	84 c0                	test   al,al
c001a8c1:	0f 84 9d 00 00 00    	je     c001a964 <apicOpen()+0xb4>
c001a8c7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001a8cb:	a0 60 1b 02 c0       	mov    al,ds:0xc0021b60
c001a8d0:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001a8d3:	0f 83 84 00 00 00    	jae    c001a95d <apicOpen()+0xad>
c001a8d9:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001a8e6:	e8 76 c2 fe ff       	call   c0006b61 <malloc>
c001a8eb:	83 c4 10             	add    esp,0x10
c001a8ee:	89 c3                	mov    ebx,eax
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	53                   	push   ebx
c001a8f4:	e8 8f ff ff ff       	call   c001a888 <IOAPIC::IOAPIC()>
c001a8f9:	83 c4 10             	add    esp,0x10
c001a8fc:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001a8ff:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001a902:	25 ff 00 00 00       	and    eax,0xff
c001a907:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001a90a:	89 14 85 80 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce80],edx
c001a911:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c001a916:	40                   	inc    eax
c001a917:	a3 60 31 02 c0       	mov    ds:0xc0023160,eax
c001a91c:	a1 a8 f2 01 c0       	mov    eax,ds:0xc001f2a8
c001a921:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001a927:	83 ec 08             	sub    esp,0x8
c001a92a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001a92d:	50                   	push   eax
c001a92e:	e8 fd 03 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001a939:	8b 00                	mov    eax,DWORD PTR [eax]
c001a93b:	83 c0 08             	add    eax,0x8
c001a93e:	8b 10                	mov    edx,DWORD PTR [eax]
c001a940:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001a943:	25 ff 00 00 00       	and    eax,0xff
c001a948:	6a 00                	push   0x0
c001a94a:	6a 00                	push   0x0
c001a94c:	50                   	push   eax
c001a94d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001a950:	ff d2                	call   edx
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001a958:	e9 6e ff ff ff       	jmp    c001a8cb <apicOpen()+0x1b>
c001a95d:	c6 05 a0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231a0,0x1
c001a964:	e8 dd fe ff ff       	call   c001a846 <apicGetBase()>
c001a969:	05 f0 00 00 00       	add    eax,0xf0
c001a96e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a971:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a974:	8b 00                	mov    eax,DWORD PTR [eax]
c001a976:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001a979:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001a980:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001a987:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a98a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a98d:	89 10                	mov    DWORD PTR [eax],edx
c001a98f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001a996:	a1 b0 1a 02 c0       	mov    eax,ds:0xc0021ab0
c001a99b:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001a99e:	7d 70                	jge    c001aa10 <apicOpen()+0x160>
c001a9a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a9a3:	8b 04 85 c0 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde540]
c001a9aa:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001a9ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a9b0:	8b 04 85 c0 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde540]
c001a9b7:	c1 e8 08             	shr    eax,0x8
c001a9ba:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001a9be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a9c1:	8b 04 85 c0 1a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde540]
c001a9c8:	c1 e8 18             	shr    eax,0x18
c001a9cb:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001a9ce:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001a9d2:	75 37                	jne    c001aa0b <apicOpen()+0x15b>
c001a9d4:	e8 6d fe ff ff       	call   c001a846 <apicGetBase()>
c001a9d9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001a9dd:	75 07                	jne    c001a9e6 <apicOpen()+0x136>
c001a9df:	ba 60 03 00 00       	mov    edx,0x360
c001a9e4:	eb 05                	jmp    c001a9eb <apicOpen()+0x13b>
c001a9e6:	ba 50 03 00 00       	mov    edx,0x350
c001a9eb:	01 d0                	add    eax,edx
c001a9ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a9f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a9f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9f5:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001a9f8:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001a9ff:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001aa03:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001aa06:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001aa09:	89 10                	mov    DWORD PTR [eax],edx
c001aa0b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001aa0e:	eb 86                	jmp    c001a996 <apicOpen()+0xe6>
c001aa10:	90                   	nop
c001aa11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001aa14:	c9                   	leave  
c001aa15:	c3                   	ret    

c001aa16 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001aa16:	55                   	push   ebp
c001aa17:	89 e5                	mov    ebp,esp
c001aa19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa22:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001aa25:	72 1d                	jb     c001aa44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001aa27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa2a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001aa30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa33:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001aa39:	01 d0                	add    eax,edx
c001aa3b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001aa3e:	73 04                	jae    c001aa44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001aa40:	b0 01                	mov    al,0x1
c001aa42:	eb 02                	jmp    c001aa46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001aa44:	b0 00                	mov    al,0x0
c001aa46:	5d                   	pop    ebp
c001aa47:	c3                   	ret    

c001aa48 <IOAPIC::read(int)>:
c001aa48:	55                   	push   ebp
c001aa49:	89 e5                	mov    ebp,esp
c001aa4b:	83 ec 10             	sub    esp,0x10
c001aa4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001aa57:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001aa5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001aa5d:	31 d2                	xor    edx,edx
c001aa5f:	88 c2                	mov    dl,al
c001aa61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001aa64:	89 10                	mov    DWORD PTR [eax],edx
c001aa66:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001aa69:	83 c0 10             	add    eax,0x10
c001aa6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa6e:	c9                   	leave  
c001aa6f:	c3                   	ret    

c001aa70 <IOAPIC::open(int, int, void*)>:
c001aa70:	55                   	push   ebp
c001aa71:	89 e5                	mov    ebp,esp
c001aa73:	57                   	push   edi
c001aa74:	56                   	push   esi
c001aa75:	53                   	push   ebx
c001aa76:	83 ec 04             	sub    esp,0x4
c001aa79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001aa7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aa85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa8e:	8b 14 85 a0 1b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde460]
c001aa95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aa98:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001aa9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aaa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aaa7:	8b 14 85 20 1c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde3e0]
c001aaae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aab1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001aab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aaba:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aac3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001aac9:	89 c6                	mov    esi,eax
c001aacb:	81 e6 ff 00 00 00    	and    esi,0xff
c001aad1:	89 d0                	mov    eax,edx
c001aad3:	ba 00 00 00 00       	mov    edx,0x0
c001aad8:	89 c7                	mov    edi,eax
c001aada:	83 e7 ff             	and    edi,0xffffffff
c001aadd:	89 f9                	mov    ecx,edi
c001aadf:	89 d0                	mov    eax,edx
c001aae1:	25 ff 00 00 00       	and    eax,0xff
c001aae6:	89 c3                	mov    ebx,eax
c001aae8:	89 c8                	mov    eax,ecx
c001aaea:	89 da                	mov    edx,ebx
c001aaec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001aaef:	8d 5e 08             	lea    ebx,[esi+0x8]
c001aaf2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001aaf6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001aafa:	83 e0 00             	and    eax,0x0
c001aafd:	09 d0                	or     eax,edx
c001aaff:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ab03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab06:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ab0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ab12:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ab18:	31 d2                	xor    edx,edx
c001ab1a:	88 c2                	mov    dl,al
c001ab1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab1f:	83 c2 08             	add    edx,0x8
c001ab22:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ab26:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ab2c:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ab32:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ab36:	6a 01                	push   0x1
c001ab38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ab3b:	e8 08 ff ff ff       	call   c001aa48 <IOAPIC::read(int)>
c001ab40:	83 c4 08             	add    esp,0x8
c001ab43:	c1 f8 10             	sar    eax,0x10
c001ab46:	25 ff 00 00 00       	and    eax,0xff
c001ab4b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab51:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ab57:	b8 00 00 00 00       	mov    eax,0x0
c001ab5c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ab5f:	5b                   	pop    ebx
c001ab60:	5e                   	pop    esi
c001ab61:	5f                   	pop    edi
c001ab62:	5d                   	pop    ebp
c001ab63:	c3                   	ret    

c001ab64 <IOAPIC::write(int, int)>:
c001ab64:	55                   	push   ebp
c001ab65:	89 e5                	mov    ebp,esp
c001ab67:	83 ec 10             	sub    esp,0x10
c001ab6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ab73:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ab76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab79:	31 d2                	xor    edx,edx
c001ab7b:	88 c2                	mov    dl,al
c001ab7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab80:	89 10                	mov    DWORD PTR [eax],edx
c001ab82:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab85:	8d 50 10             	lea    edx,[eax+0x10]
c001ab88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ab8b:	89 02                	mov    DWORD PTR [edx],eax
c001ab8d:	90                   	nop
c001ab8e:	c9                   	leave  
c001ab8f:	c3                   	ret    

c001ab90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ab90:	55                   	push   ebp
c001ab91:	89 e5                	mov    ebp,esp
c001ab93:	53                   	push   ebx
c001ab94:	83 ec 2c             	sub    esp,0x2c
c001ab97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab9a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ab9d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001aba0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001aba3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001aba6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001aba9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001abac:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001abaf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001abb2:	88 d8                	mov    al,bl
c001abb4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001abb7:	88 c8                	mov    al,cl
c001abb9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001abbc:	88 d0                	mov    al,dl
c001abbe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001abc1:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001abc4:	25 ff 00 00 00       	and    eax,0xff
c001abc9:	83 c0 08             	add    eax,0x8
c001abcc:	01 c0                	add    eax,eax
c001abce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001abd1:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001abd4:	25 ff 00 00 00       	and    eax,0xff
c001abd9:	83 c0 08             	add    eax,0x8
c001abdc:	01 c0                	add    eax,eax
c001abde:	40                   	inc    eax
c001abdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001abe2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001abe5:	50                   	push   eax
c001abe6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001abe9:	e8 5a fe ff ff       	call   c001aa48 <IOAPIC::read(int)>
c001abee:	83 c4 08             	add    esp,0x8
c001abf1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001abf4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001abfb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001abfe:	c1 e0 18             	shl    eax,0x18
c001ac01:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ac04:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ac07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ac0a:	52                   	push   edx
c001ac0b:	50                   	push   eax
c001ac0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac0f:	e8 50 ff ff ff       	call   c001ab64 <IOAPIC::write(int, int)>
c001ac14:	83 c4 0c             	add    esp,0xc
c001ac17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac1a:	50                   	push   eax
c001ac1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac1e:	e8 25 fe ff ff       	call   c001aa48 <IOAPIC::read(int)>
c001ac23:	83 c4 08             	add    esp,0x8
c001ac26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ac29:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ac30:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ac37:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ac3e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ac42:	74 09                	je     c001ac4d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001ac44:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ac4b:	eb 07                	jmp    c001ac54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001ac4d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ac54:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001ac58:	74 09                	je     c001ac63 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001ac5a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ac61:	eb 07                	jmp    c001ac6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001ac63:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ac6a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ac71:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001ac74:	25 ff 00 00 00       	and    eax,0xff
c001ac79:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ac7c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ac7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ac82:	52                   	push   edx
c001ac83:	50                   	push   eax
c001ac84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac87:	e8 d8 fe ff ff       	call   c001ab64 <IOAPIC::write(int, int)>
c001ac8c:	83 c4 0c             	add    esp,0xc
c001ac8f:	90                   	nop
c001ac90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ac93:	c9                   	leave  
c001ac94:	c3                   	ret    
c001ac95:	66 90                	xchg   ax,ax
c001ac97:	90                   	nop

c001ac98 <APICTimer::close(int, int, void*)>:
c001ac98:	b8 00 00 00 00       	mov    eax,0x0
c001ac9d:	c3                   	ret    
c001ac9e:	66 90                	xchg   ax,ax

c001aca0 <apicTimerHandler(regs*, void*)>:
c001aca0:	83 ec 0c             	sub    esp,0xc
c001aca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aca7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aca9:	b8 10 27 00 00       	mov    eax,0x2710
c001acae:	ba 00 00 00 00       	mov    edx,0x0
c001acb3:	f7 f1                	div    ecx
c001acb5:	83 ec 0c             	sub    esp,0xc
c001acb8:	50                   	push   eax
c001acb9:	e8 06 19 ff ff       	call   c000c5c4 <timerHandler(unsigned int)>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	90                   	nop
c001acc2:	83 c4 0c             	add    esp,0xc
c001acc5:	c3                   	ret    
c001acc6:	66 90                	xchg   ax,ax

c001acc8 <APICTimer::open(int, int, void*)>:
c001acc8:	83 ec 0c             	sub    esp,0xc
c001accb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accf:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd1:	83 c0 24             	add    eax,0x24
c001acd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd6:	83 ec 08             	sub    esp,0x8
c001acd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ace1:	ff d0                	call   eax
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001acee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001acf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acfc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ad02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad06:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ad0c:	83 ec 0c             	sub    esp,0xc
c001ad0f:	51                   	push   ecx
c001ad10:	6a 01                	push   0x1
c001ad12:	68 a0 ac 01 c0       	push   0xc001aca0
c001ad17:	52                   	push   edx
c001ad18:	50                   	push   eax
c001ad19:	e8 be ff fe ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ad1e:	83 c4 20             	add    esp,0x20
c001ad21:	89 c2                	mov    edx,eax
c001ad23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad27:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ad2d:	b8 00 00 00 00       	mov    eax,0x0
c001ad32:	83 c4 0c             	add    esp,0xc
c001ad35:	c3                   	ret    
c001ad36:	66 90                	xchg   ax,ax

c001ad38 <APICTimer::write(int)>:
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	83 ec 0c             	sub    esp,0xc
c001ad3e:	68 c0 e9 01 c0       	push   0xc001e9c0
c001ad43:	e8 f7 46 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad59:	90                   	nop
c001ad5a:	83 c4 0c             	add    esp,0xc
c001ad5d:	c3                   	ret    
c001ad5e:	66 90                	xchg   ax,ax

c001ad60 <APICTimer::APICTimer()>:
c001ad60:	83 ec 0c             	sub    esp,0xc
c001ad63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad67:	83 ec 08             	sub    esp,0x8
c001ad6a:	68 d0 e9 01 c0       	push   0xc001e9d0
c001ad6f:	50                   	push   eax
c001ad70:	e8 83 17 ff ff       	call   c000c4f8 <Timer::Timer(char const*)>
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	ba e4 e9 01 c0       	mov    edx,0xc001e9e4
c001ad7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad81:	89 10                	mov    DWORD PTR [eax],edx
c001ad83:	90                   	nop
c001ad84:	83 c4 0c             	add    esp,0xc
c001ad87:	c3                   	ret    

c001ad88 <PIT::write(int)>:
c001ad88:	83 ec 10             	sub    esp,0x10
c001ad8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad9d:	a3 a4 31 02 c0       	mov    ds:0xc00231a4,eax
c001ada2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ada7:	99                   	cdq    
c001ada8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001adac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adb0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001adb7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001adbc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001adc0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001adc5:	ee                   	out    dx,al
c001adc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adca:	25 ff 00 00 00       	and    eax,0xff
c001adcf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001add6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001adda:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001adde:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ade3:	ee                   	out    dx,al
c001ade4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ade8:	c1 f8 08             	sar    eax,0x8
c001adeb:	25 ff 00 00 00       	and    eax,0xff
c001adf0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001adf7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ae04:	ee                   	out    dx,al
c001ae05:	90                   	nop
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	c3                   	ret    
c001ae0a:	66 90                	xchg   ax,ax

c001ae0c <pitHandler(regs*, void*)>:
c001ae0c:	83 ec 0c             	sub    esp,0xc
c001ae0f:	8b 0d a4 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231a4
c001ae15:	b8 10 27 00 00       	mov    eax,0x2710
c001ae1a:	99                   	cdq    
c001ae1b:	f7 f9                	idiv   ecx
c001ae1d:	83 ec 0c             	sub    esp,0xc
c001ae20:	50                   	push   eax
c001ae21:	e8 9e 17 ff ff       	call   c000c5c4 <timerHandler(unsigned int)>
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	90                   	nop
c001ae2a:	83 c4 0c             	add    esp,0xc
c001ae2d:	c3                   	ret    
c001ae2e:	66 90                	xchg   ax,ax

c001ae30 <PIT::open(int, int, void*)>:
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae39:	83 c0 24             	add    eax,0x24
c001ae3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae3e:	83 ec 08             	sub    esp,0x8
c001ae41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae49:	ff d0                	call   eax
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	6a 00                	push   0x0
c001ae57:	6a 01                	push   0x1
c001ae59:	68 0c ae 01 c0       	push   0xc001ae0c
c001ae5e:	6a 00                	push   0x0
c001ae60:	50                   	push   eax
c001ae61:	e8 76 fe fe ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ae66:	83 c4 20             	add    esp,0x20
c001ae69:	89 c2                	mov    edx,eax
c001ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ae75:	b8 00 00 00 00       	mov    eax,0x0
c001ae7a:	83 c4 0c             	add    esp,0xc
c001ae7d:	c3                   	ret    
c001ae7e:	66 90                	xchg   ax,ax

c001ae80 <PIT::close(int, int, void*)>:
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae87:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ae91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae95:	6a 01                	push   0x1
c001ae97:	68 0c ae 01 c0       	push   0xc001ae0c
c001ae9c:	6a 00                	push   0x0
c001ae9e:	50                   	push   eax
c001ae9f:	e8 6e fe fe ff       	call   c000ad12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	b8 00 00 00 00       	mov    eax,0x0
c001aeac:	83 c4 0c             	add    esp,0xc
c001aeaf:	c3                   	ret    

c001aeb0 <PIT::PIT()>:
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb7:	83 ec 08             	sub    esp,0x8
c001aeba:	68 0c ea 01 c0       	push   0xc001ea0c
c001aebf:	50                   	push   eax
c001aec0:	e8 33 16 ff ff       	call   c000c4f8 <Timer::Timer(char const*)>
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	ba 34 ea 01 c0       	mov    edx,0xc001ea34
c001aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed1:	89 10                	mov    DWORD PTR [eax],edx
c001aed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aedd:	31 d2                	xor    edx,edx
c001aedf:	88 c2                	mov    dl,al
c001aee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001aeec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aef6:	31 d2                	xor    edx,edx
c001aef8:	88 c2                	mov    dl,al
c001aefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af0d:	8d 50 01             	lea    edx,[eax+0x1]
c001af10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af14:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001af1a:	31 d2                	xor    edx,edx
c001af1c:	88 c2                	mov    dl,al
c001af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af22:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001af26:	83 e1 3f             	and    ecx,0x3f
c001af29:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001af2d:	90                   	nop
c001af2e:	83 c4 0c             	add    esp,0xc
c001af31:	c3                   	ret    
c001af32:	66 90                	xchg   ax,ax
c001af34:	66 90                	xchg   ax,ax
c001af36:	66 90                	xchg   ax,ax
c001af38:	66 90                	xchg   ax,ax
c001af3a:	66 90                	xchg   ax,ax
c001af3c:	66 90                	xchg   ax,ax
c001af3e:	66 90                	xchg   ax,ax

c001af40 <avxDetect>:
c001af40:	b8 01 00 00 00       	mov    eax,0x1
c001af45:	0f a2                	cpuid  
c001af47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001af4d:	74 15                	je     c001af64 <avxDetect.noAVX>
c001af4f:	b8 01 00 00 00       	mov    eax,0x1
c001af54:	0f a2                	cpuid  
c001af56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001af5c:	74 06                	je     c001af64 <avxDetect.noAVX>
c001af5e:	b8 01 00 00 00       	mov    eax,0x1
c001af63:	c3                   	ret    

c001af64 <avxDetect.noAVX>:
c001af64:	b8 00 00 00 00       	mov    eax,0x0
c001af69:	c3                   	ret    

c001af6a <avxSave>:
c001af6a:	53                   	push   ebx
c001af6b:	52                   	push   edx
c001af6c:	31 c0                	xor    eax,eax
c001af6e:	48                   	dec    eax
c001af6f:	89 c2                	mov    edx,eax
c001af71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001af75:	0f ae 23             	xsave  [ebx]
c001af78:	5a                   	pop    edx
c001af79:	5b                   	pop    ebx
c001af7a:	c3                   	ret    

c001af7b <avxLoad>:
c001af7b:	53                   	push   ebx
c001af7c:	52                   	push   edx
c001af7d:	31 c0                	xor    eax,eax
c001af7f:	48                   	dec    eax
c001af80:	89 c2                	mov    edx,eax
c001af82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001af86:	0f ae 2b             	xrstor [ebx]
c001af89:	5a                   	pop    edx
c001af8a:	5b                   	pop    ebx
c001af8b:	c3                   	ret    

c001af8c <avxInit>:
c001af8c:	e8 57 02 00 00       	call   c001b1e8 <sseInit>
c001af91:	50                   	push   eax
c001af92:	51                   	push   ecx
c001af93:	0f 20 e0             	mov    eax,cr4
c001af96:	0d 00 00 04 00       	or     eax,0x40000
c001af9b:	0f 22 e0             	mov    cr4,eax
c001af9e:	31 c9                	xor    ecx,ecx
c001afa0:	0f 01 d0             	xgetbv 
c001afa3:	0d 07 00 00 00       	or     eax,0x7
c001afa8:	0f 01 d1             	xsetbv 
c001afab:	59                   	pop    ecx
c001afac:	58                   	pop    eax
c001afad:	c3                   	ret    

c001afae <avxClose>:
c001afae:	c3                   	ret    

c001afaf <wouldSheSayYes>:
c001afaf:	c3                   	ret    
c001afb0:	49                   	dec    ecx
c001afb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001afb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001afb9:	75 20                	jne    c001afdb <isr0+0xb>
c001afbb:	4e                   	dec    esi
c001afbc:	79 61                	jns    c001b01f <isr7+0x3>
c001afbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001afc3:	66 90                	xchg   ax,ax
c001afc5:	66 90                	xchg   ax,ax
c001afc7:	66 90                	xchg   ax,ax
c001afc9:	66 90                	xchg   ax,ax
c001afcb:	66 90                	xchg   ax,ax
c001afcd:	66 90                	xchg   ax,ax
c001afcf:	90                   	nop

c001afd0 <isr0>:
c001afd0:	fa                   	cli    
c001afd1:	68 00 00 00 00       	push   0x0
c001afd6:	68 00 00 00 00       	push   0x0
c001afdb:	e9 44 01 00 00       	jmp    c001b124 <int_common_stub>

c001afe0 <isr1>:
c001afe0:	fa                   	cli    
c001afe1:	6a 00                	push   0x0
c001afe3:	6a 01                	push   0x1
c001afe5:	e9 3a 01 00 00       	jmp    c001b124 <int_common_stub>

c001afea <isr2>:
c001afea:	fa                   	cli    
c001afeb:	6a 00                	push   0x0
c001afed:	6a 02                	push   0x2
c001afef:	e9 30 01 00 00       	jmp    c001b124 <int_common_stub>

c001aff4 <isr3>:
c001aff4:	fa                   	cli    
c001aff5:	6a 00                	push   0x0
c001aff7:	6a 03                	push   0x3
c001aff9:	e9 26 01 00 00       	jmp    c001b124 <int_common_stub>

c001affe <isr4>:
c001affe:	fa                   	cli    
c001afff:	6a 00                	push   0x0
c001b001:	6a 04                	push   0x4
c001b003:	e9 1c 01 00 00       	jmp    c001b124 <int_common_stub>

c001b008 <isr5>:
c001b008:	fa                   	cli    
c001b009:	6a 00                	push   0x0
c001b00b:	6a 05                	push   0x5
c001b00d:	e9 12 01 00 00       	jmp    c001b124 <int_common_stub>

c001b012 <isr6>:
c001b012:	fa                   	cli    
c001b013:	6a 00                	push   0x0
c001b015:	6a 06                	push   0x6
c001b017:	e9 08 01 00 00       	jmp    c001b124 <int_common_stub>

c001b01c <isr7>:
c001b01c:	fa                   	cli    
c001b01d:	6a 00                	push   0x0
c001b01f:	6a 07                	push   0x7
c001b021:	e9 fe 00 00 00       	jmp    c001b124 <int_common_stub>

c001b026 <isr8>:
c001b026:	fa                   	cli    
c001b027:	6a 08                	push   0x8
c001b029:	e9 f6 00 00 00       	jmp    c001b124 <int_common_stub>

c001b02e <isr9>:
c001b02e:	fa                   	cli    
c001b02f:	6a 00                	push   0x0
c001b031:	6a 09                	push   0x9
c001b033:	e9 ec 00 00 00       	jmp    c001b124 <int_common_stub>

c001b038 <isr10>:
c001b038:	fa                   	cli    
c001b039:	6a 0a                	push   0xa
c001b03b:	e9 e4 00 00 00       	jmp    c001b124 <int_common_stub>

c001b040 <isr11>:
c001b040:	fa                   	cli    
c001b041:	6a 0b                	push   0xb
c001b043:	e9 dc 00 00 00       	jmp    c001b124 <int_common_stub>

c001b048 <isr12>:
c001b048:	fa                   	cli    
c001b049:	6a 0c                	push   0xc
c001b04b:	e9 d4 00 00 00       	jmp    c001b124 <int_common_stub>

c001b050 <isr13>:
c001b050:	fa                   	cli    
c001b051:	6a 0d                	push   0xd
c001b053:	e9 cc 00 00 00       	jmp    c001b124 <int_common_stub>

c001b058 <isr14>:
c001b058:	fa                   	cli    
c001b059:	6a 0e                	push   0xe
c001b05b:	e9 c4 00 00 00       	jmp    c001b124 <int_common_stub>

c001b060 <isr15>:
c001b060:	fa                   	cli    
c001b061:	6a 00                	push   0x0
c001b063:	6a 0f                	push   0xf
c001b065:	e9 ba 00 00 00       	jmp    c001b124 <int_common_stub>

c001b06a <isr16>:
c001b06a:	fa                   	cli    
c001b06b:	6a 00                	push   0x0
c001b06d:	6a 10                	push   0x10
c001b06f:	e9 b0 00 00 00       	jmp    c001b124 <int_common_stub>

c001b074 <isr17>:
c001b074:	fa                   	cli    
c001b075:	6a 00                	push   0x0
c001b077:	6a 11                	push   0x11
c001b079:	e9 a6 00 00 00       	jmp    c001b124 <int_common_stub>

c001b07e <isr18>:
c001b07e:	fa                   	cli    
c001b07f:	6a 00                	push   0x0
c001b081:	6a 12                	push   0x12
c001b083:	e9 9c 00 00 00       	jmp    c001b124 <int_common_stub>

c001b088 <irq3>:
c001b088:	fa                   	cli    
c001b089:	6a 00                	push   0x0
c001b08b:	6a 23                	push   0x23
c001b08d:	e9 92 00 00 00       	jmp    c001b124 <int_common_stub>

c001b092 <irq4>:
c001b092:	fa                   	cli    
c001b093:	6a 00                	push   0x0
c001b095:	6a 24                	push   0x24
c001b097:	e9 88 00 00 00       	jmp    c001b124 <int_common_stub>

c001b09c <irq5>:
c001b09c:	fa                   	cli    
c001b09d:	6a 00                	push   0x0
c001b09f:	6a 25                	push   0x25
c001b0a1:	e9 7e 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0a6 <irq6>:
c001b0a6:	fa                   	cli    
c001b0a7:	6a 00                	push   0x0
c001b0a9:	6a 26                	push   0x26
c001b0ab:	e9 74 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0b0 <irq7>:
c001b0b0:	fa                   	cli    
c001b0b1:	6a 00                	push   0x0
c001b0b3:	6a 27                	push   0x27
c001b0b5:	e9 6a 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0ba <irq8>:
c001b0ba:	fa                   	cli    
c001b0bb:	6a 00                	push   0x0
c001b0bd:	6a 28                	push   0x28
c001b0bf:	e9 60 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0c4 <irq9>:
c001b0c4:	fa                   	cli    
c001b0c5:	6a 00                	push   0x0
c001b0c7:	6a 29                	push   0x29
c001b0c9:	e9 56 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0ce <irq10>:
c001b0ce:	fa                   	cli    
c001b0cf:	6a 00                	push   0x0
c001b0d1:	6a 2a                	push   0x2a
c001b0d3:	e9 4c 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0d8 <irq11>:
c001b0d8:	fa                   	cli    
c001b0d9:	6a 00                	push   0x0
c001b0db:	6a 2b                	push   0x2b
c001b0dd:	e9 42 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0e2 <irq12>:
c001b0e2:	fa                   	cli    
c001b0e3:	6a 00                	push   0x0
c001b0e5:	6a 2c                	push   0x2c
c001b0e7:	e9 38 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0ec <irq13>:
c001b0ec:	fa                   	cli    
c001b0ed:	6a 00                	push   0x0
c001b0ef:	6a 2d                	push   0x2d
c001b0f1:	e9 2e 00 00 00       	jmp    c001b124 <int_common_stub>

c001b0f6 <irq14>:
c001b0f6:	fa                   	cli    
c001b0f7:	6a 00                	push   0x0
c001b0f9:	6a 2e                	push   0x2e
c001b0fb:	e9 24 00 00 00       	jmp    c001b124 <int_common_stub>

c001b100 <irq15>:
c001b100:	fa                   	cli    
c001b101:	6a 00                	push   0x0
c001b103:	6a 2f                	push   0x2f
c001b105:	e9 1a 00 00 00       	jmp    c001b124 <int_common_stub>

c001b10a <irq1>:
c001b10a:	fa                   	cli    
c001b10b:	6a 00                	push   0x0
c001b10d:	6a 21                	push   0x21
c001b10f:	eb 13                	jmp    c001b124 <int_common_stub>

c001b111 <irq2>:
c001b111:	fa                   	cli    
c001b112:	6a 00                	push   0x0
c001b114:	6a 22                	push   0x22
c001b116:	eb 0c                	jmp    c001b124 <int_common_stub>

c001b118 <isr96>:
c001b118:	6a 00                	push   0x0
c001b11a:	6a 60                	push   0x60
c001b11c:	fb                   	sti    
c001b11d:	eb 05                	jmp    c001b124 <int_common_stub>

c001b11f <irq0>:
c001b11f:	fa                   	cli    
c001b120:	6a 00                	push   0x0
c001b122:	6a 20                	push   0x20

c001b124 <int_common_stub>:
c001b124:	60                   	pusha  
c001b125:	1e                   	push   ds
c001b126:	06                   	push   es
c001b127:	0f a0                	push   fs
c001b129:	0f a8                	push   gs
c001b12b:	66 b8 10 00          	mov    ax,0x10
c001b12f:	66 8e d8             	mov    ds,ax
c001b132:	66 8e c0             	mov    es,ax
c001b135:	66 8e e0             	mov    fs,ax
c001b138:	66 8e e8             	mov    gs,ax
c001b13b:	54                   	push   esp
c001b13c:	fc                   	cld    
c001b13d:	e8 9a 00 ff ff       	call   c000b1dc <int_handler>
c001b142:	81 c4 04 00 00 00    	add    esp,0x4
c001b148:	0f a9                	pop    gs
c001b14a:	0f a1                	pop    fs
c001b14c:	07                   	pop    es
c001b14d:	1f                   	pop    ds
c001b14e:	61                   	popa   
c001b14f:	81 c4 08 00 00 00    	add    esp,0x8
c001b155:	cf                   	iret   

c001b156 <irq16>:
c001b156:	fa                   	cli    
c001b157:	6a 00                	push   0x0
c001b159:	6a 30                	push   0x30
c001b15b:	e9 c4 ff ff ff       	jmp    c001b124 <int_common_stub>

c001b160 <irq17>:
c001b160:	fa                   	cli    
c001b161:	6a 00                	push   0x0
c001b163:	6a 31                	push   0x31
c001b165:	e9 ba ff ff ff       	jmp    c001b124 <int_common_stub>

c001b16a <irq18>:
c001b16a:	fa                   	cli    
c001b16b:	6a 00                	push   0x0
c001b16d:	6a 32                	push   0x32
c001b16f:	e9 b0 ff ff ff       	jmp    c001b124 <int_common_stub>

c001b174 <irq19>:
c001b174:	fa                   	cli    
c001b175:	6a 00                	push   0x0
c001b177:	6a 33                	push   0x33
c001b179:	e9 a6 ff ff ff       	jmp    c001b124 <int_common_stub>

c001b17e <irq20>:
c001b17e:	fa                   	cli    
c001b17f:	6a 00                	push   0x0
c001b181:	6a 34                	push   0x34
c001b183:	e9 9c ff ff ff       	jmp    c001b124 <int_common_stub>

c001b188 <irq21>:
c001b188:	fa                   	cli    
c001b189:	6a 00                	push   0x0
c001b18b:	6a 35                	push   0x35
c001b18d:	e9 92 ff ff ff       	jmp    c001b124 <int_common_stub>

c001b192 <irq22>:
c001b192:	fa                   	cli    
c001b193:	6a 00                	push   0x0
c001b195:	6a 36                	push   0x36
c001b197:	e9 88 ff ff ff       	jmp    c001b124 <int_common_stub>

c001b19c <irq23>:
c001b19c:	fa                   	cli    
c001b19d:	6a 00                	push   0x0
c001b19f:	6a 37                	push   0x37
c001b1a1:	e9 7e ff ff ff       	jmp    c001b124 <int_common_stub>
c001b1a6:	66 90                	xchg   ax,ax
c001b1a8:	66 90                	xchg   ax,ax
c001b1aa:	66 90                	xchg   ax,ax
c001b1ac:	66 90                	xchg   ax,ax
c001b1ae:	66 90                	xchg   ax,ax

c001b1b0 <i386GetRDRAND>:
c001b1b0:	b9 64 00 00 00       	mov    ecx,0x64

c001b1b5 <retry>:
c001b1b5:	0f c7 f0             	rdrand eax
c001b1b8:	72 05                	jb     c001b1bf <retry.done>
c001b1ba:	e2 f9                	loop   c001b1b5 <retry>

c001b1bc <retry.fail>:
c001b1bc:	31 c0                	xor    eax,eax
c001b1be:	c3                   	ret    

c001b1bf <retry.done>:
c001b1bf:	c3                   	ret    

c001b1c0 <absolutelyNoChanceInHell>:
c001b1c0:	b8 01 00 00 00       	mov    eax,0x1
c001b1c5:	0f a2                	cpuid  
c001b1c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b1cd:	74 06                	je     c001b1d5 <sseDetect.noSSE>
c001b1cf:	b8 01 00 00 00       	mov    eax,0x1
c001b1d4:	c3                   	ret    

c001b1d5 <sseDetect.noSSE>:
c001b1d5:	31 c0                	xor    eax,eax
c001b1d7:	c3                   	ret    

c001b1d8 <sseSave>:
c001b1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1dc:	0f ae 00             	fxsave [eax]
c001b1df:	c3                   	ret    

c001b1e0 <sseLoad>:
c001b1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1e4:	0f ae 08             	fxrstor [eax]
c001b1e7:	c3                   	ret    

c001b1e8 <sseInit>:
c001b1e8:	e8 42 00 00 00       	call   c001b22f <x87Init>
c001b1ed:	0f 20 e0             	mov    eax,cr4
c001b1f0:	66 0d 00 06          	or     ax,0x600
c001b1f4:	0f 22 e0             	mov    cr4,eax
c001b1f7:	c3                   	ret    

c001b1f8 <sseClose>:
c001b1f8:	c3                   	ret    
c001b1f9:	66 90                	xchg   ax,ax
c001b1fb:	66 90                	xchg   ax,ax
c001b1fd:	66 90                	xchg   ax,ax
c001b1ff:	90                   	nop

c001b200 <value_37F>:
c001b200:	7f 03                	jg     c001b205 <value_37A+0x1>

c001b202 <value_37E>:
c001b202:	7e 03                	jle    c001b207 <x87Detect+0x1>

c001b204 <value_37A>:
c001b204:	7a 03                	jp     c001b209 <x87Detect+0x3>

c001b206 <x87Detect>:
c001b206:	b8 01 00 00 00       	mov    eax,0x1
c001b20b:	0f a2                	cpuid  
c001b20d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b213:	74 06                	je     c001b21b <x87Detect.nox87>
c001b215:	b8 01 00 00 00       	mov    eax,0x1
c001b21a:	c3                   	ret    

c001b21b <x87Detect.nox87>:
c001b21b:	b8 00 00 00 00       	mov    eax,0x0
c001b220:	c3                   	ret    

c001b221 <x87Save>:
c001b221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b225:	dd 30                	fnsave [eax]
c001b227:	c3                   	ret    

c001b228 <x87Load>:
c001b228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b22c:	dd 20                	frstor [eax]
c001b22e:	c3                   	ret    

c001b22f <x87Init>:
c001b22f:	0f 20 c0             	mov    eax,cr0
c001b232:	66 25 fb ff          	and    ax,0xfffb
c001b236:	66 0d 22 00          	or     ax,0x22
c001b23a:	0f 22 c0             	mov    cr0,eax
c001b23d:	db e3                	fninit 
c001b23f:	0f 06                	clts   
c001b241:	d9 2d 04 b2 01 c0    	fldcw  WORD PTR ds:0xc001b204
c001b247:	c3                   	ret    

c001b248 <x87Close>:
c001b248:	c3                   	ret    
c001b249:	66 90                	xchg   ax,ax
c001b24b:	90                   	nop

c001b24c <__do_global_ctors_aux>:
c001b24c:	a1 fc c1 01 c0       	mov    eax,ds:0xc001c1fc
c001b251:	83 f8 ff             	cmp    eax,0xffffffff
c001b254:	74 1a                	je     c001b270 <__do_global_ctors_aux+0x24>
c001b256:	55                   	push   ebp
c001b257:	89 e5                	mov    ebp,esp
c001b259:	53                   	push   ebx
c001b25a:	52                   	push   edx
c001b25b:	bb fc c1 01 c0       	mov    ebx,0xc001c1fc
c001b260:	ff d0                	call   eax
c001b262:	83 eb 04             	sub    ebx,0x4
c001b265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b267:	83 f8 ff             	cmp    eax,0xffffffff
c001b26a:	75 f4                	jne    c001b260 <__do_global_ctors_aux+0x14>
c001b26c:	58                   	pop    eax
c001b26d:	5b                   	pop    ebx
c001b26e:	5d                   	pop    ebp
c001b26f:	c3                   	ret    
c001b270:	c3                   	ret    
c001b271:	66 90                	xchg   ax,ax
c001b273:	90                   	nop

c001b274 <__divdi3>:
c001b274:	55                   	push   ebp
c001b275:	57                   	push   edi
c001b276:	56                   	push   esi
c001b277:	53                   	push   ebx
c001b278:	83 ec 1c             	sub    esp,0x1c
c001b27b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b27f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b283:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b286:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b28a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b28e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b292:	85 db                	test   ebx,ebx
c001b294:	0f 88 8e 00 00 00    	js     c001b328 <__divdi3+0xb4>
c001b29a:	89 dd                	mov    ebp,ebx
c001b29c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b2a4:	89 d3                	mov    ebx,edx
c001b2a6:	85 d2                	test   edx,edx
c001b2a8:	79 0d                	jns    c001b2b7 <__divdi3+0x43>
c001b2aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b2ae:	f7 d8                	neg    eax
c001b2b0:	83 d2 00             	adc    edx,0x0
c001b2b3:	f7 da                	neg    edx
c001b2b5:	89 d3                	mov    ebx,edx
c001b2b7:	89 c7                	mov    edi,eax
c001b2b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2bc:	85 db                	test   ebx,ebx
c001b2be:	75 48                	jne    c001b308 <__divdi3+0x94>
c001b2c0:	39 ef                	cmp    edi,ebp
c001b2c2:	76 24                	jbe    c001b2e8 <__divdi3+0x74>
c001b2c4:	89 ea                	mov    edx,ebp
c001b2c6:	f7 f7                	div    edi
c001b2c8:	89 c1                	mov    ecx,eax
c001b2ca:	31 f6                	xor    esi,esi
c001b2cc:	89 c8                	mov    eax,ecx
c001b2ce:	89 f2                	mov    edx,esi
c001b2d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2d4:	85 c9                	test   ecx,ecx
c001b2d6:	74 07                	je     c001b2df <__divdi3+0x6b>
c001b2d8:	f7 d8                	neg    eax
c001b2da:	83 d2 00             	adc    edx,0x0
c001b2dd:	f7 da                	neg    edx
c001b2df:	83 c4 1c             	add    esp,0x1c
c001b2e2:	5b                   	pop    ebx
c001b2e3:	5e                   	pop    esi
c001b2e4:	5f                   	pop    edi
c001b2e5:	5d                   	pop    ebp
c001b2e6:	c3                   	ret    
c001b2e7:	90                   	nop
c001b2e8:	85 ff                	test   edi,edi
c001b2ea:	75 0b                	jne    c001b2f7 <__divdi3+0x83>
c001b2ec:	b8 01 00 00 00       	mov    eax,0x1
c001b2f1:	31 d2                	xor    edx,edx
c001b2f3:	f7 f3                	div    ebx
c001b2f5:	89 c7                	mov    edi,eax
c001b2f7:	31 d2                	xor    edx,edx
c001b2f9:	89 e8                	mov    eax,ebp
c001b2fb:	f7 f7                	div    edi
c001b2fd:	89 c6                	mov    esi,eax
c001b2ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b302:	f7 f7                	div    edi
c001b304:	89 c1                	mov    ecx,eax
c001b306:	eb c4                	jmp    c001b2cc <__divdi3+0x58>
c001b308:	39 eb                	cmp    ebx,ebp
c001b30a:	77 3c                	ja     c001b348 <__divdi3+0xd4>
c001b30c:	0f bd f3             	bsr    esi,ebx
c001b30f:	83 f6 1f             	xor    esi,0x1f
c001b312:	75 40                	jne    c001b354 <__divdi3+0xe0>
c001b314:	39 eb                	cmp    ebx,ebp
c001b316:	72 09                	jb     c001b321 <__divdi3+0xad>
c001b318:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b31b:	0f 87 97 00 00 00    	ja     c001b3b8 <__divdi3+0x144>
c001b321:	b9 01 00 00 00       	mov    ecx,0x1
c001b326:	eb a4                	jmp    c001b2cc <__divdi3+0x58>
c001b328:	f7 d9                	neg    ecx
c001b32a:	83 d3 00             	adc    ebx,0x0
c001b32d:	f7 db                	neg    ebx
c001b32f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b332:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b336:	89 dd                	mov    ebp,ebx
c001b338:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b340:	e9 5f ff ff ff       	jmp    c001b2a4 <__divdi3+0x30>
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	31 f6                	xor    esi,esi
c001b34a:	31 c9                	xor    ecx,ecx
c001b34c:	e9 7b ff ff ff       	jmp    c001b2cc <__divdi3+0x58>
c001b351:	8d 76 00             	lea    esi,[esi+0x0]
c001b354:	b8 20 00 00 00       	mov    eax,0x20
c001b359:	29 f0                	sub    eax,esi
c001b35b:	89 f1                	mov    ecx,esi
c001b35d:	d3 e3                	shl    ebx,cl
c001b35f:	89 fa                	mov    edx,edi
c001b361:	88 c1                	mov    cl,al
c001b363:	d3 ea                	shr    edx,cl
c001b365:	09 da                	or     edx,ebx
c001b367:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b36b:	89 f1                	mov    ecx,esi
c001b36d:	d3 e7                	shl    edi,cl
c001b36f:	89 eb                	mov    ebx,ebp
c001b371:	88 c1                	mov    cl,al
c001b373:	d3 eb                	shr    ebx,cl
c001b375:	89 f1                	mov    ecx,esi
c001b377:	d3 e5                	shl    ebp,cl
c001b379:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b37c:	88 c1                	mov    cl,al
c001b37e:	d3 ea                	shr    edx,cl
c001b380:	09 d5                	or     ebp,edx
c001b382:	89 e8                	mov    eax,ebp
c001b384:	89 da                	mov    edx,ebx
c001b386:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b38a:	89 d3                	mov    ebx,edx
c001b38c:	89 c5                	mov    ebp,eax
c001b38e:	f7 e7                	mul    edi
c001b390:	39 d3                	cmp    ebx,edx
c001b392:	72 18                	jb     c001b3ac <__divdi3+0x138>
c001b394:	74 0a                	je     c001b3a0 <__divdi3+0x12c>
c001b396:	89 e9                	mov    ecx,ebp
c001b398:	31 f6                	xor    esi,esi
c001b39a:	e9 2d ff ff ff       	jmp    c001b2cc <__divdi3+0x58>
c001b39f:	90                   	nop
c001b3a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b3a3:	89 f1                	mov    ecx,esi
c001b3a5:	d3 e7                	shl    edi,cl
c001b3a7:	39 c7                	cmp    edi,eax
c001b3a9:	73 eb                	jae    c001b396 <__divdi3+0x122>
c001b3ab:	90                   	nop
c001b3ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b3af:	31 f6                	xor    esi,esi
c001b3b1:	e9 16 ff ff ff       	jmp    c001b2cc <__divdi3+0x58>
c001b3b6:	66 90                	xchg   ax,ax
c001b3b8:	31 c9                	xor    ecx,ecx
c001b3ba:	e9 0d ff ff ff       	jmp    c001b2cc <__divdi3+0x58>
c001b3bf:	90                   	nop

c001b3c0 <__moddi3>:
c001b3c0:	55                   	push   ebp
c001b3c1:	57                   	push   edi
c001b3c2:	56                   	push   esi
c001b3c3:	53                   	push   ebx
c001b3c4:	83 ec 2c             	sub    esp,0x2c
c001b3c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b3cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b3cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b3d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b3d7:	85 db                	test   ebx,ebx
c001b3d9:	0f 88 85 00 00 00    	js     c001b464 <__moddi3+0xa4>
c001b3df:	89 de                	mov    esi,ebx
c001b3e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b3e9:	89 d7                	mov    edi,edx
c001b3eb:	85 d2                	test   edx,edx
c001b3ed:	79 09                	jns    c001b3f8 <__moddi3+0x38>
c001b3ef:	f7 d8                	neg    eax
c001b3f1:	83 d2 00             	adc    edx,0x0
c001b3f4:	f7 da                	neg    edx
c001b3f6:	89 d7                	mov    edi,edx
c001b3f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3fc:	89 cd                	mov    ebp,ecx
c001b3fe:	85 ff                	test   edi,edi
c001b400:	75 52                	jne    c001b454 <__moddi3+0x94>
c001b402:	89 c3                	mov    ebx,eax
c001b404:	39 f0                	cmp    eax,esi
c001b406:	76 24                	jbe    c001b42c <__moddi3+0x6c>
c001b408:	89 c8                	mov    eax,ecx
c001b40a:	89 f2                	mov    edx,esi
c001b40c:	f7 f3                	div    ebx
c001b40e:	89 d6                	mov    esi,edx
c001b410:	89 f0                	mov    eax,esi
c001b412:	31 d2                	xor    edx,edx
c001b414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b418:	85 c9                	test   ecx,ecx
c001b41a:	74 07                	je     c001b423 <__moddi3+0x63>
c001b41c:	f7 d8                	neg    eax
c001b41e:	83 d2 00             	adc    edx,0x0
c001b421:	f7 da                	neg    edx
c001b423:	83 c4 2c             	add    esp,0x2c
c001b426:	5b                   	pop    ebx
c001b427:	5e                   	pop    esi
c001b428:	5f                   	pop    edi
c001b429:	5d                   	pop    ebp
c001b42a:	c3                   	ret    
c001b42b:	90                   	nop
c001b42c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b430:	85 db                	test   ebx,ebx
c001b432:	75 0d                	jne    c001b441 <__moddi3+0x81>
c001b434:	b8 01 00 00 00       	mov    eax,0x1
c001b439:	31 d2                	xor    edx,edx
c001b43b:	f7 f7                	div    edi
c001b43d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b441:	89 f0                	mov    eax,esi
c001b443:	31 d2                	xor    edx,edx
c001b445:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b449:	f7 f7                	div    edi
c001b44b:	89 e8                	mov    eax,ebp
c001b44d:	f7 f7                	div    edi
c001b44f:	89 d6                	mov    esi,edx
c001b451:	eb bd                	jmp    c001b410 <__moddi3+0x50>
c001b453:	90                   	nop
c001b454:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b458:	39 f7                	cmp    edi,esi
c001b45a:	76 20                	jbe    c001b47c <__moddi3+0xbc>
c001b45c:	89 c8                	mov    eax,ecx
c001b45e:	89 f2                	mov    edx,esi
c001b460:	eb b2                	jmp    c001b414 <__moddi3+0x54>
c001b462:	66 90                	xchg   ax,ax
c001b464:	f7 d9                	neg    ecx
c001b466:	83 d3 00             	adc    ebx,0x0
c001b469:	f7 db                	neg    ebx
c001b46b:	89 de                	mov    esi,ebx
c001b46d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b475:	e9 6f ff ff ff       	jmp    c001b3e9 <__moddi3+0x29>
c001b47a:	66 90                	xchg   ax,ax
c001b47c:	0f bd c7             	bsr    eax,edi
c001b47f:	83 f0 1f             	xor    eax,0x1f
c001b482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b486:	75 24                	jne    c001b4ac <__moddi3+0xec>
c001b488:	39 f7                	cmp    edi,esi
c001b48a:	72 06                	jb     c001b492 <__moddi3+0xd2>
c001b48c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b490:	77 0c                	ja     c001b49e <__moddi3+0xde>
c001b492:	89 e9                	mov    ecx,ebp
c001b494:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b498:	19 fe                	sbb    esi,edi
c001b49a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b49e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4a2:	89 f2                	mov    edx,esi
c001b4a4:	e9 6b ff ff ff       	jmp    c001b414 <__moddi3+0x54>
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	b8 20 00 00 00       	mov    eax,0x20
c001b4b1:	89 c2                	mov    edx,eax
c001b4b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4b7:	29 da                	sub    edx,ebx
c001b4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b4bd:	88 d9                	mov    cl,bl
c001b4bf:	d3 e7                	shl    edi,cl
c001b4c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4c5:	88 d1                	mov    cl,dl
c001b4c7:	d3 e8                	shr    eax,cl
c001b4c9:	09 c7                	or     edi,eax
c001b4cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b4cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b4d3:	89 d8                	mov    eax,ebx
c001b4d5:	88 d9                	mov    cl,bl
c001b4d7:	d3 e7                	shl    edi,cl
c001b4d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b4dd:	89 f3                	mov    ebx,esi
c001b4df:	88 d1                	mov    cl,dl
c001b4e1:	d3 eb                	shr    ebx,cl
c001b4e3:	89 c7                	mov    edi,eax
c001b4e5:	88 c1                	mov    cl,al
c001b4e7:	d3 e6                	shl    esi,cl
c001b4e9:	89 e8                	mov    eax,ebp
c001b4eb:	88 d1                	mov    cl,dl
c001b4ed:	d3 e8                	shr    eax,cl
c001b4ef:	09 f0                	or     eax,esi
c001b4f1:	89 f9                	mov    ecx,edi
c001b4f3:	d3 e5                	shl    ebp,cl
c001b4f5:	89 da                	mov    edx,ebx
c001b4f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b4fb:	89 d3                	mov    ebx,edx
c001b4fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b501:	89 c6                	mov    esi,eax
c001b503:	89 d1                	mov    ecx,edx
c001b505:	39 d3                	cmp    ebx,edx
c001b507:	72 27                	jb     c001b530 <__moddi3+0x170>
c001b509:	74 21                	je     c001b52c <__moddi3+0x16c>
c001b50b:	29 f5                	sub    ebp,esi
c001b50d:	19 cb                	sbb    ebx,ecx
c001b50f:	89 de                	mov    esi,ebx
c001b511:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b515:	d3 e6                	shl    esi,cl
c001b517:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b51b:	89 f9                	mov    ecx,edi
c001b51d:	d3 ed                	shr    ebp,cl
c001b51f:	09 ee                	or     esi,ebp
c001b521:	89 f0                	mov    eax,esi
c001b523:	d3 eb                	shr    ebx,cl
c001b525:	89 da                	mov    edx,ebx
c001b527:	e9 e8 fe ff ff       	jmp    c001b414 <__moddi3+0x54>
c001b52c:	39 c5                	cmp    ebp,eax
c001b52e:	73 db                	jae    c001b50b <__moddi3+0x14b>
c001b530:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b534:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b538:	89 d1                	mov    ecx,edx
c001b53a:	89 c6                	mov    esi,eax
c001b53c:	eb cd                	jmp    c001b50b <__moddi3+0x14b>
c001b53e:	66 90                	xchg   ax,ax

c001b540 <__udivdi3>:
c001b540:	55                   	push   ebp
c001b541:	57                   	push   edi
c001b542:	56                   	push   esi
c001b543:	53                   	push   ebx
c001b544:	83 ec 1c             	sub    esp,0x1c
c001b547:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b54b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b54f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b553:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b557:	85 d2                	test   edx,edx
c001b559:	75 41                	jne    c001b59c <__udivdi3+0x5c>
c001b55b:	39 f7                	cmp    edi,esi
c001b55d:	76 15                	jbe    c001b574 <__udivdi3+0x34>
c001b55f:	89 e8                	mov    eax,ebp
c001b561:	89 f2                	mov    edx,esi
c001b563:	f7 f7                	div    edi
c001b565:	31 db                	xor    ebx,ebx
c001b567:	89 da                	mov    edx,ebx
c001b569:	83 c4 1c             	add    esp,0x1c
c001b56c:	5b                   	pop    ebx
c001b56d:	5e                   	pop    esi
c001b56e:	5f                   	pop    edi
c001b56f:	5d                   	pop    ebp
c001b570:	c3                   	ret    
c001b571:	8d 76 00             	lea    esi,[esi+0x0]
c001b574:	89 f9                	mov    ecx,edi
c001b576:	85 ff                	test   edi,edi
c001b578:	75 0b                	jne    c001b585 <__udivdi3+0x45>
c001b57a:	b8 01 00 00 00       	mov    eax,0x1
c001b57f:	31 d2                	xor    edx,edx
c001b581:	f7 f7                	div    edi
c001b583:	89 c1                	mov    ecx,eax
c001b585:	31 d2                	xor    edx,edx
c001b587:	89 f0                	mov    eax,esi
c001b589:	f7 f1                	div    ecx
c001b58b:	89 c3                	mov    ebx,eax
c001b58d:	89 e8                	mov    eax,ebp
c001b58f:	f7 f1                	div    ecx
c001b591:	89 da                	mov    edx,ebx
c001b593:	83 c4 1c             	add    esp,0x1c
c001b596:	5b                   	pop    ebx
c001b597:	5e                   	pop    esi
c001b598:	5f                   	pop    edi
c001b599:	5d                   	pop    ebp
c001b59a:	c3                   	ret    
c001b59b:	90                   	nop
c001b59c:	39 f2                	cmp    edx,esi
c001b59e:	77 1c                	ja     c001b5bc <__udivdi3+0x7c>
c001b5a0:	0f bd da             	bsr    ebx,edx
c001b5a3:	83 f3 1f             	xor    ebx,0x1f
c001b5a6:	75 24                	jne    c001b5cc <__udivdi3+0x8c>
c001b5a8:	39 f2                	cmp    edx,esi
c001b5aa:	72 08                	jb     c001b5b4 <__udivdi3+0x74>
c001b5ac:	39 ef                	cmp    edi,ebp
c001b5ae:	0f 87 84 00 00 00    	ja     c001b638 <__udivdi3+0xf8>
c001b5b4:	b8 01 00 00 00       	mov    eax,0x1
c001b5b9:	eb ac                	jmp    c001b567 <__udivdi3+0x27>
c001b5bb:	90                   	nop
c001b5bc:	31 db                	xor    ebx,ebx
c001b5be:	31 c0                	xor    eax,eax
c001b5c0:	89 da                	mov    edx,ebx
c001b5c2:	83 c4 1c             	add    esp,0x1c
c001b5c5:	5b                   	pop    ebx
c001b5c6:	5e                   	pop    esi
c001b5c7:	5f                   	pop    edi
c001b5c8:	5d                   	pop    ebp
c001b5c9:	c3                   	ret    
c001b5ca:	66 90                	xchg   ax,ax
c001b5cc:	b8 20 00 00 00       	mov    eax,0x20
c001b5d1:	29 d8                	sub    eax,ebx
c001b5d3:	88 d9                	mov    cl,bl
c001b5d5:	d3 e2                	shl    edx,cl
c001b5d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5db:	89 fa                	mov    edx,edi
c001b5dd:	88 c1                	mov    cl,al
c001b5df:	d3 ea                	shr    edx,cl
c001b5e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b5e5:	09 d1                	or     ecx,edx
c001b5e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b5eb:	88 d9                	mov    cl,bl
c001b5ed:	d3 e7                	shl    edi,cl
c001b5ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b5f3:	89 f7                	mov    edi,esi
c001b5f5:	88 c1                	mov    cl,al
c001b5f7:	d3 ef                	shr    edi,cl
c001b5f9:	88 d9                	mov    cl,bl
c001b5fb:	d3 e6                	shl    esi,cl
c001b5fd:	89 ea                	mov    edx,ebp
c001b5ff:	88 c1                	mov    cl,al
c001b601:	d3 ea                	shr    edx,cl
c001b603:	09 d6                	or     esi,edx
c001b605:	89 f0                	mov    eax,esi
c001b607:	89 fa                	mov    edx,edi
c001b609:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b60d:	89 d7                	mov    edi,edx
c001b60f:	89 c6                	mov    esi,eax
c001b611:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b615:	39 d7                	cmp    edi,edx
c001b617:	72 13                	jb     c001b62c <__udivdi3+0xec>
c001b619:	74 09                	je     c001b624 <__udivdi3+0xe4>
c001b61b:	89 f0                	mov    eax,esi
c001b61d:	31 db                	xor    ebx,ebx
c001b61f:	e9 43 ff ff ff       	jmp    c001b567 <__udivdi3+0x27>
c001b624:	88 d9                	mov    cl,bl
c001b626:	d3 e5                	shl    ebp,cl
c001b628:	39 c5                	cmp    ebp,eax
c001b62a:	73 ef                	jae    c001b61b <__udivdi3+0xdb>
c001b62c:	8d 46 ff             	lea    eax,[esi-0x1]
c001b62f:	31 db                	xor    ebx,ebx
c001b631:	e9 31 ff ff ff       	jmp    c001b567 <__udivdi3+0x27>
c001b636:	66 90                	xchg   ax,ax
c001b638:	31 c0                	xor    eax,eax
c001b63a:	e9 28 ff ff ff       	jmp    c001b567 <__udivdi3+0x27>
c001b63f:	90                   	nop

c001b640 <__umoddi3>:
c001b640:	55                   	push   ebp
c001b641:	57                   	push   edi
c001b642:	56                   	push   esi
c001b643:	53                   	push   ebx
c001b644:	83 ec 1c             	sub    esp,0x1c
c001b647:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b64b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b64f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b657:	89 da                	mov    edx,ebx
c001b659:	85 c0                	test   eax,eax
c001b65b:	75 37                	jne    c001b694 <__umoddi3+0x54>
c001b65d:	39 df                	cmp    edi,ebx
c001b65f:	76 13                	jbe    c001b674 <__umoddi3+0x34>
c001b661:	89 f0                	mov    eax,esi
c001b663:	f7 f7                	div    edi
c001b665:	89 d0                	mov    eax,edx
c001b667:	31 d2                	xor    edx,edx
c001b669:	83 c4 1c             	add    esp,0x1c
c001b66c:	5b                   	pop    ebx
c001b66d:	5e                   	pop    esi
c001b66e:	5f                   	pop    edi
c001b66f:	5d                   	pop    ebp
c001b670:	c3                   	ret    
c001b671:	8d 76 00             	lea    esi,[esi+0x0]
c001b674:	89 fd                	mov    ebp,edi
c001b676:	85 ff                	test   edi,edi
c001b678:	75 0b                	jne    c001b685 <__umoddi3+0x45>
c001b67a:	b8 01 00 00 00       	mov    eax,0x1
c001b67f:	31 d2                	xor    edx,edx
c001b681:	f7 f7                	div    edi
c001b683:	89 c5                	mov    ebp,eax
c001b685:	89 d8                	mov    eax,ebx
c001b687:	31 d2                	xor    edx,edx
c001b689:	f7 f5                	div    ebp
c001b68b:	89 f0                	mov    eax,esi
c001b68d:	f7 f5                	div    ebp
c001b68f:	89 d0                	mov    eax,edx
c001b691:	eb d4                	jmp    c001b667 <__umoddi3+0x27>
c001b693:	90                   	nop
c001b694:	89 f1                	mov    ecx,esi
c001b696:	39 d8                	cmp    eax,ebx
c001b698:	76 0a                	jbe    c001b6a4 <__umoddi3+0x64>
c001b69a:	89 f0                	mov    eax,esi
c001b69c:	83 c4 1c             	add    esp,0x1c
c001b69f:	5b                   	pop    ebx
c001b6a0:	5e                   	pop    esi
c001b6a1:	5f                   	pop    edi
c001b6a2:	5d                   	pop    ebp
c001b6a3:	c3                   	ret    
c001b6a4:	0f bd e8             	bsr    ebp,eax
c001b6a7:	83 f5 1f             	xor    ebp,0x1f
c001b6aa:	75 1c                	jne    c001b6c8 <__umoddi3+0x88>
c001b6ac:	39 d8                	cmp    eax,ebx
c001b6ae:	72 04                	jb     c001b6b4 <__umoddi3+0x74>
c001b6b0:	39 f7                	cmp    edi,esi
c001b6b2:	77 08                	ja     c001b6bc <__umoddi3+0x7c>
c001b6b4:	89 da                	mov    edx,ebx
c001b6b6:	29 fe                	sub    esi,edi
c001b6b8:	19 c2                	sbb    edx,eax
c001b6ba:	89 f1                	mov    ecx,esi
c001b6bc:	89 c8                	mov    eax,ecx
c001b6be:	83 c4 1c             	add    esp,0x1c
c001b6c1:	5b                   	pop    ebx
c001b6c2:	5e                   	pop    esi
c001b6c3:	5f                   	pop    edi
c001b6c4:	5d                   	pop    ebp
c001b6c5:	c3                   	ret    
c001b6c6:	66 90                	xchg   ax,ax
c001b6c8:	ba 20 00 00 00       	mov    edx,0x20
c001b6cd:	29 ea                	sub    edx,ebp
c001b6cf:	89 e9                	mov    ecx,ebp
c001b6d1:	d3 e0                	shl    eax,cl
c001b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6d7:	89 f8                	mov    eax,edi
c001b6d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b6dd:	88 d1                	mov    cl,dl
c001b6df:	d3 e8                	shr    eax,cl
c001b6e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b6e5:	09 c1                	or     ecx,eax
c001b6e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b6eb:	89 e9                	mov    ecx,ebp
c001b6ed:	d3 e7                	shl    edi,cl
c001b6ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b6f3:	89 d8                	mov    eax,ebx
c001b6f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b6f9:	88 d1                	mov    cl,dl
c001b6fb:	d3 e8                	shr    eax,cl
c001b6fd:	89 c7                	mov    edi,eax
c001b6ff:	89 e9                	mov    ecx,ebp
c001b701:	d3 e3                	shl    ebx,cl
c001b703:	89 f0                	mov    eax,esi
c001b705:	88 d1                	mov    cl,dl
c001b707:	d3 e8                	shr    eax,cl
c001b709:	09 d8                	or     eax,ebx
c001b70b:	89 e9                	mov    ecx,ebp
c001b70d:	d3 e6                	shl    esi,cl
c001b70f:	89 f3                	mov    ebx,esi
c001b711:	89 fa                	mov    edx,edi
c001b713:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b717:	89 d1                	mov    ecx,edx
c001b719:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b71d:	89 c6                	mov    esi,eax
c001b71f:	89 d7                	mov    edi,edx
c001b721:	39 d1                	cmp    ecx,edx
c001b723:	72 27                	jb     c001b74c <__umoddi3+0x10c>
c001b725:	74 21                	je     c001b748 <__umoddi3+0x108>
c001b727:	89 ca                	mov    edx,ecx
c001b729:	29 f3                	sub    ebx,esi
c001b72b:	19 fa                	sbb    edx,edi
c001b72d:	89 d0                	mov    eax,edx
c001b72f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b733:	d3 e0                	shl    eax,cl
c001b735:	89 e9                	mov    ecx,ebp
c001b737:	d3 eb                	shr    ebx,cl
c001b739:	09 d8                	or     eax,ebx
c001b73b:	d3 ea                	shr    edx,cl
c001b73d:	83 c4 1c             	add    esp,0x1c
c001b740:	5b                   	pop    ebx
c001b741:	5e                   	pop    esi
c001b742:	5f                   	pop    edi
c001b743:	5d                   	pop    ebp
c001b744:	c3                   	ret    
c001b745:	8d 76 00             	lea    esi,[esi+0x0]
c001b748:	39 c3                	cmp    ebx,eax
c001b74a:	73 db                	jae    c001b727 <__umoddi3+0xe7>
c001b74c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b750:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b754:	89 d7                	mov    edi,edx
c001b756:	89 c6                	mov    esi,eax
c001b758:	eb cd                	jmp    c001b727 <__umoddi3+0xe7>

Disassembly of section .init:

c001b75a <_init>:
c001b75a:	55                   	push   ebp
c001b75b:	89 e5                	mov    ebp,esp
c001b75d:	e8 b6 49 fe ff       	call   c0000118 <frame_dummy>
c001b762:	e8 e5 fa ff ff       	call   c001b24c <__do_global_ctors_aux>
c001b767:	5d                   	pop    ebp
c001b768:	c3                   	ret    

Disassembly of section .fini:

c001b769 <_fini>:
c001b769:	55                   	push   ebp
c001b76a:	89 e5                	mov    ebp,esp
c001b76c:	e8 37 49 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b771:	5d                   	pop    ebp
c001b772:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b774 <Computer::~Computer()>:
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	ba 70 ca 01 c0       	mov    edx,0xc001ca70
c001b77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b780:	89 10                	mov    DWORD PTR [eax],edx
c001b782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	50                   	push   eax
c001b78a:	e8 a3 f4 fe ff       	call   c000ac32 <Device::~Device()>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	90                   	nop
c001b793:	83 c4 0c             	add    esp,0xc
c001b796:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b798 <Computer::~Computer()>:
c001b798:	83 ec 0c             	sub    esp,0xc
c001b79b:	83 ec 0c             	sub    esp,0xc
c001b79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7a2:	e8 cd ff ff ff       	call   c001b774 <Computer::~Computer()>
c001b7a7:	83 c4 10             	add    esp,0x10
c001b7aa:	83 ec 08             	sub    esp,0x8
c001b7ad:	68 70 01 00 00       	push   0x170
c001b7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7b6:	e8 3f e0 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	83 c4 0c             	add    esp,0xc
c001b7c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001b7c2 <idleCommon()>:
c001b7c2:	83 ec 0c             	sub    esp,0xc
c001b7c5:	fa                   	cli    
c001b7c6:	ff 05 68 27 02 c0    	inc    DWORD PTR ds:0xc0022768
c001b7cc:	e8 c3 6f ff ff       	call   c0012794 <schedule()>
c001b7d1:	a1 68 27 02 c0       	mov    eax,ds:0xc0022768
c001b7d6:	48                   	dec    eax
c001b7d7:	a3 68 27 02 c0       	mov    ds:0xc0022768,eax
c001b7dc:	75 01                	jne    c001b7df <idleCommon()+0x1d>
c001b7de:	fb                   	sti    
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001b7e4 <LinkedList<UnixFile>::~LinkedList()>:
c001b7e4:	90                   	nop
c001b7e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001b7e6 <LinkedList<UnixFile>::LinkedList()>:
c001b7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b81f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b826:	90                   	nop
c001b827:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001b828 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001b828:	83 ec 0c             	sub    esp,0xc
c001b82b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b830:	75 10                	jne    c001b842 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001b832:	83 ec 0c             	sub    esp,0xc
c001b835:	68 c4 cc 01 c0       	push   0xc001ccc4
c001b83a:	e8 00 3c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b846:	8b 00                	mov    eax,DWORD PTR [eax]
c001b848:	85 c0                	test   eax,eax
c001b84a:	74 34                	je     c001b880 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b853:	85 c0                	test   eax,eax
c001b855:	74 29                	je     c001b880 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b85e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b862:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b869:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b86d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b877:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b87e:	eb 65                	jmp    c001b8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b884:	8b 00                	mov    eax,DWORD PTR [eax]
c001b886:	85 c0                	test   eax,eax
c001b888:	75 4b                	jne    c001b8d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b891:	85 c0                	test   eax,eax
c001b893:	75 40                	jne    c001b8d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b899:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b89d:	89 10                	mov    DWORD PTR [eax],edx
c001b89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b8b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8bf:	85 c0                	test   eax,eax
c001b8c1:	74 22                	je     c001b8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b8c3:	83 ec 0c             	sub    esp,0xc
c001b8c6:	68 e6 cc 01 c0       	push   0xc001cce6
c001b8cb:	e8 6f 3b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b8d0:	83 c4 10             	add    esp,0x10
c001b8d3:	eb 10                	jmp    c001b8e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b8d5:	83 ec 0c             	sub    esp,0xc
c001b8d8:	68 f0 cc 01 c0       	push   0xc001ccf0
c001b8dd:	e8 5d 3b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b8e2:	83 c4 10             	add    esp,0x10
c001b8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8ec:	8d 50 01             	lea    edx,[eax+0x1]
c001b8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b8f6:	90                   	nop
c001b8f7:	83 c4 0c             	add    esp,0xc
c001b8fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001b8fc <LinkedList<UnixFile>::getFirstElement()>:
c001b8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b900:	8b 00                	mov    eax,DWORD PTR [eax]
c001b902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001b904 <LinkedList<UnixFile>::removeFirst()>:
c001b904:	83 ec 0c             	sub    esp,0xc
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b90d:	85 c0                	test   eax,eax
c001b90f:	75 12                	jne    c001b923 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001b911:	83 ec 0c             	sub    esp,0xc
c001b914:	68 fc cc 01 c0       	push   0xc001ccfc
c001b919:	e8 21 3b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	eb 7e                	jmp    c001b9a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001b923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b927:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b92d:	85 c0                	test   eax,eax
c001b92f:	74 10                	je     c001b941 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001b931:	83 ec 0c             	sub    esp,0xc
c001b934:	68 47 cd 01 c0       	push   0xc001cd47
c001b939:	e8 01 3b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b945:	8b 00                	mov    eax,DWORD PTR [eax]
c001b947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b94a:	85 c0                	test   eax,eax
c001b94c:	75 33                	jne    c001b981 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b952:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b96a:	83 f8 01             	cmp    eax,0x1
c001b96d:	74 21                	je     c001b990 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001b96f:	83 ec 0c             	sub    esp,0xc
c001b972:	68 20 cd 01 c0       	push   0xc001cd20
c001b977:	e8 c3 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	eb 0f                	jmp    c001b990 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001b981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b985:	8b 00                	mov    eax,DWORD PTR [eax]
c001b987:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001b98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98e:	89 10                	mov    DWORD PTR [eax],edx
c001b990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b997:	8d 50 ff             	lea    edx,[eax-0x1]
c001b99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b9a1:	83 c4 0c             	add    esp,0xc
c001b9a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001b9a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001b9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b9ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001b9ae <DriverlessDevice::~DriverlessDevice()>:
c001b9ae:	ba 9c d3 01 c0       	mov    edx,0xc001d39c
c001b9b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9b7:	89 10                	mov    DWORD PTR [eax],edx
c001b9b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9bd:	50                   	push   eax
c001b9be:	e8 6f f2 fe ff       	call   c000ac32 <Device::~Device()>
c001b9c3:	83 c4 04             	add    esp,0x4
c001b9c6:	90                   	nop
c001b9c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001b9c8 <DriverlessDevice::~DriverlessDevice()>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d2:	e8 d7 ff ff ff       	call   c001b9ae <DriverlessDevice::~DriverlessDevice()>
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	83 ec 08             	sub    esp,0x8
c001b9dd:	68 58 01 00 00       	push   0x158
c001b9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9e6:	e8 0f de fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	83 c4 0c             	add    esp,0xc
c001b9f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001b9f2 <LinkedList<Device>::addElement(Device*)>:
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b9fa:	75 10                	jne    c001ba0c <LinkedList<Device>::addElement(Device*)+0x1a>
c001b9fc:	83 ec 0c             	sub    esp,0xc
c001b9ff:	68 c4 cc 01 c0       	push   0xc001ccc4
c001ba04:	e8 36 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba12:	85 c0                	test   eax,eax
c001ba14:	74 3a                	je     c001ba50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ba16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba1d:	85 c0                	test   eax,eax
c001ba1f:	74 2f                	je     c001ba50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ba21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba2c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ba32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba44:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ba4e:	eb 68                	jmp    c001bab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ba50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba56:	85 c0                	test   eax,eax
c001ba58:	75 4e                	jne    c001baa8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ba5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba61:	85 c0                	test   eax,eax
c001ba63:	75 43                	jne    c001baa8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ba65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba6d:	89 10                	mov    DWORD PTR [eax],edx
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba81:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ba8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba92:	85 c0                	test   eax,eax
c001ba94:	74 22                	je     c001bab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ba96:	83 ec 0c             	sub    esp,0xc
c001ba99:	68 e6 cc 01 c0       	push   0xc001cce6
c001ba9e:	e8 9c 39 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001baa3:	83 c4 10             	add    esp,0x10
c001baa6:	eb 10                	jmp    c001bab8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001baa8:	83 ec 0c             	sub    esp,0xc
c001baab:	68 f0 cc 01 c0       	push   0xc001ccf0
c001bab0:	e8 8a 39 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bab5:	83 c4 10             	add    esp,0x10
c001bab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001babf:	8d 50 01             	lea    edx,[eax+0x1]
c001bac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bac9:	90                   	nop
c001baca:	83 c4 0c             	add    esp,0xc
c001bacd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bace <LinkedList<Device>::LinkedList()>:
c001bace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bad2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bae7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001baee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb0e:	90                   	nop
c001bb0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bb10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb16:	85 c0                	test   eax,eax
c001bb18:	75 0e                	jne    c001bb28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bb1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb21:	85 c0                	test   eax,eax
c001bb23:	75 03                	jne    c001bb28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bb25:	b0 01                	mov    al,0x1
c001bb27:	c3                   	ret    
c001bb28:	b0 00                	mov    al,0x0
c001bb2a:	90                   	nop
c001bb2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bb2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bb34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bb34:	83 ec 0c             	sub    esp,0xc
c001bb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb3d:	85 c0                	test   eax,eax
c001bb3f:	75 17                	jne    c001bb58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bb41:	83 ec 0c             	sub    esp,0xc
c001bb44:	68 fc cc 01 c0       	push   0xc001ccfc
c001bb49:	e8 f1 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	e9 92 00 00 00       	jmp    c001bbe8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bb56:	66 90                	xchg   ax,ax
c001bb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb62:	85 c0                	test   eax,eax
c001bb64:	0f 95 c0             	setne  al
c001bb67:	84 c0                	test   al,al
c001bb69:	74 11                	je     c001bb7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001bb6b:	83 ec 0c             	sub    esp,0xc
c001bb6e:	68 47 cd 01 c0       	push   0xc001cd47
c001bb73:	e8 c7 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	90                   	nop
c001bb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb85:	85 c0                	test   eax,eax
c001bb87:	0f 94 c0             	sete   al
c001bb8a:	84 c0                	test   al,al
c001bb8c:	74 36                	je     c001bbc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbaa:	83 f8 01             	cmp    eax,0x1
c001bbad:	74 25                	je     c001bbd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bbaf:	83 ec 0c             	sub    esp,0xc
c001bbb2:	68 20 cd 01 c0       	push   0xc001cd20
c001bbb7:	e8 83 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	eb 13                	jmp    c001bbd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bbc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd1:	89 10                	mov    DWORD PTR [eax],edx
c001bbd3:	90                   	nop
c001bbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbdb:	8d 50 ff             	lea    edx,[eax-0x1]
c001bbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe8:	83 c4 0c             	add    esp,0xc
c001bbeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001bbec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001bbec:	83 ec 0c             	sub    esp,0xc
c001bbef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bbf4:	75 12                	jne    c001bc08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001bbf6:	83 ec 0c             	sub    esp,0xc
c001bbf9:	68 c4 cc 01 c0       	push   0xc001ccc4
c001bbfe:	e8 3c 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	66 90                	xchg   ax,ax
c001bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc0e:	85 c0                	test   eax,eax
c001bc10:	74 36                	je     c001bc48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc19:	85 c0                	test   eax,eax
c001bc1b:	74 2b                	je     c001bc48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bc1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001bc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bc44:	eb 6a                	jmp    c001bcb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bc46:	66 90                	xchg   ax,ax
c001bc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc4e:	85 c0                	test   eax,eax
c001bc50:	75 4e                	jne    c001bca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc59:	85 c0                	test   eax,eax
c001bc5b:	75 43                	jne    c001bca0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc65:	89 10                	mov    DWORD PTR [eax],edx
c001bc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc87:	85 c0                	test   eax,eax
c001bc89:	74 25                	je     c001bcb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bc8b:	83 ec 0c             	sub    esp,0xc
c001bc8e:	68 e6 cc 01 c0       	push   0xc001cce6
c001bc93:	e8 a7 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	eb 13                	jmp    c001bcb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bc9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	68 f0 cc 01 c0       	push   0xc001ccf0
c001bca8:	e8 92 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcb7:	8d 50 01             	lea    edx,[eax+0x1]
c001bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcc1:	90                   	nop
c001bcc2:	83 c4 0c             	add    esp,0xc
c001bcc5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bcc8 <ACPI::~ACPI()>:
c001bcc8:	83 ec 0c             	sub    esp,0xc
c001bccb:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c001bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd4:	89 10                	mov    DWORD PTR [eax],edx
c001bcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	50                   	push   eax
c001bcde:	e8 4f ef fe ff       	call   c000ac32 <Device::~Device()>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	90                   	nop
c001bce7:	83 c4 0c             	add    esp,0xc
c001bcea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001bcec <ACPI::~ACPI()>:
c001bcec:	83 ec 0c             	sub    esp,0xc
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcf6:	e8 cd ff ff ff       	call   c001bcc8 <ACPI::~ACPI()>
c001bcfb:	83 c4 10             	add    esp,0x10
c001bcfe:	83 ec 08             	sub    esp,0x8
c001bd01:	68 64 12 00 00       	push   0x1264
c001bd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd0a:	e8 eb da fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	83 c4 0c             	add    esp,0xc
c001bd15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001bd18 <LinkedList<Device>::~LinkedList()>:
c001bd18:	90                   	nop
c001bd19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001bd1c <LinkedList<Device>::isEmpty()>:
c001bd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd22:	85 c0                	test   eax,eax
c001bd24:	75 0e                	jne    c001bd34 <LinkedList<Device>::isEmpty()+0x18>
c001bd26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd2d:	85 c0                	test   eax,eax
c001bd2f:	75 03                	jne    c001bd34 <LinkedList<Device>::isEmpty()+0x18>
c001bd31:	b0 01                	mov    al,0x1
c001bd33:	c3                   	ret    
c001bd34:	b0 00                	mov    al,0x0
c001bd36:	90                   	nop
c001bd37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001bd38 <LinkedList<Device>::getFirstElement()>:
c001bd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001bd40 <LinkedList<Device>::removeFirst()>:
c001bd40:	83 ec 0c             	sub    esp,0xc
c001bd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd47:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd49:	85 c0                	test   eax,eax
c001bd4b:	75 17                	jne    c001bd64 <LinkedList<Device>::removeFirst()+0x24>
c001bd4d:	83 ec 0c             	sub    esp,0xc
c001bd50:	68 fc cc 01 c0       	push   0xc001ccfc
c001bd55:	e8 e5 36 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	e9 92 00 00 00       	jmp    c001bdf4 <LinkedList<Device>::removeFirst()+0xb4>
c001bd62:	66 90                	xchg   ax,ax
c001bd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bd71:	85 c0                	test   eax,eax
c001bd73:	74 13                	je     c001bd88 <LinkedList<Device>::removeFirst()+0x48>
c001bd75:	83 ec 0c             	sub    esp,0xc
c001bd78:	68 47 cd 01 c0       	push   0xc001cd47
c001bd7d:	e8 bd 36 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bd82:	83 c4 10             	add    esp,0x10
c001bd85:	8d 76 00             	lea    esi,[esi+0x0]
c001bd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001bd94:	85 c0                	test   eax,eax
c001bd96:	75 34                	jne    c001bdcc <LinkedList<Device>::removeFirst()+0x8c>
c001bd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bdb4:	83 f8 01             	cmp    eax,0x1
c001bdb7:	74 27                	je     c001bde0 <LinkedList<Device>::removeFirst()+0xa0>
c001bdb9:	83 ec 0c             	sub    esp,0xc
c001bdbc:	68 20 cd 01 c0       	push   0xc001cd20
c001bdc1:	e8 79 36 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bdc6:	83 c4 10             	add    esp,0x10
c001bdc9:	eb 15                	jmp    c001bde0 <LinkedList<Device>::removeFirst()+0xa0>
c001bdcb:	90                   	nop
c001bdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdd2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001bdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bddc:	89 10                	mov    DWORD PTR [eax],edx
c001bdde:	66 90                	xchg   ax,ax
c001bde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bde7:	8d 50 ff             	lea    edx,[eax-0x1]
c001bdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bdf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf4:	83 c4 0c             	add    esp,0xc
c001bdf7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001bdf8 <CPU::~CPU()>:
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	ba a0 da 01 c0       	mov    edx,0xc001daa0
c001be00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be04:	89 10                	mov    DWORD PTR [eax],edx
c001be06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be0a:	83 ec 0c             	sub    esp,0xc
c001be0d:	50                   	push   eax
c001be0e:	e8 1f ee fe ff       	call   c000ac32 <Device::~Device()>
c001be13:	83 c4 10             	add    esp,0x10
c001be16:	90                   	nop
c001be17:	83 c4 0c             	add    esp,0xc
c001be1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001be1c <CPU::~CPU()>:
c001be1c:	83 ec 0c             	sub    esp,0xc
c001be1f:	83 ec 0c             	sub    esp,0xc
c001be22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be26:	e8 cd ff ff ff       	call   c001bdf8 <CPU::~CPU()>
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	83 ec 08             	sub    esp,0x8
c001be31:	68 94 11 00 00       	push   0x1194
c001be36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be3a:	e8 bb d9 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001be3f:	83 c4 10             	add    esp,0x10
c001be42:	83 c4 0c             	add    esp,0xc
c001be45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001be48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001be48:	90                   	nop
c001be49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001be4c <ThreadControlBlock::ThreadControlBlock()>:
c001be4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001be57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001be62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001be6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001be78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001be83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001be8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001be93:	90                   	nop
c001be94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001be98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001be98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bea6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bead:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001beb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001becd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bed1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bed8:	90                   	nop
c001bed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001bedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001bedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bee0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bee3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001bee4 <PCI::~PCI()>:
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	ba 8c e5 01 c0       	mov    edx,0xc001e58c
c001beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef0:	89 10                	mov    DWORD PTR [eax],edx
c001bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	50                   	push   eax
c001befa:	e8 bd e7 fe ff       	call   c000a6bc <Bus::~Bus()>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	90                   	nop
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001bf08 <PCI::~PCI()>:
c001bf08:	83 ec 0c             	sub    esp,0xc
c001bf0b:	83 ec 0c             	sub    esp,0xc
c001bf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf12:	e8 cd ff ff ff       	call   c001bee4 <PCI::~PCI()>
c001bf17:	83 c4 10             	add    esp,0x10
c001bf1a:	83 ec 08             	sub    esp,0x8
c001bf1d:	68 5c 01 00 00       	push   0x15c
c001bf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf26:	e8 cf d8 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	83 c4 0c             	add    esp,0xc
c001bf31:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001bf32 <IDE::~IDE()>:
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	ba 40 e6 01 c0       	mov    edx,0xc001e640
c001bf3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3e:	89 10                	mov    DWORD PTR [eax],edx
c001bf40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	50                   	push   eax
c001bf48:	e8 5f f1 fe ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	90                   	nop
c001bf51:	83 c4 0c             	add    esp,0xc
c001bf54:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001bf56 <IDE::~IDE()>:
c001bf56:	83 ec 0c             	sub    esp,0xc
c001bf59:	83 ec 0c             	sub    esp,0xc
c001bf5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf60:	e8 cd ff ff ff       	call   c001bf32 <IDE::~IDE()>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	83 ec 08             	sub    esp,0x8
c001bf6b:	68 70 02 00 00       	push   0x270
c001bf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf74:	e8 81 d8 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	83 c4 0c             	add    esp,0xc
c001bf7f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001bf80 <SATABus::~SATABus()>:
c001bf80:	83 ec 0c             	sub    esp,0xc
c001bf83:	ba 90 e6 01 c0       	mov    edx,0xc001e690
c001bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8c:	89 10                	mov    DWORD PTR [eax],edx
c001bf8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	50                   	push   eax
c001bf96:	e8 11 f1 fe ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	90                   	nop
c001bf9f:	83 c4 0c             	add    esp,0xc
c001bfa2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001bfa4 <SATABus::~SATABus()>:
c001bfa4:	83 ec 0c             	sub    esp,0xc
c001bfa7:	83 ec 0c             	sub    esp,0xc
c001bfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfae:	e8 cd ff ff ff       	call   c001bf80 <SATABus::~SATABus()>
c001bfb3:	83 c4 10             	add    esp,0x10
c001bfb6:	83 ec 08             	sub    esp,0x8
c001bfb9:	68 64 01 00 00       	push   0x164
c001bfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfc2:	e8 33 d8 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	83 c4 0c             	add    esp,0xc
c001bfcd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001bfce <ATA::~ATA()>:
c001bfce:	83 ec 0c             	sub    esp,0xc
c001bfd1:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c001bfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfda:	89 10                	mov    DWORD PTR [eax],edx
c001bfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	50                   	push   eax
c001bfe4:	e8 a5 f1 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001bfe9:	83 c4 10             	add    esp,0x10
c001bfec:	90                   	nop
c001bfed:	83 c4 0c             	add    esp,0xc
c001bff0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001bff2 <ATA::~ATA()>:
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bffc:	e8 cd ff ff ff       	call   c001bfce <ATA::~ATA()>
c001c001:	83 c4 10             	add    esp,0x10
c001c004:	83 ec 08             	sub    esp,0x8
c001c007:	68 7c 01 00 00       	push   0x17c
c001c00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c010:	e8 e5 d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	83 c4 0c             	add    esp,0xc
c001c01b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c01c <ATAPI::~ATAPI()>:
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	ba 18 e7 01 c0       	mov    edx,0xc001e718
c001c024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c028:	89 10                	mov    DWORD PTR [eax],edx
c001c02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02e:	83 ec 0c             	sub    esp,0xc
c001c031:	50                   	push   eax
c001c032:	e8 57 f1 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	90                   	nop
c001c03b:	83 c4 0c             	add    esp,0xc
c001c03e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c040 <ATAPI::~ATAPI()>:
c001c040:	83 ec 0c             	sub    esp,0xc
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c04a:	e8 cd ff ff ff       	call   c001c01c <ATAPI::~ATAPI()>
c001c04f:	83 c4 10             	add    esp,0x10
c001c052:	83 ec 08             	sub    esp,0x8
c001c055:	68 84 01 00 00       	push   0x184
c001c05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c05e:	e8 97 d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c063:	83 c4 10             	add    esp,0x10
c001c066:	83 c4 0c             	add    esp,0xc
c001c069:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c06a <SATA::~SATA()>:
c001c06a:	83 ec 0c             	sub    esp,0xc
c001c06d:	ba cc e7 01 c0       	mov    edx,0xc001e7cc
c001c072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c076:	89 10                	mov    DWORD PTR [eax],edx
c001c078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c07c:	83 ec 0c             	sub    esp,0xc
c001c07f:	50                   	push   eax
c001c080:	e8 09 f1 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	90                   	nop
c001c089:	83 c4 0c             	add    esp,0xc
c001c08c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c08e <SATA::~SATA()>:
c001c08e:	83 ec 0c             	sub    esp,0xc
c001c091:	83 ec 0c             	sub    esp,0xc
c001c094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c098:	e8 cd ff ff ff       	call   c001c06a <SATA::~SATA()>
c001c09d:	83 c4 10             	add    esp,0x10
c001c0a0:	83 ec 08             	sub    esp,0x8
c001c0a3:	68 7c 01 00 00       	push   0x17c
c001c0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0ac:	e8 49 d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c0b1:	83 c4 10             	add    esp,0x10
c001c0b4:	83 c4 0c             	add    esp,0xc
c001c0b7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c0b8 <SATAPI::~SATAPI()>:
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	ba 5c e9 01 c0       	mov    edx,0xc001e95c
c001c0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c4:	89 10                	mov    DWORD PTR [eax],edx
c001c0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ca:	83 ec 0c             	sub    esp,0xc
c001c0cd:	50                   	push   eax
c001c0ce:	e8 bb f0 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c0d3:	83 c4 10             	add    esp,0x10
c001c0d6:	90                   	nop
c001c0d7:	83 c4 0c             	add    esp,0xc
c001c0da:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c0dc <SATAPI::~SATAPI()>:
c001c0dc:	83 ec 0c             	sub    esp,0xc
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e6:	e8 cd ff ff ff       	call   c001c0b8 <SATAPI::~SATAPI()>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	83 ec 08             	sub    esp,0x8
c001c0f1:	68 84 01 00 00       	push   0x184
c001c0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0fa:	e8 fb d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	83 c4 0c             	add    esp,0xc
c001c105:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c106 <IOAPIC::~IOAPIC()>:
c001c106:	83 ec 0c             	sub    esp,0xc
c001c109:	ba 9c e9 01 c0       	mov    edx,0xc001e99c
c001c10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c112:	89 10                	mov    DWORD PTR [eax],edx
c001c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c118:	83 ec 0c             	sub    esp,0xc
c001c11b:	50                   	push   eax
c001c11c:	e8 11 eb fe ff       	call   c000ac32 <Device::~Device()>
c001c121:	83 c4 10             	add    esp,0x10
c001c124:	90                   	nop
c001c125:	83 c4 0c             	add    esp,0xc
c001c128:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c12a <IOAPIC::~IOAPIC()>:
c001c12a:	83 ec 0c             	sub    esp,0xc
c001c12d:	83 ec 0c             	sub    esp,0xc
c001c130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c134:	e8 cd ff ff ff       	call   c001c106 <IOAPIC::~IOAPIC()>
c001c139:	83 c4 10             	add    esp,0x10
c001c13c:	83 ec 08             	sub    esp,0x8
c001c13f:	68 68 01 00 00       	push   0x168
c001c144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c148:	e8 ad d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	83 c4 0c             	add    esp,0xc
c001c153:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c154 <APICTimer::~APICTimer()>:
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	ba e4 e9 01 c0       	mov    edx,0xc001e9e4
c001c15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c160:	89 10                	mov    DWORD PTR [eax],edx
c001c162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c166:	83 ec 0c             	sub    esp,0xc
c001c169:	50                   	push   eax
c001c16a:	e8 c1 03 ff ff       	call   c000c530 <Timer::~Timer()>
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	90                   	nop
c001c173:	83 c4 0c             	add    esp,0xc
c001c176:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c178 <APICTimer::~APICTimer()>:
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	83 ec 0c             	sub    esp,0xc
c001c17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c182:	e8 cd ff ff ff       	call   c001c154 <APICTimer::~APICTimer()>
c001c187:	83 c4 10             	add    esp,0x10
c001c18a:	83 ec 08             	sub    esp,0x8
c001c18d:	68 60 01 00 00       	push   0x160
c001c192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c196:	e8 5f d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c19b:	83 c4 10             	add    esp,0x10
c001c19e:	83 c4 0c             	add    esp,0xc
c001c1a1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c1a4 <PIT::~PIT()>:
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	ba 34 ea 01 c0       	mov    edx,0xc001ea34
c001c1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b0:	89 10                	mov    DWORD PTR [eax],edx
c001c1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	50                   	push   eax
c001c1ba:	e8 71 03 ff ff       	call   c000c530 <Timer::~Timer()>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	90                   	nop
c001c1c3:	83 c4 0c             	add    esp,0xc
c001c1c6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c1c8 <PIT::~PIT()>:
c001c1c8:	83 ec 0c             	sub    esp,0xc
c001c1cb:	83 ec 0c             	sub    esp,0xc
c001c1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d2:	e8 cd ff ff ff       	call   c001c1a4 <PIT::~PIT()>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	83 ec 08             	sub    esp,0x8
c001c1dd:	68 5c 01 00 00       	push   0x15c
c001c1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1e6:	e8 0f d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	83 c4 0c             	add    esp,0xc
c001c1f1:	c3                   	ret    
