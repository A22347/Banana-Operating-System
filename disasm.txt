
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 39 21 02 00       	call   c002215e <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 2d 02 c0       	mov    ebx,0xc0022de2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 2d 02 c0    	cmp    ebx,0xc0022df0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 6e 02 c0       	mov    eax,0xc0026ed8
c0000049:	3d d8 6e 02 c0       	cmp    eax,0xc0026ed8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 6e 02 c0       	push   0xc0026ed8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 6e 02 c0       	mov    eax,0xc0026ed8
c0000075:	2d d8 6e 02 c0       	sub    eax,0xc0026ed8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 6e 02 c0       	push   0xc0026ed8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027060,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 2d 02 c0       	mov    ebx,0xc0022df8
c00000bb:	81 eb f4 2d 02 c0    	sub    ebx,0xc0022df4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 2d 02 c0       	mov    esi,0xc0022df4
c00000ca:	a1 64 70 02 c0       	mov    eax,ds:0xc0027064
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 70 02 c0       	mov    eax,ds:0xc0027064
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 6e 02 c0       	push   0xc0026ed8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 70 02 c0 01 	mov    BYTE PTR ds:0xc0027060,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 70 02 c0       	push   0xc0027068
c000012c:	68 d8 6e 02 c0       	push   0xc0026ed8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 08 79 01 00       	call   c0017be0 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 c0 c6 00 00       	call   c000c9b0 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 e6 78 01 00       	call   c0017be0 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 af 7d 01 00       	call   c00180c8 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 f2 83 01 00       	call   c0018714 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 b0 74 02 c0 	lgdtd  ds:0xc00274b0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 4e e4 00 00       	call   c000e965 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 80 70 02 c0       	mov    ds:0xc0027080,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 80 70 02 c0    	mov    DWORD PTR ds:0xc0027080,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 80 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027080
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 00 2e 02 c0 02 	test   BYTE PTR [edx-0x3ffdd200],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 00 2e 02 c0 01 	test   BYTE PTR [edx-0x3ffdd200],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 00 2e 02 c0 08 	test   BYTE PTR [edx-0x3ffdd200],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 00 2e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdd200],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 00 2e 02 c0 01 	test   BYTE PTR [edx-0x3ffdd200],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d a0 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270a0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d a0 70 02 c0    	mov    DWORD PTR ds:0xc00270a0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 a4 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8f5c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 a4 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f5c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d a0 70 02 c0    	mov    DWORD PTR ds:0xc00270a0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 cc 70 02 c0    	cmp    DWORD PTR ds:0xc00270cc,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d dc 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270dc
c0000d6c:	c7 42 0c d4 70 02 c0 	mov    DWORD PTR [edx+0xc],0xc00270d4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 dc 70 02 c0    	mov    DWORD PTR ds:0xc00270dc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 cc 70 02 c0    	mov    DWORD PTR ds:0xc00270cc,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 a0 70 02 c0 02 	test   BYTE PTR ds:0xc00270a0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d a0 70 02 c0    	mov    edi,DWORD PTR ds:0xc00270a0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 a4 70 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8f5c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 a4 70 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8f5c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 d4 70 02 c0 	lea    edx,[eax*8-0x3ffd8f2c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c00010ee:	81 fb d4 70 02 c0    	cmp    ebx,0xc00270d4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d d4 70 02 c0       	cmp    eax,0xc00270d4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d d0 70 02 c0    	cmp    DWORD PTR ds:0xc00270d0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 dc 70 02 c0       	mov    ds:0xc00270dc,eax
c000112a:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c000112f:	a3 d0 70 02 c0       	mov    ds:0xc00270d0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 d4 70 02 c0 	mov    DWORD PTR [eax+0x8],0xc00270d4
c000113d:	c7 40 0c d4 70 02 c0 	mov    DWORD PTR [eax+0xc],0xc00270d4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 d4 70 02 c0 	mov    DWORD PTR [eax+0x8],0xc00270d4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 98 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f68]
c000118e:	8b 14 95 a0 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f60]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 a0 70 02 c0 	lea    ecx,[edx*4-0x3ffd8f60]
c00011a9:	8b 14 95 a0 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f60]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd d4 73 02 c0 	or     DWORD PTR [edi*4-0x3ffd8c2c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 d4 70 02 c0 	lea    eax,[eax*8-0x3ffd8f2c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d dc 70 02 c0    	mov    DWORD PTR ds:0xc00270dc,ecx
c0001263:	89 0d e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,ecx
c0001269:	c7 41 08 d4 70 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00270d4
c0001270:	c7 41 0c d4 70 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00270d4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd cc 70 02 c0 	lea    edx,[ecx*8-0x3ffd8f34]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d d4 73 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8c2c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d d4 73 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8c2c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 cc 70 02 c0 	lea    edx,[eax*4-0x3ffd8f34]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d d4 73 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8c2c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d dc 70 02 c0    	mov    DWORD PTR ds:0xc00270dc,edi
c0001336:	89 3d e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edi
c000133c:	c7 47 08 d4 70 02 c0 	mov    DWORD PTR [edi+0x8],0xc00270d4
c0001343:	c7 47 0c d4 70 02 c0 	mov    DWORD PTR [edi+0xc],0xc00270d4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d d0 70 02 c0    	mov    DWORD PTR ds:0xc00270d0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 cc 70 02 c0       	mov    eax,ds:0xc00270cc
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d cc 70 02 c0    	mov    DWORD PTR ds:0xc00270cc,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d a0 70 02 c0 00 	cmp    DWORD PTR ds:0xc00270a0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d f4 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273f4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 f4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273f4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d f4 73 02 c0    	mov    DWORD PTR ds:0xc00273f4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 cc 70 02 c0    	cmp    DWORD PTR ds:0xc00270cc,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d cc 70 02 c0    	mov    DWORD PTR ds:0xc00270cc,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d a0 70 02 c0 00 	cmp    DWORD PTR ds:0xc00270a0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 fc 73 02 c0    	push   DWORD PTR ds:0xc00273fc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d a0 70 02 c0 00 	cmp    DWORD PTR ds:0xc00270a0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 fc 73 02 c0       	mov    eax,ds:0xc00273fc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d cc 70 02 c0 00 	cmp    DWORD PTR ds:0xc00270cc,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 cc 70 02 c0       	mov    eax,ds:0xc00270cc
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 a4 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f5c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 d4 70 02 c0       	mov    eax,0xc00270d4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d cc 73 02 c0       	cmp    eax,0xc00273cc
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 08 74 02 c0       	mov    eax,ds:0xc0027408
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 f0 73 02 c0    	mov    esi,DWORD PTR ds:0xc00273f0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 04 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027404
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 14 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027414
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 a0 70 02 c0       	mov    eax,0xc00270a0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 04 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd0fc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 a0 70 02 c0       	mov    eax,ds:0xc00270a0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 a0 70 02 c0       	mov    ds:0xc00270a0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d e4 73 02 c0    	mov    DWORD PTR ds:0xc00273e4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d e8 73 02 c0    	mov    DWORD PTR ds:0xc00273e8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ec 73 02 c0    	mov    DWORD PTR ds:0xc00273ec,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 f4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273f4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 00 8b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7500]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 f2 98 01 00       	jmp    c001b418 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 00 8b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7500]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 24 99 01 00       	jmp    c001b460 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 00 8b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7500]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 4d 99 01 00       	jmp    c001b4a8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 06 01 02 00       	call   c0021f44 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 20 30 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdcfe0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 20 30 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdcfe0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 20 2f 02 c0       	mov    edx,0xc0022f20
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 40 30 02 c0       	mov    edx,0xc0023040
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 7c 5a 02 c0       	mov    edx,0xc0025a7c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 30 30 02 c0       	mov    edx,0xc0023030
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 40 74 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8bc0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 20 74 02 c0    	mov    ax,ds:0xc0027420
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 20 74 02 c0    	mov    ds:0xc0027420,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 03 ef 01 00       	call   c0021f44 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 52 30 02 c0       	mov    eax,0xc0023052
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad a0 2f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdd060]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 5b 30 02 c0       	mov    eax,0xc002305b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 20 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfe0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 ce d8 01 00       	call   c0021f44 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 30 30 02 c0       	mov    edx,0xc0023030
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 20 2f 02 c0       	mov    edx,0xc0022f20
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 40 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8bc0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 40 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8bc0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 95 c2 01 00       	call   c0021f44 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 7b c2 01 00       	call   c0021f44 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 77 2f 02 c0       	mov    eax,0xc0022f77
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 14 ae 01 00       	call   c0021f44 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 40 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8bc0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 60 2f 02 c0       	mov    esi,0xc0022f60
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 88 a7 01 00       	call   c0021f44 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 40 30 02 c0       	mov    edx,0xc0023040
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 40 2f 02 c0       	mov    edx,0xc0022f40
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 62 30 02 c0       	mov    edx,0xc0023062
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 6e 30 02 c0       	mov    edx,0xc002306e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 82 30 02 c0       	mov    edx,0xc0023082
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c a0 33 02 c0 	mov    DWORD PTR [esp+0xc],0xc00233a0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 a0 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc00233a0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 a0 31 02 c0       	mov    eax,0xc00231a0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000888b:	48                   	dec    eax
c000888c:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00088a2:	48                   	dec    eax
c00088a3:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c00088b3:	ff 05 64 89 02 c0    	inc    DWORD PTR ds:0xc0028964
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c00088c2:	48                   	dec    eax
c00088c3:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 60 89 02 c0 00 	cmp    DWORD PTR ds:0xc0028960,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c00088dd:	e8 52 fa 00 00       	call   c0018334 <schedule()>
c00088e2:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00088e7:	48                   	dec    eax
c00088e8:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 d0 75 02 c0       	mov    eax,ds:0xc00275d0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 a0 34 02 c0       	push   0xc00234a0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 a8 74 02 c0       	mov    eax,0xc00274a8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 a9 34 02 c0       	push   0xc00234a9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 44 1f 02 c0       	mov    eax,0xc0021f44
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 b3 34 02 c0       	push   0xc00234b3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 78 1c 02 c0       	mov    eax,0xc0021c78
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 bc 34 02 c0       	push   0xc00234bc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 44 20 02 c0       	mov    eax,0xc0022044
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 c6 34 02 c0       	push   0xc00234c6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 c4 1d 02 c0       	mov    eax,0xc0021dc4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 cf 34 02 c0       	push   0xc00234cf
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ac 74 02 c0       	mov    eax,0xc00274ac
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 dc 34 02 c0       	push   0xc00234dc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ad 74 02 c0       	mov    eax,0xc00274ad
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 cf 57 00 00       	call   c000e214 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 e9 34 02 c0       	push   0xc00234e9
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 00 35 02 c0 	mov    DWORD PTR [esp],0xc0023500
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0008aa2:	68 19 35 02 c0       	push   0xc0023519
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 61 f4 00 00       	call   c0017f10 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 54 f6 00 00       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 5c 8b 01 c0       	push   0xc0018b5c
c0008acd:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0008ad3:	e8 40 f6 00 00       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 48 89 02 c0       	mov    ds:0xc0028948,eax
c0008ae0:	68 c0 36 02 c0       	push   0xc00236c0
c0008ae5:	c6 05 ad 74 02 c0 01 	mov    BYTE PTR ds:0xc00274ad,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 41 04 01 00       	call   c0018f37 <Vm::initialise8086()>
c0008af6:	e8 df 44 00 00       	call   c000cfda <Fs::initVFS()>
c0008afb:	c7 04 24 26 35 02 c0 	mov    DWORD PTR [esp],0xc0023526
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 c0 36 02 c0       	push   0xc00236c0
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 4e dc 00 00       	call   c001677e <Sys::loadSyscalls()>
c0008b30:	e8 25 bb 00 00       	call   c001465a <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 40 35 02 c0       	push   0xc0023540
c0008b3f:	68 49 35 02 c0       	push   0xc0023549
c0008b44:	e8 f8 c9 00 00       	call   c0015541 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 7b 4f 00 00       	call   c000dacc <User::loadClockSettings(int)>
c0008b51:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 66 56 00 00       	call   c000e1d4 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 51 35 02 c0 	mov    DWORD PTR [esp],0xc0023551
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 43 b6 00 00       	call   c00141c2 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 6b 35 02 c0 	mov    DWORD PTR [esp],0xc002356b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 7c 35 02 c0       	push   0xc002357c
c0008b9a:	e8 af ed 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 d7 ef 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 77 f9 00 00       	call   c001852c <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 98 35 02 c0       	push   0xc0023598
c0008bc9:	50                   	push   eax
c0008bca:	e8 bf 56 00 00       	call   c000e28e <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 94 37 02 c0       	mov    edx,0xc0023794
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 c1 74 02 c0 04 	test   BYTE PTR ds:0xc00274c1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 a3 8e 01 00       	call   c0021c06 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 c8 a2 00 00       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 a1 a2 00 00       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 7f a2 00 00       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 5d a2 00 00       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 c0 74 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00274c0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 6b a1 00 00       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 46 a1 00 00       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 0d 8d 01 00       	call   c0021bc0 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 ca 8c 01 00       	call   c0021ba0 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 62 a1 00 00       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 a1 35 02 c0       	push   0xc00235a1
c0008f46:	e8 18 b8 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 a7 35 02 c0       	push   0xc00235a7
c0008f7e:	e8 e0 b7 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 04 37 02 c0       	push   0xc0023704
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 c0 74 02 c0 04 	test   BYTE PTR ds:0xc00274c0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 80 68 02 c0 	sete   BYTE PTR ds:0xc0026880
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 ad 35 02 c0       	push   0xc00235ad
c0008ff3:	e8 4b 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 c3 35 02 c0       	push   0xc00235c3
c0009004:	e8 3a 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 d7 35 02 c0       	push   0xc00235d7
c0009012:	e8 2c 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 ea 35 02 c0       	push   0xc00235ea
c0009023:	e8 1b 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 01 36 02 c0       	push   0xc0023601
c0009031:	e8 0d 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 17 36 02 c0 	mov    DWORD PTR [esp],0xc0023617
c000903d:	e8 01 3c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 29 36 02 c0 	mov    DWORD PTR [esp],0xc0023629
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 f4 8e 00 00       	call   c0011f58 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 43 36 02 c0 	mov    DWORD PTR [esp],0xc0023643
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 06 50 00 00       	call   c000e08a <Device::addChild(Device*)>
c0009084:	c7 04 24 28 37 02 c0 	mov    DWORD PTR [esp],0xc0023728
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 48 37 02 c0 	mov    DWORD PTR [esp],0xc0023748
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 5d 36 02 c0 	mov    DWORD PTR [esp],0xc002365d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 51 35 02 c0 	mov    DWORD PTR [esp],0xc0023551
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 42 a0 00 00       	call   c001311e <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 9f 4f 00 00       	call   c000e08a <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 68 37 02 c0       	push   0xc0023768
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 15 55 00 00       	call   c000e626 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 62 4f 00 00       	call   c000e08a <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 6e 36 02 c0       	push   0xc002366e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 d6 f0 00 00       	call   c001822c <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 89 36 02 c0       	push   0xc0023689
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 9e 3a 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 9a 36 02 c0       	push   0xc002369a
c00091c2:	e8 9c b5 00 00       	call   c0014763 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 a7 36 02 c0       	push   0xc00236a7
c00091d7:	e8 87 b5 00 00       	call   c0014763 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 b1 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc00236b1
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 70 b5 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 b2 74 02 c0       	mov    ds:0xc00274b2,eax
c00092af:	66 89 15 b0 74 02 c0 	mov    WORD PTR ds:0xc00274b0,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00093c6:	48                   	dec    eax
c00093c7:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 a9 8d 01 00       	call   c00221c6 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 a0 8d 01 00       	call   c00221c6 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 b8 74 02 c0 ff 07 	mov    WORD PTR ds:0xc00274b8,0x7ff
c0009519:	a3 ba 74 02 c0       	mov    ds:0xc00274ba,eax
c000951e:	0f 01 1d b8 74 02 c0 	lidtd  ds:0xc00274b8
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c0009810:	e8 b1 28 00 00       	call   c000c0c6 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 2d 1a 00 00       	call   c000b260 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 62 1a 00 00       	call   c000b2a4 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 b8 37 02 c0       	push   0xc00237b8
c000989d:	e8 a1 33 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 14 67 02 c0       	mov    eax,ds:0xc0026714
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 d0 75 02 c0    	mov    esi,DWORD PTR ds:0xc00275d0
c00098cc:	8b 3d 14 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026714
c00098d2:	e8 32 07 00 00       	call   c000a009 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 e0 26 00 00       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 14 67 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026714,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 14 67 02 c0       	mov    eax,ds:0xc0026714
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 e4 37 02 c0       	push   0xc00237e4
c0009918:	e8 26 33 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 d6 37 02 c0       	push   0xc00237d6
c0009937:	e8 27 ae 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 db 37 02 c0       	push   0xc00237db
c000994d:	e8 11 ae 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000996d:	48                   	dec    eax
c000996e:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c000998b:	e8 36 27 00 00       	call   c000c0c6 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c00099a1:	e8 ca 23 00 00       	call   c000bd70 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	56                   	push   esi
c0009a8b:	53                   	push   ebx
c0009a8c:	83 ec 20             	sub    esp,0x20
c0009a8f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009a94:	a3 c0 74 02 c0       	mov    ds:0xc00274c0,eax
c0009a99:	f6 c4 08             	test   ah,0x8
c0009a9c:	0f 85 16 03 00 00    	jne    c0009db8 <kernel_main+0x32f>
c0009aa2:	31 f6                	xor    esi,esi
c0009aa4:	bf f9 03 00 00       	mov    edi,0x3f9
c0009aa9:	89 f0                	mov    eax,esi
c0009aab:	89 fa                	mov    edx,edi
c0009aad:	ee                   	out    dx,al
c0009aae:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ab3:	b0 80                	mov    al,0x80
c0009ab5:	89 da                	mov    edx,ebx
c0009ab7:	ee                   	out    dx,al
c0009ab8:	b1 03                	mov    cl,0x3
c0009aba:	ba f8 03 00 00       	mov    edx,0x3f8
c0009abf:	88 c8                	mov    al,cl
c0009ac1:	ee                   	out    dx,al
c0009ac2:	89 f0                	mov    eax,esi
c0009ac4:	89 fa                	mov    edx,edi
c0009ac6:	ee                   	out    dx,al
c0009ac7:	88 c8                	mov    al,cl
c0009ac9:	89 da                	mov    edx,ebx
c0009acb:	ee                   	out    dx,al
c0009acc:	b0 c7                	mov    al,0xc7
c0009ace:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ad3:	ee                   	out    dx,al
c0009ad4:	b0 0b                	mov    al,0xb
c0009ad6:	ba fc 03 00 00       	mov    edx,0x3fc
c0009adb:	ee                   	out    dx,al
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	68 14 38 02 c0       	push   0xc0023814
c0009ae4:	e8 5a 31 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009ae9:	83 c4 10             	add    esp,0x10
c0009aec:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009af3:	0f 85 94 02 00 00    	jne    c0009d8d <kernel_main+0x304>
c0009af9:	e8 60 0c 00 00       	call   c000a75e <installVgaTextImplementation()>
c0009afe:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009b05:	0f 85 48 02 00 00    	jne    c0009d53 <kernel_main+0x2ca>
c0009b0b:	0f b6 05 20 67 02 c0 	movzx  eax,BYTE PTR ds:0xc0026720
c0009b12:	84 c0                	test   al,al
c0009b14:	74 79                	je     c0009b8f <kernel_main+0x106>
c0009b16:	31 db                	xor    ebx,ebx
c0009b18:	bf 0a 00 00 00       	mov    edi,0xa
c0009b1d:	be 05 00 00 00       	mov    esi,0x5
c0009b22:	31 c9                	xor    ecx,ecx
c0009b24:	eb 2a                	jmp    c0009b50 <kernel_main+0xc7>
c0009b26:	3c 0d                	cmp    al,0xd
c0009b28:	74 1a                	je     c0009b44 <kernel_main+0xbb>
c0009b2a:	3c 0a                	cmp    al,0xa
c0009b2c:	74 40                	je     c0009b6e <kernel_main+0xe5>
c0009b2e:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b31:	80 cc 0e             	or     ah,0xe
c0009b34:	c1 e2 04             	shl    edx,0x4
c0009b37:	01 ca                	add    edx,ecx
c0009b39:	41                   	inc    ecx
c0009b3a:	01 fa                	add    edx,edi
c0009b3c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b44:	43                   	inc    ebx
c0009b45:	0f b6 83 20 67 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd98e0]
c0009b4c:	84 c0                	test   al,al
c0009b4e:	74 32                	je     c0009b82 <kernel_main+0xf9>
c0009b50:	80 b9 56 67 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd98aa],0xdb
c0009b57:	75 cd                	jne    c0009b26 <kernel_main+0x9d>
c0009b59:	0f b6 91 55 67 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd98ab]
c0009b60:	83 e2 fe             	and    edx,0xfffffffe
c0009b63:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b69:	75 bb                	jne    c0009b26 <kernel_main+0x9d>
c0009b6b:	47                   	inc    edi
c0009b6c:	eb b8                	jmp    c0009b26 <kernel_main+0x9d>
c0009b6e:	43                   	inc    ebx
c0009b6f:	46                   	inc    esi
c0009b70:	31 c9                	xor    ecx,ecx
c0009b72:	0f b6 83 20 67 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd98e0]
c0009b79:	bf 0a 00 00 00       	mov    edi,0xa
c0009b7e:	84 c0                	test   al,al
c0009b80:	75 ce                	jne    c0009b50 <kernel_main+0xc7>
c0009b82:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009b89:	0f 85 bf 00 00 00    	jne    c0009c4e <kernel_main+0x1c5>
c0009b8f:	83 ec 0c             	sub    esp,0xc
c0009b92:	68 b0 38 02 c0       	push   0xc00238b0
c0009b97:	e8 81 fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b9c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009ba1:	05 ff 0f 00 00       	add    eax,0xfff
c0009ba6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bae:	e8 d5 05 00 00       	call   c000a188 <Phys::physicalMemorySetup(unsigned int)>
c0009bb3:	83 c4 10             	add    esp,0x10
c0009bb6:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009bbd:	0f 85 65 01 00 00    	jne    c0009d28 <kernel_main+0x29f>
c0009bc3:	e8 14 1f 00 00       	call   c000badc <Virt::virtualMemorySetup()>
c0009bc8:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009bcf:	0f 85 28 01 00 00    	jne    c0009cfd <kernel_main+0x274>
c0009bd5:	83 ec 0c             	sub    esp,0xc
c0009bd8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009bdc:	56                   	push   esi
c0009bdd:	e8 b6 1f 00 00       	call   c000bb98 <VAS::VAS()>
c0009be2:	83 c4 10             	add    esp,0x10
c0009be5:	89 35 d0 75 02 c0    	mov    DWORD PTR ds:0xc00275d0,esi
c0009beb:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009bf2:	0f 85 da 00 00 00    	jne    c0009cd2 <kernel_main+0x249>
c0009bf8:	e8 23 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009bfd:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009c04:	0f 85 9d 00 00 00    	jne    c0009ca7 <kernel_main+0x21e>
c0009c0a:	83 ec 0c             	sub    esp,0xc
c0009c0d:	68 ec 01 00 00       	push   0x1ec
c0009c12:	e8 ac fd ff ff       	call   c00099c3 <malloc>
c0009c17:	89 c3                	mov    ebx,eax
c0009c19:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c1c:	e8 99 ef ff ff       	call   c0008bba <Computer::Computer()>
c0009c21:	83 c4 10             	add    esp,0x10
c0009c24:	89 1d a8 74 02 c0    	mov    DWORD PTR ds:0xc00274a8,ebx
c0009c2a:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c0009c31:	75 46                	jne    c0009c79 <kernel_main+0x1f0>
c0009c33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c35:	6a 00                	push   0x0
c0009c37:	6a 00                	push   0x0
c0009c39:	6a 00                	push   0x0
c0009c3b:	53                   	push   ebx
c0009c3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c42:	e8 01 22 00 00       	call   c000be48 <VAS::~VAS()>
c0009c47:	83 c4 30             	add    esp,0x30
c0009c4a:	5b                   	pop    ebx
c0009c4b:	5e                   	pop    esi
c0009c4c:	5f                   	pop    edi
c0009c4d:	c3                   	ret    
c0009c4e:	83 ec 0c             	sub    esp,0xc
c0009c51:	68 5f 38 02 c0       	push   0xc002385f
c0009c56:	e8 c2 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c5b:	83 c4 10             	add    esp,0x10
c0009c5e:	eb 04                	jmp    c0009c64 <kernel_main+0x1db>
c0009c60:	3c 1c                	cmp    al,0x1c
c0009c62:	74 06                	je     c0009c6a <kernel_main+0x1e1>
c0009c64:	e4 60                	in     al,0x60
c0009c66:	3c 5a                	cmp    al,0x5a
c0009c68:	75 f6                	jne    c0009c60 <kernel_main+0x1d7>
c0009c6a:	e4 60                	in     al,0x60
c0009c6c:	3c 5a                	cmp    al,0x5a
c0009c6e:	74 fa                	je     c0009c6a <kernel_main+0x1e1>
c0009c70:	3c 1c                	cmp    al,0x1c
c0009c72:	74 f6                	je     c0009c6a <kernel_main+0x1e1>
c0009c74:	e9 16 ff ff ff       	jmp    c0009b8f <kernel_main+0x106>
c0009c79:	83 ec 0c             	sub    esp,0xc
c0009c7c:	68 9e 38 02 c0       	push   0xc002389e
c0009c81:	e8 97 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c86:	83 c4 10             	add    esp,0x10
c0009c89:	eb 04                	jmp    c0009c8f <kernel_main+0x206>
c0009c8b:	3c 1c                	cmp    al,0x1c
c0009c8d:	74 06                	je     c0009c95 <kernel_main+0x20c>
c0009c8f:	e4 60                	in     al,0x60
c0009c91:	3c 5a                	cmp    al,0x5a
c0009c93:	75 f6                	jne    c0009c8b <kernel_main+0x202>
c0009c95:	e4 60                	in     al,0x60
c0009c97:	3c 5a                	cmp    al,0x5a
c0009c99:	74 fa                	je     c0009c95 <kernel_main+0x20c>
c0009c9b:	3c 1c                	cmp    al,0x1c
c0009c9d:	74 f6                	je     c0009c95 <kernel_main+0x20c>
c0009c9f:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c0009ca5:	eb 8c                	jmp    c0009c33 <kernel_main+0x1aa>
c0009ca7:	83 ec 0c             	sub    esp,0xc
c0009caa:	68 8b 38 02 c0       	push   0xc002388b
c0009caf:	e8 69 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	eb 04                	jmp    c0009cbd <kernel_main+0x234>
c0009cb9:	3c 1c                	cmp    al,0x1c
c0009cbb:	74 06                	je     c0009cc3 <kernel_main+0x23a>
c0009cbd:	e4 60                	in     al,0x60
c0009cbf:	3c 5a                	cmp    al,0x5a
c0009cc1:	75 f6                	jne    c0009cb9 <kernel_main+0x230>
c0009cc3:	e4 60                	in     al,0x60
c0009cc5:	3c 5a                	cmp    al,0x5a
c0009cc7:	74 fa                	je     c0009cc3 <kernel_main+0x23a>
c0009cc9:	3c 1c                	cmp    al,0x1c
c0009ccb:	74 f6                	je     c0009cc3 <kernel_main+0x23a>
c0009ccd:	e9 38 ff ff ff       	jmp    c0009c0a <kernel_main+0x181>
c0009cd2:	83 ec 0c             	sub    esp,0xc
c0009cd5:	68 81 38 02 c0       	push   0xc0023881
c0009cda:	e8 3e fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	eb 04                	jmp    c0009ce8 <kernel_main+0x25f>
c0009ce4:	3c 1c                	cmp    al,0x1c
c0009ce6:	74 06                	je     c0009cee <kernel_main+0x265>
c0009ce8:	e4 60                	in     al,0x60
c0009cea:	3c 5a                	cmp    al,0x5a
c0009cec:	75 f6                	jne    c0009ce4 <kernel_main+0x25b>
c0009cee:	e4 60                	in     al,0x60
c0009cf0:	3c 5a                	cmp    al,0x5a
c0009cf2:	74 fa                	je     c0009cee <kernel_main+0x265>
c0009cf4:	3c 1c                	cmp    al,0x1c
c0009cf6:	74 f6                	je     c0009cee <kernel_main+0x265>
c0009cf8:	e9 fb fe ff ff       	jmp    c0009bf8 <kernel_main+0x16f>
c0009cfd:	83 ec 0c             	sub    esp,0xc
c0009d00:	68 76 38 02 c0       	push   0xc0023876
c0009d05:	e8 13 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d0a:	83 c4 10             	add    esp,0x10
c0009d0d:	eb 04                	jmp    c0009d13 <kernel_main+0x28a>
c0009d0f:	3c 1c                	cmp    al,0x1c
c0009d11:	74 06                	je     c0009d19 <kernel_main+0x290>
c0009d13:	e4 60                	in     al,0x60
c0009d15:	3c 5a                	cmp    al,0x5a
c0009d17:	75 f6                	jne    c0009d0f <kernel_main+0x286>
c0009d19:	e4 60                	in     al,0x60
c0009d1b:	3c 5a                	cmp    al,0x5a
c0009d1d:	74 fa                	je     c0009d19 <kernel_main+0x290>
c0009d1f:	3c 1c                	cmp    al,0x1c
c0009d21:	74 f6                	je     c0009d19 <kernel_main+0x290>
c0009d23:	e9 ad fe ff ff       	jmp    c0009bd5 <kernel_main+0x14c>
c0009d28:	83 ec 0c             	sub    esp,0xc
c0009d2b:	68 6b 38 02 c0       	push   0xc002386b
c0009d30:	e8 e8 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d35:	83 c4 10             	add    esp,0x10
c0009d38:	eb 04                	jmp    c0009d3e <kernel_main+0x2b5>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 06                	je     c0009d44 <kernel_main+0x2bb>
c0009d3e:	e4 60                	in     al,0x60
c0009d40:	3c 5a                	cmp    al,0x5a
c0009d42:	75 f6                	jne    c0009d3a <kernel_main+0x2b1>
c0009d44:	e4 60                	in     al,0x60
c0009d46:	3c 5a                	cmp    al,0x5a
c0009d48:	74 fa                	je     c0009d44 <kernel_main+0x2bb>
c0009d4a:	3c 1c                	cmp    al,0x1c
c0009d4c:	74 f6                	je     c0009d44 <kernel_main+0x2bb>
c0009d4e:	e9 70 fe ff ff       	jmp    c0009bc3 <kernel_main+0x13a>
c0009d53:	83 ec 0c             	sub    esp,0xc
c0009d56:	68 4d 38 02 c0       	push   0xc002384d
c0009d5b:	e8 bd fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	eb 04                	jmp    c0009d69 <kernel_main+0x2e0>
c0009d65:	3c 1c                	cmp    al,0x1c
c0009d67:	74 06                	je     c0009d6f <kernel_main+0x2e6>
c0009d69:	e4 60                	in     al,0x60
c0009d6b:	3c 5a                	cmp    al,0x5a
c0009d6d:	75 f6                	jne    c0009d65 <kernel_main+0x2dc>
c0009d6f:	e4 60                	in     al,0x60
c0009d71:	3c 5a                	cmp    al,0x5a
c0009d73:	74 fa                	je     c0009d6f <kernel_main+0x2e6>
c0009d75:	3c 1c                	cmp    al,0x1c
c0009d77:	74 f6                	je     c0009d6f <kernel_main+0x2e6>
c0009d79:	0f b6 05 20 67 02 c0 	movzx  eax,BYTE PTR ds:0xc0026720
c0009d80:	84 c0                	test   al,al
c0009d82:	0f 85 8e fd ff ff    	jne    c0009b16 <kernel_main+0x8d>
c0009d88:	e9 f5 fd ff ff       	jmp    c0009b82 <kernel_main+0xf9>
c0009d8d:	83 ec 0c             	sub    esp,0xc
c0009d90:	68 3e 38 02 c0       	push   0xc002383e
c0009d95:	e8 83 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d9a:	83 c4 10             	add    esp,0x10
c0009d9d:	eb 04                	jmp    c0009da3 <kernel_main+0x31a>
c0009d9f:	3c 1c                	cmp    al,0x1c
c0009da1:	74 06                	je     c0009da9 <kernel_main+0x320>
c0009da3:	e4 60                	in     al,0x60
c0009da5:	3c 5a                	cmp    al,0x5a
c0009da7:	75 f6                	jne    c0009d9f <kernel_main+0x316>
c0009da9:	e4 60                	in     al,0x60
c0009dab:	3c 5a                	cmp    al,0x5a
c0009dad:	74 fa                	je     c0009da9 <kernel_main+0x320>
c0009daf:	3c 1c                	cmp    al,0x1c
c0009db1:	74 f6                	je     c0009da9 <kernel_main+0x320>
c0009db3:	e9 41 fd ff ff       	jmp    c0009af9 <kernel_main+0x70>
c0009db8:	83 ec 0c             	sub    esp,0xc
c0009dbb:	68 2b 38 02 c0       	push   0xc002382b
c0009dc0:	e8 58 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009dc5:	83 c4 10             	add    esp,0x10
c0009dc8:	eb 04                	jmp    c0009dce <kernel_main+0x345>
c0009dca:	3c 1c                	cmp    al,0x1c
c0009dcc:	74 06                	je     c0009dd4 <kernel_main+0x34b>
c0009dce:	e4 60                	in     al,0x60
c0009dd0:	3c 5a                	cmp    al,0x5a
c0009dd2:	75 f6                	jne    c0009dca <kernel_main+0x341>
c0009dd4:	e4 60                	in     al,0x60
c0009dd6:	3c 5a                	cmp    al,0x5a
c0009dd8:	74 fa                	je     c0009dd4 <kernel_main+0x34b>
c0009dda:	3c 1c                	cmp    al,0x1c
c0009ddc:	74 f6                	je     c0009dd4 <kernel_main+0x34b>
c0009dde:	e9 bf fc ff ff       	jmp    c0009aa2 <kernel_main+0x19>

c0009de3 <Phys::allocateDMA(unsigned long)>:
c0009de3:	55                   	push   ebp
c0009de4:	31 ed                	xor    ebp,ebp
c0009de6:	57                   	push   edi
c0009de7:	56                   	push   esi
c0009de8:	53                   	push   ebx
c0009de9:	31 db                	xor    ebx,ebx
c0009deb:	83 ec 28             	sub    esp,0x28
c0009dee:	68 cf 38 02 c0       	push   0xc00238cf
c0009df3:	e8 4b 2e 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009df8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009dfc:	83 c4 10             	add    esp,0x10
c0009dff:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009e05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009e0d:	c1 ef 0c             	shr    edi,0xc
c0009e10:	31 c0                	xor    eax,eax
c0009e12:	eb 19                	jmp    c0009e2d <Phys::allocateDMA(unsigned long)+0x4a>
c0009e14:	85 c0                	test   eax,eax
c0009e16:	75 06                	jne    c0009e1e <Phys::allocateDMA(unsigned long)+0x3b>
c0009e18:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e1c:	89 dd                	mov    ebp,ebx
c0009e1e:	8d 70 01             	lea    esi,[eax+0x1]
c0009e21:	39 f7                	cmp    edi,esi
c0009e23:	74 3f                	je     c0009e64 <Phys::allocateDMA(unsigned long)+0x81>
c0009e25:	89 f0                	mov    eax,esi
c0009e27:	43                   	inc    ebx
c0009e28:	83 fb 0f             	cmp    ebx,0xf
c0009e2b:	7f 11                	jg     c0009e3e <Phys::allocateDMA(unsigned long)+0x5b>
c0009e2d:	80 bb dc 74 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8b24],0x0
c0009e34:	74 de                	je     c0009e14 <Phys::allocateDMA(unsigned long)+0x31>
c0009e36:	31 c0                	xor    eax,eax
c0009e38:	43                   	inc    ebx
c0009e39:	83 fb 0f             	cmp    ebx,0xf
c0009e3c:	7e ef                	jle    c0009e2d <Phys::allocateDMA(unsigned long)+0x4a>
c0009e3e:	83 ec 0c             	sub    esp,0xc
c0009e41:	68 03 39 02 c0       	push   0xc0023903
c0009e46:	e8 f8 2d 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009e4b:	c7 04 24 c0 39 02 c0 	mov    DWORD PTR [esp],0xc00239c0
c0009e52:	e8 0c a9 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	31 c0                	xor    eax,eax
c0009e5c:	83 c4 1c             	add    esp,0x1c
c0009e5f:	5b                   	pop    ebx
c0009e60:	5e                   	pop    esi
c0009e61:	5f                   	pop    edi
c0009e62:	5d                   	pop    ebp
c0009e63:	c3                   	ret    
c0009e64:	89 e9                	mov    ecx,ebp
c0009e66:	c1 f9 04             	sar    ecx,0x4
c0009e69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e6d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009e71:	89 ca                	mov    edx,ecx
c0009e73:	4a                   	dec    edx
c0009e74:	79 03                	jns    c0009e79 <Phys::allocateDMA(unsigned long)+0x96>
c0009e76:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009e79:	c1 fa 04             	sar    edx,0x4
c0009e7c:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009e80:	74 08                	je     c0009e8a <Phys::allocateDMA(unsigned long)+0xa7>
c0009e82:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e86:	31 c0                	xor    eax,eax
c0009e88:	eb ae                	jmp    c0009e38 <Phys::allocateDMA(unsigned long)+0x55>
c0009e8a:	85 f6                	test   esi,esi
c0009e8c:	74 15                	je     c0009ea3 <Phys::allocateDMA(unsigned long)+0xc0>
c0009e8e:	8d 95 dc 74 02 c0    	lea    edx,[ebp-0x3ffd8b24]
c0009e94:	8d 84 05 dd 74 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8b23]
c0009e9b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009e9e:	42                   	inc    edx
c0009e9f:	39 d0                	cmp    eax,edx
c0009ea1:	75 f8                	jne    c0009e9b <Phys::allocateDMA(unsigned long)+0xb8>
c0009ea3:	83 ec 0c             	sub    esp,0xc
c0009ea6:	01 3d d4 74 02 c0    	add    DWORD PTR ds:0xc00274d4,edi
c0009eac:	68 e8 38 02 c0       	push   0xc00238e8
c0009eb1:	e8 8d 2d 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009eb6:	83 c4 10             	add    esp,0x10
c0009eb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ebd:	85 c0                	test   eax,eax
c0009ebf:	74 23                	je     c0009ee4 <Phys::allocateDMA(unsigned long)+0x101>
c0009ec1:	83 ec 0c             	sub    esp,0xc
c0009ec4:	68 ff 38 02 c0       	push   0xc00238ff
c0009ec9:	e8 75 2d 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009ece:	c7 04 24 c0 39 02 c0 	mov    DWORD PTR [esp],0xc00239c0
c0009ed5:	e8 89 a8 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0009eda:	83 c4 10             	add    esp,0x10
c0009edd:	89 f0                	mov    eax,esi
c0009edf:	e9 43 ff ff ff       	jmp    c0009e27 <Phys::allocateDMA(unsigned long)+0x44>
c0009ee4:	c1 e5 0c             	shl    ebp,0xc
c0009ee7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009eed:	e9 6a ff ff ff       	jmp    c0009e5c <Phys::allocateDMA(unsigned long)+0x79>

c0009ef2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ef2:	83 ec 18             	sub    esp,0x18
c0009ef5:	68 07 39 02 c0       	push   0xc0023907
c0009efa:	e8 44 2d 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009eff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009f03:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f0d:	c1 ea 0c             	shr    edx,0xc
c0009f10:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009f15:	29 15 d4 74 02 c0    	sub    DWORD PTR ds:0xc00274d4,edx
c0009f1b:	c1 e8 0c             	shr    eax,0xc
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	85 d2                	test   edx,edx
c0009f23:	74 0f                	je     c0009f34 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009f25:	05 dc 74 02 c0       	add    eax,0xc00274dc
c0009f2a:	01 c2                	add    edx,eax
c0009f2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009f2f:	40                   	inc    eax
c0009f30:	39 d0                	cmp    eax,edx
c0009f32:	75 f8                	jne    c0009f2c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009f34:	83 c4 0c             	add    esp,0xc
c0009f37:	c3                   	ret    

c0009f38 <Phys::setPageState(unsigned long, bool)>:
c0009f38:	56                   	push   esi
c0009f39:	ba 01 00 00 00       	mov    edx,0x1
c0009f3e:	53                   	push   ebx
c0009f3f:	8b 35 64 68 02 c0    	mov    esi,DWORD PTR ds:0xc0026864
c0009f45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009f4d:	89 c8                	mov    eax,ecx
c0009f4f:	83 e1 07             	and    ecx,0x7
c0009f52:	c1 e8 03             	shr    eax,0x3
c0009f55:	d3 e3                	shl    ebx,cl
c0009f57:	01 c6                	add    esi,eax
c0009f59:	d3 e2                	shl    edx,cl
c0009f5b:	f7 d2                	not    edx
c0009f5d:	20 16                	and    BYTE PTR [esi],dl
c0009f5f:	03 05 64 68 02 c0    	add    eax,DWORD PTR ds:0xc0026864
c0009f65:	08 18                	or     BYTE PTR [eax],bl
c0009f67:	5b                   	pop    ebx
c0009f68:	5e                   	pop    esi
c0009f69:	c3                   	ret    

c0009f6a <Phys::getPageState(unsigned long)>:
c0009f6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009f6e:	8b 15 64 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026864
c0009f74:	89 c8                	mov    eax,ecx
c0009f76:	83 e1 07             	and    ecx,0x7
c0009f79:	c1 e8 03             	shr    eax,0x3
c0009f7c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009f80:	d3 f8                	sar    eax,cl
c0009f82:	83 e0 01             	and    eax,0x1
c0009f85:	c3                   	ret    

c0009f86 <Phys::freePage(unsigned long)>:
c0009f86:	53                   	push   ebx
c0009f87:	83 ec 10             	sub    esp,0x10
c0009f8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009f8e:	53                   	push   ebx
c0009f8f:	68 1d 39 02 c0       	push   0xc002391d
c0009f94:	e8 aa 2c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009f99:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fa7:	76 3d                	jbe    c0009fe6 <Phys::freePage(unsigned long)+0x60>
c0009fa9:	83 ec 0c             	sub    esp,0xc
c0009fac:	c1 eb 0c             	shr    ebx,0xc
c0009faf:	53                   	push   ebx
c0009fb0:	e8 b5 ff ff ff       	call   c0009f6a <Phys::getPageState(unsigned long)>
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	84 c0                	test   al,al
c0009fba:	74 19                	je     c0009fd5 <Phys::freePage(unsigned long)+0x4f>
c0009fbc:	83 ec 08             	sub    esp,0x8
c0009fbf:	ff 0d d4 74 02 c0    	dec    DWORD PTR ds:0xc00274d4
c0009fc5:	6a 00                	push   0x0
c0009fc7:	53                   	push   ebx
c0009fc8:	e8 6b ff ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c0009fcd:	83 c4 10             	add    esp,0x10
c0009fd0:	83 c4 08             	add    esp,0x8
c0009fd3:	5b                   	pop    ebx
c0009fd4:	c3                   	ret    
c0009fd5:	c7 44 24 10 47 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023947
c0009fdd:	83 c4 08             	add    esp,0x8
c0009fe0:	5b                   	pop    ebx
c0009fe1:	e9 7d a7 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c0009fe6:	83 ec 08             	sub    esp,0x8
c0009fe9:	53                   	push   ebx
c0009fea:	68 30 39 02 c0       	push   0xc0023930
c0009fef:	e8 4f 2c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0009ff4:	58                   	pop    eax
c0009ff5:	5a                   	pop    edx
c0009ff6:	68 00 10 00 00       	push   0x1000
c0009ffb:	53                   	push   ebx
c0009ffc:	e8 f1 fe ff ff       	call   c0009ef2 <Phys::freeDMA(unsigned long, unsigned long)>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	83 c4 08             	add    esp,0x8
c000a007:	5b                   	pop    ebx
c000a008:	c3                   	ret    

c000a009 <Phys::allocatePage()>:
c000a009:	56                   	push   esi
c000a00a:	53                   	push   ebx
c000a00b:	83 ec 14             	sub    esp,0x14
c000a00e:	8b 35 c8 74 02 c0    	mov    esi,DWORD PTR ds:0xc00274c8
c000a014:	89 f3                	mov    ebx,esi
c000a016:	eb 0a                	jmp    c000a022 <Phys::allocatePage()+0x19>
c000a018:	89 1d c8 74 02 c0    	mov    DWORD PTR ds:0xc00274c8,ebx
c000a01e:	39 de                	cmp    esi,ebx
c000a020:	74 24                	je     c000a046 <Phys::allocatePage()+0x3d>
c000a022:	53                   	push   ebx
c000a023:	e8 42 ff ff ff       	call   c0009f6a <Phys::getPageState(unsigned long)>
c000a028:	5a                   	pop    edx
c000a029:	84 c0                	test   al,al
c000a02b:	74 69                	je     c000a096 <Phys::allocatePage()+0x8d>
c000a02d:	43                   	inc    ebx
c000a02e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a034:	75 e2                	jne    c000a018 <Phys::allocatePage()+0xf>
c000a036:	31 db                	xor    ebx,ebx
c000a038:	c7 05 c8 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00274c8,0x0
c000a042:	39 de                	cmp    esi,ebx
c000a044:	75 dc                	jne    c000a022 <Phys::allocatePage()+0x19>
c000a046:	83 ec 0c             	sub    esp,0xc
c000a049:	80 35 ec 74 02 c0 01 	xor    BYTE PTR ds:0xc00274ec,0x1
c000a050:	68 e8 39 02 c0       	push   0xc00239e8
c000a055:	e8 e9 2b 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a05a:	58                   	pop    eax
c000a05b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a063:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a069:	e8 64 28 00 00       	call   c000c8d2 <VAS::scanForEviction()>
c000a06e:	83 c4 10             	add    esp,0x10
c000a071:	85 c0                	test   eax,eax
c000a073:	75 62                	jne    c000a0d7 <Phys::allocatePage()+0xce>
c000a075:	83 ec 0c             	sub    esp,0xc
c000a078:	68 0c 3a 02 c0       	push   0xc0023a0c
c000a07d:	e8 e1 a6 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000a082:	83 c4 10             	add    esp,0x10
c000a085:	8b 1d c8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274c8
c000a08b:	53                   	push   ebx
c000a08c:	e8 d9 fe ff ff       	call   c0009f6a <Phys::getPageState(unsigned long)>
c000a091:	5a                   	pop    edx
c000a092:	84 c0                	test   al,al
c000a094:	75 97                	jne    c000a02d <Phys::allocatePage()+0x24>
c000a096:	6a 01                	push   0x1
c000a098:	53                   	push   ebx
c000a099:	e8 9a fe ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a09e:	5a                   	pop    edx
c000a09f:	a1 d4 74 02 c0       	mov    eax,ds:0xc00274d4
c000a0a4:	59                   	pop    ecx
c000a0a5:	40                   	inc    eax
c000a0a6:	8b 15 c8 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274c8
c000a0ac:	a3 d4 74 02 c0       	mov    ds:0xc00274d4,eax
c000a0b1:	c1 e2 0c             	shl    edx,0xc
c000a0b4:	52                   	push   edx
c000a0b5:	ff 35 d8 74 02 c0    	push   DWORD PTR ds:0xc00274d8
c000a0bb:	50                   	push   eax
c000a0bc:	68 5d 39 02 c0       	push   0xc002395d
c000a0c1:	e8 7d 2b 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a0c6:	a1 c8 74 02 c0       	mov    eax,ds:0xc00274c8
c000a0cb:	83 c4 10             	add    esp,0x10
c000a0ce:	c1 e0 0c             	shl    eax,0xc
c000a0d1:	83 c4 14             	add    esp,0x14
c000a0d4:	5b                   	pop    ebx
c000a0d5:	5e                   	pop    esi
c000a0d6:	c3                   	ret    
c000a0d7:	83 ec 08             	sub    esp,0x8
c000a0da:	89 c2                	mov    edx,eax
c000a0dc:	6a 01                	push   0x1
c000a0de:	c1 ea 0c             	shr    edx,0xc
c000a0e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0e5:	52                   	push   edx
c000a0e6:	e8 4d fe ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a0eb:	83 c4 10             	add    esp,0x10
c000a0ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0f2:	eb dd                	jmp    c000a0d1 <Phys::allocatePage()+0xc8>

c000a0f4 <Phys::allocateContiguousPages(int)>:
c000a0f4:	57                   	push   edi
c000a0f5:	56                   	push   esi
c000a0f6:	53                   	push   ebx
c000a0f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0fb:	fa                   	cli    
c000a0fc:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c000a102:	31 db                	xor    ebx,ebx
c000a104:	85 db                	test   ebx,ebx
c000a106:	75 11                	jne    c000a119 <Phys::allocateContiguousPages(int)+0x25>
c000a108:	e8 fc fe ff ff       	call   c000a009 <Phys::allocatePage()>
c000a10d:	83 fe 01             	cmp    esi,0x1
c000a110:	89 c7                	mov    edi,eax
c000a112:	74 21                	je     c000a135 <Phys::allocateContiguousPages(int)+0x41>
c000a114:	bb 01 00 00 00       	mov    ebx,0x1
c000a119:	e8 eb fe ff ff       	call   c000a009 <Phys::allocatePage()>
c000a11e:	89 da                	mov    edx,ebx
c000a120:	c1 e2 0c             	shl    edx,0xc
c000a123:	01 fa                	add    edx,edi
c000a125:	39 c2                	cmp    edx,eax
c000a127:	74 20                	je     c000a149 <Phys::allocateContiguousPages(int)+0x55>
c000a129:	bb 01 00 00 00       	mov    ebx,0x1
c000a12e:	89 c7                	mov    edi,eax
c000a130:	83 fe 01             	cmp    esi,0x1
c000a133:	75 e4                	jne    c000a119 <Phys::allocateContiguousPages(int)+0x25>
c000a135:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000a13a:	48                   	dec    eax
c000a13b:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000a140:	75 01                	jne    c000a143 <Phys::allocateContiguousPages(int)+0x4f>
c000a142:	fb                   	sti    
c000a143:	89 f8                	mov    eax,edi
c000a145:	5b                   	pop    ebx
c000a146:	5e                   	pop    esi
c000a147:	5f                   	pop    edi
c000a148:	c3                   	ret    
c000a149:	43                   	inc    ebx
c000a14a:	39 f3                	cmp    ebx,esi
c000a14c:	75 b6                	jne    c000a104 <Phys::allocateContiguousPages(int)+0x10>
c000a14e:	eb e5                	jmp    c000a135 <Phys::allocateContiguousPages(int)+0x41>

c000a150 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a150:	56                   	push   esi
c000a151:	53                   	push   ebx
c000a152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a156:	39 1d cc 74 02 c0    	cmp    DWORD PTR ds:0xc00274cc,ebx
c000a15c:	73 06                	jae    c000a164 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a15e:	89 1d cc 74 02 c0    	mov    DWORD PTR ds:0xc00274cc,ebx
c000a164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a168:	c1 eb 0c             	shr    ebx,0xc
c000a16b:	c1 e8 0c             	shr    eax,0xc
c000a16e:	39 d8                	cmp    eax,ebx
c000a170:	73 13                	jae    c000a185 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a172:	6a 00                	push   0x0
c000a174:	8d 70 01             	lea    esi,[eax+0x1]
c000a177:	50                   	push   eax
c000a178:	e8 bb fd ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a17d:	5a                   	pop    edx
c000a17e:	89 f0                	mov    eax,esi
c000a180:	59                   	pop    ecx
c000a181:	39 f3                	cmp    ebx,esi
c000a183:	75 ed                	jne    c000a172 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a185:	5b                   	pop    ebx
c000a186:	5e                   	pop    esi
c000a187:	c3                   	ret    

c000a188 <Phys::physicalMemorySetup(unsigned int)>:
c000a188:	55                   	push   ebp
c000a189:	57                   	push   edi
c000a18a:	56                   	push   esi
c000a18b:	53                   	push   ebx
c000a18c:	31 db                	xor    ebx,ebx
c000a18e:	83 ec 40             	sub    esp,0x40
c000a191:	6a 10                	push   0x10
c000a193:	6a 00                	push   0x0
c000a195:	68 dc 74 02 c0       	push   0xc00274dc
c000a19a:	e8 e5 64 ff ff       	call   c0000684 <memset>
c000a19f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a1a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a1a8:	05 00 10 00 00       	add    eax,0x1000
c000a1ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a1b1:	5a                   	pop    edx
c000a1b2:	59                   	pop    ecx
c000a1b3:	50                   	push   eax
c000a1b4:	68 7b 39 02 c0       	push   0xc002397b
c000a1b9:	e8 85 2a 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a1be:	83 c4 10             	add    esp,0x10
c000a1c1:	83 ec 08             	sub    esp,0x8
c000a1c4:	6a 01                	push   0x1
c000a1c6:	53                   	push   ebx
c000a1c7:	43                   	inc    ebx
c000a1c8:	e8 6b fd ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a1d6:	75 e9                	jne    c000a1c1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a1d8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a1df:	66 85 c0             	test   ax,ax
c000a1e2:	0f 84 8e 01 00 00    	je     c000a376 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a1e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a1f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a1f8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a1fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a201:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a209:	eb 15                	jmp    c000a220 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a20b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a20f:	83 c3 18             	add    ebx,0x18
c000a212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a216:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a21a:	0f 84 66 01 00 00    	je     c000a386 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a220:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a223:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a226:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a229:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a22d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a231:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a233:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a236:	01 f0                	add    eax,esi
c000a238:	55                   	push   ebp
c000a239:	11 fa                	adc    edx,edi
c000a23b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a23f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a243:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a247:	56                   	push   esi
c000a248:	68 3c 3a 02 c0       	push   0xc0023a3c
c000a24d:	e8 f1 29 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	09 f8                	or     eax,edi
c000a25b:	0f 85 25 01 00 00    	jne    c000a386 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a261:	4d                   	dec    ebp
c000a262:	75 a7                	jne    c000a20b <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a264:	ba 00 00 08 00       	mov    edx,0x80000
c000a269:	89 c1                	mov    ecx,eax
c000a26b:	39 f2                	cmp    edx,esi
c000a26d:	19 f9                	sbb    ecx,edi
c000a26f:	0f 82 a7 00 00 00    	jb     c000a31c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a275:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a279:	89 c1                	mov    ecx,eax
c000a27b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a27f:	0f 83 97 00 00 00    	jae    c000a31c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a285:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a28a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a28e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a292:	39 fa                	cmp    edx,edi
c000a294:	19 e8                	sbb    eax,ebp
c000a296:	0f 82 a5 01 00 00    	jb     c000a441 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a29c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a2a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a2a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a2aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a2af:	83 d5 ff             	adc    ebp,0xffffffff
c000a2b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a2b6:	31 c0                	xor    eax,eax
c000a2b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a2bc:	39 fa                	cmp    edx,edi
c000a2be:	89 c1                	mov    ecx,eax
c000a2c0:	19 e9                	sbb    ecx,ebp
c000a2c2:	0f 83 43 ff ff ff    	jae    c000a20b <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a2c8:	be 00 00 08 00       	mov    esi,0x80000
c000a2cd:	57                   	push   edi
c000a2ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a2d2:	57                   	push   edi
c000a2d3:	56                   	push   esi
c000a2d4:	68 60 3a 02 c0       	push   0xc0023a60
c000a2d9:	e8 65 29 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a2de:	5d                   	pop    ebp
c000a2df:	58                   	pop    eax
c000a2e0:	57                   	push   edi
c000a2e1:	56                   	push   esi
c000a2e2:	e8 69 fe ff ff       	call   c000a150 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a2e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a2eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2ef:	83 c4 0c             	add    esp,0xc
c000a2f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a2f6:	03 05 d8 74 02 c0    	add    eax,DWORD PTR ds:0xc00274d8
c000a2fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a303:	a3 d8 74 02 c0       	mov    ds:0xc00274d8,eax
c000a308:	52                   	push   edx
c000a309:	50                   	push   eax
c000a30a:	68 a1 39 02 c0       	push   0xc00239a1
c000a30f:	e8 2f 29 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	e9 ef fe ff ff       	jmp    c000a20b <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a31c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a324:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a328:	39 ea                	cmp    edx,ebp
c000a32a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a32e:	0f 82 d7 fe ff ff    	jb     c000a20b <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a334:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a339:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a33d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a341:	0f 83 c4 fe ff ff    	jae    c000a20b <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a347:	39 ee                	cmp    esi,ebp
c000a349:	89 f8                	mov    eax,edi
c000a34b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a34f:	0f 83 78 ff ff ff    	jae    c000a2cd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a355:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a359:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a35d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a361:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a365:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	e9 57 ff ff ff       	jmp    c000a2cd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a376:	83 ec 0c             	sub    esp,0xc
c000a379:	68 93 39 02 c0       	push   0xc0023993
c000a37e:	e8 e0 a3 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000a383:	83 c4 10             	add    esp,0x10
c000a386:	83 ec 08             	sub    esp,0x8
c000a389:	6a 00                	push   0x0
c000a38b:	6a 05                	push   0x5
c000a38d:	e8 a6 fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a392:	58                   	pop    eax
c000a393:	5a                   	pop    edx
c000a394:	6a 00                	push   0x0
c000a396:	6a 06                	push   0x6
c000a398:	e8 9b fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a39d:	59                   	pop    ecx
c000a39e:	5b                   	pop    ebx
c000a39f:	bb 60 00 00 00       	mov    ebx,0x60
c000a3a4:	6a 00                	push   0x0
c000a3a6:	6a 07                	push   0x7
c000a3a8:	e8 8b fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a3ad:	83 05 d8 74 02 c0 03 	add    DWORD PTR ds:0xc00274d8,0x3
c000a3b4:	83 c4 10             	add    esp,0x10
c000a3b7:	83 ec 08             	sub    esp,0x8
c000a3ba:	6a 00                	push   0x0
c000a3bc:	53                   	push   ebx
c000a3bd:	43                   	inc    ebx
c000a3be:	e8 75 fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a3c3:	83 c4 10             	add    esp,0x10
c000a3c6:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a3cc:	75 e9                	jne    c000a3b7 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a3ce:	a1 d8 74 02 c0       	mov    eax,ds:0xc00274d8
c000a3d3:	bb 40 01 00 00       	mov    ebx,0x140
c000a3d8:	83 c0 20             	add    eax,0x20
c000a3db:	a3 d8 74 02 c0       	mov    ds:0xc00274d8,eax
c000a3e0:	eb 22                	jmp    c000a404 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a3e2:	83 ec 08             	sub    esp,0x8
c000a3e5:	6a 00                	push   0x0
c000a3e7:	53                   	push   ebx
c000a3e8:	43                   	inc    ebx
c000a3e9:	e8 4a fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a3ee:	a1 d8 74 02 c0       	mov    eax,ds:0xc00274d8
c000a3f3:	83 c4 10             	add    esp,0x10
c000a3f6:	40                   	inc    eax
c000a3f7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a3fd:	a3 d8 74 02 c0       	mov    ds:0xc00274d8,eax
c000a402:	74 07                	je     c000a40b <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a404:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a409:	7e d7                	jle    c000a3e2 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a40b:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a410:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a415:	7f 22                	jg     c000a439 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a417:	83 ec 08             	sub    esp,0x8
c000a41a:	6a 00                	push   0x0
c000a41c:	53                   	push   ebx
c000a41d:	43                   	inc    ebx
c000a41e:	e8 15 fb ff ff       	call   c0009f38 <Phys::setPageState(unsigned long, bool)>
c000a423:	a1 d8 74 02 c0       	mov    eax,ds:0xc00274d8
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	40                   	inc    eax
c000a42c:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a432:	a3 d8 74 02 c0       	mov    ds:0xc00274d8,eax
c000a437:	75 d7                	jne    c000a410 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a439:	83 c4 3c             	add    esp,0x3c
c000a43c:	5b                   	pop    ebx
c000a43d:	5e                   	pop    esi
c000a43e:	5f                   	pop    edi
c000a43f:	5d                   	pop    ebp
c000a440:	c3                   	ret    
c000a441:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a449:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a451:	e9 46 fe ff ff       	jmp    c000a29c <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a456 <Pipe::isAtty()>:
c000a456:	31 c0                	xor    eax,eax
c000a458:	c3                   	ret    
c000a459:	90                   	nop

c000a45a <Pipe::~Pipe()>:
c000a45a:	83 ec 0c             	sub    esp,0xc
c000a45d:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000a462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a466:	89 10                	mov    DWORD PTR [eax],edx
c000a468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a46c:	83 ec 0c             	sub    esp,0xc
c000a46f:	50                   	push   eax
c000a470:	e8 47 12 00 00       	call   c000b6bc <UnixFile::~UnixFile()>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	90                   	nop
c000a479:	83 c4 0c             	add    esp,0xc
c000a47c:	c3                   	ret    
c000a47d:	90                   	nop

c000a47e <Pipe::~Pipe()>:
c000a47e:	83 ec 0c             	sub    esp,0xc
c000a481:	83 ec 0c             	sub    esp,0xc
c000a484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a488:	e8 cd ff ff ff       	call   c000a45a <Pipe::~Pipe()>
c000a48d:	83 c4 10             	add    esp,0x10
c000a490:	83 ec 08             	sub    esp,0x8
c000a493:	6a 20                	push   0x20
c000a495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a499:	e8 c4 26 00 00       	call   c000cb62 <operator delete(void*, unsigned long)>
c000a49e:	83 c4 10             	add    esp,0x10
c000a4a1:	83 c4 0c             	add    esp,0xc
c000a4a4:	c3                   	ret    
c000a4a5:	90                   	nop

c000a4a6 <Pipe::read(unsigned long long, void*, int*)>:
c000a4a6:	55                   	push   ebp
c000a4a7:	57                   	push   edi
c000a4a8:	56                   	push   esi
c000a4a9:	53                   	push   ebx
c000a4aa:	83 ec 1c             	sub    esp,0x1c
c000a4ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a4b1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a4b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a4b9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a4bc:	89 c8                	mov    eax,ecx
c000a4be:	99                   	cdq    
c000a4bf:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a4c3:	74 24                	je     c000a4e9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a4c5:	39 f9                	cmp    ecx,edi
c000a4c7:	89 d1                	mov    ecx,edx
c000a4c9:	19 f1                	sbb    ecx,esi
c000a4cb:	73 1c                	jae    c000a4e9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a4cd:	fa                   	cli    
c000a4ce:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c000a4d4:	e8 5b de 00 00       	call   c0018334 <schedule()>
c000a4d9:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000a4de:	48                   	dec    eax
c000a4df:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000a4e4:	75 d3                	jne    c000a4b9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a4e6:	fb                   	sti    
c000a4e7:	eb d0                	jmp    c000a4b9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a4e9:	39 f8                	cmp    eax,edi
c000a4eb:	89 d1                	mov    ecx,edx
c000a4ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4f0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a4f4:	19 f1                	sbb    ecx,esi
c000a4f6:	73 07                	jae    c000a4ff <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a4f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a4ff:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a502:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a505:	29 f7                	sub    edi,esi
c000a507:	89 f8                	mov    eax,edi
c000a509:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a50d:	99                   	cdq    
c000a50e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a515:	19 d0                	sbb    eax,edx
c000a517:	73 07                	jae    c000a520 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a519:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a51c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a520:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a523:	89 ea                	mov    edx,ebp
c000a525:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a529:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a52e:	74 0d                	je     c000a53d <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a530:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a533:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a537:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a53b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a53d:	85 d2                	test   edx,edx
c000a53f:	74 11                	je     c000a552 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a545:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a548:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a54c:	89 d1                	mov    ecx,edx
c000a54e:	89 c7                	mov    edi,eax
c000a550:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a552:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a555:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a558:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a55b:	99                   	cdq    
c000a55c:	89 f7                	mov    edi,esi
c000a55e:	03 04 24             	add    eax,DWORD PTR [esp]
c000a561:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a565:	c1 ff 1f             	sar    edi,0x1f
c000a568:	57                   	push   edi
c000a569:	56                   	push   esi
c000a56a:	52                   	push   edx
c000a56b:	50                   	push   eax
c000a56c:	e8 d3 7a 01 00       	call   c0022044 <__umoddi3>
c000a571:	83 c4 10             	add    esp,0x10
c000a574:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a577:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a57c:	75 10                	jne    c000a58e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	68 89 3a 02 c0       	push   0xc0023a89
c000a586:	e8 d8 a1 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000a58b:	83 c4 10             	add    esp,0x10
c000a58e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a592:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a595:	89 10                	mov    DWORD PTR [eax],edx
c000a597:	83 c4 1c             	add    esp,0x1c
c000a59a:	31 c0                	xor    eax,eax
c000a59c:	5b                   	pop    ebx
c000a59d:	5e                   	pop    esi
c000a59e:	5f                   	pop    edi
c000a59f:	5d                   	pop    ebp
c000a5a0:	c3                   	ret    
c000a5a1:	90                   	nop

c000a5a2 <Pipe::write(unsigned long long, void*, int*)>:
c000a5a2:	55                   	push   ebp
c000a5a3:	57                   	push   edi
c000a5a4:	56                   	push   esi
c000a5a5:	53                   	push   ebx
c000a5a6:	83 ec 1c             	sub    esp,0x1c
c000a5a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a5ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a5b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a5b4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a5b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bf:	89 d8                	mov    eax,ebx
c000a5c1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a5c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a5c8:	89 d6                	mov    esi,edx
c000a5ca:	89 d7                	mov    edi,edx
c000a5cc:	c1 ff 1f             	sar    edi,0x1f
c000a5cf:	03 34 24             	add    esi,DWORD PTR [esp]
c000a5d2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a5d6:	c1 f8 1f             	sar    eax,0x1f
c000a5d9:	39 f3                	cmp    ebx,esi
c000a5db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5e3:	19 f8                	sbb    eax,edi
c000a5e5:	b8 01 00 00 00       	mov    eax,0x1
c000a5ea:	72 6e                	jb     c000a65a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a5ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a5ef:	01 d0                	add    eax,edx
c000a5f1:	99                   	cdq    
c000a5f2:	f7 fb                	idiv   ebx
c000a5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5f8:	29 d3                	sub    ebx,edx
c000a5fa:	89 d7                	mov    edi,edx
c000a5fc:	89 de                	mov    esi,ebx
c000a5fe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a601:	c1 fb 1f             	sar    ebx,0x1f
c000a604:	39 f2                	cmp    edx,esi
c000a606:	19 d8                	sbb    eax,ebx
c000a608:	b8 00 00 00 00       	mov    eax,0x0
c000a60d:	72 04                	jb     c000a613 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a60f:	89 d0                	mov    eax,edx
c000a611:	29 f0                	sub    eax,esi
c000a613:	89 d3                	mov    ebx,edx
c000a615:	29 c3                	sub    ebx,eax
c000a617:	74 0b                	je     c000a624 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a619:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a61c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a620:	89 d9                	mov    ecx,ebx
c000a622:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a624:	85 c0                	test   eax,eax
c000a626:	74 0d                	je     c000a635 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a628:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a62c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a62f:	89 de                	mov    esi,ebx
c000a631:	89 c1                	mov    ecx,eax
c000a633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a635:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a638:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63d:	75 10                	jne    c000a64f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a63f:	83 ec 0c             	sub    esp,0xc
c000a642:	68 a5 3a 02 c0       	push   0xc0023aa5
c000a647:	e8 17 a1 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000a64c:	83 c4 10             	add    esp,0x10
c000a64f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a653:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a656:	89 08                	mov    DWORD PTR [eax],ecx
c000a658:	31 c0                	xor    eax,eax
c000a65a:	83 c4 1c             	add    esp,0x1c
c000a65d:	5b                   	pop    ebx
c000a65e:	5e                   	pop    esi
c000a65f:	5f                   	pop    edi
c000a660:	5d                   	pop    ebp
c000a661:	c3                   	ret    

c000a662 <Pipe::Pipe(int)>:
c000a662:	83 ec 0c             	sub    esp,0xc
c000a665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	6a 00                	push   0x0
c000a66e:	50                   	push   eax
c000a66f:	e8 66 0e 00 00       	call   c000b4da <UnixFile::UnixFile(int)>
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000a67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a680:	89 10                	mov    DWORD PTR [eax],edx
c000a682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a68a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a691:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a69c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a6a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a7:	83 ec 0c             	sub    esp,0xc
c000a6aa:	50                   	push   eax
c000a6ab:	e8 13 f3 ff ff       	call   c00099c3 <malloc>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	89 c2                	mov    edx,eax
c000a6b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a6c4:	90                   	nop
c000a6c5:	83 c4 0c             	add    esp,0xc
c000a6c8:	c3                   	ret    
c000a6c9:	90                   	nop

c000a6ca <VgaText::isAtty()>:
c000a6ca:	b0 01                	mov    al,0x1
c000a6cc:	c3                   	ret    
c000a6cd:	90                   	nop

c000a6ce <VgaText::~VgaText()>:
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	ba 54 3b 02 c0       	mov    edx,0xc0023b54
c000a6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6da:	89 10                	mov    DWORD PTR [eax],edx
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	50                   	push   eax
c000a6e4:	e8 d3 0f 00 00       	call   c000b6bc <UnixFile::~UnixFile()>
c000a6e9:	83 c4 10             	add    esp,0x10
c000a6ec:	90                   	nop
c000a6ed:	83 c4 0c             	add    esp,0xc
c000a6f0:	c3                   	ret    
c000a6f1:	90                   	nop

c000a6f2 <VgaText::~VgaText()>:
c000a6f2:	83 ec 0c             	sub    esp,0xc
c000a6f5:	83 ec 0c             	sub    esp,0xc
c000a6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fc:	e8 cd ff ff ff       	call   c000a6ce <VgaText::~VgaText()>
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	83 ec 08             	sub    esp,0x8
c000a707:	68 c4 02 00 00       	push   0x2c4
c000a70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a710:	e8 4d 24 00 00       	call   c000cb62 <operator delete(void*, unsigned long)>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	83 c4 0c             	add    esp,0xc
c000a71b:	c3                   	ret    

c000a71c <VgaText::read(unsigned long long, void*, int*)>:
c000a71c:	83 ec 10             	sub    esp,0x10
c000a71f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a723:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a72b:	e8 a2 57 00 00       	call   c000fed2 <readKeyboard(VgaText*, char*, unsigned long)>
c000a730:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a734:	89 02                	mov    DWORD PTR [edx],eax
c000a736:	31 c0                	xor    eax,eax
c000a738:	83 c4 1c             	add    esp,0x1c
c000a73b:	c3                   	ret    

c000a73c <setTerminalScrollLock(bool)>:
c000a73c:	c3                   	ret    

c000a73d <addToTerminalCycle(VgaText*)>:
c000a73d:	8b 15 20 75 02 c0    	mov    edx,DWORD PTR ds:0xc0027520
c000a743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a747:	85 d2                	test   edx,edx
c000a749:	75 09                	jne    c000a754 <addToTerminalCycle(VgaText*)+0x17>
c000a74b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a74e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c000a753:	c3                   	ret    
c000a754:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a757:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a75a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a75d:	c3                   	ret    

c000a75e <installVgaTextImplementation()>:
c000a75e:	83 ec 10             	sub    esp,0x10
c000a761:	6a 20                	push   0x20
c000a763:	6a 00                	push   0x0
c000a765:	68 00 75 02 c0       	push   0xc0027500
c000a76a:	e8 15 5f ff ff       	call   c0000684 <memset>
c000a76f:	83 c4 1c             	add    esp,0x1c
c000a772:	c3                   	ret    

c000a773 <scrollTerminalScrollLock(int)>:
c000a773:	c3                   	ret    

c000a774 <VgaText::updateTitle()>:
c000a774:	53                   	push   ebx
c000a775:	31 c0                	xor    eax,eax
c000a777:	83 ec 58             	sub    esp,0x58
c000a77a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a77e:	89 e1                	mov    ecx,esp
c000a780:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a784:	40                   	inc    eax
c000a785:	83 f8 50             	cmp    eax,0x50
c000a788:	75 f6                	jne    c000a780 <VgaText::updateTitle()+0xc>
c000a78a:	31 c0                	xor    eax,eax
c000a78c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a793:	84 db                	test   bl,bl
c000a795:	74 06                	je     c000a79d <VgaText::updateTitle()+0x29>
c000a797:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a79a:	40                   	inc    eax
c000a79b:	eb ef                	jmp    c000a78c <VgaText::updateTitle()+0x18>
c000a79d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a7a0:	85 c0                	test   eax,eax
c000a7a2:	74 09                	je     c000a7ad <VgaText::updateTitle()+0x39>
c000a7a4:	53                   	push   ebx
c000a7a5:	53                   	push   ebx
c000a7a6:	51                   	push   ecx
c000a7a7:	52                   	push   edx
c000a7a8:	ff d0                	call   eax
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	83 c4 58             	add    esp,0x58
c000a7b0:	5b                   	pop    ebx
c000a7b1:	c3                   	ret    

c000a7b2 <VgaText::load()>:
c000a7b2:	53                   	push   ebx
c000a7b3:	31 c0                	xor    eax,eax
c000a7b5:	83 ec 58             	sub    esp,0x58
c000a7b8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a7bc:	89 e2                	mov    edx,esp
c000a7be:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a7c2:	40                   	inc    eax
c000a7c3:	83 f8 50             	cmp    eax,0x50
c000a7c6:	75 f6                	jne    c000a7be <VgaText::load()+0xc>
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a7d1:	84 c9                	test   cl,cl
c000a7d3:	74 06                	je     c000a7db <VgaText::load()+0x29>
c000a7d5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a7d8:	40                   	inc    eax
c000a7d9:	eb ef                	jmp    c000a7ca <VgaText::load()+0x18>
c000a7db:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a7de:	85 c0                	test   eax,eax
c000a7e0:	74 09                	je     c000a7eb <VgaText::load()+0x39>
c000a7e2:	51                   	push   ecx
c000a7e3:	51                   	push   ecx
c000a7e4:	52                   	push   edx
c000a7e5:	53                   	push   ebx
c000a7e6:	ff d0                	call   eax
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a7ee:	85 c0                	test   eax,eax
c000a7f0:	74 09                	je     c000a7fb <VgaText::load()+0x49>
c000a7f2:	83 ec 0c             	sub    esp,0xc
c000a7f5:	53                   	push   ebx
c000a7f6:	ff d0                	call   eax
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 58             	add    esp,0x58
c000a7fe:	5b                   	pop    ebx
c000a7ff:	c3                   	ret    

c000a800 <VgaText::updateCursor()>:
c000a800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a804:	39 05 24 75 02 c0    	cmp    DWORD PTR ds:0xc0027524,eax
c000a80a:	75 09                	jne    c000a815 <VgaText::updateCursor()+0x15>
c000a80c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a80f:	85 c0                	test   eax,eax
c000a811:	74 02                	je     c000a815 <VgaText::updateCursor()+0x15>
c000a813:	ff e0                	jmp    eax
c000a815:	c3                   	ret    

c000a816 <VgaText::doANSI_SGR(int)>:
c000a816:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a81e:	85 d2                	test   edx,edx
c000a820:	75 0b                	jne    c000a82d <VgaText::doANSI_SGR(int)+0x17>
c000a822:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a825:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a828:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a82b:	eb 59                	jmp    c000a886 <VgaText::doANSI_SGR(int)+0x70>
c000a82d:	83 fa 07             	cmp    edx,0x7
c000a830:	75 0b                	jne    c000a83d <VgaText::doANSI_SGR(int)+0x27>
c000a832:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a835:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a838:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a83b:	eb 49                	jmp    c000a886 <VgaText::doANSI_SGR(int)+0x70>
c000a83d:	83 fa 1b             	cmp    edx,0x1b
c000a840:	74 e0                	je     c000a822 <VgaText::doANSI_SGR(int)+0xc>
c000a842:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a845:	83 f9 07             	cmp    ecx,0x7
c000a848:	77 09                	ja     c000a853 <VgaText::doANSI_SGR(int)+0x3d>
c000a84a:	8b 14 8d a0 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9760]
c000a851:	eb 20                	jmp    c000a873 <VgaText::doANSI_SGR(int)+0x5d>
c000a853:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a856:	83 f9 07             	cmp    ecx,0x7
c000a859:	77 09                	ja     c000a864 <VgaText::doANSI_SGR(int)+0x4e>
c000a85b:	8b 14 8d a0 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9760]
c000a862:	eb 22                	jmp    c000a886 <VgaText::doANSI_SGR(int)+0x70>
c000a864:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a867:	83 f9 07             	cmp    ecx,0x7
c000a86a:	77 0b                	ja     c000a877 <VgaText::doANSI_SGR(int)+0x61>
c000a86c:	8b 14 95 58 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98a8]
c000a873:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a876:	c3                   	ret    
c000a877:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a87a:	83 f9 07             	cmp    ecx,0x7
c000a87d:	77 0a                	ja     c000a889 <VgaText::doANSI_SGR(int)+0x73>
c000a87f:	8b 14 95 30 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98d0]
c000a886:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a889:	c3                   	ret    

c000a88a <VgaText::setDefaultBgColour(VgaColour)>:
c000a88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a88e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a892:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a895:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a898:	c3                   	ret    
c000a899:	90                   	nop

c000a89a <VgaText::setDefaultFgColour(VgaColour)>:
c000a89a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a89e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8a2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a8a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8a8:	c3                   	ret    
c000a8a9:	90                   	nop

c000a8aa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a8aa:	53                   	push   ebx
c000a8ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a8b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8b7:	51                   	push   ecx
c000a8b8:	e8 cd ff ff ff       	call   c000a88a <VgaText::setDefaultBgColour(VgaColour)>
c000a8bd:	58                   	pop    eax
c000a8be:	5a                   	pop    edx
c000a8bf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a8c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a8c7:	5b                   	pop    ebx
c000a8c8:	eb d0                	jmp    c000a89a <VgaText::setDefaultFgColour(VgaColour)>

c000a8ca <VgaText::setTitleTextColour(VgaColour)>:
c000a8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a8d5:	e9 9a fe ff ff       	jmp    c000a774 <VgaText::updateTitle()>

c000a8da <VgaText::setTitleColour(VgaColour)>:
c000a8da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a8e5:	e9 8a fe ff ff       	jmp    c000a774 <VgaText::updateTitle()>

c000a8ea <VgaText::setTitle(char*)>:
c000a8ea:	53                   	push   ebx
c000a8eb:	83 ec 10             	sub    esp,0x10
c000a8ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 3e 5e ff ff       	call   c0000740 <strcpy>
c000a902:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a906:	83 c4 18             	add    esp,0x18
c000a909:	5b                   	pop    ebx
c000a90a:	e9 65 fe ff ff       	jmp    c000a774 <VgaText::updateTitle()>
c000a90f:	90                   	nop

c000a910 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a910:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a914:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a919:	83 e0 0f             	and    eax,0xf
c000a91c:	c1 e2 04             	shl    edx,0x4
c000a91f:	09 d0                	or     eax,edx
c000a921:	c3                   	ret    

c000a922 <VgaText::scrollScreen()>:
c000a922:	55                   	push   ebp
c000a923:	b9 01 00 00 00       	mov    ecx,0x1
c000a928:	57                   	push   edi
c000a929:	56                   	push   esi
c000a92a:	53                   	push   ebx
c000a92b:	83 ec 0c             	sub    esp,0xc
c000a92e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a932:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a938:	31 ff                	xor    edi,edi
c000a93a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a93d:	83 f9 17             	cmp    ecx,0x17
c000a940:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a943:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a94a:	75 27                	jne    c000a973 <VgaText::scrollScreen()+0x51>
c000a94c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a94f:	01 f5                	add    ebp,esi
c000a951:	f7 c7 01 00 00 00    	test   edi,0x1
c000a957:	74 16                	je     c000a96f <VgaText::scrollScreen()+0x4d>
c000a959:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a95d:	50                   	push   eax
c000a95e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a962:	50                   	push   eax
c000a963:	e8 a8 ff ff ff       	call   c000a910 <VgaText::combineColours(unsigned char, unsigned char)>
c000a968:	5a                   	pop    edx
c000a969:	5a                   	pop    edx
c000a96a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a96d:	eb 04                	jmp    c000a973 <VgaText::scrollScreen()+0x51>
c000a96f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a973:	47                   	inc    edi
c000a974:	46                   	inc    esi
c000a975:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a97b:	75 bd                	jne    c000a93a <VgaText::scrollScreen()+0x18>
c000a97d:	41                   	inc    ecx
c000a97e:	83 f9 18             	cmp    ecx,0x18
c000a981:	75 af                	jne    c000a932 <VgaText::scrollScreen()+0x10>
c000a983:	39 1d 24 75 02 c0    	cmp    DWORD PTR ds:0xc0027524,ebx
c000a989:	75 1b                	jne    c000a9a6 <VgaText::scrollScreen()+0x84>
c000a98b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a98f:	74 05                	je     c000a996 <VgaText::scrollScreen()+0x74>
c000a991:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a994:	eb 10                	jmp    c000a9a6 <VgaText::scrollScreen()+0x84>
c000a996:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a999:	85 c0                	test   eax,eax
c000a99b:	74 09                	je     c000a9a6 <VgaText::scrollScreen()+0x84>
c000a99d:	83 ec 0c             	sub    esp,0xc
c000a9a0:	53                   	push   ebx
c000a9a1:	ff d0                	call   eax
c000a9a3:	83 c4 10             	add    esp,0x10
c000a9a6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9aa:	83 c4 0c             	add    esp,0xc
c000a9ad:	5b                   	pop    ebx
c000a9ae:	5e                   	pop    esi
c000a9af:	5f                   	pop    edi
c000a9b0:	5d                   	pop    ebp
c000a9b1:	e9 4a fe ff ff       	jmp    c000a800 <VgaText::updateCursor()>

c000a9b6 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a9b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a9bb:	c1 e0 08             	shl    eax,0x8
c000a9be:	89 c2                	mov    edx,eax
c000a9c0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a9c5:	09 d0                	or     eax,edx
c000a9c7:	c3                   	ret    

c000a9c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a9c8:	56                   	push   esi
c000a9c9:	53                   	push   ebx
c000a9ca:	51                   	push   ecx
c000a9cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a9cf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a9d4:	50                   	push   eax
c000a9d5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a9da:	50                   	push   eax
c000a9db:	e8 30 ff ff ff       	call   c000a910 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9e0:	5b                   	pop    ebx
c000a9e1:	0f b6 c0             	movzx  eax,al
c000a9e4:	5e                   	pop    esi
c000a9e5:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a9ea:	50                   	push   eax
c000a9eb:	53                   	push   ebx
c000a9ec:	e8 c5 ff ff ff       	call   c000a9b6 <VgaText::combineCharAndColour(char, unsigned char)>
c000a9f1:	5a                   	pop    edx
c000a9f2:	5e                   	pop    esi
c000a9f3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a9f6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a9fc:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aa00:	0f b7 d2             	movzx  edx,dx
c000aa03:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aa07:	39 0d 24 75 02 c0    	cmp    DWORD PTR ds:0xc0027524,ecx
c000aa0d:	75 10                	jne    c000aa1f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa0f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aa12:	85 c0                	test   eax,eax
c000aa14:	74 09                	je     c000aa1f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa16:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aa1a:	5a                   	pop    edx
c000aa1b:	5b                   	pop    ebx
c000aa1c:	5e                   	pop    esi
c000aa1d:	ff e0                	jmp    eax
c000aa1f:	58                   	pop    eax
c000aa20:	5b                   	pop    ebx
c000aa21:	5e                   	pop    esi
c000aa22:	c3                   	ret    
c000aa23:	90                   	nop

c000aa24 <VgaText::getCursorX()>:
c000aa24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aa2b:	c3                   	ret    

c000aa2c <VgaText::getCursorY()>:
c000aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa30:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aa33:	c3                   	ret    

c000aa34 <VgaText::setCursor(int, int)>:
c000aa34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa3c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aa3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa46:	e9 b5 fd ff ff       	jmp    c000a800 <VgaText::updateCursor()>

c000aa4b <setActiveTerminal(VgaText*)>:
c000aa4b:	53                   	push   ebx
c000aa4c:	83 ec 08             	sub    esp,0x8
c000aa4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa53:	85 db                	test   ebx,ebx
c000aa55:	75 11                	jne    c000aa68 <setActiveTerminal(VgaText*)+0x1d>
c000aa57:	c7 44 24 10 e0 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ae0
c000aa5f:	83 c4 08             	add    esp,0x8
c000aa62:	5b                   	pop    ebx
c000aa63:	e9 fb 9c 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c000aa68:	a1 24 75 02 c0       	mov    eax,ds:0xc0027524
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	74 0c                	je     c000aa7d <setActiveTerminal(VgaText*)+0x32>
c000aa71:	83 ec 0c             	sub    esp,0xc
c000aa74:	50                   	push   eax
c000aa75:	e8 86 fd ff ff       	call   c000a800 <VgaText::updateCursor()>
c000aa7a:	83 c4 10             	add    esp,0x10
c000aa7d:	89 1d 24 75 02 c0    	mov    DWORD PTR ds:0xc0027524,ebx
c000aa83:	51                   	push   ecx
c000aa84:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa87:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa8a:	53                   	push   ebx
c000aa8b:	e8 a4 ff ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa97:	75 07                	jne    c000aaa0 <setActiveTerminal(VgaText*)+0x55>
c000aa99:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aaa0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aaa4:	83 c4 08             	add    esp,0x8
c000aaa7:	5b                   	pop    ebx
c000aaa8:	e9 05 fd ff ff       	jmp    c000a7b2 <VgaText::load()>

c000aaad <doTerminalCycle()>:
c000aaad:	83 ec 18             	sub    esp,0x18
c000aab0:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c000aab5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aab8:	50                   	push   eax
c000aab9:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c000aabe:	e8 88 ff ff ff       	call   c000aa4b <setActiveTerminal(VgaText*)>
c000aac3:	83 c4 1c             	add    esp,0x1c
c000aac6:	c3                   	ret    
c000aac7:	90                   	nop

c000aac8 <VgaText::setCursorX(int)>:
c000aac8:	83 ec 10             	sub    esp,0x10
c000aacb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aacf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad6:	50                   	push   eax
c000aad7:	e8 58 ff ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000aadc:	83 c4 1c             	add    esp,0x1c
c000aadf:	c3                   	ret    

c000aae0 <VgaText::setCursorY(int)>:
c000aae0:	83 ec 10             	sub    esp,0x10
c000aae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaeb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aaee:	50                   	push   eax
c000aaef:	e8 40 ff ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000aaf4:	83 c4 1c             	add    esp,0x1c
c000aaf7:	c3                   	ret    

c000aaf8 <VgaText::incrementCursor(bool)>:
c000aaf8:	56                   	push   esi
c000aaf9:	53                   	push   ebx
c000aafa:	51                   	push   ecx
c000aafb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aaff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ab03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ab06:	40                   	inc    eax
c000ab07:	83 f8 50             	cmp    eax,0x50
c000ab0a:	74 05                	je     c000ab11 <VgaText::incrementCursor(bool)+0x19>
c000ab0c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab0f:	eb 24                	jmp    c000ab35 <VgaText::incrementCursor(bool)+0x3d>
c000ab11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ab14:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ab1b:	8d 50 01             	lea    edx,[eax+0x1]
c000ab1e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ab21:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ab24:	75 0f                	jne    c000ab35 <VgaText::incrementCursor(bool)+0x3d>
c000ab26:	83 ec 0c             	sub    esp,0xc
c000ab29:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ab2c:	53                   	push   ebx
c000ab2d:	e8 f0 fd ff ff       	call   c000a922 <VgaText::scrollScreen()>
c000ab32:	83 c4 10             	add    esp,0x10
c000ab35:	89 f0                	mov    eax,esi
c000ab37:	84 c0                	test   al,al
c000ab39:	74 0c                	je     c000ab47 <VgaText::incrementCursor(bool)+0x4f>
c000ab3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab3f:	5a                   	pop    edx
c000ab40:	5b                   	pop    ebx
c000ab41:	5e                   	pop    esi
c000ab42:	e9 b9 fc ff ff       	jmp    c000a800 <VgaText::updateCursor()>
c000ab47:	58                   	pop    eax
c000ab48:	5b                   	pop    ebx
c000ab49:	5e                   	pop    esi
c000ab4a:	c3                   	ret    
c000ab4b:	90                   	nop

c000ab4c <VgaText::decrementCursor(bool)>:
c000ab4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ab50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ab54:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ab57:	85 c0                	test   eax,eax
c000ab59:	74 04                	je     c000ab5f <VgaText::decrementCursor(bool)+0x13>
c000ab5b:	48                   	dec    eax
c000ab5c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ab5f:	84 c9                	test   cl,cl
c000ab61:	74 09                	je     c000ab6c <VgaText::decrementCursor(bool)+0x20>
c000ab63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab67:	e9 94 fc ff ff       	jmp    c000a800 <VgaText::updateCursor()>
c000ab6c:	c3                   	ret    
c000ab6d:	90                   	nop

c000ab6e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ab6e:	53                   	push   ebx
c000ab6f:	83 ec 08             	sub    esp,0x8
c000ab72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ab7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ab82:	3c 07                	cmp    al,0x7
c000ab84:	75 2a                	jne    c000abb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ab86:	a1 d8 75 02 c0       	mov    eax,ds:0xc00275d8
c000ab8b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ab93:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ab9b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000aba3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aba7:	83 c4 08             	add    esp,0x8
c000abaa:	5b                   	pop    ebx
c000abab:	e9 ae 2e 00 00       	jmp    c000da5e <Buzzer::beep(int, int, bool)>
c000abb0:	3c 0d                	cmp    al,0xd
c000abb2:	75 09                	jne    c000abbd <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000abb4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abbb:	eb 2c                	jmp    c000abe9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000abbd:	3c 0a                	cmp    al,0xa
c000abbf:	75 31                	jne    c000abf2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000abc1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abc4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abcb:	8d 50 01             	lea    edx,[eax+0x1]
c000abce:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abd1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abd4:	75 0f                	jne    c000abe5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000abd6:	83 ec 0c             	sub    esp,0xc
c000abd9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abdc:	53                   	push   ebx
c000abdd:	e8 40 fd ff ff       	call   c000a922 <VgaText::scrollScreen()>
c000abe2:	83 c4 10             	add    esp,0x10
c000abe5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abe9:	83 c4 08             	add    esp,0x8
c000abec:	5b                   	pop    ebx
c000abed:	e9 0e fc ff ff       	jmp    c000a800 <VgaText::updateCursor()>
c000abf2:	3c 08                	cmp    al,0x8
c000abf4:	75 25                	jne    c000ac1b <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000abf6:	50                   	push   eax
c000abf7:	50                   	push   eax
c000abf8:	6a 01                	push   0x1
c000abfa:	53                   	push   ebx
c000abfb:	e8 4c ff ff ff       	call   c000ab4c <VgaText::decrementCursor(bool)>
c000ac00:	5a                   	pop    edx
c000ac01:	59                   	pop    ecx
c000ac02:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac05:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac08:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac0b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac0e:	6a 20                	push   0x20
c000ac10:	53                   	push   ebx
c000ac11:	e8 b2 fd ff ff       	call   c000a9c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac16:	83 c4 28             	add    esp,0x28
c000ac19:	5b                   	pop    ebx
c000ac1a:	c3                   	ret    
c000ac1b:	83 ec 08             	sub    esp,0x8
c000ac1e:	0f be c0             	movsx  eax,al
c000ac21:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac24:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac27:	51                   	push   ecx
c000ac28:	52                   	push   edx
c000ac29:	50                   	push   eax
c000ac2a:	53                   	push   ebx
c000ac2b:	e8 98 fd ff ff       	call   c000a9c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac30:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ac34:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ac3c:	83 c4 28             	add    esp,0x28
c000ac3f:	5b                   	pop    ebx
c000ac40:	e9 b3 fe ff ff       	jmp    c000aaf8 <VgaText::incrementCursor(bool)>
c000ac45:	90                   	nop

c000ac46 <VgaText::doUpdate()>:
c000ac46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac4a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ac4d:	85 c0                	test   eax,eax
c000ac4f:	74 02                	je     c000ac53 <VgaText::doUpdate()+0xd>
c000ac51:	ff e0                	jmp    eax
c000ac53:	c3                   	ret    

c000ac54 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ac54:	55                   	push   ebp
c000ac55:	31 ed                	xor    ebp,ebp
c000ac57:	57                   	push   edi
c000ac58:	56                   	push   esi
c000ac59:	53                   	push   ebx
c000ac5a:	83 ec 1c             	sub    esp,0x1c
c000ac5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac61:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ac66:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ac6d:	50                   	push   eax
c000ac6e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ac73:	50                   	push   eax
c000ac74:	e8 97 fc ff ff       	call   c000a910 <VgaText::combineColours(unsigned char, unsigned char)>
c000ac79:	59                   	pop    ecx
c000ac7a:	0f b6 c0             	movzx  eax,al
c000ac7d:	5e                   	pop    esi
c000ac7e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ac83:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ac87:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ac8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac8e:	0f b7 f6             	movzx  esi,si
c000ac91:	01 f6                	add    esi,esi
c000ac93:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ac96:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ac99:	84 c0                	test   al,al
c000ac9b:	0f 84 fd 00 00 00    	je     c000ad9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aca1:	3c 0d                	cmp    al,0xd
c000aca3:	75 0c                	jne    c000acb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aca5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000acac:	e9 e7 00 00 00       	jmp    c000ad98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000acb1:	3c 0a                	cmp    al,0xa
c000acb3:	75 47                	jne    c000acfc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000acb5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acb8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000acbf:	8d 48 01             	lea    ecx,[eax+0x1]
c000acc2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000acc5:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000acc8:	75 0f                	jne    c000acd9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000acca:	83 ec 0c             	sub    esp,0xc
c000accd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000acd0:	53                   	push   ebx
c000acd1:	e8 4c fc ff ff       	call   c000a922 <VgaText::scrollScreen()>
c000acd6:	83 c4 10             	add    esp,0x10
c000acd9:	83 ec 0c             	sub    esp,0xc
c000acdc:	31 ed                	xor    ebp,ebp
c000acde:	53                   	push   ebx
c000acdf:	e8 1c fb ff ff       	call   c000a800 <VgaText::updateCursor()>
c000ace4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ace9:	83 c4 10             	add    esp,0x10
c000acec:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000acef:	0f b7 f6             	movzx  esi,si
c000acf2:	01 f6                	add    esi,esi
c000acf4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000acf7:	e9 9c 00 00 00       	jmp    c000ad98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000acfc:	3c 08                	cmp    al,0x8
c000acfe:	75 35                	jne    c000ad35 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ad00:	56                   	push   esi
c000ad01:	56                   	push   esi
c000ad02:	6a 01                	push   0x1
c000ad04:	53                   	push   ebx
c000ad05:	e8 42 fe ff ff       	call   c000ab4c <VgaText::decrementCursor(bool)>
c000ad0a:	58                   	pop    eax
c000ad0b:	5a                   	pop    edx
c000ad0c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad0f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad12:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad15:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad18:	6a 20                	push   0x20
c000ad1a:	53                   	push   ebx
c000ad1b:	e8 a8 fc ff ff       	call   c000a9c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ad20:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad25:	83 c4 20             	add    esp,0x20
c000ad28:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad2b:	0f b7 f6             	movzx  esi,si
c000ad2e:	01 f6                	add    esi,esi
c000ad30:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad33:	eb 63                	jmp    c000ad98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad35:	51                   	push   ecx
c000ad36:	51                   	push   ecx
c000ad37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3b:	50                   	push   eax
c000ad3c:	e8 75 fc ff ff       	call   c000a9b6 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad41:	83 c4 10             	add    esp,0x10
c000ad44:	66 89 06             	mov    WORD PTR [esi],ax
c000ad47:	39 1d 24 75 02 c0    	cmp    DWORD PTR ds:0xc0027524,ebx
c000ad4d:	75 21                	jne    c000ad70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ad4f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ad52:	85 c0                	test   eax,eax
c000ad54:	74 1a                	je     c000ad70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ad56:	52                   	push   edx
c000ad57:	52                   	push   edx
c000ad58:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad5b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad66:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ad69:	51                   	push   ecx
c000ad6a:	53                   	push   ebx
c000ad6b:	ff d0                	call   eax
c000ad6d:	83 c4 20             	add    esp,0x20
c000ad70:	83 c6 02             	add    esi,0x2
c000ad73:	50                   	push   eax
c000ad74:	50                   	push   eax
c000ad75:	6a 00                	push   0x0
c000ad77:	53                   	push   ebx
c000ad78:	e8 7b fd ff ff       	call   c000aaf8 <VgaText::incrementCursor(bool)>
c000ad7d:	83 c4 10             	add    esp,0x10
c000ad80:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ad84:	75 0d                	jne    c000ad93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ad86:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad8b:	0f b7 f6             	movzx  esi,si
c000ad8e:	01 f6                	add    esi,esi
c000ad90:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad93:	bd 01 00 00 00       	mov    ebp,0x1
c000ad98:	47                   	inc    edi
c000ad99:	e9 f8 fe ff ff       	jmp    c000ac96 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ad9e:	83 ec 0c             	sub    esp,0xc
c000ada1:	53                   	push   ebx
c000ada2:	e8 59 fa ff ff       	call   c000a800 <VgaText::updateCursor()>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 e8                	mov    eax,ebp
c000adac:	84 c0                	test   al,al
c000adae:	74 0c                	je     c000adbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	53                   	push   ebx
c000adb4:	e8 8d fe ff ff       	call   c000ac46 <VgaText::doUpdate()>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000adc3:	83 c4 1c             	add    esp,0x1c
c000adc6:	5b                   	pop    ebx
c000adc7:	5e                   	pop    esi
c000adc8:	5f                   	pop    edi
c000adc9:	5d                   	pop    ebp
c000adca:	c3                   	ret    
c000adcb:	90                   	nop

c000adcc <VgaText::clearScreen()>:
c000adcc:	57                   	push   edi
c000adcd:	56                   	push   esi
c000adce:	31 f6                	xor    esi,esi
c000add0:	53                   	push   ebx
c000add1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000add5:	52                   	push   edx
c000add6:	6a 00                	push   0x0
c000add8:	6a 00                	push   0x0
c000adda:	53                   	push   ebx
c000addb:	e8 54 fc ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000ade0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ade7:	83 c4 10             	add    esp,0x10
c000adea:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aded:	7e 20                	jle    c000ae0f <VgaText::clearScreen()+0x43>
c000adef:	31 ff                	xor    edi,edi
c000adf1:	50                   	push   eax
c000adf2:	50                   	push   eax
c000adf3:	56                   	push   esi
c000adf4:	57                   	push   edi
c000adf5:	47                   	inc    edi
c000adf6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000adf9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000adfc:	6a 20                	push   0x20
c000adfe:	53                   	push   ebx
c000adff:	e8 c4 fb ff ff       	call   c000a9c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ae04:	83 c4 20             	add    esp,0x20
c000ae07:	83 ff 50             	cmp    edi,0x50
c000ae0a:	75 e5                	jne    c000adf1 <VgaText::clearScreen()+0x25>
c000ae0c:	46                   	inc    esi
c000ae0d:	eb db                	jmp    c000adea <VgaText::clearScreen()+0x1e>
c000ae0f:	83 ec 0c             	sub    esp,0xc
c000ae12:	53                   	push   ebx
c000ae13:	e8 2e fe ff ff       	call   c000ac46 <VgaText::doUpdate()>
c000ae18:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae1f:	83 c4 10             	add    esp,0x10
c000ae22:	5b                   	pop    ebx
c000ae23:	5e                   	pop    esi
c000ae24:	5f                   	pop    edi
c000ae25:	c3                   	ret    

c000ae26 <VgaText::putchar(char)>:
c000ae26:	56                   	push   esi
c000ae27:	53                   	push   ebx
c000ae28:	83 ec 14             	sub    esp,0x14
c000ae2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ae33:	3c 5b                	cmp    al,0x5b
c000ae35:	75 18                	jne    c000ae4f <VgaText::putchar(char)+0x29>
c000ae37:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ae3b:	74 1f                	je     c000ae5c <VgaText::putchar(char)+0x36>
c000ae3d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ae43:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ae4a:	e9 bd 00 00 00       	jmp    c000af0c <VgaText::putchar(char)+0xe6>
c000ae4f:	3c 1b                	cmp    al,0x1b
c000ae51:	75 09                	jne    c000ae5c <VgaText::putchar(char)+0x36>
c000ae53:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ae57:	e9 b0 00 00 00       	jmp    c000af0c <VgaText::putchar(char)+0xe6>
c000ae5c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ae5f:	84 c9                	test   cl,cl
c000ae61:	0f 84 92 00 00 00    	je     c000aef9 <VgaText::putchar(char)+0xd3>
c000ae67:	8d 50 c0             	lea    edx,[eax-0x40]
c000ae6a:	80 fa 3e             	cmp    dl,0x3e
c000ae6d:	77 76                	ja     c000aee5 <VgaText::putchar(char)+0xbf>
c000ae6f:	3c 6d                	cmp    al,0x6d
c000ae71:	75 47                	jne    c000aeba <VgaText::putchar(char)+0x94>
c000ae73:	31 f6                	xor    esi,esi
c000ae75:	31 d2                	xor    edx,edx
c000ae77:	31 c0                	xor    eax,eax
c000ae79:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ae7c:	7e 2d                	jle    c000aeab <VgaText::putchar(char)+0x85>
c000ae7e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ae83:	80 fa 3b             	cmp    dl,0x3b
c000ae86:	75 17                	jne    c000ae9f <VgaText::putchar(char)+0x79>
c000ae88:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ae8c:	50                   	push   eax
c000ae8d:	53                   	push   ebx
c000ae8e:	e8 83 f9 ff ff       	call   c000a816 <VgaText::doANSI_SGR(int)>
c000ae93:	59                   	pop    ecx
c000ae94:	31 d2                	xor    edx,edx
c000ae96:	58                   	pop    eax
c000ae97:	31 c0                	xor    eax,eax
c000ae99:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ae9d:	eb 09                	jmp    c000aea8 <VgaText::putchar(char)+0x82>
c000ae9f:	6b c0 0a             	imul   eax,eax,0xa
c000aea2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000aea6:	88 ca                	mov    dl,cl
c000aea8:	46                   	inc    esi
c000aea9:	eb ce                	jmp    c000ae79 <VgaText::putchar(char)+0x53>
c000aeab:	84 d2                	test   dl,dl
c000aead:	74 2e                	je     c000aedd <VgaText::putchar(char)+0xb7>
c000aeaf:	50                   	push   eax
c000aeb0:	53                   	push   ebx
c000aeb1:	e8 60 f9 ff ff       	call   c000a816 <VgaText::doANSI_SGR(int)>
c000aeb6:	58                   	pop    eax
c000aeb7:	5a                   	pop    edx
c000aeb8:	eb 23                	jmp    c000aedd <VgaText::putchar(char)+0xb7>
c000aeba:	3c 4a                	cmp    al,0x4a
c000aebc:	75 1f                	jne    c000aedd <VgaText::putchar(char)+0xb7>
c000aebe:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000aec2:	75 19                	jne    c000aedd <VgaText::putchar(char)+0xb7>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	53                   	push   ebx
c000aec8:	e8 ff fe ff ff       	call   c000adcc <VgaText::clearScreen()>
c000aecd:	83 c4 0c             	add    esp,0xc
c000aed0:	6a 00                	push   0x0
c000aed2:	6a 00                	push   0x0
c000aed4:	53                   	push   ebx
c000aed5:	e8 5a fb ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000aee3:	eb 27                	jmp    c000af0c <VgaText::putchar(char)+0xe6>
c000aee5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000aee8:	83 fa 0e             	cmp    edx,0xe
c000aeeb:	7f 1f                	jg     c000af0c <VgaText::putchar(char)+0xe6>
c000aeed:	8d 4a 01             	lea    ecx,[edx+0x1]
c000aef0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000aef3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000aef7:	eb 13                	jmp    c000af0c <VgaText::putchar(char)+0xe6>
c000aef9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aefc:	0f be c0             	movsx  eax,al
c000aeff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af02:	50                   	push   eax
c000af03:	53                   	push   ebx
c000af04:	e8 65 fc ff ff       	call   c000ab6e <VgaText::putchar(char, VgaColour, VgaColour)>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	83 c4 14             	add    esp,0x14
c000af0f:	5b                   	pop    ebx
c000af10:	5e                   	pop    esi
c000af11:	c3                   	ret    

c000af12 <VgaText::putx(unsigned int)>:
c000af12:	57                   	push   edi
c000af13:	b9 11 00 00 00       	mov    ecx,0x11
c000af18:	56                   	push   esi
c000af19:	be ee 3a 02 c0       	mov    esi,0xc0023aee
c000af1e:	53                   	push   ebx
c000af1f:	83 ec 20             	sub    esp,0x20
c000af22:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af26:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000af2a:	fc                   	cld    
c000af2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000af2d:	be 08 00 00 00       	mov    esi,0x8
c000af32:	50                   	push   eax
c000af33:	50                   	push   eax
c000af34:	89 d8                	mov    eax,ebx
c000af36:	c1 e3 04             	shl    ebx,0x4
c000af39:	c1 e8 1c             	shr    eax,0x1c
c000af3c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000af41:	50                   	push   eax
c000af42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af46:	e8 db fe ff ff       	call   c000ae26 <VgaText::putchar(char)>
c000af4b:	83 c4 10             	add    esp,0x10
c000af4e:	4e                   	dec    esi
c000af4f:	75 e1                	jne    c000af32 <VgaText::putx(unsigned int)+0x20>
c000af51:	83 c4 20             	add    esp,0x20
c000af54:	5b                   	pop    ebx
c000af55:	5e                   	pop    esi
c000af56:	5f                   	pop    edi
c000af57:	c3                   	ret    

c000af58 <VgaText::puts(char const*)>:
c000af58:	53                   	push   ebx
c000af59:	83 ec 08             	sub    esp,0x8
c000af5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af60:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000af63:	84 c0                	test   al,al
c000af65:	74 12                	je     c000af79 <VgaText::puts(char const*)+0x21>
c000af67:	43                   	inc    ebx
c000af68:	51                   	push   ecx
c000af69:	51                   	push   ecx
c000af6a:	50                   	push   eax
c000af6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af6f:	e8 b2 fe ff ff       	call   c000ae26 <VgaText::putchar(char)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	eb e7                	jmp    c000af60 <VgaText::puts(char const*)+0x8>
c000af79:	83 c4 08             	add    esp,0x8
c000af7c:	5b                   	pop    ebx
c000af7d:	c3                   	ret    

c000af7e <VgaText::VgaText(char const*)>:
c000af7e:	57                   	push   edi
c000af7f:	56                   	push   esi
c000af80:	53                   	push   ebx
c000af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af85:	83 ec 08             	sub    esp,0x8
c000af88:	6a 00                	push   0x0
c000af8a:	50                   	push   eax
c000af8b:	e8 4a 05 00 00       	call   c000b4da <UnixFile::UnixFile(int)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	ba 54 3b 02 c0       	mov    edx,0xc0023b54
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	89 10                	mov    DWORD PTR [eax],edx
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000afa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afad:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000afb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000afc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000afda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afde:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000afe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	8d 50 60             	lea    edx,[eax+0x60]
c000aff7:	bb 00 75 02 c0       	mov    ebx,0xc0027500
c000affc:	b8 08 00 00 00       	mov    eax,0x8
c000b001:	fc                   	cld    
c000b002:	89 d7                	mov    edi,edx
c000b004:	89 de                	mov    esi,ebx
c000b006:	89 c1                	mov    ecx,eax
c000b008:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00e:	05 82 00 00 00       	add    eax,0x82
c000b013:	83 ec 08             	sub    esp,0x8
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	50                   	push   eax
c000b01b:	e8 20 57 ff ff       	call   c0000740 <strcpy>
c000b020:	83 c4 10             	add    esp,0x10
c000b023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b027:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	6a 01                	push   0x1
c000b033:	e8 e5 08 00 00       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	89 c2                	mov    edx,eax
c000b03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b041:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b044:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b051:	89 c6                	mov    esi,eax
c000b053:	e8 b1 ef ff ff       	call   c000a009 <Phys::allocatePage()>
c000b058:	68 05 0c 00 00       	push   0xc05
c000b05d:	56                   	push   esi
c000b05e:	50                   	push   eax
c000b05f:	53                   	push   ebx
c000b060:	e8 5f 0f 00 00       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b06f:	83 ec 04             	sub    esp,0x4
c000b072:	68 00 0f 00 00       	push   0xf00
c000b077:	6a 00                	push   0x0
c000b079:	50                   	push   eax
c000b07a:	e8 05 56 ff ff       	call   c0000684 <memset>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 ec 04             	sub    esp,0x4
c000b085:	6a 00                	push   0x0
c000b087:	6a 07                	push   0x7
c000b089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08d:	e8 18 f8 ff ff       	call   c000a8aa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	83 ec 04             	sub    esp,0x4
c000b098:	6a 00                	push   0x0
c000b09a:	6a 00                	push   0x0
c000b09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a0:	e8 8f f9 ff ff       	call   c000aa34 <VgaText::setCursor(int, int)>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	83 ec 0c             	sub    esp,0xc
c000b0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0af:	e8 18 fd ff ff       	call   c000adcc <VgaText::clearScreen()>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bb:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c3:	05 02 01 00 00       	add    eax,0x102
c000b0c8:	83 ec 04             	sub    esp,0x4
c000b0cb:	68 96 00 00 00       	push   0x96
c000b0d0:	6a 00                	push   0x0
c000b0d2:	50                   	push   eax
c000b0d3:	e8 ac 55 ff ff       	call   c0000684 <memset>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0df:	05 98 01 00 00       	add    eax,0x198
c000b0e4:	83 ec 04             	sub    esp,0x4
c000b0e7:	68 2c 01 00 00       	push   0x12c
c000b0ec:	6a 00                	push   0x0
c000b0ee:	50                   	push   eax
c000b0ef:	e8 90 55 ff ff       	call   c0000684 <memset>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	90                   	nop
c000b0f8:	5b                   	pop    ebx
c000b0f9:	5e                   	pop    esi
c000b0fa:	5f                   	pop    edi
c000b0fb:	c3                   	ret    

c000b0fc <VgaText::receiveKey(unsigned char)>:
c000b0fc:	55                   	push   ebp
c000b0fd:	57                   	push   edi
c000b0fe:	56                   	push   esi
c000b0ff:	53                   	push   ebx
c000b100:	83 ec 1c             	sub    esp,0x1c
c000b103:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b107:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b10b:	84 db                	test   bl,bl
c000b10d:	0f 84 c9 00 00 00    	je     c000b1dc <VgaText::receiveKey(unsigned char)+0xe0>
c000b113:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b119:	80 fb 08             	cmp    bl,0x8
c000b11c:	75 2c                	jne    c000b14a <VgaText::receiveKey(unsigned char)+0x4e>
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	57                   	push   edi
c000b122:	e8 79 55 ff ff       	call   c00006a0 <strlen>
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	85 c0                	test   eax,eax
c000b12c:	74 41                	je     c000b16f <VgaText::receiveKey(unsigned char)+0x73>
c000b12e:	50                   	push   eax
c000b12f:	50                   	push   eax
c000b130:	6a 08                	push   0x8
c000b132:	56                   	push   esi
c000b133:	e8 ee fc ff ff       	call   c000ae26 <VgaText::putchar(char)>
c000b138:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b13b:	e8 60 55 ff ff       	call   c00006a0 <strlen>
c000b140:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b148:	eb 22                	jmp    c000b16c <VgaText::receiveKey(unsigned char)+0x70>
c000b14a:	0f be c3             	movsx  eax,bl
c000b14d:	52                   	push   edx
c000b14e:	52                   	push   edx
c000b14f:	50                   	push   eax
c000b150:	56                   	push   esi
c000b151:	e8 d0 fc ff ff       	call   c000ae26 <VgaText::putchar(char)>
c000b156:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b15a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b15f:	59                   	pop    ecx
c000b160:	5d                   	pop    ebp
c000b161:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b165:	50                   	push   eax
c000b166:	57                   	push   edi
c000b167:	e8 14 57 ff ff       	call   c0000880 <strcat>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b176:	75 05                	jne    c000b17d <VgaText::receiveKey(unsigned char)+0x81>
c000b178:	80 fb 0a             	cmp    bl,0xa
c000b17b:	75 53                	jne    c000b1d0 <VgaText::receiveKey(unsigned char)+0xd4>
c000b17d:	83 ec 0c             	sub    esp,0xc
c000b180:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b186:	53                   	push   ebx
c000b187:	e8 14 55 ff ff       	call   c00006a0 <strlen>
c000b18c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b18f:	89 c5                	mov    ebp,eax
c000b191:	e8 0a 55 ff ff       	call   c00006a0 <strlen>
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b19d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b1a2:	76 10                	jbe    c000b1b4 <VgaText::receiveKey(unsigned char)+0xb8>
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	68 ff 3a 02 c0       	push   0xc0023aff
c000b1ac:	e8 b2 95 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	50                   	push   eax
c000b1b5:	50                   	push   eax
c000b1b6:	57                   	push   edi
c000b1b7:	53                   	push   ebx
c000b1b8:	e8 c3 56 ff ff       	call   c0000880 <strcat>
c000b1bd:	83 c4 0c             	add    esp,0xc
c000b1c0:	68 96 00 00 00       	push   0x96
c000b1c5:	6a 00                	push   0x0
c000b1c7:	57                   	push   edi
c000b1c8:	e8 b7 54 ff ff       	call   c0000684 <memset>
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	56                   	push   esi
c000b1d4:	e8 6d fa ff ff       	call   c000ac46 <VgaText::doUpdate()>
c000b1d9:	83 c4 10             	add    esp,0x10
c000b1dc:	83 c4 1c             	add    esp,0x1c
c000b1df:	5b                   	pop    ebx
c000b1e0:	5e                   	pop    esi
c000b1e1:	5f                   	pop    edi
c000b1e2:	5d                   	pop    ebp
c000b1e3:	c3                   	ret    

c000b1e4 <VgaText::write(unsigned long long, void*, int*)>:
c000b1e4:	55                   	push   ebp
c000b1e5:	57                   	push   edi
c000b1e6:	56                   	push   esi
c000b1e7:	53                   	push   ebx
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b1ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b1f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b1f7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b1fe:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b201:	39 eb                	cmp    ebx,ebp
c000b203:	74 13                	je     c000b218 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b205:	43                   	inc    ebx
c000b206:	50                   	push   eax
c000b207:	50                   	push   eax
c000b208:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b20c:	50                   	push   eax
c000b20d:	56                   	push   esi
c000b20e:	e8 13 fc ff ff       	call   c000ae26 <VgaText::putchar(char)>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	eb e9                	jmp    c000b201 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b222:	56                   	push   esi
c000b223:	e8 1e fa ff ff       	call   c000ac46 <VgaText::doUpdate()>
c000b228:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b22c:	89 38                	mov    DWORD PTR [eax],edi
c000b22e:	83 c4 1c             	add    esp,0x1c
c000b231:	31 c0                	xor    eax,eax
c000b233:	5b                   	pop    ebx
c000b234:	5e                   	pop    esi
c000b235:	5f                   	pop    edi
c000b236:	5d                   	pop    ebp
c000b237:	c3                   	ret    

c000b238 <newTerminal(char*)>:
c000b238:	83 ec 28             	sub    esp,0x28
c000b23b:	68 c4 02 00 00       	push   0x2c4
c000b240:	e8 7e e7 ff ff       	call   c00099c3 <malloc>
c000b245:	5a                   	pop    edx
c000b246:	59                   	pop    ecx
c000b247:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b24b:	50                   	push   eax
c000b24c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b250:	e8 29 fd ff ff       	call   c000af7e <VgaText::VgaText(char const*)>
c000b255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b259:	83 c4 2c             	add    esp,0x2c
c000b25c:	c3                   	ret    
c000b25d:	66 90                	xchg   ax,ax
c000b25f:	90                   	nop

c000b260 <TSS::TSS()>:
c000b260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b264:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b26b:	90                   	nop
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop
c000b26e:	66 90                	xchg   ax,ax

c000b270 <TSS::setESP(unsigned long)>:
c000b270:	55                   	push   ebp
c000b271:	89 e5                	mov    ebp,esp
c000b273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b279:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b27c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b27f:	90                   	nop
c000b280:	5d                   	pop    ebp
c000b281:	c3                   	ret    
c000b282:	66 90                	xchg   ax,ax

c000b284 <TSS::flush()>:
c000b284:	55                   	push   ebp
c000b285:	89 e5                	mov    ebp,esp
c000b287:	83 ec 10             	sub    esp,0x10
c000b28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b28d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b28f:	83 c8 03             	or     eax,0x3
c000b292:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b296:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b29a:	66 89 d0             	mov    ax,dx
c000b29d:	0f 00 d8             	ltr    ax
c000b2a0:	90                   	nop
c000b2a1:	c9                   	leave  
c000b2a2:	c3                   	ret    
c000b2a3:	90                   	nop

c000b2a4 <TSS::setup(unsigned long, unsigned long)>:
c000b2a4:	55                   	push   ebp
c000b2a5:	89 e5                	mov    ebp,esp
c000b2a7:	83 ec 18             	sub    esp,0x18
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	6a 68                	push   0x68
c000b2af:	e8 0f e7 ff ff       	call   c00099c3 <malloc>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	89 c2                	mov    edx,eax
c000b2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2c5:	83 ec 04             	sub    esp,0x4
c000b2c8:	6a 68                	push   0x68
c000b2ca:	6a 00                	push   0x0
c000b2cc:	50                   	push   eax
c000b2cd:	e8 b2 53 ff ff       	call   c0000684 <memset>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2db:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2e7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b2f6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2ff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b30b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b317:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b323:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b33b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b347:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b34a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b356:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b35c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b35f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b369:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b36c:	0f 20 da             	mov    edx,cr3
c000b36f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b372:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b375:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37e:	83 ec 08             	sub    esp,0x8
c000b381:	50                   	push   eax
c000b382:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b385:	50                   	push   eax
c000b386:	e8 95 de ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b38b:	83 c4 10             	add    esp,0x10
c000b38e:	83 ec 08             	sub    esp,0x8
c000b391:	6a 68                	push   0x68
c000b393:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b396:	50                   	push   eax
c000b397:	e8 a0 de ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b3a3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b3a6:	83 e0 0f             	and    eax,0xf
c000b3a9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b3ac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b3af:	83 c8 40             	or     eax,0x40
c000b3b2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b3b5:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000b3ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3c0:	05 78 01 00 00       	add    eax,0x178
c000b3c5:	83 ec 04             	sub    esp,0x4
c000b3c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b3cb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b3ce:	50                   	push   eax
c000b3cf:	e8 9c de ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b3d4:	83 c4 10             	add    esp,0x10
c000b3d7:	89 c2                	mov    edx,eax
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	89 10                	mov    DWORD PTR [eax],edx
c000b3de:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000b3e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3e9:	05 78 01 00 00       	add    eax,0x178
c000b3ee:	83 ec 0c             	sub    esp,0xc
c000b3f1:	50                   	push   eax
c000b3f2:	e8 a3 de ff ff       	call   c000929a <GDT::flush()>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b3ff:	c9                   	leave  
c000b400:	c3                   	ret    
c000b401:	90                   	nop

c000b402 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b406:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b40a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b412:	75 08                	jne    c000b41c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b414:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b41a:	eb 38                	jmp    c000b454 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b41c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b421:	75 17                	jne    c000b43a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b42b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b431:	8b 10                	mov    edx,DWORD PTR [eax]
c000b433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b437:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b43a:	89 c1                	mov    ecx,eax
c000b43c:	83 e1 fd             	and    ecx,0xfffffffd
c000b43f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b445:	74 cd                	je     c000b414 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b447:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b44c:	83 e0 ef             	and    eax,0xffffffef
c000b44f:	83 f8 08             	cmp    eax,0x8
c000b452:	76 c0                	jbe    c000b414 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b454:	31 c0                	xor    eax,eax
c000b456:	c3                   	ret    
c000b457:	90                   	nop

c000b458 <ReservedFilename::isAtty()>:
c000b458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b45c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b45f:	31 c0                	xor    eax,eax
c000b461:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b467:	74 09                	je     c000b472 <ReservedFilename::isAtty()+0x1a>
c000b469:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b46f:	0f 94 c0             	sete   al
c000b472:	c3                   	ret    
c000b473:	90                   	nop

c000b474 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b478:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b47c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b47f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b483:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b488:	75 08                	jne    c000b492 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b48a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b490:	eb 3d                	jmp    c000b4cf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b492:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b497:	75 17                	jne    c000b4b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b49e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4ad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b4b0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b4b5:	75 04                	jne    c000b4bb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b4b7:	89 0a                	mov    DWORD PTR [edx],ecx
c000b4b9:	eb 14                	jmp    c000b4cf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b4bb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b4c0:	74 c8                	je     c000b48a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b4c2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b4c7:	83 e0 ef             	and    eax,0xffffffef
c000b4ca:	83 f8 08             	cmp    eax,0x8
c000b4cd:	76 bb                	jbe    c000b48a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b4cf:	31 c0                	xor    eax,eax
c000b4d1:	c3                   	ret    

c000b4d2 <UnixFile::getFileDescriptor()>:
c000b4d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4d9:	c3                   	ret    

c000b4da <UnixFile::UnixFile(int)>:
c000b4da:	53                   	push   ebx
c000b4db:	83 ec 28             	sub    esp,0x28
c000b4de:	ba 1c 3c 02 c0       	mov    edx,0xc0023c1c
c000b4e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b4e7:	89 10                	mov    DWORD PTR [eax],edx
c000b4e9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b4f1:	0f 8f 8c 01 00 00    	jg     c000b683 <UnixFile::UnixFile(int)+0x1a9>
c000b4f7:	a1 e0 68 02 c0       	mov    eax,ds:0xc00268e0
c000b4fc:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ff:	89 15 e0 68 02 c0    	mov    DWORD PTR ds:0xc00268e0,edx
c000b505:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b509:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b50c:	83 ec 08             	sub    esp,0x8
c000b50f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b513:	68 b8 75 02 c0       	push   0xc00275b8
c000b518:	e8 0f 6d 01 00       	call   c002222c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	a0 b4 75 02 c0       	mov    al,ds:0xc00275b4
c000b525:	83 f0 01             	xor    eax,0x1
c000b528:	84 c0                	test   al,al
c000b52a:	0f 84 54 01 00 00    	je     c000b684 <UnixFile::UnixFile(int)+0x1aa>
c000b530:	c6 05 b4 75 02 c0 01 	mov    BYTE PTR ds:0xc00275b4,0x1
c000b537:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b53f:	83 ec 0c             	sub    esp,0xc
c000b542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b546:	e8 78 e4 ff ff       	call   c00099c3 <malloc>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	89 c3                	mov    ebx,eax
c000b550:	83 ec 08             	sub    esp,0x8
c000b553:	68 03 ff ff 0f       	push   0xfffff03
c000b558:	53                   	push   ebx
c000b559:	e8 2c 01 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 1d ac 75 02 c0    	mov    DWORD PTR ds:0xc00275ac,ebx
c000b567:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b576:	e8 48 e4 ff ff       	call   c00099c3 <malloc>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	89 c3                	mov    ebx,eax
c000b580:	83 ec 08             	sub    esp,0x8
c000b583:	68 01 ff ff 0f       	push   0xfffff01
c000b588:	53                   	push   ebx
c000b589:	e8 fc 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b58e:	83 c4 10             	add    esp,0x10
c000b591:	89 1d b0 75 02 c0    	mov    DWORD PTR ds:0xc00275b0,ebx
c000b597:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b59f:	83 ec 0c             	sub    esp,0xc
c000b5a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b5a6:	e8 18 e4 ff ff       	call   c00099c3 <malloc>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	89 c3                	mov    ebx,eax
c000b5b0:	83 ec 08             	sub    esp,0x8
c000b5b3:	68 00 ff ff 0f       	push   0xfffff00
c000b5b8:	53                   	push   ebx
c000b5b9:	e8 cc 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b5be:	83 c4 10             	add    esp,0x10
c000b5c1:	89 1d a4 75 02 c0    	mov    DWORD PTR ds:0xc00275a4,ebx
c000b5c7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b5cf:	83 ec 0c             	sub    esp,0xc
c000b5d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b5d6:	e8 e8 e3 ff ff       	call   c00099c3 <malloc>
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	89 c3                	mov    ebx,eax
c000b5e0:	83 ec 08             	sub    esp,0x8
c000b5e3:	68 02 ff ff 0f       	push   0xfffff02
c000b5e8:	53                   	push   ebx
c000b5e9:	e8 9c 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b5ee:	83 c4 10             	add    esp,0x10
c000b5f1:	89 1d a8 75 02 c0    	mov    DWORD PTR ds:0xc00275a8,ebx
c000b5f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b5ff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b604:	7f 7e                	jg     c000b684 <UnixFile::UnixFile(int)+0x1aa>
c000b606:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b60e:	83 ec 0c             	sub    esp,0xc
c000b611:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b615:	e8 a9 e3 ff ff       	call   c00099c3 <malloc>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 c3                	mov    ebx,eax
c000b61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b623:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b628:	83 ec 08             	sub    esp,0x8
c000b62b:	50                   	push   eax
c000b62c:	53                   	push   ebx
c000b62d:	e8 58 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b639:	89 1c 85 80 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a80],ebx
c000b640:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b648:	83 ec 0c             	sub    esp,0xc
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	e8 6f e3 ff ff       	call   c00099c3 <malloc>
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	89 c3                	mov    ebx,eax
c000b659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b65d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b662:	83 ec 08             	sub    esp,0x8
c000b665:	50                   	push   eax
c000b666:	53                   	push   ebx
c000b667:	e8 1e 00 00 00       	call   c000b68a <ReservedFilename::ReservedFilename(int)>
c000b66c:	83 c4 10             	add    esp,0x10
c000b66f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b673:	89 1c 85 40 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ac0],ebx
c000b67a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b67e:	e9 7c ff ff ff       	jmp    c000b5ff <UnixFile::UnixFile(int)+0x125>
c000b683:	90                   	nop
c000b684:	83 c4 28             	add    esp,0x28
c000b687:	5b                   	pop    ebx
c000b688:	c3                   	ret    
c000b689:	90                   	nop

c000b68a <ReservedFilename::ReservedFilename(int)>:
c000b68a:	83 ec 0c             	sub    esp,0xc
c000b68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b691:	83 ec 08             	sub    esp,0x8
c000b694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b698:	50                   	push   eax
c000b699:	e8 3c fe ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	ba 38 3c 02 c0       	mov    edx,0xc0023c38
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	89 10                	mov    DWORD PTR [eax],edx
c000b6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6b7:	90                   	nop
c000b6b8:	83 c4 0c             	add    esp,0xc
c000b6bb:	c3                   	ret    

c000b6bc <UnixFile::~UnixFile()>:
c000b6bc:	83 ec 1c             	sub    esp,0x1c
c000b6bf:	ba 1c 3c 02 c0       	mov    edx,0xc0023c1c
c000b6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6c8:	89 10                	mov    DWORD PTR [eax],edx
c000b6ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b6d6:	7f 73                	jg     c000b74b <UnixFile::~UnixFile()+0x8f>
c000b6d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	68 b8 75 02 c0       	push   0xc00275b8
c000b6e8:	e8 13 6c 01 00       	call   c0022300 <LinkedList<UnixFile>::getFirstElement()>
c000b6ed:	83 c4 10             	add    esp,0x10
c000b6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	68 b8 75 02 c0       	push   0xc00275b8
c000b6fc:	e8 07 6c 01 00       	call   c0022308 <LinkedList<UnixFile>::removeFirst()>
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b708:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b70c:	74 40                	je     c000b74e <UnixFile::~UnixFile()+0x92>
c000b70e:	83 ec 08             	sub    esp,0x8
c000b711:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b715:	68 b8 75 02 c0       	push   0xc00275b8
c000b71a:	e8 0d 6b 01 00       	call   c002222c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b726:	8d 50 01             	lea    edx,[eax+0x1]
c000b729:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b72d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b732:	0f 94 c0             	sete   al
c000b735:	84 c0                	test   al,al
c000b737:	74 a7                	je     c000b6e0 <UnixFile::~UnixFile()+0x24>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	68 f4 3b 02 c0       	push   0xc0023bf4
c000b741:	e8 1d 90 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	eb 95                	jmp    c000b6e0 <UnixFile::~UnixFile()+0x24>
c000b74b:	90                   	nop
c000b74c:	eb 01                	jmp    c000b74f <UnixFile::~UnixFile()+0x93>
c000b74e:	90                   	nop
c000b74f:	90                   	nop
c000b750:	83 c4 1c             	add    esp,0x1c
c000b753:	c3                   	ret    

c000b754 <UnixFile::~UnixFile()>:
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	83 ec 0c             	sub    esp,0xc
c000b75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75e:	e8 59 ff ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	83 ec 08             	sub    esp,0x8
c000b769:	6a 0c                	push   0xc
c000b76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76f:	e8 ee 13 00 00       	call   c000cb62 <operator delete(void*, unsigned long)>
c000b774:	83 c4 10             	add    esp,0x10
c000b777:	83 c4 0c             	add    esp,0xc
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <ReservedFilename::~ReservedFilename()>:
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	ba 38 3c 02 c0       	mov    edx,0xc0023c38
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	89 10                	mov    DWORD PTR [eax],edx
c000b78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78e:	83 ec 0c             	sub    esp,0xc
c000b791:	50                   	push   eax
c000b792:	e8 25 ff ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	90                   	nop
c000b79b:	83 c4 0c             	add    esp,0xc
c000b79e:	c3                   	ret    
c000b79f:	90                   	nop

c000b7a0 <ReservedFilename::~ReservedFilename()>:
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	83 ec 0c             	sub    esp,0xc
c000b7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7aa:	e8 cd ff ff ff       	call   c000b77c <ReservedFilename::~ReservedFilename()>
c000b7af:	83 c4 10             	add    esp,0x10
c000b7b2:	83 ec 08             	sub    esp,0x8
c000b7b5:	6a 0c                	push   0xc
c000b7b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7bb:	e8 a2 13 00 00       	call   c000cb62 <operator delete(void*, unsigned long)>
c000b7c0:	83 c4 10             	add    esp,0x10
c000b7c3:	83 c4 0c             	add    esp,0xc
c000b7c6:	c3                   	ret    

c000b7c7 <getFromFileDescriptor(int)>:
c000b7c7:	53                   	push   ebx
c000b7c8:	83 ec 08             	sub    esp,0x8
c000b7cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b7d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b7db:	7f 2c                	jg     c000b809 <getFromFileDescriptor(int)+0x42>
c000b7dd:	83 ec 0c             	sub    esp,0xc
c000b7e0:	68 b8 75 02 c0       	push   0xc00275b8
c000b7e5:	e8 16 6b 01 00       	call   c0022300 <LinkedList<UnixFile>::getFirstElement()>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	85 c0                	test   eax,eax
c000b7ef:	75 04                	jne    c000b7f5 <getFromFileDescriptor(int)+0x2e>
c000b7f1:	31 c0                	xor    eax,eax
c000b7f3:	eb 6e                	jmp    c000b863 <getFromFileDescriptor(int)+0x9c>
c000b7f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b7f8:	74 69                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b7fa:	52                   	push   edx
c000b7fb:	52                   	push   edx
c000b7fc:	50                   	push   eax
c000b7fd:	68 b8 75 02 c0       	push   0xc00275b8
c000b802:	e8 a3 6b 01 00       	call   c00223aa <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b807:	eb e1                	jmp    c000b7ea <getFromFileDescriptor(int)+0x23>
c000b809:	a1 ac 75 02 c0       	mov    eax,ds:0xc00275ac
c000b80e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b814:	74 4d                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b816:	a1 b0 75 02 c0       	mov    eax,ds:0xc00275b0
c000b81b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b821:	74 40                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b823:	a1 a8 75 02 c0       	mov    eax,ds:0xc00275a8
c000b828:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b82e:	74 33                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b830:	a1 a4 75 02 c0       	mov    eax,ds:0xc00275a4
c000b835:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b83b:	74 26                	je     c000b863 <getFromFileDescriptor(int)+0x9c>
c000b83d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b843:	83 f8 08             	cmp    eax,0x8
c000b846:	77 09                	ja     c000b851 <getFromFileDescriptor(int)+0x8a>
c000b848:	8b 04 85 80 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a80]
c000b84f:	eb 12                	jmp    c000b863 <getFromFileDescriptor(int)+0x9c>
c000b851:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b857:	83 fb 08             	cmp    ebx,0x8
c000b85a:	77 95                	ja     c000b7f1 <getFromFileDescriptor(int)+0x2a>
c000b85c:	8b 04 9d 40 75 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8ac0]
c000b863:	83 c4 08             	add    esp,0x8
c000b866:	5b                   	pop    ebx
c000b867:	c3                   	ret    

c000b868 <__static_initialization_and_destruction_0(int, int)>:
c000b868:	83 ec 0c             	sub    esp,0xc
c000b86b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b870:	75 34                	jne    c000b8a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b872:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b87a:	75 2a                	jne    c000b8a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	68 b8 75 02 c0       	push   0xc00275b8
c000b884:	e8 61 69 01 00       	call   c00221ea <LinkedList<UnixFile>::LinkedList()>
c000b889:	83 c4 10             	add    esp,0x10
c000b88c:	83 ec 04             	sub    esp,0x4
c000b88f:	68 10 67 02 c0       	push   0xc0026710
c000b894:	68 b8 75 02 c0       	push   0xc00275b8
c000b899:	68 e8 21 02 c0       	push   0xc00221e8
c000b89e:	e8 39 12 00 00       	call   c000cadc <__cxa_atexit>
c000b8a3:	83 c4 10             	add    esp,0x10
c000b8a6:	90                   	nop
c000b8a7:	83 c4 0c             	add    esp,0xc
c000b8aa:	c3                   	ret    

c000b8ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b8ab:	83 ec 0c             	sub    esp,0xc
c000b8ae:	83 ec 08             	sub    esp,0x8
c000b8b1:	68 ff ff 00 00       	push   0xffff
c000b8b6:	6a 01                	push   0x1
c000b8b8:	e8 ab ff ff ff       	call   c000b868 <__static_initialization_and_destruction_0(int, int)>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	83 c4 0c             	add    esp,0xc
c000b8c3:	c3                   	ret    

c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b8c4:	53                   	push   ebx
c000b8c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b8cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b8d3:	89 c8                	mov    eax,ecx
c000b8d5:	d1 e8                	shr    eax,1
c000b8d7:	03 05 e8 68 02 c0    	add    eax,DWORD PTR ds:0xc00268e8
c000b8dd:	83 e1 01             	and    ecx,0x1
c000b8e0:	8a 10                	mov    dl,BYTE PTR [eax]
c000b8e2:	75 09                	jne    c000b8ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b8e4:	83 e2 f0             	and    edx,0xfffffff0
c000b8e7:	09 da                	or     edx,ebx
c000b8e9:	88 10                	mov    BYTE PTR [eax],dl
c000b8eb:	5b                   	pop    ebx
c000b8ec:	c3                   	ret    
c000b8ed:	c1 e3 04             	shl    ebx,0x4
c000b8f0:	83 e2 0f             	and    edx,0xf
c000b8f3:	09 da                	or     edx,ebx
c000b8f5:	88 10                	mov    BYTE PTR [eax],dl
c000b8f7:	5b                   	pop    ebx
c000b8f8:	c3                   	ret    

c000b8f9 <Virt::getPageState(unsigned long)>:
c000b8f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fd:	8b 0d e8 68 02 c0    	mov    ecx,DWORD PTR ds:0xc00268e8
c000b903:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b909:	89 d0                	mov    eax,edx
c000b90b:	d1 e8                	shr    eax,1
c000b90d:	83 e2 01             	and    edx,0x1
c000b910:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b913:	75 04                	jne    c000b919 <Virt::getPageState(unsigned long)+0x20>
c000b915:	83 e0 0f             	and    eax,0xf
c000b918:	c3                   	ret    
c000b919:	c0 e8 04             	shr    al,0x4
c000b91c:	c3                   	ret    

c000b91d <Virt::allocateKernelVirtualPages(int)>:
c000b91d:	55                   	push   ebp
c000b91e:	31 ed                	xor    ebp,ebp
c000b920:	57                   	push   edi
c000b921:	56                   	push   esi
c000b922:	53                   	push   ebx
c000b923:	31 db                	xor    ebx,ebx
c000b925:	83 ec 1c             	sub    esp,0x1c
c000b928:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b92c:	8b 3d e4 68 02 c0    	mov    edi,DWORD PTR ds:0xc00268e4
c000b932:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b937:	57                   	push   edi
c000b938:	e8 bc ff ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000b93d:	5a                   	pop    edx
c000b93e:	84 c0                	test   al,al
c000b940:	75 3a                	jne    c000b97c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b942:	85 db                	test   ebx,ebx
c000b944:	75 02                	jne    c000b948 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b946:	89 fd                	mov    ebp,edi
c000b948:	43                   	inc    ebx
c000b949:	39 f3                	cmp    ebx,esi
c000b94b:	74 5a                	je     c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b94d:	47                   	inc    edi
c000b94e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b954:	76 31                	jbe    c000b987 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b956:	c7 05 e4 68 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00268e4,0xc8000
c000b960:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b965:	75 28                	jne    c000b98f <Virt::allocateKernelVirtualPages(int)+0x72>
c000b967:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b96c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b971:	57                   	push   edi
c000b972:	e8 82 ff ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000b977:	5a                   	pop    edx
c000b978:	84 c0                	test   al,al
c000b97a:	74 c6                	je     c000b942 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b97c:	31 db                	xor    ebx,ebx
c000b97e:	47                   	inc    edi
c000b97f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b985:	77 cf                	ja     c000b956 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b987:	89 3d e4 68 02 c0    	mov    DWORD PTR ds:0xc00268e4,edi
c000b98d:	eb a8                	jmp    c000b937 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b98f:	83 ec 0c             	sub    esp,0xc
c000b992:	68 4c 3c 02 c0       	push   0xc0023c4c
c000b997:	e8 c7 8d 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000b99c:	8b 3d e4 68 02 c0    	mov    edi,DWORD PTR ds:0xc00268e4
c000b9a2:	83 c4 10             	add    esp,0x10
c000b9a5:	eb 90                	jmp    c000b937 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b9a7:	89 2d e4 68 02 c0    	mov    DWORD PTR ds:0xc00268e4,ebp
c000b9ad:	4b                   	dec    ebx
c000b9ae:	74 5f                	je     c000ba0f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b9b0:	85 f6                	test   esi,esi
c000b9b2:	74 3d                	je     c000b9f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b9b4:	89 e8                	mov    eax,ebp
c000b9b6:	31 db                	xor    ebx,ebx
c000b9b8:	8d 7e ff             	lea    edi,[esi-0x1]
c000b9bb:	eb 14                	jmp    c000b9d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b9bd:	6a 01                	push   0x1
c000b9bf:	43                   	inc    ebx
c000b9c0:	50                   	push   eax
c000b9c1:	e8 fe fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b9c6:	58                   	pop    eax
c000b9c7:	39 f3                	cmp    ebx,esi
c000b9c9:	5a                   	pop    edx
c000b9ca:	74 25                	je     c000b9f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b9cc:	a1 e4 68 02 c0       	mov    eax,ds:0xc00268e4
c000b9d1:	8d 50 01             	lea    edx,[eax+0x1]
c000b9d4:	85 db                	test   ebx,ebx
c000b9d6:	89 15 e4 68 02 c0    	mov    DWORD PTR ds:0xc00268e4,edx
c000b9dc:	74 20                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b9de:	39 df                	cmp    edi,ebx
c000b9e0:	75 db                	jne    c000b9bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b9e2:	6a 03                	push   0x3
c000b9e4:	43                   	inc    ebx
c000b9e5:	50                   	push   eax
c000b9e6:	e8 d9 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b9eb:	59                   	pop    ecx
c000b9ec:	39 f3                	cmp    ebx,esi
c000b9ee:	58                   	pop    eax
c000b9ef:	75 db                	jne    c000b9cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b9f1:	83 c4 1c             	add    esp,0x1c
c000b9f4:	89 e8                	mov    eax,ebp
c000b9f6:	5b                   	pop    ebx
c000b9f7:	c1 e0 0c             	shl    eax,0xc
c000b9fa:	5e                   	pop    esi
c000b9fb:	5f                   	pop    edi
c000b9fc:	5d                   	pop    ebp
c000b9fd:	c3                   	ret    
c000b9fe:	6a 02                	push   0x2
c000ba00:	bb 01 00 00 00       	mov    ebx,0x1
c000ba05:	50                   	push   eax
c000ba06:	e8 b9 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba0b:	58                   	pop    eax
c000ba0c:	5a                   	pop    edx
c000ba0d:	eb bd                	jmp    c000b9cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba0f:	6a 04                	push   0x4
c000ba11:	8d 45 01             	lea    eax,[ebp+0x1]
c000ba14:	55                   	push   ebp
c000ba15:	a3 e4 68 02 c0       	mov    ds:0xc00268e4,eax
c000ba1a:	e8 a5 fe ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba1f:	59                   	pop    ecx
c000ba20:	89 e8                	mov    eax,ebp
c000ba22:	5b                   	pop    ebx
c000ba23:	c1 e0 0c             	shl    eax,0xc
c000ba26:	83 c4 1c             	add    esp,0x1c
c000ba29:	5b                   	pop    ebx
c000ba2a:	5e                   	pop    esi
c000ba2b:	5f                   	pop    edi
c000ba2c:	5d                   	pop    ebp
c000ba2d:	c3                   	ret    

c000ba2e <Virt::freeSwapfilePage(unsigned long)>:
c000ba2e:	53                   	push   ebx
c000ba2f:	8b 15 cc 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275cc
c000ba35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba39:	b8 01 00 00 00       	mov    eax,0x1
c000ba3e:	89 cb                	mov    ebx,ecx
c000ba40:	d3 e0                	shl    eax,cl
c000ba42:	c1 eb 05             	shr    ebx,0x5
c000ba45:	f7 d0                	not    eax
c000ba47:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000ba4a:	5b                   	pop    ebx
c000ba4b:	c3                   	ret    

c000ba4c <Virt::swapIDToSector(unsigned long)>:
c000ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba50:	0f af 05 ec 68 02 c0 	imul   eax,DWORD PTR ds:0xc00268ec
c000ba57:	03 05 f4 68 02 c0    	add    eax,DWORD PTR ds:0xc00268f4
c000ba5d:	c3                   	ret    

c000ba5e <Virt::allocateSwapfilePage()>:
c000ba5e:	55                   	push   ebp
c000ba5f:	31 d2                	xor    edx,edx
c000ba61:	57                   	push   edi
c000ba62:	56                   	push   esi
c000ba63:	53                   	push   ebx
c000ba64:	83 ec 0c             	sub    esp,0xc
c000ba67:	8b 0d ec 68 02 c0    	mov    ecx,DWORD PTR ds:0xc00268ec
c000ba6d:	a1 f0 68 02 c0       	mov    eax,ds:0xc00268f0
c000ba72:	f7 f1                	div    ecx
c000ba74:	39 0d f0 68 02 c0    	cmp    DWORD PTR ds:0xc00268f0,ecx
c000ba7a:	72 2d                	jb     c000baa9 <Virt::allocateSwapfilePage()+0x4b>
c000ba7c:	8b 35 cc 75 02 c0    	mov    esi,DWORD PTR ds:0xc00275cc
c000ba82:	8b 16                	mov    edx,DWORD PTR [esi]
c000ba84:	f6 c2 01             	test   dl,0x1
c000ba87:	74 3c                	je     c000bac5 <Virt::allocateSwapfilePage()+0x67>
c000ba89:	31 c9                	xor    ecx,ecx
c000ba8b:	bf 01 00 00 00       	mov    edi,0x1
c000ba90:	eb 12                	jmp    c000baa4 <Virt::allocateSwapfilePage()+0x46>
c000ba92:	89 fd                	mov    ebp,edi
c000ba94:	89 ca                	mov    edx,ecx
c000ba96:	d3 e5                	shl    ebp,cl
c000ba98:	c1 ea 05             	shr    edx,0x5
c000ba9b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000ba9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000baa0:	85 ea                	test   edx,ebp
c000baa2:	74 2a                	je     c000bace <Virt::allocateSwapfilePage()+0x70>
c000baa4:	41                   	inc    ecx
c000baa5:	39 c8                	cmp    eax,ecx
c000baa7:	77 e9                	ja     c000ba92 <Virt::allocateSwapfilePage()+0x34>
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	68 04 3e 02 c0       	push   0xc0023e04
c000bab1:	e8 ad 8c 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	31 c9                	xor    ecx,ecx
c000babb:	83 c4 0c             	add    esp,0xc
c000babe:	89 c8                	mov    eax,ecx
c000bac0:	5b                   	pop    ebx
c000bac1:	5e                   	pop    esi
c000bac2:	5f                   	pop    edi
c000bac3:	5d                   	pop    ebp
c000bac4:	c3                   	ret    
c000bac5:	89 f3                	mov    ebx,esi
c000bac7:	bd 01 00 00 00       	mov    ebp,0x1
c000bacc:	31 c9                	xor    ecx,ecx
c000bace:	09 ea                	or     edx,ebp
c000bad0:	89 c8                	mov    eax,ecx
c000bad2:	89 13                	mov    DWORD PTR [ebx],edx
c000bad4:	83 c4 0c             	add    esp,0xc
c000bad7:	5b                   	pop    ebx
c000bad8:	5e                   	pop    esi
c000bad9:	5f                   	pop    edi
c000bada:	5d                   	pop    ebp
c000badb:	c3                   	ret    

c000badc <Virt::virtualMemorySetup()>:
c000badc:	53                   	push   ebx
c000badd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bae2:	6a 0f                	push   0xf
c000bae4:	53                   	push   ebx
c000bae5:	43                   	inc    ebx
c000bae6:	e8 d9 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baeb:	58                   	pop    eax
c000baec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000baf2:	5a                   	pop    edx
c000baf3:	75 ed                	jne    c000bae2 <Virt::virtualMemorySetup()+0x6>
c000baf5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bafa:	6a 00                	push   0x0
c000bafc:	53                   	push   ebx
c000bafd:	43                   	inc    ebx
c000bafe:	e8 c1 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb03:	59                   	pop    ecx
c000bb04:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb0a:	58                   	pop    eax
c000bb0b:	75 ed                	jne    c000bafa <Virt::virtualMemorySetup()+0x1e>
c000bb0d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bb12:	6a 0f                	push   0xf
c000bb14:	53                   	push   ebx
c000bb15:	43                   	inc    ebx
c000bb16:	e8 a9 fd ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb1b:	58                   	pop    eax
c000bb1c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bb22:	5a                   	pop    edx
c000bb23:	75 ed                	jne    c000bb12 <Virt::virtualMemorySetup()+0x36>
c000bb25:	5b                   	pop    ebx
c000bb26:	c3                   	ret    

c000bb27 <Virt::setupPageSwapping(int)>:
c000bb27:	53                   	push   ebx
c000bb28:	83 ec 0c             	sub    esp,0xc
c000bb2b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb2f:	a1 68 7a 02 c0       	mov    eax,ds:0xc0027a68
c000bb34:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bb3a:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb3c:	53                   	push   ebx
c000bb3d:	c1 e3 0b             	shl    ebx,0xb
c000bb40:	68 1b 3e 02 c0       	push   0xc0023e1b
c000bb45:	50                   	push   eax
c000bb46:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bb49:	89 1d f0 68 02 c0    	mov    DWORD PTR ds:0xc00268f0,ebx
c000bb4f:	c6 05 f8 68 02 c0 43 	mov    BYTE PTR ds:0xc00268f8,0x43
c000bb56:	c1 eb 08             	shr    ebx,0x8
c000bb59:	a3 f4 68 02 c0       	mov    ds:0xc00268f4,eax
c000bb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb61:	c7 05 ec 68 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00268ec,0x8
c000bb6b:	e8 53 de ff ff       	call   c00099c3 <malloc>
c000bb70:	83 c4 0c             	add    esp,0xc
c000bb73:	89 c1                	mov    ecx,eax
c000bb75:	a3 cc 75 02 c0       	mov    ds:0xc00275cc,eax
c000bb7a:	31 d2                	xor    edx,edx
c000bb7c:	a1 f0 68 02 c0       	mov    eax,ds:0xc00268f0
c000bb81:	f7 35 ec 68 02 c0    	div    DWORD PTR ds:0xc00268ec
c000bb87:	c1 e8 05             	shr    eax,0x5
c000bb8a:	50                   	push   eax
c000bb8b:	6a 00                	push   0x0
c000bb8d:	51                   	push   ecx
c000bb8e:	e8 f1 4a ff ff       	call   c0000684 <memset>
c000bb93:	83 c4 18             	add    esp,0x18
c000bb96:	5b                   	pop    ebx
c000bb97:	c3                   	ret    

c000bb98 <VAS::VAS()>:
c000bb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bba7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb2:	a3 d0 75 02 c0       	mov    ds:0xc00275d0,eax
c000bbb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbbb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bbbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbc3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bbc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbca:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bbd1:	90                   	nop
c000bbd2:	c3                   	ret    
c000bbd3:	90                   	nop

c000bbd4 <VAS::VAS(VAS*)>:
c000bbd4:	83 ec 0c             	sub    esp,0xc
c000bbd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bbed:	83 ec 0c             	sub    esp,0xc
c000bbf0:	68 6c 3c 02 c0       	push   0xc0023c6c
c000bbf5:	e8 69 8b 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000bbfa:	83 c4 10             	add    esp,0x10
c000bbfd:	90                   	nop
c000bbfe:	83 c4 0c             	add    esp,0xc
c000bc01:	c3                   	ret    

c000bc02 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bc02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc06:	89 c2                	mov    edx,eax
c000bc08:	c1 e8 0a             	shr    eax,0xa
c000bc0b:	c1 ea 16             	shr    edx,0x16
c000bc0e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc13:	19 c9                	sbb    ecx,ecx
c000bc15:	c1 e2 0c             	shl    edx,0xc
c000bc18:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bc1e:	25 fc 0f 00 00       	and    eax,0xffc
c000bc23:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bc2a:	01 d0                	add    eax,edx
c000bc2c:	c3                   	ret    
c000bc2d:	90                   	nop

c000bc2e <VAS::getPageTableEntry(unsigned long)>:
c000bc2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bc32:	89 ca                	mov    edx,ecx
c000bc34:	c1 e9 0a             	shr    ecx,0xa
c000bc37:	c1 ea 16             	shr    edx,0x16
c000bc3a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bc40:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bc46:	c1 e0 0c             	shl    eax,0xc
c000bc49:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bc4c:	c3                   	ret    

c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>:
c000bc4d:	57                   	push   edi
c000bc4e:	56                   	push   esi
c000bc4f:	be 01 00 00 00       	mov    esi,0x1
c000bc54:	53                   	push   ebx
c000bc55:	83 ec 10             	sub    esp,0x10
c000bc58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc5c:	c1 eb 0c             	shr    ebx,0xc
c000bc5f:	eb 3f                	jmp    c000bca0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bc61:	83 ec 08             	sub    esp,0x8
c000bc64:	57                   	push   edi
c000bc65:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c000bc6b:	e8 be ff ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000bc70:	83 c4 10             	add    esp,0x10
c000bc73:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc75:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bc79:	f6 c4 04             	test   ah,0x4
c000bc7c:	75 5f                	jne    c000bcdd <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bc7e:	80 fa 04             	cmp    dl,0x4
c000bc81:	74 78                	je     c000bcfb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bc83:	80 fa 02             	cmp    dl,0x2
c000bc86:	0f 84 88 00 00 00    	je     c000bd14 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bc8c:	80 fa 03             	cmp    dl,0x3
c000bc8f:	0f 84 ad 00 00 00    	je     c000bd42 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bc95:	fe ca                	dec    dl
c000bc97:	0f 84 92 00 00 00    	je     c000bd2f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bc9d:	43                   	inc    ebx
c000bc9e:	31 f6                	xor    esi,esi
c000bca0:	53                   	push   ebx
c000bca1:	89 df                	mov    edi,ebx
c000bca3:	e8 51 fc ff ff       	call   c000b8f9 <Virt::getPageState(unsigned long)>
c000bca8:	c1 e7 0c             	shl    edi,0xc
c000bcab:	59                   	pop    ecx
c000bcac:	84 c0                	test   al,al
c000bcae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bcb2:	75 ad                	jne    c000bc61 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bcb4:	83 ec 0c             	sub    esp,0xc
c000bcb7:	68 32 3e 02 c0       	push   0xc0023e32
c000bcbc:	e8 a2 8a 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000bcc1:	58                   	pop    eax
c000bcc2:	5a                   	pop    edx
c000bcc3:	57                   	push   edi
c000bcc4:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c000bcca:	e8 5f ff ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcd4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bcd8:	f6 c4 04             	test   ah,0x4
c000bcdb:	74 c0                	je     c000bc9d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bcdd:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bce1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	50                   	push   eax
c000bcea:	e8 97 e2 ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c000bcef:	83 c4 10             	add    esp,0x10
c000bcf2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bcf6:	80 fa 04             	cmp    dl,0x4
c000bcf9:	75 88                	jne    c000bc83 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bcfb:	89 f0                	mov    eax,esi
c000bcfd:	84 c0                	test   al,al
c000bcff:	75 47                	jne    c000bd48 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bd01:	c7 44 24 20 90 3c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023c90
c000bd09:	83 c4 10             	add    esp,0x10
c000bd0c:	5b                   	pop    ebx
c000bd0d:	5e                   	pop    esi
c000bd0e:	5f                   	pop    edi
c000bd0f:	e9 4f 8a 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c000bd14:	89 f0                	mov    eax,esi
c000bd16:	84 c0                	test   al,al
c000bd18:	75 15                	jne    c000bd2f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd1a:	83 ec 0c             	sub    esp,0xc
c000bd1d:	68 4e 3e 02 c0       	push   0xc0023e4e
c000bd22:	e8 3c 8a 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	e9 6e ff ff ff       	jmp    c000bc9d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd2f:	83 ec 08             	sub    esp,0x8
c000bd32:	6a 00                	push   0x0
c000bd34:	53                   	push   ebx
c000bd35:	e8 8a fb ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd3a:	83 c4 10             	add    esp,0x10
c000bd3d:	e9 5b ff ff ff       	jmp    c000bc9d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd42:	89 f0                	mov    eax,esi
c000bd44:	84 c0                	test   al,al
c000bd46:	75 15                	jne    c000bd5d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bd48:	83 ec 08             	sub    esp,0x8
c000bd4b:	6a 00                	push   0x0
c000bd4d:	53                   	push   ebx
c000bd4e:	e8 71 fb ff ff       	call   c000b8c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	5b                   	pop    ebx
c000bd5a:	5e                   	pop    esi
c000bd5b:	5f                   	pop    edi
c000bd5c:	c3                   	ret    
c000bd5d:	c7 44 24 20 6a 3e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023e6a
c000bd65:	83 c4 10             	add    esp,0x10
c000bd68:	5b                   	pop    ebx
c000bd69:	5e                   	pop    esi
c000bd6a:	5f                   	pop    edi
c000bd6b:	e9 f3 89 00 00       	jmp    c0014763 <Krnl::panic(char const*)>

c000bd70 <VAS::freeAllocatedPages(unsigned long)>:
c000bd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd78:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bd7c:	74 09                	je     c000bd87 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bd7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bd82:	e9 c6 fe ff ff       	jmp    c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c000bd87:	c7 44 24 04 b4 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023cb4
c000bd8f:	e9 af 0e 00 00       	jmp    c000cc43 <Dbg::kprintf(char const*, ...)>

c000bd94 <VAS::virtualToPhysical(unsigned long)>:
c000bd94:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bd98:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bd9c:	e8 8d fe ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000bda1:	5a                   	pop    edx
c000bda2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bda4:	59                   	pop    ecx
c000bda5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <VAS::reflagRange(unsigned long, int, int, int)>:
c000bdac:	55                   	push   ebp
c000bdad:	57                   	push   edi
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdb4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bdb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdbc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdc0:	85 db                	test   ebx,ebx
c000bdc2:	7e 22                	jle    c000bde6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bdc4:	c1 e3 0c             	shl    ebx,0xc
c000bdc7:	01 f3                	add    ebx,esi
c000bdc9:	56                   	push   esi
c000bdca:	81 c6 00 10 00 00    	add    esi,0x1000
c000bdd0:	55                   	push   ebp
c000bdd1:	e8 58 fe ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000bdd6:	5a                   	pop    edx
c000bdd7:	59                   	pop    ecx
c000bdd8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdda:	21 f9                	and    ecx,edi
c000bddc:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bde0:	39 f3                	cmp    ebx,esi
c000bde2:	89 08                	mov    DWORD PTR [eax],ecx
c000bde4:	75 e3                	jne    c000bdc9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bde6:	5b                   	pop    ebx
c000bde7:	5e                   	pop    esi
c000bde8:	5f                   	pop    edi
c000bde9:	5d                   	pop    ebp
c000bdea:	c3                   	ret    
c000bdeb:	90                   	nop

c000bdec <VAS::setToWriteCombining(unsigned long, int)>:
c000bdec:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000bdf1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bdf7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bdfe:	75 01                	jne    c000be01 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000be00:	c3                   	ret    
c000be01:	68 80 00 00 00       	push   0x80
c000be06:	6a ff                	push   0xffffffff
c000be08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be14:	e8 93 ff ff ff       	call   c000bdac <VAS::reflagRange(unsigned long, int, int, int)>
c000be19:	83 c4 14             	add    esp,0x14
c000be1c:	c3                   	ret    
c000be1d:	90                   	nop

c000be1e <VAS::mapOtherVASIn(bool, VAS*)>:
c000be1e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000be23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000be2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be2e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000be31:	19 c0                	sbb    eax,eax
c000be33:	83 ca 03             	or     edx,0x3
c000be36:	83 e0 fc             	and    eax,0xfffffffc
c000be39:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000be40:	0f 20 d8             	mov    eax,cr3
c000be43:	0f 22 d8             	mov    cr3,eax
c000be46:	c3                   	ret    
c000be47:	90                   	nop

c000be48 <VAS::~VAS()>:
c000be48:	83 ec 2c             	sub    esp,0x2c
c000be4b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be53:	fa                   	cli    
c000be54:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000be59:	40                   	inc    eax
c000be5a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000be5f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000be64:	8b 00                	mov    eax,DWORD PTR [eax]
c000be66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be69:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000be6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000be73:	6a 01                	push   0x1
c000be75:	50                   	push   eax
c000be76:	e8 a3 ff ff ff       	call   c000be1e <VAS::mapOtherVASIn(bool, VAS*)>
c000be7b:	83 c4 0c             	add    esp,0xc
c000be7e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000be86:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000be8e:	0f 8f d4 00 00 00    	jg     c000bf68 <VAS::~VAS()+0x120>
c000be94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be9f:	c1 e2 02             	shl    edx,0x2
c000bea2:	01 d0                	add    eax,edx
c000bea4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beae:	83 e0 01             	and    eax,0x1
c000beb1:	0f 84 a8 00 00 00    	je     c000bf5f <VAS::~VAS()+0x117>
c000beb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bebf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bec7:	7f 72                	jg     c000bf3b <VAS::~VAS()+0xf3>
c000bec9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000becd:	c1 e0 0a             	shl    eax,0xa
c000bed0:	89 c2                	mov    edx,eax
c000bed2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bed6:	01 d0                	add    eax,edx
c000bed8:	c1 e0 0c             	shl    eax,0xc
c000bedb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bedf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bee4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bee6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bee9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000beef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bef3:	6a 01                	push   0x1
c000bef5:	50                   	push   eax
c000bef6:	e8 07 fd ff ff       	call   c000bc02 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000befb:	83 c4 0c             	add    esp,0xc
c000befe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf06:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf10:	25 01 04 00 00       	and    eax,0x401
c000bf15:	3d 01 04 00 00       	cmp    eax,0x401
c000bf1a:	75 19                	jne    c000bf35 <VAS::~VAS()+0xed>
c000bf1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf20:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf25:	83 ec 0c             	sub    esp,0xc
c000bf28:	50                   	push   eax
c000bf29:	e8 58 e0 ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c000bf2e:	83 c4 10             	add    esp,0x10
c000bf31:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf35:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bf39:	eb 84                	jmp    c000bebf <VAS::~VAS()+0x77>
c000bf3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf3f:	25 00 04 00 00       	and    eax,0x400
c000bf44:	74 19                	je     c000bf5f <VAS::~VAS()+0x117>
c000bf46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf4f:	83 ec 0c             	sub    esp,0xc
c000bf52:	50                   	push   eax
c000bf53:	e8 2e e0 ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf5f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bf63:	e9 1e ff ff ff       	jmp    c000be86 <VAS::~VAS()+0x3e>
c000bf68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf6f:	83 ec 0c             	sub    esp,0xc
c000bf72:	50                   	push   eax
c000bf73:	e8 d5 fc ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf7f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf82:	83 ec 0c             	sub    esp,0xc
c000bf85:	50                   	push   eax
c000bf86:	e8 fb df ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c000bf8b:	83 c4 10             	add    esp,0x10
c000bf8e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bf96:	c1 e0 02             	shl    eax,0x2
c000bf99:	83 ec 08             	sub    esp,0x8
c000bf9c:	50                   	push   eax
c000bf9d:	68 d8 3c 02 c0       	push   0xc0023cd8
c000bfa2:	e8 9c 0c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000bfaf:	48                   	dec    eax
c000bfb0:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000bfb5:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000bfba:	85 c0                	test   eax,eax
c000bfbc:	75 01                	jne    c000bfbf <VAS::~VAS()+0x177>
c000bfbe:	fb                   	sti    
c000bfbf:	90                   	nop
c000bfc0:	83 c4 2c             	add    esp,0x2c
c000bfc3:	c3                   	ret    

c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bfc4:	55                   	push   ebp
c000bfc5:	57                   	push   edi
c000bfc6:	56                   	push   esi
c000bfc7:	53                   	push   ebx
c000bfc8:	83 ec 1c             	sub    esp,0x1c
c000bfcb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bfcf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bfd3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bfd9:	77 08                	ja     c000bfe3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bfdb:	0f 20 d8             	mov    eax,cr3
c000bfde:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bfe1:	75 47                	jne    c000c02a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bfe3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfe7:	09 d8                	or     eax,ebx
c000bfe9:	a9 ff 0f 00 00       	test   eax,0xfff
c000bfee:	75 57                	jne    c000c047 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bff0:	89 de                	mov    esi,ebx
c000bff2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bff5:	c1 ee 16             	shr    esi,0x16
c000bff8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bfff:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c003:	74 54                	je     c000c059 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c005:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c009:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c00f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c013:	c1 e6 0c             	shl    esi,0xc
c000c016:	c1 eb 0a             	shr    ebx,0xa
c000c019:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c01f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c022:	83 c4 1c             	add    esp,0x1c
c000c025:	5b                   	pop    ebx
c000c026:	5e                   	pop    esi
c000c027:	5f                   	pop    edi
c000c028:	5d                   	pop    ebp
c000c029:	c3                   	ret    
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	68 f8 3c 02 c0       	push   0xc0023cf8
c000c032:	e8 0c 0c 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c03e:	09 d8                	or     eax,ebx
c000c040:	a9 ff 0f 00 00       	test   eax,0xfff
c000c045:	74 a9                	je     c000bff0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c047:	83 ec 0c             	sub    esp,0xc
c000c04a:	68 60 3d 02 c0       	push   0xc0023d60
c000c04f:	e8 0f 87 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000c054:	83 c4 10             	add    esp,0x10
c000c057:	eb 97                	jmp    c000bff0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c059:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c05d:	e8 a7 df ff ff       	call   c000a009 <Phys::allocatePage()>
c000c062:	83 ec 0c             	sub    esp,0xc
c000c065:	89 c5                	mov    ebp,eax
c000c067:	8b 0d d0 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275d0
c000c06d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c071:	6a 01                	push   0x1
c000c073:	e8 a5 f8 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c078:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c07f:	6a 01                	push   0x1
c000c081:	50                   	push   eax
c000c082:	55                   	push   ebp
c000c083:	81 cd 07 04 00 00    	or     ebp,0x407
c000c089:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c08d:	51                   	push   ecx
c000c08e:	e8 27 02 00 00       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c093:	83 c4 1c             	add    esp,0x1c
c000c096:	68 00 10 00 00       	push   0x1000
c000c09b:	6a 00                	push   0x0
c000c09d:	50                   	push   eax
c000c09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a2:	e8 dd 45 ff ff       	call   c0000684 <memset>
c000c0a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c0ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c0ae:	e8 9a fb ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c000c0b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0b7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0ba:	83 c4 10             	add    esp,0x10
c000c0bd:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c0c0:	e9 40 ff ff ff       	jmp    c000c005 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c0c5:	90                   	nop

c000c0c6 <VAS::allocatePages(int, int)>:
c000c0c6:	55                   	push   ebp
c000c0c7:	57                   	push   edi
c000c0c8:	56                   	push   esi
c000c0c9:	53                   	push   ebx
c000c0ca:	83 ec 1c             	sub    esp,0x1c
c000c0cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c0d1:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c0d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0dc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0e2:	83 e0 01             	and    eax,0x1
c000c0e5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c0e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0ed:	0f 85 cc 00 00 00    	jne    c000c1bf <VAS::allocatePages(int, int)+0xf9>
c000c0f3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c0f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0fa:	85 c0                	test   eax,eax
c000c0fc:	0f 84 a1 00 00 00    	je     c000c1a3 <VAS::allocatePages(int, int)+0xdd>
c000c102:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c106:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c10a:	c1 e6 0c             	shl    esi,0xc
c000c10d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c111:	85 c0                	test   eax,eax
c000c113:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c116:	7e 33                	jle    c000c14b <VAS::allocatePages(int, int)+0x85>
c000c118:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c11c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c120:	81 cd 00 04 00 00    	or     ebp,0x400
c000c126:	e8 de de ff ff       	call   c000a009 <Phys::allocatePage()>
c000c12b:	55                   	push   ebp
c000c12c:	53                   	push   ebx
c000c12d:	50                   	push   eax
c000c12e:	57                   	push   edi
c000c12f:	e8 90 fe ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c134:	83 c4 10             	add    esp,0x10
c000c137:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c13c:	74 03                	je     c000c141 <VAS::allocatePages(int, int)+0x7b>
c000c13e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c141:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c147:	39 de                	cmp    esi,ebx
c000c149:	75 db                	jne    c000c126 <VAS::allocatePages(int, int)+0x60>
c000c14b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c150:	75 12                	jne    c000c164 <VAS::allocatePages(int, int)+0x9e>
c000c152:	0f 20 d8             	mov    eax,cr3
c000c155:	0f 22 d8             	mov    cr3,eax
c000c158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c15c:	83 c4 1c             	add    esp,0x1c
c000c15f:	5b                   	pop    ebx
c000c160:	5e                   	pop    esi
c000c161:	5f                   	pop    edi
c000c162:	5d                   	pop    ebp
c000c163:	c3                   	ret    
c000c164:	c1 ee 0a             	shr    esi,0xa
c000c167:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c16b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c171:	c1 eb 0a             	shr    ebx,0xa
c000c174:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c17a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c180:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c186:	39 c3                	cmp    ebx,eax
c000c188:	77 ce                	ja     c000c158 <VAS::allocatePages(int, int)+0x92>
c000c18a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c18d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c193:	39 d8                	cmp    eax,ebx
c000c195:	73 f3                	jae    c000c18a <VAS::allocatePages(int, int)+0xc4>
c000c197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c19b:	83 c4 1c             	add    esp,0x1c
c000c19e:	5b                   	pop    ebx
c000c19f:	5e                   	pop    esi
c000c1a0:	5f                   	pop    edi
c000c1a1:	5d                   	pop    ebp
c000c1a2:	c3                   	ret    
c000c1a3:	83 ec 0c             	sub    esp,0xc
c000c1a6:	68 84 3d 02 c0       	push   0xc0023d84
c000c1ab:	e8 b3 85 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000c1b0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	e9 43 ff ff ff       	jmp    c000c102 <VAS::allocatePages(int, int)+0x3c>
c000c1bf:	83 ec 0c             	sub    esp,0xc
c000c1c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c1c6:	e8 52 f7 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c1cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c1d7:	0f 87 9b 00 00 00    	ja     c000c278 <VAS::allocatePages(int, int)+0x1b2>
c000c1dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c1e1:	85 d2                	test   edx,edx
c000c1e3:	7e 3c                	jle    c000c221 <VAS::allocatePages(int, int)+0x15b>
c000c1e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c1e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c1ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1f1:	c1 e5 0c             	shl    ebp,0xc
c000c1f4:	81 ce 00 04 00 00    	or     esi,0x400
c000c1fa:	01 dd                	add    ebp,ebx
c000c1fc:	e8 08 de ff ff       	call   c000a009 <Phys::allocatePage()>
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	50                   	push   eax
c000c204:	57                   	push   edi
c000c205:	e8 ba fd ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c212:	74 03                	je     c000c217 <VAS::allocatePages(int, int)+0x151>
c000c214:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c217:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c21d:	39 dd                	cmp    ebp,ebx
c000c21f:	75 db                	jne    c000c1fc <VAS::allocatePages(int, int)+0x136>
c000c221:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c226:	0f 84 26 ff ff ff    	je     c000c152 <VAS::allocatePages(int, int)+0x8c>
c000c22c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c230:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c234:	89 d3                	mov    ebx,edx
c000c236:	c1 e0 0c             	shl    eax,0xc
c000c239:	c1 eb 0a             	shr    ebx,0xa
c000c23c:	01 d0                	add    eax,edx
c000c23e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c244:	c1 e8 0a             	shr    eax,0xa
c000c247:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c24d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c252:	2d 00 00 40 00       	sub    eax,0x400000
c000c257:	39 c3                	cmp    ebx,eax
c000c259:	0f 87 f9 fe ff ff    	ja     c000c158 <VAS::allocatePages(int, int)+0x92>
c000c25f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c262:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c268:	39 d8                	cmp    eax,ebx
c000c26a:	73 f3                	jae    c000c25f <VAS::allocatePages(int, int)+0x199>
c000c26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c270:	83 c4 1c             	add    esp,0x1c
c000c273:	5b                   	pop    ebx
c000c274:	5e                   	pop    esi
c000c275:	5f                   	pop    edi
c000c276:	5d                   	pop    ebp
c000c277:	c3                   	ret    
c000c278:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c27d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c283:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c28a:	0f 84 4d ff ff ff    	je     c000c1dd <VAS::allocatePages(int, int)+0x117>
c000c290:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c298:	e9 40 ff ff ff       	jmp    c000c1dd <VAS::allocatePages(int, int)+0x117>
c000c29d:	90                   	nop

c000c29e <VAS::setCPUSpecific(unsigned long)>:
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	6a 05                	push   0x5
c000c2a3:	68 00 00 40 c2       	push   0xc2400000
c000c2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2b0:	e8 0f fd ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2b5:	83 c4 1c             	add    esp,0x1c
c000c2b8:	c3                   	ret    
c000c2b9:	90                   	nop

c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c2ba:	55                   	push   ebp
c000c2bb:	57                   	push   edi
c000c2bc:	56                   	push   esi
c000c2bd:	53                   	push   ebx
c000c2be:	83 ec 1c             	sub    esp,0x1c
c000c2c1:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c2c6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2d4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c2da:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c2de:	83 e0 01             	and    eax,0x1
c000c2e1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c2e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c2e9:	85 c0                	test   eax,eax
c000c2eb:	7e 39                	jle    c000c326 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c2ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c2f1:	89 f3                	mov    ebx,esi
c000c2f3:	c1 e0 0c             	shl    eax,0xc
c000c2f6:	01 f0                	add    eax,esi
c000c2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2fc:	55                   	push   ebp
c000c2fd:	53                   	push   ebx
c000c2fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c302:	29 f0                	sub    eax,esi
c000c304:	01 d8                	add    eax,ebx
c000c306:	50                   	push   eax
c000c307:	57                   	push   edi
c000c308:	e8 b7 fc ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c315:	74 03                	je     c000c31a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c317:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c320:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c324:	75 d6                	jne    c000c2fc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c326:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c32b:	75 10                	jne    c000c33d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c32d:	0f 20 d8             	mov    eax,cr3
c000c330:	0f 22 d8             	mov    cr3,eax
c000c333:	83 c4 1c             	add    esp,0x1c
c000c336:	89 f0                	mov    eax,esi
c000c338:	5b                   	pop    ebx
c000c339:	5e                   	pop    esi
c000c33a:	5f                   	pop    edi
c000c33b:	5d                   	pop    ebp
c000c33c:	c3                   	ret    
c000c33d:	89 f3                	mov    ebx,esi
c000c33f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c343:	c1 eb 0a             	shr    ebx,0xa
c000c346:	c1 e0 0c             	shl    eax,0xc
c000c349:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c34f:	01 f0                	add    eax,esi
c000c351:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c357:	c1 e8 0a             	shr    eax,0xa
c000c35a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c35f:	2d 00 00 40 00       	sub    eax,0x400000
c000c364:	39 c3                	cmp    ebx,eax
c000c366:	77 cb                	ja     c000c333 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c368:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c36b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c371:	39 d8                	cmp    eax,ebx
c000c373:	73 f3                	jae    c000c368 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c375:	83 c4 1c             	add    esp,0x1c
c000c378:	89 f0                	mov    eax,esi
c000c37a:	5b                   	pop    ebx
c000c37b:	5e                   	pop    esi
c000c37c:	5f                   	pop    edi
c000c37d:	5d                   	pop    ebp
c000c37e:	c3                   	ret    
c000c37f:	90                   	nop

c000c380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c380:	55                   	push   ebp
c000c381:	57                   	push   edi
c000c382:	56                   	push   esi
c000c383:	53                   	push   ebx
c000c384:	83 ec 1c             	sub    esp,0x1c
c000c387:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c38b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c38f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c393:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c397:	a9 ff 0f 00 00       	test   eax,0xfff
c000c39c:	75 4a                	jne    c000c3e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c39e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c3a2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3a5:	c1 eb 16             	shr    ebx,0x16
c000c3a8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c3af:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c3b3:	74 4d                	je     c000c402 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c3b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3b9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c3bd:	c1 e8 0a             	shr    eax,0xa
c000c3c0:	80 fa 01             	cmp    dl,0x1
c000c3c3:	19 d2                	sbb    edx,edx
c000c3c5:	c1 e3 0c             	shl    ebx,0xc
c000c3c8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c3cc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c3d2:	25 fc 0f 00 00       	and    eax,0xffc
c000c3d7:	01 d8                	add    eax,ebx
c000c3d9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c3e0:	83 c4 1c             	add    esp,0x1c
c000c3e3:	5b                   	pop    ebx
c000c3e4:	5e                   	pop    esi
c000c3e5:	5f                   	pop    edi
c000c3e6:	5d                   	pop    ebp
c000c3e7:	c3                   	ret    
c000c3e8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c3ec:	83 ec 0c             	sub    esp,0xc
c000c3ef:	68 b0 3d 02 c0       	push   0xc0023db0
c000c3f4:	e8 6a 83 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000c3f9:	83 c4 10             	add    esp,0x10
c000c3fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c400:	eb 9c                	jmp    c000c39e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c406:	e8 fe db ff ff       	call   c000a009 <Phys::allocatePage()>
c000c40b:	83 ec 0c             	sub    esp,0xc
c000c40e:	89 c5                	mov    ebp,eax
c000c410:	8b 0d d0 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275d0
c000c416:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c41a:	6a 01                	push   0x1
c000c41c:	e8 fc f4 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c421:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c428:	6a 01                	push   0x1
c000c42a:	50                   	push   eax
c000c42b:	55                   	push   ebp
c000c42c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c432:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c436:	51                   	push   ecx
c000c437:	e8 7e fe ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c43c:	83 c4 1c             	add    esp,0x1c
c000c43f:	68 00 10 00 00       	push   0x1000
c000c444:	6a 00                	push   0x0
c000c446:	50                   	push   eax
c000c447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c44b:	e8 34 42 ff ff       	call   c0000684 <memset>
c000c450:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c454:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c457:	e8 f1 f7 ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c000c45c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c45f:	83 c4 10             	add    esp,0x10
c000c462:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c469:	e9 47 ff ff ff       	jmp    c000c3b5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c46e <VAS::VAS(bool)>:
c000c46e:	53                   	push   ebx
c000c46f:	83 ec 28             	sub    esp,0x28
c000c472:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c476:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c47a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c47e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c489:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c494:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c498:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c49b:	e8 69 db ff ff       	call   c000a009 <Phys::allocatePage()>
c000c4a0:	89 c2                	mov    edx,eax
c000c4a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c4a9:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c000c4af:	83 ec 0c             	sub    esp,0xc
c000c4b2:	6a 01                	push   0x1
c000c4b4:	e8 64 f4 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	89 c2                	mov    edx,eax
c000c4be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c4c5:	83 ec 0c             	sub    esp,0xc
c000c4c8:	6a 03                	push   0x3
c000c4ca:	6a 01                	push   0x1
c000c4cc:	52                   	push   edx
c000c4cd:	50                   	push   eax
c000c4ce:	53                   	push   ebx
c000c4cf:	e8 e6 fd ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4d4:	83 c4 20             	add    esp,0x20
c000c4d7:	89 c2                	mov    edx,eax
c000c4d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c4e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c4e8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c4f0:	7f 1c                	jg     c000c50e <VAS::VAS(bool)+0xa0>
c000c4f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c4f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4fd:	c1 e2 02             	shl    edx,0x2
c000c500:	01 d0                	add    eax,edx
c000c502:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c508:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c50c:	eb da                	jmp    c000c4e8 <VAS::VAS(bool)+0x7a>
c000c50e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c516:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c51e:	7f 7a                	jg     c000c59a <VAS::VAS(bool)+0x12c>
c000c520:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c524:	2d 00 02 00 00       	sub    eax,0x200
c000c529:	c1 e0 0c             	shl    eax,0xc
c000c52c:	83 c8 03             	or     eax,0x3
c000c52f:	89 c2                	mov    edx,eax
c000c531:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c536:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c53c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c542:	83 e0 10             	and    eax,0x10
c000c545:	84 c0                	test   al,al
c000c547:	74 07                	je     c000c550 <VAS::VAS(bool)+0xe2>
c000c549:	b8 00 01 00 00       	mov    eax,0x100
c000c54e:	eb 05                	jmp    c000c555 <VAS::VAS(bool)+0xe7>
c000c550:	b8 00 00 00 00       	mov    eax,0x0
c000c555:	09 d0                	or     eax,edx
c000c557:	89 c1                	mov    ecx,eax
c000c559:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c560:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c564:	c1 e2 02             	shl    edx,0x2
c000c567:	01 d0                	add    eax,edx
c000c569:	89 ca                	mov    edx,ecx
c000c56b:	89 10                	mov    DWORD PTR [eax],edx
c000c56d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c571:	2d 40 03 00 00       	sub    eax,0x340
c000c576:	83 f8 7f             	cmp    eax,0x7f
c000c579:	77 16                	ja     c000c591 <VAS::VAS(bool)+0x123>
c000c57b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c582:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c586:	c1 e2 02             	shl    edx,0x2
c000c589:	01 d0                	add    eax,edx
c000c58b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c591:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c595:	e9 7c ff ff ff       	jmp    c000c516 <VAS::VAS(bool)+0xa8>
c000c59a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c59f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5a5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5ab:	83 e0 10             	and    eax,0x10
c000c5ae:	84 c0                	test   al,al
c000c5b0:	74 07                	je     c000c5b9 <VAS::VAS(bool)+0x14b>
c000c5b2:	b8 03 41 00 00       	mov    eax,0x4103
c000c5b7:	eb 05                	jmp    c000c5be <VAS::VAS(bool)+0x150>
c000c5b9:	b8 03 40 00 00       	mov    eax,0x4003
c000c5be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c5c2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c5c5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c5cb:	89 02                	mov    DWORD PTR [edx],eax
c000c5cd:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c5d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c5de:	83 ec 08             	sub    esp,0x8
c000c5e1:	50                   	push   eax
c000c5e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5e6:	e8 b3 fc ff ff       	call   c000c29e <VAS::setCPUSpecific(unsigned long)>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5f2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c5f5:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c5fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c600:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c606:	83 e0 10             	and    eax,0x10
c000c609:	84 c0                	test   al,al
c000c60b:	74 07                	je     c000c614 <VAS::VAS(bool)+0x1a6>
c000c60d:	b8 00 01 00 00       	mov    eax,0x100
c000c612:	eb 05                	jmp    c000c619 <VAS::VAS(bool)+0x1ab>
c000c614:	b8 00 00 00 00       	mov    eax,0x0
c000c619:	09 c2                	or     edx,eax
c000c61b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c61f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c622:	05 fc 0f 00 00       	add    eax,0xffc
c000c627:	83 ca 03             	or     edx,0x3
c000c62a:	89 10                	mov    DWORD PTR [eax],edx
c000c62c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c631:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c637:	83 ec 0c             	sub    esp,0xc
c000c63a:	50                   	push   eax
c000c63b:	e8 4a 1d 00 00       	call   c000e38a <Device::getName()>
c000c640:	83 c4 10             	add    esp,0x10
c000c643:	83 ec 08             	sub    esp,0x8
c000c646:	68 84 3e 02 c0       	push   0xc0023e84
c000c64b:	50                   	push   eax
c000c64c:	e8 7b 41 ff ff       	call   c00007cc <strcmp>
c000c651:	83 c4 10             	add    esp,0x10
c000c654:	85 c0                	test   eax,eax
c000c656:	0f 94 c0             	sete   al
c000c659:	84 c0                	test   al,al
c000c65b:	0f 84 87 00 00 00    	je     c000c6e8 <VAS::VAS(bool)+0x27a>
c000c661:	fa                   	cli    
c000c662:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000c667:	40                   	inc    eax
c000c668:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000c66d:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c672:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c678:	05 7c 09 00 00       	add    eax,0x97c
c000c67d:	83 ec 0c             	sub    esp,0xc
c000c680:	50                   	push   eax
c000c681:	e8 2c ce ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c68e:	89 c3                	mov    ebx,eax
c000c690:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000c695:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c69b:	05 7c 09 00 00       	add    eax,0x97c
c000c6a0:	83 ec 0c             	sub    esp,0xc
c000c6a3:	50                   	push   eax
c000c6a4:	e8 09 ce ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c6a9:	83 c4 10             	add    esp,0x10
c000c6ac:	83 ec 08             	sub    esp,0x8
c000c6af:	50                   	push   eax
c000c6b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b4:	e8 75 f5 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c6be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6c3:	6a 11                	push   0x11
c000c6c5:	53                   	push   ebx
c000c6c6:	50                   	push   eax
c000c6c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cb:	e8 f4 f8 ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6d0:	83 c4 10             	add    esp,0x10
c000c6d3:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000c6d8:	48                   	dec    eax
c000c6d9:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000c6de:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000c6e3:	85 c0                	test   eax,eax
c000c6e5:	75 01                	jne    c000c6e8 <VAS::VAS(bool)+0x27a>
c000c6e7:	fb                   	sti    
c000c6e8:	90                   	nop
c000c6e9:	83 c4 28             	add    esp,0x28
c000c6ec:	5b                   	pop    ebx
c000c6ed:	c3                   	ret    

c000c6ee <VAS::evict(unsigned long)>:
c000c6ee:	55                   	push   ebp
c000c6ef:	57                   	push   edi
c000c6f0:	56                   	push   esi
c000c6f1:	53                   	push   ebx
c000c6f2:	83 ec 1c             	sub    esp,0x1c
c000c6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c701:	e8 58 f3 ff ff       	call   c000ba5e <Virt::allocateSwapfilePage()>
c000c706:	89 c7                	mov    edi,eax
c000c708:	a1 ec 68 02 c0       	mov    eax,ds:0xc00268ec
c000c70d:	85 c0                	test   eax,eax
c000c70f:	7e 3d                	jle    c000c74e <VAS::evict(unsigned long)+0x60>
c000c711:	89 ee                	mov    esi,ebp
c000c713:	31 db                	xor    ebx,ebx
c000c715:	83 ec 0c             	sub    esp,0xc
c000c718:	57                   	push   edi
c000c719:	e8 2e f3 ff ff       	call   c000ba4c <Virt::swapIDToSector(unsigned long)>
c000c71e:	89 34 24             	mov    DWORD PTR [esp],esi
c000c721:	01 d8                	add    eax,ebx
c000c723:	6a 01                	push   0x1
c000c725:	31 d2                	xor    edx,edx
c000c727:	43                   	inc    ebx
c000c728:	52                   	push   edx
c000c729:	81 c6 00 02 00 00    	add    esi,0x200
c000c72f:	50                   	push   eax
c000c730:	0f be 05 f8 68 02 c0 	movsx  eax,BYTE PTR ds:0xc00268f8
c000c737:	ff 34 85 5c 79 02 c0 	push   DWORD PTR [eax*4-0x3ffd86a4]
c000c73e:	e8 89 3c 00 00       	call   c00103cc <LogicalDisk::write(unsigned long long, int, void*)>
c000c743:	83 c4 20             	add    esp,0x20
c000c746:	39 1d ec 68 02 c0    	cmp    DWORD PTR ds:0xc00268ec,ebx
c000c74c:	7f c7                	jg     c000c715 <VAS::evict(unsigned long)+0x27>
c000c74e:	83 ec 08             	sub    esp,0x8
c000c751:	c1 e7 0b             	shl    edi,0xb
c000c754:	55                   	push   ebp
c000c755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c759:	e8 d0 f4 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000c75e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c760:	89 d3                	mov    ebx,edx
c000c762:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c768:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c76e:	09 d7                	or     edi,edx
c000c770:	89 38                	mov    DWORD PTR [eax],edi
c000c772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c775:	ff 05 c8 75 02 c0    	inc    DWORD PTR ds:0xc00275c8
c000c77b:	e8 06 d8 ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c000c780:	0f 20 d8             	mov    eax,cr3
c000c783:	0f 22 d8             	mov    cr3,eax
c000c786:	ff 35 c8 75 02 c0    	push   DWORD PTR ds:0xc00275c8
c000c78c:	55                   	push   ebp
c000c78d:	53                   	push   ebx
c000c78e:	68 d4 3d 02 c0       	push   0xc0023dd4
c000c793:	e8 ab 04 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c798:	a1 c4 75 02 c0       	mov    eax,ds:0xc00275c4
c000c79d:	c7 44 24 50 92 3e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0023e92
c000c7a5:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c7ac:	89 15 c4 75 02 c0    	mov    DWORD PTR ds:0xc00275c4,edx
c000c7b2:	83 c4 3c             	add    esp,0x3c
c000c7b5:	5b                   	pop    ebx
c000c7b6:	5e                   	pop    esi
c000c7b7:	5f                   	pop    edi
c000c7b8:	5d                   	pop    ebp
c000c7b9:	e9 85 04 00 00       	jmp    c000cc43 <Dbg::kprintf(char const*, ...)>

c000c7be <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c7be:	55                   	push   ebp
c000c7bf:	57                   	push   edi
c000c7c0:	56                   	push   esi
c000c7c1:	53                   	push   ebx
c000c7c2:	83 ec 14             	sub    esp,0x14
c000c7c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c9:	68 a3 3e 02 c0       	push   0xc0023ea3
c000c7ce:	e8 70 04 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c7d3:	83 c4 10             	add    esp,0x10
c000c7d6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c7da:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c7e0:	74 20                	je     c000c802 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c7e2:	83 ec 08             	sub    esp,0x8
c000c7e5:	55                   	push   ebp
c000c7e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7ea:	e8 3f f4 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000c7ef:	83 c4 10             	add    esp,0x10
c000c7f2:	89 c3                	mov    ebx,eax
c000c7f4:	85 c0                	test   eax,eax
c000c7f6:	74 0a                	je     c000c802 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c7f8:	8b 38                	mov    edi,DWORD PTR [eax]
c000c7fa:	f7 c7 01 00 00 00    	test   edi,0x1
c000c800:	74 0a                	je     c000c80c <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c802:	31 c0                	xor    eax,eax
c000c804:	83 c4 0c             	add    esp,0xc
c000c807:	5b                   	pop    ebx
c000c808:	5e                   	pop    esi
c000c809:	5f                   	pop    edi
c000c80a:	5d                   	pop    ebp
c000c80b:	c3                   	ret    
c000c80c:	e8 f8 d7 ff ff       	call   c000a009 <Phys::allocatePage()>
c000c811:	c1 ef 0b             	shr    edi,0xb
c000c814:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c816:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c81c:	09 c2                	or     edx,eax
c000c81e:	81 ca 01 08 00 00    	or     edx,0x801
c000c824:	89 13                	mov    DWORD PTR [ebx],edx
c000c826:	8b 0d ec 68 02 c0    	mov    ecx,DWORD PTR ds:0xc00268ec
c000c82c:	85 c9                	test   ecx,ecx
c000c82e:	7e 3d                	jle    c000c86d <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c830:	89 ee                	mov    esi,ebp
c000c832:	31 db                	xor    ebx,ebx
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	57                   	push   edi
c000c838:	e8 0f f2 ff ff       	call   c000ba4c <Virt::swapIDToSector(unsigned long)>
c000c83d:	89 34 24             	mov    DWORD PTR [esp],esi
c000c840:	01 d8                	add    eax,ebx
c000c842:	6a 01                	push   0x1
c000c844:	31 d2                	xor    edx,edx
c000c846:	43                   	inc    ebx
c000c847:	52                   	push   edx
c000c848:	81 c6 00 02 00 00    	add    esi,0x200
c000c84e:	50                   	push   eax
c000c84f:	0f be 05 f8 68 02 c0 	movsx  eax,BYTE PTR ds:0xc00268f8
c000c856:	ff 34 85 5c 79 02 c0 	push   DWORD PTR [eax*4-0x3ffd86a4]
c000c85d:	e8 fe 3a 00 00       	call   c0010360 <LogicalDisk::read(unsigned long long, int, void*)>
c000c862:	83 c4 20             	add    esp,0x20
c000c865:	39 1d ec 68 02 c0    	cmp    DWORD PTR ds:0xc00268ec,ebx
c000c86b:	7f c7                	jg     c000c834 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c86d:	a1 c8 75 02 c0       	mov    eax,ds:0xc00275c8
c000c872:	48                   	dec    eax
c000c873:	52                   	push   edx
c000c874:	a3 c8 75 02 c0       	mov    ds:0xc00275c8,eax
c000c879:	50                   	push   eax
c000c87a:	55                   	push   ebp
c000c87b:	68 b6 3e 02 c0       	push   0xc0023eb6
c000c880:	e8 be 03 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c885:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c888:	e8 a1 f1 ff ff       	call   c000ba2e <Virt::freeSwapfilePage(unsigned long)>
c000c88d:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	48                   	dec    eax
c000c896:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000c89b:	85 c0                	test   eax,eax
c000c89d:	74 1d                	je     c000c8bc <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c89f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c8a3:	25 ff 0f 00 00       	and    eax,0xfff
c000c8a8:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c8ad:	77 10                	ja     c000c8bf <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c8af:	0f 20 d8             	mov    eax,cr3
c000c8b2:	0f 22 d8             	mov    cr3,eax
c000c8b5:	b0 01                	mov    al,0x1
c000c8b7:	e9 48 ff ff ff       	jmp    c000c804 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c8bc:	fb                   	sti    
c000c8bd:	eb e0                	jmp    c000c89f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c8bf:	83 ec 0c             	sub    esp,0xc
c000c8c2:	68 cb 3e 02 c0       	push   0xc0023ecb
c000c8c7:	e8 77 03 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	eb de                	jmp    c000c8af <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c8d1:	90                   	nop

c000c8d2 <VAS::scanForEviction()>:
c000c8d2:	57                   	push   edi
c000c8d3:	31 ff                	xor    edi,edi
c000c8d5:	56                   	push   esi
c000c8d6:	53                   	push   ebx
c000c8d7:	83 ec 10             	sub    esp,0x10
c000c8da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c8de:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c8e1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c8e7:	75 0e                	jne    c000c8f7 <VAS::scanForEviction()+0x25>
c000c8e9:	89 da                	mov    edx,ebx
c000c8eb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c8ee:	c1 ea 16             	shr    edx,0x16
c000c8f1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c8f5:	74 4e                	je     c000c945 <VAS::scanForEviction()+0x73>
c000c8f7:	53                   	push   ebx
c000c8f8:	56                   	push   esi
c000c8f9:	e8 30 f3 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000c8fe:	5a                   	pop    edx
c000c8ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000c901:	59                   	pop    ecx
c000c902:	89 d1                	mov    ecx,edx
c000c904:	81 e1 01 08 00 00    	and    ecx,0x801
c000c90a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c910:	74 3e                	je     c000c950 <VAS::scanForEviction()+0x7e>
c000c912:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c918:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c91e:	76 2b                	jbe    c000c94b <VAS::scanForEviction()+0x79>
c000c920:	47                   	inc    edi
c000c921:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c928:	83 ff 03             	cmp    edi,0x3
c000c92b:	74 32                	je     c000c95f <VAS::scanForEviction()+0x8d>
c000c92d:	31 db                	xor    ebx,ebx
c000c92f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c935:	75 c0                	jne    c000c8f7 <VAS::scanForEviction()+0x25>
c000c937:	89 da                	mov    edx,ebx
c000c939:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c93c:	c1 ea 16             	shr    edx,0x16
c000c93f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c943:	75 b2                	jne    c000c8f7 <VAS::scanForEviction()+0x25>
c000c945:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c94b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c94e:	eb 91                	jmp    c000c8e1 <VAS::scanForEviction()+0xf>
c000c950:	f6 c2 20             	test   dl,0x20
c000c953:	74 13                	je     c000c968 <VAS::scanForEviction()+0x96>
c000c955:	83 e2 df             	and    edx,0xffffffdf
c000c958:	89 10                	mov    DWORD PTR [eax],edx
c000c95a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c95d:	eb b3                	jmp    c000c912 <VAS::scanForEviction()+0x40>
c000c95f:	83 c4 10             	add    esp,0x10
c000c962:	31 c0                	xor    eax,eax
c000c964:	5b                   	pop    ebx
c000c965:	5e                   	pop    esi
c000c966:	5f                   	pop    edi
c000c967:	c3                   	ret    
c000c968:	83 ec 08             	sub    esp,0x8
c000c96b:	89 d0                	mov    eax,edx
c000c96d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c972:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c976:	53                   	push   ebx
c000c977:	68 db 3e 02 c0       	push   0xc0023edb
c000c97c:	e8 c2 02 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c981:	58                   	pop    eax
c000c982:	5a                   	pop    edx
c000c983:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c986:	56                   	push   esi
c000c987:	e8 62 fd ff ff       	call   c000c6ee <VAS::evict(unsigned long)>
c000c98c:	59                   	pop    ecx
c000c98d:	5b                   	pop    ebx
c000c98e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c991:	68 ef 3e 02 c0       	push   0xc0023eef
c000c996:	e8 a8 02 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c99b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9a9:	83 c4 10             	add    esp,0x10
c000c9ac:	5b                   	pop    ebx
c000c9ad:	5e                   	pop    esi
c000c9ae:	5f                   	pop    edi
c000c9af:	c3                   	ret    

c000c9b0 <mapVASFirstTime>:
c000c9b0:	55                   	push   ebp
c000c9b1:	57                   	push   edi
c000c9b2:	56                   	push   esi
c000c9b3:	53                   	push   ebx
c000c9b4:	83 ec 0c             	sub    esp,0xc
c000c9b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c9bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c9bf:	4a                   	dec    edx
c000c9c0:	0f 84 fe 00 00 00    	je     c000cac4 <mapVASFirstTime+0x114>
c000c9c6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c9c9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c9cc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c9d1:	c1 e5 15             	shl    ebp,0x15
c000c9d4:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c9d9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c9df:	29 eb                	sub    ebx,ebp
c000c9e1:	29 ef                	sub    edi,ebp
c000c9e3:	83 ec 08             	sub    esp,0x8
c000c9e6:	53                   	push   ebx
c000c9e7:	68 1b 3f 02 c0       	push   0xc0023f1b
c000c9ec:	e8 52 02 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000c9f1:	e8 13 d6 ff ff       	call   c000a009 <Phys::allocatePage()>
c000c9f6:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c9fd:	6a 01                	push   0x1
c000c9ff:	53                   	push   ebx
c000ca00:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ca06:	50                   	push   eax
c000ca07:	56                   	push   esi
c000ca08:	e8 ad f8 ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ca0d:	83 c4 20             	add    esp,0x20
c000ca10:	39 fb                	cmp    ebx,edi
c000ca12:	75 cf                	jne    c000c9e3 <mapVASFirstTime+0x33>
c000ca14:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ca19:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ca1e:	29 eb                	sub    ebx,ebp
c000ca20:	29 ef                	sub    edi,ebp
c000ca22:	83 ec 08             	sub    esp,0x8
c000ca25:	53                   	push   ebx
c000ca26:	68 37 3f 02 c0       	push   0xc0023f37
c000ca2b:	e8 13 02 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ca30:	58                   	pop    eax
c000ca31:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ca35:	5a                   	pop    edx
c000ca36:	19 c0                	sbb    eax,eax
c000ca38:	83 e0 04             	and    eax,0x4
c000ca3b:	05 03 04 00 00       	add    eax,0x403
c000ca40:	50                   	push   eax
c000ca41:	68 4b 3f 02 c0       	push   0xc0023f4b
c000ca46:	e8 f8 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ca4b:	e8 b9 d5 ff ff       	call   c000a009 <Phys::allocatePage()>
c000ca50:	59                   	pop    ecx
c000ca51:	89 c5                	mov    ebp,eax
c000ca53:	58                   	pop    eax
c000ca54:	55                   	push   ebp
c000ca55:	68 59 3f 02 c0       	push   0xc0023f59
c000ca5a:	e8 e4 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ca5f:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ca63:	19 d2                	sbb    edx,edx
c000ca65:	83 e2 04             	and    edx,0x4
c000ca68:	81 c2 03 04 00 00    	add    edx,0x403
c000ca6e:	89 14 24             	mov    DWORD PTR [esp],edx
c000ca71:	6a 01                	push   0x1
c000ca73:	53                   	push   ebx
c000ca74:	55                   	push   ebp
c000ca75:	56                   	push   esi
c000ca76:	e8 3f f8 ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ca7b:	83 c4 18             	add    esp,0x18
c000ca7e:	53                   	push   ebx
c000ca7f:	56                   	push   esi
c000ca80:	e8 a9 f1 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c000ca85:	5a                   	pop    edx
c000ca86:	59                   	pop    ecx
c000ca87:	ff 30                	push   DWORD PTR [eax]
c000ca89:	68 75 3f 02 c0       	push   0xc0023f75
c000ca8e:	e8 b0 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ca93:	0f 20 d8             	mov    eax,cr3
c000ca96:	83 c4 0c             	add    esp,0xc
c000ca99:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ca9f:	56                   	push   esi
c000caa0:	50                   	push   eax
c000caa1:	68 80 3f 02 c0       	push   0xc0023f80
c000caa6:	e8 98 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	39 df                	cmp    edi,ebx
c000cab0:	0f 85 6c ff ff ff    	jne    c000ca22 <mapVASFirstTime+0x72>
c000cab6:	0f 20 d8             	mov    eax,cr3
c000cab9:	0f 22 d8             	mov    cr3,eax
c000cabc:	83 c4 0c             	add    esp,0xc
c000cabf:	5b                   	pop    ebx
c000cac0:	5e                   	pop    esi
c000cac1:	5f                   	pop    edi
c000cac2:	5d                   	pop    ebp
c000cac3:	c3                   	ret    
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	68 02 3f 02 c0       	push   0xc0023f02
c000cacc:	e8 72 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000cad1:	83 c4 10             	add    esp,0x10
c000cad4:	83 c4 0c             	add    esp,0xc
c000cad7:	5b                   	pop    ebx
c000cad8:	5e                   	pop    esi
c000cad9:	5f                   	pop    edi
c000cada:	5d                   	pop    ebp
c000cadb:	c3                   	ret    

c000cadc <__cxa_atexit>:
c000cadc:	31 c0                	xor    eax,eax
c000cade:	c3                   	ret    

c000cadf <__cxa_finalize>:
c000cadf:	c3                   	ret    

c000cae0 <__stack_chk_fail>:
c000cae0:	55                   	push   ebp
c000cae1:	89 e5                	mov    ebp,esp
c000cae3:	83 ec 14             	sub    esp,0x14
c000cae6:	68 98 3f 02 c0       	push   0xc0023f98
c000caeb:	e8 53 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000caf0:	58                   	pop    eax
c000caf1:	5a                   	pop    edx
c000caf2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000caf5:	68 e8 3f 02 c0       	push   0xc0023fe8
c000cafa:	e8 44 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000caff:	59                   	pop    ecx
c000cb00:	58                   	pop    eax
c000cb01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb04:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb07:	68 e8 3f 02 c0       	push   0xc0023fe8
c000cb0c:	e8 32 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000cb11:	5a                   	pop    edx
c000cb12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb15:	59                   	pop    ecx
c000cb16:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb18:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb1b:	68 e8 3f 02 c0       	push   0xc0023fe8
c000cb20:	e8 1e 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000cb25:	5a                   	pop    edx
c000cb26:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb29:	59                   	pop    ecx
c000cb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb2e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb31:	68 e8 3f 02 c0       	push   0xc0023fe8
c000cb36:	e8 08 01 00 00       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000cb3b:	c7 04 24 f0 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff0
c000cb42:	e8 1c 7c 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000cb47:	83 c4 10             	add    esp,0x10
c000cb4a:	c9                   	leave  
c000cb4b:	c3                   	ret    

c000cb4c <__cxa_pure_virtual>:
c000cb4c:	83 ec 18             	sub    esp,0x18
c000cb4f:	68 08 40 02 c0       	push   0xc0024008
c000cb54:	e8 0a 7c 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000cb59:	83 c4 1c             	add    esp,0x1c
c000cb5c:	c3                   	ret    

c000cb5d <operator new[](unsigned long)>:
c000cb5d:	e9 61 ce ff ff       	jmp    c00099c3 <malloc>

c000cb62 <operator delete(void*, unsigned long)>:
c000cb62:	e9 7c ce ff ff       	jmp    c00099e3 <rfree>

c000cb67 <operator delete[](void*)>:
c000cb67:	e9 77 ce ff ff       	jmp    c00099e3 <rfree>

c000cb6c <operator delete[](void*, unsigned long)>:
c000cb6c:	e9 72 ce ff ff       	jmp    c00099e3 <rfree>

c000cb71 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cb71:	55                   	push   ebp
c000cb72:	b9 11 00 00 00       	mov    ecx,0x11
c000cb77:	57                   	push   edi
c000cb78:	56                   	push   esi
c000cb79:	be ee 3a 02 c0       	mov    esi,0xc0023aee
c000cb7e:	53                   	push   ebx
c000cb7f:	83 ec 20             	sub    esp,0x20
c000cb82:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb86:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cb8a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cb8e:	fc                   	cld    
c000cb8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb91:	89 ee                	mov    esi,ebp
c000cb93:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cb97:	eb 02                	jmp    c000cb9b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cb99:	89 c6                	mov    esi,eax
c000cb9b:	31 d2                	xor    edx,edx
c000cb9d:	41                   	inc    ecx
c000cb9e:	89 f0                	mov    eax,esi
c000cba0:	f7 f3                	div    ebx
c000cba2:	39 de                	cmp    esi,ebx
c000cba4:	73 f3                	jae    c000cb99 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cba6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cba9:	eb 02                	jmp    c000cbad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cbab:	89 c5                	mov    ebp,eax
c000cbad:	31 d2                	xor    edx,edx
c000cbaf:	49                   	dec    ecx
c000cbb0:	89 e8                	mov    eax,ebp
c000cbb2:	f7 f3                	div    ebx
c000cbb4:	39 dd                	cmp    ebp,ebx
c000cbb6:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cbba:	88 11                	mov    BYTE PTR [ecx],dl
c000cbbc:	73 ed                	jae    c000cbab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cbbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cbc2:	83 c4 20             	add    esp,0x20
c000cbc5:	5b                   	pop    ebx
c000cbc6:	5e                   	pop    esi
c000cbc7:	5f                   	pop    edi
c000cbc8:	5d                   	pop    ebp
c000cbc9:	c3                   	ret    

c000cbca <Dbg::logc(char)>:
c000cbca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cbce:	f6 05 c0 74 02 c0 10 	test   BYTE PTR ds:0xc00274c0,0x10
c000cbd5:	75 12                	jne    c000cbe9 <Dbg::logc(char)+0x1f>
c000cbd7:	ba fd 03 00 00       	mov    edx,0x3fd
c000cbdc:	ec                   	in     al,dx
c000cbdd:	a8 20                	test   al,0x20
c000cbdf:	74 fb                	je     c000cbdc <Dbg::logc(char)+0x12>
c000cbe1:	ba f8 03 00 00       	mov    edx,0x3f8
c000cbe6:	88 c8                	mov    al,cl
c000cbe8:	ee                   	out    dx,al
c000cbe9:	c3                   	ret    

c000cbea <Dbg::logs(char*)>:
c000cbea:	53                   	push   ebx
c000cbeb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cbef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cbf2:	84 c0                	test   al,al
c000cbf4:	74 0f                	je     c000cc05 <Dbg::logs(char*)+0x1b>
c000cbf6:	50                   	push   eax
c000cbf7:	43                   	inc    ebx
c000cbf8:	e8 cd ff ff ff       	call   c000cbca <Dbg::logc(char)>
c000cbfd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc00:	5a                   	pop    edx
c000cc01:	84 c0                	test   al,al
c000cc03:	75 f1                	jne    c000cbf6 <Dbg::logs(char*)+0xc>
c000cc05:	5b                   	pop    ebx
c000cc06:	c3                   	ret    

c000cc07 <Dbg::logWriteInt(unsigned int)>:
c000cc07:	83 ec 10             	sub    esp,0x10
c000cc0a:	6a 0a                	push   0xa
c000cc0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc10:	50                   	push   eax
c000cc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc15:	e8 57 ff ff ff       	call   c000cb71 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc1a:	50                   	push   eax
c000cc1b:	e8 ca ff ff ff       	call   c000cbea <Dbg::logs(char*)>
c000cc20:	83 c4 20             	add    esp,0x20
c000cc23:	c3                   	ret    

c000cc24 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cc24:	83 ec 10             	sub    esp,0x10
c000cc27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc2b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc2f:	50                   	push   eax
c000cc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc34:	e8 38 ff ff ff       	call   c000cb71 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc39:	50                   	push   eax
c000cc3a:	e8 ab ff ff ff       	call   c000cbea <Dbg::logs(char*)>
c000cc3f:	83 c4 20             	add    esp,0x20
c000cc42:	c3                   	ret    

c000cc43 <Dbg::kprintf(char const*, ...)>:
c000cc43:	55                   	push   ebp
c000cc44:	57                   	push   edi
c000cc45:	56                   	push   esi
c000cc46:	53                   	push   ebx
c000cc47:	83 ec 0c             	sub    esp,0xc
c000cc4a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc4e:	f6 05 c0 74 02 c0 10 	test   BYTE PTR ds:0xc00274c0,0x10
c000cc55:	74 08                	je     c000cc5f <Dbg::kprintf(char const*, ...)+0x1c>
c000cc57:	83 c4 0c             	add    esp,0xc
c000cc5a:	5b                   	pop    ebx
c000cc5b:	5e                   	pop    esi
c000cc5c:	5f                   	pop    edi
c000cc5d:	5d                   	pop    ebp
c000cc5e:	c3                   	ret    
c000cc5f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cc63:	31 db                	xor    ebx,ebx
c000cc65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc69:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cc6c:	84 c0                	test   al,al
c000cc6e:	74 e7                	je     c000cc57 <Dbg::kprintf(char const*, ...)+0x14>
c000cc70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cc73:	3c 25                	cmp    al,0x25
c000cc75:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cc78:	75 44                	jne    c000ccbe <Dbg::kprintf(char const*, ...)+0x7b>
c000cc7a:	83 c3 02             	add    ebx,0x2
c000cc7d:	8a 07                	mov    al,BYTE PTR [edi]
c000cc7f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cc82:	83 e8 25             	sub    eax,0x25
c000cc85:	3c 53                	cmp    al,0x53
c000cc87:	0f 87 c9 00 00 00    	ja     c000cd56 <Dbg::kprintf(char const*, ...)+0x113>
c000cc8d:	0f b6 c0             	movzx  eax,al
c000cc90:	ff 24 85 1c 40 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbfe4]
c000cc97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc9b:	89 c8                	mov    eax,ecx
c000cc9d:	83 c1 04             	add    ecx,0x4
c000cca0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cca4:	ff 30                	push   DWORD PTR [eax]
c000cca6:	e8 5c ff ff ff       	call   c000cc07 <Dbg::logWriteInt(unsigned int)>
c000ccab:	5f                   	pop    edi
c000ccac:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ccb0:	84 c0                	test   al,al
c000ccb2:	74 a3                	je     c000cc57 <Dbg::kprintf(char const*, ...)+0x14>
c000ccb4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ccb7:	3c 25                	cmp    al,0x25
c000ccb9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ccbc:	74 bc                	je     c000cc7a <Dbg::kprintf(char const*, ...)+0x37>
c000ccbe:	50                   	push   eax
c000ccbf:	89 eb                	mov    ebx,ebp
c000ccc1:	e8 04 ff ff ff       	call   c000cbca <Dbg::logc(char)>
c000ccc6:	89 fd                	mov    ebp,edi
c000ccc8:	58                   	pop    eax
c000ccc9:	eb e1                	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cccb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cccf:	89 c8                	mov    eax,ecx
c000ccd1:	83 c1 04             	add    ecx,0x4
c000ccd4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ccd8:	ff 30                	push   DWORD PTR [eax]
c000ccda:	e8 0b ff ff ff       	call   c000cbea <Dbg::logs(char*)>
c000ccdf:	58                   	pop    eax
c000cce0:	eb ca                	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cce2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cce6:	89 d0                	mov    eax,edx
c000cce8:	83 c2 04             	add    edx,0x4
c000cceb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ccef:	ff 30                	push   DWORD PTR [eax]
c000ccf1:	e8 11 ff ff ff       	call   c000cc07 <Dbg::logWriteInt(unsigned int)>
c000ccf6:	58                   	pop    eax
c000ccf7:	eb b3                	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000ccf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ccfd:	89 d0                	mov    eax,edx
c000ccff:	83 c2 04             	add    edx,0x4
c000cd02:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cd05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd09:	50                   	push   eax
c000cd0a:	e8 bb fe ff ff       	call   c000cbca <Dbg::logc(char)>
c000cd0f:	58                   	pop    eax
c000cd10:	eb 9a                	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cd12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd16:	89 c8                	mov    eax,ecx
c000cd18:	83 c1 04             	add    ecx,0x4
c000cd1b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd1f:	6a 10                	push   0x10
c000cd21:	ff 30                	push   DWORD PTR [eax]
c000cd23:	e8 fc fe ff ff       	call   c000cc24 <Dbg::logWriteIntBase(unsigned int, int)>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	eb 80                	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cd2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd30:	89 d0                	mov    eax,edx
c000cd32:	83 c2 08             	add    edx,0x8
c000cd35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd39:	6a 10                	push   0x10
c000cd3b:	ff 30                	push   DWORD PTR [eax]
c000cd3d:	e8 e2 fe ff ff       	call   c000cc24 <Dbg::logWriteIntBase(unsigned int, int)>
c000cd42:	58                   	pop    eax
c000cd43:	5a                   	pop    edx
c000cd44:	e9 63 ff ff ff       	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cd49:	6a 25                	push   0x25
c000cd4b:	e8 7a fe ff ff       	call   c000cbca <Dbg::logc(char)>
c000cd50:	58                   	pop    eax
c000cd51:	e9 56 ff ff ff       	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cd56:	6a 25                	push   0x25
c000cd58:	e8 6d fe ff ff       	call   c000cbca <Dbg::logc(char)>
c000cd5d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cd60:	50                   	push   eax
c000cd61:	e8 64 fe ff ff       	call   c000cbca <Dbg::logc(char)>
c000cd66:	5a                   	pop    edx
c000cd67:	59                   	pop    ecx
c000cd68:	e9 3f ff ff ff       	jmp    c000ccac <Dbg::kprintf(char const*, ...)+0x69>
c000cd6d:	90                   	nop

c000cd6e <File::read(unsigned long long, void*, int*)>:
c000cd6e:	53                   	push   ebx
c000cd6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd77:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cd7e:	3c 19                	cmp    al,0x19
c000cd80:	77 35                	ja     c000cdb7 <File::read(unsigned long long, void*, int*)+0x49>
c000cd82:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c000cd89:	85 c0                	test   eax,eax
c000cd8b:	74 2a                	je     c000cdb7 <File::read(unsigned long long, void*, int*)+0x49>
c000cd8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cd93:	85 c0                	test   eax,eax
c000cd95:	74 20                	je     c000cdb7 <File::read(unsigned long long, void*, int*)+0x49>
c000cd97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cd9b:	74 21                	je     c000cdbe <File::read(unsigned long long, void*, int*)+0x50>
c000cd9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cd9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cda3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cda9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdb1:	5b                   	pop    ebx
c000cdb2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cdb5:	ff e0                	jmp    eax
c000cdb7:	b8 0b 00 00 00       	mov    eax,0xb
c000cdbc:	eb 05                	jmp    c000cdc3 <File::read(unsigned long long, void*, int*)+0x55>
c000cdbe:	b8 05 00 00 00       	mov    eax,0x5
c000cdc3:	5b                   	pop    ebx
c000cdc4:	c3                   	ret    
c000cdc5:	90                   	nop

c000cdc6 <File::write(unsigned long long, void*, int*)>:
c000cdc6:	53                   	push   ebx
c000cdc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cdcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cdd6:	3c 19                	cmp    al,0x19
c000cdd8:	77 35                	ja     c000ce0f <File::write(unsigned long long, void*, int*)+0x49>
c000cdda:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c000cde1:	85 c0                	test   eax,eax
c000cde3:	74 2a                	je     c000ce0f <File::write(unsigned long long, void*, int*)+0x49>
c000cde5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cdeb:	85 c0                	test   eax,eax
c000cded:	74 20                	je     c000ce0f <File::write(unsigned long long, void*, int*)+0x49>
c000cdef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cdf3:	74 21                	je     c000ce16 <File::write(unsigned long long, void*, int*)+0x50>
c000cdf5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cdf7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cdfb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce09:	5b                   	pop    ebx
c000ce0a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ce0d:	ff e0                	jmp    eax
c000ce0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce14:	eb 05                	jmp    c000ce1b <File::write(unsigned long long, void*, int*)+0x55>
c000ce16:	b8 05 00 00 00       	mov    eax,0x5
c000ce1b:	5b                   	pop    ebx
c000ce1c:	c3                   	ret    
c000ce1d:	90                   	nop

c000ce1e <Directory::read(unsigned long long, void*, int*)>:
c000ce1e:	53                   	push   ebx
c000ce1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce2e:	3c 19                	cmp    al,0x19
c000ce30:	77 35                	ja     c000ce67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce32:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c000ce39:	85 c0                	test   eax,eax
c000ce3b:	74 2a                	je     c000ce67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce43:	85 c0                	test   eax,eax
c000ce45:	74 20                	je     c000ce67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ce47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce4b:	74 21                	je     c000ce6e <Directory::read(unsigned long long, void*, int*)+0x50>
c000ce4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce61:	5b                   	pop    ebx
c000ce62:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ce65:	ff e0                	jmp    eax
c000ce67:	b8 0b 00 00 00       	mov    eax,0xb
c000ce6c:	eb 05                	jmp    c000ce73 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ce6e:	b8 05 00 00 00       	mov    eax,0x5
c000ce73:	5b                   	pop    ebx
c000ce74:	c3                   	ret    
c000ce75:	90                   	nop

c000ce76 <Directory::write(unsigned long long, void*, int*)>:
c000ce76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce7a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ce81:	b8 0b 00 00 00       	mov    eax,0xb
c000ce86:	80 fa 19             	cmp    dl,0x19
c000ce89:	77 18                	ja     c000cea3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ce8b:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000ce92:	85 d2                	test   edx,edx
c000ce94:	74 0d                	je     c000cea3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ce96:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ce9d:	19 c0                	sbb    eax,eax
c000ce9f:	83 e0 0a             	and    eax,0xa
c000cea2:	40                   	inc    eax
c000cea3:	c3                   	ret    

c000cea4 <File::isAtty()>:
c000cea4:	31 c0                	xor    eax,eax
c000cea6:	c3                   	ret    
c000cea7:	90                   	nop

c000cea8 <Directory::isAtty()>:
c000cea8:	31 c0                	xor    eax,eax
c000ceaa:	c3                   	ret    
c000ceab:	90                   	nop

c000ceac <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ceac:	b8 0a 00 00 00       	mov    eax,0xa
c000ceb1:	c3                   	ret    

c000ceb2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ceb2:	b8 0a 00 00 00       	mov    eax,0xa
c000ceb7:	c3                   	ret    

c000ceb8 <Filesystem::allocateSwapfile(char const*, int)>:
c000ceb8:	31 c0                	xor    eax,eax
c000ceba:	31 d2                	xor    edx,edx
c000cebc:	c3                   	ret    
c000cebd:	90                   	nop

c000cebe <File::~File()>:
c000cebe:	83 ec 0c             	sub    esp,0xc
c000cec1:	ba dc 41 02 c0       	mov    edx,0xc00241dc
c000cec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceca:	89 10                	mov    DWORD PTR [eax],edx
c000cecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced0:	83 ec 0c             	sub    esp,0xc
c000ced3:	50                   	push   eax
c000ced4:	e8 e3 e7 ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	90                   	nop
c000cedd:	83 c4 0c             	add    esp,0xc
c000cee0:	c3                   	ret    
c000cee1:	90                   	nop

c000cee2 <File::~File()>:
c000cee2:	83 ec 0c             	sub    esp,0xc
c000cee5:	83 ec 0c             	sub    esp,0xc
c000cee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceec:	e8 cd ff ff ff       	call   c000cebe <File::~File()>
c000cef1:	83 c4 10             	add    esp,0x10
c000cef4:	83 ec 08             	sub    esp,0x8
c000cef7:	68 14 01 00 00       	push   0x114
c000cefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf00:	e8 5d fc ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000cf05:	83 c4 10             	add    esp,0x10
c000cf08:	83 c4 0c             	add    esp,0xc
c000cf0b:	c3                   	ret    

c000cf0c <Directory::~Directory()>:
c000cf0c:	83 ec 0c             	sub    esp,0xc
c000cf0f:	ba f8 41 02 c0       	mov    edx,0xc00241f8
c000cf14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf18:	89 10                	mov    DWORD PTR [eax],edx
c000cf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1e:	83 ec 0c             	sub    esp,0xc
c000cf21:	50                   	push   eax
c000cf22:	e8 95 e7 ff ff       	call   c000b6bc <UnixFile::~UnixFile()>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	90                   	nop
c000cf2b:	83 c4 0c             	add    esp,0xc
c000cf2e:	c3                   	ret    
c000cf2f:	90                   	nop

c000cf30 <Directory::~Directory()>:
c000cf30:	83 ec 0c             	sub    esp,0xc
c000cf33:	83 ec 0c             	sub    esp,0xc
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 cd ff ff ff       	call   c000cf0c <Directory::~Directory()>
c000cf3f:	83 c4 10             	add    esp,0x10
c000cf42:	83 ec 08             	sub    esp,0x8
c000cf45:	68 14 01 00 00       	push   0x114
c000cf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4e:	e8 0f fc ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000cf53:	83 c4 10             	add    esp,0x10
c000cf56:	83 c4 0c             	add    esp,0xc
c000cf59:	c3                   	ret    

c000cf5a <Filesystem::Filesystem()>:
c000cf5a:	ba 74 41 02 c0       	mov    edx,0xc0024174
c000cf5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf63:	89 10                	mov    DWORD PTR [eax],edx
c000cf65:	8b 15 d4 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275d4
c000cf6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cf72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf76:	a3 d4 75 02 c0       	mov    ds:0xc00275d4,eax
c000cf7b:	90                   	nop
c000cf7c:	c3                   	ret    
c000cf7d:	90                   	nop

c000cf7e <Filesystem::~Filesystem()>:
c000cf7e:	ba 74 41 02 c0       	mov    edx,0xc0024174
c000cf83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf87:	89 10                	mov    DWORD PTR [eax],edx
c000cf89:	90                   	nop
c000cf8a:	c3                   	ret    
c000cf8b:	90                   	nop

c000cf8c <Filesystem::~Filesystem()>:
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cf93:	e8 e6 ff ff ff       	call   c000cf7e <Filesystem::~Filesystem()>
c000cf98:	83 c4 04             	add    esp,0x4
c000cf9b:	83 ec 08             	sub    esp,0x8
c000cf9e:	6a 08                	push   0x8
c000cfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa4:	e8 b9 fb ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	83 c4 0c             	add    esp,0xc
c000cfaf:	c3                   	ret    

c000cfb0 <Fs::getcwd(Process*, char*, int)>:
c000cfb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfb4:	31 c0                	xor    eax,eax
c000cfb6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfb9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cfbd:	7d 15                	jge    c000cfd4 <Fs::getcwd(Process*, char*, int)+0x24>
c000cfbf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfc3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cfca:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cfcd:	84 c9                	test   cl,cl
c000cfcf:	74 06                	je     c000cfd7 <Fs::getcwd(Process*, char*, int)+0x27>
c000cfd1:	40                   	inc    eax
c000cfd2:	eb e2                	jmp    c000cfb6 <Fs::getcwd(Process*, char*, int)+0x6>
c000cfd4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfd7:	31 c0                	xor    eax,eax
c000cfd9:	c3                   	ret    

c000cfda <Fs::initVFS()>:
c000cfda:	83 ec 18             	sub    esp,0x18
c000cfdd:	6a 08                	push   0x8
c000cfdf:	e8 df c9 ff ff       	call   c00099c3 <malloc>
c000cfe4:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfe7:	e8 cc e5 00 00       	call   c001b5b8 <FAT::FAT()>
c000cfec:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cff3:	e8 cb c9 ff ff       	call   c00099c3 <malloc>
c000cff8:	89 04 24             	mov    DWORD PTR [esp],eax
c000cffb:	e8 16 f8 00 00       	call   c001c816 <ISO9660::ISO9660()>
c000d000:	83 c4 1c             	add    esp,0x1c
c000d003:	c3                   	ret    

c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d004:	55                   	push   ebp
c000d005:	57                   	push   edi
c000d006:	56                   	push   esi
c000d007:	53                   	push   ebx
c000d008:	81 ec 10 04 00 00    	sub    esp,0x410
c000d00e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d015:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d01c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d023:	68 00 04 00 00       	push   0x400
c000d028:	6a 00                	push   0x0
c000d02a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d02e:	56                   	push   esi
c000d02f:	e8 50 36 ff ff       	call   c0000684 <memset>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d03b:	75 0b                	jne    c000d048 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d03d:	50                   	push   eax
c000d03e:	50                   	push   eax
c000d03f:	57                   	push   edi
c000d040:	56                   	push   esi
c000d041:	e8 fa 36 ff ff       	call   c0000740 <strcpy>
c000d046:	eb 41                	jmp    c000d089 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d048:	8a 07                	mov    al,BYTE PTR [edi]
c000d04a:	3c 5c                	cmp    al,0x5c
c000d04c:	74 04                	je     c000d052 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d04e:	3c 2f                	cmp    al,0x2f
c000d050:	75 18                	jne    c000d06a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d052:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d055:	3c 60                	cmp    al,0x60
c000d057:	7e 03                	jle    c000d05c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d059:	83 e8 20             	sub    eax,0x20
c000d05c:	88 04 24             	mov    BYTE PTR [esp],al
c000d05f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d066:	50                   	push   eax
c000d067:	50                   	push   eax
c000d068:	eb 18                	jmp    c000d082 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d06a:	50                   	push   eax
c000d06b:	50                   	push   eax
c000d06c:	55                   	push   ebp
c000d06d:	56                   	push   esi
c000d06e:	e8 cd 36 ff ff       	call   c0000740 <strcpy>
c000d073:	5a                   	pop    edx
c000d074:	59                   	pop    ecx
c000d075:	68 92 57 02 c0       	push   0xc0025792
c000d07a:	56                   	push   esi
c000d07b:	e8 00 38 ff ff       	call   c0000880 <strcat>
c000d080:	5d                   	pop    ebp
c000d081:	58                   	pop    eax
c000d082:	57                   	push   edi
c000d083:	56                   	push   esi
c000d084:	e8 f7 37 ff ff       	call   c0000880 <strcat>
c000d089:	83 c4 10             	add    esp,0x10
c000d08c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d08f:	3c 60                	cmp    al,0x60
c000d091:	7e 03                	jle    c000d096 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d093:	83 e8 20             	sub    eax,0x20
c000d096:	88 04 24             	mov    BYTE PTR [esp],al
c000d099:	88 03                	mov    BYTE PTR [ebx],al
c000d09b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d0a2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d0a8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d0ac:	bf 03 00 00 00       	mov    edi,0x3
c000d0b1:	b8 03 00 00 00       	mov    eax,0x3
c000d0b6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d0b9:	84 d2                	test   dl,dl
c000d0bb:	0f 84 91 00 00 00    	je     c000d152 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d0c1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d0c4:	80 fa 5c             	cmp    dl,0x5c
c000d0c7:	74 05                	je     c000d0ce <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d0c9:	80 fa 2f             	cmp    dl,0x2f
c000d0cc:	75 12                	jne    c000d0e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d0ce:	89 c5                	mov    ebp,eax
c000d0d0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d0d5:	74 09                	je     c000d0e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d0d7:	40                   	inc    eax
c000d0d8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d0dc:	89 cf                	mov    edi,ecx
c000d0de:	eb d6                	jmp    c000d0b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d0e0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d0e5:	75 5b                	jne    c000d142 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d0e7:	80 fa 2e             	cmp    dl,0x2e
c000d0ea:	75 56                	jne    c000d142 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d0ec:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d0f0:	74 19                	je     c000d10b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d0f2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d0f7:	74 53                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d0f9:	89 f9                	mov    ecx,edi
c000d0fb:	41                   	inc    ecx
c000d0fc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d0ff:	80 fa 2f             	cmp    dl,0x2f
c000d102:	74 f7                	je     c000d0fb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d104:	80 fa 5c             	cmp    dl,0x5c
c000d107:	74 f2                	je     c000d0fb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d109:	eb d1                	jmp    c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d10b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d110:	74 3a                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d112:	83 f8 03             	cmp    eax,0x3
c000d115:	74 c5                	je     c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d117:	41                   	inc    ecx
c000d118:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d11b:	80 fa 2f             	cmp    dl,0x2f
c000d11e:	74 f7                	je     c000d117 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d120:	80 fa 5c             	cmp    dl,0x5c
c000d123:	74 f2                	je     c000d117 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d125:	48                   	dec    eax
c000d126:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d12a:	75 06                	jne    c000d132 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d12c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d130:	eb f3                	jmp    c000d125 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d132:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d136:	74 07                	je     c000d13f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d138:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d13c:	48                   	dec    eax
c000d13d:	eb f3                	jmp    c000d132 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d13f:	40                   	inc    eax
c000d140:	eb 9a                	jmp    c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d142:	80 fa 2f             	cmp    dl,0x2f
c000d145:	74 95                	je     c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d147:	80 fa 5c             	cmp    dl,0x5c
c000d14a:	74 90                	je     c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d14c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d14f:	40                   	inc    eax
c000d150:	eb 8a                	jmp    c000d0dc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d152:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d156:	83 ec 0c             	sub    esp,0xc
c000d159:	53                   	push   ebx
c000d15a:	e8 41 35 ff ff       	call   c00006a0 <strlen>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d167:	75 26                	jne    c000d18f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d169:	83 ec 0c             	sub    esp,0xc
c000d16c:	53                   	push   ebx
c000d16d:	e8 2e 35 ff ff       	call   c00006a0 <strlen>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d17a:	74 26                	je     c000d1a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d17c:	83 ec 0c             	sub    esp,0xc
c000d17f:	53                   	push   ebx
c000d180:	e8 1b 35 ff ff       	call   c00006a0 <strlen>
c000d185:	83 c4 10             	add    esp,0x10
c000d188:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d18d:	eb c7                	jmp    c000d156 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d18f:	83 ec 0c             	sub    esp,0xc
c000d192:	53                   	push   ebx
c000d193:	e8 08 35 ff ff       	call   c00006a0 <strlen>
c000d198:	83 c4 10             	add    esp,0x10
c000d19b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d1a0:	74 c7                	je     c000d169 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d1a2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d1a8:	5b                   	pop    ebx
c000d1a9:	5e                   	pop    esi
c000d1aa:	5f                   	pop    edi
c000d1ab:	5d                   	pop    ebp
c000d1ac:	c3                   	ret    
c000d1ad:	90                   	nop

c000d1ae <File::File(char const*, Process*)>:
c000d1ae:	83 ec 0c             	sub    esp,0xc
c000d1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b5:	83 ec 08             	sub    esp,0x8
c000d1b8:	6a 00                	push   0x0
c000d1ba:	50                   	push   eax
c000d1bb:	e8 1a e3 ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000d1c0:	83 c4 10             	add    esp,0x10
c000d1c3:	ba dc 41 02 c0       	mov    edx,0xc00241dc
c000d1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cc:	89 10                	mov    DWORD PTR [eax],edx
c000d1ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1dc:	83 c0 0d             	add    eax,0xd
c000d1df:	83 ec 04             	sub    esp,0x4
c000d1e2:	52                   	push   edx
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	50                   	push   eax
c000d1e8:	e8 17 fe ff ff       	call   c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d1ed:	83 c4 10             	add    esp,0x10
c000d1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d1f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d208:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d20c:	90                   	nop
c000d20d:	83 c4 0c             	add    esp,0xc
c000d210:	c3                   	ret    
c000d211:	90                   	nop

c000d212 <File::open(FileOpenMode)>:
c000d212:	53                   	push   ebx
c000d213:	b8 0b 00 00 00       	mov    eax,0xb
c000d218:	83 ec 08             	sub    esp,0x8
c000d21b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d21f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d226:	80 fa 19             	cmp    dl,0x19
c000d229:	77 40                	ja     c000d26b <File::open(FileOpenMode)+0x59>
c000d22b:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000d232:	85 d2                	test   edx,edx
c000d234:	74 35                	je     c000d26b <File::open(FileOpenMode)+0x59>
c000d236:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d23c:	85 d2                	test   edx,edx
c000d23e:	74 2b                	je     c000d26b <File::open(FileOpenMode)+0x59>
c000d240:	b8 06 00 00 00       	mov    eax,0x6
c000d245:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d249:	75 20                	jne    c000d26b <File::open(FileOpenMode)+0x59>
c000d24b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d24d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d257:	51                   	push   ecx
c000d258:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d25b:	51                   	push   ecx
c000d25c:	52                   	push   edx
c000d25d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	85 c0                	test   eax,eax
c000d265:	75 04                	jne    c000d26b <File::open(FileOpenMode)+0x59>
c000d267:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d26b:	83 c4 08             	add    esp,0x8
c000d26e:	5b                   	pop    ebx
c000d26f:	c3                   	ret    

c000d270 <File::close()>:
c000d270:	53                   	push   ebx
c000d271:	b8 0b 00 00 00       	mov    eax,0xb
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d27d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d284:	80 fa 19             	cmp    dl,0x19
c000d287:	77 41                	ja     c000d2ca <File::close()+0x5a>
c000d289:	8b 1c 95 60 7a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd85a0]
c000d290:	85 db                	test   ebx,ebx
c000d292:	74 36                	je     c000d2ca <File::close()+0x5a>
c000d294:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d29b:	74 2d                	je     c000d2ca <File::close()+0x5a>
c000d29d:	b8 05 00 00 00       	mov    eax,0x5
c000d2a2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d2a6:	74 22                	je     c000d2ca <File::close()+0x5a>
c000d2a8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d2ac:	8b 04 95 60 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd85a0]
c000d2b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2b9:	53                   	push   ebx
c000d2ba:	53                   	push   ebx
c000d2bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d2bd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d2c3:	50                   	push   eax
c000d2c4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d2c7:	83 c4 10             	add    esp,0x10
c000d2ca:	83 c4 08             	add    esp,0x8
c000d2cd:	5b                   	pop    ebx
c000d2ce:	c3                   	ret    
c000d2cf:	90                   	nop

c000d2d0 <File::seek(unsigned long long)>:
c000d2d0:	56                   	push   esi
c000d2d1:	53                   	push   ebx
c000d2d2:	b8 0b 00 00 00       	mov    eax,0xb
c000d2d7:	51                   	push   ecx
c000d2d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2e0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d2e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2eb:	80 fa 19             	cmp    dl,0x19
c000d2ee:	77 31                	ja     c000d321 <File::seek(unsigned long long)+0x51>
c000d2f0:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000d2f7:	85 d2                	test   edx,edx
c000d2f9:	74 26                	je     c000d321 <File::seek(unsigned long long)+0x51>
c000d2fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d301:	85 d2                	test   edx,edx
c000d303:	74 1c                	je     c000d321 <File::seek(unsigned long long)+0x51>
c000d305:	b8 05 00 00 00       	mov    eax,0x5
c000d30a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d30e:	74 11                	je     c000d321 <File::seek(unsigned long long)+0x51>
c000d310:	8b 02                	mov    eax,DWORD PTR [edx]
c000d312:	53                   	push   ebx
c000d313:	51                   	push   ecx
c000d314:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d31a:	52                   	push   edx
c000d31b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	5a                   	pop    edx
c000d322:	5b                   	pop    ebx
c000d323:	5e                   	pop    esi
c000d324:	c3                   	ret    
c000d325:	90                   	nop

c000d326 <File::tell(unsigned long long*)>:
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	b8 0b 00 00 00       	mov    eax,0xb
c000d32e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d332:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d339:	80 fa 19             	cmp    dl,0x19
c000d33c:	77 34                	ja     c000d372 <File::tell(unsigned long long*)+0x4c>
c000d33e:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000d345:	85 d2                	test   edx,edx
c000d347:	74 29                	je     c000d372 <File::tell(unsigned long long*)+0x4c>
c000d349:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d34f:	85 d2                	test   edx,edx
c000d351:	74 1f                	je     c000d372 <File::tell(unsigned long long*)+0x4c>
c000d353:	b8 05 00 00 00       	mov    eax,0x5
c000d358:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d35c:	74 14                	je     c000d372 <File::tell(unsigned long long*)+0x4c>
c000d35e:	50                   	push   eax
c000d35f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d361:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d365:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d36b:	52                   	push   edx
c000d36c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	83 c4 0c             	add    esp,0xc
c000d375:	c3                   	ret    

c000d376 <File::rewind()>:
c000d376:	83 ec 10             	sub    esp,0x10
c000d379:	6a 00                	push   0x0
c000d37b:	6a 00                	push   0x0
c000d37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d381:	e8 4a ff ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c000d386:	83 c4 1c             	add    esp,0x1c
c000d389:	c3                   	ret    

c000d38a <File::unlink()>:
c000d38a:	83 ec 0c             	sub    esp,0xc
c000d38d:	b8 0b 00 00 00       	mov    eax,0xb
c000d392:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d396:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d39d:	80 f9 19             	cmp    cl,0x19
c000d3a0:	77 2f                	ja     c000d3d1 <File::unlink()+0x47>
c000d3a2:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d3a9:	85 c9                	test   ecx,ecx
c000d3ab:	74 24                	je     c000d3d1 <File::unlink()+0x47>
c000d3ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3b3:	85 c9                	test   ecx,ecx
c000d3b5:	74 1a                	je     c000d3d1 <File::unlink()+0x47>
c000d3b7:	b8 06 00 00 00       	mov    eax,0x6
c000d3bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3c0:	75 0f                	jne    c000d3d1 <File::unlink()+0x47>
c000d3c2:	83 c2 0d             	add    edx,0xd
c000d3c5:	50                   	push   eax
c000d3c6:	50                   	push   eax
c000d3c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3c9:	52                   	push   edx
c000d3ca:	51                   	push   ecx
c000d3cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	83 c4 0c             	add    esp,0xc
c000d3d4:	c3                   	ret    
c000d3d5:	90                   	nop

c000d3d6 <File::rename(char const*)>:
c000d3d6:	83 ec 0c             	sub    esp,0xc
c000d3d9:	b8 0b 00 00 00       	mov    eax,0xb
c000d3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3e9:	80 f9 19             	cmp    cl,0x19
c000d3ec:	77 32                	ja     c000d420 <File::rename(char const*)+0x4a>
c000d3ee:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d3f5:	85 c9                	test   ecx,ecx
c000d3f7:	74 27                	je     c000d420 <File::rename(char const*)+0x4a>
c000d3f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3ff:	85 c9                	test   ecx,ecx
c000d401:	74 1d                	je     c000d420 <File::rename(char const*)+0x4a>
c000d403:	b8 06 00 00 00       	mov    eax,0x6
c000d408:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d40c:	75 12                	jne    c000d420 <File::rename(char const*)+0x4a>
c000d40e:	83 c2 0d             	add    edx,0xd
c000d411:	50                   	push   eax
c000d412:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d418:	52                   	push   edx
c000d419:	51                   	push   ecx
c000d41a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d41d:	83 c4 10             	add    esp,0x10
c000d420:	83 c4 0c             	add    esp,0xc
c000d423:	c3                   	ret    

c000d424 <File::chfatattr(unsigned char, unsigned char)>:
c000d424:	57                   	push   edi
c000d425:	b8 0b 00 00 00       	mov    eax,0xb
c000d42a:	56                   	push   esi
c000d42b:	53                   	push   ebx
c000d42c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d430:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d434:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d43b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d43f:	80 f9 19             	cmp    cl,0x19
c000d442:	77 37                	ja     c000d47b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d444:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d44b:	85 c9                	test   ecx,ecx
c000d44d:	74 2c                	je     c000d47b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d44f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d455:	85 c9                	test   ecx,ecx
c000d457:	74 22                	je     c000d47b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d459:	b8 06 00 00 00       	mov    eax,0x6
c000d45e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d462:	75 17                	jne    c000d47b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d464:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d466:	89 f0                	mov    eax,esi
c000d468:	83 c2 0d             	add    edx,0xd
c000d46b:	0f b6 f0             	movzx  esi,al
c000d46e:	0f b6 db             	movzx  ebx,bl
c000d471:	56                   	push   esi
c000d472:	53                   	push   ebx
c000d473:	52                   	push   edx
c000d474:	51                   	push   ecx
c000d475:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	5b                   	pop    ebx
c000d47c:	5e                   	pop    esi
c000d47d:	5f                   	pop    edi
c000d47e:	c3                   	ret    
c000d47f:	90                   	nop

c000d480 <File::exists()>:
c000d480:	83 ec 0c             	sub    esp,0xc
c000d483:	31 c0                	xor    eax,eax
c000d485:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d489:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d490:	80 f9 19             	cmp    cl,0x19
c000d493:	77 24                	ja     c000d4b9 <File::exists()+0x39>
c000d495:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d49c:	85 c9                	test   ecx,ecx
c000d49e:	74 19                	je     c000d4b9 <File::exists()+0x39>
c000d4a0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4a6:	85 c9                	test   ecx,ecx
c000d4a8:	74 0f                	je     c000d4b9 <File::exists()+0x39>
c000d4aa:	83 c2 0d             	add    edx,0xd
c000d4ad:	50                   	push   eax
c000d4ae:	50                   	push   eax
c000d4af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4b1:	52                   	push   edx
c000d4b2:	51                   	push   ecx
c000d4b3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	83 c4 0c             	add    esp,0xc
c000d4bc:	c3                   	ret    
c000d4bd:	90                   	nop

c000d4be <File::stat(unsigned long long*, bool*)>:
c000d4be:	56                   	push   esi
c000d4bf:	53                   	push   ebx
c000d4c0:	50                   	push   eax
c000d4c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d4c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d4ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4d9:	80 f9 19             	cmp    cl,0x19
c000d4dc:	77 3d                	ja     c000d51b <File::stat(unsigned long long*, bool*)+0x5d>
c000d4de:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d4e5:	85 c9                	test   ecx,ecx
c000d4e7:	74 32                	je     c000d51b <File::stat(unsigned long long*, bool*)+0x5d>
c000d4e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4ef:	85 c9                	test   ecx,ecx
c000d4f1:	74 28                	je     c000d51b <File::stat(unsigned long long*, bool*)+0x5d>
c000d4f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4f9:	74 13                	je     c000d50e <File::stat(unsigned long long*, bool*)+0x50>
c000d4fb:	83 ec 04             	sub    esp,0x4
c000d4fe:	56                   	push   esi
c000d4ff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d505:	51                   	push   ecx
c000d506:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d509:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d50c:	eb 0a                	jmp    c000d518 <File::stat(unsigned long long*, bool*)+0x5a>
c000d50e:	53                   	push   ebx
c000d50f:	83 c2 0d             	add    edx,0xd
c000d512:	56                   	push   esi
c000d513:	52                   	push   edx
c000d514:	51                   	push   ecx
c000d515:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d518:	83 c4 10             	add    esp,0x10
c000d51b:	5a                   	pop    edx
c000d51c:	5b                   	pop    ebx
c000d51d:	5e                   	pop    esi
c000d51e:	c3                   	ret    

c000d51f <Fs::setcwd(Process*, char*)>:
c000d51f:	55                   	push   ebp
c000d520:	57                   	push   edi
c000d521:	56                   	push   esi
c000d522:	53                   	push   ebx
c000d523:	81 ec 20 02 00 00    	sub    esp,0x220
c000d529:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d530:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d536:	57                   	push   edi
c000d537:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d53e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d542:	56                   	push   esi
c000d543:	e8 bc fa ff ff       	call   c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d548:	89 34 24             	mov    DWORD PTR [esp],esi
c000d54b:	e8 50 31 ff ff       	call   c00006a0 <strlen>
c000d550:	83 c4 10             	add    esp,0x10
c000d553:	83 f8 02             	cmp    eax,0x2
c000d556:	77 17                	ja     c000d56f <Fs::setcwd(Process*, char*)+0x50>
c000d558:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d55d:	83 e8 41             	sub    eax,0x41
c000d560:	83 f8 19             	cmp    eax,0x19
c000d563:	76 24                	jbe    c000d589 <Fs::setcwd(Process*, char*)+0x6a>
c000d565:	b8 03 00 00 00       	mov    eax,0x3
c000d56a:	e9 e0 00 00 00       	jmp    c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d56f:	83 ec 0c             	sub    esp,0xc
c000d572:	56                   	push   esi
c000d573:	e8 28 31 ff ff       	call   c00006a0 <strlen>
c000d578:	83 c4 10             	add    esp,0x10
c000d57b:	83 f8 03             	cmp    eax,0x3
c000d57e:	75 34                	jne    c000d5b4 <Fs::setcwd(Process*, char*)+0x95>
c000d580:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d585:	75 2d                	jne    c000d5b4 <Fs::setcwd(Process*, char*)+0x95>
c000d587:	eb cf                	jmp    c000d558 <Fs::setcwd(Process*, char*)+0x39>
c000d589:	8b 14 85 60 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd85a0]
c000d590:	b8 05 00 00 00       	mov    eax,0x5
c000d595:	85 d2                	test   edx,edx
c000d597:	0f 84 b2 00 00 00    	je     c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d59d:	b8 06 00 00 00       	mov    eax,0x6
c000d5a2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d5a9:	0f 85 92 00 00 00    	jne    c000d641 <Fs::setcwd(Process*, char*)+0x122>
c000d5af:	e9 9b 00 00 00       	jmp    c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d5b4:	83 ec 0c             	sub    esp,0xc
c000d5b7:	68 14 01 00 00       	push   0x114
c000d5bc:	e8 02 c4 ff ff       	call   c00099c3 <malloc>
c000d5c1:	83 c4 0c             	add    esp,0xc
c000d5c4:	89 c3                	mov    ebx,eax
c000d5c6:	55                   	push   ebp
c000d5c7:	56                   	push   esi
c000d5c8:	50                   	push   eax
c000d5c9:	e8 e0 fb ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c000d5ce:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d5d3:	83 c4 0c             	add    esp,0xc
c000d5d6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d5da:	50                   	push   eax
c000d5db:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d5df:	50                   	push   eax
c000d5e0:	53                   	push   ebx
c000d5e1:	e8 d8 fe ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	83 f8 02             	cmp    eax,0x2
c000d5ec:	74 04                	je     c000d5f2 <Fs::setcwd(Process*, char*)+0xd3>
c000d5ee:	85 c0                	test   eax,eax
c000d5f0:	74 1c                	je     c000d60e <Fs::setcwd(Process*, char*)+0xef>
c000d5f2:	b8 01 00 00 00       	mov    eax,0x1
c000d5f7:	85 db                	test   ebx,ebx
c000d5f9:	74 54                	je     c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d5fb:	83 ec 0c             	sub    esp,0xc
c000d5fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d600:	53                   	push   ebx
c000d601:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d604:	83 c4 10             	add    esp,0x10
c000d607:	b8 01 00 00 00       	mov    eax,0x1
c000d60c:	eb 41                	jmp    c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d60e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d613:	75 1c                	jne    c000d631 <Fs::setcwd(Process*, char*)+0x112>
c000d615:	b8 02 00 00 00       	mov    eax,0x2
c000d61a:	85 db                	test   ebx,ebx
c000d61c:	74 31                	je     c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d623:	53                   	push   ebx
c000d624:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d627:	83 c4 10             	add    esp,0x10
c000d62a:	b8 02 00 00 00       	mov    eax,0x2
c000d62f:	eb 1e                	jmp    c000d64f <Fs::setcwd(Process*, char*)+0x130>
c000d631:	85 db                	test   ebx,ebx
c000d633:	74 0c                	je     c000d641 <Fs::setcwd(Process*, char*)+0x122>
c000d635:	83 ec 0c             	sub    esp,0xc
c000d638:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d63a:	53                   	push   ebx
c000d63b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	50                   	push   eax
c000d642:	50                   	push   eax
c000d643:	56                   	push   esi
c000d644:	57                   	push   edi
c000d645:	e8 f6 30 ff ff       	call   c0000740 <strcpy>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	31 c0                	xor    eax,eax
c000d64f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d655:	5b                   	pop    ebx
c000d656:	5e                   	pop    esi
c000d657:	5f                   	pop    edi
c000d658:	5d                   	pop    ebp
c000d659:	c3                   	ret    

c000d65a <Directory::Directory(char const*, Process*)>:
c000d65a:	83 ec 0c             	sub    esp,0xc
c000d65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d661:	83 ec 08             	sub    esp,0x8
c000d664:	6a 00                	push   0x0
c000d666:	50                   	push   eax
c000d667:	e8 6e de ff ff       	call   c000b4da <UnixFile::UnixFile(int)>
c000d66c:	83 c4 10             	add    esp,0x10
c000d66f:	ba f8 41 02 c0       	mov    edx,0xc00241f8
c000d674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d678:	89 10                	mov    DWORD PTR [eax],edx
c000d67a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d67e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d688:	83 c0 0d             	add    eax,0xd
c000d68b:	83 ec 04             	sub    esp,0x4
c000d68e:	52                   	push   edx
c000d68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d693:	50                   	push   eax
c000d694:	e8 6b f9 ff ff       	call   c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d6a3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6aa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d6b8:	90                   	nop
c000d6b9:	83 c4 0c             	add    esp,0xc
c000d6bc:	c3                   	ret    
c000d6bd:	90                   	nop

c000d6be <Directory::open()>:
c000d6be:	53                   	push   ebx
c000d6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c4:	83 ec 08             	sub    esp,0x8
c000d6c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6cb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6d2:	80 fa 19             	cmp    dl,0x19
c000d6d5:	77 3d                	ja     c000d714 <Directory::open()+0x56>
c000d6d7:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000d6de:	85 d2                	test   edx,edx
c000d6e0:	74 32                	je     c000d714 <Directory::open()+0x56>
c000d6e2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6e8:	85 d2                	test   edx,edx
c000d6ea:	74 28                	je     c000d714 <Directory::open()+0x56>
c000d6ec:	b8 06 00 00 00       	mov    eax,0x6
c000d6f1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6f5:	75 1d                	jne    c000d714 <Directory::open()+0x56>
c000d6f7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6fd:	50                   	push   eax
c000d6fe:	8b 02                	mov    eax,DWORD PTR [edx]
c000d700:	51                   	push   ecx
c000d701:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d704:	51                   	push   ecx
c000d705:	52                   	push   edx
c000d706:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	85 c0                	test   eax,eax
c000d70e:	75 04                	jne    c000d714 <Directory::open()+0x56>
c000d710:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d714:	83 c4 08             	add    esp,0x8
c000d717:	5b                   	pop    ebx
c000d718:	c3                   	ret    
c000d719:	90                   	nop

c000d71a <Directory::close()>:
c000d71a:	53                   	push   ebx
c000d71b:	b8 0b 00 00 00       	mov    eax,0xb
c000d720:	83 ec 08             	sub    esp,0x8
c000d723:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d727:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d72e:	80 fa 19             	cmp    dl,0x19
c000d731:	77 41                	ja     c000d774 <Directory::close()+0x5a>
c000d733:	8b 1c 95 60 7a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd85a0]
c000d73a:	85 db                	test   ebx,ebx
c000d73c:	74 36                	je     c000d774 <Directory::close()+0x5a>
c000d73e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d745:	74 2d                	je     c000d774 <Directory::close()+0x5a>
c000d747:	b8 05 00 00 00       	mov    eax,0x5
c000d74c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d750:	74 22                	je     c000d774 <Directory::close()+0x5a>
c000d752:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d756:	8b 04 95 60 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd85a0]
c000d75d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d763:	53                   	push   ebx
c000d764:	53                   	push   ebx
c000d765:	8b 10                	mov    edx,DWORD PTR [eax]
c000d767:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d76d:	50                   	push   eax
c000d76e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d771:	83 c4 10             	add    esp,0x10
c000d774:	83 c4 08             	add    esp,0x8
c000d777:	5b                   	pop    ebx
c000d778:	c3                   	ret    
c000d779:	90                   	nop

c000d77a <Directory::unlink()>:
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	b8 0b 00 00 00       	mov    eax,0xb
c000d782:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d786:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d78d:	80 f9 19             	cmp    cl,0x19
c000d790:	77 2f                	ja     c000d7c1 <Directory::unlink()+0x47>
c000d792:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d799:	85 c9                	test   ecx,ecx
c000d79b:	74 24                	je     c000d7c1 <Directory::unlink()+0x47>
c000d79d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7a3:	85 c9                	test   ecx,ecx
c000d7a5:	74 1a                	je     c000d7c1 <Directory::unlink()+0x47>
c000d7a7:	b8 06 00 00 00       	mov    eax,0x6
c000d7ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7b0:	75 0f                	jne    c000d7c1 <Directory::unlink()+0x47>
c000d7b2:	83 c2 0d             	add    edx,0xd
c000d7b5:	50                   	push   eax
c000d7b6:	50                   	push   eax
c000d7b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7b9:	52                   	push   edx
c000d7ba:	51                   	push   ecx
c000d7bb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	83 c4 0c             	add    esp,0xc
c000d7c4:	c3                   	ret    
c000d7c5:	90                   	nop

c000d7c6 <Directory::rename(char const*)>:
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	b8 0b 00 00 00       	mov    eax,0xb
c000d7ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7d9:	80 f9 19             	cmp    cl,0x19
c000d7dc:	77 32                	ja     c000d810 <Directory::rename(char const*)+0x4a>
c000d7de:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d7e5:	85 c9                	test   ecx,ecx
c000d7e7:	74 27                	je     c000d810 <Directory::rename(char const*)+0x4a>
c000d7e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ef:	85 c9                	test   ecx,ecx
c000d7f1:	74 1d                	je     c000d810 <Directory::rename(char const*)+0x4a>
c000d7f3:	b8 06 00 00 00       	mov    eax,0x6
c000d7f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7fc:	75 12                	jne    c000d810 <Directory::rename(char const*)+0x4a>
c000d7fe:	83 c2 0d             	add    edx,0xd
c000d801:	50                   	push   eax
c000d802:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d808:	52                   	push   edx
c000d809:	51                   	push   ecx
c000d80a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d80d:	83 c4 10             	add    esp,0x10
c000d810:	83 c4 0c             	add    esp,0xc
c000d813:	c3                   	ret    

c000d814 <Directory::exists()>:
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	31 c0                	xor    eax,eax
c000d819:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d81d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d824:	80 f9 19             	cmp    cl,0x19
c000d827:	77 24                	ja     c000d84d <Directory::exists()+0x39>
c000d829:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d830:	85 c9                	test   ecx,ecx
c000d832:	74 19                	je     c000d84d <Directory::exists()+0x39>
c000d834:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d83a:	85 c9                	test   ecx,ecx
c000d83c:	74 0f                	je     c000d84d <Directory::exists()+0x39>
c000d83e:	83 c2 0d             	add    edx,0xd
c000d841:	50                   	push   eax
c000d842:	50                   	push   eax
c000d843:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d845:	52                   	push   edx
c000d846:	51                   	push   ecx
c000d847:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d84a:	83 c4 10             	add    esp,0x10
c000d84d:	83 c4 0c             	add    esp,0xc
c000d850:	c3                   	ret    
c000d851:	90                   	nop

c000d852 <Directory::read(dirent*)>:
c000d852:	83 ec 1c             	sub    esp,0x1c
c000d855:	b8 0b 00 00 00       	mov    eax,0xb
c000d85a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d85e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d865:	80 fa 19             	cmp    dl,0x19
c000d868:	77 30                	ja     c000d89a <Directory::read(dirent*)+0x48>
c000d86a:	8b 14 95 60 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd85a0]
c000d871:	85 d2                	test   edx,edx
c000d873:	74 25                	je     c000d89a <Directory::read(dirent*)+0x48>
c000d875:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d87c:	74 1c                	je     c000d89a <Directory::read(dirent*)+0x48>
c000d87e:	83 ec 0c             	sub    esp,0xc
c000d881:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d883:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d887:	52                   	push   edx
c000d888:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d88c:	6a 00                	push   0x0
c000d88e:	68 10 01 00 00       	push   0x110
c000d893:	51                   	push   ecx
c000d894:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d897:	83 c4 20             	add    esp,0x20
c000d89a:	83 c4 1c             	add    esp,0x1c
c000d89d:	c3                   	ret    

c000d89e <Directory::create()>:
c000d89e:	83 ec 0c             	sub    esp,0xc
c000d8a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8b1:	80 f9 19             	cmp    cl,0x19
c000d8b4:	77 2f                	ja     c000d8e5 <Directory::create()+0x47>
c000d8b6:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c000d8bd:	85 c9                	test   ecx,ecx
c000d8bf:	74 24                	je     c000d8e5 <Directory::create()+0x47>
c000d8c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8c7:	85 c9                	test   ecx,ecx
c000d8c9:	74 1a                	je     c000d8e5 <Directory::create()+0x47>
c000d8cb:	b8 06 00 00 00       	mov    eax,0x6
c000d8d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8d4:	75 0f                	jne    c000d8e5 <Directory::create()+0x47>
c000d8d6:	83 c2 0d             	add    edx,0xd
c000d8d9:	50                   	push   eax
c000d8da:	50                   	push   eax
c000d8db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8dd:	52                   	push   edx
c000d8de:	51                   	push   ecx
c000d8df:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d8e2:	83 c4 10             	add    esp,0x10
c000d8e5:	83 c4 0c             	add    esp,0xc
c000d8e8:	c3                   	ret    
c000d8e9:	90                   	nop

c000d8ea <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d8ea:	b8 0a 00 00 00       	mov    eax,0xa
c000d8ef:	c3                   	ret    

c000d8f0 <Bus::Bus(char const*)>:
c000d8f0:	83 ec 0c             	sub    esp,0xc
c000d8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f7:	83 ec 08             	sub    esp,0x8
c000d8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fe:	50                   	push   eax
c000d8ff:	e8 8a 09 00 00       	call   c000e28e <Device::Device(char const*)>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	ba 14 42 02 c0       	mov    edx,0xc0024214
c000d90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d910:	89 10                	mov    DWORD PTR [eax],edx
c000d912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d916:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d920:	90                   	nop
c000d921:	83 c4 0c             	add    esp,0xc
c000d924:	c3                   	ret    
c000d925:	90                   	nop
c000d926:	66 90                	xchg   ax,ax

c000d928 <Bus::~Bus()>:
c000d928:	83 ec 0c             	sub    esp,0xc
c000d92b:	ba 14 42 02 c0       	mov    edx,0xc0024214
c000d930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d934:	89 10                	mov    DWORD PTR [eax],edx
c000d936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93a:	83 ec 0c             	sub    esp,0xc
c000d93d:	50                   	push   eax
c000d93e:	e8 15 06 00 00       	call   c000df58 <Device::~Device()>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	90                   	nop
c000d947:	83 c4 0c             	add    esp,0xc
c000d94a:	c3                   	ret    
c000d94b:	90                   	nop

c000d94c <Bus::~Bus()>:
c000d94c:	83 ec 0c             	sub    esp,0xc
c000d94f:	83 ec 0c             	sub    esp,0xc
c000d952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d956:	e8 cd ff ff ff       	call   c000d928 <Bus::~Bus()>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	83 ec 08             	sub    esp,0x8
c000d961:	68 58 01 00 00       	push   0x158
c000d966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96a:	e8 f3 f1 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000d96f:	83 c4 10             	add    esp,0x10
c000d972:	83 c4 0c             	add    esp,0xc
c000d975:	c3                   	ret    
c000d976:	66 90                	xchg   ax,ax

c000d978 <Buzzer::Buzzer(char const*)>:
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d97f:	83 ec 08             	sub    esp,0x8
c000d982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d986:	50                   	push   eax
c000d987:	e8 02 09 00 00       	call   c000e28e <Device::Device(char const*)>
c000d98c:	83 c4 10             	add    esp,0x10
c000d98f:	ba 40 42 02 c0       	mov    edx,0xc0024240
c000d994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d998:	89 10                	mov    DWORD PTR [eax],edx
c000d99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d99e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ac:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d9b6:	90                   	nop
c000d9b7:	83 c4 0c             	add    esp,0xc
c000d9ba:	c3                   	ret    
c000d9bb:	90                   	nop

c000d9bc <Buzzer::~Buzzer()>:
c000d9bc:	83 ec 0c             	sub    esp,0xc
c000d9bf:	ba 40 42 02 c0       	mov    edx,0xc0024240
c000d9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c8:	89 10                	mov    DWORD PTR [eax],edx
c000d9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ce:	83 ec 0c             	sub    esp,0xc
c000d9d1:	50                   	push   eax
c000d9d2:	e8 81 05 00 00       	call   c000df58 <Device::~Device()>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	90                   	nop
c000d9db:	83 c4 0c             	add    esp,0xc
c000d9de:	c3                   	ret    
c000d9df:	90                   	nop

c000d9e0 <Buzzer::~Buzzer()>:
c000d9e0:	83 ec 0c             	sub    esp,0xc
c000d9e3:	83 ec 0c             	sub    esp,0xc
c000d9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ea:	e8 cd ff ff ff       	call   c000d9bc <Buzzer::~Buzzer()>
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	83 ec 08             	sub    esp,0x8
c000d9f5:	68 5c 01 00 00       	push   0x15c
c000d9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fe:	e8 5f f1 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000da03:	83 c4 10             	add    esp,0x10
c000da06:	83 c4 0c             	add    esp,0xc
c000da09:	c3                   	ret    

c000da0a <Buzzer::stop()>:
c000da0a:	83 ec 14             	sub    esp,0x14
c000da0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da11:	8b 10                	mov    edx,DWORD PTR [eax]
c000da13:	6a 00                	push   0x0
c000da15:	50                   	push   eax
c000da16:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da19:	83 c4 1c             	add    esp,0x1c
c000da1c:	c3                   	ret    

c000da1d <beepThread(void*)>:
c000da1d:	53                   	push   ebx
c000da1e:	83 ec 08             	sub    esp,0x8
c000da21:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000da26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da2a:	48                   	dec    eax
c000da2b:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000da30:	75 02                	jne    c000da34 <beepThread(void*)+0x17>
c000da32:	fb                   	sti    
c000da33:	90                   	nop
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000da3e:	50                   	push   eax
c000da3f:	e8 e8 ab 00 00       	call   c001862c <milliTenthSleep(unsigned int)>
c000da44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da47:	e8 be ff ff ff       	call   c000da0a <Buzzer::stop()>
c000da4c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000da54:	83 c4 18             	add    esp,0x18
c000da57:	5b                   	pop    ebx
c000da58:	e9 cf aa 00 00       	jmp    c001852c <blockTask(TaskState)>
c000da5d:	90                   	nop

c000da5e <Buzzer::beep(int, int, bool)>:
c000da5e:	57                   	push   edi
c000da5f:	56                   	push   esi
c000da60:	53                   	push   ebx
c000da61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000da69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000da6d:	50                   	push   eax
c000da6e:	50                   	push   eax
c000da6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da75:	53                   	push   ebx
c000da76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 f8                	mov    eax,edi
c000da7e:	84 c0                	test   al,al
c000da80:	74 1e                	je     c000daa0 <Buzzer::beep(int, int, bool)+0x42>
c000da82:	83 ec 0c             	sub    esp,0xc
c000da85:	6b f6 0a             	imul   esi,esi,0xa
c000da88:	56                   	push   esi
c000da89:	e8 9e ab 00 00       	call   c001862c <milliTenthSleep(unsigned int)>
c000da8e:	83 c4 10             	add    esp,0x10
c000da91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000da95:	5b                   	pop    ebx
c000da96:	5e                   	pop    esi
c000da97:	5f                   	pop    edi
c000da98:	e9 6d ff ff ff       	jmp    c000da0a <Buzzer::stop()>
c000da9d:	8d 76 00             	lea    esi,[esi+0x0]
c000daa0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000daa6:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000daab:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dab3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dab7:	c7 44 24 14 1d da 00 c0 	mov    DWORD PTR [esp+0x14],0xc000da1d
c000dabf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dac3:	5b                   	pop    ebx
c000dac4:	5e                   	pop    esi
c000dac5:	5f                   	pop    edi
c000dac6:	e9 4d a6 00 00       	jmp    c0018118 <Process::createThread(void (*)(void*), void*, int)>
c000dacb:	90                   	nop

c000dacc <User::loadClockSettings(int)>:
c000dacc:	53                   	push   ebx
c000dacd:	83 ec 14             	sub    esp,0x14
c000dad0:	68 14 01 00 00       	push   0x114
c000dad5:	e8 e9 be ff ff       	call   c00099c3 <malloc>
c000dada:	83 c4 0c             	add    esp,0xc
c000dadd:	89 c3                	mov    ebx,eax
c000dadf:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c000dae5:	68 68 42 02 c0       	push   0xc0024268
c000daea:	50                   	push   eax
c000daeb:	e8 be f6 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c000daf0:	58                   	pop    eax
c000daf1:	5a                   	pop    edx
c000daf2:	6a 01                	push   0x1
c000daf4:	53                   	push   ebx
c000daf5:	e8 18 f7 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c000dafa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dafd:	e8 6e f7 ff ff       	call   c000d270 <File::close()>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	85 db                	test   ebx,ebx
c000db07:	74 0f                	je     c000db18 <User::loadClockSettings(int)+0x4c>
c000db09:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000db12:	83 c4 08             	add    esp,0x8
c000db15:	5b                   	pop    ebx
c000db16:	ff e0                	jmp    eax
c000db18:	83 c4 08             	add    esp,0x8
c000db1b:	5b                   	pop    ebx
c000db1c:	c3                   	ret    
c000db1d:	90                   	nop

c000db1e <Clock::Clock(char const*)>:
c000db1e:	83 ec 0c             	sub    esp,0xc
c000db21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db25:	83 ec 08             	sub    esp,0x8
c000db28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2c:	50                   	push   eax
c000db2d:	e8 5c 07 00 00       	call   c000e28e <Device::Device(char const*)>
c000db32:	83 c4 10             	add    esp,0x10
c000db35:	ba 90 42 02 c0       	mov    edx,0xc0024290
c000db3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3e:	89 10                	mov    DWORD PTR [eax],edx
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000db4e:	90                   	nop
c000db4f:	83 c4 0c             	add    esp,0xc
c000db52:	c3                   	ret    
c000db53:	90                   	nop

c000db54 <Clock::~Clock()>:
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	ba 90 42 02 c0       	mov    edx,0xc0024290
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	89 10                	mov    DWORD PTR [eax],edx
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	50                   	push   eax
c000db6a:	e8 e9 03 00 00       	call   c000df58 <Device::~Device()>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	90                   	nop
c000db73:	83 c4 0c             	add    esp,0xc
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <Clock::~Clock()>:
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	83 ec 0c             	sub    esp,0xc
c000db7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db82:	e8 cd ff ff ff       	call   c000db54 <Clock::~Clock()>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	83 ec 08             	sub    esp,0x8
c000db8d:	68 58 01 00 00       	push   0x158
c000db92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db96:	e8 c7 ef ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	83 c4 0c             	add    esp,0xc
c000dba1:	c3                   	ret    

c000dba2 <Clock::timeInSecondsLocal()>:
c000dba2:	53                   	push   ebx
c000dba3:	83 ec 14             	sub    esp,0x14
c000dba6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbaa:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbac:	50                   	push   eax
c000dbad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbb0:	0f b6 0d dc 75 02 c0 	movzx  ecx,BYTE PTR ds:0xc00275dc
c000dbb7:	03 0d e0 75 02 c0    	add    ecx,DWORD PTR ds:0xc00275e0
c000dbbd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbc3:	89 cb                	mov    ebx,ecx
c000dbc5:	c1 fb 1f             	sar    ebx,0x1f
c000dbc8:	01 c8                	add    eax,ecx
c000dbca:	11 da                	adc    edx,ebx
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	31 c9                	xor    ecx,ecx
c000dbd1:	80 3d dd 75 02 c0 00 	cmp    BYTE PTR ds:0xc00275dd,0x0
c000dbd8:	74 05                	je     c000dbdf <Clock::timeInSecondsLocal()+0x3d>
c000dbda:	b9 08 07 00 00       	mov    ecx,0x708
c000dbdf:	31 db                	xor    ebx,ebx
c000dbe1:	01 c8                	add    eax,ecx
c000dbe3:	11 da                	adc    edx,ebx
c000dbe5:	83 c4 08             	add    esp,0x8
c000dbe8:	5b                   	pop    ebx
c000dbe9:	c3                   	ret    

c000dbea <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dbea:	57                   	push   edi
c000dbeb:	56                   	push   esi
c000dbec:	53                   	push   ebx
c000dbed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dbf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dbf7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dbfb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dbfe:	0f b6 05 dc 75 02 c0 	movzx  eax,BYTE PTR ds:0xc00275dc
c000dc05:	03 05 e0 75 02 c0    	add    eax,DWORD PTR ds:0xc00275e0
c000dc0b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dc11:	99                   	cdq    
c000dc12:	29 c6                	sub    esi,eax
c000dc14:	19 d7                	sbb    edi,edx
c000dc16:	89 f0                	mov    eax,esi
c000dc18:	89 fa                	mov    edx,edi
c000dc1a:	31 f6                	xor    esi,esi
c000dc1c:	80 3d dd 75 02 c0 00 	cmp    BYTE PTR ds:0xc00275dd,0x0
c000dc23:	74 05                	je     c000dc2a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dc25:	be 08 07 00 00       	mov    esi,0x708
c000dc2a:	31 ff                	xor    edi,edi
c000dc2c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dc30:	29 f0                	sub    eax,esi
c000dc32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc36:	19 fa                	sbb    edx,edi
c000dc38:	89 d8                	mov    eax,ebx
c000dc3a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc3e:	5b                   	pop    ebx
c000dc3f:	5e                   	pop    esi
c000dc40:	5f                   	pop    edi
c000dc41:	ff e0                	jmp    eax

c000dc43 <datetimeToSeconds(datetime_t)>:
c000dc43:	55                   	push   ebp
c000dc44:	57                   	push   edi
c000dc45:	56                   	push   esi
c000dc46:	53                   	push   ebx
c000dc47:	83 ec 14             	sub    esp,0x14
c000dc4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc4e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc52:	89 d3                	mov    ebx,edx
c000dc54:	0f b6 c6             	movzx  eax,dh
c000dc57:	c1 eb 10             	shr    ebx,0x10
c000dc5a:	48                   	dec    eax
c000dc5b:	66 81 eb 6c 07       	sub    bx,0x76c
c000dc60:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dc64:	0f b6 f5             	movzx  esi,ch
c000dc67:	89 cf                	mov    edi,ecx
c000dc69:	6b f6 3c             	imul   esi,esi,0x3c
c000dc6c:	c1 ef 10             	shr    edi,0x10
c000dc6f:	0f b6 c9             	movzx  ecx,cl
c000dc72:	89 f8                	mov    eax,edi
c000dc74:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc7a:	0f b6 f8             	movzx  edi,al
c000dc7d:	0f b6 d2             	movzx  edx,dl
c000dc80:	01 fe                	add    esi,edi
c000dc82:	01 f1                	add    ecx,esi
c000dc84:	0f b7 f3             	movzx  esi,bx
c000dc87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dc8b:	c1 f9 1f             	sar    ecx,0x1f
c000dc8e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dc93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc97:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dc9c:	8b 0c 8d e0 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbd20]
c000dca3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dca7:	76 29                	jbe    c000dcd2 <datetimeToSeconds(datetime_t)+0x8f>
c000dca9:	f6 c3 03             	test   bl,0x3
c000dcac:	75 24                	jne    c000dcd2 <datetimeToSeconds(datetime_t)+0x8f>
c000dcae:	31 d2                	xor    edx,edx
c000dcb0:	bf 64 00 00 00       	mov    edi,0x64
c000dcb5:	89 d8                	mov    eax,ebx
c000dcb7:	66 f7 f7             	div    di
c000dcba:	66 85 d2             	test   dx,dx
c000dcbd:	75 12                	jne    c000dcd1 <datetimeToSeconds(datetime_t)+0x8e>
c000dcbf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dcc5:	bf 90 01 00 00       	mov    edi,0x190
c000dcca:	99                   	cdq    
c000dccb:	f7 ff                	idiv   edi
c000dccd:	85 d2                	test   edx,edx
c000dccf:	75 01                	jne    c000dcd2 <datetimeToSeconds(datetime_t)+0x8f>
c000dcd1:	41                   	inc    ecx
c000dcd2:	66 83 fb 46          	cmp    bx,0x46
c000dcd6:	76 45                	jbe    c000dd1d <datetimeToSeconds(datetime_t)+0xda>
c000dcd8:	bb 46 00 00 00       	mov    ebx,0x46
c000dcdd:	bf 64 00 00 00       	mov    edi,0x64
c000dce2:	bd 90 01 00 00       	mov    ebp,0x190
c000dce7:	b8 6d 01 00 00       	mov    eax,0x16d
c000dcec:	f6 c3 03             	test   bl,0x3
c000dcef:	75 23                	jne    c000dd14 <datetimeToSeconds(datetime_t)+0xd1>
c000dcf1:	89 d8                	mov    eax,ebx
c000dcf3:	99                   	cdq    
c000dcf4:	f7 ff                	idiv   edi
c000dcf6:	b8 6e 01 00 00       	mov    eax,0x16e
c000dcfb:	85 d2                	test   edx,edx
c000dcfd:	75 15                	jne    c000dd14 <datetimeToSeconds(datetime_t)+0xd1>
c000dcff:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dd05:	99                   	cdq    
c000dd06:	f7 fd                	idiv   ebp
c000dd08:	83 fa 01             	cmp    edx,0x1
c000dd0b:	19 c0                	sbb    eax,eax
c000dd0d:	f7 d0                	not    eax
c000dd0f:	05 6e 01 00 00       	add    eax,0x16e
c000dd14:	01 c1                	add    ecx,eax
c000dd16:	43                   	inc    ebx
c000dd17:	39 f3                	cmp    ebx,esi
c000dd19:	7c cc                	jl     c000dce7 <datetimeToSeconds(datetime_t)+0xa4>
c000dd1b:	eb 35                	jmp    c000dd52 <datetimeToSeconds(datetime_t)+0x10f>
c000dd1d:	74 33                	je     c000dd52 <datetimeToSeconds(datetime_t)+0x10f>
c000dd1f:	b8 45 00 00 00       	mov    eax,0x45
c000dd24:	89 c2                	mov    edx,eax
c000dd26:	83 e2 03             	and    edx,0x3
c000dd29:	39 f0                	cmp    eax,esi
c000dd2b:	7e 0f                	jle    c000dd3c <datetimeToSeconds(datetime_t)+0xf9>
c000dd2d:	83 fa 01             	cmp    edx,0x1
c000dd30:	19 d2                	sbb    edx,edx
c000dd32:	48                   	dec    eax
c000dd33:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dd3a:	eb e8                	jmp    c000dd24 <datetimeToSeconds(datetime_t)+0xe1>
c000dd3c:	b8 6d 01 00 00       	mov    eax,0x16d
c000dd41:	85 d2                	test   edx,edx
c000dd43:	75 0b                	jne    c000dd50 <datetimeToSeconds(datetime_t)+0x10d>
c000dd45:	66 83 fb 01          	cmp    bx,0x1
c000dd49:	19 c0                	sbb    eax,eax
c000dd4b:	05 6e 01 00 00       	add    eax,0x16e
c000dd50:	29 c1                	sub    ecx,eax
c000dd52:	b8 80 51 01 00       	mov    eax,0x15180
c000dd57:	f7 e9                	imul   ecx
c000dd59:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd5d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dd61:	83 c4 14             	add    esp,0x14
c000dd64:	5b                   	pop    ebx
c000dd65:	5e                   	pop    esi
c000dd66:	5f                   	pop    edi
c000dd67:	5d                   	pop    ebp
c000dd68:	c3                   	ret    
c000dd69:	90                   	nop

c000dd6a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dd6a:	57                   	push   edi
c000dd6b:	56                   	push   esi
c000dd6c:	53                   	push   ebx
c000dd6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd71:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd73:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dd76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd7e:	e8 c0 fe ff ff       	call   c000dc43 <datetimeToSeconds(datetime_t)>
c000dd83:	59                   	pop    ecx
c000dd84:	0f b6 0d dc 75 02 c0 	movzx  ecx,BYTE PTR ds:0xc00275dc
c000dd8b:	5b                   	pop    ebx
c000dd8c:	03 0d e0 75 02 c0    	add    ecx,DWORD PTR ds:0xc00275e0
c000dd92:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd98:	89 cb                	mov    ebx,ecx
c000dd9a:	c1 fb 1f             	sar    ebx,0x1f
c000dd9d:	29 c8                	sub    eax,ecx
c000dd9f:	19 da                	sbb    edx,ebx
c000dda1:	31 c9                	xor    ecx,ecx
c000dda3:	80 3d dd 75 02 c0 00 	cmp    BYTE PTR ds:0xc00275dd,0x0
c000ddaa:	74 05                	je     c000ddb1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ddac:	b9 08 07 00 00       	mov    ecx,0x708
c000ddb1:	31 db                	xor    ebx,ebx
c000ddb3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ddb7:	29 c8                	sub    eax,ecx
c000ddb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ddbd:	19 da                	sbb    edx,ebx
c000ddbf:	89 f8                	mov    eax,edi
c000ddc1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ddc5:	5b                   	pop    ebx
c000ddc6:	5e                   	pop    esi
c000ddc7:	5f                   	pop    edi
c000ddc8:	ff e0                	jmp    eax

c000ddca <secondsToDatetime(unsigned long long)>:
c000ddca:	55                   	push   ebp
c000ddcb:	57                   	push   edi
c000ddcc:	56                   	push   esi
c000ddcd:	53                   	push   ebx
c000ddce:	83 ec 1c             	sub    esp,0x1c
c000ddd1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddd5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ddd9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dddd:	6a 00                	push   0x0
c000dddf:	68 80 51 01 00       	push   0x15180
c000dde4:	55                   	push   ebp
c000dde5:	57                   	push   edi
c000dde6:	e8 59 41 01 00       	call   c0021f44 <__udivdi3>
c000ddeb:	83 c4 10             	add    esp,0x10
c000ddee:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000ddf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddf8:	6a 00                	push   0x0
c000ddfa:	68 80 51 01 00       	push   0x15180
c000ddff:	55                   	push   ebp
c000de00:	57                   	push   edi
c000de01:	bf 10 0e 00 00       	mov    edi,0xe10
c000de06:	e8 39 42 01 00       	call   c0022044 <__umoddi3>
c000de0b:	83 c4 10             	add    esp,0x10
c000de0e:	99                   	cdq    
c000de0f:	f7 ff                	idiv   edi
c000de11:	bf 3c 00 00 00       	mov    edi,0x3c
c000de16:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000de19:	89 d0                	mov    eax,edx
c000de1b:	99                   	cdq    
c000de1c:	f7 ff                	idiv   edi
c000de1e:	85 db                	test   ebx,ebx
c000de20:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000de23:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000de26:	79 11                	jns    c000de39 <secondsToDatetime(unsigned long long)+0x6f>
c000de28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de2c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000de32:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000de37:	eb 07                	jmp    c000de40 <secondsToDatetime(unsigned long long)+0x76>
c000de39:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000de3e:	89 d8                	mov    eax,ebx
c000de40:	bf b4 05 00 00       	mov    edi,0x5b4
c000de45:	99                   	cdq    
c000de46:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000de4b:	f7 f9                	idiv   ecx
c000de4d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000de52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de56:	31 d2                	xor    edx,edx
c000de58:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000de60:	01 c3                	add    ebx,eax
c000de62:	89 d8                	mov    eax,ebx
c000de64:	f7 f1                	div    ecx
c000de66:	31 d2                	xor    edx,edx
c000de68:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000de6b:	89 d8                	mov    eax,ebx
c000de6d:	f7 f7                	div    edi
c000de6f:	31 d2                	xor    edx,edx
c000de71:	29 c1                	sub    ecx,eax
c000de73:	89 d8                	mov    eax,ebx
c000de75:	f7 f5                	div    ebp
c000de77:	bd 6d 01 00 00       	mov    ebp,0x16d
c000de7c:	29 c1                	sub    ecx,eax
c000de7e:	31 d2                	xor    edx,edx
c000de80:	89 c8                	mov    eax,ecx
c000de82:	f7 f5                	div    ebp
c000de84:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000de89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8d:	31 d2                	xor    edx,edx
c000de8f:	89 c8                	mov    eax,ecx
c000de91:	f7 f5                	div    ebp
c000de93:	31 d2                	xor    edx,edx
c000de95:	01 c3                	add    ebx,eax
c000de97:	89 c8                	mov    eax,ecx
c000de99:	f7 f7                	div    edi
c000de9b:	bf 99 00 00 00       	mov    edi,0x99
c000dea0:	29 c3                	sub    ebx,eax
c000dea2:	31 d2                	xor    edx,edx
c000dea4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000deac:	29 c3                	sub    ebx,eax
c000deae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000deb1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000deb4:	bb 05 00 00 00       	mov    ebx,0x5
c000deb9:	83 c1 02             	add    ecx,0x2
c000debc:	89 c8                	mov    eax,ecx
c000debe:	f7 f7                	div    edi
c000dec0:	31 d2                	xor    edx,edx
c000dec2:	89 c7                	mov    edi,eax
c000dec4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000deca:	83 c0 02             	add    eax,0x2
c000decd:	f7 f3                	div    ebx
c000decf:	89 eb                	mov    ebx,ebp
c000ded1:	29 c3                	sub    ebx,eax
c000ded3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ded9:	88 1e                	mov    BYTE PTR [esi],bl
c000dedb:	19 c0                	sbb    eax,eax
c000dedd:	31 d2                	xor    edx,edx
c000dedf:	83 e0 0c             	and    eax,0xc
c000dee2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dee6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000deee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000def2:	83 f9 01             	cmp    ecx,0x1
c000def5:	0f 96 c2             	setbe  dl
c000def8:	41                   	inc    ecx
c000def9:	01 d0                	add    eax,edx
c000defb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000defe:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000df02:	83 c4 1c             	add    esp,0x1c
c000df05:	89 f0                	mov    eax,esi
c000df07:	5b                   	pop    ebx
c000df08:	5e                   	pop    esi
c000df09:	5f                   	pop    edi
c000df0a:	5d                   	pop    ebp
c000df0b:	c2 04 00             	ret    0x4

c000df0e <Clock::timeInDatetimeLocal()>:
c000df0e:	53                   	push   ebx
c000df0f:	83 ec 14             	sub    esp,0x14
c000df12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000df1a:	e8 83 fc ff ff       	call   c000dba2 <Clock::timeInSecondsLocal()>
c000df1f:	83 c4 0c             	add    esp,0xc
c000df22:	52                   	push   edx
c000df23:	50                   	push   eax
c000df24:	53                   	push   ebx
c000df25:	e8 a0 fe ff ff       	call   c000ddca <secondsToDatetime(unsigned long long)>
c000df2a:	89 d8                	mov    eax,ebx
c000df2c:	83 c4 14             	add    esp,0x14
c000df2f:	5b                   	pop    ebx
c000df30:	c2 04 00             	ret    0x4
c000df33:	90                   	nop

c000df34 <Device::hibernate()>:
c000df34:	c3                   	ret    
c000df35:	90                   	nop

c000df36 <Device::wake()>:
c000df36:	c3                   	ret    
c000df37:	90                   	nop

c000df38 <Device::detect()>:
c000df38:	c3                   	ret    
c000df39:	90                   	nop

c000df3a <Device::disableLegacy()>:
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <Device::powerSaving(PowerSavingLevel)>:
c000df3c:	c3                   	ret    
c000df3d:	90                   	nop

c000df3e <DriverlessDevice::close(int, int, void*)>:
c000df3e:	31 c0                	xor    eax,eax
c000df40:	c3                   	ret    
c000df41:	90                   	nop

c000df42 <DriverlessDevice::detect()>:
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <DriverlessDevice::open(int, int, void*)>:
c000df44:	83 ec 18             	sub    esp,0x18
c000df47:	68 10 43 02 c0       	push   0xc0024310
c000df4c:	e8 12 68 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000df51:	83 c8 ff             	or     eax,0xffffffff
c000df54:	83 c4 1c             	add    esp,0x1c
c000df57:	c3                   	ret    

c000df58 <Device::~Device()>:
c000df58:	ba 70 43 02 c0       	mov    edx,0xc0024370
c000df5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df61:	89 10                	mov    DWORD PTR [eax],edx
c000df63:	90                   	nop
c000df64:	c3                   	ret    
c000df65:	90                   	nop

c000df66 <Device::~Device()>:
c000df66:	83 ec 0c             	sub    esp,0xc
c000df69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df6d:	e8 e6 ff ff ff       	call   c000df58 <Device::~Device()>
c000df72:	83 c4 04             	add    esp,0x4
c000df75:	83 ec 08             	sub    esp,0x8
c000df78:	68 58 01 00 00       	push   0x158
c000df7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df81:	e8 dc eb ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000df86:	83 c4 10             	add    esp,0x10
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	c3                   	ret    
c000df8d:	90                   	nop

c000df8e <Device::findAndLoadDriver()>:
c000df8e:	c7 44 24 04 2e 43 02 c0 	mov    DWORD PTR [esp+0x4],0xc002432e
c000df96:	e9 a8 ec ff ff       	jmp    c000cc43 <Dbg::kprintf(char const*, ...)>
c000df9b:	90                   	nop

c000df9c <Device::preOpenPCI(PCIDeviceInfo)>:
c000df9c:	57                   	push   edi
c000df9d:	b9 09 00 00 00       	mov    ecx,0x9
c000dfa2:	56                   	push   esi
c000dfa3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dfa7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dfab:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dfb5:	81 c7 18 01 00 00    	add    edi,0x118
c000dfbb:	fc                   	cld    
c000dfbc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dfbe:	5e                   	pop    esi
c000dfbf:	5f                   	pop    edi
c000dfc0:	c3                   	ret    
c000dfc1:	90                   	nop

c000dfc2 <Device::preOpenACPI(void*, char*, char*)>:
c000dfc2:	57                   	push   edi
c000dfc3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dfc8:	56                   	push   esi
c000dfc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dfd1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000dfdb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000dfe1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000dfe7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfed:	b9 0e 00 00 00       	mov    ecx,0xe
c000dff2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000dff8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dffc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dffe:	5e                   	pop    esi
c000dfff:	5f                   	pop    edi
c000e000:	c3                   	ret    
c000e001:	90                   	nop

c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e006:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e00b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e012:	75 0b                	jne    c000e01f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e014:	8b 00                	mov    eax,DWORD PTR [eax]
c000e016:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e01a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e01d:	eb 1e                	jmp    c000e03d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e01f:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e024:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e02a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e030:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e032:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e036:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e03a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e03d:	ff e0                	jmp    eax
c000e03f:	90                   	nop

c000e040 <Device::getParent()>:
c000e040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e044:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e04a:	c3                   	ret    
c000e04b:	90                   	nop

c000e04c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e050:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e055:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e05c:	75 0b                	jne    c000e069 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e05e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e060:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e064:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e067:	eb 1e                	jmp    c000e087 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e069:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e06e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e074:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e07a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e07c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e080:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e084:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e087:	ff e0                	jmp    eax
c000e089:	90                   	nop

c000e08a <Device::addChild(Device*)>:
c000e08a:	53                   	push   ebx
c000e08b:	83 ec 08             	sub    esp,0x8
c000e08e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e092:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e096:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e09c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e0a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e0a4:	85 d2                	test   edx,edx
c000e0a6:	74 04                	je     c000e0ac <Device::addChild(Device*)+0x22>
c000e0a8:	89 d3                	mov    ebx,edx
c000e0aa:	eb f6                	jmp    c000e0a2 <Device::addChild(Device*)+0x18>
c000e0ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e0af:	83 ec 0c             	sub    esp,0xc
c000e0b2:	6a 08                	push   0x8
c000e0b4:	e8 0a b9 ff ff       	call   c00099c3 <malloc>
c000e0b9:	89 03                	mov    DWORD PTR [ebx],eax
c000e0bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0c8:	83 c4 18             	add    esp,0x18
c000e0cb:	5b                   	pop    ebx
c000e0cc:	c3                   	ret    
c000e0cd:	90                   	nop

c000e0ce <Device::removeAllChildren()>:
c000e0ce:	56                   	push   esi
c000e0cf:	53                   	push   ebx
c000e0d0:	52                   	push   edx
c000e0d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e0d5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e0db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0de:	74 17                	je     c000e0f7 <Device::removeAllChildren()+0x29>
c000e0e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e0e3:	85 c0                	test   eax,eax
c000e0e5:	74 0c                	je     c000e0f3 <Device::removeAllChildren()+0x25>
c000e0e7:	83 ec 0c             	sub    esp,0xc
c000e0ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0ec:	50                   	push   eax
c000e0ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e0f0:	83 c4 10             	add    esp,0x10
c000e0f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0f5:	eb e4                	jmp    c000e0db <Device::removeAllChildren()+0xd>
c000e0f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e0fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e103:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e109:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e110:	58                   	pop    eax
c000e111:	5b                   	pop    ebx
c000e112:	5e                   	pop    esi
c000e113:	c3                   	ret    

c000e114 <Device::hibernateAll()>:
c000e114:	53                   	push   ebx
c000e115:	83 ec 14             	sub    esp,0x14
c000e118:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e11c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e11e:	53                   	push   ebx
c000e11f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e122:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e128:	83 c4 10             	add    esp,0x10
c000e12b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e12e:	74 0f                	je     c000e13f <Device::hibernateAll()+0x2b>
c000e130:	83 ec 0c             	sub    esp,0xc
c000e133:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e136:	e8 d9 ff ff ff       	call   c000e114 <Device::hibernateAll()>
c000e13b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e13d:	eb e9                	jmp    c000e128 <Device::hibernateAll()+0x14>
c000e13f:	83 c4 08             	add    esp,0x8
c000e142:	5b                   	pop    ebx
c000e143:	c3                   	ret    

c000e144 <Device::wakeAll()>:
c000e144:	53                   	push   ebx
c000e145:	83 ec 14             	sub    esp,0x14
c000e148:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e14c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e14e:	53                   	push   ebx
c000e14f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e152:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e15e:	74 0f                	je     c000e16f <Device::wakeAll()+0x2b>
c000e160:	83 ec 0c             	sub    esp,0xc
c000e163:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e166:	e8 d9 ff ff ff       	call   c000e144 <Device::wakeAll()>
c000e16b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e16d:	eb e9                	jmp    c000e158 <Device::wakeAll()+0x14>
c000e16f:	83 c4 08             	add    esp,0x8
c000e172:	5b                   	pop    ebx
c000e173:	c3                   	ret    

c000e174 <Device::detectAll()>:
c000e174:	53                   	push   ebx
c000e175:	83 ec 14             	sub    esp,0x14
c000e178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e17c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e17e:	53                   	push   ebx
c000e17f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e182:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e188:	83 c4 10             	add    esp,0x10
c000e18b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e18e:	74 0f                	je     c000e19f <Device::detectAll()+0x2b>
c000e190:	83 ec 0c             	sub    esp,0xc
c000e193:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e196:	e8 d9 ff ff ff       	call   c000e174 <Device::detectAll()>
c000e19b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e19d:	eb e9                	jmp    c000e188 <Device::detectAll()+0x14>
c000e19f:	83 c4 08             	add    esp,0x8
c000e1a2:	5b                   	pop    ebx
c000e1a3:	c3                   	ret    

c000e1a4 <Device::disableLegacyAll()>:
c000e1a4:	53                   	push   ebx
c000e1a5:	83 ec 14             	sub    esp,0x14
c000e1a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ae:	53                   	push   ebx
c000e1af:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e1b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1b8:	83 c4 10             	add    esp,0x10
c000e1bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1be:	74 0f                	je     c000e1cf <Device::disableLegacyAll()+0x2b>
c000e1c0:	83 ec 0c             	sub    esp,0xc
c000e1c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1c6:	e8 d9 ff ff ff       	call   c000e1a4 <Device::disableLegacyAll()>
c000e1cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1cd:	eb e9                	jmp    c000e1b8 <Device::disableLegacyAll()+0x14>
c000e1cf:	83 c4 08             	add    esp,0x8
c000e1d2:	5b                   	pop    ebx
c000e1d3:	c3                   	ret    

c000e1d4 <Device::loadDriversForAll()>:
c000e1d4:	53                   	push   ebx
c000e1d5:	83 ec 08             	sub    esp,0x8
c000e1d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1dc:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e1e3:	75 0c                	jne    c000e1f1 <Device::loadDriversForAll()+0x1d>
c000e1e5:	83 ec 0c             	sub    esp,0xc
c000e1e8:	53                   	push   ebx
c000e1e9:	e8 a0 fd ff ff       	call   c000df8e <Device::findAndLoadDriver()>
c000e1ee:	83 c4 10             	add    esp,0x10
c000e1f1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1fa:	74 12                	je     c000e20e <Device::loadDriversForAll()+0x3a>
c000e1fc:	83 ec 0c             	sub    esp,0xc
c000e1ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e202:	e8 cd ff ff ff       	call   c000e1d4 <Device::loadDriversForAll()>
c000e207:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e209:	83 c4 10             	add    esp,0x10
c000e20c:	eb e9                	jmp    c000e1f7 <Device::loadDriversForAll()+0x23>
c000e20e:	83 c4 08             	add    esp,0x8
c000e211:	5b                   	pop    ebx
c000e212:	c3                   	ret    
c000e213:	90                   	nop

c000e214 <Device::closeAll()>:
c000e214:	53                   	push   ebx
c000e215:	83 ec 08             	sub    esp,0x8
c000e218:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e21c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e21e:	6a 00                	push   0x0
c000e220:	6a 00                	push   0x0
c000e222:	6a 00                	push   0x0
c000e224:	53                   	push   ebx
c000e225:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e228:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e234:	74 0f                	je     c000e245 <Device::closeAll()+0x31>
c000e236:	83 ec 0c             	sub    esp,0xc
c000e239:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e23c:	e8 d3 ff ff ff       	call   c000e214 <Device::closeAll()>
c000e241:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e243:	eb e9                	jmp    c000e22e <Device::closeAll()+0x1a>
c000e245:	83 c4 08             	add    esp,0x8
c000e248:	5b                   	pop    ebx
c000e249:	c3                   	ret    

c000e24a <Device::powerSavingAll(PowerSavingLevel)>:
c000e24a:	56                   	push   esi
c000e24b:	53                   	push   ebx
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e253:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e257:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e259:	56                   	push   esi
c000e25a:	53                   	push   ebx
c000e25b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e25e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e264:	83 c4 10             	add    esp,0x10
c000e267:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e26a:	74 0f                	je     c000e27b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e26c:	52                   	push   edx
c000e26d:	52                   	push   edx
c000e26e:	56                   	push   esi
c000e26f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e272:	e8 d3 ff ff ff       	call   c000e24a <Device::powerSavingAll(PowerSavingLevel)>
c000e277:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e279:	eb e9                	jmp    c000e264 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e27b:	58                   	pop    eax
c000e27c:	5b                   	pop    ebx
c000e27d:	5e                   	pop    esi
c000e27e:	c3                   	ret    
c000e27f:	90                   	nop

c000e280 <Device::setName(char const*)>:
c000e280:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e288:	e9 b3 24 ff ff       	jmp    c0000740 <strcpy>
c000e28d:	90                   	nop

c000e28e <Device::Device(char const*)>:
c000e28e:	83 ec 1c             	sub    esp,0x1c
c000e291:	ba 70 43 02 c0       	mov    edx,0xc0024370
c000e296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29a:	89 10                	mov    DWORD PTR [eax],edx
c000e29c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e2b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e2c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e2d4:	83 ec 08             	sub    esp,0x8
c000e2d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2df:	e8 9c ff ff ff       	call   c000e280 <Device::setName(char const*)>
c000e2e4:	83 c4 10             	add    esp,0x10
c000e2e7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e2ef:	83 ec 0c             	sub    esp,0xc
c000e2f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2f6:	e8 c8 b6 ff ff       	call   c00099c3 <malloc>
c000e2fb:	83 c4 10             	add    esp,0x10
c000e2fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e304:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e30b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e30f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e319:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e31f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e329:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e32f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e345:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e384:	90                   	nop
c000e385:	83 c4 1c             	add    esp,0x1c
c000e388:	c3                   	ret    
c000e389:	90                   	nop

c000e38a <Device::getName()>:
c000e38a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e38e:	05 d0 00 00 00       	add    eax,0xd0
c000e393:	c3                   	ret    

c000e394 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39b:	83 ec 08             	sub    esp,0x8
c000e39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a2:	50                   	push   eax
c000e3a3:	e8 e6 fe ff ff       	call   c000e28e <Device::Device(char const*)>
c000e3a8:	83 c4 10             	add    esp,0x10
c000e3ab:	ba 9c 43 02 c0       	mov    edx,0xc002439c
c000e3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b4:	89 10                	mov    DWORD PTR [eax],edx
c000e3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ba:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e3c4:	90                   	nop
c000e3c5:	83 c4 0c             	add    esp,0xc
c000e3c8:	c3                   	ret    
c000e3c9:	90                   	nop

c000e3ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e3ca:	57                   	push   edi
c000e3cb:	56                   	push   esi
c000e3cc:	53                   	push   ebx
c000e3cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e3d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e3df:	75 0c                	jne    c000e3ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e3e1:	52                   	push   edx
c000e3e2:	52                   	push   edx
c000e3e3:	53                   	push   ebx
c000e3e4:	56                   	push   esi
c000e3e5:	e8 0c 40 01 00       	call   c00223f6 <LinkedList<Device>::addElement(Device*)>
c000e3ea:	83 c4 10             	add    esp,0x10
c000e3ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3f6:	74 12                	je     c000e40a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e3f8:	50                   	push   eax
c000e3f9:	57                   	push   edi
c000e3fa:	56                   	push   esi
c000e3fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3fe:	e8 c7 ff ff ff       	call   c000e3ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e403:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e405:	83 c4 10             	add    esp,0x10
c000e408:	eb e9                	jmp    c000e3f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e40a:	5b                   	pop    ebx
c000e40b:	5e                   	pop    esi
c000e40c:	5f                   	pop    edi
c000e40d:	c3                   	ret    

c000e40e <getDevicesOfType(DeviceType)>:
c000e40e:	53                   	push   ebx
c000e40f:	83 ec 14             	sub    esp,0x14
c000e412:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e416:	53                   	push   ebx
c000e417:	e8 b6 40 01 00       	call   c00224d2 <LinkedList<Device>::LinkedList()>
c000e41c:	83 c4 0c             	add    esp,0xc
c000e41f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e423:	53                   	push   ebx
c000e424:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c000e42a:	e8 9b ff ff ff       	call   c000e3ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e42f:	89 d8                	mov    eax,ebx
c000e431:	83 c4 18             	add    esp,0x18
c000e434:	5b                   	pop    ebx
c000e435:	c2 04 00             	ret    0x4

c000e438 <HardDiskController::HardDiskController(char const*)>:
c000e438:	83 ec 0c             	sub    esp,0xc
c000e43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43f:	83 ec 08             	sub    esp,0x8
c000e442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e446:	50                   	push   eax
c000e447:	e8 42 fe ff ff       	call   c000e28e <Device::Device(char const*)>
c000e44c:	83 c4 10             	add    esp,0x10
c000e44f:	ba c8 43 02 c0       	mov    edx,0xc00243c8
c000e454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e458:	89 10                	mov    DWORD PTR [eax],edx
c000e45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e468:	90                   	nop
c000e469:	83 c4 0c             	add    esp,0xc
c000e46c:	c3                   	ret    
c000e46d:	90                   	nop
c000e46e:	66 90                	xchg   ax,ax

c000e470 <HardDiskController::~HardDiskController()>:
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	ba c8 43 02 c0       	mov    edx,0xc00243c8
c000e478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e47c:	89 10                	mov    DWORD PTR [eax],edx
c000e47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	50                   	push   eax
c000e486:	e8 cd fa ff ff       	call   c000df58 <Device::~Device()>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	90                   	nop
c000e48f:	83 c4 0c             	add    esp,0xc
c000e492:	c3                   	ret    
c000e493:	90                   	nop

c000e494 <HardDiskController::~HardDiskController()>:
c000e494:	83 ec 0c             	sub    esp,0xc
c000e497:	83 ec 0c             	sub    esp,0xc
c000e49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e49e:	e8 cd ff ff ff       	call   c000e470 <HardDiskController::~HardDiskController()>
c000e4a3:	83 c4 10             	add    esp,0x10
c000e4a6:	83 ec 08             	sub    esp,0x8
c000e4a9:	68 58 01 00 00       	push   0x158
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	e8 ab e6 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000e4b7:	83 c4 10             	add    esp,0x10
c000e4ba:	83 c4 0c             	add    esp,0xc
c000e4bd:	c3                   	ret    

c000e4be <PhysicalDisk::eject()>:
c000e4be:	83 c8 ff             	or     eax,0xffffffff
c000e4c1:	c3                   	ret    

c000e4c2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e4c2:	83 ec 0c             	sub    esp,0xc
c000e4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c9:	83 ec 08             	sub    esp,0x8
c000e4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4d0:	50                   	push   eax
c000e4d1:	e8 b8 fd ff ff       	call   c000e28e <Device::Device(char const*)>
c000e4d6:	83 c4 10             	add    esp,0x10
c000e4d9:	ba f4 43 02 c0       	mov    edx,0xc00243f4
c000e4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e2:	89 10                	mov    DWORD PTR [eax],edx
c000e4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e510:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e524:	90                   	nop
c000e525:	83 c4 0c             	add    esp,0xc
c000e528:	c3                   	ret    
c000e529:	90                   	nop

c000e52a <PhysicalDisk::startCache()>:
c000e52a:	56                   	push   esi
c000e52b:	53                   	push   ebx
c000e52c:	83 ec 10             	sub    esp,0x10
c000e52f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e533:	6a 44                	push   0x44
c000e535:	e8 89 b4 ff ff       	call   c00099c3 <malloc>
c000e53a:	89 c6                	mov    esi,eax
c000e53c:	58                   	pop    eax
c000e53d:	5a                   	pop    edx
c000e53e:	53                   	push   ebx
c000e53f:	56                   	push   esi
c000e540:	e8 2f 26 00 00       	call   c0010b74 <VCache::VCache(PhysicalDisk*)>
c000e545:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e54b:	83 c4 14             	add    esp,0x14
c000e54e:	5b                   	pop    ebx
c000e54f:	5e                   	pop    esi
c000e550:	c3                   	ret    
c000e551:	90                   	nop

c000e552 <PhysicalDisk::~PhysicalDisk()>:
c000e552:	83 ec 0c             	sub    esp,0xc
c000e555:	ba f4 43 02 c0       	mov    edx,0xc00243f4
c000e55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55e:	89 10                	mov    DWORD PTR [eax],edx
c000e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	50                   	push   eax
c000e568:	e8 eb f9 ff ff       	call   c000df58 <Device::~Device()>
c000e56d:	83 c4 10             	add    esp,0x10
c000e570:	90                   	nop
c000e571:	83 c4 0c             	add    esp,0xc
c000e574:	c3                   	ret    
c000e575:	90                   	nop

c000e576 <PhysicalDisk::~PhysicalDisk()>:
c000e576:	83 ec 0c             	sub    esp,0xc
c000e579:	83 ec 0c             	sub    esp,0xc
c000e57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e580:	e8 cd ff ff ff       	call   c000e552 <PhysicalDisk::~PhysicalDisk()>
c000e585:	83 c4 10             	add    esp,0x10
c000e588:	83 ec 08             	sub    esp,0x8
c000e58b:	68 6c 01 00 00       	push   0x16c
c000e590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e594:	e8 c9 e5 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	83 c4 0c             	add    esp,0xc
c000e59f:	c3                   	ret    

c000e5a0 <FPU::FPU(char const*)>:
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a7:	83 ec 08             	sub    esp,0x8
c000e5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ae:	50                   	push   eax
c000e5af:	e8 da fc ff ff       	call   c000e28e <Device::Device(char const*)>
c000e5b4:	83 c4 10             	add    esp,0x10
c000e5b7:	ba 38 44 02 c0       	mov    edx,0xc0024438
c000e5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c0:	89 10                	mov    DWORD PTR [eax],edx
c000e5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e5d0:	90                   	nop
c000e5d1:	83 c4 0c             	add    esp,0xc
c000e5d4:	c3                   	ret    
c000e5d5:	90                   	nop
c000e5d6:	66 90                	xchg   ax,ax

c000e5d8 <FPU::~FPU()>:
c000e5d8:	83 ec 0c             	sub    esp,0xc
c000e5db:	ba 38 44 02 c0       	mov    edx,0xc0024438
c000e5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e4:	89 10                	mov    DWORD PTR [eax],edx
c000e5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ea:	83 ec 0c             	sub    esp,0xc
c000e5ed:	50                   	push   eax
c000e5ee:	e8 65 f9 ff ff       	call   c000df58 <Device::~Device()>
c000e5f3:	83 c4 10             	add    esp,0x10
c000e5f6:	90                   	nop
c000e5f7:	83 c4 0c             	add    esp,0xc
c000e5fa:	c3                   	ret    
c000e5fb:	90                   	nop

c000e5fc <FPU::~FPU()>:
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	83 ec 0c             	sub    esp,0xc
c000e602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e606:	e8 cd ff ff ff       	call   c000e5d8 <FPU::~FPU()>
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	83 ec 08             	sub    esp,0x8
c000e611:	68 58 01 00 00       	push   0x158
c000e616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61a:	e8 43 e5 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000e61f:	83 c4 10             	add    esp,0x10
c000e622:	83 c4 0c             	add    esp,0xc
c000e625:	c3                   	ret    

c000e626 <setupFPU()>:
c000e626:	53                   	push   ebx
c000e627:	83 ec 08             	sub    esp,0x8
c000e62a:	8b 15 a8 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274a8
c000e630:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e637:	74 1b                	je     c000e654 <setupFPU()+0x2e>
c000e639:	83 ec 0c             	sub    esp,0xc
c000e63c:	68 58 01 00 00       	push   0x158
c000e641:	e8 7d b3 ff ff       	call   c00099c3 <malloc>
c000e646:	89 c3                	mov    ebx,eax
c000e648:	89 04 24             	mov    DWORD PTR [esp],eax
c000e64b:	e8 84 24 01 00       	call   c0020ad4 <AVX::AVX()>
c000e650:	eb 62                	jmp    c000e6b4 <setupFPU()+0x8e>
c000e652:	66 90                	xchg   ax,ax
c000e654:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e65a:	84 c0                	test   al,al
c000e65c:	79 1a                	jns    c000e678 <setupFPU()+0x52>
c000e65e:	83 ec 0c             	sub    esp,0xc
c000e661:	68 58 01 00 00       	push   0x158
c000e666:	e8 58 b3 ff ff       	call   c00099c3 <malloc>
c000e66b:	89 c3                	mov    ebx,eax
c000e66d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e670:	e8 8f 25 01 00       	call   c0020c04 <SSE::SSE()>
c000e675:	eb 3d                	jmp    c000e6b4 <setupFPU()+0x8e>
c000e677:	90                   	nop
c000e678:	a8 20                	test   al,0x20
c000e67a:	74 1c                	je     c000e698 <setupFPU()+0x72>
c000e67c:	83 ec 0c             	sub    esp,0xc
c000e67f:	68 58 01 00 00       	push   0x158
c000e684:	e8 3a b3 ff ff       	call   c00099c3 <malloc>
c000e689:	89 c3                	mov    ebx,eax
c000e68b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e68e:	e8 d5 24 01 00       	call   c0020b68 <MMX::MMX()>
c000e693:	eb 1f                	jmp    c000e6b4 <setupFPU()+0x8e>
c000e695:	8d 76 00             	lea    esi,[esi+0x0]
c000e698:	a8 10                	test   al,0x10
c000e69a:	74 20                	je     c000e6bc <setupFPU()+0x96>
c000e69c:	83 ec 0c             	sub    esp,0xc
c000e69f:	68 58 01 00 00       	push   0x158
c000e6a4:	e8 1a b3 ff ff       	call   c00099c3 <malloc>
c000e6a9:	89 c3                	mov    ebx,eax
c000e6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ae:	e8 e5 25 01 00       	call   c0020c98 <x87::x87()>
c000e6b3:	90                   	nop
c000e6b4:	83 c4 10             	add    esp,0x10
c000e6b7:	eb 27                	jmp    c000e6e0 <setupFPU()+0xba>
c000e6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6bc:	83 e0 ef             	and    eax,0xffffffef
c000e6bf:	83 ec 0c             	sub    esp,0xc
c000e6c2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e6c8:	68 24 44 02 c0       	push   0xc0024424
c000e6cd:	e8 71 e5 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000e6d2:	0f 20 c0             	mov    eax,cr0
c000e6d5:	83 c8 04             	or     eax,0x4
c000e6d8:	0f 22 c0             	mov    cr0,eax
c000e6db:	31 db                	xor    ebx,ebx
c000e6dd:	83 c4 10             	add    esp,0x10
c000e6e0:	89 d8                	mov    eax,ebx
c000e6e2:	83 c4 08             	add    esp,0x8
c000e6e5:	5b                   	pop    ebx
c000e6e6:	c3                   	ret    
c000e6e7:	90                   	nop

c000e6e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e6e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e6ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6f0:	c1 e0 04             	shl    eax,0x4
c000e6f3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e6f7:	8d 50 10             	lea    edx,[eax+0x10]
c000e6fa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e700:	74 08                	je     c000e70a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e702:	83 c0 04             	add    eax,0x4
c000e705:	39 d0                	cmp    eax,edx
c000e707:	75 f1                	jne    c000e6fa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e709:	c3                   	ret    
c000e70a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e714:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e71e:	eb e2                	jmp    c000e702 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e720 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e720:	57                   	push   edi
c000e721:	31 c0                	xor    eax,eax
c000e723:	56                   	push   esi
c000e724:	53                   	push   ebx
c000e725:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e729:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e72d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e731:	89 da                	mov    edx,ebx
c000e733:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e737:	c1 e2 04             	shl    edx,0x4
c000e73a:	01 ca                	add    edx,ecx
c000e73c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e744:	74 16                	je     c000e75c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e746:	40                   	inc    eax
c000e747:	83 f8 04             	cmp    eax,0x4
c000e74a:	75 f0                	jne    c000e73c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e74c:	c7 44 24 10 68 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024468
c000e754:	5b                   	pop    ebx
c000e755:	5e                   	pop    esi
c000e756:	5f                   	pop    edi
c000e757:	e9 07 60 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c000e75c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e75f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e762:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e768:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e76e:	5b                   	pop    ebx
c000e76f:	5e                   	pop    esi
c000e770:	5f                   	pop    edi
c000e771:	c3                   	ret    

c000e772 <doubleFault(regs*, void*)>:
c000e772:	55                   	push   ebp
c000e773:	89 e5                	mov    ebp,esp
c000e775:	83 ec 08             	sub    esp,0x8
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	68 75 44 02 c0       	push   0xc0024475
c000e780:	e8 de 5f 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000e785:	83 c4 10             	add    esp,0x10
c000e788:	90                   	nop
c000e789:	c9                   	leave  
c000e78a:	c3                   	ret    
c000e78b:	90                   	nop

c000e78c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e78c:	56                   	push   esi
c000e78d:	53                   	push   ebx
c000e78e:	50                   	push   eax
c000e78f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e793:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e797:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e79c:	75 35                	jne    c000e7d3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e79e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e7a1:	31 d2                	xor    edx,edx
c000e7a3:	89 c1                	mov    ecx,eax
c000e7a5:	c1 e1 04             	shl    ecx,0x4
c000e7a8:	01 f1                	add    ecx,esi
c000e7aa:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e7b2:	74 3e                	je     c000e7f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e7b4:	42                   	inc    edx
c000e7b5:	83 fa 04             	cmp    edx,0x4
c000e7b8:	75 f0                	jne    c000e7aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	68 8f 44 02 c0       	push   0xc002448f
c000e7c2:	e8 9c 5f 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7cf:	5a                   	pop    edx
c000e7d0:	5b                   	pop    ebx
c000e7d1:	5e                   	pop    esi
c000e7d2:	c3                   	ret    
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	56                   	push   esi
c000e7d7:	e8 ae fb ff ff       	call   c000e38a <Device::getName()>
c000e7dc:	83 c4 10             	add    esp,0x10
c000e7df:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e7e2:	75 ba                	jne    c000e79e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e7e4:	83 fb 0f             	cmp    ebx,0xf
c000e7e7:	7f 29                	jg     c000e812 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e7e9:	0f b6 9b a0 6b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd9460]
c000e7f0:	eb ac                	jmp    c000e79e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e7f2:	8d 04 82             	lea    eax,[edx+eax*4]
c000e7f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7f9:	8d 04 86             	lea    eax,[esi+eax*4]
c000e7fc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e802:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e806:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e80c:	89 d8                	mov    eax,ebx
c000e80e:	5a                   	pop    edx
c000e80f:	5b                   	pop    ebx
c000e810:	5e                   	pop    esi
c000e811:	c3                   	ret    
c000e812:	83 ec 0c             	sub    esp,0xc
c000e815:	68 82 44 02 c0       	push   0xc0024482
c000e81a:	e8 44 5f 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000e81f:	83 c4 10             	add    esp,0x10
c000e822:	e9 77 ff ff ff       	jmp    c000e79e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e827:	90                   	nop

c000e828 <InterruptController::clearAllHandlers(int, bool)>:
c000e828:	56                   	push   esi
c000e829:	53                   	push   ebx
c000e82a:	52                   	push   edx
c000e82b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e82f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e833:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e838:	75 61                	jne    c000e89b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e83a:	8d 46 20             	lea    eax,[esi+0x20]
c000e83d:	c1 e6 04             	shl    esi,0x4
c000e840:	c1 e0 04             	shl    eax,0x4
c000e843:	01 de                	add    esi,ebx
c000e845:	01 d8                	add    eax,ebx
c000e847:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e851:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e85b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e865:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e86f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e879:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e883:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e88d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e897:	58                   	pop    eax
c000e898:	5b                   	pop    ebx
c000e899:	5e                   	pop    esi
c000e89a:	c3                   	ret    
c000e89b:	83 ec 0c             	sub    esp,0xc
c000e89e:	53                   	push   ebx
c000e89f:	e8 e6 fa ff ff       	call   c000e38a <Device::getName()>
c000e8a4:	83 c4 10             	add    esp,0x10
c000e8a7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e8aa:	75 8e                	jne    c000e83a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e8ac:	83 fe 0f             	cmp    esi,0xf
c000e8af:	7f 09                	jg     c000e8ba <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e8b1:	0f b6 b6 a0 6b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9460]
c000e8b8:	eb 80                	jmp    c000e83a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e8ba:	83 ec 0c             	sub    esp,0xc
c000e8bd:	68 9c 44 02 c0       	push   0xc002449c
c000e8c2:	e8 9c 5e 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	e9 6b ff ff ff       	jmp    c000e83a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e8cf:	90                   	nop

c000e8d0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e8d0:	56                   	push   esi
c000e8d1:	53                   	push   ebx
c000e8d2:	52                   	push   edx
c000e8d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e8db:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e8e0:	75 3a                	jne    c000e91c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e8e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8e6:	8d 50 20             	lea    edx,[eax+0x20]
c000e8e9:	c1 e2 04             	shl    edx,0x4
c000e8ec:	8d 04 16             	lea    eax,[esi+edx*1]
c000e8ef:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e8f3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e8f9:	74 0b                	je     c000e906 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e8fb:	83 c0 04             	add    eax,0x4
c000e8fe:	39 d0                	cmp    eax,edx
c000e900:	75 f1                	jne    c000e8f3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e902:	58                   	pop    eax
c000e903:	5b                   	pop    ebx
c000e904:	5e                   	pop    esi
c000e905:	c3                   	ret    
c000e906:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e910:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e91a:	eb df                	jmp    c000e8fb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	56                   	push   esi
c000e920:	e8 65 fa ff ff       	call   c000e38a <Device::getName()>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e92b:	75 b5                	jne    c000e8e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e92d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e932:	7f 11                	jg     c000e945 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e934:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e938:	0f b6 80 a0 6b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9460]
c000e93f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e943:	eb 9d                	jmp    c000e8e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e945:	83 ec 0c             	sub    esp,0xc
c000e948:	68 a9 44 02 c0       	push   0xc00244a9
c000e94d:	e8 11 5e 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000e952:	83 c4 10             	add    esp,0x10
c000e955:	eb 8b                	jmp    c000e8e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e957 <nmiHandler(regs*, void*)>:
c000e957:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e95c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e960:	e9 29 a8 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e965 <int_handler>:
c000e965:	55                   	push   ebp
c000e966:	57                   	push   edi
c000e967:	56                   	push   esi
c000e968:	53                   	push   ebx
c000e969:	83 ec 0c             	sub    esp,0xc
c000e96c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e970:	80 3d 84 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f84,0x0
c000e977:	74 0b                	je     c000e984 <int_handler+0x1f>
c000e979:	fa                   	cli    
c000e97a:	f4                   	hlt    
c000e97b:	80 3d 84 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f84,0x0
c000e982:	75 f5                	jne    c000e979 <int_handler+0x14>
c000e984:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e989:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e98c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e992:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e998:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e99b:	83 f8 17             	cmp    eax,0x17
c000e99e:	77 13                	ja     c000e9b3 <int_handler+0x4e>
c000e9a0:	83 ec 08             	sub    esp,0x8
c000e9a3:	8b 17                	mov    edx,DWORD PTR [edi]
c000e9a5:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e9a8:	0f b6 c0             	movzx  eax,al
c000e9ab:	50                   	push   eax
c000e9ac:	57                   	push   edi
c000e9ad:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	83 c3 15             	add    ebx,0x15
c000e9b6:	c1 e3 04             	shl    ebx,0x4
c000e9b9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e9bd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e9c4:	31 db                	xor    ebx,ebx
c000e9c6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e9ca:	85 c0                	test   eax,eax
c000e9cc:	74 13                	je     c000e9e1 <int_handler+0x7c>
c000e9ce:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e9d1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e9d5:	74 1c                	je     c000e9f3 <int_handler+0x8e>
c000e9d7:	83 ec 08             	sub    esp,0x8
c000e9da:	52                   	push   edx
c000e9db:	56                   	push   esi
c000e9dc:	ff d0                	call   eax
c000e9de:	83 c4 10             	add    esp,0x10
c000e9e1:	43                   	inc    ebx
c000e9e2:	83 fb 04             	cmp    ebx,0x4
c000e9e5:	75 df                	jne    c000e9c6 <int_handler+0x61>
c000e9e7:	83 c4 0c             	add    esp,0xc
c000e9ea:	31 c0                	xor    eax,eax
c000e9ec:	5b                   	pop    ebx
c000e9ed:	31 d2                	xor    edx,edx
c000e9ef:	5e                   	pop    esi
c000e9f0:	5f                   	pop    edi
c000e9f1:	5d                   	pop    ebp
c000e9f2:	c3                   	ret    
c000e9f3:	83 ec 08             	sub    esp,0x8
c000e9f6:	52                   	push   edx
c000e9f7:	56                   	push   esi
c000e9f8:	ff d0                	call   eax
c000e9fa:	83 c4 10             	add    esp,0x10
c000e9fd:	83 c4 0c             	add    esp,0xc
c000ea00:	5b                   	pop    ebx
c000ea01:	5e                   	pop    esi
c000ea02:	5f                   	pop    edi
c000ea03:	5d                   	pop    ebp
c000ea04:	c3                   	ret    
c000ea05:	90                   	nop

c000ea06 <InterruptController::InterruptController(char const*)>:
c000ea06:	83 ec 1c             	sub    esp,0x1c
c000ea09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea0d:	83 ec 08             	sub    esp,0x8
c000ea10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea14:	50                   	push   eax
c000ea15:	e8 74 f8 ff ff       	call   c000e28e <Device::Device(char const*)>
c000ea1a:	83 c4 10             	add    esp,0x10
c000ea1d:	ba 60 47 02 c0       	mov    edx,0xc0024760
c000ea22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea26:	89 10                	mov    DWORD PTR [eax],edx
c000ea28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea2c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ea36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea3e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ea46:	7f 5e                	jg     c000eaa6 <InterruptController::InterruptController(char const*)+0xa0>
c000ea48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea50:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ea55:	7f 49                	jg     c000eaa0 <InterruptController::InterruptController(char const*)+0x9a>
c000ea57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea5f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ea6a:	01 ca                	add    edx,ecx
c000ea6c:	83 c2 54             	add    edx,0x54
c000ea6f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ea77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ea8a:	01 ca                	add    edx,ecx
c000ea8c:	81 c2 54 04 00 00    	add    edx,0x454
c000ea92:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ea9a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ea9e:	eb b0                	jmp    c000ea50 <InterruptController::InterruptController(char const*)+0x4a>
c000eaa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eaa4:	eb 98                	jmp    c000ea3e <InterruptController::InterruptController(char const*)+0x38>
c000eaa6:	90                   	nop
c000eaa7:	83 c4 1c             	add    esp,0x1c
c000eaaa:	c3                   	ret    
c000eaab:	90                   	nop

c000eaac <InterruptController::~InterruptController()>:
c000eaac:	83 ec 0c             	sub    esp,0xc
c000eaaf:	ba 60 47 02 c0       	mov    edx,0xc0024760
c000eab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab8:	89 10                	mov    DWORD PTR [eax],edx
c000eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 91 f4 ff ff       	call   c000df58 <Device::~Device()>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	90                   	nop
c000eacb:	83 c4 0c             	add    esp,0xc
c000eace:	c3                   	ret    
c000eacf:	90                   	nop

c000ead0 <InterruptController::~InterruptController()>:
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	83 ec 0c             	sub    esp,0xc
c000ead6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eada:	e8 cd ff ff ff       	call   c000eaac <InterruptController::~InterruptController()>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	83 ec 08             	sub    esp,0x8
c000eae5:	68 58 21 00 00       	push   0x2158
c000eaea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaee:	e8 6f e0 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c000eaf3:	83 c4 10             	add    esp,0x10
c000eaf6:	83 c4 0c             	add    esp,0xc
c000eaf9:	c3                   	ret    

c000eafa <displayDebugInfo(regs*)>:
c000eafa:	55                   	push   ebp
c000eafb:	57                   	push   edi
c000eafc:	56                   	push   esi
c000eafd:	53                   	push   ebx
c000eafe:	83 ec 24             	sub    esp,0x24
c000eb01:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eb05:	0f 20 c2             	mov    edx,cr0
c000eb08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000eb0c:	0f 20 d7             	mov    edi,cr2
c000eb0f:	0f 20 de             	mov    esi,cr3
c000eb12:	0f 20 e5             	mov    ebp,cr4
c000eb15:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eb18:	68 b6 44 02 c0       	push   0xc00244b6
c000eb1d:	e8 21 e1 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb22:	59                   	pop    ecx
c000eb23:	58                   	pop    eax
c000eb24:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000eb27:	68 c1 44 02 c0       	push   0xc00244c1
c000eb2c:	e8 12 e1 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb31:	58                   	pop    eax
c000eb32:	5a                   	pop    edx
c000eb33:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000eb36:	68 cc 44 02 c0       	push   0xc00244cc
c000eb3b:	e8 03 e1 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb40:	59                   	pop    ecx
c000eb41:	58                   	pop    eax
c000eb42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000eb45:	68 d7 44 02 c0       	push   0xc00244d7
c000eb4a:	e8 f4 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000eb54:	68 e2 44 02 c0       	push   0xc00244e2
c000eb59:	e8 e5 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb5e:	59                   	pop    ecx
c000eb5f:	58                   	pop    eax
c000eb60:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000eb63:	68 ed 44 02 c0       	push   0xc00244ed
c000eb68:	e8 d6 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb6d:	58                   	pop    eax
c000eb6e:	5a                   	pop    edx
c000eb6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eb72:	68 f8 44 02 c0       	push   0xc00244f8
c000eb77:	e8 c7 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb7c:	59                   	pop    ecx
c000eb7d:	58                   	pop    eax
c000eb7e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000eb81:	68 03 45 02 c0       	push   0xc0024503
c000eb86:	e8 b8 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb8b:	58                   	pop    eax
c000eb8c:	5a                   	pop    edx
c000eb8d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb90:	68 0e 45 02 c0       	push   0xc002450e
c000eb95:	e8 a9 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eb9a:	59                   	pop    ecx
c000eb9b:	58                   	pop    eax
c000eb9c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eb9f:	68 1d 45 02 c0       	push   0xc002451d
c000eba4:	e8 9a e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eba9:	58                   	pop    eax
c000ebaa:	5a                   	pop    edx
c000ebab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ebae:	68 28 45 02 c0       	push   0xc0024528
c000ebb3:	e8 8b e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ebb8:	59                   	pop    ecx
c000ebb9:	58                   	pop    eax
c000ebba:	57                   	push   edi
c000ebbb:	68 33 45 02 c0       	push   0xc0024533
c000ebc0:	e8 7e e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ebc5:	58                   	pop    eax
c000ebc6:	5a                   	pop    edx
c000ebc7:	56                   	push   esi
c000ebc8:	68 3e 45 02 c0       	push   0xc002453e
c000ebcd:	e8 71 e0 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ebd2:	59                   	pop    ecx
c000ebd3:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ebd8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebde:	e8 68 be ff ff       	call   c000aa4b <setActiveTerminal(VgaText*)>
c000ebe3:	58                   	pop    eax
c000ebe4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ebe7:	5a                   	pop    edx
c000ebe8:	c1 e0 05             	shl    eax,0x5
c000ebeb:	05 00 69 02 c0       	add    eax,0xc0026900
c000ebf0:	50                   	push   eax
c000ebf1:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ebf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebfc:	e8 57 c3 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ec01:	59                   	pop    ecx
c000ec02:	58                   	pop    eax
c000ec03:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec08:	68 49 45 02 c0       	push   0xc0024549
c000ec0d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec13:	e8 40 c3 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ec18:	58                   	pop    eax
c000ec19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec1e:	5a                   	pop    edx
c000ec1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ec22:	83 c0 0c             	add    eax,0xc
c000ec25:	50                   	push   eax
c000ec26:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec2b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec31:	e8 22 c3 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ec36:	59                   	pop    ecx
c000ec37:	58                   	pop    eax
c000ec38:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec3d:	68 52 45 02 c0       	push   0xc0024552
c000ec42:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec48:	e8 0b c3 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ec4d:	58                   	pop    eax
c000ec4e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec53:	5a                   	pop    edx
c000ec54:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ec57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec5d:	e8 b0 c2 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ec62:	59                   	pop    ecx
c000ec63:	58                   	pop    eax
c000ec64:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec69:	68 5a 45 02 c0       	push   0xc002455a
c000ec6e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec74:	e8 df c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ec79:	58                   	pop    eax
c000ec7a:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec7f:	5a                   	pop    edx
c000ec80:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ec83:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec89:	e8 84 c2 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ec8e:	59                   	pop    ecx
c000ec8f:	58                   	pop    eax
c000ec90:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ec95:	68 62 45 02 c0       	push   0xc0024562
c000ec9a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca0:	e8 b3 c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000eca5:	58                   	pop    eax
c000eca6:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ecab:	5a                   	pop    edx
c000ecac:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ecaf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb5:	e8 58 c2 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ecba:	59                   	pop    ecx
c000ecbb:	58                   	pop    eax
c000ecbc:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ecc1:	68 6a 45 02 c0       	push   0xc002456a
c000ecc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eccc:	e8 87 c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ecd1:	58                   	pop    eax
c000ecd2:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ecd7:	5a                   	pop    edx
c000ecd8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ecdb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece1:	e8 2c c2 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ece6:	59                   	pop    ecx
c000ece7:	58                   	pop    eax
c000ece8:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000eced:	68 72 45 02 c0       	push   0xc0024572
c000ecf2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf8:	e8 5b c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ecfd:	58                   	pop    eax
c000ecfe:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed03:	5a                   	pop    edx
c000ed04:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0d:	e8 00 c2 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ed12:	59                   	pop    ecx
c000ed13:	58                   	pop    eax
c000ed14:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed19:	68 7a 45 02 c0       	push   0xc002457a
c000ed1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed24:	e8 2f c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ed29:	58                   	pop    eax
c000ed2a:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed2f:	5a                   	pop    edx
c000ed30:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ed33:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed39:	e8 d4 c1 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ed3e:	59                   	pop    ecx
c000ed3f:	58                   	pop    eax
c000ed40:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed45:	68 82 45 02 c0       	push   0xc0024582
c000ed4a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed50:	e8 03 c2 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ed55:	58                   	pop    eax
c000ed56:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed5b:	5a                   	pop    edx
c000ed5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ed60:	52                   	push   edx
c000ed61:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed67:	e8 a6 c1 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ed6c:	59                   	pop    ecx
c000ed6d:	58                   	pop    eax
c000ed6e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed73:	68 8b 45 02 c0       	push   0xc002458b
c000ed78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7e:	e8 d5 c1 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ed83:	58                   	pop    eax
c000ed84:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed89:	5a                   	pop    edx
c000ed8a:	57                   	push   edi
c000ed8b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed91:	e8 7c c1 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ed96:	59                   	pop    ecx
c000ed97:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ed9c:	5f                   	pop    edi
c000ed9d:	68 93 45 02 c0       	push   0xc0024593
c000eda2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda8:	e8 ab c1 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000edad:	58                   	pop    eax
c000edae:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000edb3:	5a                   	pop    edx
c000edb4:	56                   	push   esi
c000edb5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edbb:	e8 52 c1 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000edc0:	59                   	pop    ecx
c000edc1:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000edc6:	5e                   	pop    esi
c000edc7:	68 9b 45 02 c0       	push   0xc002459b
c000edcc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd2:	e8 81 c1 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000edd7:	5f                   	pop    edi
c000edd8:	58                   	pop    eax
c000edd9:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000edde:	55                   	push   ebp
c000eddf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede5:	e8 28 c1 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000edea:	58                   	pop    eax
c000edeb:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000edf0:	5a                   	pop    edx
c000edf1:	68 a3 45 02 c0       	push   0xc00245a3
c000edf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edfc:	e8 57 c1 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ee01:	0f 21 c0             	mov    eax,db0
c000ee04:	59                   	pop    ecx
c000ee05:	5e                   	pop    esi
c000ee06:	50                   	push   eax
c000ee07:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee0c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee12:	e8 fb c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ee17:	5f                   	pop    edi
c000ee18:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee1d:	5d                   	pop    ebp
c000ee1e:	68 ac 45 02 c0       	push   0xc00245ac
c000ee23:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee29:	e8 2a c1 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ee2e:	0f 21 c8             	mov    eax,db1
c000ee31:	5a                   	pop    edx
c000ee32:	59                   	pop    ecx
c000ee33:	50                   	push   eax
c000ee34:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee39:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee3f:	e8 ce c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ee44:	5e                   	pop    esi
c000ee45:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee4a:	5f                   	pop    edi
c000ee4b:	68 b4 45 02 c0       	push   0xc00245b4
c000ee50:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee56:	e8 fd c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ee5b:	0f 21 d0             	mov    eax,db2
c000ee5e:	5d                   	pop    ebp
c000ee5f:	5a                   	pop    edx
c000ee60:	50                   	push   eax
c000ee61:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee6c:	e8 a1 c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ee71:	59                   	pop    ecx
c000ee72:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee77:	5e                   	pop    esi
c000ee78:	68 bc 45 02 c0       	push   0xc00245bc
c000ee7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee83:	e8 d0 c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ee88:	0f 21 d8             	mov    eax,db3
c000ee8b:	5f                   	pop    edi
c000ee8c:	5d                   	pop    ebp
c000ee8d:	50                   	push   eax
c000ee8e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ee93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee99:	e8 74 c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ee9e:	58                   	pop    eax
c000ee9f:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000eea4:	5a                   	pop    edx
c000eea5:	68 c4 45 02 c0       	push   0xc00245c4
c000eeaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb0:	e8 a3 c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000eeb5:	0f 21 f0             	mov    eax,db6
c000eeb8:	59                   	pop    ecx
c000eeb9:	5e                   	pop    esi
c000eeba:	50                   	push   eax
c000eebb:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000eec0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec6:	e8 47 c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000eecb:	5f                   	pop    edi
c000eecc:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000eed1:	5d                   	pop    ebp
c000eed2:	68 cc 45 02 c0       	push   0xc00245cc
c000eed7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eedd:	e8 76 c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000eee2:	0f 21 f8             	mov    eax,db7
c000eee5:	5a                   	pop    edx
c000eee6:	59                   	pop    ecx
c000eee7:	50                   	push   eax
c000eee8:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000eeed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef3:	e8 1a c0 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000eef8:	5e                   	pop    esi
c000eef9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eefc:	e8 fc 89 00 00       	call   c00178fd <Thr::getDriverNameFromAddress(unsigned long)>
c000ef01:	83 c4 10             	add    esp,0x10
c000ef04:	85 c0                	test   eax,eax
c000ef06:	74 7d                	je     c000ef85 <displayDebugInfo(regs*)+0x48b>
c000ef08:	89 c6                	mov    esi,eax
c000ef0a:	50                   	push   eax
c000ef0b:	50                   	push   eax
c000ef0c:	56                   	push   esi
c000ef0d:	68 d4 45 02 c0       	push   0xc00245d4
c000ef12:	e8 2c dd ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ef17:	5a                   	pop    edx
c000ef18:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ef1d:	59                   	pop    ecx
c000ef1e:	68 e2 45 02 c0       	push   0xc00245e2
c000ef23:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef29:	e8 2a c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ef2e:	5f                   	pop    edi
c000ef2f:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ef34:	5d                   	pop    ebp
c000ef35:	56                   	push   esi
c000ef36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef3c:	e8 17 c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ef41:	58                   	pop    eax
c000ef42:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ef47:	5a                   	pop    edx
c000ef48:	68 ee 45 02 c0       	push   0xc00245ee
c000ef4d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef53:	e8 00 c0 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c000ef58:	59                   	pop    ecx
c000ef59:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000ef5e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ef64:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ef67:	e8 c8 89 00 00       	call   c0017934 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ef6c:	5b                   	pop    ebx
c000ef6d:	5d                   	pop    ebp
c000ef6e:	50                   	push   eax
c000ef6f:	57                   	push   edi
c000ef70:	e8 9d bf ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c000ef75:	58                   	pop    eax
c000ef76:	5a                   	pop    edx
c000ef77:	56                   	push   esi
c000ef78:	68 fa 45 02 c0       	push   0xc00245fa
c000ef7d:	e8 c1 dc ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000ef82:	83 c4 10             	add    esp,0x10
c000ef85:	fa                   	cli    
c000ef86:	f4                   	hlt    
c000ef87:	eb fe                	jmp    c000ef87 <displayDebugInfo(regs*)+0x48d>

c000ef89 <x87EmulHandler(regs*, void*)>:
c000ef89:	83 ec 0c             	sub    esp,0xc
c000ef8c:	0f 20 c2             	mov    edx,cr0
c000ef8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef94:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ef98:	75 4b                	jne    c000efe5 <x87EmulHandler(regs*, void*)+0x5c>
c000ef9a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000ef9f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000efa5:	85 c0                	test   eax,eax
c000efa7:	74 05                	je     c000efae <x87EmulHandler(regs*, void*)+0x25>
c000efa9:	83 e2 08             	and    edx,0x8
c000efac:	75 17                	jne    c000efc5 <x87EmulHandler(regs*, void*)+0x3c>
c000efae:	83 ec 0c             	sub    esp,0xc
c000efb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efb5:	e8 f0 ad 00 00       	call   c0019daa <Vm::x87Handler(regs*)>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	84 c0                	test   al,al
c000efbf:	74 24                	je     c000efe5 <x87EmulHandler(regs*, void*)+0x5c>
c000efc1:	83 c4 0c             	add    esp,0xc
c000efc4:	c3                   	ret    
c000efc5:	83 ec 0c             	sub    esp,0xc
c000efc8:	68 20 46 02 c0       	push   0xc0024620
c000efcd:	e8 71 dc ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000efd2:	0f 06                	clts   
c000efd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efd9:	83 c4 10             	add    esp,0x10
c000efdc:	a3 e8 75 02 c0       	mov    ds:0xc00275e8,eax
c000efe1:	83 c4 0c             	add    esp,0xc
c000efe4:	c3                   	ret    
c000efe5:	83 ec 0c             	sub    esp,0xc
c000efe8:	68 0a 46 02 c0       	push   0xc002460a
c000efed:	e8 51 dc ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000eff2:	5a                   	pop    edx
c000eff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eff7:	e8 fe fa ff ff       	call   c000eafa <displayDebugInfo(regs*)>

c000effc <gpFault(regs*, void*)>:
c000effc:	53                   	push   ebx
c000effd:	83 ec 14             	sub    esp,0x14
c000f000:	c7 05 e4 75 02 c0 66 92 01 c0 	mov    DWORD PTR ds:0xc00275e4,0xc0019266
c000f00a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f00e:	53                   	push   ebx
c000f00f:	e8 52 a2 00 00       	call   c0019266 <Vm::faultHandler(regs*)>
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	84 c0                	test   al,al
c000f019:	74 05                	je     c000f020 <gpFault(regs*, void*)+0x24>
c000f01b:	83 c4 08             	add    esp,0x8
c000f01e:	5b                   	pop    ebx
c000f01f:	c3                   	ret    
c000f020:	83 ec 0c             	sub    esp,0xc
c000f023:	68 2d 46 02 c0       	push   0xc002462d
c000f028:	e8 16 dc ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f02d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f030:	e8 c5 fa ff ff       	call   c000eafa <displayDebugInfo(regs*)>

c000f035 <pgFault(regs*, void*)>:
c000f035:	53                   	push   ebx
c000f036:	83 ec 10             	sub    esp,0x10
c000f039:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f03d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f040:	68 48 46 02 c0       	push   0xc0024648
c000f045:	e8 f9 db ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f04a:	0f 20 d0             	mov    eax,cr2
c000f04d:	5a                   	pop    edx
c000f04e:	59                   	pop    ecx
c000f04f:	50                   	push   eax
c000f050:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f055:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f058:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f05e:	e8 5b d7 ff ff       	call   c000c7be <VAS::tryLoadBackOffDisk(unsigned long)>
c000f063:	83 c4 10             	add    esp,0x10
c000f066:	84 c0                	test   al,al
c000f068:	74 05                	je     c000f06f <pgFault(regs*, void*)+0x3a>
c000f06a:	83 c4 08             	add    esp,0x8
c000f06d:	5b                   	pop    ebx
c000f06e:	c3                   	ret    
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	68 5d 46 02 c0       	push   0xc002465d
c000f077:	e8 c7 db ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f07c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f07f:	e8 76 fa ff ff       	call   c000eafa <displayDebugInfo(regs*)>

c000f084 <otherISRHandler(regs*, void*)>:
c000f084:	53                   	push   ebx
c000f085:	83 ec 0c             	sub    esp,0xc
c000f088:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f08c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f08f:	50                   	push   eax
c000f090:	50                   	push   eax
c000f091:	68 6a 46 02 c0       	push   0xc002466a
c000f096:	e8 a8 db ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f09b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f09e:	e8 57 fa ff ff       	call   c000eafa <displayDebugInfo(regs*)>

c000f0a3 <opcodeFault(regs*, void*)>:
c000f0a3:	55                   	push   ebp
c000f0a4:	89 e5                	mov    ebp,esp
c000f0a6:	56                   	push   esi
c000f0a7:	53                   	push   ebx
c000f0a8:	83 ec 30             	sub    esp,0x30
c000f0ab:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000f0b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f0b6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f0bc:	84 c0                	test   al,al
c000f0be:	74 24                	je     c000f0e4 <opcodeFault(regs*, void*)+0x41>
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	68 88 46 02 c0       	push   0xc0024688
c000f0c8:	e8 76 db ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0d6:	8d 50 19             	lea    edx,[eax+0x19]
c000f0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f0df:	e9 7b 03 00 00       	jmp    c000f45f <opcodeFault(regs*, void*)+0x3bc>
c000f0e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f0ed:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f0f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f0fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f0fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f0ff:	3c f0                	cmp    al,0xf0
c000f101:	75 17                	jne    c000f11a <opcodeFault(regs*, void*)+0x77>
c000f103:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f109:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f10c:	8d 50 01             	lea    edx,[eax+0x1]
c000f10f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f112:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f115:	e9 d6 00 00 00       	jmp    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f11a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f11d:	8a 00                	mov    al,BYTE PTR [eax]
c000f11f:	3c f2                	cmp    al,0xf2
c000f121:	74 09                	je     c000f12c <opcodeFault(regs*, void*)+0x89>
c000f123:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f126:	8a 00                	mov    al,BYTE PTR [eax]
c000f128:	3c f3                	cmp    al,0xf3
c000f12a:	75 1b                	jne    c000f147 <opcodeFault(regs*, void*)+0xa4>
c000f12c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f130:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f136:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f139:	8d 50 01             	lea    edx,[eax+0x1]
c000f13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f13f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f142:	e9 a9 00 00 00       	jmp    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f147:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f14a:	8a 00                	mov    al,BYTE PTR [eax]
c000f14c:	3c 66                	cmp    al,0x66
c000f14e:	75 1b                	jne    c000f16b <opcodeFault(regs*, void*)+0xc8>
c000f150:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f154:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f15d:	8d 50 01             	lea    edx,[eax+0x1]
c000f160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f163:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f166:	e9 85 00 00 00       	jmp    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f16b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f16e:	8a 00                	mov    al,BYTE PTR [eax]
c000f170:	3c 67                	cmp    al,0x67
c000f172:	75 18                	jne    c000f18c <opcodeFault(regs*, void*)+0xe9>
c000f174:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f178:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f17b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f17e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f181:	8d 50 01             	lea    edx,[eax+0x1]
c000f184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f187:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f18a:	eb 64                	jmp    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f18c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f18f:	8a 00                	mov    al,BYTE PTR [eax]
c000f191:	3c 2e                	cmp    al,0x2e
c000f193:	74 09                	je     c000f19e <opcodeFault(regs*, void*)+0xfb>
c000f195:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f198:	8a 00                	mov    al,BYTE PTR [eax]
c000f19a:	3c 3e                	cmp    al,0x3e
c000f19c:	75 18                	jne    c000f1b6 <opcodeFault(regs*, void*)+0x113>
c000f19e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1b4:	eb 3a                	jmp    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f1b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f1bb:	3c 36                	cmp    al,0x36
c000f1bd:	74 1b                	je     c000f1da <opcodeFault(regs*, void*)+0x137>
c000f1bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f1c4:	3c 26                	cmp    al,0x26
c000f1c6:	74 12                	je     c000f1da <opcodeFault(regs*, void*)+0x137>
c000f1c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1cb:	8a 00                	mov    al,BYTE PTR [eax]
c000f1cd:	3c 64                	cmp    al,0x64
c000f1cf:	74 09                	je     c000f1da <opcodeFault(regs*, void*)+0x137>
c000f1d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1d4:	8a 00                	mov    al,BYTE PTR [eax]
c000f1d6:	3c 65                	cmp    al,0x65
c000f1d8:	75 16                	jne    c000f1f0 <opcodeFault(regs*, void*)+0x14d>
c000f1da:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1f3:	8a 00                	mov    al,BYTE PTR [eax]
c000f1f5:	3c 0f                	cmp    al,0xf
c000f1f7:	0f 85 8d 01 00 00    	jne    c000f38a <opcodeFault(regs*, void*)+0x2e7>
c000f1fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f200:	40                   	inc    eax
c000f201:	8a 00                	mov    al,BYTE PTR [eax]
c000f203:	3c c7                	cmp    al,0xc7
c000f205:	0f 85 7f 01 00 00    	jne    c000f38a <opcodeFault(regs*, void*)+0x2e7>
c000f20b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f20e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f211:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f214:	8d 50 01             	lea    edx,[eax+0x1]
c000f217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f21d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f220:	50                   	push   eax
c000f221:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f224:	50                   	push   eax
c000f225:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f228:	50                   	push   eax
c000f229:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f22c:	e8 4b 4c 00 00       	call   c0013e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f231:	83 c4 10             	add    esp,0x10
c000f234:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f237:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f23a:	83 f0 01             	xor    eax,0x1
c000f23d:	84 c0                	test   al,al
c000f23f:	0f 84 45 01 00 00    	je     c000f38a <opcodeFault(regs*, void*)+0x2e7>
c000f245:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f248:	3c 01                	cmp    al,0x1
c000f24a:	0f 85 3a 01 00 00    	jne    c000f38a <opcodeFault(regs*, void*)+0x2e7>
c000f250:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f253:	83 f0 01             	xor    eax,0x1
c000f256:	84 c0                	test   al,al
c000f258:	0f 84 2c 01 00 00    	je     c000f38a <opcodeFault(regs*, void*)+0x2e7>
c000f25e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f261:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f264:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f267:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f26e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f271:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f274:	89 c2                	mov    edx,eax
c000f276:	b8 00 00 00 00       	mov    eax,0x0
c000f27b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f27e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f284:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f287:	ba 00 00 00 00       	mov    edx,0x0
c000f28c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f28f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f295:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f298:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f29b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f2a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f2a5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f2a8:	89 c2                	mov    edx,eax
c000f2aa:	b8 00 00 00 00       	mov    eax,0x0
c000f2af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f2b2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f2bb:	ba 00 00 00 00       	mov    edx,0x0
c000f2c0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f2c3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f2c6:	fa                   	cli    
c000f2c7:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f2cc:	40                   	inc    eax
c000f2cd:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000f2d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f2d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f2d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2da:	89 c1                	mov    ecx,eax
c000f2dc:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f2df:	89 cb                	mov    ebx,ecx
c000f2e1:	89 d0                	mov    eax,edx
c000f2e3:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f2e6:	89 c6                	mov    esi,eax
c000f2e8:	89 f0                	mov    eax,esi
c000f2ea:	09 d8                	or     eax,ebx
c000f2ec:	85 c0                	test   eax,eax
c000f2ee:	75 21                	jne    c000f311 <opcodeFault(regs*, void*)+0x26e>
c000f2f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f2f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f2f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f2f9:	89 01                	mov    DWORD PTR [ecx],eax
c000f2fb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f301:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f304:	83 c8 40             	or     eax,0x40
c000f307:	89 c2                	mov    edx,eax
c000f309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f30f:	eb 3e                	jmp    c000f34f <opcodeFault(regs*, void*)+0x2ac>
c000f311:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f314:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f317:	8b 00                	mov    eax,DWORD PTR [eax]
c000f319:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f31c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f31f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f325:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f328:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f32b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f32e:	89 d0                	mov    eax,edx
c000f330:	31 d2                	xor    edx,edx
c000f332:	89 c3                	mov    ebx,eax
c000f334:	89 d6                	mov    esi,edx
c000f336:	89 da                	mov    edx,ebx
c000f338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f33b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f33e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f341:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f344:	83 e0 bf             	and    eax,0xffffffbf
c000f347:	89 c2                	mov    edx,eax
c000f349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f34c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f34f:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f354:	48                   	dec    eax
c000f355:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000f35a:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f35f:	85 c0                	test   eax,eax
c000f361:	75 01                	jne    c000f364 <opcodeFault(regs*, void*)+0x2c1>
c000f363:	fb                   	sti    
c000f364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f36a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f36d:	01 c2                	add    edx,eax
c000f36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f372:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f375:	83 ec 0c             	sub    esp,0xc
c000f378:	68 ab 46 02 c0       	push   0xc00246ab
c000f37d:	e8 c1 d8 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f382:	83 c4 10             	add    esp,0x10
c000f385:	e9 d5 00 00 00       	jmp    c000f45f <opcodeFault(regs*, void*)+0x3bc>
c000f38a:	83 ec 0c             	sub    esp,0xc
c000f38d:	68 be 46 02 c0       	push   0xc00246be
c000f392:	e8 ac d8 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f39d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3a6:	c1 e0 04             	shl    eax,0x4
c000f3a9:	01 d0                	add    eax,edx
c000f3ab:	83 c0 03             	add    eax,0x3
c000f3ae:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b0:	0f b6 d8             	movzx  ebx,al
c000f3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3bf:	c1 e0 04             	shl    eax,0x4
c000f3c2:	01 d0                	add    eax,edx
c000f3c4:	83 c0 02             	add    eax,0x2
c000f3c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3c9:	0f b6 c8             	movzx  ecx,al
c000f3cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3cf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f3d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3d8:	c1 e0 04             	shl    eax,0x4
c000f3db:	01 d0                	add    eax,edx
c000f3dd:	40                   	inc    eax
c000f3de:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e0:	0f b6 d0             	movzx  edx,al
c000f3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3e6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3ef:	c1 e0 04             	shl    eax,0x4
c000f3f2:	01 f0                	add    eax,esi
c000f3f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f3f6:	0f b6 c0             	movzx  eax,al
c000f3f9:	83 ec 0c             	sub    esp,0xc
c000f3fc:	53                   	push   ebx
c000f3fd:	51                   	push   ecx
c000f3fe:	52                   	push   edx
c000f3ff:	50                   	push   eax
c000f400:	68 d0 46 02 c0       	push   0xc00246d0
c000f405:	e8 39 d8 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f40a:	83 c4 20             	add    esp,0x20
c000f40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f410:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f413:	83 c0 03             	add    eax,0x3
c000f416:	8a 00                	mov    al,BYTE PTR [eax]
c000f418:	0f b6 d8             	movzx  ebx,al
c000f41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f41e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f421:	83 c0 02             	add    eax,0x2
c000f424:	8a 00                	mov    al,BYTE PTR [eax]
c000f426:	0f b6 c8             	movzx  ecx,al
c000f429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f42f:	40                   	inc    eax
c000f430:	8a 00                	mov    al,BYTE PTR [eax]
c000f432:	0f b6 d0             	movzx  edx,al
c000f435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f438:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f43b:	8a 00                	mov    al,BYTE PTR [eax]
c000f43d:	0f b6 c0             	movzx  eax,al
c000f440:	83 ec 0c             	sub    esp,0xc
c000f443:	53                   	push   ebx
c000f444:	51                   	push   ecx
c000f445:	52                   	push   edx
c000f446:	50                   	push   eax
c000f447:	68 f8 46 02 c0       	push   0xc00246f8
c000f44c:	e8 f2 d7 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c000f451:	83 c4 20             	add    esp,0x20
c000f454:	83 ec 0c             	sub    esp,0xc
c000f457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f45a:	e8 9b f6 ff ff       	call   c000eafa <displayDebugInfo(regs*)>
c000f45f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f462:	5b                   	pop    ebx
c000f463:	5e                   	pop    esi
c000f464:	5d                   	pop    ebp
c000f465:	c3                   	ret    

c000f466 <displayProgramFault(char const*)>:
c000f466:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f46b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f46e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f474:	85 c0                	test   eax,eax
c000f476:	74 15                	je     c000f48d <displayProgramFault(char const*)+0x27>
c000f478:	83 ec 0c             	sub    esp,0xc
c000f47b:	6a 04                	push   0x4
c000f47d:	6a 0f                	push   0xf
c000f47f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f483:	50                   	push   eax
c000f484:	e8 cb b7 ff ff       	call   c000ac54 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f489:	83 c4 1c             	add    esp,0x1c
c000f48c:	c3                   	ret    
c000f48d:	c3                   	ret    

c000f48e <setupInterruptController()>:
c000f48e:	55                   	push   ebp
c000f48f:	89 e5                	mov    ebp,esp
c000f491:	53                   	push   ebx
c000f492:	83 ec 24             	sub    esp,0x24
c000f495:	b8 00 00 00 00       	mov    eax,0x0
c000f49a:	85 c0                	test   eax,eax
c000f49c:	0f 95 c0             	setne  al
c000f49f:	84 c0                	test   al,al
c000f4a1:	74 5b                	je     c000f4fe <setupInterruptController()+0x70>
c000f4a3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f4aa:	83 ec 0c             	sub    esp,0xc
c000f4ad:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f4b0:	e8 0e a5 ff ff       	call   c00099c3 <malloc>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	89 c3                	mov    ebx,eax
c000f4ba:	83 ec 0c             	sub    esp,0xc
c000f4bd:	53                   	push   ebx
c000f4be:	e8 13 1a 01 00       	call   c0020ed6 <APIC::APIC()>
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f4c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f4cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d1:	83 c0 08             	add    eax,0x8
c000f4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d6:	6a 00                	push   0x0
c000f4d8:	6a 00                	push   0x0
c000f4da:	6a 00                	push   0x0
c000f4dc:	52                   	push   edx
c000f4dd:	ff d0                	call   eax
c000f4df:	83 c4 10             	add    esp,0x10
c000f4e2:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000f4e7:	83 ec 08             	sub    esp,0x8
c000f4ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f4ed:	50                   	push   eax
c000f4ee:	e8 97 eb ff ff       	call   c000e08a <Device::addChild(Device*)>
c000f4f3:	83 c4 10             	add    esp,0x10
c000f4f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f4f9:	e9 79 03 00 00       	jmp    c000f877 <setupInterruptController()+0x3e9>
c000f4fe:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c000f503:	84 c0                	test   al,al
c000f505:	75 14                	jne    c000f51b <setupInterruptController()+0x8d>
c000f507:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000f50c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f512:	83 e2 fe             	and    edx,0xfffffffe
c000f515:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f51b:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000f520:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f526:	83 e0 01             	and    eax,0x1
c000f529:	84 c0                	test   al,al
c000f52b:	0f 95 c0             	setne  al
c000f52e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f531:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f538:	83 ec 0c             	sub    esp,0xc
c000f53b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f53e:	e8 80 a4 ff ff       	call   c00099c3 <malloc>
c000f543:	83 c4 10             	add    esp,0x10
c000f546:	89 c3                	mov    ebx,eax
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	53                   	push   ebx
c000f54c:	e8 dd 1e 01 00       	call   c002142e <PIC::PIC()>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f557:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f55a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f55d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55f:	83 c0 08             	add    eax,0x8
c000f562:	8b 00                	mov    eax,DWORD PTR [eax]
c000f564:	6a 00                	push   0x0
c000f566:	6a 00                	push   0x0
c000f568:	6a 00                	push   0x0
c000f56a:	52                   	push   edx
c000f56b:	ff d0                	call   eax
c000f56d:	83 c4 10             	add    esp,0x10
c000f570:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f574:	74 73                	je     c000f5e9 <setupInterruptController()+0x15b>
c000f576:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f579:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f57c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57e:	83 c0 0c             	add    eax,0xc
c000f581:	8b 00                	mov    eax,DWORD PTR [eax]
c000f583:	6a 00                	push   0x0
c000f585:	6a 00                	push   0x0
c000f587:	6a 00                	push   0x0
c000f589:	52                   	push   edx
c000f58a:	ff d0                	call   eax
c000f58c:	83 c4 10             	add    esp,0x10
c000f58f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f593:	74 15                	je     c000f5aa <setupInterruptController()+0x11c>
c000f595:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f598:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59a:	83 c0 04             	add    eax,0x4
c000f59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59f:	83 ec 0c             	sub    esp,0xc
c000f5a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5a5:	ff d0                	call   eax
c000f5a7:	83 c4 10             	add    esp,0x10
c000f5aa:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f5b1:	83 ec 0c             	sub    esp,0xc
c000f5b4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f5b7:	e8 07 a4 ff ff       	call   c00099c3 <malloc>
c000f5bc:	83 c4 10             	add    esp,0x10
c000f5bf:	89 c3                	mov    ebx,eax
c000f5c1:	83 ec 0c             	sub    esp,0xc
c000f5c4:	53                   	push   ebx
c000f5c5:	e8 0c 19 01 00       	call   c0020ed6 <APIC::APIC()>
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f5d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f5d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d8:	83 c0 08             	add    eax,0x8
c000f5db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5dd:	6a 00                	push   0x0
c000f5df:	6a 00                	push   0x0
c000f5e1:	6a 00                	push   0x0
c000f5e3:	52                   	push   edx
c000f5e4:	ff d0                	call   eax
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000f5ee:	83 ec 08             	sub    esp,0x8
c000f5f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5f4:	50                   	push   eax
c000f5f5:	e8 90 ea ff ff       	call   c000e08a <Device::addChild(Device*)>
c000f5fa:	83 c4 10             	add    esp,0x10
c000f5fd:	c7 05 e8 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00275e8,0x0
c000f607:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60c:	83 c0 24             	add    eax,0x24
c000f60f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f611:	6a 00                	push   0x0
c000f613:	68 84 f0 00 c0       	push   0xc000f084
c000f618:	6a 00                	push   0x0
c000f61a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f61d:	ff d0                	call   eax
c000f61f:	83 c4 10             	add    esp,0x10
c000f622:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f625:	8b 00                	mov    eax,DWORD PTR [eax]
c000f627:	83 c0 24             	add    eax,0x24
c000f62a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62c:	6a 00                	push   0x0
c000f62e:	68 84 f0 00 c0       	push   0xc000f084
c000f633:	6a 01                	push   0x1
c000f635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f638:	ff d0                	call   eax
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f640:	8b 00                	mov    eax,DWORD PTR [eax]
c000f642:	83 c0 24             	add    eax,0x24
c000f645:	8b 00                	mov    eax,DWORD PTR [eax]
c000f647:	6a 00                	push   0x0
c000f649:	68 57 e9 00 c0       	push   0xc000e957
c000f64e:	6a 02                	push   0x2
c000f650:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f653:	ff d0                	call   eax
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f65b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65d:	83 c0 24             	add    eax,0x24
c000f660:	8b 00                	mov    eax,DWORD PTR [eax]
c000f662:	6a 00                	push   0x0
c000f664:	68 84 f0 00 c0       	push   0xc000f084
c000f669:	6a 03                	push   0x3
c000f66b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f66e:	ff d0                	call   eax
c000f670:	83 c4 10             	add    esp,0x10
c000f673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f676:	8b 00                	mov    eax,DWORD PTR [eax]
c000f678:	83 c0 24             	add    eax,0x24
c000f67b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67d:	6a 00                	push   0x0
c000f67f:	68 84 f0 00 c0       	push   0xc000f084
c000f684:	6a 04                	push   0x4
c000f686:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f689:	ff d0                	call   eax
c000f68b:	83 c4 10             	add    esp,0x10
c000f68e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f691:	8b 00                	mov    eax,DWORD PTR [eax]
c000f693:	83 c0 24             	add    eax,0x24
c000f696:	8b 00                	mov    eax,DWORD PTR [eax]
c000f698:	6a 00                	push   0x0
c000f69a:	68 84 f0 00 c0       	push   0xc000f084
c000f69f:	6a 05                	push   0x5
c000f6a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6a4:	ff d0                	call   eax
c000f6a6:	83 c4 10             	add    esp,0x10
c000f6a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ae:	83 c0 24             	add    eax,0x24
c000f6b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b3:	6a 00                	push   0x0
c000f6b5:	68 a3 f0 00 c0       	push   0xc000f0a3
c000f6ba:	6a 06                	push   0x6
c000f6bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6bf:	ff d0                	call   eax
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c9:	83 c0 24             	add    eax,0x24
c000f6cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ce:	6a 00                	push   0x0
c000f6d0:	68 89 ef 00 c0       	push   0xc000ef89
c000f6d5:	6a 07                	push   0x7
c000f6d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6da:	ff d0                	call   eax
c000f6dc:	83 c4 10             	add    esp,0x10
c000f6df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e4:	83 c0 24             	add    eax,0x24
c000f6e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e9:	6a 00                	push   0x0
c000f6eb:	68 72 e7 00 c0       	push   0xc000e772
c000f6f0:	6a 08                	push   0x8
c000f6f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6f5:	ff d0                	call   eax
c000f6f7:	83 c4 10             	add    esp,0x10
c000f6fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ff:	83 c0 24             	add    eax,0x24
c000f702:	8b 00                	mov    eax,DWORD PTR [eax]
c000f704:	6a 00                	push   0x0
c000f706:	68 84 f0 00 c0       	push   0xc000f084
c000f70b:	6a 09                	push   0x9
c000f70d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f710:	ff d0                	call   eax
c000f712:	83 c4 10             	add    esp,0x10
c000f715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f718:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71a:	83 c0 24             	add    eax,0x24
c000f71d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71f:	6a 00                	push   0x0
c000f721:	68 84 f0 00 c0       	push   0xc000f084
c000f726:	6a 0a                	push   0xa
c000f728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f72b:	ff d0                	call   eax
c000f72d:	83 c4 10             	add    esp,0x10
c000f730:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f733:	8b 00                	mov    eax,DWORD PTR [eax]
c000f735:	83 c0 24             	add    eax,0x24
c000f738:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73a:	6a 00                	push   0x0
c000f73c:	68 84 f0 00 c0       	push   0xc000f084
c000f741:	6a 0b                	push   0xb
c000f743:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f746:	ff d0                	call   eax
c000f748:	83 c4 10             	add    esp,0x10
c000f74b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f750:	83 c0 24             	add    eax,0x24
c000f753:	8b 00                	mov    eax,DWORD PTR [eax]
c000f755:	6a 00                	push   0x0
c000f757:	68 84 f0 00 c0       	push   0xc000f084
c000f75c:	6a 0c                	push   0xc
c000f75e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f761:	ff d0                	call   eax
c000f763:	83 c4 10             	add    esp,0x10
c000f766:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f769:	8b 00                	mov    eax,DWORD PTR [eax]
c000f76b:	83 c0 24             	add    eax,0x24
c000f76e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f770:	6a 00                	push   0x0
c000f772:	68 fc ef 00 c0       	push   0xc000effc
c000f777:	6a 0d                	push   0xd
c000f779:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f77c:	ff d0                	call   eax
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f784:	8b 00                	mov    eax,DWORD PTR [eax]
c000f786:	83 c0 24             	add    eax,0x24
c000f789:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78b:	6a 00                	push   0x0
c000f78d:	68 35 f0 00 c0       	push   0xc000f035
c000f792:	6a 0e                	push   0xe
c000f794:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f797:	ff d0                	call   eax
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f79f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a1:	83 c0 24             	add    eax,0x24
c000f7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a6:	6a 00                	push   0x0
c000f7a8:	68 84 f0 00 c0       	push   0xc000f084
c000f7ad:	6a 0f                	push   0xf
c000f7af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7b2:	ff d0                	call   eax
c000f7b4:	83 c4 10             	add    esp,0x10
c000f7b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7bc:	83 c0 24             	add    eax,0x24
c000f7bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c1:	6a 00                	push   0x0
c000f7c3:	68 84 f0 00 c0       	push   0xc000f084
c000f7c8:	6a 10                	push   0x10
c000f7ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7cd:	ff d0                	call   eax
c000f7cf:	83 c4 10             	add    esp,0x10
c000f7d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7d7:	83 c0 24             	add    eax,0x24
c000f7da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7dc:	6a 00                	push   0x0
c000f7de:	68 84 f0 00 c0       	push   0xc000f084
c000f7e3:	6a 11                	push   0x11
c000f7e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7e8:	ff d0                	call   eax
c000f7ea:	83 c4 10             	add    esp,0x10
c000f7ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f2:	83 c0 24             	add    eax,0x24
c000f7f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f7:	6a 00                	push   0x0
c000f7f9:	68 84 f0 00 c0       	push   0xc000f084
c000f7fe:	6a 12                	push   0x12
c000f800:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f803:	ff d0                	call   eax
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80d:	83 c0 24             	add    eax,0x24
c000f810:	8b 00                	mov    eax,DWORD PTR [eax]
c000f812:	6a 00                	push   0x0
c000f814:	68 84 f0 00 c0       	push   0xc000f084
c000f819:	6a 13                	push   0x13
c000f81b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f81e:	ff d0                	call   eax
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f826:	8b 00                	mov    eax,DWORD PTR [eax]
c000f828:	83 c0 24             	add    eax,0x24
c000f82b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82d:	6a 00                	push   0x0
c000f82f:	68 84 f0 00 c0       	push   0xc000f084
c000f834:	6a 14                	push   0x14
c000f836:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f839:	ff d0                	call   eax
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f841:	8b 00                	mov    eax,DWORD PTR [eax]
c000f843:	83 c0 24             	add    eax,0x24
c000f846:	8b 00                	mov    eax,DWORD PTR [eax]
c000f848:	6a 00                	push   0x0
c000f84a:	68 84 f0 00 c0       	push   0xc000f084
c000f84f:	6a 1e                	push   0x1e
c000f851:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f854:	ff d0                	call   eax
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f85c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f85e:	83 c0 24             	add    eax,0x24
c000f861:	8b 00                	mov    eax,DWORD PTR [eax]
c000f863:	6a 00                	push   0x0
c000f865:	68 73 69 01 c0       	push   0xc0016973
c000f86a:	6a 60                	push   0x60
c000f86c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f86f:	ff d0                	call   eax
c000f871:	83 c4 10             	add    esp,0x10
c000f874:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f877:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f87a:	c9                   	leave  
c000f87b:	c3                   	ret    

c000f87c <InterruptController::convertLegacyIRQNumber(int)>:
c000f87c:	55                   	push   ebp
c000f87d:	89 e5                	mov    ebp,esp
c000f87f:	83 ec 08             	sub    esp,0x8
c000f882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f885:	83 ec 0c             	sub    esp,0xc
c000f888:	50                   	push   eax
c000f889:	e8 fc ea ff ff       	call   c000e38a <Device::getName()>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	8a 00                	mov    al,BYTE PTR [eax]
c000f893:	3c 41                	cmp    al,0x41
c000f895:	0f 94 c0             	sete   al
c000f898:	84 c0                	test   al,al
c000f89a:	74 28                	je     c000f8c4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f89c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f8a0:	7f 12                	jg     c000f8b4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f8a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8a5:	05 a0 6b 02 c0       	add    eax,0xc0026ba0
c000f8aa:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ac:	0f b6 c0             	movzx  eax,al
c000f8af:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f8b2:	eb 10                	jmp    c000f8c4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f8b4:	83 ec 0c             	sub    esp,0xc
c000f8b7:	68 20 47 02 c0       	push   0xc0024720
c000f8bc:	e8 a2 4e 00 00       	call   c0014763 <Krnl::panic(char const*)>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8c7:	c9                   	leave  
c000f8c8:	c3                   	ret    
c000f8c9:	90                   	nop

c000f8ca <startGUI(void*)>:
c000f8ca:	55                   	push   ebp
c000f8cb:	89 e5                	mov    ebp,esp
c000f8cd:	53                   	push   ebx
c000f8ce:	83 ec 04             	sub    esp,0x4
c000f8d1:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f8d6:	48                   	dec    eax
c000f8d7:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000f8dc:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f8e1:	85 c0                	test   eax,eax
c000f8e3:	75 01                	jne    c000f8e6 <startGUI(void*)+0x1c>
c000f8e5:	fb                   	sti    
c000f8e6:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c000f8ec:	83 ec 08             	sub    esp,0x8
c000f8ef:	6a 01                	push   0x1
c000f8f1:	68 a0 47 02 c0       	push   0xc00247a0
c000f8f6:	e8 53 80 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c000f8fb:	83 c4 10             	add    esp,0x10
c000f8fe:	83 ec 08             	sub    esp,0x8
c000f901:	53                   	push   ebx
c000f902:	50                   	push   eax
c000f903:	e8 77 82 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c000f908:	83 c4 10             	add    esp,0x10
c000f90b:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c000f911:	83 ec 08             	sub    esp,0x8
c000f914:	6a 01                	push   0x1
c000f916:	68 ba 47 02 c0       	push   0xc00247ba
c000f91b:	e8 2e 80 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c000f920:	83 c4 10             	add    esp,0x10
c000f923:	83 ec 08             	sub    esp,0x8
c000f926:	53                   	push   ebx
c000f927:	50                   	push   eax
c000f928:	e8 52 82 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	90                   	nop
c000f931:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f934:	c9                   	leave  
c000f935:	c3                   	ret    

c000f936 <startGUIVESA(void*)>:
c000f936:	55                   	push   ebp
c000f937:	89 e5                	mov    ebp,esp
c000f939:	53                   	push   ebx
c000f93a:	83 ec 04             	sub    esp,0x4
c000f93d:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f942:	48                   	dec    eax
c000f943:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000f948:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f94d:	85 c0                	test   eax,eax
c000f94f:	75 01                	jne    c000f952 <startGUIVESA(void*)+0x1c>
c000f951:	fb                   	sti    
c000f952:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c000f958:	83 ec 08             	sub    esp,0x8
c000f95b:	6a 01                	push   0x1
c000f95d:	68 d4 47 02 c0       	push   0xc00247d4
c000f962:	e8 e7 7f 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c000f967:	83 c4 10             	add    esp,0x10
c000f96a:	83 ec 08             	sub    esp,0x8
c000f96d:	53                   	push   ebx
c000f96e:	50                   	push   eax
c000f96f:	e8 0b 82 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c000f974:	83 c4 10             	add    esp,0x10
c000f977:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c000f97d:	83 ec 08             	sub    esp,0x8
c000f980:	6a 01                	push   0x1
c000f982:	68 ba 47 02 c0       	push   0xc00247ba
c000f987:	e8 c2 7f 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c000f98c:	83 c4 10             	add    esp,0x10
c000f98f:	83 ec 08             	sub    esp,0x8
c000f992:	53                   	push   ebx
c000f993:	50                   	push   eax
c000f994:	e8 e6 81 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	90                   	nop
c000f99d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f9a0:	c9                   	leave  
c000f9a1:	c3                   	ret    

c000f9a2 <sendKeyToTerminal(unsigned char)>:
c000f9a2:	55                   	push   ebp
c000f9a3:	89 e5                	mov    ebp,esp
c000f9a5:	83 ec 28             	sub    esp,0x28
c000f9a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f9ae:	a1 24 75 02 c0       	mov    eax,ds:0xc0027524
c000f9b3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f9b7:	83 ec 08             	sub    esp,0x8
c000f9ba:	52                   	push   edx
c000f9bb:	50                   	push   eax
c000f9bc:	e8 3b b7 ff ff       	call   c000b0fc <VgaText::receiveKey(unsigned char)>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f9c8:	0f 85 8f 00 00 00    	jne    c000fa5d <sendKeyToTerminal(unsigned char)+0xbb>
c000f9ce:	fa                   	cli    
c000f9cf:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000f9d4:	40                   	inc    eax
c000f9d5:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000f9da:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c000f9df:	40                   	inc    eax
c000f9e0:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c000f9e5:	a1 00 76 02 c0       	mov    eax,ds:0xc0027600
c000f9ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f9ed:	c7 05 00 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027600,0x0
c000f9f7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f9fb:	74 1f                	je     c000fa1c <sendKeyToTerminal(unsigned char)+0x7a>
c000f9fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fa03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fa06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fa09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fa0c:	83 ec 0c             	sub    esp,0xc
c000fa0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa12:	e8 d9 8d 00 00       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	eb db                	jmp    c000f9f7 <sendKeyToTerminal(unsigned char)+0x55>
c000fa1c:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c000fa21:	48                   	dec    eax
c000fa22:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c000fa27:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c000fa2c:	85 c0                	test   eax,eax
c000fa2e:	75 18                	jne    c000fa48 <sendKeyToTerminal(unsigned char)+0xa6>
c000fa30:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c000fa35:	85 c0                	test   eax,eax
c000fa37:	74 0f                	je     c000fa48 <sendKeyToTerminal(unsigned char)+0xa6>
c000fa39:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c000fa43:	e8 ec 88 00 00       	call   c0018334 <schedule()>
c000fa48:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000fa4d:	48                   	dec    eax
c000fa4e:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000fa53:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000fa58:	85 c0                	test   eax,eax
c000fa5a:	75 01                	jne    c000fa5d <sendKeyToTerminal(unsigned char)+0xbb>
c000fa5c:	fb                   	sti    
c000fa5d:	90                   	nop
c000fa5e:	c9                   	leave  
c000fa5f:	c3                   	ret    

c000fa60 <sendKeyboardToken(KeyboardToken)>:
c000fa60:	55                   	push   ebp
c000fa61:	89 e5                	mov    ebp,esp
c000fa63:	83 ec 18             	sub    esp,0x18
c000fa66:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fa69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa6c:	0f b7 c0             	movzx  eax,ax
c000fa6f:	83 f2 01             	xor    edx,0x1
c000fa72:	88 90 20 76 02 c0    	mov    BYTE PTR [eax-0x3ffd89e0],dl
c000fa78:	a1 08 76 02 c0       	mov    eax,ds:0xc0027608
c000fa7d:	85 c0                	test   eax,eax
c000fa7f:	74 24                	je     c000faa5 <sendKeyboardToken(KeyboardToken)+0x45>
c000fa81:	8b 0d 08 76 02 c0    	mov    ecx,DWORD PTR ds:0xc0027608
c000fa87:	83 ec 04             	sub    esp,0x4
c000fa8a:	68 20 76 02 c0       	push   0xc0027620
c000fa8f:	83 ec 08             	sub    esp,0x8
c000fa92:	89 e2                	mov    edx,esp
c000fa94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa97:	89 02                	mov    DWORD PTR [edx],eax
c000fa99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa9c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000faa0:	ff d1                	call   ecx
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa8:	66 3d 03 02          	cmp    ax,0x203
c000faac:	75 07                	jne    c000fab5 <sendKeyboardToken(KeyboardToken)+0x55>
c000faae:	a0 20 77 02 c0       	mov    al,ds:0xc0027720
c000fab3:	84 c0                	test   al,al
c000fab5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fab9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fabc:	a0 28 7a 02 c0       	mov    al,ds:0xc0027a28
c000fac1:	38 c2                	cmp    dl,al
c000fac3:	74 1c                	je     c000fae1 <sendKeyboardToken(KeyboardToken)+0x81>
c000fac5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fac8:	a2 28 7a 02 c0       	mov    ds:0xc0027a28,al
c000facd:	a0 28 7a 02 c0       	mov    al,ds:0xc0027a28
c000fad2:	0f b6 c0             	movzx  eax,al
c000fad5:	83 ec 0c             	sub    esp,0xc
c000fad8:	50                   	push   eax
c000fad9:	e8 5e ac ff ff       	call   c000a73c <setTerminalScrollLock(bool)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fae4:	84 c0                	test   al,al
c000fae6:	0f 84 ae 00 00 00    	je     c000fb9a <sendKeyboardToken(KeyboardToken)+0x13a>
c000faec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faef:	66 3d 10 03          	cmp    ax,0x310
c000faf3:	75 06                	jne    c000fafb <sendKeyboardToken(KeyboardToken)+0x9b>
c000faf5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fafe:	66 3d 11 03          	cmp    ax,0x311
c000fb02:	75 06                	jne    c000fb0a <sendKeyboardToken(KeyboardToken)+0xaa>
c000fb04:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fb0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb0d:	66 3d 12 03          	cmp    ax,0x312
c000fb11:	75 06                	jne    c000fb19 <sendKeyboardToken(KeyboardToken)+0xb9>
c000fb13:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fb19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb1c:	66 3d 13 03          	cmp    ax,0x313
c000fb20:	75 06                	jne    c000fb28 <sendKeyboardToken(KeyboardToken)+0xc8>
c000fb22:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fb28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2b:	66 3d 14 03          	cmp    ax,0x314
c000fb2f:	75 06                	jne    c000fb37 <sendKeyboardToken(KeyboardToken)+0xd7>
c000fb31:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fb37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb3a:	66 3d 15 03          	cmp    ax,0x315
c000fb3e:	75 06                	jne    c000fb46 <sendKeyboardToken(KeyboardToken)+0xe6>
c000fb40:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fb46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb49:	66 3d 16 03          	cmp    ax,0x316
c000fb4d:	75 06                	jne    c000fb55 <sendKeyboardToken(KeyboardToken)+0xf5>
c000fb4f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fb55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb58:	66 3d 17 03          	cmp    ax,0x317
c000fb5c:	75 06                	jne    c000fb64 <sendKeyboardToken(KeyboardToken)+0x104>
c000fb5e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fb64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb67:	66 3d 18 03          	cmp    ax,0x318
c000fb6b:	75 06                	jne    c000fb73 <sendKeyboardToken(KeyboardToken)+0x113>
c000fb6d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fb73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb76:	66 3d 19 03          	cmp    ax,0x319
c000fb7a:	75 06                	jne    c000fb82 <sendKeyboardToken(KeyboardToken)+0x122>
c000fb7c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fb82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb85:	66 3d 1a 03          	cmp    ax,0x31a
c000fb89:	0f 85 c9 00 00 00    	jne    c000fc58 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fb8f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fb95:	e9 be 00 00 00       	jmp    c000fc58 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fb9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb9d:	66 3d 10 03          	cmp    ax,0x310
c000fba1:	75 0a                	jne    c000fbad <sendKeyboardToken(KeyboardToken)+0x14d>
c000fba3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fba9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb0:	66 3d 11 03          	cmp    ax,0x311
c000fbb4:	75 0a                	jne    c000fbc0 <sendKeyboardToken(KeyboardToken)+0x160>
c000fbb6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fbbc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc3:	66 3d 12 03          	cmp    ax,0x312
c000fbc7:	75 0a                	jne    c000fbd3 <sendKeyboardToken(KeyboardToken)+0x173>
c000fbc9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fbcf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd6:	66 3d 13 03          	cmp    ax,0x313
c000fbda:	75 0a                	jne    c000fbe6 <sendKeyboardToken(KeyboardToken)+0x186>
c000fbdc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fbe2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe9:	66 3d 14 03          	cmp    ax,0x314
c000fbed:	75 0a                	jne    c000fbf9 <sendKeyboardToken(KeyboardToken)+0x199>
c000fbef:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fbf5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fbf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbfc:	66 3d 15 03          	cmp    ax,0x315
c000fc00:	75 0a                	jne    c000fc0c <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fc02:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0f:	66 3d 16 03          	cmp    ax,0x316
c000fc13:	75 0a                	jne    c000fc1f <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fc15:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fc1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc22:	66 3d 17 03          	cmp    ax,0x317
c000fc26:	75 0a                	jne    c000fc32 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fc28:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fc2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc35:	66 3d 18 03          	cmp    ax,0x318
c000fc39:	75 0a                	jne    c000fc45 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fc3b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fc41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc48:	66 3d 19 03          	cmp    ax,0x319
c000fc4c:	75 0a                	jne    c000fc58 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc4e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fc54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc5b:	66 3d 00 02          	cmp    ax,0x200
c000fc5f:	75 2c                	jne    c000fc8d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fc61:	a0 20 7a 02 c0       	mov    al,ds:0xc0027a20
c000fc66:	83 f0 01             	xor    eax,0x1
c000fc69:	84 c0                	test   al,al
c000fc6b:	74 20                	je     c000fc8d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fc6d:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000fc72:	6a 01                	push   0x1
c000fc74:	6a 00                	push   0x0
c000fc76:	68 ca f8 00 c0       	push   0xc000f8ca
c000fc7b:	50                   	push   eax
c000fc7c:	e8 97 84 00 00       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	c6 05 20 7a 02 c0 01 	mov    BYTE PTR ds:0xc0027a20,0x1
c000fc8b:	eb 33                	jmp    c000fcc0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fc8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc90:	66 3d 01 02          	cmp    ax,0x201
c000fc94:	75 2a                	jne    c000fcc0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fc96:	a0 20 7a 02 c0       	mov    al,ds:0xc0027a20
c000fc9b:	83 f0 01             	xor    eax,0x1
c000fc9e:	84 c0                	test   al,al
c000fca0:	74 1e                	je     c000fcc0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fca2:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c000fca7:	6a 01                	push   0x1
c000fca9:	6a 00                	push   0x0
c000fcab:	68 36 f9 00 c0       	push   0xc000f936
c000fcb0:	50                   	push   eax
c000fcb1:	e8 62 84 00 00       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	c6 05 20 7a 02 c0 01 	mov    BYTE PTR ds:0xc0027a20,0x1
c000fcc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc3:	66 3d 1d 03          	cmp    ax,0x31d
c000fcc7:	75 06                	jne    c000fccf <sendKeyboardToken(KeyboardToken)+0x26f>
c000fcc9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd2:	66 3d 1c 03          	cmp    ax,0x31c
c000fcd6:	75 06                	jne    c000fcde <sendKeyboardToken(KeyboardToken)+0x27e>
c000fcd8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fcde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce1:	66 3d 1b 03          	cmp    ax,0x31b
c000fce5:	75 06                	jne    c000fced <sendKeyboardToken(KeyboardToken)+0x28d>
c000fce7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf0:	66 3d 1e 03          	cmp    ax,0x31e
c000fcf4:	75 06                	jne    c000fcfc <sendKeyboardToken(KeyboardToken)+0x29c>
c000fcf6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fcfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcff:	66 3d 1f 03          	cmp    ax,0x31f
c000fd03:	75 06                	jne    c000fd0b <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fd05:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fd0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0e:	66 3d 1a 03          	cmp    ax,0x31a
c000fd12:	75 06                	jne    c000fd1a <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fd14:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fd1a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fd1e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd21:	83 f0 01             	xor    eax,0x1
c000fd24:	84 c0                	test   al,al
c000fd26:	74 77                	je     c000fd9f <sendKeyboardToken(KeyboardToken)+0x33f>
c000fd28:	a0 21 77 02 c0       	mov    al,ds:0xc0027721
c000fd2d:	84 c0                	test   al,al
c000fd2f:	74 41                	je     c000fd72 <sendKeyboardToken(KeyboardToken)+0x312>
c000fd31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fd35:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fd39:	74 2b                	je     c000fd66 <sendKeyboardToken(KeyboardToken)+0x306>
c000fd3b:	8b 15 24 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a24
c000fd41:	89 d0                	mov    eax,edx
c000fd43:	c1 e0 02             	shl    eax,0x2
c000fd46:	01 d0                	add    eax,edx
c000fd48:	01 c0                	add    eax,eax
c000fd4a:	a3 24 7a 02 c0       	mov    ds:0xc0027a24,eax
c000fd4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd52:	0f b7 c0             	movzx  eax,ax
c000fd55:	8d 50 d0             	lea    edx,[eax-0x30]
c000fd58:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c000fd5d:	01 d0                	add    eax,edx
c000fd5f:	a3 24 7a 02 c0       	mov    ds:0xc0027a24,eax
c000fd64:	eb 6d                	jmp    c000fdd3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fd66:	c7 05 24 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a24,0x0
c000fd70:	eb 61                	jmp    c000fdd3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fd72:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c000fd77:	85 c0                	test   eax,eax
c000fd79:	74 18                	je     c000fd93 <sendKeyboardToken(KeyboardToken)+0x333>
c000fd7b:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c000fd80:	0f b6 c0             	movzx  eax,al
c000fd83:	83 ec 0c             	sub    esp,0xc
c000fd86:	50                   	push   eax
c000fd87:	e8 16 fc ff ff       	call   c000f9a2 <sendKeyToTerminal(unsigned char)>
c000fd8c:	83 c4 10             	add    esp,0x10
c000fd8f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fd93:	c7 05 24 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a24,0x0
c000fd9d:	eb 34                	jmp    c000fdd3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fd9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda2:	66 3d 01 01          	cmp    ax,0x101
c000fda6:	75 2b                	jne    c000fdd3 <sendKeyboardToken(KeyboardToken)+0x373>
c000fda8:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c000fdad:	85 c0                	test   eax,eax
c000fdaf:	74 18                	je     c000fdc9 <sendKeyboardToken(KeyboardToken)+0x369>
c000fdb1:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c000fdb6:	0f b6 c0             	movzx  eax,al
c000fdb9:	83 ec 0c             	sub    esp,0xc
c000fdbc:	50                   	push   eax
c000fdbd:	e8 e0 fb ff ff       	call   c000f9a2 <sendKeyToTerminal(unsigned char)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fdc9:	c7 05 24 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a24,0x0
c000fdd3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fdd6:	83 f0 01             	xor    eax,0x1
c000fdd9:	84 c0                	test   al,al
c000fddb:	74 4c                	je     c000fe29 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fddd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fde0:	83 f0 01             	xor    eax,0x1
c000fde3:	84 c0                	test   al,al
c000fde5:	74 42                	je     c000fe29 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fde7:	a0 20 77 02 c0       	mov    al,ds:0xc0027720
c000fdec:	83 f0 01             	xor    eax,0x1
c000fdef:	84 c0                	test   al,al
c000fdf1:	74 36                	je     c000fe29 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fdf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf6:	66 83 f8 1f          	cmp    ax,0x1f
c000fdfa:	76 09                	jbe    c000fe05 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fdfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdff:	66 83 f8 7e          	cmp    ax,0x7e
c000fe03:	76 12                	jbe    c000fe17 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fe05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe08:	66 83 f8 0a          	cmp    ax,0xa
c000fe0c:	74 09                	je     c000fe17 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fe0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe11:	66 83 f8 08          	cmp    ax,0x8
c000fe15:	75 12                	jne    c000fe29 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe1a:	0f b6 c0             	movzx  eax,al
c000fe1d:	83 ec 0c             	sub    esp,0xc
c000fe20:	50                   	push   eax
c000fe21:	e8 7c fb ff ff       	call   c000f9a2 <sendKeyToTerminal(unsigned char)>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fe2c:	83 f0 01             	xor    eax,0x1
c000fe2f:	84 c0                	test   al,al
c000fe31:	74 4f                	je     c000fe82 <sendKeyboardToken(KeyboardToken)+0x422>
c000fe33:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe36:	83 f0 01             	xor    eax,0x1
c000fe39:	84 c0                	test   al,al
c000fe3b:	74 45                	je     c000fe82 <sendKeyboardToken(KeyboardToken)+0x422>
c000fe3d:	a0 20 77 02 c0       	mov    al,ds:0xc0027720
c000fe42:	84 c0                	test   al,al
c000fe44:	74 3c                	je     c000fe82 <sendKeyboardToken(KeyboardToken)+0x422>
c000fe46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe49:	66 83 f8 3f          	cmp    ax,0x3f
c000fe4d:	76 33                	jbe    c000fe82 <sendKeyboardToken(KeyboardToken)+0x422>
c000fe4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe52:	66 83 f8 7f          	cmp    ax,0x7f
c000fe56:	77 2a                	ja     c000fe82 <sendKeyboardToken(KeyboardToken)+0x422>
c000fe58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe5b:	88 c2                	mov    dl,al
c000fe5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe60:	66 83 f8 5f          	cmp    ax,0x5f
c000fe64:	76 04                	jbe    c000fe6a <sendKeyboardToken(KeyboardToken)+0x40a>
c000fe66:	b0 20                	mov    al,0x20
c000fe68:	eb 02                	jmp    c000fe6c <sendKeyboardToken(KeyboardToken)+0x40c>
c000fe6a:	b0 00                	mov    al,0x0
c000fe6c:	29 c2                	sub    edx,eax
c000fe6e:	88 d0                	mov    al,dl
c000fe70:	83 e8 40             	sub    eax,0x40
c000fe73:	0f b6 c0             	movzx  eax,al
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	50                   	push   eax
c000fe7a:	e8 23 fb ff ff       	call   c000f9a2 <sendKeyToTerminal(unsigned char)>
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe85:	66 3d 00 03          	cmp    ax,0x300
c000fe89:	75 0f                	jne    c000fe9a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fe8b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe8e:	83 f0 01             	xor    eax,0x1
c000fe91:	84 c0                	test   al,al
c000fe93:	74 05                	je     c000fe9a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fe95:	e8 13 ac ff ff       	call   c000aaad <doTerminalCycle()>
c000fe9a:	90                   	nop
c000fe9b:	c9                   	leave  
c000fe9c:	c3                   	ret    

c000fe9d <clearInternalKeybuffer(VgaText*)>:
c000fe9d:	55                   	push   ebp
c000fe9e:	89 e5                	mov    ebp,esp
c000fea0:	83 ec 08             	sub    esp,0x8
c000fea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea6:	05 98 01 00 00       	add    eax,0x198
c000feab:	83 ec 0c             	sub    esp,0xc
c000feae:	50                   	push   eax
c000feaf:	e8 ec 07 ff ff       	call   c00006a0 <strlen>
c000feb4:	83 c4 10             	add    esp,0x10
c000feb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000feba:	81 c2 98 01 00 00    	add    edx,0x198
c000fec0:	83 ec 04             	sub    esp,0x4
c000fec3:	50                   	push   eax
c000fec4:	6a 00                	push   0x0
c000fec6:	52                   	push   edx
c000fec7:	e8 b8 07 ff ff       	call   c0000684 <memset>
c000fecc:	83 c4 10             	add    esp,0x10
c000fecf:	90                   	nop
c000fed0:	c9                   	leave  
c000fed1:	c3                   	ret    

c000fed2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fed2:	55                   	push   ebp
c000fed3:	89 e5                	mov    ebp,esp
c000fed5:	83 ec 18             	sub    esp,0x18
c000fed8:	a1 08 76 02 c0       	mov    eax,ds:0xc0027608
c000fedd:	85 c0                	test   eax,eax
c000fedf:	74 2a                	je     c000ff0b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fee1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fee7:	8b 0d 08 76 02 c0    	mov    ecx,DWORD PTR ds:0xc0027608
c000feed:	83 ec 04             	sub    esp,0x4
c000fef0:	68 20 76 02 c0       	push   0xc0027620
c000fef5:	83 ec 08             	sub    esp,0x8
c000fef8:	89 e2                	mov    edx,esp
c000fefa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fefd:	89 02                	mov    DWORD PTR [edx],eax
c000feff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff02:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ff06:	ff d1                	call   ecx
c000ff08:	83 c4 10             	add    esp,0x10
c000ff0b:	fb                   	sti    
c000ff0c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ff13:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ff17:	0f 84 a1 00 00 00    	je     c000ffbe <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ff1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff20:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ff26:	84 c0                	test   al,al
c000ff28:	75 28                	jne    c000ff52 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ff2a:	fa                   	cli    
c000ff2b:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000ff30:	40                   	inc    eax
c000ff31:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000ff36:	e8 f9 83 00 00       	call   c0018334 <schedule()>
c000ff3b:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000ff40:	48                   	dec    eax
c000ff41:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c000ff46:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c000ff4b:	85 c0                	test   eax,eax
c000ff4d:	75 ce                	jne    c000ff1d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ff4f:	fb                   	sti    
c000ff50:	eb cb                	jmp    c000ff1d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ff52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff55:	8d 50 01             	lea    edx,[eax+0x1]
c000ff58:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ff5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff5e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000ff64:	88 10                	mov    BYTE PTR [eax],dl
c000ff66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff69:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ff6f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ff72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff75:	05 98 01 00 00       	add    eax,0x198
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	50                   	push   eax
c000ff7e:	e8 1d 07 ff ff       	call   c00006a0 <strlen>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff89:	81 c2 98 01 00 00    	add    edx,0x198
c000ff8f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ff92:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff95:	81 c2 98 01 00 00    	add    edx,0x198
c000ff9b:	83 ec 04             	sub    esp,0x4
c000ff9e:	50                   	push   eax
c000ff9f:	51                   	push   ecx
c000ffa0:	52                   	push   edx
c000ffa1:	e8 16 06 ff ff       	call   c00005bc <memmove>
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ffac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ffaf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ffb3:	0f 85 5a ff ff ff    	jne    c000ff13 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ffb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ffbc:	eb 03                	jmp    c000ffc1 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ffbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ffc1:	c9                   	leave  
c000ffc2:	c3                   	ret    
c000ffc3:	90                   	nop

c000ffc4 <Keyboard::Keyboard(char const*)>:
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd2:	50                   	push   eax
c000ffd3:	e8 b6 e2 ff ff       	call   c000e28e <Device::Device(char const*)>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	ba f8 47 02 c0       	mov    edx,0xc00247f8
c000ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe4:	89 10                	mov    DWORD PTR [eax],edx
c000ffe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffea:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fff4:	c6 05 04 76 02 c0 01 	mov    BYTE PTR ds:0xc0027604,0x1
c000fffb:	90                   	nop
c000fffc:	83 c4 0c             	add    esp,0xc
c000ffff:	c3                   	ret    

c0010000 <Keyboard::~Keyboard()>:
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	ba f8 47 02 c0       	mov    edx,0xc00247f8
c0010008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001000c:	89 10                	mov    DWORD PTR [eax],edx
c001000e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	50                   	push   eax
c0010016:	e8 3d df ff ff       	call   c000df58 <Device::~Device()>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	90                   	nop
c001001f:	83 c4 0c             	add    esp,0xc
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <Keyboard::~Keyboard()>:
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	83 ec 0c             	sub    esp,0xc
c001002a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001002e:	e8 cd ff ff ff       	call   c0010000 <Keyboard::~Keyboard()>
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	83 ec 08             	sub    esp,0x8
c0010039:	68 5c 01 00 00       	push   0x15c
c001003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010042:	e8 1b cb ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0010047:	83 c4 10             	add    esp,0x10
c001004a:	83 c4 0c             	add    esp,0xc
c001004d:	c3                   	ret    

c001004e <LogicalDisk::close(int, int, void*)>:
c001004e:	83 c8 ff             	or     eax,0xffffffff
c0010051:	c3                   	ret    

c0010052 <LogicalDisk::~LogicalDisk()>:
c0010052:	83 ec 0c             	sub    esp,0xc
c0010055:	ba 70 48 02 c0       	mov    edx,0xc0024870
c001005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005e:	89 10                	mov    DWORD PTR [eax],edx
c0010060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010064:	83 ec 0c             	sub    esp,0xc
c0010067:	50                   	push   eax
c0010068:	e8 eb de ff ff       	call   c000df58 <Device::~Device()>
c001006d:	83 c4 10             	add    esp,0x10
c0010070:	90                   	nop
c0010071:	83 c4 0c             	add    esp,0xc
c0010074:	c3                   	ret    
c0010075:	90                   	nop

c0010076 <LogicalDisk::~LogicalDisk()>:
c0010076:	83 ec 0c             	sub    esp,0xc
c0010079:	83 ec 0c             	sub    esp,0xc
c001007c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010080:	e8 cd ff ff ff       	call   c0010052 <LogicalDisk::~LogicalDisk()>
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	83 ec 08             	sub    esp,0x8
c001008b:	68 74 01 00 00       	push   0x174
c0010090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010094:	e8 c9 ca ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	83 c4 0c             	add    esp,0xc
c001009f:	c3                   	ret    

c00100a0 <LogicalDisk::open(int, int, void*)>:
c00100a0:	83 ec 18             	sub    esp,0x18
c00100a3:	68 24 48 02 c0       	push   0xc0024824
c00100a8:	e8 b6 46 00 00       	call   c0014763 <Krnl::panic(char const*)>
c00100ad:	83 c8 ff             	or     eax,0xffffffff
c00100b0:	83 c4 1c             	add    esp,0x1c
c00100b3:	c3                   	ret    

c00100b4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00100b4:	53                   	push   ebx
c00100b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00100b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100c1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00100c7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00100cd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00100d3:	77 10                	ja     c00100e5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00100d5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00100db:	89 d3                	mov    ebx,edx
c00100dd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00100e3:	72 05                	jb     c00100ea <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00100e5:	83 c8 ff             	or     eax,0xffffffff
c00100e8:	89 c2                	mov    edx,eax
c00100ea:	5b                   	pop    ebx
c00100eb:	c3                   	ret    

c00100ec <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00100ec:	56                   	push   esi
c00100ed:	83 c8 ff             	or     eax,0xffffffff
c00100f0:	53                   	push   ebx
c00100f1:	89 c2                	mov    edx,eax
c00100f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00100f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00100fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010105:	77 27                	ja     c001012e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010107:	89 d8                	mov    eax,ebx
c0010109:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001010f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010115:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001011a:	89 c2                	mov    edx,eax
c001011c:	73 10                	jae    c001012e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001011e:	89 c8                	mov    eax,ecx
c0010120:	89 da                	mov    edx,ebx
c0010122:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010128:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001012e:	5b                   	pop    ebx
c001012f:	5e                   	pop    esi
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010132:	83 ec 1c             	sub    esp,0x1c
c0010135:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001013d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010141:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010145:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010149:	89 04 24             	mov    DWORD PTR [esp],eax
c001014c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010158:	83 ec 08             	sub    esp,0x8
c001015b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001015f:	50                   	push   eax
c0010160:	e8 29 e1 ff ff       	call   c000e28e <Device::Device(char const*)>
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	ba 70 48 02 c0       	mov    edx,0xc0024870
c001016d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010171:	89 10                	mov    DWORD PTR [eax],edx
c0010173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010177:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001017e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010182:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001018d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010197:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001019b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001019f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101a3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00101a9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00101af:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00101b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00101b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00101ba:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00101c0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00101c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101ce:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00101d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101d8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00101e2:	90                   	nop
c00101e3:	83 c4 1c             	add    esp,0x1c
c00101e6:	c3                   	ret    
c00101e7:	90                   	nop

c00101e8 <LogicalDisk::assignDriveLetter()>:
c00101e8:	55                   	push   ebp
c00101e9:	57                   	push   edi
c00101ea:	56                   	push   esi
c00101eb:	53                   	push   ebx
c00101ec:	83 ec 14             	sub    esp,0x14
c00101ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f3:	8b 3d 40 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027a40
c00101f9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00101ff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010203:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010209:	8b 3d 44 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027a44
c001020f:	3c 01                	cmp    al,0x1
c0010211:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010215:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010219:	19 c0                	sbb    eax,eax
c001021b:	83 e0 02             	and    eax,0x2
c001021e:	83 c0 41             	add    eax,0x41
c0010221:	0f be e8             	movsx  ebp,al
c0010224:	3c 43                	cmp    al,0x43
c0010226:	75 10                	jne    c0010238 <LogicalDisk::assignDriveLetter()+0x50>
c0010228:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001022f:	75 5d                	jne    c001028e <LogicalDisk::assignDriveLetter()+0xa6>
c0010231:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010236:	75 56                	jne    c001028e <LogicalDisk::assignDriveLetter()+0xa6>
c0010238:	8d 75 bf             	lea    esi,[ebp-0x41]
c001023b:	ba 01 00 00 00       	mov    edx,0x1
c0010240:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010244:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010248:	d3 e2                	shl    edx,cl
c001024a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024e:	89 d7                	mov    edi,edx
c0010250:	89 d6                	mov    esi,edx
c0010252:	c1 ff 1f             	sar    edi,0x1f
c0010255:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010259:	21 f9                	and    ecx,edi
c001025b:	09 d1                	or     ecx,edx
c001025d:	75 2f                	jne    c001028e <LogicalDisk::assignDriveLetter()+0xa6>
c001025f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010263:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010267:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001026d:	09 f2                	or     edx,esi
c001026f:	89 15 40 7a 02 c0    	mov    DWORD PTR ds:0xc0027a40,edx
c0010275:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010279:	09 fa                	or     edx,edi
c001027b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001027f:	89 15 44 7a 02 c0    	mov    DWORD PTR ds:0xc0027a44,edx
c0010285:	89 1c bd 60 7a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd85a0],ebx
c001028c:	eb 08                	jmp    c0010296 <LogicalDisk::assignDriveLetter()+0xae>
c001028e:	45                   	inc    ebp
c001028f:	40                   	inc    eax
c0010290:	3c 5b                	cmp    al,0x5b
c0010292:	75 90                	jne    c0010224 <LogicalDisk::assignDriveLetter()+0x3c>
c0010294:	31 c0                	xor    eax,eax
c0010296:	83 c4 14             	add    esp,0x14
c0010299:	5b                   	pop    ebx
c001029a:	5e                   	pop    esi
c001029b:	5f                   	pop    edi
c001029c:	5d                   	pop    ebp
c001029d:	c3                   	ret    

c001029e <LogicalDisk::mount()>:
c001029e:	56                   	push   esi
c001029f:	53                   	push   ebx
c00102a0:	53                   	push   ebx
c00102a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102a5:	8b 1d d4 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d4
c00102ab:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00102b5:	85 db                	test   ebx,ebx
c00102b7:	74 27                	je     c00102e0 <LogicalDisk::mount()+0x42>
c00102b9:	51                   	push   ecx
c00102ba:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00102c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00102c3:	83 e8 41             	sub    eax,0x41
c00102c6:	50                   	push   eax
c00102c7:	56                   	push   esi
c00102c8:	53                   	push   ebx
c00102c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	84 c0                	test   al,al
c00102d1:	74 08                	je     c00102db <LogicalDisk::mount()+0x3d>
c00102d3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00102d9:	eb 07                	jmp    c00102e2 <LogicalDisk::mount()+0x44>
c00102db:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00102de:	eb d5                	jmp    c00102b5 <LogicalDisk::mount()+0x17>
c00102e0:	31 c0                	xor    eax,eax
c00102e2:	5a                   	pop    edx
c00102e3:	5b                   	pop    ebx
c00102e4:	5e                   	pop    esi
c00102e5:	c3                   	ret    

c00102e6 <LogicalDisk::unmount()>:
c00102e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ea:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <LogicalDisk::eject()>:
c00102f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010300:	8b 10                	mov    edx,DWORD PTR [eax]
c0010302:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010306:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010309:	90                   	nop

c001030a <LogicalDisk::unassignDriveLetter()>:
c001030a:	57                   	push   edi
c001030b:	56                   	push   esi
c001030c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010310:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010317:	84 c9                	test   cl,cl
c0010319:	75 0f                	jne    c001032a <LogicalDisk::unassignDriveLetter()+0x20>
c001031b:	c7 44 24 0c 48 48 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024848
c0010323:	5e                   	pop    esi
c0010324:	5f                   	pop    edi
c0010325:	e9 39 44 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c001032a:	83 e9 41             	sub    ecx,0x41
c001032d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010334:	b8 01 00 00 00       	mov    eax,0x1
c0010339:	c7 04 8d 60 7a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd85a0],0x0
c0010344:	d3 e0                	shl    eax,cl
c0010346:	89 c7                	mov    edi,eax
c0010348:	f7 d0                	not    eax
c001034a:	c1 ff 1f             	sar    edi,0x1f
c001034d:	21 05 40 7a 02 c0    	and    DWORD PTR ds:0xc0027a40,eax
c0010353:	89 fe                	mov    esi,edi
c0010355:	f7 d6                	not    esi
c0010357:	21 35 44 7a 02 c0    	and    DWORD PTR ds:0xc0027a44,esi
c001035d:	5e                   	pop    esi
c001035e:	5f                   	pop    edi
c001035f:	c3                   	ret    

c0010360 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010360:	57                   	push   edi
c0010361:	56                   	push   esi
c0010362:	53                   	push   ebx
c0010363:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001036b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001036f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010373:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010379:	77 41                	ja     c00103bc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001037b:	99                   	cdq    
c001037c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010382:	01 c8                	add    eax,ecx
c0010384:	11 da                	adc    edx,ebx
c0010386:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001038c:	19 d7                	sbb    edi,edx
c001038e:	72 33                	jb     c00103c3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010390:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010396:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001039c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00103a0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00103a4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00103aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00103b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00103b4:	5b                   	pop    ebx
c00103b5:	5e                   	pop    esi
c00103b6:	5f                   	pop    edi
c00103b7:	e9 e2 0a 00 00       	jmp    c0010e9e <VCache::read(unsigned long long, int, void*)>
c00103bc:	b8 05 00 00 00       	mov    eax,0x5
c00103c1:	eb 05                	jmp    c00103c8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00103c3:	b8 07 00 00 00       	mov    eax,0x7
c00103c8:	5b                   	pop    ebx
c00103c9:	5e                   	pop    esi
c00103ca:	5f                   	pop    edi
c00103cb:	c3                   	ret    

c00103cc <LogicalDisk::write(unsigned long long, int, void*)>:
c00103cc:	57                   	push   edi
c00103cd:	56                   	push   esi
c00103ce:	53                   	push   ebx
c00103cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00103e5:	77 41                	ja     c0010428 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00103e7:	99                   	cdq    
c00103e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00103ee:	01 c8                	add    eax,ecx
c00103f0:	11 da                	adc    edx,ebx
c00103f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00103f8:	19 d7                	sbb    edi,edx
c00103fa:	72 33                	jb     c001042f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00103fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010402:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010408:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001040c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010410:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010416:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001041c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010420:	5b                   	pop    ebx
c0010421:	5e                   	pop    esi
c0010422:	5f                   	pop    edi
c0010423:	e9 7c 09 00 00       	jmp    c0010da4 <VCache::write(unsigned long long, int, void*)>
c0010428:	b8 05 00 00 00       	mov    eax,0x5
c001042d:	eb 05                	jmp    c0010434 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001042f:	b8 07 00 00 00       	mov    eax,0x7
c0010434:	5b                   	pop    ebx
c0010435:	5e                   	pop    esi
c0010436:	5f                   	pop    edi
c0010437:	c3                   	ret    

c0010438 <Mouse::Mouse(char const*)>:
c0010438:	83 ec 0c             	sub    esp,0xc
c001043b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001043f:	83 ec 08             	sub    esp,0x8
c0010442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010446:	50                   	push   eax
c0010447:	e8 42 de ff ff       	call   c000e28e <Device::Device(char const*)>
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	ba 9c 48 02 c0       	mov    edx,0xc002489c
c0010454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010458:	89 10                	mov    DWORD PTR [eax],edx
c001045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001045e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010468:	90                   	nop
c0010469:	83 c4 0c             	add    esp,0xc
c001046c:	c3                   	ret    
c001046d:	90                   	nop
c001046e:	66 90                	xchg   ax,ax

c0010470 <Mouse::~Mouse()>:
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	ba 9c 48 02 c0       	mov    edx,0xc002489c
c0010478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047c:	89 10                	mov    DWORD PTR [eax],edx
c001047e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010482:	83 ec 0c             	sub    esp,0xc
c0010485:	50                   	push   eax
c0010486:	e8 cd da ff ff       	call   c000df58 <Device::~Device()>
c001048b:	83 c4 10             	add    esp,0x10
c001048e:	90                   	nop
c001048f:	83 c4 0c             	add    esp,0xc
c0010492:	c3                   	ret    
c0010493:	90                   	nop

c0010494 <Mouse::~Mouse()>:
c0010494:	83 ec 0c             	sub    esp,0xc
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049e:	e8 cd ff ff ff       	call   c0010470 <Mouse::~Mouse()>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	83 ec 08             	sub    esp,0x8
c00104a9:	68 58 01 00 00       	push   0x158
c00104ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b2:	e8 ab c6 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c00104b7:	83 c4 10             	add    esp,0x10
c00104ba:	83 c4 0c             	add    esp,0xc
c00104bd:	c3                   	ret    

c00104be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00104be:	55                   	push   ebp
c00104bf:	57                   	push   edi
c00104c0:	56                   	push   esi
c00104c1:	53                   	push   ebx
c00104c2:	81 ec 28 01 00 00    	sub    esp,0x128
c00104c8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00104cf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00104d6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00104dd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00104e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00104e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00104ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00104f3:	e8 92 de ff ff       	call   c000e38a <Device::getName()>
c00104f8:	5a                   	pop    edx
c00104f9:	59                   	pop    ecx
c00104fa:	50                   	push   eax
c00104fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00104ff:	55                   	push   ebp
c0010500:	e8 3b 02 ff ff       	call   c0000740 <strcpy>
c0010505:	5b                   	pop    ebx
c0010506:	58                   	pop    eax
c0010507:	68 c0 48 02 c0       	push   0xc00248c0
c001050c:	55                   	push   ebp
c001050d:	e8 6e 03 ff ff       	call   c0000880 <strcat>
c0010512:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010519:	e8 a5 94 ff ff       	call   c00099c3 <malloc>
c001051e:	83 c4 0c             	add    esp,0xc
c0010521:	89 c3                	mov    ebx,eax
c0010523:	57                   	push   edi
c0010524:	56                   	push   esi
c0010525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010529:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001052d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010534:	55                   	push   ebp
c0010535:	50                   	push   eax
c0010536:	e8 f7 fb ff ff       	call   c0010132 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001053b:	83 c4 14             	add    esp,0x14
c001053e:	53                   	push   ebx
c001053f:	e8 a4 fc ff ff       	call   c00101e8 <LogicalDisk::assignDriveLetter()>
c0010544:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010547:	e8 52 fd ff ff       	call   c001029e <LogicalDisk::mount()>
c001054c:	58                   	pop    eax
c001054d:	5a                   	pop    edx
c001054e:	53                   	push   ebx
c001054f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010556:	e8 2f db ff ff       	call   c000e08a <Device::addChild(Device*)>
c001055b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010561:	5b                   	pop    ebx
c0010562:	5e                   	pop    esi
c0010563:	5f                   	pop    edi
c0010564:	5d                   	pop    ebp
c0010565:	c3                   	ret    

c0010566 <createPartitionsForDisk(PhysicalDisk*)>:
c0010566:	55                   	push   ebp
c0010567:	57                   	push   edi
c0010568:	56                   	push   esi
c0010569:	53                   	push   ebx
c001056a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010570:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010577:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001057d:	3d 00 02 00 00       	cmp    eax,0x200
c0010582:	74 27                	je     c00105ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010584:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001058a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010590:	83 ec 10             	sub    esp,0x10
c0010593:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010597:	99                   	cdq    
c0010598:	c1 e6 0a             	shl    esi,0xa
c001059b:	52                   	push   edx
c001059c:	89 fd                	mov    ebp,edi
c001059e:	50                   	push   eax
c001059f:	55                   	push   ebp
c00105a0:	56                   	push   esi
c00105a1:	e8 9e 19 01 00       	call   c0021f44 <__udivdi3>
c00105a6:	e9 b1 00 00 00       	jmp    c001065c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00105ab:	83 ec 0c             	sub    esp,0xc
c00105ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00105b4:	56                   	push   esi
c00105b5:	6a 01                	push   0x1
c00105b7:	6a 00                	push   0x0
c00105b9:	6a 00                	push   0x0
c00105bb:	53                   	push   ebx
c00105bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00105bf:	83 c4 20             	add    esp,0x20
c00105c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00105ca:	75 0a                	jne    c00105d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00105cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00105d4:	74 2c                	je     c0010602 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00105d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00105dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00105e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00105ef:	89 f7                	mov    edi,esi
c00105f1:	c1 e0 0a             	shl    eax,0xa
c00105f4:	c1 ff 1f             	sar    edi,0x1f
c00105f7:	57                   	push   edi
c00105f8:	56                   	push   esi
c00105f9:	52                   	push   edx
c00105fa:	50                   	push   eax
c00105fb:	e8 44 19 01 00       	call   c0021f44 <__udivdi3>
c0010600:	eb 5a                	jmp    c001065c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010602:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010609:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010610:	83 e1 7f             	and    ecx,0x7f
c0010613:	83 e0 7f             	and    eax,0x7f
c0010616:	01 c1                	add    ecx,eax
c0010618:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001061f:	83 e0 7f             	and    eax,0x7f
c0010622:	01 c1                	add    ecx,eax
c0010624:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001062b:	83 e0 7f             	and    eax,0x7f
c001062e:	00 c1                	add    cl,al
c0010630:	74 41                	je     c0010673 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010632:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010638:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001063e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010644:	83 ec 10             	sub    esp,0x10
c0010647:	0f a4 c2 0a          	shld   edx,eax,0xa
c001064b:	89 f7                	mov    edi,esi
c001064d:	c1 e0 0a             	shl    eax,0xa
c0010650:	c1 ff 1f             	sar    edi,0x1f
c0010653:	57                   	push   edi
c0010654:	56                   	push   esi
c0010655:	52                   	push   edx
c0010656:	50                   	push   eax
c0010657:	e8 e8 18 01 00       	call   c0021f44 <__udivdi3>
c001065c:	83 c4 14             	add    esp,0x14
c001065f:	52                   	push   edx
c0010660:	50                   	push   eax
c0010661:	6a 00                	push   0x0
c0010663:	6a 00                	push   0x0
c0010665:	53                   	push   ebx
c0010666:	e8 53 fe ff ff       	call   c00104be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001066b:	83 c4 20             	add    esp,0x20
c001066e:	e9 79 01 00 00       	jmp    c00107ec <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010673:	89 f0                	mov    eax,esi
c0010675:	31 f6                	xor    esi,esi
c0010677:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001067e:	75 02                	jne    c0010682 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010680:	89 f1                	mov    ecx,esi
c0010682:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010689:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010690:	c1 e2 08             	shl    edx,0x8
c0010693:	c1 e7 10             	shl    edi,0x10
c0010696:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001069e:	09 fa                	or     edx,edi
c00106a0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00106a8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00106af:	83 c0 10             	add    eax,0x10
c00106b2:	09 fa                	or     edx,edi
c00106b4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00106bb:	c1 e7 18             	shl    edi,0x18
c00106be:	09 fa                	or     edx,edi
c00106c0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00106c7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00106cb:	c1 e7 10             	shl    edi,0x10
c00106ce:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00106d5:	c1 e2 08             	shl    edx,0x8
c00106d8:	09 fa                	or     edx,edi
c00106da:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00106e1:	09 fa                	or     edx,edi
c00106e3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00106ea:	c1 e7 18             	shl    edi,0x18
c00106ed:	09 fa                	or     edx,edi
c00106ef:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00106f3:	46                   	inc    esi
c00106f4:	83 fe 04             	cmp    esi,0x4
c00106f7:	0f 85 7a ff ff ff    	jne    c0010677 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00106fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010701:	83 f0 01             	xor    eax,0x1
c0010704:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010708:	75 57                	jne    c0010761 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001070a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001070e:	83 f0 01             	xor    eax,0x1
c0010711:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010715:	75 4a                	jne    c0010761 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010717:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001071b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010723:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001072b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010731:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010737:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001073d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010741:	89 f7                	mov    edi,esi
c0010743:	c1 e0 0a             	shl    eax,0xa
c0010746:	c1 ff 1f             	sar    edi,0x1f
c0010749:	57                   	push   edi
c001074a:	56                   	push   esi
c001074b:	52                   	push   edx
c001074c:	50                   	push   eax
c001074d:	e8 f2 17 01 00       	call   c0021f44 <__udivdi3>
c0010752:	83 c4 10             	add    esp,0x10
c0010755:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010759:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001075d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010761:	84 c9                	test   cl,cl
c0010763:	74 53                	je     c00107b8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010765:	0f b6 c9             	movzx  ecx,cl
c0010768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010770:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010774:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010778:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001077c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010780:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010784:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010788:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001078c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010794:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010798:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001079c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00107a0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00107a4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00107a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00107ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00107b0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00107b4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00107b8:	31 ed                	xor    ebp,ebp
c00107ba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00107be:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00107c2:	89 f8                	mov    eax,edi
c00107c4:	09 f0                	or     eax,esi
c00107c6:	74 1e                	je     c00107e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00107c8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00107cc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00107d0:	89 d1                	mov    ecx,edx
c00107d2:	09 c1                	or     ecx,eax
c00107d4:	74 10                	je     c00107e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00107d6:	83 ec 0c             	sub    esp,0xc
c00107d9:	57                   	push   edi
c00107da:	56                   	push   esi
c00107db:	52                   	push   edx
c00107dc:	50                   	push   eax
c00107dd:	53                   	push   ebx
c00107de:	e8 db fc ff ff       	call   c00104be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00107e3:	83 c4 20             	add    esp,0x20
c00107e6:	45                   	inc    ebp
c00107e7:	83 fd 04             	cmp    ebp,0x4
c00107ea:	75 ce                	jne    c00107ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00107ec:	81 c4 5c 02 00 00    	add    esp,0x25c
c00107f2:	5b                   	pop    ebx
c00107f3:	5e                   	pop    esi
c00107f4:	5f                   	pop    edi
c00107f5:	5d                   	pop    ebp
c00107f6:	c3                   	ret    
c00107f7:	90                   	nop

c00107f8 <Serial::Serial(char const*)>:
c00107f8:	83 ec 0c             	sub    esp,0xc
c00107fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ff:	83 ec 08             	sub    esp,0x8
c0010802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010806:	50                   	push   eax
c0010807:	e8 82 da ff ff       	call   c000e28e <Device::Device(char const*)>
c001080c:	83 c4 10             	add    esp,0x10
c001080f:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c0010814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010818:	89 10                	mov    DWORD PTR [eax],edx
c001081a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010828:	90                   	nop
c0010829:	83 c4 0c             	add    esp,0xc
c001082c:	c3                   	ret    
c001082d:	90                   	nop
c001082e:	66 90                	xchg   ax,ax

c0010830 <Serial::~Serial()>:
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c0010838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083c:	89 10                	mov    DWORD PTR [eax],edx
c001083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010842:	83 ec 0c             	sub    esp,0xc
c0010845:	50                   	push   eax
c0010846:	e8 0d d7 ff ff       	call   c000df58 <Device::~Device()>
c001084b:	83 c4 10             	add    esp,0x10
c001084e:	90                   	nop
c001084f:	83 c4 0c             	add    esp,0xc
c0010852:	c3                   	ret    
c0010853:	90                   	nop

c0010854 <Serial::~Serial()>:
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	83 ec 0c             	sub    esp,0xc
c001085a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001085e:	e8 cd ff ff ff       	call   c0010830 <Serial::~Serial()>
c0010863:	83 c4 10             	add    esp,0x10
c0010866:	83 ec 08             	sub    esp,0x8
c0010869:	68 58 01 00 00       	push   0x158
c001086e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010872:	e8 eb c2 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	83 c4 0c             	add    esp,0xc
c001087d:	c3                   	ret    
c001087e:	66 90                	xchg   ax,ax

c0010880 <Timer::Timer(char const*)>:
c0010880:	83 ec 0c             	sub    esp,0xc
c0010883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010887:	83 ec 08             	sub    esp,0x8
c001088a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001088e:	50                   	push   eax
c001088f:	e8 fa d9 ff ff       	call   c000e28e <Device::Device(char const*)>
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	ba 18 49 02 c0       	mov    edx,0xc0024918
c001089c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a0:	89 10                	mov    DWORD PTR [eax],edx
c00108a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00108b0:	90                   	nop
c00108b1:	83 c4 0c             	add    esp,0xc
c00108b4:	c3                   	ret    
c00108b5:	90                   	nop
c00108b6:	66 90                	xchg   ax,ax

c00108b8 <Timer::~Timer()>:
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	ba 18 49 02 c0       	mov    edx,0xc0024918
c00108c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c4:	89 10                	mov    DWORD PTR [eax],edx
c00108c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	50                   	push   eax
c00108ce:	e8 85 d6 ff ff       	call   c000df58 <Device::~Device()>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	90                   	nop
c00108d7:	83 c4 0c             	add    esp,0xc
c00108da:	c3                   	ret    
c00108db:	90                   	nop

c00108dc <Timer::~Timer()>:
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	83 ec 0c             	sub    esp,0xc
c00108e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e6:	e8 cd ff ff ff       	call   c00108b8 <Timer::~Timer()>
c00108eb:	83 c4 10             	add    esp,0x10
c00108ee:	83 ec 08             	sub    esp,0x8
c00108f1:	68 5c 01 00 00       	push   0x15c
c00108f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fa:	e8 63 c2 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c00108ff:	83 c4 10             	add    esp,0x10
c0010902:	83 c4 0c             	add    esp,0xc
c0010905:	c3                   	ret    

c0010906 <Timer::read()>:
c0010906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010910:	c3                   	ret    

c0010911 <timerHandler(unsigned int)>:
c0010911:	56                   	push   esi
c0010912:	53                   	push   ebx
c0010913:	51                   	push   ecx
c0010914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010918:	01 05 cc 7a 02 c0    	add    DWORD PTR ds:0xc0027acc,eax
c001091e:	80 3d ad 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274ad,0x0
c0010925:	0f 84 49 01 00 00    	je     c0010a74 <timerHandler(unsigned int)+0x163>
c001092b:	fa                   	cli    
c001092c:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	ff 05 64 89 02 c0    	inc    DWORD PTR ds:0xc0028964
c001093b:	68 78 89 02 c0       	push   0xc0028978
c0010940:	e8 cf 1b 01 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	84 c0                	test   al,al
c001094a:	0f 85 a0 00 00 00    	jne    c00109f0 <timerHandler(unsigned int)+0xdf>
c0010950:	83 ec 0c             	sub    esp,0xc
c0010953:	68 78 89 02 c0       	push   0xc0028978
c0010958:	e8 d3 1b 01 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001095d:	83 c4 10             	add    esp,0x10
c0010960:	89 c6                	mov    esi,eax
c0010962:	66 90                	xchg   ax,ax
c0010964:	83 ec 0c             	sub    esp,0xc
c0010967:	68 78 89 02 c0       	push   0xc0028978
c001096c:	e8 bf 1b 01 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010971:	c7 04 24 78 89 02 c0 	mov    DWORD PTR [esp],0xc0028978
c0010978:	89 c3                	mov    ebx,eax
c001097a:	e8 b9 1b 01 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001097f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	3b 05 cc 7a 02 c0    	cmp    eax,DWORD PTR ds:0xc0027acc
c001098b:	77 23                	ja     c00109b0 <timerHandler(unsigned int)+0x9f>
c001098d:	83 ec 0c             	sub    esp,0xc
c0010990:	53                   	push   ebx
c0010991:	e8 5a 7e 00 00       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	39 de                	cmp    esi,ebx
c001099b:	75 27                	jne    c00109c4 <timerHandler(unsigned int)+0xb3>
c001099d:	83 ec 0c             	sub    esp,0xc
c00109a0:	68 78 89 02 c0       	push   0xc0028978
c00109a5:	e8 86 1b 01 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00109aa:	89 c6                	mov    esi,eax
c00109ac:	eb 12                	jmp    c00109c0 <timerHandler(unsigned int)+0xaf>
c00109ae:	66 90                	xchg   ax,ax
c00109b0:	52                   	push   edx
c00109b1:	52                   	push   edx
c00109b2:	53                   	push   ebx
c00109b3:	68 78 89 02 c0       	push   0xc0028978
c00109b8:	e8 33 1c 01 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00109bd:	8d 76 00             	lea    esi,[esi+0x0]
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	90                   	nop
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	68 78 89 02 c0       	push   0xc0028978
c00109cc:	e8 43 1b 01 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00109d1:	83 c4 10             	add    esp,0x10
c00109d4:	84 c0                	test   al,al
c00109d6:	75 18                	jne    c00109f0 <timerHandler(unsigned int)+0xdf>
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	68 78 89 02 c0       	push   0xc0028978
c00109e0:	e8 4b 1b 01 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	39 f0                	cmp    eax,esi
c00109ea:	0f 85 74 ff ff ff    	jne    c0010964 <timerHandler(unsigned int)+0x53>
c00109f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109f5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c00109f9:	74 41                	je     c0010a3c <timerHandler(unsigned int)+0x12b>
c00109fb:	80 3d ac 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274ac,0x0
c0010a02:	74 38                	je     c0010a3c <timerHandler(unsigned int)+0x12b>
c0010a04:	fa                   	cli    
c0010a05:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0010a0b:	a1 cc 7a 02 c0       	mov    eax,ds:0xc0027acc
c0010a10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a16:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010a19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a1f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010a22:	72 08                	jb     c0010a2c <timerHandler(unsigned int)+0x11b>
c0010a24:	e8 0b 79 00 00       	call   c0018334 <schedule()>
c0010a29:	8d 76 00             	lea    esi,[esi+0x0]
c0010a2c:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0010a31:	48                   	dec    eax
c0010a32:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0010a37:	75 03                	jne    c0010a3c <timerHandler(unsigned int)+0x12b>
c0010a39:	fb                   	sti    
c0010a3a:	66 90                	xchg   ax,ax
c0010a3c:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0010a41:	48                   	dec    eax
c0010a42:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c0010a47:	75 1b                	jne    c0010a64 <timerHandler(unsigned int)+0x153>
c0010a49:	83 3d 60 89 02 c0 00 	cmp    DWORD PTR ds:0xc0028960,0x0
c0010a50:	74 12                	je     c0010a64 <timerHandler(unsigned int)+0x153>
c0010a52:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0010a5c:	e8 d3 78 00 00       	call   c0018334 <schedule()>
c0010a61:	8d 76 00             	lea    esi,[esi+0x0]
c0010a64:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0010a69:	48                   	dec    eax
c0010a6a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0010a6f:	75 03                	jne    c0010a74 <timerHandler(unsigned int)+0x163>
c0010a71:	fb                   	sti    
c0010a72:	66 90                	xchg   ax,ax
c0010a74:	58                   	pop    eax
c0010a75:	5b                   	pop    ebx
c0010a76:	5e                   	pop    esi
c0010a77:	c3                   	ret    

c0010a78 <setupTimer(int)>:
c0010a78:	57                   	push   edi
c0010a79:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0010a7e:	56                   	push   esi
c0010a7f:	53                   	push   ebx
c0010a80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a8a:	83 ec 0c             	sub    esp,0xc
c0010a8d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010a93:	e8 f2 d8 ff ff       	call   c000e38a <Device::getName()>
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010a9e:	0f 85 94 00 00 00    	jne    c0010b38 <setupTimer(int)+0xc0>
c0010aa4:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0010aa9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010ab0:	0f 84 82 00 00 00    	je     c0010b38 <setupTimer(int)+0xc0>
c0010ab6:	83 ec 0c             	sub    esp,0xc
c0010ab9:	68 5c 01 00 00       	push   0x15c
c0010abe:	e8 00 8f ff ff       	call   c00099c3 <malloc>
c0010ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ac6:	89 c3                	mov    ebx,eax
c0010ac8:	e8 4b 10 01 00       	call   c0021b18 <PIT::PIT()>
c0010acd:	59                   	pop    ecx
c0010ace:	5f                   	pop    edi
c0010acf:	53                   	push   ebx
c0010ad0:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c0010ad6:	e8 af d5 ff ff       	call   c000e08a <Device::addChild(Device*)>
c0010adb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010add:	6a 00                	push   0x0
c0010adf:	6a 00                	push   0x0
c0010ae1:	56                   	push   esi
c0010ae2:	53                   	push   ebx
c0010ae3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ae6:	83 c4 14             	add    esp,0x14
c0010ae9:	68 60 01 00 00       	push   0x160
c0010aee:	e8 d0 8e ff ff       	call   c00099c3 <malloc>
c0010af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010af6:	89 c7                	mov    edi,eax
c0010af8:	e8 cf 0e 01 00       	call   c00219cc <APICTimer::APICTimer()>
c0010afd:	6a 00                	push   0x0
c0010aff:	6a 00                	push   0x0
c0010b01:	56                   	push   esi
c0010b02:	57                   	push   edi
c0010b03:	e8 c4 0d 01 00       	call   c00218cc <APICTimer::open(int, int, void*)>
c0010b08:	83 c4 20             	add    esp,0x20
c0010b0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b0d:	6a 00                	push   0x0
c0010b0f:	6a 00                	push   0x0
c0010b11:	6a 00                	push   0x0
c0010b13:	53                   	push   ebx
c0010b14:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b17:	58                   	pop    eax
c0010b18:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0010b1d:	5a                   	pop    edx
c0010b1e:	57                   	push   edi
c0010b1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b25:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b2b:	e8 5a d5 ff ff       	call   c000e08a <Device::addChild(Device*)>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	eb 37                	jmp    c0010b6c <setupTimer(int)+0xf4>
c0010b35:	8d 76 00             	lea    esi,[esi+0x0]
c0010b38:	83 ec 0c             	sub    esp,0xc
c0010b3b:	68 5c 01 00 00       	push   0x15c
c0010b40:	e8 7e 8e ff ff       	call   c00099c3 <malloc>
c0010b45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b48:	89 c3                	mov    ebx,eax
c0010b4a:	e8 c9 0f 01 00       	call   c0021b18 <PIT::PIT()>
c0010b4f:	58                   	pop    eax
c0010b50:	5a                   	pop    edx
c0010b51:	53                   	push   ebx
c0010b52:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c0010b58:	e8 2d d5 ff ff       	call   c000e08a <Device::addChild(Device*)>
c0010b5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b5f:	6a 00                	push   0x0
c0010b61:	6a 00                	push   0x0
c0010b63:	56                   	push   esi
c0010b64:	53                   	push   ebx
c0010b65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b68:	83 c4 20             	add    esp,0x20
c0010b6b:	90                   	nop
c0010b6c:	89 d8                	mov    eax,ebx
c0010b6e:	5b                   	pop    ebx
c0010b6f:	5e                   	pop    esi
c0010b70:	5f                   	pop    edi
c0010b71:	c3                   	ret    
c0010b72:	66 90                	xchg   ax,ax

c0010b74 <VCache::VCache(PhysicalDisk*)>:
c0010b74:	53                   	push   ebx
c0010b75:	83 ec 18             	sub    esp,0x18
c0010b78:	ba 48 49 02 c0       	mov    edx,0xc0024948
c0010b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b81:	89 10                	mov    DWORD PTR [eax],edx
c0010b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b87:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b92:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b9d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010ba4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010baf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010bb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bcc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bd4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010bdb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010be6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bfe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010c05:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010c0d:	83 ec 0c             	sub    esp,0xc
c0010c10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c14:	e8 aa 8d ff ff       	call   c00099c3 <malloc>
c0010c19:	83 c4 10             	add    esp,0x10
c0010c1c:	89 c3                	mov    ebx,eax
c0010c1e:	83 ec 0c             	sub    esp,0xc
c0010c21:	53                   	push   ebx
c0010c22:	e8 dd 74 00 00       	call   c0018104 <Mutex::Mutex()>
c0010c27:	83 c4 10             	add    esp,0x10
c0010c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c2e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c40:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010c47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c5c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010c6c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010c6f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c76:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010c7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010c84:	05 00 01 00 00       	add    eax,0x100
c0010c89:	c1 e0 04             	shl    eax,0x4
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	50                   	push   eax
c0010c90:	e8 2e 8d ff ff       	call   c00099c3 <malloc>
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	89 c2                	mov    edx,eax
c0010c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010cbe:	c1 e0 06             	shl    eax,0x6
c0010cc1:	83 ec 0c             	sub    esp,0xc
c0010cc4:	50                   	push   eax
c0010cc5:	e8 f9 8c ff ff       	call   c00099c3 <malloc>
c0010cca:	83 c4 10             	add    esp,0x10
c0010ccd:	89 c2                	mov    edx,eax
c0010ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cd3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010cd6:	90                   	nop
c0010cd7:	83 c4 18             	add    esp,0x18
c0010cda:	5b                   	pop    ebx
c0010cdb:	c3                   	ret    

c0010cdc <VCache::invalidateReadBuffer()>:
c0010cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010ce6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010cea:	c3                   	ret    
c0010ceb:	90                   	nop

c0010cec <VCache::writeWriteBuffer()>:
c0010cec:	53                   	push   ebx
c0010ced:	83 ec 14             	sub    esp,0x14
c0010cf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010cf4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010cfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010cff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010d02:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d05:	50                   	push   eax
c0010d06:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d09:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010d10:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010d17:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010d1b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010d22:	83 c4 28             	add    esp,0x28
c0010d25:	5b                   	pop    ebx
c0010d26:	c3                   	ret    
c0010d27:	90                   	nop

c0010d28 <VCache::~VCache()>:
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	ba 48 49 02 c0       	mov    edx,0xc0024948
c0010d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d34:	89 10                	mov    DWORD PTR [eax],edx
c0010d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010d3d:	84 c0                	test   al,al
c0010d3f:	74 0f                	je     c0010d50 <VCache::~VCache()+0x28>
c0010d41:	83 ec 0c             	sub    esp,0xc
c0010d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d48:	e8 9f ff ff ff       	call   c0010cec <VCache::writeWriteBuffer()>
c0010d4d:	83 c4 10             	add    esp,0x10
c0010d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010d57:	83 ec 0c             	sub    esp,0xc
c0010d5a:	50                   	push   eax
c0010d5b:	e8 73 8c ff ff       	call   c00099d3 <free>
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	50                   	push   eax
c0010d6e:	e8 60 8c ff ff       	call   c00099d3 <free>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	90                   	nop
c0010d77:	83 c4 0c             	add    esp,0xc
c0010d7a:	c3                   	ret    
c0010d7b:	90                   	nop

c0010d7c <VCache::~VCache()>:
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d86:	e8 9d ff ff ff       	call   c0010d28 <VCache::~VCache()>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	83 ec 08             	sub    esp,0x8
c0010d91:	6a 44                	push   0x44
c0010d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d97:	e8 c6 bd ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	83 c4 0c             	add    esp,0xc
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <VCache::write(unsigned long long, int, void*)>:
c0010da4:	55                   	push   ebp
c0010da5:	31 c0                	xor    eax,eax
c0010da7:	57                   	push   edi
c0010da8:	56                   	push   esi
c0010da9:	53                   	push   ebx
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010db1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010db5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010db9:	8d 76 00             	lea    esi,[esi+0x0]
c0010dbc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010dc0:	7d 1a                	jge    c0010ddc <VCache::write(unsigned long long, int, void*)+0x38>
c0010dc2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010dc5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010dcb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010dcf:	0f af c8             	imul   ecx,eax
c0010dd2:	01 ca                	add    edx,ecx
c0010dd4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010dd6:	40                   	inc    eax
c0010dd7:	eb e3                	jmp    c0010dbc <VCache::write(unsigned long long, int, void*)+0x18>
c0010dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ddc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010de0:	74 0a                	je     c0010dec <VCache::write(unsigned long long, int, void*)+0x48>
c0010de2:	53                   	push   ebx
c0010de3:	e8 f4 fe ff ff       	call   c0010cdc <VCache::invalidateReadBuffer()>
c0010de8:	58                   	pop    eax
c0010de9:	8d 76 00             	lea    esi,[esi+0x0]
c0010dec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010df0:	74 5e                	je     c0010e50 <VCache::write(unsigned long long, int, void*)+0xac>
c0010df2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010df5:	89 e8                	mov    eax,ebp
c0010df7:	99                   	cdq    
c0010df8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010dfb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010dfe:	89 c1                	mov    ecx,eax
c0010e00:	89 d0                	mov    eax,edx
c0010e02:	31 f1                	xor    ecx,esi
c0010e04:	31 f8                	xor    eax,edi
c0010e06:	09 c1                	or     ecx,eax
c0010e08:	75 3a                	jne    c0010e44 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010e0a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010e0f:	75 33                	jne    c0010e44 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010e11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e14:	89 ef                	mov    edi,ebp
c0010e16:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e1c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e20:	0f af f9             	imul   edi,ecx
c0010e23:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010e26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e28:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e2b:	40                   	inc    eax
c0010e2c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010e2f:	83 f8 40             	cmp    eax,0x40
c0010e32:	75 60                	jne    c0010e94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	53                   	push   ebx
c0010e38:	e8 af fe ff ff       	call   c0010cec <VCache::writeWriteBuffer()>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	eb 52                	jmp    c0010e94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	83 ec 0c             	sub    esp,0xc
c0010e47:	53                   	push   ebx
c0010e48:	e8 9f fe ff ff       	call   c0010cec <VCache::writeWriteBuffer()>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e53:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010e58:	7f 22                	jg     c0010e7c <VCache::write(unsigned long long, int, void*)+0xd8>
c0010e5a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010e5d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010e60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010e64:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010e68:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010e6b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010e6e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e7a:	eb 18                	jmp    c0010e94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e89:	57                   	push   edi
c0010e8a:	56                   	push   esi
c0010e8b:	50                   	push   eax
c0010e8c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010e8f:	83 c4 20             	add    esp,0x20
c0010e92:	66 90                	xchg   ax,ax
c0010e94:	83 c4 0c             	add    esp,0xc
c0010e97:	31 c0                	xor    eax,eax
c0010e99:	5b                   	pop    ebx
c0010e9a:	5e                   	pop    esi
c0010e9b:	5f                   	pop    edi
c0010e9c:	5d                   	pop    ebp
c0010e9d:	c3                   	ret    

c0010e9e <VCache::read(unsigned long long, int, void*)>:
c0010e9e:	55                   	push   ebp
c0010e9f:	31 c0                	xor    eax,eax
c0010ea1:	57                   	push   edi
c0010ea2:	56                   	push   esi
c0010ea3:	53                   	push   ebx
c0010ea4:	83 ec 1c             	sub    esp,0x1c
c0010ea7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010eab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010eaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010eb3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010eb7:	90                   	nop
c0010eb8:	39 e8                	cmp    eax,ebp
c0010eba:	7d 18                	jge    c0010ed4 <VCache::read(unsigned long long, int, void*)+0x36>
c0010ebc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ebf:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010ec5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010ec9:	0f af c8             	imul   ecx,eax
c0010ecc:	01 ca                	add    edx,ecx
c0010ece:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ed0:	40                   	inc    eax
c0010ed1:	eb e5                	jmp    c0010eb8 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010ed3:	90                   	nop
c0010ed4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ed8:	74 0e                	je     c0010ee8 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010eda:	83 ec 0c             	sub    esp,0xc
c0010edd:	53                   	push   ebx
c0010ede:	e8 09 fe ff ff       	call   c0010cec <VCache::writeWriteBuffer()>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	66 90                	xchg   ax,ax
c0010ee8:	83 fd 01             	cmp    ebp,0x1
c0010eeb:	0f 85 87 00 00 00    	jne    c0010f78 <VCache::read(unsigned long long, int, void*)+0xda>
c0010ef1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ef4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ef8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010eff:	75 77                	jne    c0010f78 <VCache::read(unsigned long long, int, void*)+0xda>
c0010f01:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010f04:	89 e9                	mov    ecx,ebp
c0010f06:	f7 d9                	neg    ecx
c0010f08:	89 c8                	mov    eax,ecx
c0010f0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f0e:	c1 f8 1f             	sar    eax,0x1f
c0010f11:	21 f1                	and    ecx,esi
c0010f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f17:	89 c8                	mov    eax,ecx
c0010f19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f1d:	21 f9                	and    ecx,edi
c0010f1f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010f23:	89 ca                	mov    edx,ecx
c0010f25:	74 0d                	je     c0010f34 <VCache::read(unsigned long long, int, void*)+0x96>
c0010f27:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010f2a:	75 08                	jne    c0010f34 <VCache::read(unsigned long long, int, void*)+0x96>
c0010f2c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010f2f:	74 27                	je     c0010f58 <VCache::read(unsigned long long, int, void*)+0xba>
c0010f31:	8d 76 00             	lea    esi,[esi+0x0]
c0010f34:	83 ec 0c             	sub    esp,0xc
c0010f37:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010f3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010f45:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0010f47:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f4a:	55                   	push   ebp
c0010f4b:	52                   	push   edx
c0010f4c:	50                   	push   eax
c0010f4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010f51:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010f54:	83 c4 20             	add    esp,0x20
c0010f57:	90                   	nop
c0010f58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f5b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010f5f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010f68:	48                   	dec    eax
c0010f69:	21 c6                	and    esi,eax
c0010f6b:	0f af f1             	imul   esi,ecx
c0010f6e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f73:	eb 23                	jmp    c0010f98 <VCache::read(unsigned long long, int, void*)+0xfa>
c0010f75:	8d 76 00             	lea    esi,[esi+0x0]
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	53                   	push   ebx
c0010f7c:	e8 5b fd ff ff       	call   c0010cdc <VCache::invalidateReadBuffer()>
c0010f81:	5a                   	pop    edx
c0010f82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f85:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f8b:	55                   	push   ebp
c0010f8c:	57                   	push   edi
c0010f8d:	56                   	push   esi
c0010f8e:	50                   	push   eax
c0010f8f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010f92:	83 c4 20             	add    esp,0x20
c0010f95:	8d 76 00             	lea    esi,[esi+0x0]
c0010f98:	83 c4 1c             	add    esp,0x1c
c0010f9b:	31 c0                	xor    eax,eax
c0010f9d:	5b                   	pop    ebx
c0010f9e:	5e                   	pop    esi
c0010f9f:	5f                   	pop    edi
c0010fa0:	5d                   	pop    ebp
c0010fa1:	c3                   	ret    

c0010fa2 <Video::putrect(int, int, int, int, unsigned int)>:
c0010fa2:	55                   	push   ebp
c0010fa3:	57                   	push   edi
c0010fa4:	56                   	push   esi
c0010fa5:	53                   	push   ebx
c0010fa6:	83 ec 1c             	sub    esp,0x1c
c0010fa9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010fb1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010fb5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010fb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fc1:	01 df                	add    edi,ebx
c0010fc3:	39 fb                	cmp    ebx,edi
c0010fc5:	7d 1f                	jge    c0010fe6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010fc7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010fcb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010fcf:	7d 12                	jge    c0010fe3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010fd1:	8b 16                	mov    edx,DWORD PTR [esi]
c0010fd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010fd7:	53                   	push   ebx
c0010fd8:	55                   	push   ebp
c0010fd9:	45                   	inc    ebp
c0010fda:	56                   	push   esi
c0010fdb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010fde:	83 c4 10             	add    esp,0x10
c0010fe1:	eb e8                	jmp    c0010fcb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010fe3:	43                   	inc    ebx
c0010fe4:	eb dd                	jmp    c0010fc3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010fe6:	83 c4 1c             	add    esp,0x1c
c0010fe9:	5b                   	pop    ebx
c0010fea:	5e                   	pop    esi
c0010feb:	5f                   	pop    edi
c0010fec:	5d                   	pop    ebp
c0010fed:	c3                   	ret    

c0010fee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010fee:	55                   	push   ebp
c0010fef:	57                   	push   edi
c0010ff0:	31 ff                	xor    edi,edi
c0010ff2:	56                   	push   esi
c0010ff3:	53                   	push   ebx
c0010ff4:	83 ec 1c             	sub    esp,0x1c
c0010ff7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010ffb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010fff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011006:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001100b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001100f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011013:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011017:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001101a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001101e:	01 f9                	add    ecx,edi
c0011020:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011024:	7d 2f                	jge    c0011055 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011026:	31 f6                	xor    esi,esi
c0011028:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001102c:	01 f2                	add    edx,esi
c001102e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011032:	7d 1a                	jge    c001104e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011034:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011037:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001103a:	46                   	inc    esi
c001103b:	51                   	push   ecx
c001103c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011040:	52                   	push   edx
c0011041:	55                   	push   ebp
c0011042:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001104c:	eb da                	jmp    c0011028 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001104e:	47                   	inc    edi
c001104f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011053:	eb c5                	jmp    c001101a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011055:	83 c4 1c             	add    esp,0x1c
c0011058:	5b                   	pop    ebx
c0011059:	5e                   	pop    esi
c001105a:	5f                   	pop    edi
c001105b:	5d                   	pop    ebp
c001105c:	c3                   	ret    
c001105d:	90                   	nop

c001105e <Video::blit(unsigned int*, int, int, int, int)>:
c001105e:	55                   	push   ebp
c001105f:	57                   	push   edi
c0011060:	56                   	push   esi
c0011061:	53                   	push   ebx
c0011062:	83 ec 1c             	sub    esp,0x1c
c0011065:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011069:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001106d:	85 c0                	test   eax,eax
c001106f:	79 02                	jns    c0011073 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011071:	31 c0                	xor    eax,eax
c0011073:	c1 e0 02             	shl    eax,0x2
c0011076:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001107a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001107e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011082:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011086:	39 d8                	cmp    eax,ebx
c0011088:	7e 49                	jle    c00110d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001108a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011090:	7c 41                	jl     c00110d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011092:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011096:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001109a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001109e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00110a2:	39 f9                	cmp    ecx,edi
c00110a4:	7e 22                	jle    c00110c8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00110a6:	83 c5 04             	add    ebp,0x4
c00110a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00110af:	7c 14                	jl     c00110c5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00110b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00110b3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00110b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00110ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00110be:	56                   	push   esi
c00110bf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	47                   	inc    edi
c00110c6:	eb d2                	jmp    c001109a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00110c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110cc:	43                   	inc    ebx
c00110cd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00110d1:	eb ab                	jmp    c001107e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00110d3:	83 c4 1c             	add    esp,0x1c
c00110d6:	5b                   	pop    ebx
c00110d7:	5e                   	pop    esi
c00110d8:	5f                   	pop    edi
c00110d9:	5d                   	pop    ebp
c00110da:	c3                   	ret    
c00110db:	90                   	nop

c00110dc <Video::clearScreen(unsigned int)>:
c00110dc:	57                   	push   edi
c00110dd:	56                   	push   esi
c00110de:	53                   	push   ebx
c00110df:	31 db                	xor    ebx,ebx
c00110e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110e5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00110eb:	7e 1f                	jle    c001110c <Video::clearScreen(unsigned int)+0x30>
c00110ed:	31 ff                	xor    edi,edi
c00110ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00110f5:	7e 12                	jle    c0011109 <Video::clearScreen(unsigned int)+0x2d>
c00110f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110fd:	53                   	push   ebx
c00110fe:	57                   	push   edi
c00110ff:	47                   	inc    edi
c0011100:	56                   	push   esi
c0011101:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	eb e6                	jmp    c00110ef <Video::clearScreen(unsigned int)+0x13>
c0011109:	43                   	inc    ebx
c001110a:	eb d9                	jmp    c00110e5 <Video::clearScreen(unsigned int)+0x9>
c001110c:	5b                   	pop    ebx
c001110d:	5e                   	pop    esi
c001110e:	5f                   	pop    edi
c001110f:	c3                   	ret    

c0011110 <Video::putpixel(int, int, unsigned int)>:
c0011110:	c7 44 24 04 50 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024950
c0011118:	e9 46 36 00 00       	jmp    c0014763 <Krnl::panic(char const*)>
c001111d:	90                   	nop

c001111e <Video::Video(char const*)>:
c001111e:	83 ec 0c             	sub    esp,0xc
c0011121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011125:	83 ec 08             	sub    esp,0x8
c0011128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112c:	50                   	push   eax
c001112d:	e8 5c d1 ff ff       	call   c000e28e <Device::Device(char const*)>
c0011132:	83 c4 10             	add    esp,0x10
c0011135:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c001113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113e:	89 10                	mov    DWORD PTR [eax],edx
c0011140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011144:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001114e:	90                   	nop
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	c3                   	ret    
c0011153:	90                   	nop

c0011154 <Video::~Video()>:
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c001115c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011160:	89 10                	mov    DWORD PTR [eax],edx
c0011162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	50                   	push   eax
c001116a:	e8 e9 cd ff ff       	call   c000df58 <Device::~Device()>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	90                   	nop
c0011173:	83 c4 0c             	add    esp,0xc
c0011176:	c3                   	ret    
c0011177:	90                   	nop

c0011178 <Video::~Video()>:
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011182:	e8 cd ff ff ff       	call   c0011154 <Video::~Video()>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	83 ec 08             	sub    esp,0x8
c001118d:	68 64 01 00 00       	push   0x164
c0011192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011196:	e8 c7 b9 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c001119b:	83 c4 10             	add    esp,0x10
c001119e:	83 c4 0c             	add    esp,0xc
c00111a1:	c3                   	ret    

c00111a2 <Video::isMonochrome()>:
c00111a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00111ac:	c3                   	ret    
c00111ad:	90                   	nop

c00111ae <Video::getWidth()>:
c00111ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00111b8:	c3                   	ret    
c00111b9:	90                   	nop

c00111ba <Video::getHeight()>:
c00111ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111c4:	c3                   	ret    
c00111c5:	90                   	nop

c00111c6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00111c6:	55                   	push   ebp
c00111c7:	57                   	push   edi
c00111c8:	56                   	push   esi
c00111c9:	53                   	push   ebx
c00111ca:	83 ec 2c             	sub    esp,0x2c
c00111cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00111d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00111d5:	83 f8 01             	cmp    eax,0x1
c00111d8:	19 c9                	sbb    ecx,ecx
c00111da:	31 db                	xor    ebx,ebx
c00111dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00111e0:	89 cd                	mov    ebp,ecx
c00111e2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00111ea:	f7 d5                	not    ebp
c00111ec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00111f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00111f6:	01 d8                	add    eax,ebx
c00111f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111fc:	56                   	push   esi
c00111fd:	e8 b8 ff ff ff       	call   c00111ba <Video::getHeight()>
c0011202:	59                   	pop    ecx
c0011203:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011207:	7e 70                	jle    c0011279 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001120d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011211:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001121c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011223:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011227:	89 f8                	mov    eax,edi
c0011229:	83 c0 20             	add    eax,0x20
c001122c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011230:	56                   	push   esi
c0011231:	e8 78 ff ff ff       	call   c00111ae <Video::getWidth()>
c0011236:	5a                   	pop    edx
c0011237:	39 c7                	cmp    edi,eax
c0011239:	7d 34                	jge    c001126f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001123b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011240:	74 05                	je     c0011247 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011242:	8b 06                	mov    eax,DWORD PTR [esi]
c0011244:	55                   	push   ebp
c0011245:	eb 0d                	jmp    c0011254 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011247:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001124c:	74 12                	je     c0011260 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001124e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011258:	57                   	push   edi
c0011259:	56                   	push   esi
c001125a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011264:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011268:	47                   	inc    edi
c0011269:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001126d:	75 c1                	jne    c0011230 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001126f:	43                   	inc    ebx
c0011270:	83 fb 20             	cmp    ebx,0x20
c0011273:	0f 85 79 ff ff ff    	jne    c00111f2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011279:	83 c4 2c             	add    esp,0x2c
c001127c:	5b                   	pop    ebx
c001127d:	5e                   	pop    esi
c001127e:	5f                   	pop    edi
c001127f:	5d                   	pop    ebp
c0011280:	c3                   	ret    
c0011281:	90                   	nop

c0011282 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011282:	55                   	push   ebp
c0011283:	57                   	push   edi
c0011284:	56                   	push   esi
c0011285:	53                   	push   ebx
c0011286:	83 ec 28             	sub    esp,0x28
c0011289:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001128d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011291:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011295:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011299:	c1 e6 08             	shl    esi,0x8
c001129c:	01 c6                	add    esi,eax
c001129e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00112a2:	c1 e0 08             	shl    eax,0x8
c00112a5:	01 d0                	add    eax,edx
c00112a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112af:	0f af c6             	imul   eax,esi
c00112b2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00112b9:	50                   	push   eax
c00112ba:	e8 04 87 ff ff       	call   c00099c3 <malloc>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	89 c7                	mov    edi,eax
c00112c4:	85 c0                	test   eax,eax
c00112c6:	75 10                	jne    c00112d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00112c8:	83 ec 0c             	sub    esp,0xc
c00112cb:	68 71 49 02 c0       	push   0xc0024971
c00112d0:	e8 8e 34 00 00       	call   c0014763 <Krnl::panic(char const*)>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00112db:	ba 12 00 00 00       	mov    edx,0x12
c00112e0:	84 c0                	test   al,al
c00112e2:	74 11                	je     c00112f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00112e4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00112e8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00112ec:	c1 fa 03             	sar    edx,0x3
c00112ef:	0f af d1             	imul   edx,ecx
c00112f2:	83 c2 12             	add    edx,0x12
c00112f5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00112f9:	74 04                	je     c00112ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00112fb:	85 f6                	test   esi,esi
c00112fd:	75 12                	jne    c0011311 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00112ff:	83 ec 0c             	sub    esp,0xc
c0011302:	68 81 49 02 c0       	push   0xc0024981
c0011307:	e8 37 b9 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001130c:	e9 b8 00 00 00       	jmp    c00113c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011311:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011315:	80 f9 02             	cmp    cl,0x2
c0011318:	0f 85 96 00 00 00    	jne    c00113b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001131e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011323:	75 0e                	jne    c0011333 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011325:	84 c0                	test   al,al
c0011327:	75 0a                	jne    c0011333 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011329:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001132c:	83 e8 18             	sub    eax,0x18
c001132f:	a8 f7                	test   al,0xf7
c0011331:	74 0a                	je     c001133d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011333:	83 ec 0c             	sub    esp,0xc
c0011336:	68 96 49 02 c0       	push   0xc0024996
c001133b:	eb 7f                	jmp    c00113bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001133d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011345:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001134d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011359:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001135d:	75 0c                	jne    c001136b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001135f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011364:	c1 e0 18             	shl    eax,0x18
c0011367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001136b:	45                   	inc    ebp
c001136c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011371:	c1 e1 10             	shl    ecx,0x10
c0011374:	89 c8                	mov    eax,ecx
c0011376:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001137b:	c1 e1 08             	shl    ecx,0x8
c001137e:	09 c1                	or     ecx,eax
c0011380:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011384:	09 c1                	or     ecx,eax
c0011386:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001138a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001138e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011392:	c1 f8 03             	sar    eax,0x3
c0011395:	01 c2                	add    edx,eax
c0011397:	89 e8                	mov    eax,ebp
c0011399:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001139d:	39 c6                	cmp    esi,eax
c001139f:	7f b0                	jg     c0011351 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00113a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00113a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00113a9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00113ac:	7e 22                	jle    c00113d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00113ae:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00113b2:	eb 99                	jmp    c001134d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00113b4:	50                   	push   eax
c00113b5:	50                   	push   eax
c00113b6:	51                   	push   ecx
c00113b7:	68 a4 49 02 c0       	push   0xc00249a4
c00113bc:	e8 82 b8 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00113c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113c4:	e8 0a 86 ff ff       	call   c00099d3 <free>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	31 ff                	xor    edi,edi
c00113ce:	eb 0f                	jmp    c00113df <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00113d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113d4:	89 30                	mov    DWORD PTR [eax],esi
c00113d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00113dd:	89 30                	mov    DWORD PTR [eax],esi
c00113df:	83 c4 1c             	add    esp,0x1c
c00113e2:	89 f8                	mov    eax,edi
c00113e4:	5b                   	pop    ebx
c00113e5:	5e                   	pop    esi
c00113e6:	5f                   	pop    edi
c00113e7:	5d                   	pop    ebp
c00113e8:	c3                   	ret    
c00113e9:	90                   	nop

c00113ea <Video::putTGA(int, int, unsigned char*, int)>:
c00113ea:	55                   	push   ebp
c00113eb:	57                   	push   edi
c00113ec:	56                   	push   esi
c00113ed:	53                   	push   ebx
c00113ee:	83 ec 28             	sub    esp,0x28
c00113f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00113f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00113f9:	50                   	push   eax
c00113fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00113fe:	50                   	push   eax
c00113ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011403:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011407:	56                   	push   esi
c0011408:	e8 75 fe ff ff       	call   c0011282 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001140d:	83 c4 20             	add    esp,0x20
c0011410:	85 c0                	test   eax,eax
c0011412:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011416:	74 35                	je     c001144d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011418:	89 c7                	mov    edi,eax
c001141a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001141e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011422:	39 d8                	cmp    eax,ebx
c0011424:	7e 27                	jle    c001144d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011426:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001142a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001142e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011432:	39 e8                	cmp    eax,ebp
c0011434:	7e 14                	jle    c001144a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011436:	8b 06                	mov    eax,DWORD PTR [esi]
c0011438:	83 c7 04             	add    edi,0x4
c001143b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001143e:	53                   	push   ebx
c001143f:	55                   	push   ebp
c0011440:	45                   	inc    ebp
c0011441:	56                   	push   esi
c0011442:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	eb e0                	jmp    c001142a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001144a:	43                   	inc    ebx
c001144b:	eb cd                	jmp    c001141a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001144d:	83 c4 1c             	add    esp,0x1c
c0011450:	5b                   	pop    ebx
c0011451:	5e                   	pop    esi
c0011452:	5f                   	pop    edi
c0011453:	5d                   	pop    ebp
c0011454:	c3                   	ret    
c0011455:	66 90                	xchg   ax,ax
c0011457:	90                   	nop

c0011458 <ACPI::close(int, int, void*)>:
c0011458:	83 ec 1c             	sub    esp,0x1c
c001145b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011463:	74 0b                	je     c0011470 <ACPI::close(int, int, void*)+0x18>
c0011465:	b8 00 00 00 00       	mov    eax,0x0
c001146a:	e9 99 00 00 00       	jmp    c0011508 <ACPI::close(int, int, void*)+0xb0>
c001146f:	90                   	nop
c0011470:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011475:	75 29                	jne    c00114a0 <ACPI::close(int, int, void*)+0x48>
c0011477:	a1 e8 7a 02 c0       	mov    eax,ds:0xc0027ae8
c001147c:	85 c0                	test   eax,eax
c001147e:	74 08                	je     c0011488 <ACPI::close(int, int, void*)+0x30>
c0011480:	a1 e8 7a 02 c0       	mov    eax,ds:0xc0027ae8
c0011485:	ff d0                	call   eax
c0011487:	90                   	nop
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	68 00 4a 02 c0       	push   0xc0024a00
c0011490:	e8 ce 32 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149d:	eb 69                	jmp    c0011508 <ACPI::close(int, int, void*)+0xb0>
c001149f:	90                   	nop
c00114a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00114a5:	75 59                	jne    c0011500 <ACPI::close(int, int, void*)+0xa8>
c00114a7:	a1 e4 7a 02 c0       	mov    eax,ds:0xc0027ae4
c00114ac:	85 c0                	test   eax,eax
c00114ae:	74 08                	je     c00114b8 <ACPI::close(int, int, void*)+0x60>
c00114b0:	a1 e4 7a 02 c0       	mov    eax,ds:0xc0027ae4
c00114b5:	ff d0                	call   eax
c00114b7:	90                   	nop
c00114b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00114bd:	8d 76 00             	lea    esi,[esi+0x0]
c00114c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00114c5:	83 e0 02             	and    eax,0x2
c00114c8:	74 1e                	je     c00114e8 <ACPI::close(int, int, void*)+0x90>
c00114ca:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00114d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114d5:	89 c2                	mov    edx,eax
c00114d7:	ec                   	in     al,dx
c00114d8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00114dc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00114e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00114e4:	eb da                	jmp    c00114c0 <ACPI::close(int, int, void*)+0x68>
c00114e6:	66 90                	xchg   ax,ax
c00114e8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00114ef:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00114f4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00114f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00114fc:	ee                   	out    dx,al
c00114fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011500:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011505:	8d 76 00             	lea    esi,[esi+0x0]
c0011508:	83 c4 1c             	add    esp,0x1c
c001150b:	c3                   	ret    

c001150c <findRSDP()>:
c001150c:	83 ec 1c             	sub    esp,0x1c
c001150f:	83 ec 0c             	sub    esp,0xc
c0011512:	68 23 4b 02 c0       	push   0xc0024b23
c0011517:	e8 01 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011524:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001152a:	83 e0 04             	and    eax,0x4
c001152d:	84 c0                	test   al,al
c001152f:	75 0b                	jne    c001153c <findRSDP()+0x30>
c0011531:	b8 00 00 00 00       	mov    eax,0x0
c0011536:	e9 a1 00 00 00       	jmp    c00115dc <findRSDP()+0xd0>
c001153b:	90                   	nop
c001153c:	a1 d8 74 02 c0       	mov    eax,ds:0xc00274d8
c0011541:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011546:	7f 1c                	jg     c0011564 <findRSDP()+0x58>
c0011548:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001154d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011553:	83 e2 fb             	and    edx,0xfffffffb
c0011556:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001155c:	b8 00 00 00 00       	mov    eax,0x0
c0011561:	eb 79                	jmp    c00115dc <findRSDP()+0xd0>
c0011563:	90                   	nop
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	68 33 4b 02 c0       	push   0xc0024b33
c001156c:	e8 ac 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001157c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011584:	77 3e                	ja     c00115c4 <findRSDP()+0xb8>
c0011586:	83 ec 04             	sub    esp,0x4
c0011589:	6a 08                	push   0x8
c001158b:	68 4c 4b 02 c0       	push   0xc0024b4c
c0011590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011594:	e8 e7 ef fe ff       	call   c0000580 <memcmp>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	85 c0                	test   eax,eax
c001159e:	0f 94 c0             	sete   al
c00115a1:	84 c0                	test   al,al
c00115a3:	74 17                	je     c00115bc <findRSDP()+0xb0>
c00115a5:	83 ec 0c             	sub    esp,0xc
c00115a8:	68 55 4b 02 c0       	push   0xc0024b55
c00115ad:	e8 6b 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00115b2:	83 c4 10             	add    esp,0x10
c00115b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115b9:	eb 21                	jmp    c00115dc <findRSDP()+0xd0>
c00115bb:	90                   	nop
c00115bc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00115c1:	eb b9                	jmp    c001157c <findRSDP()+0x70>
c00115c3:	90                   	nop
c00115c4:	83 ec 0c             	sub    esp,0xc
c00115c7:	68 63 4b 02 c0       	push   0xc0024b63
c00115cc:	e8 4c 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	b8 00 00 00 00       	mov    eax,0x0
c00115d9:	8d 76 00             	lea    esi,[esi+0x0]
c00115dc:	83 c4 1c             	add    esp,0x1c
c00115df:	c3                   	ret    

c00115e0 <loadACPITables(unsigned char*)>:
c00115e0:	57                   	push   edi
c00115e1:	56                   	push   esi
c00115e2:	53                   	push   ebx
c00115e3:	83 ec 60             	sub    esp,0x60
c00115e6:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00115eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00115f1:	83 e0 04             	and    eax,0x4
c00115f4:	84 c0                	test   al,al
c00115f6:	0f 84 3c 02 00 00    	je     c0011838 <loadACPITables(unsigned char*)+0x258>
c00115fc:	a0 00 7d 02 c0       	mov    al,ds:0xc0027d00
c0011601:	84 c0                	test   al,al
c0011603:	74 77                	je     c001167c <loadACPITables(unsigned char*)+0x9c>
c0011605:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011609:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001160d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011611:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011614:	83 e8 24             	sub    eax,0x24
c0011617:	c1 e8 03             	shr    eax,0x3
c001161a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001161e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011626:	66 90                	xchg   ax,ax
c0011628:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001162c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011630:	0f 8d b6 00 00 00    	jge    c00116ec <loadACPITables(unsigned char*)+0x10c>
c0011636:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001163a:	83 c0 24             	add    eax,0x24
c001163d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011641:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011645:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011649:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001164d:	c1 e0 03             	shl    eax,0x3
c0011650:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011654:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011658:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001165b:	8b 00                	mov    eax,DWORD PTR [eax]
c001165d:	89 c1                	mov    ecx,eax
c001165f:	a1 ec 7a 02 c0       	mov    eax,ds:0xc0027aec
c0011664:	8d 50 01             	lea    edx,[eax+0x1]
c0011667:	89 15 ec 7a 02 c0    	mov    DWORD PTR ds:0xc0027aec,edx
c001166d:	89 ca                	mov    edx,ecx
c001166f:	89 14 c5 04 7b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd84fc],edx
c0011676:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001167a:	eb ac                	jmp    c0011628 <loadACPITables(unsigned char*)+0x48>
c001167c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011680:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168b:	83 e8 24             	sub    eax,0x24
c001168e:	c1 e8 02             	shr    eax,0x2
c0011691:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011695:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001169d:	8d 76 00             	lea    esi,[esi+0x0]
c00116a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00116a4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00116a8:	7d 42                	jge    c00116ec <loadACPITables(unsigned char*)+0x10c>
c00116aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116ae:	83 c0 24             	add    eax,0x24
c00116b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00116b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00116bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00116c1:	c1 e0 02             	shl    eax,0x2
c00116c4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00116c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00116ce:	a1 ec 7a 02 c0       	mov    eax,ds:0xc0027aec
c00116d3:	8d 50 01             	lea    edx,[eax+0x1]
c00116d6:	89 15 ec 7a 02 c0    	mov    DWORD PTR ds:0xc0027aec,edx
c00116dc:	89 ca                	mov    edx,ecx
c00116de:	89 14 c5 04 7b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd84fc],edx
c00116e5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00116e9:	eb b5                	jmp    c00116a0 <loadACPITables(unsigned char*)+0xc0>
c00116eb:	90                   	nop
c00116ec:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00116f4:	a1 ec 7a 02 c0       	mov    eax,ds:0xc0027aec
c00116f9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00116fd:	0f 8d 39 01 00 00    	jge    c001183c <loadACPITables(unsigned char*)+0x25c>
c0011703:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011707:	8b 04 c5 04 7b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd84fc]
c001170e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001171a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001171e:	25 ff 0f 00 00       	and    eax,0xfff
c0011723:	89 c6                	mov    esi,eax
c0011725:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c001172b:	83 ec 0c             	sub    esp,0xc
c001172e:	6a 01                	push   0x1
c0011730:	e8 e8 a1 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0011735:	83 c4 10             	add    esp,0x10
c0011738:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001173c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011742:	83 ec 0c             	sub    esp,0xc
c0011745:	6a 01                	push   0x1
c0011747:	6a 01                	push   0x1
c0011749:	50                   	push   eax
c001174a:	52                   	push   edx
c001174b:	53                   	push   ebx
c001174c:	e8 69 ab ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011751:	83 c4 20             	add    esp,0x20
c0011754:	09 f0                	or     eax,esi
c0011756:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001175a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001175e:	c1 e0 03             	shl    eax,0x3
c0011761:	05 00 7b 02 c0       	add    eax,0xc0027b00
c0011766:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001176a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011772:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001177a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001177e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011786:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001178a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001178e:	89 c6                	mov    esi,eax
c0011790:	89 d7                	mov    edi,edx
c0011792:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011794:	89 c8                	mov    eax,ecx
c0011796:	89 fa                	mov    edx,edi
c0011798:	89 f3                	mov    ebx,esi
c001179a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001179e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00117a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00117b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00117b5:	05 00 10 00 00       	add    eax,0x1000
c00117ba:	c1 e8 0c             	shr    eax,0xc
c00117bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00117c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00117c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117cd:	25 ff 0f 00 00       	and    eax,0xfff
c00117d2:	89 c6                	mov    esi,eax
c00117d4:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c00117da:	83 ec 0c             	sub    esp,0xc
c00117dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00117e1:	e8 37 a1 ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00117ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117f3:	83 ec 0c             	sub    esp,0xc
c00117f6:	6a 01                	push   0x1
c00117f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117fc:	50                   	push   eax
c00117fd:	52                   	push   edx
c00117fe:	53                   	push   ebx
c00117ff:	e8 b6 aa ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011804:	83 c4 20             	add    esp,0x20
c0011807:	09 f0                	or     eax,esi
c0011809:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001180d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011811:	83 ec 0c             	sub    esp,0xc
c0011814:	50                   	push   eax
c0011815:	e8 33 a4 ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c001181a:	83 c4 10             	add    esp,0x10
c001181d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011821:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011825:	89 14 c5 04 7b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd84fc],edx
c001182c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011830:	e9 bf fe ff ff       	jmp    c00116f4 <loadACPITables(unsigned char*)+0x114>
c0011835:	8d 76 00             	lea    esi,[esi+0x0]
c0011838:	90                   	nop
c0011839:	8d 76 00             	lea    esi,[esi+0x0]
c001183c:	83 c4 60             	add    esp,0x60
c001183f:	5b                   	pop    ebx
c0011840:	5e                   	pop    esi
c0011841:	5f                   	pop    edi
c0011842:	c3                   	ret    
c0011843:	90                   	nop

c0011844 <findRSDT(unsigned char*)>:
c0011844:	57                   	push   edi
c0011845:	56                   	push   esi
c0011846:	53                   	push   ebx
c0011847:	83 ec 50             	sub    esp,0x50
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	68 77 4b 02 c0       	push   0xc0024b77
c0011852:	e8 c6 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001185f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011865:	83 e0 04             	and    eax,0x4
c0011868:	84 c0                	test   al,al
c001186a:	75 0c                	jne    c0011878 <findRSDT(unsigned char*)+0x34>
c001186c:	b8 00 00 00 00       	mov    eax,0x0
c0011871:	e9 86 01 00 00       	jmp    c00119fc <findRSDT(unsigned char*)+0x1b8>
c0011876:	66 90                	xchg   ax,ax
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	68 89 4b 02 c0       	push   0xc0024b89
c0011880:	e8 98 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011885:	83 c4 10             	add    esp,0x10
c0011888:	89 e0                	mov    eax,esp
c001188a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001188e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011892:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011896:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001189e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00118a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00118a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00118aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00118ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00118b2:	89 c6                	mov    esi,eax
c00118b4:	89 d7                	mov    edi,edx
c00118b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00118b8:	89 c8                	mov    eax,ecx
c00118ba:	89 fa                	mov    edx,edi
c00118bc:	89 f3                	mov    ebx,esi
c00118be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00118c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00118c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	68 9b 4b 02 c0       	push   0xc0024b9b
c00118d2:	e8 46 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118d7:	83 c4 10             	add    esp,0x10
c00118da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00118de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00118e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00118ea:	83 ec 0c             	sub    esp,0xc
c00118ed:	68 ad 4b 02 c0       	push   0xc0024bad
c00118f2:	e8 26 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011902:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001190e:	83 ec 04             	sub    esp,0x4
c0011911:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011915:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011919:	68 24 4a 02 c0       	push   0xc0024a24
c001191e:	e8 20 b3 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001192a:	25 ff 0f 00 00       	and    eax,0xfff
c001192f:	89 c6                	mov    esi,eax
c0011931:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c0011937:	83 ec 0c             	sub    esp,0xc
c001193a:	6a 02                	push   0x2
c001193c:	e8 dc 9f ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011948:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	6a 01                	push   0x1
c0011953:	6a 02                	push   0x2
c0011955:	50                   	push   eax
c0011956:	52                   	push   edx
c0011957:	53                   	push   ebx
c0011958:	e8 5d a9 ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001195d:	83 c4 20             	add    esp,0x20
c0011960:	09 f0                	or     eax,esi
c0011962:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011966:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001196a:	25 ff 0f 00 00       	and    eax,0xfff
c001196f:	89 c6                	mov    esi,eax
c0011971:	8b 1d d0 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d0
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	6a 02                	push   0x2
c001197c:	e8 9c 9f ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011988:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001198e:	83 ec 0c             	sub    esp,0xc
c0011991:	6a 01                	push   0x1
c0011993:	6a 02                	push   0x2
c0011995:	50                   	push   eax
c0011996:	52                   	push   edx
c0011997:	53                   	push   ebx
c0011998:	e8 1d a9 ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001199d:	83 c4 20             	add    esp,0x20
c00119a0:	09 f0                	or     eax,esi
c00119a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00119a6:	83 ec 04             	sub    esp,0x4
c00119a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119b1:	68 44 4a 02 c0       	push   0xc0024a44
c00119b6:	e8 88 b2 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00119c3:	75 13                	jne    c00119d8 <findRSDT(unsigned char*)+0x194>
c00119c5:	c6 05 00 7d 02 c0 00 	mov    BYTE PTR ds:0xc0027d00,0x0
c00119cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00119d4:	eb 22                	jmp    c00119f8 <findRSDT(unsigned char*)+0x1b4>
c00119d6:	66 90                	xchg   ax,ax
c00119d8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00119dd:	75 11                	jne    c00119f0 <findRSDT(unsigned char*)+0x1ac>
c00119df:	c6 05 00 7d 02 c0 01 	mov    BYTE PTR ds:0xc0027d00,0x1
c00119e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00119ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00119ee:	eb 08                	jmp    c00119f8 <findRSDT(unsigned char*)+0x1b4>
c00119f0:	b8 00 00 00 00       	mov    eax,0x0
c00119f5:	eb 05                	jmp    c00119fc <findRSDT(unsigned char*)+0x1b8>
c00119f7:	90                   	nop
c00119f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119fc:	83 c4 50             	add    esp,0x50
c00119ff:	5b                   	pop    ebx
c0011a00:	5e                   	pop    esi
c0011a01:	5f                   	pop    edi
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <findDataTable(unsigned char*, char*)>:
c0011a04:	83 ec 1c             	sub    esp,0x1c
c0011a07:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011a0c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a12:	83 e0 04             	and    eax,0x4
c0011a15:	84 c0                	test   al,al
c0011a17:	75 07                	jne    c0011a20 <findDataTable(unsigned char*, char*)+0x1c>
c0011a19:	b8 00 00 00 00       	mov    eax,0x0
c0011a1e:	eb 58                	jmp    c0011a78 <findDataTable(unsigned char*, char*)+0x74>
c0011a20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a28:	a1 ec 7a 02 c0       	mov    eax,ds:0xc0027aec
c0011a2d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011a31:	7d 3d                	jge    c0011a70 <findDataTable(unsigned char*, char*)+0x6c>
c0011a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a37:	c1 e0 03             	shl    eax,0x3
c0011a3a:	05 00 7b 02 c0       	add    eax,0xc0027b00
c0011a3f:	83 ec 04             	sub    esp,0x4
c0011a42:	6a 04                	push   0x4
c0011a44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a48:	50                   	push   eax
c0011a49:	e8 32 eb fe ff       	call   c0000580 <memcmp>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	85 c0                	test   eax,eax
c0011a53:	0f 94 c0             	sete   al
c0011a56:	84 c0                	test   al,al
c0011a58:	74 0e                	je     c0011a68 <findDataTable(unsigned char*, char*)+0x64>
c0011a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a5e:	8b 04 c5 04 7b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd84fc]
c0011a65:	eb 11                	jmp    c0011a78 <findDataTable(unsigned char*, char*)+0x74>
c0011a67:	90                   	nop
c0011a68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011a6c:	eb ba                	jmp    c0011a28 <findDataTable(unsigned char*, char*)+0x24>
c0011a6e:	66 90                	xchg   ax,ax
c0011a70:	b8 00 00 00 00       	mov    eax,0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	83 c4 1c             	add    esp,0x1c
c0011a7b:	c3                   	ret    

c0011a7c <scanMADT()>:
c0011a7c:	53                   	push   ebx
c0011a7d:	83 ec 38             	sub    esp,0x38
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	68 bf 4b 02 c0       	push   0xc0024bbf
c0011a88:	e8 90 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c0011a95:	25 00 04 00 00       	and    eax,0x400
c0011a9a:	74 14                	je     c0011ab0 <scanMADT()+0x34>
c0011a9c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011aa1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011aa7:	83 e2 fb             	and    edx,0xfffffffb
c0011aaa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ab0:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011ab5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011abb:	83 e0 04             	and    eax,0x4
c0011abe:	84 c0                	test   al,al
c0011ac0:	0f 84 82 04 00 00    	je     c0011f48 <scanMADT()+0x4cc>
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	68 cc 4b 02 c0       	push   0xc0024bcc
c0011ace:	e8 4a 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011ad3:	83 c4 10             	add    esp,0x10
c0011ad6:	e8 31 fa ff ff       	call   c001150c <findRSDP()>
c0011adb:	a3 0c 7d 02 c0       	mov    ds:0xc0027d0c,eax
c0011ae0:	a1 0c 7d 02 c0       	mov    eax,ds:0xc0027d0c
c0011ae5:	85 c0                	test   eax,eax
c0011ae7:	75 1b                	jne    c0011b04 <scanMADT()+0x88>
c0011ae9:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011aee:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011af4:	83 e2 fb             	and    edx,0xfffffffb
c0011af7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011afd:	e9 4e 04 00 00       	jmp    c0011f50 <scanMADT()+0x4d4>
c0011b02:	66 90                	xchg   ax,ax
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	68 de 4b 02 c0       	push   0xc0024bde
c0011b0c:	e8 0c 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	a1 0c 7d 02 c0       	mov    eax,ds:0xc0027d0c
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	50                   	push   eax
c0011b1d:	e8 22 fd ff ff       	call   c0011844 <findRSDT(unsigned char*)>
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	a3 08 7d 02 c0       	mov    ds:0xc0027d08,eax
c0011b2a:	a1 08 7d 02 c0       	mov    eax,ds:0xc0027d08
c0011b2f:	85 c0                	test   eax,eax
c0011b31:	75 19                	jne    c0011b4c <scanMADT()+0xd0>
c0011b33:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011b38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b3e:	83 e2 fb             	and    edx,0xfffffffb
c0011b41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b47:	e9 04 04 00 00       	jmp    c0011f50 <scanMADT()+0x4d4>
c0011b4c:	83 ec 0c             	sub    esp,0xc
c0011b4f:	68 ee 4b 02 c0       	push   0xc0024bee
c0011b54:	e8 c4 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b59:	83 c4 10             	add    esp,0x10
c0011b5c:	a1 08 7d 02 c0       	mov    eax,ds:0xc0027d08
c0011b61:	83 ec 0c             	sub    esp,0xc
c0011b64:	50                   	push   eax
c0011b65:	e8 76 fa ff ff       	call   c00115e0 <loadACPITables(unsigned char*)>
c0011b6a:	83 c4 10             	add    esp,0x10
c0011b6d:	a1 08 7d 02 c0       	mov    eax,ds:0xc0027d08
c0011b72:	83 ec 08             	sub    esp,0x8
c0011b75:	68 06 4c 02 c0       	push   0xc0024c06
c0011b7a:	50                   	push   eax
c0011b7b:	e8 84 fe ff ff       	call   c0011a04 <findDataTable(unsigned char*, char*)>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011b87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011b8c:	75 1a                	jne    c0011ba8 <scanMADT()+0x12c>
c0011b8e:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0011b93:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b99:	83 e2 fe             	and    edx,0xfffffffe
c0011b9c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ba2:	e9 a9 03 00 00       	jmp    c0011f50 <scanMADT()+0x4d4>
c0011ba7:	90                   	nop
c0011ba8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011bb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bb7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011bbb:	0f 87 8f 03 00 00    	ja     c0011f50 <scanMADT()+0x4d4>
c0011bc1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011bc9:	0f 87 81 03 00 00    	ja     c0011f50 <scanMADT()+0x4d4>
c0011bcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011bd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0011bde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011be2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011be6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011bea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011bee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bf2:	8d 50 01             	lea    edx,[eax+0x1]
c0011bf5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011bf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bfd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c01:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011c05:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011c0a:	0f 86 3c 03 00 00    	jbe    c0011f4c <scanMADT()+0x4d0>
c0011c10:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011c15:	75 59                	jne    c0011c70 <scanMADT()+0x1f4>
c0011c17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c22:	8a 15 00 7f 02 c0    	mov    dl,BYTE PTR ds:0xc0027f00
c0011c28:	0f b6 d2             	movzx  edx,dl
c0011c2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011c2f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011c33:	88 82 40 7f 02 c0    	mov    BYTE PTR [edx-0x3ffd80c0],al
c0011c39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c3d:	8d 50 01             	lea    edx,[eax+0x1]
c0011c40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c44:	8a 15 00 7f 02 c0    	mov    dl,BYTE PTR ds:0xc0027f00
c0011c4a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011c4d:	88 0d 00 7f 02 c0    	mov    BYTE PTR ds:0xc0027f00,cl
c0011c53:	0f b6 d2             	movzx  edx,dl
c0011c56:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011c5a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011c5e:	88 82 20 7f 02 c0    	mov    BYTE PTR [edx-0x3ffd80e0],al
c0011c64:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c69:	e9 c6 02 00 00       	jmp    c0011f34 <scanMADT()+0x4b8>
c0011c6e:	66 90                	xchg   ax,ax
c0011c70:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011c75:	0f 85 15 01 00 00    	jne    c0011d90 <scanMADT()+0x314>
c0011c7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c86:	8a 15 c0 7d 02 c0    	mov    dl,BYTE PTR ds:0xc0027dc0
c0011c8c:	0f b6 d2             	movzx  edx,dl
c0011c8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011c93:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011c97:	88 82 e0 7d 02 c0    	mov    BYTE PTR [edx-0x3ffd8220],al
c0011c9d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011ca1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ca5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca9:	01 d0                	add    eax,edx
c0011cab:	83 c0 2c             	add    eax,0x2c
c0011cae:	8a 00                	mov    al,BYTE PTR [eax]
c0011cb0:	0f b6 d0             	movzx  edx,al
c0011cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cbe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011cc2:	0f b6 c0             	movzx  eax,al
c0011cc5:	c1 e0 08             	shl    eax,0x8
c0011cc8:	89 d1                	mov    ecx,edx
c0011cca:	09 c1                	or     ecx,eax
c0011ccc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd0:	8d 50 02             	lea    edx,[eax+0x2]
c0011cd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cdb:	0f b6 c0             	movzx  eax,al
c0011cde:	c1 e0 10             	shl    eax,0x10
c0011ce1:	09 c1                	or     ecx,eax
c0011ce3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce7:	8d 50 03             	lea    edx,[eax+0x3]
c0011cea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cf2:	0f b6 c0             	movzx  eax,al
c0011cf5:	c1 e0 18             	shl    eax,0x18
c0011cf8:	09 c1                	or     ecx,eax
c0011cfa:	89 ca                	mov    edx,ecx
c0011cfc:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c0011d01:	0f b6 c0             	movzx  eax,al
c0011d04:	89 14 85 00 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8200],edx
c0011d0b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d18:	01 d0                	add    eax,edx
c0011d1a:	83 c0 2c             	add    eax,0x2c
c0011d1d:	8a 00                	mov    al,BYTE PTR [eax]
c0011d1f:	0f b6 d0             	movzx  edx,al
c0011d22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d26:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d2d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d31:	0f b6 c0             	movzx  eax,al
c0011d34:	c1 e0 08             	shl    eax,0x8
c0011d37:	89 d1                	mov    ecx,edx
c0011d39:	09 c1                	or     ecx,eax
c0011d3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d3f:	8d 50 02             	lea    edx,[eax+0x2]
c0011d42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d46:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d4a:	0f b6 c0             	movzx  eax,al
c0011d4d:	c1 e0 10             	shl    eax,0x10
c0011d50:	09 c1                	or     ecx,eax
c0011d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d56:	8d 50 03             	lea    edx,[eax+0x3]
c0011d59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d5d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d61:	0f b6 c0             	movzx  eax,al
c0011d64:	c1 e0 18             	shl    eax,0x18
c0011d67:	09 c1                	or     ecx,eax
c0011d69:	89 ca                	mov    edx,ecx
c0011d6b:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c0011d70:	0f b6 c0             	movzx  eax,al
c0011d73:	89 14 85 80 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8180],edx
c0011d7a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d7f:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c0011d84:	40                   	inc    eax
c0011d85:	a2 c0 7d 02 c0       	mov    ds:0xc0027dc0,al
c0011d8a:	e9 a5 01 00 00       	jmp    c0011f34 <scanMADT()+0x4b8>
c0011d8f:	90                   	nop
c0011d90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011d95:	0f 85 e9 00 00 00    	jne    c0011e84 <scanMADT()+0x408>
c0011d9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011da2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011da6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011daa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011db2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011db6:	8d 50 01             	lea    edx,[eax+0x1]
c0011db9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dc5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011dc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dd1:	01 d0                	add    eax,edx
c0011dd3:	83 c0 2c             	add    eax,0x2c
c0011dd6:	8a 00                	mov    al,BYTE PTR [eax]
c0011dd8:	0f b6 d0             	movzx  edx,al
c0011ddb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011de6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011dea:	0f b6 c0             	movzx  eax,al
c0011ded:	c1 e0 08             	shl    eax,0x8
c0011df0:	89 d1                	mov    ecx,edx
c0011df2:	09 c1                	or     ecx,eax
c0011df4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011df8:	8d 50 02             	lea    edx,[eax+0x2]
c0011dfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e03:	0f b6 c0             	movzx  eax,al
c0011e06:	c1 e0 10             	shl    eax,0x10
c0011e09:	09 c1                	or     ecx,eax
c0011e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0f:	8d 50 03             	lea    edx,[eax+0x3]
c0011e12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e1a:	0f b6 c0             	movzx  eax,al
c0011e1d:	c1 e0 18             	shl    eax,0x18
c0011e20:	09 c8                	or     eax,ecx
c0011e22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e33:	01 d0                	add    eax,edx
c0011e35:	83 c0 2c             	add    eax,0x2c
c0011e38:	8a 00                	mov    al,BYTE PTR [eax]
c0011e3a:	0f b6 c0             	movzx  eax,al
c0011e3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e41:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e48:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011e4c:	0f b6 d2             	movzx  edx,dl
c0011e4f:	c1 e2 08             	shl    edx,0x8
c0011e52:	09 d0                	or     eax,edx
c0011e54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011e59:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011e5e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011e63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e67:	88 90 a0 6b 02 c0    	mov    BYTE PTR [eax-0x3ffd9460],dl
c0011e6d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011e72:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011e77:	66 89 84 12 a0 7d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd8260],ax
c0011e7f:	e9 b0 00 00 00       	jmp    c0011f34 <scanMADT()+0x4b8>
c0011e84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011e89:	0f 85 99 00 00 00    	jne    c0011f28 <scanMADT()+0x4ac>
c0011e8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e93:	8d 50 01             	lea    edx,[eax+0x1]
c0011e96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ea2:	0f b6 c0             	movzx  eax,al
c0011ea5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ea9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ead:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb1:	01 d0                	add    eax,edx
c0011eb3:	83 c0 2c             	add    eax,0x2c
c0011eb6:	8a 00                	mov    al,BYTE PTR [eax]
c0011eb8:	0f b6 d0             	movzx  edx,al
c0011ebb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ebf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ec2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ec6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011eca:	0f b6 c0             	movzx  eax,al
c0011ecd:	c1 e0 08             	shl    eax,0x8
c0011ed0:	09 d0                	or     eax,edx
c0011ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ed6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011edf:	8d 50 01             	lea    edx,[eax+0x1]
c0011ee2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ee6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011eee:	0f b6 c0             	movzx  eax,al
c0011ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef9:	c1 e0 08             	shl    eax,0x8
c0011efc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011f00:	89 c1                	mov    ecx,eax
c0011f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f06:	c1 e0 18             	shl    eax,0x18
c0011f09:	89 c3                	mov    ebx,eax
c0011f0b:	a1 10 7d 02 c0       	mov    eax,ds:0xc0027d10
c0011f10:	8d 50 01             	lea    edx,[eax+0x1]
c0011f13:	89 15 10 7d 02 c0    	mov    DWORD PTR ds:0xc0027d10,edx
c0011f19:	09 d9                	or     ecx,ebx
c0011f1b:	89 ca                	mov    edx,ecx
c0011f1d:	89 14 85 20 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd82e0],edx
c0011f24:	eb 0e                	jmp    c0011f34 <scanMADT()+0x4b8>
c0011f26:	66 90                	xchg   ax,ax
c0011f28:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011f2d:	75 05                	jne    c0011f34 <scanMADT()+0x4b8>
c0011f2f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011f34:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011f39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f3d:	01 d0                	add    eax,edx
c0011f3f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011f43:	e9 68 fc ff ff       	jmp    c0011bb0 <scanMADT()+0x134>
c0011f48:	90                   	nop
c0011f49:	eb 05                	jmp    c0011f50 <scanMADT()+0x4d4>
c0011f4b:	90                   	nop
c0011f4c:	90                   	nop
c0011f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f50:	83 c4 38             	add    esp,0x38
c0011f53:	5b                   	pop    ebx
c0011f54:	c3                   	ret    
c0011f55:	90                   	nop
c0011f56:	66 90                	xchg   ax,ax

c0011f58 <ACPI::ACPI()>:
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f5f:	83 ec 08             	sub    esp,0x8
c0011f62:	68 0b 4c 02 c0       	push   0xc0024c0b
c0011f67:	50                   	push   eax
c0011f68:	e8 21 c3 ff ff       	call   c000e28e <Device::Device(char const*)>
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	ba a4 4d 02 c0       	mov    edx,0xc0024da4
c0011f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f79:	89 10                	mov    DWORD PTR [eax],edx
c0011f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f98:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011fa2:	83 ec 0c             	sub    esp,0xc
c0011fa5:	68 10 4c 02 c0       	push   0xc0024c10
c0011faa:	e8 6e 7a ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	e8 c5 fa ff ff       	call   c0011a7c <scanMADT()>
c0011fb7:	90                   	nop
c0011fb8:	83 c4 0c             	add    esp,0xc
c0011fbb:	c3                   	ret    

c0011fbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011fbc:	83 ec 2c             	sub    esp,0x2c
c0011fbf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011fc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011fcb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011fcf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011fd4:	88 d0                	mov    al,dl
c0011fd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011fda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011fdf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011fe7:	90                   	nop
c0011fe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ff2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011ff6:	0f 8d 9c 00 00 00    	jge    c0012098 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011ffc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012000:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012004:	83 c2 2a             	add    edx,0x2a
c0012007:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001200b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012010:	75 7a                	jne    c001208c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012012:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012016:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001201a:	83 c2 2a             	add    edx,0x2a
c001201d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012021:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012025:	75 65                	jne    c001208c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012027:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001202c:	74 3a                	je     c0012068 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001202e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012032:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012036:	83 c2 2a             	add    edx,0x2a
c0012039:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001203d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012044:	39 c2                	cmp    edx,eax
c0012046:	74 10                	je     c0012058 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	68 64 4a 02 c0       	push   0xc0024a64
c0012050:	e8 0e 27 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0012055:	83 c4 10             	add    esp,0x10
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	68 1e 4c 02 c0       	push   0xc0024c1e
c0012060:	e8 fe 26 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001206c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012070:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012074:	83 c2 2a             	add    edx,0x2a
c0012077:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001207b:	8b 02                	mov    eax,DWORD PTR [edx]
c001207d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012080:	89 01                	mov    DWORD PTR [ecx],eax
c0012082:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012085:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001208a:	66 90                	xchg   ax,ax
c001208c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012090:	e9 53 ff ff ff       	jmp    c0011fe8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012095:	8d 76 00             	lea    esi,[esi+0x0]
c0012098:	90                   	nop
c0012099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209d:	83 c4 2c             	add    esp,0x2c
c00120a0:	c2 04 00             	ret    0x4
c00120a3:	90                   	nop

c00120a4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00120a4:	83 ec 1c             	sub    esp,0x1c
c00120a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00120af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00120b3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00120b8:	88 c8                	mov    al,cl
c00120ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00120be:	88 d0                	mov    al,dl
c00120c0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00120c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00120c8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00120ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00120d2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00120d5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00120d9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00120dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00120e1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00120e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00120eb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00120ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120f2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00120f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00120fb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012101:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012105:	8d 48 01             	lea    ecx,[eax+0x1]
c0012108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001210c:	83 c2 2a             	add    edx,0x2a
c001210f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012117:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001211d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012121:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012124:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012128:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001212c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012130:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012136:	8d 50 01             	lea    edx,[eax+0x1]
c0012139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001213d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012147:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001214d:	3d 00 02 00 00       	cmp    eax,0x200
c0012152:	75 10                	jne    c0012164 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012154:	83 ec 0c             	sub    esp,0xc
c0012157:	68 2d 4c 02 c0       	push   0xc0024c2d
c001215c:	e8 02 26 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	90                   	nop
c0012165:	83 c4 1c             	add    esp,0x1c
c0012168:	c3                   	ret    
c0012169:	90                   	nop
c001216a:	66 90                	xchg   ax,ax

c001216c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001216c:	b8 00 00 00 00       	mov    eax,0x0
c0012171:	c3                   	ret    
c0012172:	66 90                	xchg   ax,ax

c0012174 <ACPI::detectPCI()>:
c0012174:	53                   	push   ebx
c0012175:	83 ec 68             	sub    esp,0x68
c0012178:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c001217d:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012182:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0012187:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001218d:	83 e0 04             	and    eax,0x4
c0012190:	84 c0                	test   al,al
c0012192:	74 2c                	je     c00121c0 <ACPI::detectPCI()+0x4c>
c0012194:	a1 08 7d 02 c0       	mov    eax,ds:0xc0027d08
c0012199:	83 ec 08             	sub    esp,0x8
c001219c:	68 4a 4c 02 c0       	push   0xc0024c4a
c00121a1:	50                   	push   eax
c00121a2:	e8 5d f8 ff ff       	call   c0011a04 <findDataTable(unsigned char*, char*)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00121ae:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00121b3:	74 0b                	je     c00121c0 <ACPI::detectPCI()+0x4c>
c00121b5:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00121ba:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00121bf:	90                   	nop
c00121c0:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00121c8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121cc:	8a 00                	mov    al,BYTE PTR [eax]
c00121ce:	3c 01                	cmp    al,0x1
c00121d0:	75 0e                	jne    c00121e0 <ACPI::detectPCI()+0x6c>
c00121d2:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00121d7:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00121dc:	eb 2a                	jmp    c0012208 <ACPI::detectPCI()+0x94>
c00121de:	66 90                	xchg   ax,ax
c00121e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121e4:	8a 00                	mov    al,BYTE PTR [eax]
c00121e6:	3c 02                	cmp    al,0x2
c00121e8:	75 1e                	jne    c0012208 <ACPI::detectPCI()+0x94>
c00121ea:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00121ef:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00121f4:	74 12                	je     c0012208 <ACPI::detectPCI()+0x94>
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	68 94 4a 02 c0       	push   0xc0024a94
c00121fe:	e8 60 25 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	66 90                	xchg   ax,ax
c0012208:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001220c:	83 f0 01             	xor    eax,0x1
c001220f:	84 c0                	test   al,al
c0012211:	74 41                	je     c0012254 <ACPI::detectPCI()+0xe0>
c0012213:	e8 38 df fe ff       	call   c0000150 <manualPCIProbe>
c0012218:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001221c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012221:	75 0d                	jne    c0012230 <ACPI::detectPCI()+0xbc>
c0012223:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012228:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001222d:	eb 25                	jmp    c0012254 <ACPI::detectPCI()+0xe0>
c001222f:	90                   	nop
c0012230:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012235:	75 1d                	jne    c0012254 <ACPI::detectPCI()+0xe0>
c0012237:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001223c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012241:	74 11                	je     c0012254 <ACPI::detectPCI()+0xe0>
c0012243:	83 ec 0c             	sub    esp,0xc
c0012246:	68 94 4a 02 c0       	push   0xc0024a94
c001224b:	e8 13 25 00 00       	call   c0014763 <Krnl::panic(char const*)>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	90                   	nop
c0012254:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012259:	0f 84 fd 02 00 00    	je     c001255c <ACPI::detectPCI()+0x3e8>
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	68 4f 4c 02 c0       	push   0xc0024c4f
c0012267:	e8 b1 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001226c:	83 c4 10             	add    esp,0x10
c001226f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012274:	74 7e                	je     c00122f4 <ACPI::detectPCI()+0x180>
c0012276:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c001227b:	25 00 08 00 00       	and    eax,0x800
c0012280:	0f 84 f6 00 00 00    	je     c001237c <ACPI::detectPCI()+0x208>
c0012286:	83 ec 0c             	sub    esp,0xc
c0012289:	68 bc 4a 02 c0       	push   0xc0024abc
c001228e:	e8 8a 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012293:	83 c4 10             	add    esp,0x10
c0012296:	66 90                	xchg   ax,ax
c0012298:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c001229f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00122a4:	89 c2                	mov    edx,eax
c00122a6:	ec                   	in     al,dx
c00122a7:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00122ab:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00122af:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00122b3:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00122b8:	74 0a                	je     c00122c4 <ACPI::detectPCI()+0x150>
c00122ba:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00122bf:	74 03                	je     c00122c4 <ACPI::detectPCI()+0x150>
c00122c1:	eb d5                	jmp    c0012298 <ACPI::detectPCI()+0x124>
c00122c3:	90                   	nop
c00122c4:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00122cb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00122d0:	89 c2                	mov    edx,eax
c00122d2:	ec                   	in     al,dx
c00122d3:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00122d7:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00122db:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00122df:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00122e4:	74 de                	je     c00122c4 <ACPI::detectPCI()+0x150>
c00122e6:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00122eb:	0f 85 83 00 00 00    	jne    c0012374 <ACPI::detectPCI()+0x200>
c00122f1:	eb d1                	jmp    c00122c4 <ACPI::detectPCI()+0x150>
c00122f3:	90                   	nop
c00122f4:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00122f8:	83 f0 01             	xor    eax,0x1
c00122fb:	84 c0                	test   al,al
c00122fd:	74 7d                	je     c001237c <ACPI::detectPCI()+0x208>
c00122ff:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c0012304:	25 00 08 00 00       	and    eax,0x800
c0012309:	74 71                	je     c001237c <ACPI::detectPCI()+0x208>
c001230b:	83 ec 0c             	sub    esp,0xc
c001230e:	68 e0 4a 02 c0       	push   0xc0024ae0
c0012313:	e8 05 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012318:	83 c4 10             	add    esp,0x10
c001231b:	90                   	nop
c001231c:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012323:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012328:	89 c2                	mov    edx,eax
c001232a:	ec                   	in     al,dx
c001232b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001232f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012333:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012337:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c001233c:	74 0a                	je     c0012348 <ACPI::detectPCI()+0x1d4>
c001233e:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012343:	74 03                	je     c0012348 <ACPI::detectPCI()+0x1d4>
c0012345:	eb d5                	jmp    c001231c <ACPI::detectPCI()+0x1a8>
c0012347:	90                   	nop
c0012348:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c001234f:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012354:	89 c2                	mov    edx,eax
c0012356:	ec                   	in     al,dx
c0012357:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001235b:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001235f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012363:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012368:	74 de                	je     c0012348 <ACPI::detectPCI()+0x1d4>
c001236a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c001236f:	75 07                	jne    c0012378 <ACPI::detectPCI()+0x204>
c0012371:	eb d5                	jmp    c0012348 <ACPI::detectPCI()+0x1d4>
c0012373:	90                   	nop
c0012374:	90                   	nop
c0012375:	eb 05                	jmp    c001237c <ACPI::detectPCI()+0x208>
c0012377:	90                   	nop
c0012378:	90                   	nop
c0012379:	8d 76 00             	lea    esi,[esi+0x0]
c001237c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012384:	83 ec 0c             	sub    esp,0xc
c0012387:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001238b:	e8 33 76 ff ff       	call   c00099c3 <malloc>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	89 c3                	mov    ebx,eax
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	53                   	push   ebx
c0012399:	e8 54 ab 00 00       	call   c001cef2 <PCI::PCI()>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00123a5:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c00123aa:	25 00 08 00 00       	and    eax,0x800
c00123af:	74 6f                	je     c0012420 <ACPI::detectPCI()+0x2ac>
c00123b1:	83 ec 0c             	sub    esp,0xc
c00123b4:	68 67 4c 02 c0       	push   0xc0024c67
c00123b9:	e8 5f 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123be:	83 c4 10             	add    esp,0x10
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00123cb:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00123d0:	89 c2                	mov    edx,eax
c00123d2:	ec                   	in     al,dx
c00123d3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00123d7:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00123db:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00123df:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c00123e4:	74 0a                	je     c00123f0 <ACPI::detectPCI()+0x27c>
c00123e6:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c00123eb:	74 03                	je     c00123f0 <ACPI::detectPCI()+0x27c>
c00123ed:	eb d5                	jmp    c00123c4 <ACPI::detectPCI()+0x250>
c00123ef:	90                   	nop
c00123f0:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c00123f7:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c00123fc:	89 c2                	mov    edx,eax
c00123fe:	ec                   	in     al,dx
c00123ff:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012403:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012407:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001240b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012410:	74 de                	je     c00123f0 <ACPI::detectPCI()+0x27c>
c0012412:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012417:	75 03                	jne    c001241c <ACPI::detectPCI()+0x2a8>
c0012419:	eb d5                	jmp    c00123f0 <ACPI::detectPCI()+0x27c>
c001241b:	90                   	nop
c001241c:	90                   	nop
c001241d:	8d 76 00             	lea    esi,[esi+0x0]
c0012420:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012424:	83 ec 08             	sub    esp,0x8
c0012427:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001242b:	50                   	push   eax
c001242c:	e8 59 bc ff ff       	call   c000e08a <Device::addChild(Device*)>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c0012439:	25 00 08 00 00       	and    eax,0x800
c001243e:	74 6c                	je     c00124ac <ACPI::detectPCI()+0x338>
c0012440:	83 ec 0c             	sub    esp,0xc
c0012443:	68 6d 4c 02 c0       	push   0xc0024c6d
c0012448:	e8 d0 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012457:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001245c:	89 c2                	mov    edx,eax
c001245e:	ec                   	in     al,dx
c001245f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012463:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012467:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001246b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012470:	74 0a                	je     c001247c <ACPI::detectPCI()+0x308>
c0012472:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012477:	74 03                	je     c001247c <ACPI::detectPCI()+0x308>
c0012479:	eb d5                	jmp    c0012450 <ACPI::detectPCI()+0x2dc>
c001247b:	90                   	nop
c001247c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012483:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012488:	89 c2                	mov    edx,eax
c001248a:	ec                   	in     al,dx
c001248b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001248f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012493:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012497:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c001249c:	74 de                	je     c001247c <ACPI::detectPCI()+0x308>
c001249e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00124a3:	75 03                	jne    c00124a8 <ACPI::detectPCI()+0x334>
c00124a5:	eb d5                	jmp    c001247c <ACPI::detectPCI()+0x308>
c00124a7:	90                   	nop
c00124a8:	90                   	nop
c00124a9:	8d 76 00             	lea    esi,[esi+0x0]
c00124ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00124b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b2:	83 c0 08             	add    eax,0x8
c00124b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124bc:	74 0a                	je     c00124c8 <ACPI::detectPCI()+0x354>
c00124be:	ba 01 00 00 00       	mov    edx,0x1
c00124c3:	eb 0b                	jmp    c00124d0 <ACPI::detectPCI()+0x35c>
c00124c5:	8d 76 00             	lea    esi,[esi+0x0]
c00124c8:	ba 02 00 00 00       	mov    edx,0x2
c00124cd:	8d 76 00             	lea    esi,[esi+0x0]
c00124d0:	6a 00                	push   0x0
c00124d2:	6a 00                	push   0x0
c00124d4:	52                   	push   edx
c00124d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00124d9:	ff d0                	call   eax
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c00124e3:	25 00 08 00 00       	and    eax,0x800
c00124e8:	0f 84 16 01 00 00    	je     c0012604 <ACPI::detectPCI()+0x490>
c00124ee:	83 ec 0c             	sub    esp,0xc
c00124f1:	68 73 4c 02 c0       	push   0xc0024c73
c00124f6:	e8 22 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	66 90                	xchg   ax,ax
c0012500:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012507:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001250c:	89 c2                	mov    edx,eax
c001250e:	ec                   	in     al,dx
c001250f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012513:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012517:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001251b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012520:	74 0a                	je     c001252c <ACPI::detectPCI()+0x3b8>
c0012522:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012527:	74 03                	je     c001252c <ACPI::detectPCI()+0x3b8>
c0012529:	eb d5                	jmp    c0012500 <ACPI::detectPCI()+0x38c>
c001252b:	90                   	nop
c001252c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012533:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012538:	89 c2                	mov    edx,eax
c001253a:	ec                   	in     al,dx
c001253b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001253f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012543:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012547:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001254c:	74 de                	je     c001252c <ACPI::detectPCI()+0x3b8>
c001254e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012553:	0f 85 a7 00 00 00    	jne    c0012600 <ACPI::detectPCI()+0x48c>
c0012559:	eb d1                	jmp    c001252c <ACPI::detectPCI()+0x3b8>
c001255b:	90                   	nop
c001255c:	83 ec 0c             	sub    esp,0xc
c001255f:	68 79 4c 02 c0       	push   0xc0024c79
c0012564:	e8 da a6 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	68 84 4c 02 c0       	push   0xc0024c84
c0012574:	e8 a4 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012584:	83 ec 0c             	sub    esp,0xc
c0012587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001258b:	e8 33 74 ff ff       	call   c00099c3 <malloc>
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	89 c3                	mov    ebx,eax
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	53                   	push   ebx
c0012599:	e8 f4 c0 00 00       	call   c001e692 <IDE::IDE()>
c001259e:	83 c4 10             	add    esp,0x10
c00125a1:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00125a5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00125a9:	83 ec 08             	sub    esp,0x8
c00125ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00125b0:	50                   	push   eax
c00125b1:	e8 d4 ba ff ff       	call   c000e08a <Device::addChild(Device*)>
c00125b6:	83 c4 10             	add    esp,0x10
c00125b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125bd:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00125c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125cb:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00125d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125d8:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00125e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e7:	83 c0 08             	add    eax,0x8
c00125ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ec:	6a 00                	push   0x0
c00125ee:	6a 00                	push   0x0
c00125f0:	6a 00                	push   0x0
c00125f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125f6:	ff d0                	call   eax
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	eb 07                	jmp    c0012604 <ACPI::detectPCI()+0x490>
c00125fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012600:	90                   	nop
c0012601:	8d 76 00             	lea    esi,[esi+0x0]
c0012604:	90                   	nop
c0012605:	83 c4 68             	add    esp,0x68
c0012608:	5b                   	pop    ebx
c0012609:	c3                   	ret    
c001260a:	66 90                	xchg   ax,ax

c001260c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001260c:	83 ec 1c             	sub    esp,0x1c
c001260f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012613:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012616:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001261a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001261f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012624:	83 ec 08             	sub    esp,0x8
c0012627:	52                   	push   edx
c0012628:	50                   	push   eax
c0012629:	e8 66 69 ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c001262e:	83 c4 10             	add    esp,0x10
c0012631:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012635:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001263a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001263f:	83 ec 04             	sub    esp,0x4
c0012642:	6a 01                	push   0x1
c0012644:	52                   	push   edx
c0012645:	50                   	push   eax
c0012646:	e8 25 6b ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	90                   	nop
c001264f:	83 c4 1c             	add    esp,0x1c
c0012652:	c3                   	ret    
c0012653:	90                   	nop

c0012654 <ACPI::sleep()>:
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c001265c:	85 c0                	test   eax,eax
c001265e:	74 08                	je     c0012668 <ACPI::sleep()+0x14>
c0012660:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c0012665:	ff d0                	call   eax
c0012667:	90                   	nop
c0012668:	90                   	nop
c0012669:	83 c4 0c             	add    esp,0xc
c001266c:	c3                   	ret    
c001266d:	90                   	nop
c001266e:	66 90                	xchg   ax,ax

c0012670 <ACPI::open(int, int, void*)>:
c0012670:	57                   	push   edi
c0012671:	56                   	push   esi
c0012672:	53                   	push   ebx
c0012673:	81 ec 70 01 00 00    	sub    esp,0x170
c0012679:	83 ec 0c             	sub    esp,0xc
c001267c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012683:	e8 ec fa ff ff       	call   c0012174 <ACPI::detectPCI()>
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	68 04 4b 02 c0       	push   0xc0024b04
c0012693:	e8 85 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012698:	83 c4 10             	add    esp,0x10
c001269b:	83 ec 0c             	sub    esp,0xc
c001269e:	68 99 4c 02 c0       	push   0xc0024c99
c00126a3:	e8 2f 48 00 00       	call   c0016ed7 <Thr::loadKernelSymbolTable(char const*)>
c00126a8:	83 c4 10             	add    esp,0x10
c00126ab:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00126b3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126c8:	e8 f6 72 ff ff       	call   c00099c3 <malloc>
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	89 c3                	mov    ebx,eax
c00126d2:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00126d7:	83 ec 04             	sub    esp,0x4
c00126da:	50                   	push   eax
c00126db:	68 b7 4c 02 c0       	push   0xc0024cb7
c00126e0:	53                   	push   ebx
c00126e1:	e8 c8 aa ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00126e6:	83 c4 10             	add    esp,0x10
c00126e9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00126f0:	83 ec 08             	sub    esp,0x8
c00126f3:	6a 01                	push   0x1
c00126f5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00126fc:	e8 11 ab ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001270b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012713:	75 17                	jne    c001272c <ACPI::open(int, int, void*)+0xbc>
c0012715:	83 ec 0c             	sub    esp,0xc
c0012718:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001271f:	e8 4c ab ff ff       	call   c000d270 <File::close()>
c0012724:	83 c4 10             	add    esp,0x10
c0012727:	eb 0b                	jmp    c0012734 <ACPI::open(int, int, void*)+0xc4>
c0012729:	8d 76 00             	lea    esi,[esi+0x0]
c001272c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012734:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001273c:	74 1e                	je     c001275c <ACPI::open(int, int, void*)+0xec>
c001273e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012745:	8b 00                	mov    eax,DWORD PTR [eax]
c0012747:	83 c0 08             	add    eax,0x8
c001274a:	8b 00                	mov    eax,DWORD PTR [eax]
c001274c:	83 ec 0c             	sub    esp,0xc
c001274f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012756:	ff d0                	call   eax
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	90                   	nop
c001275c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012763:	83 f0 01             	xor    eax,0x1
c0012766:	84 c0                	test   al,al
c0012768:	74 42                	je     c00127ac <ACPI::open(int, int, void*)+0x13c>
c001276a:	83 ec 0c             	sub    esp,0xc
c001276d:	68 d5 4c 02 c0       	push   0xc0024cd5
c0012772:	e8 a6 72 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	83 ec 04             	sub    esp,0x4
c001277d:	6a 0c                	push   0xc
c001277f:	68 f0 4c 02 c0       	push   0xc0024cf0
c0012784:	68 01 4d 02 c0       	push   0xc0024d01
c0012789:	e8 b3 2d 00 00       	call   c0015541 <Reg::readIntWithDefault(char*, char*, int)>
c001278e:	83 c4 10             	add    esp,0x10
c0012791:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012798:	83 ec 0c             	sub    esp,0xc
c001279b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00127a2:	e8 80 93 ff ff       	call   c000bb27 <Virt::setupPageSwapping(int)>
c00127a7:	83 c4 10             	add    esp,0x10
c00127aa:	66 90                	xchg   ax,ax
c00127ac:	83 ec 0c             	sub    esp,0xc
c00127af:	68 26 35 02 c0       	push   0xc0023526
c00127b4:	e8 64 72 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c00127c2:	83 ec 08             	sub    esp,0x8
c00127c5:	6a 01                	push   0x1
c00127c7:	68 08 4d 02 c0       	push   0xc0024d08
c00127cc:	e8 7d 51 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c00127d1:	83 c4 10             	add    esp,0x10
c00127d4:	83 ec 08             	sub    esp,0x8
c00127d7:	53                   	push   ebx
c00127d8:	50                   	push   eax
c00127d9:	e8 a1 53 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00127e8:	83 ec 08             	sub    esp,0x8
c00127eb:	6a 12                	push   0x12
c00127ed:	50                   	push   eax
c00127ee:	e8 1b bc ff ff       	call   c000e40e <getDevicesOfType(DeviceType)>
c00127f3:	83 c4 0c             	add    esp,0xc
c00127f6:	66 90                	xchg   ax,ax
c00127f8:	83 ec 0c             	sub    esp,0xc
c00127fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012802:	50                   	push   eax
c0012803:	e8 18 ff 00 00       	call   c0022720 <LinkedList<Device>::isEmpty()>
c0012808:	83 c4 10             	add    esp,0x10
c001280b:	83 f0 01             	xor    eax,0x1
c001280e:	84 c0                	test   al,al
c0012810:	0f 84 46 01 00 00    	je     c001295c <ACPI::open(int, int, void*)+0x2ec>
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012820:	50                   	push   eax
c0012821:	e8 16 ff 00 00       	call   c002273c <LinkedList<Device>::getFirstElement()>
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001283a:	50                   	push   eax
c001283b:	e8 04 ff 00 00       	call   c0022744 <LinkedList<Device>::removeFirst()>
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001284a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012851:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012858:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001285c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012862:	ba 09 00 00 00       	mov    edx,0x9
c0012867:	fc                   	cld    
c0012868:	89 c7                	mov    edi,eax
c001286a:	89 de                	mov    esi,ebx
c001286c:	89 d1                	mov    ecx,edx
c001286e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012870:	83 ec 08             	sub    esp,0x8
c0012873:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012877:	50                   	push   eax
c0012878:	83 ec 24             	sub    esp,0x24
c001287b:	89 e0                	mov    eax,esp
c001287d:	89 c3                	mov    ebx,eax
c001287f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012883:	ba 09 00 00 00       	mov    edx,0x9
c0012888:	89 df                	mov    edi,ebx
c001288a:	89 c6                	mov    esi,eax
c001288c:	89 d1                	mov    ecx,edx
c001288e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012890:	e8 3b ab 00 00       	call   c001d3d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012895:	83 c4 30             	add    esp,0x30
c0012898:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001289f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00128a7:	0f 84 4b ff ff ff    	je     c00127f8 <ACPI::open(int, int, void*)+0x188>
c00128ad:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00128b8:	83 ec 0c             	sub    esp,0xc
c00128bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00128c2:	e8 fc 70 ff ff       	call   c00099c3 <malloc>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	89 c3                	mov    ebx,eax
c00128cc:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00128d1:	83 ec 04             	sub    esp,0x4
c00128d4:	50                   	push   eax
c00128d5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00128dc:	53                   	push   ebx
c00128dd:	e8 cc a8 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00128f6:	e8 85 ab ff ff       	call   c000d480 <File::exists()>
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	84 c0                	test   al,al
c0012900:	74 2a                	je     c001292c <ACPI::open(int, int, void*)+0x2bc>
c0012902:	83 ec 08             	sub    esp,0x8
c0012905:	6a 01                	push   0x1
c0012907:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001290e:	e8 3b 50 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c0012913:	83 c4 10             	add    esp,0x10
c0012916:	83 ec 08             	sub    esp,0x8
c0012919:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012920:	50                   	push   eax
c0012921:	e8 59 52 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	8d 76 00             	lea    esi,[esi+0x0]
c001292c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012934:	0f 84 be fe ff ff    	je     c00127f8 <ACPI::open(int, int, void*)+0x188>
c001293a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012941:	8b 00                	mov    eax,DWORD PTR [eax]
c0012943:	83 c0 08             	add    eax,0x8
c0012946:	8b 00                	mov    eax,DWORD PTR [eax]
c0012948:	83 ec 0c             	sub    esp,0xc
c001294b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012952:	ff d0                	call   eax
c0012954:	83 c4 10             	add    esp,0x10
c0012957:	e9 9c fe ff ff       	jmp    c00127f8 <ACPI::open(int, int, void*)+0x188>
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012966:	50                   	push   eax
c0012967:	e8 b0 fd 00 00       	call   c002271c <LinkedList<Device>::~LinkedList()>
c001296c:	83 c4 10             	add    esp,0x10
c001296f:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c0012975:	83 ec 08             	sub    esp,0x8
c0012978:	6a 01                	push   0x1
c001297a:	68 23 4d 02 c0       	push   0xc0024d23
c001297f:	e8 ca 4f 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	83 ec 08             	sub    esp,0x8
c001298a:	53                   	push   ebx
c001298b:	50                   	push   eax
c001298c:	e8 ee 51 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 1d a8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274a8
c001299a:	83 ec 08             	sub    esp,0x8
c001299d:	6a 01                	push   0x1
c001299f:	68 40 4d 02 c0       	push   0xc0024d40
c00129a4:	e8 a5 4f 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	83 ec 08             	sub    esp,0x8
c00129af:	53                   	push   ebx
c00129b0:	50                   	push   eax
c00129b1:	e8 c9 51 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c00129b6:	83 c4 10             	add    esp,0x10
c00129b9:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00129be:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00129c4:	83 e0 04             	and    eax,0x4
c00129c7:	84 c0                	test   al,al
c00129c9:	0f 84 15 01 00 00    	je     c0012ae4 <ACPI::open(int, int, void*)+0x474>
c00129cf:	83 ec 0c             	sub    esp,0xc
c00129d2:	68 5d 4d 02 c0       	push   0xc0024d5d
c00129d7:	e8 41 70 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00129dc:	83 c4 10             	add    esp,0x10
c00129df:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00129ea:	83 ec 0c             	sub    esp,0xc
c00129ed:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00129f4:	e8 ca 6f ff ff       	call   c00099c3 <malloc>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	89 c3                	mov    ebx,eax
c00129fe:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0012a03:	83 ec 04             	sub    esp,0x4
c0012a06:	50                   	push   eax
c0012a07:	68 7a 4d 02 c0       	push   0xc0024d7a
c0012a0c:	53                   	push   ebx
c0012a0d:	e8 9c a7 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0012a12:	83 c4 10             	add    esp,0x10
c0012a15:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012a1c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012a24:	74 1a                	je     c0012a40 <ACPI::open(int, int, void*)+0x3d0>
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012a30:	e8 4b aa ff ff       	call   c000d480 <File::exists()>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	84 c0                	test   al,al
c0012a3a:	74 04                	je     c0012a40 <ACPI::open(int, int, void*)+0x3d0>
c0012a3c:	b0 01                	mov    al,0x1
c0012a3e:	eb 04                	jmp    c0012a44 <ACPI::open(int, int, void*)+0x3d4>
c0012a40:	b0 00                	mov    al,0x0
c0012a42:	66 90                	xchg   ax,ax
c0012a44:	84 c0                	test   al,al
c0012a46:	74 28                	je     c0012a70 <ACPI::open(int, int, void*)+0x400>
c0012a48:	83 ec 08             	sub    esp,0x8
c0012a4b:	6a 01                	push   0x1
c0012a4d:	68 7a 4d 02 c0       	push   0xc0024d7a
c0012a52:	e8 f7 4e 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	83 ec 08             	sub    esp,0x8
c0012a5d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012a64:	50                   	push   eax
c0012a65:	e8 15 51 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a70:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012a78:	74 2a                	je     c0012aa4 <ACPI::open(int, int, void*)+0x434>
c0012a7a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012a82:	74 20                	je     c0012aa4 <ACPI::open(int, int, void*)+0x434>
c0012a84:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a8d:	83 c0 08             	add    eax,0x8
c0012a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a92:	83 ec 0c             	sub    esp,0xc
c0012a95:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012a9c:	ff d0                	call   eax
c0012a9e:	83 c4 10             	add    esp,0x10
c0012aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0012aa4:	a1 08 7d 02 c0       	mov    eax,ds:0xc0027d08
c0012aa9:	83 ec 08             	sub    esp,0x8
c0012aac:	68 97 4d 02 c0       	push   0xc0024d97
c0012ab1:	50                   	push   eax
c0012ab2:	e8 4d ef ff ff       	call   c0011a04 <findDataTable(unsigned char*, char*)>
c0012ab7:	83 c4 10             	add    esp,0x10
c0012aba:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012ac1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012ac9:	74 19                	je     c0012ae4 <ACPI::open(int, int, void*)+0x474>
c0012acb:	83 ec 08             	sub    esp,0x8
c0012ace:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012ad5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012adc:	e8 2b fb ff ff       	call   c001260c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012ae1:	83 c4 10             	add    esp,0x10
c0012ae4:	b8 00 00 00 00       	mov    eax,0x0
c0012ae9:	81 c4 70 01 00 00    	add    esp,0x170
c0012aef:	5b                   	pop    ebx
c0012af0:	5e                   	pop    esi
c0012af1:	5f                   	pop    edi
c0012af2:	c3                   	ret    
c0012af3:	90                   	nop

c0012af4 <CPU::close(int, int, void*)>:
c0012af4:	31 c0                	xor    eax,eax
c0012af6:	c3                   	ret    
c0012af7:	90                   	nop

c0012af8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012af8:	55                   	push   ebp
c0012af9:	57                   	push   edi
c0012afa:	56                   	push   esi
c0012afb:	53                   	push   ebx
c0012afc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012b00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b04:	89 ce                	mov    esi,ecx
c0012b06:	89 d5                	mov    ebp,edx
c0012b08:	80 f9 04             	cmp    cl,0x4
c0012b0b:	75 28                	jne    c0012b35 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012b0d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012b10:	3c 03                	cmp    al,0x3
c0012b12:	0f 86 63 01 00 00    	jbe    c0012c7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012b18:	80 fa 03             	cmp    dl,0x3
c0012b1b:	0f 84 5a 01 00 00    	je     c0012c7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012b21:	8d 7a f2             	lea    edi,[edx-0xe]
c0012b24:	b8 70 6d 02 c0       	mov    eax,0xc0026d70
c0012b29:	89 fb                	mov    ebx,edi
c0012b2b:	80 fb 01             	cmp    bl,0x1
c0012b2e:	77 4e                	ja     c0012b7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012b30:	e9 52 01 00 00       	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012b35:	80 f9 05             	cmp    cl,0x5
c0012b38:	75 4d                	jne    c0012b87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012b3a:	b8 80 6d 02 c0       	mov    eax,0xc0026d80
c0012b3f:	80 fa 03             	cmp    dl,0x3
c0012b42:	0f 86 3f 01 00 00    	jbe    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012b48:	8d 7a fa             	lea    edi,[edx-0x6]
c0012b4b:	b8 90 6d 02 c0       	mov    eax,0xc0026d90
c0012b50:	89 fb                	mov    ebx,edi
c0012b52:	80 fb 01             	cmp    bl,0x1
c0012b55:	0f 86 2c 01 00 00    	jbe    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012b5b:	b8 a0 6d 02 c0       	mov    eax,0xc0026da0
c0012b60:	80 fa 08             	cmp    dl,0x8
c0012b63:	0f 84 1e 01 00 00    	je     c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012b69:	89 d7                	mov    edi,edx
c0012b6b:	b8 b0 6d 02 c0       	mov    eax,0xc0026db0
c0012b70:	83 e7 fb             	and    edi,0xfffffffb
c0012b73:	89 fb                	mov    ebx,edi
c0012b75:	80 fb 09             	cmp    bl,0x9
c0012b78:	0f 84 09 01 00 00    	je     c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012b7e:	31 c0                	xor    eax,eax
c0012b80:	89 eb                	mov    ebx,ebp
c0012b82:	0f b6 fb             	movzx  edi,bl
c0012b85:	eb 30                	jmp    c0012bb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012b87:	31 c0                	xor    eax,eax
c0012b89:	80 f9 06             	cmp    cl,0x6
c0012b8c:	75 f2                	jne    c0012b80 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012b8e:	80 fa 0a             	cmp    dl,0xa
c0012b91:	77 ed                	ja     c0012b80 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012b93:	bf de 05 00 00       	mov    edi,0x5de
c0012b98:	0f a3 d7             	bt     edi,edx
c0012b9b:	73 e3                	jae    c0012b80 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012b9d:	b8 c0 6d 02 c0       	mov    eax,0xc0026dc0
c0012ba2:	e9 e0 00 00 00       	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ba7:	39 c7                	cmp    edi,eax
c0012ba9:	0f 84 d3 00 00 00    	je     c0012c82 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012baf:	40                   	inc    eax
c0012bb0:	3d d0 00 00 00       	cmp    eax,0xd0
c0012bb5:	74 09                	je     c0012bc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012bb7:	89 f3                	mov    ebx,esi
c0012bb9:	80 fb 0f             	cmp    bl,0xf
c0012bbc:	75 f1                	jne    c0012baf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012bbe:	eb e7                	jmp    c0012ba7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012bc0:	80 f9 10             	cmp    cl,0x10
c0012bc3:	75 14                	jne    c0012bd9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012bc5:	8d 42 fc             	lea    eax,[edx-0x4]
c0012bc8:	83 e0 fb             	and    eax,0xfffffffb
c0012bcb:	3c 02                	cmp    al,0x2
c0012bcd:	76 34                	jbe    c0012c03 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012bcf:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012bd4:	80 fa 02             	cmp    dl,0x2
c0012bd7:	eb 24                	jmp    c0012bfd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012bd9:	80 f9 11             	cmp    cl,0x11
c0012bdc:	75 13                	jne    c0012bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012bde:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012be3:	80 fa 03             	cmp    dl,0x3
c0012be6:	0f 85 9b 00 00 00    	jne    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012bec:	e9 91 00 00 00       	jmp    c0012c82 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012bf1:	80 f9 12             	cmp    cl,0x12
c0012bf4:	75 14                	jne    c0012c0a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012bf6:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012bfb:	fe ca                	dec    dl
c0012bfd:	0f 85 84 00 00 00    	jne    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c03:	b8 e0 6d 02 c0       	mov    eax,0xc0026de0
c0012c08:	eb 7d                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c0a:	80 f9 14             	cmp    cl,0x14
c0012c0d:	75 12                	jne    c0012c21 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012c0f:	4a                   	dec    edx
c0012c10:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012c15:	80 fa 01             	cmp    dl,0x1
c0012c18:	77 6d                	ja     c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c1a:	b8 f0 6d 02 c0       	mov    eax,0xc0026df0
c0012c1f:	eb 66                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c21:	80 f9 15             	cmp    cl,0x15
c0012c24:	75 31                	jne    c0012c57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012c26:	b8 00 6e 02 c0       	mov    eax,0xc0026e00
c0012c2b:	80 fa 01             	cmp    dl,0x1
c0012c2e:	74 57                	je     c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c30:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012c35:	80 fa 13             	cmp    dl,0x13
c0012c38:	76 0c                	jbe    c0012c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012c3a:	80 fa 30             	cmp    dl,0x30
c0012c3d:	75 48                	jne    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c3f:	b8 20 6e 02 c0       	mov    eax,0xc0026e20
c0012c44:	eb 41                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c46:	b9 04 00 09 00       	mov    ecx,0x90004
c0012c4b:	0f a3 d1             	bt     ecx,edx
c0012c4e:	73 37                	jae    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c50:	b8 10 6e 02 c0       	mov    eax,0xc0026e10
c0012c55:	eb 30                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c57:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012c5c:	80 f9 16             	cmp    cl,0x16
c0012c5f:	75 26                	jne    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c61:	b8 30 6e 02 c0       	mov    eax,0xc0026e30
c0012c66:	84 d2                	test   dl,dl
c0012c68:	74 1d                	je     c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c6a:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012c6f:	80 fa 30             	cmp    dl,0x30
c0012c72:	75 13                	jne    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c74:	b8 40 6e 02 c0       	mov    eax,0xc0026e40
c0012c79:	eb 0c                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c7b:	b8 60 6d 02 c0       	mov    eax,0xc0026d60
c0012c80:	eb 05                	jmp    c0012c87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c82:	b8 d0 6d 02 c0       	mov    eax,0xc0026dd0
c0012c87:	5b                   	pop    ebx
c0012c88:	5e                   	pop    esi
c0012c89:	5f                   	pop    edi
c0012c8a:	5d                   	pop    ebp
c0012c8b:	c3                   	ret    

c0012c8c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012c8c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c94:	80 f9 04             	cmp    cl,0x4
c0012c97:	75 6b                	jne    c0012d04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012c99:	b8 c0 6b 02 c0       	mov    eax,0xc0026bc0
c0012c9e:	80 fa 01             	cmp    dl,0x1
c0012ca1:	0f 86 92 02 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ca7:	b8 d0 6b 02 c0       	mov    eax,0xc0026bd0
c0012cac:	80 fa 02             	cmp    dl,0x2
c0012caf:	0f 84 84 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012cb5:	b8 e0 6b 02 c0       	mov    eax,0xc0026be0
c0012cba:	80 fa 03             	cmp    dl,0x3
c0012cbd:	0f 84 76 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012cc3:	b8 f0 6b 02 c0       	mov    eax,0xc0026bf0
c0012cc8:	80 fa 04             	cmp    dl,0x4
c0012ccb:	0f 84 68 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012cd1:	b8 00 6c 02 c0       	mov    eax,0xc0026c00
c0012cd6:	80 fa 05             	cmp    dl,0x5
c0012cd9:	0f 84 5a 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012cdf:	b8 e0 6b 02 c0       	mov    eax,0xc0026be0
c0012ce4:	80 fa 07             	cmp    dl,0x7
c0012ce7:	0f 84 4c 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ced:	83 ea 08             	sub    edx,0x8
c0012cf0:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012cf5:	80 fa 01             	cmp    dl,0x1
c0012cf8:	0f 87 3b 02 00 00    	ja     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012cfe:	b8 10 6c 02 c0       	mov    eax,0xc0026c10
c0012d03:	c3                   	ret    
c0012d04:	80 f9 05             	cmp    cl,0x5
c0012d07:	75 45                	jne    c0012d4e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012d09:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012d0c:	b8 20 6c 02 c0       	mov    eax,0xc0026c20
c0012d11:	80 f9 02             	cmp    cl,0x2
c0012d14:	0f 86 1f 02 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d1a:	80 fa 04             	cmp    dl,0x4
c0012d1d:	0f 84 f3 01 00 00    	je     c0012f16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012d23:	80 fa 07             	cmp    dl,0x7
c0012d26:	0f 84 0d 02 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d2c:	b8 30 6c 02 c0       	mov    eax,0xc0026c30
c0012d31:	80 fa 08             	cmp    dl,0x8
c0012d34:	0f 84 ff 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d3a:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012d3f:	80 fa 09             	cmp    dl,0x9
c0012d42:	0f 85 f1 01 00 00    	jne    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d48:	b8 40 6c 02 c0       	mov    eax,0xc0026c40
c0012d4d:	c3                   	ret    
c0012d4e:	80 f9 06             	cmp    cl,0x6
c0012d51:	0f 85 85 01 00 00    	jne    c0012edc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012d57:	b8 50 6c 02 c0       	mov    eax,0xc0026c50
c0012d5c:	80 fa 01             	cmp    dl,0x1
c0012d5f:	0f 84 d4 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d65:	8d 42 fb             	lea    eax,[edx-0x5]
c0012d68:	3c 01                	cmp    al,0x1
c0012d6a:	0f 86 ac 01 00 00    	jbe    c0012f1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012d70:	80 fa 03             	cmp    dl,0x3
c0012d73:	0f 84 a3 01 00 00    	je     c0012f1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012d79:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012d7c:	b8 70 6c 02 c0       	mov    eax,0xc0026c70
c0012d81:	80 f9 01             	cmp    cl,0x1
c0012d84:	0f 86 af 01 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d8a:	80 fa 09             	cmp    dl,0x9
c0012d8d:	0f 84 8f 01 00 00    	je     c0012f22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012d93:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012d96:	80 f9 01             	cmp    cl,0x1
c0012d99:	0f 86 9a 01 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d9f:	b8 80 6c 02 c0       	mov    eax,0xc0026c80
c0012da4:	80 fa 0d             	cmp    dl,0xd
c0012da7:	0f 84 8c 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dad:	b8 90 6c 02 c0       	mov    eax,0xc0026c90
c0012db2:	80 fa 0e             	cmp    dl,0xe
c0012db5:	0f 84 7e 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dbb:	b8 a0 6c 02 c0       	mov    eax,0xc0026ca0
c0012dc0:	80 fa 0f             	cmp    dl,0xf
c0012dc3:	0f 84 70 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dc9:	b8 80 6c 02 c0       	mov    eax,0xc0026c80
c0012dce:	80 fa 15             	cmp    dl,0x15
c0012dd1:	0f 84 62 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dd7:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012dda:	b8 a0 6c 02 c0       	mov    eax,0xc0026ca0
c0012ddf:	80 f9 01             	cmp    cl,0x1
c0012de2:	0f 86 51 01 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012de8:	80 fa 1a             	cmp    dl,0x1a
c0012deb:	0f 84 37 01 00 00    	je     c0012f28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012df1:	80 fa 1c             	cmp    dl,0x1c
c0012df4:	0f 84 34 01 00 00    	je     c0012f2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012dfa:	80 fa 1d             	cmp    dl,0x1d
c0012dfd:	0f 84 36 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e03:	b8 d0 6c 02 c0       	mov    eax,0xc0026cd0
c0012e08:	80 fa 25             	cmp    dl,0x25
c0012e0b:	0f 84 28 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e11:	8d 4a da             	lea    ecx,[edx-0x26]
c0012e14:	b8 c0 6c 02 c0       	mov    eax,0xc0026cc0
c0012e19:	80 f9 01             	cmp    cl,0x1
c0012e1c:	0f 86 17 01 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e22:	b8 e0 6c 02 c0       	mov    eax,0xc0026ce0
c0012e27:	80 fa 2a             	cmp    dl,0x2a
c0012e2a:	0f 84 09 01 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e30:	b8 d0 6c 02 c0       	mov    eax,0xc0026cd0
c0012e35:	80 fa 2c             	cmp    dl,0x2c
c0012e38:	0f 84 fb 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e3e:	b8 e0 6c 02 c0       	mov    eax,0xc0026ce0
c0012e43:	80 fa 2d             	cmp    dl,0x2d
c0012e46:	0f 84 ed 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e4c:	b8 b0 6c 02 c0       	mov    eax,0xc0026cb0
c0012e51:	80 fa 2e             	cmp    dl,0x2e
c0012e54:	0f 84 df 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e5a:	b8 d0 6c 02 c0       	mov    eax,0xc0026cd0
c0012e5f:	80 fa 2f             	cmp    dl,0x2f
c0012e62:	0f 84 d1 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e68:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012e6b:	b8 c0 6c 02 c0       	mov    eax,0xc0026cc0
c0012e70:	80 f9 01             	cmp    cl,0x1
c0012e73:	0f 86 c0 00 00 00    	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e79:	b8 f0 6c 02 c0       	mov    eax,0xc0026cf0
c0012e7e:	80 fa 37             	cmp    dl,0x37
c0012e81:	0f 84 b2 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e87:	b8 00 6d 02 c0       	mov    eax,0xc0026d00
c0012e8c:	80 fa 3a             	cmp    dl,0x3a
c0012e8f:	0f 84 a4 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e95:	b8 10 6d 02 c0       	mov    eax,0xc0026d10
c0012e9a:	80 fa 3c             	cmp    dl,0x3c
c0012e9d:	0f 84 96 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ea3:	b8 20 6d 02 c0       	mov    eax,0xc0026d20
c0012ea8:	80 fa 3d             	cmp    dl,0x3d
c0012eab:	0f 84 88 00 00 00    	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eb1:	b8 00 6d 02 c0       	mov    eax,0xc0026d00
c0012eb6:	80 fa 3e             	cmp    dl,0x3e
c0012eb9:	74 7e                	je     c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ebb:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ebe:	3c 01                	cmp    al,0x1
c0012ec0:	76 72                	jbe    c0012f34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ec2:	80 fa 3f             	cmp    dl,0x3f
c0012ec5:	74 6d                	je     c0012f34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ec7:	80 fa 4a             	cmp    dl,0x4a
c0012eca:	74 0a                	je     c0012ed6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012ecc:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012ed1:	80 fa 4d             	cmp    dl,0x4d
c0012ed4:	75 63                	jne    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ed6:	b8 f0 6c 02 c0       	mov    eax,0xc0026cf0
c0012edb:	c3                   	ret    
c0012edc:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012ee1:	80 f9 0b             	cmp    cl,0xb
c0012ee4:	75 0a                	jne    c0012ef0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012ee6:	fe ca                	dec    dl
c0012ee8:	75 4f                	jne    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eea:	b8 30 6d 02 c0       	mov    eax,0xc0026d30
c0012eef:	c3                   	ret    
c0012ef0:	80 f9 0f             	cmp    cl,0xf
c0012ef3:	75 44                	jne    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ef5:	b8 40 6d 02 c0       	mov    eax,0xc0026d40
c0012efa:	80 fa 02             	cmp    dl,0x2
c0012efd:	76 3a                	jbe    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eff:	8d 42 fd             	lea    eax,[edx-0x3]
c0012f02:	3c 01                	cmp    al,0x1
c0012f04:	76 0a                	jbe    c0012f10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012f06:	b8 1d 4f 02 c0       	mov    eax,0xc0024f1d
c0012f0b:	80 fa 06             	cmp    dl,0x6
c0012f0e:	75 29                	jne    c0012f39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f10:	b8 50 6d 02 c0       	mov    eax,0xc0026d50
c0012f15:	c3                   	ret    
c0012f16:	b8 30 6c 02 c0       	mov    eax,0xc0026c30
c0012f1b:	c3                   	ret    
c0012f1c:	b8 60 6c 02 c0       	mov    eax,0xc0026c60
c0012f21:	c3                   	ret    
c0012f22:	b8 80 6c 02 c0       	mov    eax,0xc0026c80
c0012f27:	c3                   	ret    
c0012f28:	b8 b0 6c 02 c0       	mov    eax,0xc0026cb0
c0012f2d:	c3                   	ret    
c0012f2e:	b8 c0 6c 02 c0       	mov    eax,0xc0026cc0
c0012f33:	c3                   	ret    
c0012f34:	b8 10 6d 02 c0       	mov    eax,0xc0026d10
c0012f39:	c3                   	ret    

c0012f3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012f3a:	60                   	pusha  
c0012f3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f47:	9c                   	pushf  
c0012f48:	fa                   	cli    
c0012f49:	0f 09                	wbinvd 
c0012f4b:	0f 30                	wrmsr  
c0012f4d:	9d                   	popf   
c0012f4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f52:	89 02                	mov    DWORD PTR [edx],eax
c0012f54:	61                   	popa   
c0012f55:	c3                   	ret    

c0012f56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012f56:	60                   	pusha  
c0012f57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f5b:	9c                   	pushf  
c0012f5c:	fa                   	cli    
c0012f5d:	0f 09                	wbinvd 
c0012f5f:	31 c0                	xor    eax,eax
c0012f61:	31 d2                	xor    edx,edx
c0012f63:	0f 32                	rdmsr  
c0012f65:	9d                   	popf   
c0012f66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f6a:	89 02                	mov    DWORD PTR [edx],eax
c0012f6c:	61                   	popa   
c0012f6d:	c3                   	ret    

c0012f6e <CPU::AMD_K6_writeback(int, int, int)>:
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	83 ec 10             	sub    esp,0x10
c0012f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f77:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012f7c:	75 5d                	jne    c0012fdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012f7e:	83 f8 08             	cmp    eax,0x8
c0012f81:	75 09                	jne    c0012f8c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012f83:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012f88:	7e 13                	jle    c0012f9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012f8a:	eb 30                	jmp    c0012fbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012f8c:	83 f8 06             	cmp    eax,0x6
c0012f8f:	7c 4a                	jl     c0012fdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012f91:	83 f8 07             	cmp    eax,0x7
c0012f94:	7e 07                	jle    c0012f9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012f96:	83 f8 09             	cmp    eax,0x9
c0012f99:	74 21                	je     c0012fbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012f9b:	eb 3e                	jmp    c0012fdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012f9d:	89 e6                	mov    esi,esp
c0012f9f:	8b 1d cc 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274cc
c0012fa5:	56                   	push   esi
c0012fa6:	c1 eb 15             	shr    ebx,0x15
c0012fa9:	68 82 00 00 c0       	push   0xc0000082
c0012fae:	83 e3 7e             	and    ebx,0x7e
c0012fb1:	e8 a0 ff ff ff       	call   c0012f56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012fb6:	56                   	push   esi
c0012fb7:	6a 00                	push   0x0
c0012fb9:	53                   	push   ebx
c0012fba:	eb 12                	jmp    c0012fce <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012fbc:	89 e3                	mov    ebx,esp
c0012fbe:	53                   	push   ebx
c0012fbf:	68 82 00 00 c0       	push   0xc0000082
c0012fc4:	e8 8d ff ff ff       	call   c0012f56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012fc9:	53                   	push   ebx
c0012fca:	6a 00                	push   0x0
c0012fcc:	6a 00                	push   0x0
c0012fce:	68 82 00 00 c0       	push   0xc0000082
c0012fd3:	e8 62 ff ff ff       	call   c0012f3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012fd8:	83 c4 18             	add    esp,0x18
c0012fdb:	83 c4 10             	add    esp,0x10
c0012fde:	5b                   	pop    ebx
c0012fdf:	5e                   	pop    esi
c0012fe0:	c3                   	ret    
c0012fe1:	90                   	nop

c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012fe2:	55                   	push   ebp
c0012fe3:	57                   	push   edi
c0012fe4:	56                   	push   esi
c0012fe5:	53                   	push   ebx
c0012fe6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012fee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012ff2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012ff6:	39 05 60 6e 02 c0    	cmp    DWORD PTR ds:0xc0026e60,eax
c0012ffc:	75 23                	jne    c0013021 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012ffe:	a1 6c 7f 02 c0       	mov    eax,ds:0xc0027f6c
c0013003:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013007:	89 06                	mov    DWORD PTR [esi],eax
c0013009:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c001300e:	89 07                	mov    DWORD PTR [edi],eax
c0013010:	a1 64 7f 02 c0       	mov    eax,ds:0xc0027f64
c0013015:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013018:	a1 60 7f 02 c0       	mov    eax,ds:0xc0027f60
c001301d:	89 02                	mov    DWORD PTR [edx],eax
c001301f:	eb 3f                	jmp    c0013060 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013021:	31 c9                	xor    ecx,ecx
c0013023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013027:	0f a2                	cpuid  
c0013029:	89 06                	mov    DWORD PTR [esi],eax
c001302b:	89 1f                	mov    DWORD PTR [edi],ebx
c001302d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013031:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013034:	89 10                	mov    DWORD PTR [eax],edx
c0013036:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303a:	a3 60 6e 02 c0       	mov    ds:0xc0026e60,eax
c001303f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013041:	a3 6c 7f 02 c0       	mov    ds:0xc0027f6c,eax
c0013046:	8b 07                	mov    eax,DWORD PTR [edi]
c0013048:	a3 68 7f 02 c0       	mov    ds:0xc0027f68,eax
c001304d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013050:	a3 64 7f 02 c0       	mov    ds:0xc0027f64,eax
c0013055:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013059:	8b 00                	mov    eax,DWORD PTR [eax]
c001305b:	a3 60 7f 02 c0       	mov    ds:0xc0027f60,eax
c0013060:	5b                   	pop    ebx
c0013061:	5e                   	pop    esi
c0013062:	5f                   	pop    edi
c0013063:	5d                   	pop    ebp
c0013064:	c3                   	ret    
c0013065:	90                   	nop

c0013066 <CPU::cpuidCheckEDX(unsigned int)>:
c0013066:	83 ec 10             	sub    esp,0x10
c0013069:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001306d:	50                   	push   eax
c001306e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013072:	50                   	push   eax
c0013073:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013077:	50                   	push   eax
c0013078:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001307c:	50                   	push   eax
c001307d:	6a 01                	push   0x1
c001307f:	e8 5e ff ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013084:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013088:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001308c:	0f 95 c0             	setne  al
c001308f:	83 c4 24             	add    esp,0x24
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <CPU::cpuidCheckECX(unsigned int)>:
c0013094:	83 ec 10             	sub    esp,0x10
c0013097:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001309b:	50                   	push   eax
c001309c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130a0:	50                   	push   eax
c00130a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130a5:	50                   	push   eax
c00130a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130aa:	50                   	push   eax
c00130ab:	6a 01                	push   0x1
c00130ad:	e8 30 ff ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00130b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00130b6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00130ba:	0f 95 c0             	setne  al
c00130bd:	83 c4 24             	add    esp,0x24
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop

c00130c2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00130c2:	83 ec 10             	sub    esp,0x10
c00130c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130c9:	50                   	push   eax
c00130ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130ce:	50                   	push   eax
c00130cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130d3:	50                   	push   eax
c00130d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130d8:	50                   	push   eax
c00130d9:	6a 07                	push   0x7
c00130db:	e8 02 ff ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00130e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00130e4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00130e8:	0f 95 c0             	setne  al
c00130eb:	83 c4 24             	add    esp,0x24
c00130ee:	c3                   	ret    
c00130ef:	90                   	nop

c00130f0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00130f0:	83 ec 10             	sub    esp,0x10
c00130f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130f7:	50                   	push   eax
c00130f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00130fc:	50                   	push   eax
c00130fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013101:	50                   	push   eax
c0013102:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013106:	50                   	push   eax
c0013107:	6a 07                	push   0x7
c0013109:	e8 d4 fe ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001310e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013112:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013116:	0f 95 c0             	setne  al
c0013119:	83 c4 24             	add    esp,0x24
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <CPU::CPU()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013125:	83 ec 08             	sub    esp,0x8
c0013128:	68 1d 4f 02 c0       	push   0xc0024f1d
c001312d:	50                   	push   eax
c001312e:	e8 5b b1 ff ff       	call   c000e28e <Device::Device(char const*)>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	ba 80 51 02 c0       	mov    edx,0xc0025180
c001313b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313f:	89 10                	mov    DWORD PTR [eax],edx
c0013141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013145:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001314f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013153:	05 78 01 00 00       	add    eax,0x178
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	50                   	push   eax
c001315c:	e8 f9 60 ff ff       	call   c000925a <GDT::GDT()>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013168:	05 7c 09 00 00       	add    eax,0x97c
c001316d:	83 ec 0c             	sub    esp,0xc
c0013170:	50                   	push   eax
c0013171:	e8 3a 63 ff ff       	call   c00094b0 <IDT::IDT()>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001317d:	05 7c 11 00 00       	add    eax,0x117c
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	50                   	push   eax
c0013186:	e8 d5 80 ff ff       	call   c000b260 <TSS::TSS()>
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013192:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00131a7:	90                   	nop
c00131a8:	83 c4 0c             	add    esp,0xc
c00131ab:	c3                   	ret    

c00131ac <CPU::displayFeatures()>:
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <CPU::detectFeatures()>:
c00131ae:	55                   	push   ebp
c00131af:	57                   	push   edi
c00131b0:	56                   	push   esi
c00131b1:	53                   	push   ebx
c00131b2:	83 ec 50             	sub    esp,0x50
c00131b5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00131b9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00131c3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00131ca:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00131d0:	6a 0d                	push   0xd
c00131d2:	6a 00                	push   0x0
c00131d4:	55                   	push   ebp
c00131d5:	e8 aa d4 fe ff       	call   c0000684 <memset>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00131e2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00131e9:	0f 84 22 09 00 00    	je     c0013b11 <CPU::detectFeatures()+0x963>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	89 ef                	mov    edi,ebp
c00131f4:	6a 10                	push   0x10
c00131f6:	e8 6b fe ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c00131fb:	83 e0 01             	and    eax,0x1
c00131fe:	8d 14 00             	lea    edx,[eax+eax*1]
c0013201:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013207:	83 e0 fd             	and    eax,0xfffffffd
c001320a:	09 d0                	or     eax,edx
c001320c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013212:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013219:	e8 48 fe ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c001321e:	83 e0 01             	and    eax,0x1
c0013221:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013228:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001322e:	83 e0 fb             	and    eax,0xfffffffb
c0013231:	09 d0                	or     eax,edx
c0013233:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013239:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013240:	e8 21 fe ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0013245:	83 e0 01             	and    eax,0x1
c0013248:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001324f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013255:	83 e0 f7             	and    eax,0xfffffff7
c0013258:	09 d0                	or     eax,edx
c001325a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013260:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013267:	e8 fa fd ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c001326c:	83 e0 01             	and    eax,0x1
c001326f:	c1 e0 04             	shl    eax,0x4
c0013272:	88 c2                	mov    dl,al
c0013274:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001327a:	83 e0 ef             	and    eax,0xffffffef
c001327d:	09 d0                	or     eax,edx
c001327f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013285:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001328c:	e8 d5 fd ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c0013291:	83 e0 01             	and    eax,0x1
c0013294:	c1 e0 05             	shl    eax,0x5
c0013297:	88 c2                	mov    dl,al
c0013299:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001329f:	83 e0 df             	and    eax,0xffffffdf
c00132a2:	09 d0                	or     eax,edx
c00132a4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00132aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00132b1:	e8 b0 fd ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c00132b6:	83 e0 01             	and    eax,0x1
c00132b9:	8d 14 00             	lea    edx,[eax+eax*1]
c00132bc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00132c2:	83 e0 fd             	and    eax,0xfffffffd
c00132c5:	09 d0                	or     eax,edx
c00132c7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00132cd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00132d4:	e8 8d fd ff ff       	call   c0013066 <CPU::cpuidCheckEDX(unsigned int)>
c00132d9:	83 e0 01             	and    eax,0x1
c00132dc:	c1 e0 06             	shl    eax,0x6
c00132df:	88 c2                	mov    dl,al
c00132e1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00132e7:	83 e0 bf             	and    eax,0xffffffbf
c00132ea:	09 d0                	or     eax,edx
c00132ec:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00132f2:	58                   	pop    eax
c00132f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132f7:	50                   	push   eax
c00132f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132fc:	50                   	push   eax
c00132fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013301:	56                   	push   esi
c0013302:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013306:	50                   	push   eax
c0013307:	6a 00                	push   0x0
c0013309:	e8 d4 fc ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001330e:	b8 04 00 00 00       	mov    eax,0x4
c0013313:	89 c1                	mov    ecx,eax
c0013315:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013317:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001331d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013321:	89 c1                	mov    ecx,eax
c0013323:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013325:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001332b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001332f:	89 c1                	mov    ecx,eax
c0013331:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013333:	83 c4 18             	add    esp,0x18
c0013336:	68 c8 4d 02 c0       	push   0xc0024dc8
c001333b:	55                   	push   ebp
c001333c:	e8 8b d4 fe ff       	call   c00007cc <strcmp>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	85 c0                	test   eax,eax
c0013346:	75 0f                	jne    c0013357 <CPU::detectFeatures()+0x1a9>
c0013348:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013352:	e9 22 02 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013357:	50                   	push   eax
c0013358:	50                   	push   eax
c0013359:	68 d5 4d 02 c0       	push   0xc0024dd5
c001335e:	55                   	push   ebp
c001335f:	e8 68 d4 fe ff       	call   c00007cc <strcmp>
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	85 c0                	test   eax,eax
c0013369:	74 dd                	je     c0013348 <CPU::detectFeatures()+0x19a>
c001336b:	50                   	push   eax
c001336c:	50                   	push   eax
c001336d:	68 e2 4d 02 c0       	push   0xc0024de2
c0013372:	55                   	push   ebp
c0013373:	e8 54 d4 fe ff       	call   c00007cc <strcmp>
c0013378:	83 c4 10             	add    esp,0x10
c001337b:	85 c0                	test   eax,eax
c001337d:	74 2a                	je     c00133a9 <CPU::detectFeatures()+0x1fb>
c001337f:	50                   	push   eax
c0013380:	50                   	push   eax
c0013381:	68 ef 4d 02 c0       	push   0xc0024def
c0013386:	55                   	push   ebp
c0013387:	e8 40 d4 fe ff       	call   c00007cc <strcmp>
c001338c:	83 c4 10             	add    esp,0x10
c001338f:	85 c0                	test   eax,eax
c0013391:	74 16                	je     c00133a9 <CPU::detectFeatures()+0x1fb>
c0013393:	50                   	push   eax
c0013394:	50                   	push   eax
c0013395:	68 fc 4d 02 c0       	push   0xc0024dfc
c001339a:	55                   	push   ebp
c001339b:	e8 2c d4 fe ff       	call   c00007cc <strcmp>
c00133a0:	83 c4 10             	add    esp,0x10
c00133a3:	85 c0                	test   eax,eax
c00133a5:	74 48                	je     c00133ef <CPU::detectFeatures()+0x241>
c00133a7:	eb 0f                	jmp    c00133b8 <CPU::detectFeatures()+0x20a>
c00133a9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00133b3:	e9 c1 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00133b8:	50                   	push   eax
c00133b9:	50                   	push   eax
c00133ba:	68 09 4e 02 c0       	push   0xc0024e09
c00133bf:	55                   	push   ebp
c00133c0:	e8 07 d4 fe ff       	call   c00007cc <strcmp>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	85 c0                	test   eax,eax
c00133ca:	74 23                	je     c00133ef <CPU::detectFeatures()+0x241>
c00133cc:	57                   	push   edi
c00133cd:	57                   	push   edi
c00133ce:	68 16 4e 02 c0       	push   0xc0024e16
c00133d3:	55                   	push   ebp
c00133d4:	e8 f3 d3 fe ff       	call   c00007cc <strcmp>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	85 c0                	test   eax,eax
c00133de:	75 1e                	jne    c00133fe <CPU::detectFeatures()+0x250>
c00133e0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00133ea:	e9 8a 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00133ef:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00133f9:	e9 7b 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00133fe:	56                   	push   esi
c00133ff:	56                   	push   esi
c0013400:	68 23 4e 02 c0       	push   0xc0024e23
c0013405:	55                   	push   ebp
c0013406:	e8 c1 d3 fe ff       	call   c00007cc <strcmp>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	85 c0                	test   eax,eax
c0013410:	75 0f                	jne    c0013421 <CPU::detectFeatures()+0x273>
c0013412:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001341c:	e9 58 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013421:	51                   	push   ecx
c0013422:	51                   	push   ecx
c0013423:	68 e2 4d 02 c0       	push   0xc0024de2
c0013428:	55                   	push   ebp
c0013429:	e8 9e d3 fe ff       	call   c00007cc <strcmp>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	85 c0                	test   eax,eax
c0013433:	75 0f                	jne    c0013444 <CPU::detectFeatures()+0x296>
c0013435:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001343f:	e9 35 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013444:	52                   	push   edx
c0013445:	52                   	push   edx
c0013446:	68 30 4e 02 c0       	push   0xc0024e30
c001344b:	55                   	push   ebp
c001344c:	e8 7b d3 fe ff       	call   c00007cc <strcmp>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	85 c0                	test   eax,eax
c0013456:	75 0f                	jne    c0013467 <CPU::detectFeatures()+0x2b9>
c0013458:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013462:	e9 12 01 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013467:	50                   	push   eax
c0013468:	50                   	push   eax
c0013469:	68 3d 4e 02 c0       	push   0xc0024e3d
c001346e:	55                   	push   ebp
c001346f:	e8 58 d3 fe ff       	call   c00007cc <strcmp>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	85 c0                	test   eax,eax
c0013479:	75 0f                	jne    c001348a <CPU::detectFeatures()+0x2dc>
c001347b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013485:	e9 ef 00 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c001348a:	50                   	push   eax
c001348b:	50                   	push   eax
c001348c:	68 4a 4e 02 c0       	push   0xc0024e4a
c0013491:	55                   	push   ebp
c0013492:	e8 35 d3 fe ff       	call   c00007cc <strcmp>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	85 c0                	test   eax,eax
c001349c:	75 0f                	jne    c00134ad <CPU::detectFeatures()+0x2ff>
c001349e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00134a8:	e9 cc 00 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00134ad:	50                   	push   eax
c00134ae:	50                   	push   eax
c00134af:	68 57 4e 02 c0       	push   0xc0024e57
c00134b4:	55                   	push   ebp
c00134b5:	e8 12 d3 fe ff       	call   c00007cc <strcmp>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	85 c0                	test   eax,eax
c00134bf:	75 0f                	jne    c00134d0 <CPU::detectFeatures()+0x322>
c00134c1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00134cb:	e9 a9 00 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00134d0:	50                   	push   eax
c00134d1:	50                   	push   eax
c00134d2:	68 64 4e 02 c0       	push   0xc0024e64
c00134d7:	55                   	push   ebp
c00134d8:	e8 ef d2 fe ff       	call   c00007cc <strcmp>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	85 c0                	test   eax,eax
c00134e2:	75 0f                	jne    c00134f3 <CPU::detectFeatures()+0x345>
c00134e4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00134ee:	e9 86 00 00 00       	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c00134f3:	50                   	push   eax
c00134f4:	50                   	push   eax
c00134f5:	68 71 4e 02 c0       	push   0xc0024e71
c00134fa:	55                   	push   ebp
c00134fb:	e8 cc d2 fe ff       	call   c00007cc <strcmp>
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	85 c0                	test   eax,eax
c0013505:	75 0c                	jne    c0013513 <CPU::detectFeatures()+0x365>
c0013507:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013511:	eb 66                	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013513:	50                   	push   eax
c0013514:	50                   	push   eax
c0013515:	68 7e 4e 02 c0       	push   0xc0024e7e
c001351a:	55                   	push   ebp
c001351b:	e8 ac d2 fe ff       	call   c00007cc <strcmp>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	85 c0                	test   eax,eax
c0013525:	75 0c                	jne    c0013533 <CPU::detectFeatures()+0x385>
c0013527:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013531:	eb 46                	jmp    c0013579 <CPU::detectFeatures()+0x3cb>
c0013533:	57                   	push   edi
c0013534:	57                   	push   edi
c0013535:	68 8b 4e 02 c0       	push   0xc0024e8b
c001353a:	55                   	push   ebp
c001353b:	e8 8c d2 fe ff       	call   c00007cc <strcmp>
c0013540:	83 c4 10             	add    esp,0x10
c0013543:	85 c0                	test   eax,eax
c0013545:	74 e0                	je     c0013527 <CPU::detectFeatures()+0x379>
c0013547:	56                   	push   esi
c0013548:	56                   	push   esi
c0013549:	68 98 4e 02 c0       	push   0xc0024e98
c001354e:	55                   	push   ebp
c001354f:	e8 78 d2 fe ff       	call   c00007cc <strcmp>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	85 c0                	test   eax,eax
c0013559:	74 cc                	je     c0013527 <CPU::detectFeatures()+0x379>
c001355b:	51                   	push   ecx
c001355c:	51                   	push   ecx
c001355d:	68 a5 4e 02 c0       	push   0xc0024ea5
c0013562:	55                   	push   ebp
c0013563:	e8 64 d2 fe ff       	call   c00007cc <strcmp>
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	85 c0                	test   eax,eax
c001356d:	74 b8                	je     c0013527 <CPU::detectFeatures()+0x379>
c001356f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013579:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001357e:	0f 86 be 00 00 00    	jbe    c0013642 <CPU::detectFeatures()+0x494>
c0013584:	83 ec 0c             	sub    esp,0xc
c0013587:	68 80 00 00 00       	push   0x80
c001358c:	e8 31 fb ff ff       	call   c00130c2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013591:	83 e0 01             	and    eax,0x1
c0013594:	c1 e0 06             	shl    eax,0x6
c0013597:	88 c2                	mov    dl,al
c0013599:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001359f:	83 e0 bf             	and    eax,0xffffffbf
c00135a2:	09 d0                	or     eax,edx
c00135a4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00135aa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00135b1:	e8 0c fb ff ff       	call   c00130c2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00135b6:	83 e0 01             	and    eax,0x1
c00135b9:	c1 e0 04             	shl    eax,0x4
c00135bc:	88 c2                	mov    dl,al
c00135be:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00135c4:	83 e0 ef             	and    eax,0xffffffef
c00135c7:	09 d0                	or     eax,edx
c00135c9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00135cf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00135d6:	e8 e7 fa ff ff       	call   c00130c2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00135db:	c1 e0 07             	shl    eax,0x7
c00135de:	88 c2                	mov    dl,al
c00135e0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00135e6:	83 e0 7f             	and    eax,0x7f
c00135e9:	09 d0                	or     eax,edx
c00135eb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00135f1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00135f8:	e8 f3 fa ff ff       	call   c00130f0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00135fd:	83 e0 01             	and    eax,0x1
c0013600:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013607:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001360d:	83 e0 f7             	and    eax,0xfffffff7
c0013610:	09 d0                	or     eax,edx
c0013612:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013618:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001361f:	e8 cc fa ff ff       	call   c00130f0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	83 e0 01             	and    eax,0x1
c001362a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013631:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013637:	83 e0 fb             	and    eax,0xfffffffb
c001363a:	09 d0                	or     eax,edx
c001363c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013642:	83 ec 0c             	sub    esp,0xc
c0013645:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013649:	50                   	push   eax
c001364a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001364e:	50                   	push   eax
c001364f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013653:	56                   	push   esi
c0013654:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013658:	50                   	push   eax
c0013659:	6a 01                	push   0x1
c001365b:	e8 82 f9 ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013660:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013664:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001366a:	88 ca                	mov    dl,cl
c001366c:	83 e0 f0             	and    eax,0xfffffff0
c001366f:	83 e2 0f             	and    edx,0xf
c0013672:	09 d0                	or     eax,edx
c0013674:	88 ca                	mov    dl,cl
c0013676:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001367c:	c0 ea 04             	shr    dl,0x4
c001367f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013683:	0f b6 c2             	movzx  eax,dl
c0013686:	83 c4 20             	add    esp,0x20
c0013689:	c1 e0 06             	shl    eax,0x6
c001368c:	89 c7                	mov    edi,eax
c001368e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013694:	66 25 3f c0          	and    ax,0xc03f
c0013698:	09 f8                	or     eax,edi
c001369a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00136a1:	89 c8                	mov    eax,ecx
c00136a3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00136aa:	c1 e8 08             	shr    eax,0x8
c00136ad:	83 e5 3f             	and    ebp,0x3f
c00136b0:	83 e0 0f             	and    eax,0xf
c00136b3:	89 c7                	mov    edi,eax
c00136b5:	c1 e7 06             	shl    edi,0x6
c00136b8:	09 ef                	or     edi,ebp
c00136ba:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00136c1:	89 fa                	mov    edx,edi
c00136c3:	83 e5 c0             	and    ebp,0xffffffc0
c00136c6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00136cc:	88 c2                	mov    dl,al
c00136ce:	c0 ea 02             	shr    dl,0x2
c00136d1:	89 d7                	mov    edi,edx
c00136d3:	09 ef                	or     edi,ebp
c00136d5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00136db:	89 fa                	mov    edx,edi
c00136dd:	83 e5 cf             	and    ebp,0xffffffcf
c00136e0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00136e6:	89 cf                	mov    edi,ecx
c00136e8:	c1 ef 0c             	shr    edi,0xc
c00136eb:	83 e7 03             	and    edi,0x3
c00136ee:	c1 e7 04             	shl    edi,0x4
c00136f1:	09 ef                	or     edi,ebp
c00136f3:	3c 06                	cmp    al,0x6
c00136f5:	89 fa                	mov    edx,edi
c00136f7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00136fd:	74 04                	je     c0013703 <CPU::detectFeatures()+0x555>
c00136ff:	3c 0f                	cmp    al,0xf
c0013701:	75 5c                	jne    c001375f <CPU::detectFeatures()+0x5b1>
c0013703:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013707:	89 cf                	mov    edi,ecx
c0013709:	c1 ef 10             	shr    edi,0x10
c001370c:	c1 e7 04             	shl    edi,0x4
c001370f:	09 fa                	or     edx,edi
c0013711:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013717:	0f b6 d2             	movzx  edx,dl
c001371a:	66 81 e7 3f c0       	and    di,0xc03f
c001371f:	c1 e2 06             	shl    edx,0x6
c0013722:	09 fa                	or     edx,edi
c0013724:	3c 0f                	cmp    al,0xf
c0013726:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001372d:	75 30                	jne    c001375f <CPU::detectFeatures()+0x5b1>
c001372f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013735:	c1 e9 14             	shr    ecx,0x14
c0013738:	83 e0 3f             	and    eax,0x3f
c001373b:	83 c1 0f             	add    ecx,0xf
c001373e:	88 ca                	mov    dl,cl
c0013740:	c0 e9 02             	shr    cl,0x2
c0013743:	c1 e2 06             	shl    edx,0x6
c0013746:	09 d0                	or     eax,edx
c0013748:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001374e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013754:	83 e0 c0             	and    eax,0xffffffc0
c0013757:	09 c1                	or     ecx,eax
c0013759:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001375f:	83 ec 0c             	sub    esp,0xc
c0013762:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013769:	8d 44 24 28          	lea    eax,[esp+0x28]
c001376d:	50                   	push   eax
c001376e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013772:	55                   	push   ebp
c0013773:	56                   	push   esi
c0013774:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013778:	57                   	push   edi
c0013779:	68 00 00 00 80       	push   0x80000000
c001377e:	e8 5f f8 ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013783:	83 c4 20             	add    esp,0x20
c0013786:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001378e:	76 22                	jbe    c00137b2 <CPU::detectFeatures()+0x604>
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013797:	50                   	push   eax
c0013798:	55                   	push   ebp
c0013799:	56                   	push   esi
c001379a:	57                   	push   edi
c001379b:	68 01 00 00 80       	push   0x80000001
c00137a0:	e8 3d f8 ff ff       	call   c0012fe2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137a5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00137af:	83 c4 20             	add    esp,0x20
c00137b2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00137b8:	83 f8 01             	cmp    eax,0x1
c00137bb:	75 6f                	jne    c001382c <CPU::detectFeatures()+0x67e>
c00137bd:	51                   	push   ecx
c00137be:	51                   	push   ecx
c00137bf:	68 b1 4e 02 c0       	push   0xc0024eb1
c00137c4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00137c8:	56                   	push   esi
c00137c9:	e8 72 cf fe ff       	call   c0000740 <strcpy>
c00137ce:	5f                   	pop    edi
c00137cf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137d5:	5d                   	pop    ebp
c00137d6:	66 c1 e8 06          	shr    ax,0x6
c00137da:	0f b6 c0             	movzx  eax,al
c00137dd:	50                   	push   eax
c00137de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137e4:	c1 e8 0e             	shr    eax,0xe
c00137e7:	0f b6 c0             	movzx  eax,al
c00137ea:	50                   	push   eax
c00137eb:	e8 9c f4 ff ff       	call   c0012c8c <CPU::lookupIntelName(unsigned char, unsigned char)>
c00137f0:	5a                   	pop    edx
c00137f1:	59                   	pop    ecx
c00137f2:	50                   	push   eax
c00137f3:	56                   	push   esi
c00137f4:	e8 87 d0 fe ff       	call   c0000880 <strcat>
c00137f9:	5f                   	pop    edi
c00137fa:	5d                   	pop    ebp
c00137fb:	56                   	push   esi
c00137fc:	53                   	push   ebx
c00137fd:	e8 7e aa ff ff       	call   c000e280 <Device::setName(char const*)>
c0013802:	58                   	pop    eax
c0013803:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013809:	5a                   	pop    edx
c001380a:	68 b8 4e 02 c0       	push   0xc0024eb8
c001380f:	50                   	push   eax
c0013810:	e8 b7 cf fe ff       	call   c00007cc <strcmp>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	85 c0                	test   eax,eax
c001381a:	0f 85 71 03 00 00    	jne    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013820:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013827:	e9 65 03 00 00       	jmp    c0013b91 <CPU::detectFeatures()+0x9e3>
c001382c:	83 f8 02             	cmp    eax,0x2
c001382f:	0f 85 b5 00 00 00    	jne    c00138ea <CPU::detectFeatures()+0x73c>
c0013835:	57                   	push   edi
c0013836:	57                   	push   edi
c0013837:	68 ca 4e 02 c0       	push   0xc0024eca
c001383c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013840:	56                   	push   esi
c0013841:	e8 fa ce fe ff       	call   c0000740 <strcpy>
c0013846:	5d                   	pop    ebp
c0013847:	58                   	pop    eax
c0013848:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001384e:	66 c1 e8 06          	shr    ax,0x6
c0013852:	0f b6 c0             	movzx  eax,al
c0013855:	50                   	push   eax
c0013856:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001385c:	c1 e8 0e             	shr    eax,0xe
c001385f:	0f b6 c0             	movzx  eax,al
c0013862:	50                   	push   eax
c0013863:	e8 90 f2 ff ff       	call   c0012af8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013868:	5a                   	pop    edx
c0013869:	59                   	pop    ecx
c001386a:	50                   	push   eax
c001386b:	56                   	push   esi
c001386c:	e8 0f d0 fe ff       	call   c0000880 <strcat>
c0013871:	5f                   	pop    edi
c0013872:	5d                   	pop    ebp
c0013873:	56                   	push   esi
c0013874:	53                   	push   ebx
c0013875:	e8 06 aa ff ff       	call   c000e280 <Device::setName(char const*)>
c001387a:	58                   	pop    eax
c001387b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013881:	5a                   	pop    edx
c0013882:	68 cf 4e 02 c0       	push   0xc0024ecf
c0013887:	50                   	push   eax
c0013888:	e8 3f cf fe ff       	call   c00007cc <strcmp>
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	85 c0                	test   eax,eax
c0013892:	75 20                	jne    c00138b4 <CPU::detectFeatures()+0x706>
c0013894:	8b 15 a8 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274a8
c001389a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00138a0:	a8 01                	test   al,0x1
c00138a2:	74 10                	je     c00138b4 <CPU::detectFeatures()+0x706>
c00138a4:	83 e0 fe             	and    eax,0xfffffffe
c00138a7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00138ad:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00138b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138ba:	c1 e8 0e             	shr    eax,0xe
c00138bd:	3c 05                	cmp    al,0x5
c00138bf:	0f 85 cc 02 00 00    	jne    c0013b91 <CPU::detectFeatures()+0x9e3>
c00138c5:	56                   	push   esi
c00138c6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00138cc:	83 e0 0f             	and    eax,0xf
c00138cf:	50                   	push   eax
c00138d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138d6:	66 c1 e8 06          	shr    ax,0x6
c00138da:	0f b6 c0             	movzx  eax,al
c00138dd:	50                   	push   eax
c00138de:	6a 05                	push   0x5
c00138e0:	e8 89 f6 ff ff       	call   c0012f6e <CPU::AMD_K6_writeback(int, int, int)>
c00138e5:	e9 1f 02 00 00       	jmp    c0013b09 <CPU::detectFeatures()+0x95b>
c00138ea:	8d 50 fd             	lea    edx,[eax-0x3]
c00138ed:	83 fa 01             	cmp    edx,0x1
c00138f0:	76 09                	jbe    c00138fb <CPU::detectFeatures()+0x74d>
c00138f2:	83 f8 06             	cmp    eax,0x6
c00138f5:	0f 85 91 01 00 00    	jne    c0013a8c <CPU::detectFeatures()+0x8de>
c00138fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013901:	c1 ea 0e             	shr    edx,0xe
c0013904:	80 fa 05             	cmp    dl,0x5
c0013907:	75 7b                	jne    c0013984 <CPU::detectFeatures()+0x7d6>
c0013909:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001390f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013914:	66 81 fa 00 01       	cmp    dx,0x100
c0013919:	75 0c                	jne    c0013927 <CPU::detectFeatures()+0x779>
c001391b:	51                   	push   ecx
c001391c:	51                   	push   ecx
c001391d:	68 d6 4e 02 c0       	push   0xc0024ed6
c0013922:	e9 dc 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013927:	66 81 fa 00 02       	cmp    dx,0x200
c001392c:	75 0c                	jne    c001393a <CPU::detectFeatures()+0x78c>
c001392e:	52                   	push   edx
c001392f:	52                   	push   edx
c0013930:	68 e9 4e 02 c0       	push   0xc0024ee9
c0013935:	e9 c9 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c001393a:	66 81 fa 40 02       	cmp    dx,0x240
c001393f:	75 0c                	jne    c001394d <CPU::detectFeatures()+0x79f>
c0013941:	50                   	push   eax
c0013942:	50                   	push   eax
c0013943:	68 fb 4e 02 c0       	push   0xc0024efb
c0013948:	e9 b6 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c001394d:	83 f8 06             	cmp    eax,0x6
c0013950:	75 0c                	jne    c001395e <CPU::detectFeatures()+0x7b0>
c0013952:	50                   	push   eax
c0013953:	50                   	push   eax
c0013954:	68 0d 4f 02 c0       	push   0xc0024f0d
c0013959:	e9 a5 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c001395e:	83 f8 04             	cmp    eax,0x4
c0013961:	75 0c                	jne    c001396f <CPU::detectFeatures()+0x7c1>
c0013963:	50                   	push   eax
c0013964:	50                   	push   eax
c0013965:	68 19 4f 02 c0       	push   0xc0024f19
c001396a:	e9 94 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c001396f:	83 f8 03             	cmp    eax,0x3
c0013972:	0f 85 19 02 00 00    	jne    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013978:	50                   	push   eax
c0013979:	50                   	push   eax
c001397a:	68 21 4f 02 c0       	push   0xc0024f21
c001397f:	e9 7f 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013984:	80 fa 06             	cmp    dl,0x6
c0013987:	0f 85 db 00 00 00    	jne    c0013a68 <CPU::detectFeatures()+0x8ba>
c001398d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013993:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013998:	66 81 fa 80 01       	cmp    dx,0x180
c001399d:	75 0c                	jne    c00139ab <CPU::detectFeatures()+0x7fd>
c001399f:	50                   	push   eax
c00139a0:	50                   	push   eax
c00139a1:	68 2c 4f 02 c0       	push   0xc0024f2c
c00139a6:	e9 58 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c00139ab:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00139b1:	66 f7 c1 80 ff       	test   cx,0xff80
c00139b6:	75 0c                	jne    c00139c4 <CPU::detectFeatures()+0x816>
c00139b8:	50                   	push   eax
c00139b9:	50                   	push   eax
c00139ba:	68 3c 4f 02 c0       	push   0xc0024f3c
c00139bf:	e9 3f 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c00139c4:	66 81 fa 40 02       	cmp    dx,0x240
c00139c9:	75 0c                	jne    c00139d7 <CPU::detectFeatures()+0x829>
c00139cb:	55                   	push   ebp
c00139cc:	55                   	push   ebp
c00139cd:	68 43 4f 02 c0       	push   0xc0024f43
c00139d2:	e9 2c 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c00139d7:	66 81 fa 80 02       	cmp    dx,0x280
c00139dc:	75 0c                	jne    c00139ea <CPU::detectFeatures()+0x83c>
c00139de:	57                   	push   edi
c00139df:	57                   	push   edi
c00139e0:	68 4c 4f 02 c0       	push   0xc0024f4c
c00139e5:	e9 19 01 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c00139ea:	66 81 fa 40 03       	cmp    dx,0x340
c00139ef:	74 ed                	je     c00139de <CPU::detectFeatures()+0x830>
c00139f1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00139f6:	75 0c                	jne    c0013a04 <CPU::detectFeatures()+0x856>
c00139f8:	56                   	push   esi
c00139f9:	56                   	push   esi
c00139fa:	68 53 4f 02 c0       	push   0xc0024f53
c00139ff:	e9 ff 00 00 00       	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013a04:	83 f8 06             	cmp    eax,0x6
c0013a07:	0f 84 45 ff ff ff    	je     c0013952 <CPU::detectFeatures()+0x7a4>
c0013a0d:	83 f8 04             	cmp    eax,0x4
c0013a10:	0f 84 4d ff ff ff    	je     c0013963 <CPU::detectFeatures()+0x7b5>
c0013a16:	83 f8 03             	cmp    eax,0x3
c0013a19:	0f 85 72 01 00 00    	jne    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013a1f:	51                   	push   ecx
c0013a20:	51                   	push   ecx
c0013a21:	68 5c 4f 02 c0       	push   0xc0024f5c
c0013a26:	53                   	push   ebx
c0013a27:	e8 54 a8 ff ff       	call   c000e280 <Device::setName(char const*)>
c0013a2c:	b1 c1                	mov    cl,0xc1
c0013a2e:	88 c8                	mov    al,cl
c0013a30:	e6 22                	out    0x22,al
c0013a32:	e4 23                	in     al,0x23
c0013a34:	88 c2                	mov    dl,al
c0013a36:	88 c8                	mov    al,cl
c0013a38:	e6 22                	out    0x22,al
c0013a3a:	88 d0                	mov    al,dl
c0013a3c:	83 c8 10             	or     eax,0x10
c0013a3f:	e6 23                	out    0x23,al
c0013a41:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013a48:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013a4b:	89 d0                	mov    eax,edx
c0013a4d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013a53:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013a57:	40                   	inc    eax
c0013a58:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013a5e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013a63:	e9 a1 00 00 00       	jmp    c0013b09 <CPU::detectFeatures()+0x95b>
c0013a68:	83 f8 06             	cmp    eax,0x6
c0013a6b:	0f 84 e1 fe ff ff    	je     c0013952 <CPU::detectFeatures()+0x7a4>
c0013a71:	83 f8 04             	cmp    eax,0x4
c0013a74:	0f 84 e9 fe ff ff    	je     c0013963 <CPU::detectFeatures()+0x7b5>
c0013a7a:	83 f8 03             	cmp    eax,0x3
c0013a7d:	0f 85 0e 01 00 00    	jne    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013a83:	52                   	push   edx
c0013a84:	52                   	push   edx
c0013a85:	68 67 4f 02 c0       	push   0xc0024f67
c0013a8a:	eb 77                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013a8c:	83 f8 07             	cmp    eax,0x7
c0013a8f:	75 09                	jne    c0013a9a <CPU::detectFeatures()+0x8ec>
c0013a91:	50                   	push   eax
c0013a92:	50                   	push   eax
c0013a93:	68 71 4f 02 c0       	push   0xc0024f71
c0013a98:	eb 69                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013a9a:	83 f8 0a             	cmp    eax,0xa
c0013a9d:	75 09                	jne    c0013aa8 <CPU::detectFeatures()+0x8fa>
c0013a9f:	50                   	push   eax
c0013aa0:	50                   	push   eax
c0013aa1:	68 7c 4f 02 c0       	push   0xc0024f7c
c0013aa6:	eb 5b                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013aa8:	83 f8 0b             	cmp    eax,0xb
c0013aab:	75 09                	jne    c0013ab6 <CPU::detectFeatures()+0x908>
c0013aad:	50                   	push   eax
c0013aae:	50                   	push   eax
c0013aaf:	68 84 4f 02 c0       	push   0xc0024f84
c0013ab4:	eb 4d                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013ab6:	83 f8 08             	cmp    eax,0x8
c0013ab9:	75 09                	jne    c0013ac4 <CPU::detectFeatures()+0x916>
c0013abb:	50                   	push   eax
c0013abc:	50                   	push   eax
c0013abd:	68 8d 4f 02 c0       	push   0xc0024f8d
c0013ac2:	eb 3f                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013ac4:	83 f8 09             	cmp    eax,0x9
c0013ac7:	75 09                	jne    c0013ad2 <CPU::detectFeatures()+0x924>
c0013ac9:	50                   	push   eax
c0013aca:	50                   	push   eax
c0013acb:	68 95 4f 02 c0       	push   0xc0024f95
c0013ad0:	eb 31                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013ad2:	83 f8 05             	cmp    eax,0x5
c0013ad5:	75 09                	jne    c0013ae0 <CPU::detectFeatures()+0x932>
c0013ad7:	50                   	push   eax
c0013ad8:	50                   	push   eax
c0013ad9:	68 9d 4f 02 c0       	push   0xc0024f9d
c0013ade:	eb 23                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013ae0:	83 f8 0c             	cmp    eax,0xc
c0013ae3:	75 09                	jne    c0013aee <CPU::detectFeatures()+0x940>
c0013ae5:	55                   	push   ebp
c0013ae6:	55                   	push   ebp
c0013ae7:	68 ab 4f 02 c0       	push   0xc0024fab
c0013aec:	eb 15                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013aee:	83 f8 0d             	cmp    eax,0xd
c0013af1:	75 09                	jne    c0013afc <CPU::detectFeatures()+0x94e>
c0013af3:	57                   	push   edi
c0013af4:	57                   	push   edi
c0013af5:	68 b6 4f 02 c0       	push   0xc0024fb6
c0013afa:	eb 07                	jmp    c0013b03 <CPU::detectFeatures()+0x955>
c0013afc:	56                   	push   esi
c0013afd:	56                   	push   esi
c0013afe:	68 ca 4f 02 c0       	push   0xc0024fca
c0013b03:	53                   	push   ebx
c0013b04:	e8 77 a7 ff ff       	call   c000e280 <Device::setName(char const*)>
c0013b09:	83 c4 10             	add    esp,0x10
c0013b0c:	e9 80 00 00 00       	jmp    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013b11:	51                   	push   ecx
c0013b12:	51                   	push   ecx
c0013b13:	68 16 4e 02 c0       	push   0xc0024e16
c0013b18:	55                   	push   ebp
c0013b19:	e8 22 cc fe ff       	call   c0000740 <strcpy>
c0013b1e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013b28:	e8 b6 c6 fe ff       	call   c00001e3 <is486>
c0013b2d:	83 c4 10             	add    esp,0x10
c0013b30:	85 c0                	test   eax,eax
c0013b32:	74 2b                	je     c0013b5f <CPU::detectFeatures()+0x9b1>
c0013b34:	52                   	push   edx
c0013b35:	52                   	push   edx
c0013b36:	68 d6 4f 02 c0       	push   0xc0024fd6
c0013b3b:	53                   	push   ebx
c0013b3c:	e8 3f a7 ff ff       	call   c000e280 <Device::setName(char const*)>
c0013b41:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013b48:	0f 20 c0             	mov    eax,cr0
c0013b4b:	83 e0 14             	and    eax,0x14
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	83 f8 04             	cmp    eax,0x4
c0013b54:	75 1f                	jne    c0013b75 <CPU::detectFeatures()+0x9c7>
c0013b56:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013b5d:	eb 32                	jmp    c0013b91 <CPU::detectFeatures()+0x9e3>
c0013b5f:	50                   	push   eax
c0013b60:	50                   	push   eax
c0013b61:	68 e1 4f 02 c0       	push   0xc0024fe1
c0013b66:	53                   	push   ebx
c0013b67:	e8 14 a7 ff ff       	call   c000e280 <Device::setName(char const*)>
c0013b6c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013b73:	eb d3                	jmp    c0013b48 <CPU::detectFeatures()+0x99a>
c0013b75:	e8 44 c6 fe ff       	call   c00001be <hasLegacyFPU>
c0013b7a:	83 e0 01             	and    eax,0x1
c0013b7d:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b80:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013b86:	83 e0 fd             	and    eax,0xfffffffd
c0013b89:	09 d0                	or     eax,edx
c0013b8b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013b91:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013b98:	83 c4 4c             	add    esp,0x4c
c0013b9b:	5b                   	pop    ebx
c0013b9c:	5e                   	pop    esi
c0013b9d:	5f                   	pop    edi
c0013b9e:	5d                   	pop    ebp
c0013b9f:	c3                   	ret    

c0013ba0 <CPU::setupSMEP()>:
c0013ba0:	0f 20 e0             	mov    eax,cr4
c0013ba3:	0d 00 00 10 00       	or     eax,0x100000
c0013ba8:	0f 22 e0             	mov    cr4,eax
c0013bab:	c3                   	ret    

c0013bac <CPU::setupUMIP()>:
c0013bac:	0f 20 e0             	mov    eax,cr4
c0013baf:	80 cc 08             	or     ah,0x8
c0013bb2:	0f 22 e0             	mov    cr4,eax
c0013bb5:	c3                   	ret    

c0013bb6 <CPU::setupTSC()>:
c0013bb6:	0f 20 e0             	mov    eax,cr4
c0013bb9:	83 c8 04             	or     eax,0x4
c0013bbc:	0f 22 e0             	mov    cr4,eax
c0013bbf:	c3                   	ret    

c0013bc0 <CPU::setupLargePages()>:
c0013bc0:	0f 20 e0             	mov    eax,cr4
c0013bc3:	83 c8 10             	or     eax,0x10
c0013bc6:	0f 22 e0             	mov    cr4,eax
c0013bc9:	c3                   	ret    

c0013bca <CPU::setupPAT()>:
c0013bca:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0013bcf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013bd6:	74 2c                	je     c0013c04 <CPU::setupPAT()+0x3a>
c0013bd8:	53                   	push   ebx
c0013bd9:	83 ec 10             	sub    esp,0x10
c0013bdc:	68 77 02 00 00       	push   0x277
c0013be1:	50                   	push   eax
c0013be2:	e8 3d 53 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013be7:	83 e2 f8             	and    edx,0xfffffff8
c0013bea:	83 ca 01             	or     edx,0x1
c0013bed:	52                   	push   edx
c0013bee:	50                   	push   eax
c0013bef:	68 77 02 00 00       	push   0x277
c0013bf4:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c0013bfa:	e8 51 53 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013bff:	83 c4 28             	add    esp,0x28
c0013c02:	5b                   	pop    ebx
c0013c03:	c3                   	ret    
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <CPU::setupMTRR()>:
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <CPU::setupGlobalPages()>:
c0013c08:	0f 20 e0             	mov    eax,cr4
c0013c0b:	0c 80                	or     al,0x80
c0013c0d:	0f 22 e0             	mov    cr4,eax
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <CPU::allowUsermodeDataAccess()>:
c0013c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c16:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013c1d:	74 03                	je     c0013c22 <CPU::allowUsermodeDataAccess()+0x10>
c0013c1f:	0f 01 cb             	stac   
c0013c22:	c3                   	ret    
c0013c23:	90                   	nop

c0013c24 <CPU::prohibitUsermodeDataAccess()>:
c0013c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c28:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013c2f:	74 03                	je     c0013c34 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013c31:	0f 01 ca             	clac   
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <CPU::setupSMAP()>:
c0013c36:	0f 20 e0             	mov    eax,cr4
c0013c39:	0d 00 00 20 00       	or     eax,0x200000
c0013c3e:	0f 22 e0             	mov    cr4,eax
c0013c41:	eb e1                	jmp    c0013c24 <CPU::prohibitUsermodeDataAccess()>
c0013c43:	90                   	nop

c0013c44 <CPU::setupFeatures()>:
c0013c44:	53                   	push   ebx
c0013c45:	83 ec 08             	sub    esp,0x8
c0013c48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c4c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013c53:	74 18                	je     c0013c6d <CPU::setupFeatures()+0x29>
c0013c55:	83 ec 0c             	sub    esp,0xc
c0013c58:	68 ec 4f 02 c0       	push   0xc0024fec
c0013c5d:	e8 e1 8f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0013c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c65:	e8 42 ff ff ff       	call   c0013bac <CPU::setupUMIP()>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013c74:	74 18                	je     c0013c8e <CPU::setupFeatures()+0x4a>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	68 f6 4f 02 c0       	push   0xc0024ff6
c0013c7e:	e8 c0 8f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0013c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c86:	e8 2b ff ff ff       	call   c0013bb6 <CPU::setupTSC()>
c0013c8b:	83 c4 10             	add    esp,0x10
c0013c8e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013c95:	74 18                	je     c0013caf <CPU::setupFeatures()+0x6b>
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	68 ff 4f 02 c0       	push   0xc0024fff
c0013c9f:	e8 9f 8f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0013ca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ca7:	e8 14 ff ff ff       	call   c0013bc0 <CPU::setupLargePages()>
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013cb6:	74 18                	je     c0013cd0 <CPU::setupFeatures()+0x8c>
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	68 08 50 02 c0       	push   0xc0025008
c0013cc0:	e8 7e 8f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0013cc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc8:	e8 3b ff ff ff       	call   c0013c08 <CPU::setupGlobalPages()>
c0013ccd:	83 c4 10             	add    esp,0x10
c0013cd0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013cd7:	74 18                	je     c0013cf1 <CPU::setupFeatures()+0xad>
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	68 1a 50 02 c0       	push   0xc002501a
c0013ce1:	e8 5d 8f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0013ce6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce9:	e8 dc fe ff ff       	call   c0013bca <CPU::setupPAT()>
c0013cee:	83 c4 10             	add    esp,0x10
c0013cf1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013cf8:	74 11                	je     c0013d0b <CPU::setupFeatures()+0xc7>
c0013cfa:	c7 44 24 10 23 50 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025023
c0013d02:	83 c4 08             	add    esp,0x8
c0013d05:	5b                   	pop    ebx
c0013d06:	e9 38 8f ff ff       	jmp    c000cc43 <Dbg::kprintf(char const*, ...)>
c0013d0b:	83 c4 08             	add    esp,0x8
c0013d0e:	5b                   	pop    ebx
c0013d0f:	c3                   	ret    

c0013d10 <CPU::open(int, int, void*)>:
c0013d10:	57                   	push   edi
c0013d11:	56                   	push   esi
c0013d12:	53                   	push   ebx
c0013d13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d1b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013d2a:	68 2d 50 02 c0       	push   0xc002502d
c0013d2f:	e8 e9 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013d34:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013d3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d3d:	e8 7a 55 ff ff       	call   c00092bc <GDT::setup()>
c0013d42:	c7 04 24 3f 50 02 c0 	mov    DWORD PTR [esp],0xc002503f
c0013d49:	e8 cf 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013d4e:	83 c4 0c             	add    esp,0xc
c0013d51:	6a 00                	push   0x0
c0013d53:	68 ef be ad de       	push   0xdeadbeef
c0013d58:	57                   	push   edi
c0013d59:	e8 46 75 ff ff       	call   c000b2a4 <TSS::setup(unsigned long, unsigned long)>
c0013d5e:	c7 04 24 51 50 02 c0 	mov    DWORD PTR [esp],0xc0025051
c0013d65:	e8 b3 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013d6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d6d:	e8 12 75 ff ff       	call   c000b284 <TSS::flush()>
c0013d72:	c7 04 24 65 50 02 c0 	mov    DWORD PTR [esp],0xc0025065
c0013d79:	e8 9f 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013d7e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d87:	e8 9a 57 ff ff       	call   c0009526 <IDT::setup()>
c0013d8c:	c7 04 24 77 50 02 c0 	mov    DWORD PTR [esp],0xc0025077
c0013d93:	e8 85 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013d98:	b8 00 04 00 00       	mov    eax,0x400
c0013d9d:	0f 23 f8             	mov    db7,eax
c0013da0:	c7 04 24 95 50 02 c0 	mov    DWORD PTR [esp],0xc0025095
c0013da7:	e8 71 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013dac:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013db6:	e8 4e 62 ff ff       	call   c000a009 <Phys::allocatePage()>
c0013dbb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013dc1:	89 30                	mov    DWORD PTR [eax],esi
c0013dc3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013dc9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013dcc:	c7 04 24 b7 50 02 c0 	mov    DWORD PTR [esp],0xc00250b7
c0013dd3:	e8 45 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013dd8:	58                   	pop    eax
c0013dd9:	5a                   	pop    edx
c0013dda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013de0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013de4:	e8 b5 84 ff ff       	call   c000c29e <VAS::setCPUSpecific(unsigned long)>
c0013de9:	c7 04 24 df 50 02 c0 	mov    DWORD PTR [esp],0xc00250df
c0013df0:	e8 28 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013df5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df8:	e8 b1 f3 ff ff       	call   c00131ae <CPU::detectFeatures()>
c0013dfd:	c7 04 24 02 51 02 c0 	mov    DWORD PTR [esp],0xc0025102
c0013e04:	e8 14 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e09:	e8 80 b6 ff ff       	call   c000f48e <setupInterruptController()>
c0013e0e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013e14:	c7 04 24 26 51 02 c0 	mov    DWORD PTR [esp],0xc0025126
c0013e1b:	e8 fd 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e20:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c0013e25:	83 e0 10             	and    eax,0x10
c0013e28:	83 f8 01             	cmp    eax,0x1
c0013e2b:	19 c0                	sbb    eax,eax
c0013e2d:	83 e0 46             	and    eax,0x46
c0013e30:	83 c0 1e             	add    eax,0x1e
c0013e33:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e36:	e8 3d cc ff ff       	call   c0010a78 <setupTimer(int)>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013e44:	f6 05 c0 74 02 c0 20 	test   BYTE PTR ds:0xc00274c0,0x20
c0013e4b:	74 18                	je     c0013e65 <CPU::open(int, int, void*)+0x155>
c0013e4d:	83 ec 0c             	sub    esp,0xc
c0013e50:	68 41 51 02 c0       	push   0xc0025141
c0013e55:	e8 c3 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e5d:	e8 e2 fd ff ff       	call   c0013c44 <CPU::setupFeatures()>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	68 5c 51 02 c0       	push   0xc002515c
c0013e6d:	e8 ab 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e72:	83 c4 10             	add    esp,0x10
c0013e75:	31 c0                	xor    eax,eax
c0013e77:	5b                   	pop    ebx
c0013e78:	5e                   	pop    esi
c0013e79:	5f                   	pop    edi
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013e7c:	57                   	push   edi
c0013e7d:	56                   	push   esi
c0013e7e:	53                   	push   ebx
c0013e7f:	51                   	push   ecx
c0013e80:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e84:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013e87:	0f 02 c0             	lar    eax,ax
c0013e8a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013e8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e91:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013e94:	88 ca                	mov    dl,cl
c0013e96:	c0 ea 06             	shr    dl,0x6
c0013e99:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013e9d:	89 ca                	mov    edx,ecx
c0013e9f:	66 c1 ea 03          	shr    dx,0x3
c0013ea3:	83 e2 07             	and    edx,0x7
c0013ea6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013eab:	88 17                	mov    BYTE PTR [edi],dl
c0013ead:	0f 84 a6 01 00 00    	je     c0014059 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013eb3:	83 e1 07             	and    ecx,0x7
c0013eb6:	80 f9 04             	cmp    cl,0x4
c0013eb9:	0f 84 98 00 00 00    	je     c0013f57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013ebf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013ec4:	0f 95 c0             	setne  al
c0013ec7:	80 f9 05             	cmp    cl,0x5
c0013eca:	0f 95 c2             	setne  dl
c0013ecd:	08 c2                	or     dl,al
c0013ecf:	74 79                	je     c0013f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013ed1:	84 c9                	test   cl,cl
c0013ed3:	75 05                	jne    c0013eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013ed5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013ed8:	eb 3c                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013eda:	80 f9 01             	cmp    cl,0x1
c0013edd:	75 05                	jne    c0013ee4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013edf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013ee2:	eb 32                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ee4:	80 f9 02             	cmp    cl,0x2
c0013ee7:	75 05                	jne    c0013eee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013ee9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013eec:	eb 28                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013eee:	31 c0                	xor    eax,eax
c0013ef0:	80 f9 03             	cmp    cl,0x3
c0013ef3:	75 05                	jne    c0013efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013ef5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ef8:	eb 1c                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013efa:	80 f9 05             	cmp    cl,0x5
c0013efd:	75 05                	jne    c0013f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013eff:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013f02:	eb 12                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013f04:	80 f9 06             	cmp    cl,0x6
c0013f07:	75 05                	jne    c0013f0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013f09:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013f0c:	eb 08                	jmp    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013f0e:	80 f9 07             	cmp    cl,0x7
c0013f11:	75 03                	jne    c0013f16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013f13:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f16:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013f1b:	75 10                	jne    c0013f2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013f1d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013f21:	b9 03 00 00 00       	mov    ecx,0x3
c0013f26:	01 d0                	add    eax,edx
c0013f28:	e9 37 01 00 00       	jmp    c0014064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013f2d:	b9 02 00 00 00       	mov    ecx,0x2
c0013f32:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013f37:	0f 85 27 01 00 00    	jne    c0014064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013f3d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013f40:	b9 06 00 00 00       	mov    ecx,0x6
c0013f45:	e9 1a 01 00 00       	jmp    c0014064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013f4a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013f4d:	b9 06 00 00 00       	mov    ecx,0x6
c0013f52:	e9 0f 01 00 00       	jmp    c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013f57:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013f5a:	88 ca                	mov    dl,cl
c0013f5c:	c0 ea 06             	shr    dl,0x6
c0013f5f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013f63:	89 ca                	mov    edx,ecx
c0013f65:	66 c1 ea 03          	shr    dx,0x3
c0013f69:	83 e2 07             	and    edx,0x7
c0013f6c:	80 e1 07             	and    cl,0x7
c0013f6f:	75 05                	jne    c0013f76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013f71:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013f74:	eb 4c                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013f76:	80 f9 01             	cmp    cl,0x1
c0013f79:	75 05                	jne    c0013f80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013f7b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013f7e:	eb 42                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013f80:	80 f9 02             	cmp    cl,0x2
c0013f83:	75 05                	jne    c0013f8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013f85:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013f88:	eb 38                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013f8a:	80 f9 03             	cmp    cl,0x3
c0013f8d:	75 05                	jne    c0013f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013f8f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013f92:	eb 2e                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013f94:	80 f9 04             	cmp    cl,0x4
c0013f97:	75 12                	jne    c0013fab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013f99:	f6 c4 60             	test   ah,0x60
c0013f9c:	75 08                	jne    c0013fa6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013f9e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013fa1:	8d 78 14             	lea    edi,[eax+0x14]
c0013fa4:	eb 1c                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013fa6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013fa9:	eb 17                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013fab:	80 f9 05             	cmp    cl,0x5
c0013fae:	75 05                	jne    c0013fb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013fb0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013fb3:	eb 0d                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013fb5:	80 f9 06             	cmp    cl,0x6
c0013fb8:	75 05                	jne    c0013fbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013fba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013fbd:	eb 03                	jmp    c0013fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013fbf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013fc2:	84 d2                	test   dl,dl
c0013fc4:	75 05                	jne    c0013fcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013fc6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013fc9:	eb 3c                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013fcb:	80 fa 01             	cmp    dl,0x1
c0013fce:	75 05                	jne    c0013fd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013fd0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013fd3:	eb 32                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013fd5:	80 fa 02             	cmp    dl,0x2
c0013fd8:	75 05                	jne    c0013fdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013fda:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013fdd:	eb 28                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013fdf:	80 fa 03             	cmp    dl,0x3
c0013fe2:	75 05                	jne    c0013fe9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013fe4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013fe7:	eb 1e                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013fe9:	31 c0                	xor    eax,eax
c0013feb:	80 fa 04             	cmp    dl,0x4
c0013fee:	74 17                	je     c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ff0:	80 fa 05             	cmp    dl,0x5
c0013ff3:	75 05                	jne    c0013ffa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013ff5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ff8:	eb 0d                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ffa:	80 fa 06             	cmp    dl,0x6
c0013ffd:	75 05                	jne    c0014004 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013fff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014002:	eb 03                	jmp    c0014007 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014004:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014007:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001400c:	0f 94 c2             	sete   dl
c001400f:	80 f9 05             	cmp    cl,0x5
c0014012:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014016:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001401b:	d3 e0                	shl    eax,cl
c001401d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014021:	74 0a                	je     c001402d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014023:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014026:	b9 07 00 00 00       	mov    ecx,0x7
c001402b:	eb 37                	jmp    c0014064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001402d:	01 f8                	add    eax,edi
c001402f:	b9 03 00 00 00       	mov    ecx,0x3
c0014034:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014039:	74 2b                	je     c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001403b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014040:	75 0d                	jne    c001404f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014042:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014046:	01 c8                	add    eax,ecx
c0014048:	b9 04 00 00 00       	mov    ecx,0x4
c001404d:	eb 17                	jmp    c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001404f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014052:	b9 07 00 00 00       	mov    ecx,0x7
c0014057:	eb 0d                	jmp    c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014059:	b9 02 00 00 00       	mov    ecx,0x2
c001405e:	b2 01                	mov    dl,0x1
c0014060:	31 c0                	xor    eax,eax
c0014062:	eb 02                	jmp    c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014064:	31 d2                	xor    edx,edx
c0014066:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001406a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001406c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014070:	88 11                	mov    BYTE PTR [ecx],dl
c0014072:	5a                   	pop    edx
c0014073:	5b                   	pop    ebx
c0014074:	5e                   	pop    esi
c0014075:	5f                   	pop    edi
c0014076:	c3                   	ret    

c0014077 <Krnl::smpEntry()>:
c0014077:	eb fe                	jmp    c0014077 <Krnl::smpEntry()>

c0014079 <Krnl::startCPU(int)>:
c0014079:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001407e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014085:	0f 84 36 01 00 00    	je     c00141c1 <Krnl::startCPU(int)+0x148>
c001408b:	53                   	push   ebx
c001408c:	83 ec 10             	sub    esp,0x10
c001408f:	fa                   	cli    
c0014090:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0014096:	6a 1b                	push   0x1b
c0014098:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c001409e:	e8 81 4e ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00140a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140a8:	89 c3                	mov    ebx,eax
c00140aa:	58                   	pop    eax
c00140ab:	5a                   	pop    edx
c00140ac:	53                   	push   ebx
c00140ad:	68 a4 51 02 c0       	push   0xc00251a4
c00140b2:	e8 8c 8b ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00140b7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00140c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00140cf:	c1 e0 18             	shl    eax,0x18
c00140d2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00140e1:	09 c2                	or     edx,eax
c00140e3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00140e9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00140ef:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00140f5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00140fb:	80 cd c5             	or     ch,0xc5
c00140fe:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014104:	f3 90                	pause  
c0014106:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014108:	0f ba e1 0c          	bt     ecx,0xc
c001410c:	72 f6                	jb     c0014104 <Krnl::startCPU(int)+0x8b>
c001410e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014114:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001411a:	09 c1                	or     ecx,eax
c001411c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014122:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014128:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001412e:	80 cd 85             	or     ch,0x85
c0014131:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014137:	f3 90                	pause  
c0014139:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001413b:	0f ba e1 0c          	bt     ecx,0xc
c001413f:	72 f6                	jb     c0014137 <Krnl::startCPU(int)+0xbe>
c0014141:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001414b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014151:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014157:	09 c1                	or     ecx,eax
c0014159:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001415f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014165:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001416b:	81 c9 02 06 00 00    	or     ecx,0x602
c0014171:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014177:	f3 90                	pause  
c0014179:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001417b:	0f ba e1 0c          	bt     ecx,0xc
c001417f:	72 f6                	jb     c0014177 <Krnl::startCPU(int)+0xfe>
c0014181:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001418b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014191:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014197:	09 c8                	or     eax,ecx
c0014199:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001419f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00141a5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00141aa:	0d 02 06 00 00       	or     eax,0x602
c00141af:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00141b5:	f3 90                	pause  
c00141b7:	8b 02                	mov    eax,DWORD PTR [edx]
c00141b9:	0f ba e0 0c          	bt     eax,0xc
c00141bd:	72 f6                	jb     c00141b5 <Krnl::startCPU(int)+0x13c>
c00141bf:	eb fe                	jmp    c00141bf <Krnl::startCPU(int)+0x146>
c00141c1:	c3                   	ret    

c00141c2 <Krnl::startCPUs()>:
c00141c2:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00141c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00141cd:	88 c2                	mov    dl,al
c00141cf:	83 e2 0a             	and    edx,0xa
c00141d2:	80 fa 0a             	cmp    dl,0xa
c00141d5:	75 09                	jne    c00141e0 <Krnl::startCPUs()+0x1e>
c00141d7:	a8 01                	test   al,0x1
c00141d9:	74 05                	je     c00141e0 <Krnl::startCPUs()+0x1e>
c00141db:	e9 bb bf fe ff       	jmp    c000019b <prepareTramp>
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <EnvVarContainer::getEnv(char const*)>:
c00141e2:	57                   	push   edi
c00141e3:	56                   	push   esi
c00141e4:	53                   	push   ebx
c00141e5:	31 db                	xor    ebx,ebx
c00141e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141eb:	39 1e                	cmp    DWORD PTR [esi],ebx
c00141ed:	7e 2b                	jle    c001421a <EnvVarContainer::getEnv(char const*)+0x38>
c00141ef:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00141f6:	50                   	push   eax
c00141f7:	50                   	push   eax
c00141f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00141fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00141fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014202:	e8 c5 c5 fe ff       	call   c00007cc <strcmp>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	85 c0                	test   eax,eax
c001420c:	75 09                	jne    c0014217 <EnvVarContainer::getEnv(char const*)+0x35>
c001420e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014211:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014215:	eb 05                	jmp    c001421c <EnvVarContainer::getEnv(char const*)+0x3a>
c0014217:	43                   	inc    ebx
c0014218:	eb d1                	jmp    c00141eb <EnvVarContainer::getEnv(char const*)+0x9>
c001421a:	31 c0                	xor    eax,eax
c001421c:	5b                   	pop    ebx
c001421d:	5e                   	pop    esi
c001421e:	5f                   	pop    edi
c001421f:	c3                   	ret    

c0014220 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014220:	55                   	push   ebp
c0014221:	57                   	push   edi
c0014222:	56                   	push   esi
c0014223:	53                   	push   ebx
c0014224:	83 ec 28             	sub    esp,0x28
c0014227:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001422b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001422f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014233:	56                   	push   esi
c0014234:	e8 67 c4 fe ff       	call   c00006a0 <strlen>
c0014239:	40                   	inc    eax
c001423a:	89 04 24             	mov    DWORD PTR [esp],eax
c001423d:	e8 81 57 ff ff       	call   c00099c3 <malloc>
c0014242:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014249:	e8 52 c4 fe ff       	call   c00006a0 <strlen>
c001424e:	40                   	inc    eax
c001424f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014252:	e8 6c 57 ff ff       	call   c00099c3 <malloc>
c0014257:	89 34 24             	mov    DWORD PTR [esp],esi
c001425a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001425e:	e8 3d c4 fe ff       	call   c00006a0 <strlen>
c0014263:	83 c4 0c             	add    esp,0xc
c0014266:	40                   	inc    eax
c0014267:	50                   	push   eax
c0014268:	6a 00                	push   0x0
c001426a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001426e:	e8 11 c4 fe ff       	call   c0000684 <memset>
c0014273:	89 34 24             	mov    DWORD PTR [esp],esi
c0014276:	e8 25 c4 fe ff       	call   c00006a0 <strlen>
c001427b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001427f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014282:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014287:	89 de                	mov    esi,ebx
c0014289:	e8 12 c4 fe ff       	call   c00006a0 <strlen>
c001428e:	83 c4 0c             	add    esp,0xc
c0014291:	40                   	inc    eax
c0014292:	50                   	push   eax
c0014293:	6a 00                	push   0x0
c0014295:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014299:	e8 e6 c3 fe ff       	call   c0000684 <memset>
c001429e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142a1:	e8 fa c3 fe ff       	call   c00006a0 <strlen>
c00142a6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00142aa:	8d 48 01             	lea    ecx,[eax+0x1]
c00142ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00142b2:	40                   	inc    eax
c00142b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00142b6:	c1 e0 03             	shl    eax,0x3
c00142b9:	5a                   	pop    edx
c00142ba:	59                   	pop    ecx
c00142bb:	50                   	push   eax
c00142bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00142bf:	e8 eb 56 ff ff       	call   c00099af <realloc>
c00142c4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00142c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00142cb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00142ce:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00142d2:	b9 08 00 00 00       	mov    ecx,0x8
c00142d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142d9:	83 c4 2c             	add    esp,0x2c
c00142dc:	5b                   	pop    ebx
c00142dd:	5e                   	pop    esi
c00142de:	5f                   	pop    edi
c00142df:	5d                   	pop    ebp
c00142e0:	c3                   	ret    
c00142e1:	90                   	nop

c00142e2 <EnvVarContainer::deleteEnv(char const*)>:
c00142e2:	c3                   	ret    
c00142e3:	90                   	nop

c00142e4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00142e4:	55                   	push   ebp
c00142e5:	57                   	push   edi
c00142e6:	56                   	push   esi
c00142e7:	53                   	push   ebx
c00142e8:	81 ec 38 01 00 00    	sub    esp,0x138
c00142ee:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00142f5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00142fc:	68 14 01 00 00       	push   0x114
c0014301:	e8 bd 56 ff ff       	call   c00099c3 <malloc>
c0014306:	83 c4 0c             	add    esp,0xc
c0014309:	89 c3                	mov    ebx,eax
c001430b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001430e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014315:	50                   	push   eax
c0014316:	e8 93 8e ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c001431b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001431e:	e8 5d 91 ff ff       	call   c000d480 <File::exists()>
c0014323:	83 c4 10             	add    esp,0x10
c0014326:	84 c0                	test   al,al
c0014328:	75 31                	jne    c001435b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001432a:	50                   	push   eax
c001432b:	50                   	push   eax
c001432c:	6a 12                	push   0x12
c001432e:	53                   	push   ebx
c001432f:	e8 de 8e ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0014334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014336:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014339:	89 34 24             	mov    DWORD PTR [esp],esi
c001433c:	e8 5f c3 fe ff       	call   c00006a0 <strlen>
c0014341:	5a                   	pop    edx
c0014342:	31 d2                	xor    edx,edx
c0014344:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014348:	51                   	push   ecx
c0014349:	56                   	push   esi
c001434a:	52                   	push   edx
c001434b:	50                   	push   eax
c001434c:	53                   	push   ebx
c001434d:	ff d7                	call   edi
c001434f:	83 c4 14             	add    esp,0x14
c0014352:	53                   	push   ebx
c0014353:	e8 18 8f ff ff       	call   c000d270 <File::close()>
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	56                   	push   esi
c001435c:	31 f6                	xor    esi,esi
c001435e:	68 00 01 00 00       	push   0x100
c0014363:	6a 00                	push   0x0
c0014365:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014369:	50                   	push   eax
c001436a:	e8 15 c3 fe ff       	call   c0000684 <memset>
c001436f:	5f                   	pop    edi
c0014370:	58                   	pop    eax
c0014371:	6a 01                	push   0x1
c0014373:	53                   	push   ebx
c0014374:	e8 99 8e ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0014379:	83 c4 10             	add    esp,0x10
c001437c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014389:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001438d:	51                   	push   ecx
c001438e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014392:	52                   	push   edx
c0014393:	6a 00                	push   0x0
c0014395:	6a 01                	push   0x1
c0014397:	53                   	push   ebx
c0014398:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001439b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001439f:	83 c4 20             	add    esp,0x20
c00143a2:	3c 0d                	cmp    al,0xd
c00143a4:	0f 84 09 01 00 00    	je     c00144b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00143aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00143af:	0f 84 ef 00 00 00    	je     c00144a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00143b5:	3c 0a                	cmp    al,0xa
c00143b7:	74 13                	je     c00143cc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00143b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00143be:	74 0c                	je     c00143cc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00143c0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00143c6:	0f 8e d8 00 00 00    	jle    c00144a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00143cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143d0:	83 ec 0c             	sub    esp,0xc
c00143d3:	8d 78 01             	lea    edi,[eax+0x1]
c00143d6:	57                   	push   edi
c00143d7:	e8 e7 55 ff ff       	call   c00099c3 <malloc>
c00143dc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00143e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00143e4:	8d 56 04             	lea    edx,[esi+0x4]
c00143e7:	89 14 24             	mov    DWORD PTR [esp],edx
c00143ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143ee:	e8 d0 55 ff ff       	call   c00099c3 <malloc>
c00143f3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00143f7:	83 c4 0c             	add    esp,0xc
c00143fa:	57                   	push   edi
c00143fb:	6a 00                	push   0x0
c00143fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014401:	e8 7e c2 fe ff       	call   c0000684 <memset>
c0014406:	8d 74 24 30          	lea    esi,[esp+0x30]
c001440a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001440e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014412:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014414:	83 c4 0c             	add    esp,0xc
c0014417:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001441b:	52                   	push   edx
c001441c:	6a 00                	push   0x0
c001441e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014422:	e8 5d c2 fe ff       	call   c0000684 <memset>
c0014427:	8d 74 24 30          	lea    esi,[esp+0x30]
c001442b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001442f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014432:	e8 69 c2 fe ff       	call   c00006a0 <strlen>
c0014437:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001443b:	89 c1                	mov    ecx,eax
c001443d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001443f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014442:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014445:	40                   	inc    eax
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001444c:	85 d2                	test   edx,edx
c001444e:	75 0c                	jne    c001445c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	6a 08                	push   0x8
c0014455:	e8 69 55 ff ff       	call   c00099c3 <malloc>
c001445a:	eb 0c                	jmp    c0014468 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001445c:	c1 e0 03             	shl    eax,0x3
c001445f:	51                   	push   ecx
c0014460:	51                   	push   ecx
c0014461:	50                   	push   eax
c0014462:	52                   	push   edx
c0014463:	e8 47 55 ff ff       	call   c00099af <realloc>
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001446e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014471:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014474:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014478:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001447c:	b9 08 00 00 00       	mov    ecx,0x8
c0014481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014483:	31 f6                	xor    esi,esi
c0014485:	50                   	push   eax
c0014486:	68 00 01 00 00       	push   0x100
c001448b:	6a 00                	push   0x0
c001448d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014491:	50                   	push   eax
c0014492:	e8 ed c1 fe ff       	call   c0000684 <memset>
c0014497:	83 c4 10             	add    esp,0x10
c001449a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144a2:	eb 0f                	jmp    c00144b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00144a4:	3c 3d                	cmp    al,0x3d
c00144a6:	74 07                	je     c00144af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00144a8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00144ac:	46                   	inc    esi
c00144ad:	eb 04                	jmp    c00144b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00144af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00144b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00144b8:	0f 85 c6 fe ff ff    	jne    c0014384 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00144be:	81 c4 2c 01 00 00    	add    esp,0x12c
c00144c4:	5b                   	pop    ebx
c00144c5:	5e                   	pop    esi
c00144c6:	5f                   	pop    edi
c00144c7:	5d                   	pop    ebp
c00144c8:	c3                   	ret    
c00144c9:	90                   	nop

c00144ca <EnvVarContainer::__loadSystem()>:
c00144ca:	83 ec 10             	sub    esp,0x10
c00144cd:	68 80 6e 02 c0       	push   0xc0026e80
c00144d2:	68 b5 51 02 c0       	push   0xc00251b5
c00144d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144db:	e8 04 fe ff ff       	call   c00142e4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00144e0:	83 c4 1c             	add    esp,0x1c
c00144e3:	c3                   	ret    

c00144e4 <EnvVarContainer::__loadUser()>:
c00144e4:	c3                   	ret    
c00144e5:	90                   	nop

c00144e6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00144e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00144fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014506:	90                   	nop
c0014507:	c3                   	ret    

c0014508 <EnvVarContainer::~EnvVarContainer()>:
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001450f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014512:	85 c0                	test   eax,eax
c0014514:	74 1d                	je     c0014533 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001451a:	8b 00                	mov    eax,DWORD PTR [eax]
c001451c:	85 c0                	test   eax,eax
c001451e:	74 13                	je     c0014533 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014527:	83 ec 0c             	sub    esp,0xc
c001452a:	50                   	push   eax
c001452b:	e8 a3 54 ff ff       	call   c00099d3 <free>
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	90                   	nop
c0014534:	83 c4 0c             	add    esp,0xc
c0014537:	c3                   	ret    

c0014538 <Krnl::getEnv(Process*, char const*)>:
c0014538:	53                   	push   ebx
c0014539:	83 ec 08             	sub    esp,0x8
c001453c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014540:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014544:	39 05 90 89 02 c0    	cmp    DWORD PTR ds:0xc0028990,eax
c001454a:	74 04                	je     c0014550 <Krnl::getEnv(Process*, char const*)+0x18>
c001454c:	85 c0                	test   eax,eax
c001454e:	75 0b                	jne    c001455b <Krnl::getEnv(Process*, char const*)+0x23>
c0014550:	a1 74 7f 02 c0       	mov    eax,ds:0xc0027f74
c0014555:	85 c0                	test   eax,eax
c0014557:	75 19                	jne    c0014572 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014559:	eb 27                	jmp    c0014582 <Krnl::getEnv(Process*, char const*)+0x4a>
c001455b:	52                   	push   edx
c001455c:	52                   	push   edx
c001455d:	53                   	push   ebx
c001455e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014564:	e8 79 fc ff ff       	call   c00141e2 <EnvVarContainer::getEnv(char const*)>
c0014569:	83 c4 10             	add    esp,0x10
c001456c:	85 c0                	test   eax,eax
c001456e:	75 28                	jne    c0014598 <Krnl::getEnv(Process*, char const*)+0x60>
c0014570:	eb de                	jmp    c0014550 <Krnl::getEnv(Process*, char const*)+0x18>
c0014572:	52                   	push   edx
c0014573:	52                   	push   edx
c0014574:	53                   	push   ebx
c0014575:	50                   	push   eax
c0014576:	e8 67 fc ff ff       	call   c00141e2 <EnvVarContainer::getEnv(char const*)>
c001457b:	83 c4 10             	add    esp,0x10
c001457e:	85 c0                	test   eax,eax
c0014580:	75 16                	jne    c0014598 <Krnl::getEnv(Process*, char const*)+0x60>
c0014582:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014586:	a1 78 7f 02 c0       	mov    eax,ds:0xc0027f78
c001458b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001458f:	83 c4 08             	add    esp,0x8
c0014592:	5b                   	pop    ebx
c0014593:	e9 4a fc ff ff       	jmp    c00141e2 <EnvVarContainer::getEnv(char const*)>
c0014598:	83 c4 08             	add    esp,0x8
c001459b:	5b                   	pop    ebx
c001459c:	c3                   	ret    

c001459d <Krnl::setEnvSystem(char const*, char const*)>:
c001459d:	83 ec 10             	sub    esp,0x10
c00145a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a8:	ff 35 78 7f 02 c0    	push   DWORD PTR ds:0xc0027f78
c00145ae:	e8 6d fc ff ff       	call   c0014220 <EnvVarContainer::setEnv(char const*, char const*)>
c00145b3:	83 c4 1c             	add    esp,0x1c
c00145b6:	c3                   	ret    

c00145b7 <Krnl::setEnvUser(char const*, char const*)>:
c00145b7:	a1 74 7f 02 c0       	mov    eax,ds:0xc0027f74
c00145bc:	85 c0                	test   eax,eax
c00145be:	74 15                	je     c00145d5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00145c0:	83 ec 10             	sub    esp,0x10
c00145c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145cb:	50                   	push   eax
c00145cc:	e8 4f fc ff ff       	call   c0014220 <EnvVarContainer::setEnv(char const*, char const*)>
c00145d1:	83 c4 1c             	add    esp,0x1c
c00145d4:	c3                   	ret    
c00145d5:	c3                   	ret    

c00145d6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00145d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145da:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00145e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145e4:	e9 37 fc ff ff       	jmp    c0014220 <EnvVarContainer::setEnv(char const*, char const*)>

c00145e9 <Krnl::deleteEnvSystem(char const*)>:
c00145e9:	c3                   	ret    

c00145ea <Krnl::deleteEnvUser(char const*)>:
c00145ea:	c3                   	ret    

c00145eb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00145eb:	c3                   	ret    

c00145ec <Krnl::newProcessEnv(Process*)>:
c00145ec:	83 ec 28             	sub    esp,0x28
c00145ef:	6a 0c                	push   0xc
c00145f1:	e8 cd 53 ff ff       	call   c00099c3 <malloc>
c00145f6:	5a                   	pop    edx
c00145f7:	59                   	pop    ecx
c00145f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00145fc:	50                   	push   eax
c00145fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014601:	e8 e0 fe ff ff       	call   c00144e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001460a:	83 c4 2c             	add    esp,0x2c
c001460d:	c3                   	ret    

c001460e <Krnl::copyProcessEnv(Process*, Process*)>:
c001460e:	57                   	push   edi
c001460f:	56                   	push   esi
c0014610:	53                   	push   ebx
c0014611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014615:	83 ec 0c             	sub    esp,0xc
c0014618:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001461e:	6a 0c                	push   0xc
c0014620:	e8 9e 53 ff ff       	call   c00099c3 <malloc>
c0014625:	89 c3                	mov    ebx,eax
c0014627:	58                   	pop    eax
c0014628:	5a                   	pop    edx
c0014629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462d:	53                   	push   ebx
c001462e:	e8 b3 fe ff ff       	call   c00144e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014633:	8b 07                	mov    eax,DWORD PTR [edi]
c0014635:	89 03                	mov    DWORD PTR [ebx],eax
c0014637:	c1 e0 03             	shl    eax,0x3
c001463a:	89 04 24             	mov    DWORD PTR [esp],eax
c001463d:	e8 81 53 ff ff       	call   c00099c3 <malloc>
c0014642:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014645:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014647:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001464a:	c1 e1 03             	shl    ecx,0x3
c001464d:	89 c7                	mov    edi,eax
c001464f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	89 d8                	mov    eax,ebx
c0014656:	5b                   	pop    ebx
c0014657:	5e                   	pop    esi
c0014658:	5f                   	pop    edi
c0014659:	c3                   	ret    

c001465a <Krnl::loadSystemEnv()>:
c001465a:	53                   	push   ebx
c001465b:	83 ec 14             	sub    esp,0x14
c001465e:	6a 0c                	push   0xc
c0014660:	e8 5e 53 ff ff       	call   c00099c3 <malloc>
c0014665:	89 c3                	mov    ebx,eax
c0014667:	58                   	pop    eax
c0014668:	5a                   	pop    edx
c0014669:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c001466f:	53                   	push   ebx
c0014670:	e8 71 fe ff ff       	call   c00144e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0014675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014678:	89 1d 78 7f 02 c0    	mov    DWORD PTR ds:0xc0027f78,ebx
c001467e:	e8 47 fe ff ff       	call   c00144ca <EnvVarContainer::__loadSystem()>
c0014683:	83 c4 18             	add    esp,0x18
c0014686:	5b                   	pop    ebx
c0014687:	c3                   	ret    

c0014688 <Krnl::loadUserEnv()>:
c0014688:	53                   	push   ebx
c0014689:	83 ec 14             	sub    esp,0x14
c001468c:	6a 0c                	push   0xc
c001468e:	e8 30 53 ff ff       	call   c00099c3 <malloc>
c0014693:	89 c3                	mov    ebx,eax
c0014695:	58                   	pop    eax
c0014696:	5a                   	pop    edx
c0014697:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c001469d:	53                   	push   ebx
c001469e:	e8 43 fe ff ff       	call   c00144e6 <EnvVarContainer::EnvVarContainer(Process*)>
c00146a3:	89 1d 74 7f 02 c0    	mov    DWORD PTR ds:0xc0027f74,ebx
c00146a9:	83 c4 18             	add    esp,0x18
c00146ac:	5b                   	pop    ebx
c00146ad:	c3                   	ret    

c00146ae <Krnl::flushEnv()>:
c00146ae:	c3                   	ret    

c00146af <Krnl::getProcessTotalEnvCount(Process*)>:
c00146af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146b3:	8b 15 74 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f74
c00146b9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00146bf:	a1 78 7f 02 c0       	mov    eax,ds:0xc0027f78
c00146c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00146c6:	03 01                	add    eax,DWORD PTR [ecx]
c00146c8:	85 d2                	test   edx,edx
c00146ca:	74 02                	je     c00146ce <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00146cc:	03 02                	add    eax,DWORD PTR [edx]
c00146ce:	c3                   	ret    

c00146cf <Krnl::getProcessEnvPair(Process*, int)>:
c00146cf:	57                   	push   edi
c00146d0:	56                   	push   esi
c00146d1:	8b 35 74 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f74
c00146d7:	53                   	push   ebx
c00146d8:	85 f6                	test   esi,esi
c00146da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146e2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00146e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146ee:	75 16                	jne    c0014706 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00146f0:	39 c2                	cmp    edx,eax
c00146f2:	7c 16                	jl     c001470a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00146f4:	8b 0d 78 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f78
c00146fa:	8b 31                	mov    esi,DWORD PTR [ecx]
c00146fc:	01 c6                	add    esi,eax
c00146fe:	39 d6                	cmp    esi,edx
c0014700:	7e 3c                	jle    c001473e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014702:	29 c2                	sub    edx,eax
c0014704:	eb 04                	jmp    c001470a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014706:	39 c2                	cmp    edx,eax
c0014708:	7d 05                	jge    c001470f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001470a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001470d:	eb 20                	jmp    c001472f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001470f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014711:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014714:	39 d1                	cmp    ecx,edx
c0014716:	7e 04                	jle    c001471c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014718:	29 c2                	sub    edx,eax
c001471a:	eb 10                	jmp    c001472c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001471c:	8b 35 78 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f78
c0014722:	03 0e                	add    ecx,DWORD PTR [esi]
c0014724:	39 d1                	cmp    ecx,edx
c0014726:	7e 16                	jle    c001473e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014728:	29 c2                	sub    edx,eax
c001472a:	29 fa                	sub    edx,edi
c001472c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001472f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014732:	8b 02                	mov    eax,DWORD PTR [edx]
c0014734:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014737:	89 03                	mov    DWORD PTR [ebx],eax
c0014739:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001473c:	eb 1d                	jmp    c001475b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	68 d7 51 02 c0       	push   0xc00251d7
c0014746:	e8 18 00 00 00       	call   c0014763 <Krnl::panic(char const*)>
c001474b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014751:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	89 d8                	mov    eax,ebx
c001475d:	5b                   	pop    ebx
c001475e:	5e                   	pop    esi
c001475f:	5f                   	pop    edi
c0014760:	c2 04 00             	ret    0x4

c0014763 <Krnl::panic(char const*)>:
c0014763:	55                   	push   ebp
c0014764:	89 e5                	mov    ebp,esp
c0014766:	53                   	push   ebx
c0014767:	83 ec 10             	sub    esp,0x10
c001476a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001476d:	fa                   	cli    
c001476e:	c6 05 84 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f84,0x1
c0014775:	53                   	push   ebx
c0014776:	e8 a2 52 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001477b:	58                   	pop    eax
c001477c:	c6 05 80 68 02 c0 00 	mov    BYTE PTR ds:0xc0026880,0x0
c0014783:	5a                   	pop    edx
c0014784:	53                   	push   ebx
c0014785:	68 f1 51 02 c0       	push   0xc00251f1
c001478a:	e8 b4 84 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001478f:	59                   	pop    ecx
c0014790:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014795:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001479b:	e8 ab 62 ff ff       	call   c000aa4b <setActiveTerminal(VgaText*)>
c00147a0:	83 c4 0c             	add    esp,0xc
c00147a3:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00147a8:	6a 01                	push   0x1
c00147aa:	6a 0f                	push   0xf
c00147ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00147b2:	e8 f3 60 ff ff       	call   c000a8aa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00147b7:	58                   	pop    eax
c00147b8:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00147bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00147c3:	e8 04 66 ff ff       	call   c000adcc <VgaText::clearScreen()>
c00147c8:	58                   	pop    eax
c00147c9:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00147ce:	5a                   	pop    edx
c00147cf:	68 0a 52 02 c0       	push   0xc002520a
c00147d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00147da:	e8 79 67 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00147df:	59                   	pop    ecx
c00147e0:	58                   	pop    eax
c00147e1:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00147e6:	68 b0 52 02 c0       	push   0xc00252b0
c00147eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00147f1:	e8 62 67 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00147f6:	58                   	pop    eax
c00147f7:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00147fc:	5a                   	pop    edx
c00147fd:	68 26 52 02 c0       	push   0xc0025226
c0014802:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014808:	e8 4b 67 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c001480d:	59                   	pop    ecx
c001480e:	58                   	pop    eax
c001480f:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014814:	53                   	push   ebx
c0014815:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001481b:	e8 38 67 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014820:	58                   	pop    eax
c0014821:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014826:	5a                   	pop    edx
c0014827:	68 46 52 02 c0       	push   0xc0025246
c001482c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014832:	e8 21 67 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014837:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c001483c:	83 c4 10             	add    esp,0x10
c001483f:	85 c0                	test   eax,eax
c0014841:	74 02                	je     c0014845 <Krnl::panic(char const*)+0xe2>
c0014843:	ff d0                	call   eax
c0014845:	83 ec 0c             	sub    esp,0xc
c0014848:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001484b:	e8 ad 30 00 00       	call   c00178fd <Thr::getDriverNameFromAddress(unsigned long)>
c0014850:	83 c4 10             	add    esp,0x10
c0014853:	89 c3                	mov    ebx,eax
c0014855:	85 c0                	test   eax,eax
c0014857:	0f 84 4e 02 00 00    	je     c0014aab <Krnl::panic(char const*)+0x348>
c001485d:	83 ec 08             	sub    esp,0x8
c0014860:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014865:	68 ec 52 02 c0       	push   0xc00252ec
c001486a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014870:	e8 e3 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014875:	58                   	pop    eax
c0014876:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001487b:	5a                   	pop    edx
c001487c:	68 26 52 02 c0       	push   0xc0025226
c0014881:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014887:	e8 cc 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c001488c:	59                   	pop    ecx
c001488d:	58                   	pop    eax
c001488e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014893:	53                   	push   ebx
c0014894:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001489a:	e8 b9 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 ec 08             	sub    esp,0x8
c00148a5:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00148aa:	68 45 52 02 c0       	push   0xc0025245
c00148af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148b5:	e8 9e 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00148ba:	58                   	pop    eax
c00148bb:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00148c0:	5a                   	pop    edx
c00148c1:	68 44 53 02 c0       	push   0xc0025344
c00148c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148cc:	e8 87 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00148d1:	59                   	pop    ecx
c00148d2:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00148d7:	5b                   	pop    ebx
c00148d8:	68 84 53 02 c0       	push   0xc0025384
c00148dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148e3:	e8 70 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00148e8:	58                   	pop    eax
c00148e9:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00148ee:	5a                   	pop    edx
c00148ef:	68 31 52 02 c0       	push   0xc0025231
c00148f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148fa:	e8 59 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00148ff:	59                   	pop    ecx
c0014900:	5b                   	pop    ebx
c0014901:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014904:	68 49 52 02 c0       	push   0xc0025249
c0014909:	e8 35 83 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001490e:	58                   	pop    eax
c001490f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014912:	5a                   	pop    edx
c0014913:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014916:	68 52 52 02 c0       	push   0xc0025252
c001491b:	e8 23 83 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0014920:	59                   	pop    ecx
c0014921:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014924:	5b                   	pop    ebx
c0014925:	8b 00                	mov    eax,DWORD PTR [eax]
c0014927:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001492a:	68 5b 52 02 c0       	push   0xc002525b
c001492f:	e8 0f 83 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0014934:	58                   	pop    eax
c0014935:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001493a:	5a                   	pop    edx
c001493b:	68 c8 53 02 c0       	push   0xc00253c8
c0014940:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014946:	e8 0d 66 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c001494b:	59                   	pop    ecx
c001494c:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014951:	5b                   	pop    ebx
c0014952:	68 64 52 02 c0       	push   0xc0025264
c0014957:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001495d:	e8 f6 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014962:	0f 20 c0             	mov    eax,cr0
c0014965:	5a                   	pop    edx
c0014966:	59                   	pop    ecx
c0014967:	50                   	push   eax
c0014968:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001496d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014973:	e8 9a 65 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c0014978:	5b                   	pop    ebx
c0014979:	58                   	pop    eax
c001497a:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001497f:	68 6e 52 02 c0       	push   0xc002526e
c0014984:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001498a:	e8 c9 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c001498f:	0f 20 d0             	mov    eax,cr2
c0014992:	5a                   	pop    edx
c0014993:	59                   	pop    ecx
c0014994:	50                   	push   eax
c0014995:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001499a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149a0:	e8 6d 65 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c00149a5:	5b                   	pop    ebx
c00149a6:	58                   	pop    eax
c00149a7:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00149ac:	68 78 52 02 c0       	push   0xc0025278
c00149b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149b7:	e8 9c 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00149bc:	0f 20 d8             	mov    eax,cr3
c00149bf:	5a                   	pop    edx
c00149c0:	59                   	pop    ecx
c00149c1:	50                   	push   eax
c00149c2:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00149c7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149cd:	e8 40 65 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c00149d2:	5b                   	pop    ebx
c00149d3:	58                   	pop    eax
c00149d4:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00149d9:	68 8b 52 02 c0       	push   0xc002528b
c00149de:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149e4:	e8 6f 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c00149e9:	0f 20 e0             	mov    eax,cr4
c00149ec:	5a                   	pop    edx
c00149ed:	59                   	pop    ecx
c00149ee:	50                   	push   eax
c00149ef:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c00149f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149fa:	e8 13 65 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c00149ff:	5b                   	pop    ebx
c0014a00:	58                   	pop    eax
c0014a01:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a06:	68 95 52 02 c0       	push   0xc0025295
c0014a0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a11:	e8 42 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014a16:	5a                   	pop    edx
c0014a17:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a1c:	59                   	pop    ecx
c0014a1d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014a23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014a26:	50                   	push   eax
c0014a27:	e8 e6 64 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c0014a2c:	5b                   	pop    ebx
c0014a2d:	58                   	pop    eax
c0014a2e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a33:	68 ac 52 02 c0       	push   0xc00252ac
c0014a38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a3e:	e8 15 65 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014a43:	5a                   	pop    edx
c0014a44:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a49:	59                   	pop    ecx
c0014a4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014a50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014a53:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014a56:	50                   	push   eax
c0014a57:	e8 b6 64 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c0014a5c:	5b                   	pop    ebx
c0014a5d:	58                   	pop    eax
c0014a5e:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a63:	68 ac 52 02 c0       	push   0xc00252ac
c0014a68:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a6e:	e8 e5 64 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014a73:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014a78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014a7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014a81:	8b 12                	mov    edx,DWORD PTR [edx]
c0014a83:	59                   	pop    ecx
c0014a84:	5b                   	pop    ebx
c0014a85:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014a88:	50                   	push   eax
c0014a89:	e8 84 64 ff ff       	call   c000af12 <VgaText::putx(unsigned int)>
c0014a8e:	83 c4 10             	add    esp,0x10
c0014a91:	b2 fe                	mov    dl,0xfe
c0014a93:	e4 60                	in     al,0x60
c0014a95:	3c 1c                	cmp    al,0x1c
c0014a97:	74 04                	je     c0014a9d <Krnl::panic(char const*)+0x33a>
c0014a99:	3c 5a                	cmp    al,0x5a
c0014a9b:	75 f6                	jne    c0014a93 <Krnl::panic(char const*)+0x330>
c0014a9d:	e4 64                	in     al,0x64
c0014a9f:	a8 02                	test   al,0x2
c0014aa1:	75 fa                	jne    c0014a9d <Krnl::panic(char const*)+0x33a>
c0014aa3:	88 d0                	mov    al,dl
c0014aa5:	e6 64                	out    0x64,al
c0014aa7:	fa                   	cli    
c0014aa8:	f4                   	hlt    
c0014aa9:	eb e8                	jmp    c0014a93 <Krnl::panic(char const*)+0x330>
c0014aab:	50                   	push   eax
c0014aac:	50                   	push   eax
c0014aad:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014ab2:	68 18 53 02 c0       	push   0xc0025318
c0014ab7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014abd:	e8 96 64 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014ac2:	58                   	pop    eax
c0014ac3:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014ac8:	5a                   	pop    edx
c0014ac9:	68 26 52 02 c0       	push   0xc0025226
c0014ace:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad4:	e8 7f 64 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014ad9:	59                   	pop    ecx
c0014ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014adf:	5b                   	pop    ebx
c0014ae0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ae3:	83 c0 0c             	add    eax,0xc
c0014ae6:	50                   	push   eax
c0014ae7:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0014aec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014af2:	e8 61 64 ff ff       	call   c000af58 <VgaText::puts(char const*)>
c0014af7:	83 c4 10             	add    esp,0x10
c0014afa:	e9 a3 fd ff ff       	jmp    c00148a2 <Krnl::panic(char const*)+0x13f>
c0014aff:	90                   	nop

c0014b00 <Net::switchEndian16(unsigned short)>:
c0014b00:	83 ec 04             	sub    esp,0x4
c0014b03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b07:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014b0b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014b0f:	c1 f8 08             	sar    eax,0x8
c0014b12:	89 c2                	mov    edx,eax
c0014b14:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014b18:	c1 e0 08             	shl    eax,0x8
c0014b1b:	09 d0                	or     eax,edx
c0014b1d:	83 c4 04             	add    esp,0x4
c0014b20:	c3                   	ret    
c0014b21:	8d 76 00             	lea    esi,[esi+0x0]

c0014b24 <Net::switchEndian32(unsigned int)>:
c0014b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b28:	c1 e8 18             	shr    eax,0x18
c0014b2b:	89 c2                	mov    edx,eax
c0014b2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b31:	c1 e0 08             	shl    eax,0x8
c0014b34:	25 00 00 ff 00       	and    eax,0xff0000
c0014b39:	09 c2                	or     edx,eax
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	c1 e8 08             	shr    eax,0x8
c0014b42:	25 00 ff 00 00       	and    eax,0xff00
c0014b47:	09 c2                	or     edx,eax
c0014b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b4d:	c1 e0 18             	shl    eax,0x18
c0014b50:	09 d0                	or     eax,edx
c0014b52:	c3                   	ret    
c0014b53:	90                   	nop

c0014b54 <Net::crc32Calc(unsigned char*, int)>:
c0014b54:	83 ec 10             	sub    esp,0x10
c0014b57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b5c:	75 0a                	jne    c0014b68 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014b5e:	b8 00 00 00 00       	mov    eax,0x0
c0014b63:	e9 8c 00 00 00       	jmp    c0014bf4 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014b68:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b6d:	7f 09                	jg     c0014b78 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014b6f:	b8 00 00 00 00       	mov    eax,0x0
c0014b74:	eb 7e                	jmp    c0014bf4 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014b76:	66 90                	xchg   ax,ax
c0014b78:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014b80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b8c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014b90:	7d 5a                	jge    c0014bec <Net::crc32Calc(unsigned char*, int)+0x98>
c0014b92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b9a:	01 d0                	add    eax,edx
c0014b9c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9e:	0f b6 c0             	movzx  eax,al
c0014ba1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014ba5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bad:	8d 76 00             	lea    esi,[esi+0x0]
c0014bb0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014bb5:	7f 2d                	jg     c0014be4 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bbb:	83 e0 01             	and    eax,0x1
c0014bbe:	74 10                	je     c0014bd0 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc4:	d1 e8                	shr    eax,1
c0014bc6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014bcb:	eb 0b                	jmp    c0014bd8 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bd4:	d1 e8                	shr    eax,1
c0014bd6:	66 90                	xchg   ax,ax
c0014bd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bdc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014be0:	eb ce                	jmp    c0014bb0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014be2:	66 90                	xchg   ax,ax
c0014be4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014be8:	eb 9e                	jmp    c0014b88 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014bea:	66 90                	xchg   ax,ax
c0014bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bf0:	f7 d0                	not    eax
c0014bf2:	66 90                	xchg   ax,ax
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	c3                   	ret    

c0014bf8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014bf8:	57                   	push   edi
c0014bf9:	56                   	push   esi
c0014bfa:	53                   	push   ebx
c0014bfb:	83 ec 60             	sub    esp,0x60
c0014bfe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c09:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014c11:	8d 76 00             	lea    esi,[esi+0x0]
c0014c14:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014c19:	7f 1d                	jg     c0014c38 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014c1b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c22:	8d 50 01             	lea    edx,[eax+0x1]
c0014c25:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014c2c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014c2f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014c33:	eb df                	jmp    c0014c14 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014c35:	8d 76 00             	lea    esi,[esi+0x0]
c0014c38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c42:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014c49:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014c4c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014c53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c57:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014c5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c5f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014c67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014c77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014c7b:	89 c6                	mov    esi,eax
c0014c7d:	89 d7                	mov    edi,edx
c0014c7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c81:	89 c8                	mov    eax,ecx
c0014c83:	89 fa                	mov    edx,edi
c0014c85:	89 f3                	mov    ebx,esi
c0014c87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014c8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c92:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014c9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ca1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ca5:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014ca9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014cad:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014cb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014cb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014cc5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014cc9:	89 c6                	mov    esi,eax
c0014ccb:	89 d7                	mov    edi,edx
c0014ccd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ccf:	89 c8                	mov    eax,ecx
c0014cd1:	89 fa                	mov    edx,edi
c0014cd3:	89 f3                	mov    ebx,esi
c0014cd5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014cd9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014cdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ce1:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014ce9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014cf0:	0f b7 c0             	movzx  eax,ax
c0014cf3:	c1 f8 08             	sar    eax,0x8
c0014cf6:	89 c1                	mov    ecx,eax
c0014cf8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014cff:	8d 50 01             	lea    edx,[eax+0x1]
c0014d02:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d09:	88 ca                	mov    dl,cl
c0014d0b:	88 10                	mov    BYTE PTR [eax],dl
c0014d0d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014d14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d1e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014d25:	88 10                	mov    BYTE PTR [eax],dl
c0014d27:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014d2b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014d2f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014d36:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014d3a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014d3e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014d42:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014d46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014d4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014d4e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014d52:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014d56:	89 c6                	mov    esi,eax
c0014d58:	89 d7                	mov    edi,edx
c0014d5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d5c:	89 c8                	mov    eax,ecx
c0014d5e:	89 fa                	mov    edx,edi
c0014d60:	89 f3                	mov    ebx,esi
c0014d62:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014d66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014d6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d6e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014d72:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014d79:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d80:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014d84:	50                   	push   eax
c0014d85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014d89:	e8 c6 fd ff ff       	call   c0014b54 <Net::crc32Calc(unsigned char*, int)>
c0014d8e:	83 c4 08             	add    esp,0x8
c0014d91:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014d95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014d99:	c1 e8 18             	shr    eax,0x18
c0014d9c:	89 c1                	mov    ecx,eax
c0014d9e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014da5:	8d 50 01             	lea    edx,[eax+0x1]
c0014da8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014daf:	88 ca                	mov    dl,cl
c0014db1:	88 10                	mov    BYTE PTR [eax],dl
c0014db3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014db7:	c1 e8 10             	shr    eax,0x10
c0014dba:	89 c1                	mov    ecx,eax
c0014dbc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014dc3:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014dcd:	88 ca                	mov    dl,cl
c0014dcf:	88 10                	mov    BYTE PTR [eax],dl
c0014dd1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014dd5:	c1 e8 08             	shr    eax,0x8
c0014dd8:	89 c1                	mov    ecx,eax
c0014dda:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014de1:	8d 50 01             	lea    edx,[eax+0x1]
c0014de4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014deb:	88 ca                	mov    dl,cl
c0014ded:	88 10                	mov    BYTE PTR [eax],dl
c0014def:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014df6:	8d 50 01             	lea    edx,[eax+0x1]
c0014df9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014e00:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014e04:	88 10                	mov    BYTE PTR [eax],dl
c0014e06:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014e0a:	83 c4 60             	add    esp,0x60
c0014e0d:	5b                   	pop    ebx
c0014e0e:	5e                   	pop    esi
c0014e0f:	5f                   	pop    edi
c0014e10:	c3                   	ret    
c0014e11:	8d 76 00             	lea    esi,[esi+0x0]

c0014e14 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014e14:	57                   	push   edi
c0014e15:	56                   	push   esi
c0014e16:	53                   	push   ebx
c0014e17:	83 ec 70             	sub    esp,0x70
c0014e1a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014e21:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014e25:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014e2d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014e34:	83 c0 0e             	add    eax,0xe
c0014e37:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014e3b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014e42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014e46:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014e4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014e52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014e5e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014e62:	89 c6                	mov    esi,eax
c0014e64:	89 d7                	mov    edi,edx
c0014e66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e68:	89 c8                	mov    eax,ecx
c0014e6a:	89 fa                	mov    edx,edi
c0014e6c:	89 f3                	mov    ebx,esi
c0014e6e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014e72:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014e76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e7a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014e82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014e89:	83 c0 08             	add    eax,0x8
c0014e8c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014e90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014e97:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014e9b:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014ea3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014ea7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014eab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014eaf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014eb3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014eb7:	89 c6                	mov    esi,eax
c0014eb9:	89 d7                	mov    edi,edx
c0014ebb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ebd:	89 c8                	mov    eax,ecx
c0014ebf:	89 fa                	mov    edx,edi
c0014ec1:	89 f3                	mov    ebx,esi
c0014ec3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014ec7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014ecb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014ecf:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014ed7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ede:	8d 50 01             	lea    edx,[eax+0x1]
c0014ee1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ee8:	8a 00                	mov    al,BYTE PTR [eax]
c0014eea:	0f b6 c0             	movzx  eax,al
c0014eed:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014ef2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ef9:	8d 50 01             	lea    edx,[eax+0x1]
c0014efc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014f03:	8a 00                	mov    al,BYTE PTR [eax]
c0014f05:	0f b6 c0             	movzx  eax,al
c0014f08:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014f0d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014f12:	c1 e0 08             	shl    eax,0x8
c0014f15:	89 c2                	mov    edx,eax
c0014f17:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014f1b:	09 d0                	or     eax,edx
c0014f1d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014f24:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014f28:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014f30:	75 46                	jne    c0014f78 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014f32:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f39:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f3c:	66 3d dc 05          	cmp    ax,0x5dc
c0014f40:	77 16                	ja     c0014f58 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014f42:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f49:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f4c:	0f b7 c0             	movzx  eax,ax
c0014f4f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014f56:	eb 20                	jmp    c0014f78 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	68 f0 53 02 c0       	push   0xc00253f0
c0014f60:	e8 de 7c ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f6f:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014f73:	e9 18 01 00 00       	jmp    c0015090 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014f78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f7f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014f86:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014f8c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014f93:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fa7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014fab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014faf:	89 c6                	mov    esi,eax
c0014fb1:	89 d7                	mov    edi,edx
c0014fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fb5:	89 c8                	mov    eax,ecx
c0014fb7:	89 fa                	mov    edx,edi
c0014fb9:	89 f3                	mov    ebx,esi
c0014fbb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014fc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fc6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fcd:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014fd4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014fdb:	8d 50 01             	lea    edx,[eax+0x1]
c0014fde:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fe5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe7:	0f b6 c0             	movzx  eax,al
c0014fea:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014fee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ff8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fff:	8a 00                	mov    al,BYTE PTR [eax]
c0015001:	0f b6 c0             	movzx  eax,al
c0015004:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015008:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001500f:	8d 50 01             	lea    edx,[eax+0x1]
c0015012:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015019:	8a 00                	mov    al,BYTE PTR [eax]
c001501b:	0f b6 c0             	movzx  eax,al
c001501e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015022:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015029:	8d 50 01             	lea    edx,[eax+0x1]
c001502c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015033:	8a 00                	mov    al,BYTE PTR [eax]
c0015035:	0f b6 c0             	movzx  eax,al
c0015038:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001503c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015040:	c1 e0 18             	shl    eax,0x18
c0015043:	89 c2                	mov    edx,eax
c0015045:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015049:	c1 e0 10             	shl    eax,0x10
c001504c:	09 c2                	or     edx,eax
c001504e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015052:	c1 e0 08             	shl    eax,0x8
c0015055:	09 d0                	or     eax,edx
c0015057:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001505b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001505f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015066:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001506a:	83 e8 04             	sub    eax,0x4
c001506d:	83 ec 08             	sub    esp,0x8
c0015070:	50                   	push   eax
c0015071:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015075:	e8 da fa ff ff       	call   c0014b54 <Net::crc32Calc(unsigned char*, int)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015081:	0f 94 c2             	sete   dl
c0015084:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001508b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001508e:	90                   	nop
c001508f:	90                   	nop
c0015090:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015097:	83 c4 70             	add    esp,0x70
c001509a:	5b                   	pop    ebx
c001509b:	5e                   	pop    esi
c001509c:	5f                   	pop    edi
c001509d:	c2 04 00             	ret    0x4

c00150a0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00150a0:	55                   	push   ebp
c00150a1:	57                   	push   edi
c00150a2:	56                   	push   esi
c00150a3:	53                   	push   ebx
c00150a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00150aa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00150b1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00150b3:	8d 6e 01             	lea    ebp,[esi+0x1]
c00150b6:	80 fb 40             	cmp    bl,0x40
c00150b9:	75 1b                	jne    c00150d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00150bb:	8a 16                	mov    dl,BYTE PTR [esi]
c00150bd:	84 d2                	test   dl,dl
c00150bf:	0f 84 f1 00 00 00    	je     c00151b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150c5:	8d 46 01             	lea    eax,[esi+0x1]
c00150c8:	80 fa 3a             	cmp    dl,0x3a
c00150cb:	74 04                	je     c00150d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00150cd:	89 c6                	mov    esi,eax
c00150cf:	eb ea                	jmp    c00150bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00150d1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00150d4:	89 c6                	mov    esi,eax
c00150d6:	50                   	push   eax
c00150d7:	6a 40                	push   0x40
c00150d9:	6a 00                	push   0x0
c00150db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00150df:	50                   	push   eax
c00150e0:	e8 9f b5 fe ff       	call   c0000684 <memset>
c00150e5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00150ec:	31 c0                	xor    eax,eax
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	8a 0f                	mov    cl,BYTE PTR [edi]
c00150f3:	84 c9                	test   cl,cl
c00150f5:	0f 84 bb 00 00 00    	je     c00151b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150fb:	3d c7 00 00 00       	cmp    eax,0xc7
c0015100:	0f 8f b0 00 00 00    	jg     c00151b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015106:	80 f9 0a             	cmp    cl,0xa
c0015109:	0f 85 98 00 00 00    	jne    c00151a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001510f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015114:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015118:	a8 df                	test   al,0xdf
c001511a:	0f 94 c1             	sete   cl
c001511d:	3c 23                	cmp    al,0x23
c001511f:	0f 94 c2             	sete   dl
c0015122:	08 d1                	or     cl,dl
c0015124:	75 4a                	jne    c0015170 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015126:	8d 50 f7             	lea    edx,[eax-0x9]
c0015129:	80 fa 01             	cmp    dl,0x1
c001512c:	76 42                	jbe    c0015170 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001512e:	3c 5b                	cmp    al,0x5b
c0015130:	75 42                	jne    c0015174 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015132:	80 fb 40             	cmp    bl,0x40
c0015135:	75 39                	jne    c0015170 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015137:	83 ec 0c             	sub    esp,0xc
c001513a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001513e:	52                   	push   edx
c001513f:	e8 5c b5 fe ff       	call   c00006a0 <strlen>
c0015144:	83 c4 10             	add    esp,0x10
c0015147:	83 f8 3f             	cmp    eax,0x3f
c001514a:	77 6a                	ja     c00151b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001514c:	50                   	push   eax
c001514d:	50                   	push   eax
c001514e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015152:	52                   	push   edx
c0015153:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015157:	52                   	push   edx
c0015158:	e8 e3 b5 fe ff       	call   c0000740 <strcpy>
c001515d:	58                   	pop    eax
c001515e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015162:	52                   	push   edx
c0015163:	e8 38 b5 fe ff       	call   c00006a0 <strlen>
c0015168:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	31 d2                	xor    edx,edx
c0015172:	eb 3a                	jmp    c00151ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015174:	80 fb 40             	cmp    bl,0x40
c0015177:	74 06                	je     c001517f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015179:	8d 44 24 58          	lea    eax,[esp+0x58]
c001517d:	eb 20                	jmp    c001519f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001517f:	50                   	push   eax
c0015180:	50                   	push   eax
c0015181:	55                   	push   ebp
c0015182:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015186:	50                   	push   eax
c0015187:	e8 40 b6 fe ff       	call   c00007cc <strcmp>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	85 c0                	test   eax,eax
c0015191:	75 dd                	jne    c0015170 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015193:	eb e4                	jmp    c0015179 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015195:	8d 50 01             	lea    edx,[eax+0x1]
c0015198:	80 f9 3d             	cmp    cl,0x3d
c001519b:	74 1d                	je     c00151ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001519d:	89 d0                	mov    eax,edx
c001519f:	8a 08                	mov    cl,BYTE PTR [eax]
c00151a1:	84 c9                	test   cl,cl
c00151a3:	75 f0                	jne    c0015195 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00151a5:	eb 0f                	jmp    c00151b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151a7:	8d 50 01             	lea    edx,[eax+0x1]
c00151aa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00151ae:	47                   	inc    edi
c00151af:	89 d0                	mov    eax,edx
c00151b1:	e9 3b ff ff ff       	jmp    c00150f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00151b6:	31 c0                	xor    eax,eax
c00151b8:	eb 33                	jmp    c00151ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00151ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00151be:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00151c1:	50                   	push   eax
c00151c2:	50                   	push   eax
c00151c3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00151c7:	50                   	push   eax
c00151c8:	56                   	push   esi
c00151c9:	e8 fe b5 fe ff       	call   c00007cc <strcmp>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	85 c0                	test   eax,eax
c00151d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151d7:	75 97                	jne    c0015170 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151d9:	51                   	push   ecx
c00151da:	51                   	push   ecx
c00151db:	52                   	push   edx
c00151dc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00151e3:	e8 58 b5 fe ff       	call   c0000740 <strcpy>
c00151e8:	83 c4 10             	add    esp,0x10
c00151eb:	b0 01                	mov    al,0x1
c00151ed:	81 c4 2c 01 00 00    	add    esp,0x12c
c00151f3:	5b                   	pop    ebx
c00151f4:	5e                   	pop    esi
c00151f5:	5f                   	pop    edi
c00151f6:	5d                   	pop    ebp
c00151f7:	c3                   	ret    

c00151f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00151f8:	57                   	push   edi
c00151f9:	56                   	push   esi
c00151fa:	53                   	push   ebx
c00151fb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015201:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015208:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001520f:	53                   	push   ebx
c0015210:	e8 8b b4 fe ff       	call   c00006a0 <strlen>
c0015215:	89 34 24             	mov    DWORD PTR [esp],esi
c0015218:	89 c7                	mov    edi,eax
c001521a:	e8 81 b4 fe ff       	call   c00006a0 <strlen>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015226:	3d ff 00 00 00       	cmp    eax,0xff
c001522b:	0f 87 d3 00 00 00    	ja     c0015304 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015231:	57                   	push   edi
c0015232:	57                   	push   edi
c0015233:	56                   	push   esi
c0015234:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015238:	56                   	push   esi
c0015239:	e8 02 b5 fe ff       	call   c0000740 <strcpy>
c001523e:	58                   	pop    eax
c001523f:	5a                   	pop    edx
c0015240:	68 92 57 02 c0       	push   0xc0025792
c0015245:	56                   	push   esi
c0015246:	e8 35 b6 fe ff       	call   c0000880 <strcat>
c001524b:	59                   	pop    ecx
c001524c:	5f                   	pop    edi
c001524d:	53                   	push   ebx
c001524e:	56                   	push   esi
c001524f:	e8 2c b6 fe ff       	call   c0000880 <strcat>
c0015254:	58                   	pop    eax
c0015255:	5a                   	pop    edx
c0015256:	68 3c 54 02 c0       	push   0xc002543c
c001525b:	56                   	push   esi
c001525c:	e8 1f b6 fe ff       	call   c0000880 <strcat>
c0015261:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015268:	e8 56 47 ff ff       	call   c00099c3 <malloc>
c001526d:	83 c4 0c             	add    esp,0xc
c0015270:	89 c3                	mov    ebx,eax
c0015272:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0015278:	56                   	push   esi
c0015279:	50                   	push   eax
c001527a:	e8 2f 7f ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	85 db                	test   ebx,ebx
c0015284:	74 7e                	je     c0015304 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015286:	51                   	push   ecx
c0015287:	51                   	push   ecx
c0015288:	6a 01                	push   0x1
c001528a:	53                   	push   ebx
c001528b:	e8 82 7f ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	85 c0                	test   eax,eax
c0015295:	74 08                	je     c001529f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015297:	83 ec 0c             	sub    esp,0xc
c001529a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001529c:	53                   	push   ebx
c001529d:	eb 5f                	jmp    c00152fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001529f:	52                   	push   edx
c00152a0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00152a4:	50                   	push   eax
c00152a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00152a9:	50                   	push   eax
c00152aa:	53                   	push   ebx
c00152ab:	e8 0e 82 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c00152b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	89 c1                	mov    ecx,eax
c00152b9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00152bd:	74 31                	je     c00152f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00152bf:	83 ec 0c             	sub    esp,0xc
c00152c2:	50                   	push   eax
c00152c3:	e8 fb 46 ff ff       	call   c00099c3 <malloc>
c00152c8:	89 c6                	mov    esi,eax
c00152ca:	58                   	pop    eax
c00152cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00152d1:	52                   	push   edx
c00152d2:	56                   	push   esi
c00152d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00152d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00152db:	53                   	push   ebx
c00152dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00152df:	83 c4 20             	add    esp,0x20
c00152e2:	85 c0                	test   eax,eax
c00152e4:	75 0a                	jne    c00152f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00152e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00152ee:	74 18                	je     c0015308 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	53                   	push   ebx
c00152f4:	e8 77 7f ff ff       	call   c000d270 <File::close()>
c00152f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	31 c0                	xor    eax,eax
c0015306:	eb 3b                	jmp    c0015343 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015308:	83 ec 0c             	sub    esp,0xc
c001530b:	53                   	push   ebx
c001530c:	e8 5f 7f ff ff       	call   c000d270 <File::close()>
c0015311:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015313:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015316:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015319:	83 c4 0c             	add    esp,0xc
c001531c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015323:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001532a:	56                   	push   esi
c001532b:	e8 70 fd ff ff       	call   c00150a0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015330:	89 34 24             	mov    DWORD PTR [esp],esi
c0015333:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015337:	e8 97 46 ff ff       	call   c00099d3 <free>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015343:	81 c4 20 01 00 00    	add    esp,0x120
c0015349:	5b                   	pop    ebx
c001534a:	5e                   	pop    esi
c001534b:	5f                   	pop    edi
c001534c:	c3                   	ret    

c001534d <Reg::getLine(char*, char*, char*)>:
c001534d:	57                   	push   edi
c001534e:	56                   	push   esi
c001534f:	53                   	push   ebx
c0015350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015354:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015358:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001535c:	57                   	push   edi
c001535d:	56                   	push   esi
c001535e:	53                   	push   ebx
c001535f:	68 41 54 02 c0       	push   0xc0025441
c0015364:	e8 8f fe ff ff       	call   c00151f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	84 c0                	test   al,al
c001536e:	75 10                	jne    c0015380 <Reg::getLine(char*, char*, char*)+0x33>
c0015370:	57                   	push   edi
c0015371:	56                   	push   esi
c0015372:	53                   	push   ebx
c0015373:	68 66 54 02 c0       	push   0xc0025466
c0015378:	e8 7b fe ff ff       	call   c00151f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	5b                   	pop    ebx
c0015381:	5e                   	pop    esi
c0015382:	5f                   	pop    edi
c0015383:	c3                   	ret    

c0015384 <Reg::readInt(char*, char*, int*)>:
c0015384:	55                   	push   ebp
c0015385:	57                   	push   edi
c0015386:	56                   	push   esi
c0015387:	53                   	push   ebx
c0015388:	81 ec f0 00 00 00    	sub    esp,0xf0
c001538e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015392:	57                   	push   edi
c0015393:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001539a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00153a1:	e8 a7 ff ff ff       	call   c001534d <Reg::getLine(char*, char*, char*)>
c00153a6:	83 c4 10             	add    esp,0x10
c00153a9:	84 c0                	test   al,al
c00153ab:	0f 84 b3 00 00 00    	je     c0015464 <Reg::readInt(char*, char*, int*)+0xe0>
c00153b1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00153b5:	80 fa 2b             	cmp    dl,0x2b
c00153b8:	74 0c                	je     c00153c6 <Reg::readInt(char*, char*, int*)+0x42>
c00153ba:	80 fa 2d             	cmp    dl,0x2d
c00153bd:	75 0e                	jne    c00153cd <Reg::readInt(char*, char*, int*)+0x49>
c00153bf:	ba 01 00 00 00       	mov    edx,0x1
c00153c4:	eb 0b                	jmp    c00153d1 <Reg::readInt(char*, char*, int*)+0x4d>
c00153c6:	ba 01 00 00 00       	mov    edx,0x1
c00153cb:	eb 02                	jmp    c00153cf <Reg::readInt(char*, char*, int*)+0x4b>
c00153cd:	31 d2                	xor    edx,edx
c00153cf:	31 c0                	xor    eax,eax
c00153d1:	be 0a 00 00 00       	mov    esi,0xa
c00153d6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00153db:	75 20                	jne    c00153fd <Reg::readInt(char*, char*, int*)+0x79>
c00153dd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00153e1:	80 f9 78             	cmp    cl,0x78
c00153e4:	75 0a                	jne    c00153f0 <Reg::readInt(char*, char*, int*)+0x6c>
c00153e6:	83 c2 02             	add    edx,0x2
c00153e9:	be 10 00 00 00       	mov    esi,0x10
c00153ee:	eb 0d                	jmp    c00153fd <Reg::readInt(char*, char*, int*)+0x79>
c00153f0:	80 f9 62             	cmp    cl,0x62
c00153f3:	75 08                	jne    c00153fd <Reg::readInt(char*, char*, int*)+0x79>
c00153f5:	83 c2 02             	add    edx,0x2
c00153f8:	be 02 00 00 00       	mov    esi,0x2
c00153fd:	01 d7                	add    edi,edx
c00153ff:	31 d2                	xor    edx,edx
c0015401:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015403:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015407:	80 fb 0d             	cmp    bl,0xd
c001540a:	0f 94 c3             	sete   bl
c001540d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015412:	0f 94 c1             	sete   cl
c0015415:	08 cb                	or     bl,cl
c0015417:	75 3a                	jne    c0015453 <Reg::readInt(char*, char*, int*)+0xcf>
c0015419:	0f af d6             	imul   edx,esi
c001541c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015421:	83 fe 10             	cmp    esi,0x10
c0015424:	75 26                	jne    c001544c <Reg::readInt(char*, char*, int*)+0xc8>
c0015426:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001542a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001542d:	89 e9                	mov    ecx,ebp
c001542f:	80 f9 05             	cmp    cl,0x5
c0015432:	77 06                	ja     c001543a <Reg::readInt(char*, char*, int*)+0xb6>
c0015434:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015438:	eb 16                	jmp    c0015450 <Reg::readInt(char*, char*, int*)+0xcc>
c001543a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001543e:	83 e9 61             	sub    ecx,0x61
c0015441:	80 f9 05             	cmp    cl,0x5
c0015444:	77 06                	ja     c001544c <Reg::readInt(char*, char*, int*)+0xc8>
c0015446:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001544a:	eb 04                	jmp    c0015450 <Reg::readInt(char*, char*, int*)+0xcc>
c001544c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015450:	47                   	inc    edi
c0015451:	eb ae                	jmp    c0015401 <Reg::readInt(char*, char*, int*)+0x7d>
c0015453:	84 c0                	test   al,al
c0015455:	74 02                	je     c0015459 <Reg::readInt(char*, char*, int*)+0xd5>
c0015457:	f7 da                	neg    edx
c0015459:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015460:	89 10                	mov    DWORD PTR [eax],edx
c0015462:	88 d8                	mov    al,bl
c0015464:	81 c4 ec 00 00 00    	add    esp,0xec
c001546a:	5b                   	pop    ebx
c001546b:	5e                   	pop    esi
c001546c:	5f                   	pop    edi
c001546d:	5d                   	pop    ebp
c001546e:	c3                   	ret    

c001546f <Reg::readString(char*, char*, char*, int)>:
c001546f:	57                   	push   edi
c0015470:	56                   	push   esi
c0015471:	53                   	push   ebx
c0015472:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015478:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001547f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015483:	57                   	push   edi
c0015484:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001548b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015492:	e8 b6 fe ff ff       	call   c001534d <Reg::getLine(char*, char*, char*)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	89 c6                	mov    esi,eax
c001549c:	84 c0                	test   al,al
c001549e:	74 44                	je     c00154e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00154a0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00154a7:	31 c0                	xor    eax,eax
c00154a9:	4a                   	dec    edx
c00154aa:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00154ad:	84 c9                	test   cl,cl
c00154af:	74 0f                	je     c00154c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00154b1:	39 c2                	cmp    edx,eax
c00154b3:	7e 0b                	jle    c00154c0 <Reg::readString(char*, char*, char*, int)+0x51>
c00154b5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00154b8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00154bd:	40                   	inc    eax
c00154be:	eb ea                	jmp    c00154aa <Reg::readString(char*, char*, char*, int)+0x3b>
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	53                   	push   ebx
c00154c4:	e8 d7 b1 fe ff       	call   c00006a0 <strlen>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00154d1:	75 11                	jne    c00154e4 <Reg::readString(char*, char*, char*, int)+0x75>
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	53                   	push   ebx
c00154d7:	e8 c4 b1 fe ff       	call   c00006a0 <strlen>
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00154e4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00154ea:	89 f0                	mov    eax,esi
c00154ec:	5b                   	pop    ebx
c00154ed:	5e                   	pop    esi
c00154ee:	5f                   	pop    edi
c00154ef:	c3                   	ret    

c00154f0 <Reg::readBool(char*, char*, bool*)>:
c00154f0:	83 ec 20             	sub    esp,0x20
c00154f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00154f7:	50                   	push   eax
c00154f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015500:	e8 7f fe ff ff       	call   c0015384 <Reg::readInt(char*, char*, int*)>
c0015505:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001550a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001550e:	0f 95 02             	setne  BYTE PTR [edx]
c0015511:	83 c4 2c             	add    esp,0x2c
c0015514:	c3                   	ret    

c0015515 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015515:	53                   	push   ebx
c0015516:	83 ec 1c             	sub    esp,0x1c
c0015519:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001551d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015521:	50                   	push   eax
c0015522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001552a:	e8 c1 ff ff ff       	call   c00154f0 <Reg::readBool(char*, char*, bool*)>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	84 c0                	test   al,al
c0015534:	74 04                	je     c001553a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015536:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001553a:	88 d8                	mov    al,bl
c001553c:	83 c4 18             	add    esp,0x18
c001553f:	5b                   	pop    ebx
c0015540:	c3                   	ret    

c0015541 <Reg::readIntWithDefault(char*, char*, int)>:
c0015541:	53                   	push   ebx
c0015542:	83 ec 1c             	sub    esp,0x1c
c0015545:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015549:	8d 44 24 10          	lea    eax,[esp+0x10]
c001554d:	50                   	push   eax
c001554e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015552:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015556:	e8 29 fe ff ff       	call   c0015384 <Reg::readInt(char*, char*, int*)>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	84 c0                	test   al,al
c0015560:	74 04                	je     c0015566 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015562:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015566:	89 d8                	mov    eax,ebx
c0015568:	83 c4 18             	add    esp,0x18
c001556b:	5b                   	pop    ebx
c001556c:	c3                   	ret    

c001556d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001556d:	57                   	push   edi
c001556e:	56                   	push   esi
c001556f:	56                   	push   esi
c0015570:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015574:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015578:	56                   	push   esi
c0015579:	57                   	push   edi
c001557a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001557e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015582:	e8 e8 fe ff ff       	call   c001546f <Reg::readString(char*, char*, char*, int)>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	84 c0                	test   al,al
c001558c:	75 1a                	jne    c00155a8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001558e:	51                   	push   ecx
c001558f:	56                   	push   esi
c0015590:	6a 00                	push   0x0
c0015592:	57                   	push   edi
c0015593:	e8 ec b0 fe ff       	call   c0000684 <memset>
c0015598:	8d 4e ff             	lea    ecx,[esi-0x1]
c001559b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001559f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155a1:	83 c4 10             	add    esp,0x10
c00155a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00155a8:	89 f8                	mov    eax,edi
c00155aa:	5a                   	pop    edx
c00155ab:	5e                   	pop    esi
c00155ac:	5f                   	pop    edi
c00155ad:	c3                   	ret    

c00155ae <Sys::eject(regs*)>:
c00155ae:	83 ec 0c             	sub    esp,0xc
c00155b1:	83 ca ff             	or     edx,0xffffffff
c00155b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155b8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00155bb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155c0:	83 e9 41             	sub    ecx,0x41
c00155c3:	83 f9 19             	cmp    ecx,0x19
c00155c6:	77 18                	ja     c00155e0 <Sys::eject(regs*)+0x32>
c00155c8:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c00155cf:	85 c9                	test   ecx,ecx
c00155d1:	74 0d                	je     c00155e0 <Sys::eject(regs*)+0x32>
c00155d3:	83 ec 0c             	sub    esp,0xc
c00155d6:	51                   	push   ecx
c00155d7:	e8 1a ad ff ff       	call   c00102f6 <LogicalDisk::eject()>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	99                   	cdq    
c00155e0:	83 c4 0c             	add    esp,0xc
c00155e3:	c3                   	ret    

c00155e4 <Sys::exit(regs*)>:
c00155e4:	83 ec 18             	sub    esp,0x18
c00155e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155ee:	e8 59 36 00 00       	call   c0018c4c <terminateTask(int)>
c00155f3:	83 c8 ff             	or     eax,0xffffffff
c00155f6:	83 c4 1c             	add    esp,0x1c
c00155f9:	89 c2                	mov    edx,eax
c00155fb:	c3                   	ret    

c00155fc <Sys::getCwd(regs*)>:
c00155fc:	83 ec 10             	sub    esp,0x10
c00155ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015603:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015606:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015609:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001560e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015611:	e8 9a 79 ff ff       	call   c000cfb0 <Fs::getcwd(Process*, char*, int)>
c0015616:	83 c4 1c             	add    esp,0x1c
c0015619:	99                   	cdq    
c001561a:	c3                   	ret    

c001561b <Sys::getPID(regs*)>:
c001561b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015620:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015623:	8b 00                	mov    eax,DWORD PTR [eax]
c0015625:	99                   	cdq    
c0015626:	c3                   	ret    

c0015627 <Sys::getRAMData(regs*)>:
c0015627:	8b 0d d8 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274d8
c001562d:	69 05 d4 74 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00274d4,0xc8
c0015637:	99                   	cdq    
c0015638:	f7 f9                	idiv   ecx
c001563a:	c1 e0 18             	shl    eax,0x18
c001563d:	09 c8                	or     eax,ecx
c001563f:	99                   	cdq    
c0015640:	c3                   	ret    

c0015641 <Sys::getVGAPtr(regs*)>:
c0015641:	55                   	push   ebp
c0015642:	57                   	push   edi
c0015643:	56                   	push   esi
c0015644:	53                   	push   ebx
c0015645:	83 ec 18             	sub    esp,0x18
c0015648:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001564c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001564f:	e8 fc 30 00 00       	call   c0018750 <Thr::processFromPID(int)>
c0015654:	83 c4 10             	add    esp,0x10
c0015657:	89 c1                	mov    ecx,eax
c0015659:	b8 01 00 00 00       	mov    eax,0x1
c001565e:	85 c9                	test   ecx,ecx
c0015660:	74 59                	je     c00156bb <Sys::getVGAPtr(regs*)+0x7a>
c0015662:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015668:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001566c:	74 0c                	je     c001567a <Sys::getVGAPtr(regs*)+0x39>
c001566e:	83 ec 0c             	sub    esp,0xc
c0015671:	53                   	push   ebx
c0015672:	e8 d4 53 ff ff       	call   c000aa4b <setActiveTerminal(VgaText*)>
c0015677:	83 c4 10             	add    esp,0x10
c001567a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001567d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015680:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015685:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001568a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001568d:	81 c3 82 00 00 00    	add    ebx,0x82
c0015693:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015699:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001569c:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001569f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00156a5:	50                   	push   eax
c00156a6:	50                   	push   eax
c00156a7:	53                   	push   ebx
c00156a8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156ab:	05 a8 0f 00 00       	add    eax,0xfa8
c00156b0:	50                   	push   eax
c00156b1:	e8 8a b0 fe ff       	call   c0000740 <strcpy>
c00156b6:	83 c4 10             	add    esp,0x10
c00156b9:	31 c0                	xor    eax,eax
c00156bb:	83 c4 0c             	add    esp,0xc
c00156be:	31 d2                	xor    edx,edx
c00156c0:	5b                   	pop    ebx
c00156c1:	5e                   	pop    esi
c00156c2:	5f                   	pop    edi
c00156c3:	5d                   	pop    ebp
c00156c4:	c3                   	ret    

c00156c5 <Sys::loadDLL(regs*)>:
c00156c5:	56                   	push   esi
c00156c6:	53                   	push   ebx
c00156c7:	31 d2                	xor    edx,edx
c00156c9:	51                   	push   ecx
c00156ca:	b8 01 00 00 00       	mov    eax,0x1
c00156cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00156d7:	0f 84 8c 00 00 00    	je     c0015769 <Sys::loadDLL(regs*)+0xa4>
c00156dd:	83 ec 0c             	sub    esp,0xc
c00156e0:	68 14 01 00 00       	push   0x114
c00156e5:	e8 d9 42 ff ff       	call   c00099c3 <malloc>
c00156ea:	83 c4 0c             	add    esp,0xc
c00156ed:	89 c3                	mov    ebx,eax
c00156ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00156f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00156fa:	53                   	push   ebx
c00156fb:	e8 ae 7a ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	31 d2                	xor    edx,edx
c0015705:	b8 02 00 00 00       	mov    eax,0x2
c001570a:	85 db                	test   ebx,ebx
c001570c:	74 5b                	je     c0015769 <Sys::loadDLL(regs*)+0xa4>
c001570e:	83 ec 0c             	sub    esp,0xc
c0015711:	53                   	push   ebx
c0015712:	e8 69 7d ff ff       	call   c000d480 <File::exists()>
c0015717:	83 c4 10             	add    esp,0x10
c001571a:	84 c0                	test   al,al
c001571c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001571e:	75 11                	jne    c0015731 <Sys::loadDLL(regs*)+0x6c>
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	53                   	push   ebx
c0015724:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	b8 03 00 00 00       	mov    eax,0x3
c001572f:	eb 36                	jmp    c0015767 <Sys::loadDLL(regs*)+0xa2>
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	53                   	push   ebx
c0015735:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015738:	58                   	pop    eax
c0015739:	5a                   	pop    edx
c001573a:	6a 00                	push   0x0
c001573c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001573f:	e8 0a 22 00 00       	call   c001794e <Thr::loadDLL(char const*, bool)>
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	89 c1                	mov    ecx,eax
c0015749:	31 d2                	xor    edx,edx
c001574b:	b8 04 00 00 00       	mov    eax,0x4
c0015750:	85 c9                	test   ecx,ecx
c0015752:	74 15                	je     c0015769 <Sys::loadDLL(regs*)+0xa4>
c0015754:	53                   	push   ebx
c0015755:	53                   	push   ebx
c0015756:	ff 35 a8 74 02 c0    	push   DWORD PTR ds:0xc00274a8
c001575c:	51                   	push   ecx
c001575d:	e8 1d 24 00 00       	call   c0017b7f <Thr::executeDLL(unsigned long, void*)>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	31 c0                	xor    eax,eax
c0015767:	31 d2                	xor    edx,edx
c0015769:	59                   	pop    ecx
c001576a:	5b                   	pop    ebx
c001576b:	5e                   	pop    esi
c001576c:	c3                   	ret    

c001576d <Sys::read(regs*)>:
c001576d:	57                   	push   edi
c001576e:	56                   	push   esi
c001576f:	53                   	push   ebx
c0015770:	83 ec 10             	sub    esp,0x10
c0015773:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015777:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001577a:	83 f8 02             	cmp    eax,0x2
c001577d:	77 10                	ja     c001578f <Sys::read(regs*)+0x22>
c001577f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015784:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015787:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001578d:	eb 0e                	jmp    c001579d <Sys::read(regs*)+0x30>
c001578f:	83 ec 0c             	sub    esp,0xc
c0015792:	50                   	push   eax
c0015793:	e8 2f 60 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	89 c1                	mov    ecx,eax
c001579d:	83 c8 ff             	or     eax,0xffffffff
c00157a0:	85 c9                	test   ecx,ecx
c00157a2:	89 c2                	mov    edx,eax
c00157a4:	74 28                	je     c00157ce <Sys::read(regs*)+0x61>
c00157a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157ae:	31 ff                	xor    edi,edi
c00157b0:	83 ec 0c             	sub    esp,0xc
c00157b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00157b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00157b9:	52                   	push   edx
c00157ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157bd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00157c0:	57                   	push   edi
c00157c1:	56                   	push   esi
c00157c2:	51                   	push   ecx
c00157c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00157ca:	83 c4 20             	add    esp,0x20
c00157cd:	99                   	cdq    
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	5b                   	pop    ebx
c00157d2:	5e                   	pop    esi
c00157d3:	5f                   	pop    edi
c00157d4:	c3                   	ret    

c00157d5 <Sys::sbrk(regs*)>:
c00157d5:	56                   	push   esi
c00157d6:	53                   	push   ebx
c00157d7:	50                   	push   eax
c00157d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00157e7:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00157ed:	85 db                	test   ebx,ebx
c00157ef:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00157f2:	74 02                	je     c00157f6 <Sys::sbrk(regs*)+0x21>
c00157f4:	79 06                	jns    c00157fc <Sys::sbrk(regs*)+0x27>
c00157f6:	89 f0                	mov    eax,esi
c00157f8:	31 d2                	xor    edx,edx
c00157fa:	eb 2a                	jmp    c0015826 <Sys::sbrk(regs*)+0x51>
c00157fc:	83 c8 ff             	or     eax,0xffffffff
c00157ff:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015805:	89 c2                	mov    edx,eax
c0015807:	77 1d                	ja     c0015826 <Sys::sbrk(regs*)+0x51>
c0015809:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001580f:	50                   	push   eax
c0015810:	c1 ea 0c             	shr    edx,0xc
c0015813:	68 07 0c 00 00       	push   0xc07
c0015818:	52                   	push   edx
c0015819:	51                   	push   ecx
c001581a:	e8 a7 68 ff ff       	call   c000c0c6 <VAS::allocatePages(int, int)>
c001581f:	89 f0                	mov    eax,esi
c0015821:	31 d2                	xor    edx,edx
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	59                   	pop    ecx
c0015827:	5b                   	pop    ebx
c0015828:	5e                   	pop    esi
c0015829:	c3                   	ret    

c001582a <Sys::setCwd(regs*)>:
c001582a:	83 ec 14             	sub    esp,0x14
c001582d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015831:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015834:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015839:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001583c:	e8 de 7c ff ff       	call   c000d51f <Fs::setcwd(Process*, char*)>
c0015841:	83 c4 1c             	add    esp,0x1c
c0015844:	99                   	cdq    
c0015845:	c3                   	ret    

c0015846 <Sys::setTime(regs*)>:
c0015846:	55                   	push   ebp
c0015847:	31 c9                	xor    ecx,ecx
c0015849:	57                   	push   edi
c001584a:	bd 0c 00 00 00       	mov    ebp,0xc
c001584f:	56                   	push   esi
c0015850:	53                   	push   ebx
c0015851:	31 db                	xor    ebx,ebx
c0015853:	83 ec 10             	sub    esp,0x10
c0015856:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001585a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001585d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015860:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015863:	89 c2                	mov    edx,eax
c0015865:	66 81 ef 6c 07       	sub    di,0x76c
c001586a:	83 e2 1f             	and    edx,0x1f
c001586d:	c1 e7 10             	shl    edi,0x10
c0015870:	42                   	inc    edx
c0015871:	c1 e8 05             	shr    eax,0x5
c0015874:	88 d1                	mov    cl,dl
c0015876:	31 d2                	xor    edx,edx
c0015878:	f7 f5                	div    ebp
c001587a:	89 dd                	mov    ebp,ebx
c001587c:	88 d5                	mov    ch,dl
c001587e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015884:	0f b7 c1             	movzx  eax,cx
c0015887:	31 d2                	xor    edx,edx
c0015889:	09 f8                	or     eax,edi
c001588b:	bf 3c 00 00 00       	mov    edi,0x3c
c0015890:	89 c1                	mov    ecx,eax
c0015892:	89 f0                	mov    eax,esi
c0015894:	f7 f7                	div    edi
c0015896:	c1 e2 10             	shl    edx,0x10
c0015899:	09 d5                	or     ebp,edx
c001589b:	31 d2                	xor    edx,edx
c001589d:	89 eb                	mov    ebx,ebp
c001589f:	f7 f7                	div    edi
c00158a1:	bf 10 0e 00 00       	mov    edi,0xe10
c00158a6:	88 d7                	mov    bh,dl
c00158a8:	89 f0                	mov    eax,esi
c00158aa:	31 d2                	xor    edx,edx
c00158ac:	f7 f7                	div    edi
c00158ae:	bf 18 00 00 00       	mov    edi,0x18
c00158b3:	31 d2                	xor    edx,edx
c00158b5:	f7 f7                	div    edi
c00158b7:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00158bc:	88 d3                	mov    bl,dl
c00158be:	53                   	push   ebx
c00158bf:	51                   	push   ecx
c00158c0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00158c6:	e8 9f 84 ff ff       	call   c000dd6a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00158cb:	83 c4 1c             	add    esp,0x1c
c00158ce:	83 f0 01             	xor    eax,0x1
c00158d1:	5b                   	pop    ebx
c00158d2:	0f b6 c0             	movzx  eax,al
c00158d5:	5e                   	pop    esi
c00158d6:	31 d2                	xor    edx,edx
c00158d8:	5f                   	pop    edi
c00158d9:	5d                   	pop    ebp
c00158da:	c3                   	ret    

c00158db <Sys::timezone(regs*)>:
c00158db:	53                   	push   ebx
c00158dc:	83 ec 08             	sub    esp,0x8
c00158df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158e3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00158e7:	75 17                	jne    c0015900 <Sys::timezone(regs*)+0x25>
c00158e9:	83 ec 0c             	sub    esp,0xc
c00158ec:	68 81 54 02 c0       	push   0xc0025481
c00158f1:	e8 4d 73 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00158f6:	83 c8 ff             	or     eax,0xffffffff
c00158f9:	83 c4 10             	add    esp,0x10
c00158fc:	89 c2                	mov    edx,eax
c00158fe:	eb 20                	jmp    c0015920 <Sys::timezone(regs*)+0x45>
c0015900:	83 ec 0c             	sub    esp,0xc
c0015903:	68 96 54 02 c0       	push   0xc0025496
c0015908:	e8 36 73 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001590d:	58                   	pop    eax
c001590e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015911:	e8 b6 81 ff ff       	call   c000dacc <User::loadClockSettings(int)>
c0015916:	83 c4 10             	add    esp,0x10
c0015919:	b8 01 00 00 00       	mov    eax,0x1
c001591e:	31 d2                	xor    edx,edx
c0015920:	83 c4 08             	add    esp,0x8
c0015923:	5b                   	pop    ebx
c0015924:	c3                   	ret    

c0015925 <Sys::write(regs*)>:
c0015925:	57                   	push   edi
c0015926:	56                   	push   esi
c0015927:	53                   	push   ebx
c0015928:	83 ec 10             	sub    esp,0x10
c001592b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001592f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015932:	83 f8 02             	cmp    eax,0x2
c0015935:	77 10                	ja     c0015947 <Sys::write(regs*)+0x22>
c0015937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001593c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015945:	eb 0e                	jmp    c0015955 <Sys::write(regs*)+0x30>
c0015947:	83 ec 0c             	sub    esp,0xc
c001594a:	50                   	push   eax
c001594b:	e8 77 5e ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	89 c1                	mov    ecx,eax
c0015955:	83 c8 ff             	or     eax,0xffffffff
c0015958:	85 c9                	test   ecx,ecx
c001595a:	89 c2                	mov    edx,eax
c001595c:	74 28                	je     c0015986 <Sys::write(regs*)+0x61>
c001595e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015966:	31 ff                	xor    edi,edi
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001596d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015971:	52                   	push   edx
c0015972:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015975:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015978:	57                   	push   edi
c0015979:	56                   	push   esi
c001597a:	51                   	push   ecx
c001597b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001597e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015982:	83 c4 20             	add    esp,0x20
c0015985:	99                   	cdq    
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	5b                   	pop    ebx
c001598a:	5e                   	pop    esi
c001598b:	5f                   	pop    edi
c001598c:	c3                   	ret    

c001598d <Sys::wsbe(regs*)>:
c001598d:	57                   	push   edi
c001598e:	b9 0b 00 00 00       	mov    ecx,0xb
c0015993:	56                   	push   esi
c0015994:	be d5 54 02 c0       	mov    esi,0xc00254d5
c0015999:	53                   	push   ebx
c001599a:	83 ec 30             	sub    esp,0x30
c001599d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00159a1:	fc                   	cld    
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00159a7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00159ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159b3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00159b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00159bb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00159be:	57                   	push   edi
c00159bf:	e8 dc ac fe ff       	call   c00006a0 <strlen>
c00159c4:	5a                   	pop    edx
c00159c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00159c9:	52                   	push   edx
c00159ca:	31 d2                	xor    edx,edx
c00159cc:	57                   	push   edi
c00159cd:	52                   	push   edx
c00159ce:	50                   	push   eax
c00159cf:	56                   	push   esi
c00159d0:	ff d3                	call   ebx
c00159d2:	83 c4 14             	add    esp,0x14
c00159d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00159d9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00159dc:	e8 6b 32 00 00       	call   c0018c4c <terminateTask(int)>
c00159e1:	83 c4 40             	add    esp,0x40
c00159e4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00159e9:	5b                   	pop    ebx
c00159ea:	31 d2                	xor    edx,edx
c00159ec:	5e                   	pop    esi
c00159ed:	5f                   	pop    edi
c00159ee:	c3                   	ret    

c00159ef <Sys::yield(regs*)>:
c00159ef:	83 ec 0c             	sub    esp,0xc
c00159f2:	fa                   	cli    
c00159f3:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c00159f9:	e8 36 29 00 00       	call   c0018334 <schedule()>
c00159fe:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0015a03:	48                   	dec    eax
c0015a04:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0015a09:	75 01                	jne    c0015a0c <Sys::yield(regs*)+0x1d>
c0015a0b:	fb                   	sti    
c0015a0c:	8b 15 cc 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027acc
c0015a12:	83 c4 0c             	add    esp,0xc
c0015a15:	89 d0                	mov    eax,edx
c0015a17:	c1 ea 11             	shr    edx,0x11
c0015a1a:	c1 e0 07             	shl    eax,0x7
c0015a1d:	25 80 30 0f 00       	and    eax,0xf3080
c0015a22:	31 d0                	xor    eax,edx
c0015a24:	31 d2                	xor    edx,edx
c0015a26:	c3                   	ret    

c0015a27 <sysCallSeekDir(regs*)>:
c0015a27:	31 c0                	xor    eax,eax
c0015a29:	31 d2                	xor    edx,edx
c0015a2b:	c3                   	ret    

c0015a2c <sysCallTellDir(regs*)>:
c0015a2c:	31 c0                	xor    eax,eax
c0015a2e:	31 d2                	xor    edx,edx
c0015a30:	c3                   	ret    

c0015a31 <sysCallVerify(regs*)>:
c0015a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a35:	31 d2                	xor    edx,edx
c0015a37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a3a:	c3                   	ret    

c0015a3b <sysCallGetArgc(regs*)>:
c0015a3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a43:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015a49:	99                   	cdq    
c0015a4a:	c3                   	ret    

c0015a4b <sysFormatDisk(regs*)>:
c0015a4b:	56                   	push   esi
c0015a4c:	53                   	push   ebx
c0015a4d:	53                   	push   ebx
c0015a4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a52:	8b 1d d4 75 02 c0    	mov    ebx,DWORD PTR ds:0xc00275d4
c0015a58:	eb 25                	jmp    c0015a7f <sysFormatDisk(regs*)+0x34>
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015a60:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015a62:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a65:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015a68:	50                   	push   eax
c0015a69:	ff 34 85 60 7a 02 c0 	push   DWORD PTR [eax*4-0x3ffd85a0]
c0015a70:	53                   	push   ebx
c0015a71:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015a74:	83 c4 20             	add    esp,0x20
c0015a77:	83 f8 08             	cmp    eax,0x8
c0015a7a:	75 12                	jne    c0015a8e <sysFormatDisk(regs*)+0x43>
c0015a7c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015a7f:	85 db                	test   ebx,ebx
c0015a81:	75 d7                	jne    c0015a5a <sysFormatDisk(regs*)+0xf>
c0015a83:	59                   	pop    ecx
c0015a84:	b8 03 00 00 00       	mov    eax,0x3
c0015a89:	31 d2                	xor    edx,edx
c0015a8b:	5b                   	pop    ebx
c0015a8c:	5e                   	pop    esi
c0015a8d:	c3                   	ret    
c0015a8e:	85 c0                	test   eax,eax
c0015a90:	74 1b                	je     c0015aad <sysFormatDisk(regs*)+0x62>
c0015a92:	83 f8 09             	cmp    eax,0x9
c0015a95:	74 0b                	je     c0015aa2 <sysFormatDisk(regs*)+0x57>
c0015a97:	59                   	pop    ecx
c0015a98:	b8 02 00 00 00       	mov    eax,0x2
c0015a9d:	31 d2                	xor    edx,edx
c0015a9f:	5b                   	pop    ebx
c0015aa0:	5e                   	pop    esi
c0015aa1:	c3                   	ret    
c0015aa2:	59                   	pop    ecx
c0015aa3:	b8 01 00 00 00       	mov    eax,0x1
c0015aa8:	31 d2                	xor    edx,edx
c0015aaa:	5b                   	pop    ebx
c0015aab:	5e                   	pop    esi
c0015aac:	c3                   	ret    
c0015aad:	59                   	pop    ecx
c0015aae:	31 c0                	xor    eax,eax
c0015ab0:	31 d2                	xor    edx,edx
c0015ab2:	5b                   	pop    ebx
c0015ab3:	5e                   	pop    esi
c0015ab4:	c3                   	ret    

c0015ab5 <sysSetDiskVolumeLabel(regs*)>:
c0015ab5:	56                   	push   esi
c0015ab6:	53                   	push   ebx
c0015ab7:	53                   	push   ebx
c0015ab8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015abc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015abf:	83 f8 19             	cmp    eax,0x19
c0015ac2:	77 2d                	ja     c0015af1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ac4:	8b 0c 85 60 7a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd85a0]
c0015acb:	85 c9                	test   ecx,ecx
c0015acd:	74 22                	je     c0015af1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015acf:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015ad2:	85 db                	test   ebx,ebx
c0015ad4:	74 1b                	je     c0015af1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ad6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015adc:	85 d2                	test   edx,edx
c0015ade:	74 11                	je     c0015af1 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ae0:	8b 32                	mov    esi,DWORD PTR [edx]
c0015ae2:	53                   	push   ebx
c0015ae3:	50                   	push   eax
c0015ae4:	51                   	push   ecx
c0015ae5:	52                   	push   edx
c0015ae6:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	99                   	cdq    
c0015aed:	59                   	pop    ecx
c0015aee:	5b                   	pop    ebx
c0015aef:	5e                   	pop    esi
c0015af0:	c3                   	ret    
c0015af1:	59                   	pop    ecx
c0015af2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015af7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015afc:	5b                   	pop    ebx
c0015afd:	5e                   	pop    esi
c0015afe:	c3                   	ret    

c0015aff <sysGetDiskVolumeLabel(regs*)>:
c0015aff:	57                   	push   edi
c0015b00:	56                   	push   esi
c0015b01:	53                   	push   ebx
c0015b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b06:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015b09:	83 fa 19             	cmp    edx,0x19
c0015b0c:	77 38                	ja     c0015b46 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b0e:	8b 0c 95 60 7a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd85a0]
c0015b15:	85 c9                	test   ecx,ecx
c0015b17:	74 2d                	je     c0015b46 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b19:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015b1c:	85 db                	test   ebx,ebx
c0015b1e:	74 26                	je     c0015b46 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b20:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015b23:	85 f6                	test   esi,esi
c0015b25:	74 1f                	je     c0015b46 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b27:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015b2d:	85 c0                	test   eax,eax
c0015b2f:	74 15                	je     c0015b46 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b31:	83 ec 0c             	sub    esp,0xc
c0015b34:	8b 38                	mov    edi,DWORD PTR [eax]
c0015b36:	56                   	push   esi
c0015b37:	53                   	push   ebx
c0015b38:	52                   	push   edx
c0015b39:	51                   	push   ecx
c0015b3a:	50                   	push   eax
c0015b3b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015b3e:	83 c4 20             	add    esp,0x20
c0015b41:	99                   	cdq    
c0015b42:	5b                   	pop    ebx
c0015b43:	5e                   	pop    esi
c0015b44:	5f                   	pop    edi
c0015b45:	c3                   	ret    
c0015b46:	5b                   	pop    ebx
c0015b47:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b51:	5e                   	pop    esi
c0015b52:	5f                   	pop    edi
c0015b53:	c3                   	ret    

c0015b54 <sysShutdown(regs*)>:
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b5e:	85 c0                	test   eax,eax
c0015b60:	74 18                	je     c0015b7a <sysShutdown(regs*)+0x26>
c0015b62:	83 f8 01             	cmp    eax,0x1
c0015b65:	74 38                	je     c0015b9f <sysShutdown(regs*)+0x4b>
c0015b67:	83 f8 02             	cmp    eax,0x2
c0015b6a:	74 24                	je     c0015b90 <sysShutdown(regs*)+0x3c>
c0015b6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b71:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b76:	83 c4 0c             	add    esp,0xc
c0015b79:	c3                   	ret    
c0015b7a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0015b7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b81:	6a 00                	push   0x0
c0015b83:	6a 00                	push   0x0
c0015b85:	6a 00                	push   0x0
c0015b87:	50                   	push   eax
c0015b88:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	eb dc                	jmp    c0015b6c <sysShutdown(regs*)+0x18>
c0015b90:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0015b95:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b97:	6a 00                	push   0x0
c0015b99:	6a 00                	push   0x0
c0015b9b:	6a 01                	push   0x1
c0015b9d:	eb e8                	jmp    c0015b87 <sysShutdown(regs*)+0x33>
c0015b9f:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c0015ba4:	85 c0                	test   eax,eax
c0015ba6:	74 02                	je     c0015baa <sysShutdown(regs*)+0x56>
c0015ba8:	ff d0                	call   eax
c0015baa:	31 c0                	xor    eax,eax
c0015bac:	31 d2                	xor    edx,edx
c0015bae:	83 c4 0c             	add    esp,0xc
c0015bb1:	c3                   	ret    

c0015bb2 <sysCallRealpath(regs*)>:
c0015bb2:	83 ec 0c             	sub    esp,0xc
c0015bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015bbc:	85 d2                	test   edx,edx
c0015bbe:	74 07                	je     c0015bc7 <sysCallRealpath(regs*)+0x15>
c0015bc0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015bc3:	85 c0                	test   eax,eax
c0015bc5:	75 0b                	jne    c0015bd2 <sysCallRealpath(regs*)+0x20>
c0015bc7:	b8 01 00 00 00       	mov    eax,0x1
c0015bcc:	31 d2                	xor    edx,edx
c0015bce:	83 c4 0c             	add    esp,0xc
c0015bd1:	c3                   	ret    
c0015bd2:	51                   	push   ecx
c0015bd3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015bd9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015bdc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015be2:	51                   	push   ecx
c0015be3:	52                   	push   edx
c0015be4:	50                   	push   eax
c0015be5:	e8 1a 74 ff ff       	call   c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	31 c0                	xor    eax,eax
c0015bef:	31 d2                	xor    edx,edx
c0015bf1:	83 c4 0c             	add    esp,0xc
c0015bf4:	c3                   	ret    

c0015bf5 <sysCallReadDir(regs*)>:
c0015bf5:	53                   	push   ebx
c0015bf6:	83 ec 18             	sub    esp,0x18
c0015bf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bfd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015c00:	83 f8 02             	cmp    eax,0x2
c0015c03:	76 60                	jbe    c0015c65 <sysCallReadDir(regs*)+0x70>
c0015c05:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015c0c:	77 48                	ja     c0015c56 <sysCallReadDir(regs*)+0x61>
c0015c0e:	83 ec 0c             	sub    esp,0xc
c0015c11:	50                   	push   eax
c0015c12:	e8 b0 5b ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	85 c0                	test   eax,eax
c0015c1c:	74 38                	je     c0015c56 <sysCallReadDir(regs*)+0x61>
c0015c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c26:	83 ec 0c             	sub    esp,0xc
c0015c29:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c2b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015c2f:	51                   	push   ecx
c0015c30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c33:	6a 00                	push   0x0
c0015c35:	68 10 01 00 00       	push   0x110
c0015c3a:	50                   	push   eax
c0015c3b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c3e:	83 c4 20             	add    esp,0x20
c0015c41:	85 c0                	test   eax,eax
c0015c43:	74 29                	je     c0015c6e <sysCallReadDir(regs*)+0x79>
c0015c45:	83 f8 07             	cmp    eax,0x7
c0015c48:	74 1b                	je     c0015c65 <sysCallReadDir(regs*)+0x70>
c0015c4a:	b8 02 00 00 00       	mov    eax,0x2
c0015c4f:	31 d2                	xor    edx,edx
c0015c51:	83 c4 18             	add    esp,0x18
c0015c54:	5b                   	pop    ebx
c0015c55:	c3                   	ret    
c0015c56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c60:	83 c4 18             	add    esp,0x18
c0015c63:	5b                   	pop    ebx
c0015c64:	c3                   	ret    
c0015c65:	b8 01 00 00 00       	mov    eax,0x1
c0015c6a:	31 d2                	xor    edx,edx
c0015c6c:	eb e3                	jmp    c0015c51 <sysCallReadDir(regs*)+0x5c>
c0015c6e:	31 c0                	xor    eax,eax
c0015c70:	31 d2                	xor    edx,edx
c0015c72:	eb dd                	jmp    c0015c51 <sysCallReadDir(regs*)+0x5c>

c0015c74 <sysCallIsATTY(regs*)>:
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c7e:	83 f8 02             	cmp    eax,0x2
c0015c81:	76 07                	jbe    c0015c8a <sysCallIsATTY(regs*)+0x16>
c0015c83:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015c88:	75 26                	jne    c0015cb0 <sysCallIsATTY(regs*)+0x3c>
c0015c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c98:	85 c0                	test   eax,eax
c0015c9a:	74 24                	je     c0015cc0 <sysCallIsATTY(regs*)+0x4c>
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ca1:	50                   	push   eax
c0015ca2:	ff 12                	call   DWORD PTR [edx]
c0015ca4:	31 d2                	xor    edx,edx
c0015ca6:	0f b6 c0             	movzx  eax,al
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	83 c4 0c             	add    esp,0xc
c0015caf:	c3                   	ret    
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	50                   	push   eax
c0015cb4:	e8 0e 5b ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	85 c0                	test   eax,eax
c0015cbe:	75 dc                	jne    c0015c9c <sysCallIsATTY(regs*)+0x28>
c0015cc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cca:	83 c4 0c             	add    esp,0xc
c0015ccd:	c3                   	ret    

c0015cce <sysCallSeek(regs*)>:
c0015cce:	53                   	push   ebx
c0015ccf:	83 ec 08             	sub    esp,0x8
c0015cd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015cd9:	8d 50 fd             	lea    edx,[eax-0x3]
c0015cdc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015ce2:	77 32                	ja     c0015d16 <sysCallSeek(regs*)+0x48>
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	50                   	push   eax
c0015ce8:	e8 da 5a ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015ced:	83 c4 0c             	add    esp,0xc
c0015cf0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015cf3:	31 db                	xor    ebx,ebx
c0015cf5:	53                   	push   ebx
c0015cf6:	51                   	push   ecx
c0015cf7:	50                   	push   eax
c0015cf8:	e8 d3 75 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	85 c0                	test   eax,eax
c0015d02:	0f 95 c0             	setne  al
c0015d05:	31 d2                	xor    edx,edx
c0015d07:	0f b6 c0             	movzx  eax,al
c0015d0a:	f7 d8                	neg    eax
c0015d0c:	83 d2 00             	adc    edx,0x0
c0015d0f:	83 c4 08             	add    esp,0x8
c0015d12:	f7 da                	neg    edx
c0015d14:	5b                   	pop    ebx
c0015d15:	c3                   	ret    
c0015d16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d20:	83 c4 08             	add    esp,0x8
c0015d23:	5b                   	pop    ebx
c0015d24:	c3                   	ret    

c0015d25 <sysCallTell(regs*)>:
c0015d25:	53                   	push   ebx
c0015d26:	83 ec 08             	sub    esp,0x8
c0015d29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d30:	83 f8 02             	cmp    eax,0x2
c0015d33:	76 4d                	jbe    c0015d82 <sysCallTell(regs*)+0x5d>
c0015d35:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d3a:	76 19                	jbe    c0015d55 <sysCallTell(regs*)+0x30>
c0015d3c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015d3f:	31 d2                	xor    edx,edx
c0015d41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015d4e:	31 c0                	xor    eax,eax
c0015d50:	83 c4 08             	add    esp,0x8
c0015d53:	5b                   	pop    ebx
c0015d54:	c3                   	ret    
c0015d55:	83 ec 0c             	sub    esp,0xc
c0015d58:	50                   	push   eax
c0015d59:	e8 69 5a ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015d5e:	5a                   	pop    edx
c0015d5f:	59                   	pop    ecx
c0015d60:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015d63:	50                   	push   eax
c0015d64:	e8 bd 75 ff ff       	call   c000d326 <File::tell(unsigned long long*)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	85 c0                	test   eax,eax
c0015d6e:	0f 95 c0             	setne  al
c0015d71:	31 d2                	xor    edx,edx
c0015d73:	0f b6 c0             	movzx  eax,al
c0015d76:	f7 d8                	neg    eax
c0015d78:	83 d2 00             	adc    edx,0x0
c0015d7b:	83 c4 08             	add    esp,0x8
c0015d7e:	f7 da                	neg    edx
c0015d80:	5b                   	pop    ebx
c0015d81:	c3                   	ret    
c0015d82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d8c:	83 c4 08             	add    esp,0x8
c0015d8f:	5b                   	pop    ebx
c0015d90:	c3                   	ret    

c0015d91 <sysCallSize(regs*)>:
c0015d91:	53                   	push   ebx
c0015d92:	83 ec 18             	sub    esp,0x18
c0015d95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d9c:	83 f8 02             	cmp    eax,0x2
c0015d9f:	76 53                	jbe    c0015df4 <sysCallSize(regs*)+0x63>
c0015da1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015da6:	76 19                	jbe    c0015dc1 <sysCallSize(regs*)+0x30>
c0015da8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015dab:	31 d2                	xor    edx,edx
c0015dad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015db3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015dba:	31 c0                	xor    eax,eax
c0015dbc:	83 c4 18             	add    esp,0x18
c0015dbf:	5b                   	pop    ebx
c0015dc0:	c3                   	ret    
c0015dc1:	83 ec 0c             	sub    esp,0xc
c0015dc4:	50                   	push   eax
c0015dc5:	e8 fd 59 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015dca:	83 c4 0c             	add    esp,0xc
c0015dcd:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015dd1:	52                   	push   edx
c0015dd2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015dd5:	50                   	push   eax
c0015dd6:	e8 e3 76 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	85 c0                	test   eax,eax
c0015de0:	0f 95 c0             	setne  al
c0015de3:	31 d2                	xor    edx,edx
c0015de5:	0f b6 c0             	movzx  eax,al
c0015de8:	f7 d8                	neg    eax
c0015dea:	83 d2 00             	adc    edx,0x0
c0015ded:	83 c4 18             	add    esp,0x18
c0015df0:	f7 da                	neg    edx
c0015df2:	5b                   	pop    ebx
c0015df3:	c3                   	ret    
c0015df4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015df9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dfe:	83 c4 18             	add    esp,0x18
c0015e01:	5b                   	pop    ebx
c0015e02:	c3                   	ret    

c0015e03 <sysCallSizeFromFilename(regs*)>:
c0015e03:	57                   	push   edi
c0015e04:	56                   	push   esi
c0015e05:	53                   	push   ebx
c0015e06:	83 ec 20             	sub    esp,0x20
c0015e09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e0d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015e10:	83 fb 02             	cmp    ebx,0x2
c0015e13:	0f 86 88 00 00 00    	jbe    c0015ea1 <sysCallSizeFromFilename(regs*)+0x9e>
c0015e19:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015e1f:	76 1b                	jbe    c0015e3c <sysCallSizeFromFilename(regs*)+0x39>
c0015e21:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e24:	31 d2                	xor    edx,edx
c0015e26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e33:	83 c4 20             	add    esp,0x20
c0015e36:	31 c0                	xor    eax,eax
c0015e38:	5b                   	pop    ebx
c0015e39:	5e                   	pop    esi
c0015e3a:	5f                   	pop    edi
c0015e3b:	c3                   	ret    
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 14 01 00 00       	push   0x114
c0015e44:	e8 7a 3b ff ff       	call   c00099c3 <malloc>
c0015e49:	83 c4 0c             	add    esp,0xc
c0015e4c:	89 c7                	mov    edi,eax
c0015e4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e53:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015e56:	53                   	push   ebx
c0015e57:	57                   	push   edi
c0015e58:	e8 51 73 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0015e5d:	83 c4 0c             	add    esp,0xc
c0015e60:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015e64:	50                   	push   eax
c0015e65:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015e68:	57                   	push   edi
c0015e69:	e8 50 76 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	85 ff                	test   edi,edi
c0015e73:	74 14                	je     c0015e89 <sysCallSizeFromFilename(regs*)+0x86>
c0015e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e79:	8b 17                	mov    edx,DWORD PTR [edi]
c0015e7b:	83 ec 0c             	sub    esp,0xc
c0015e7e:	57                   	push   edi
c0015e7f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e89:	85 c0                	test   eax,eax
c0015e8b:	0f 95 c0             	setne  al
c0015e8e:	31 d2                	xor    edx,edx
c0015e90:	0f b6 c0             	movzx  eax,al
c0015e93:	f7 d8                	neg    eax
c0015e95:	83 d2 00             	adc    edx,0x0
c0015e98:	83 c4 20             	add    esp,0x20
c0015e9b:	f7 da                	neg    edx
c0015e9d:	5b                   	pop    ebx
c0015e9e:	5e                   	pop    esi
c0015e9f:	5f                   	pop    edi
c0015ea0:	c3                   	ret    
c0015ea1:	83 c4 20             	add    esp,0x20
c0015ea4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ea9:	5b                   	pop    ebx
c0015eaa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015eaf:	5e                   	pop    esi
c0015eb0:	5f                   	pop    edi
c0015eb1:	c3                   	ret    

c0015eb2 <sysCallClose(regs*)>:
c0015eb2:	53                   	push   ebx
c0015eb3:	83 ec 08             	sub    esp,0x8
c0015eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ebd:	83 f8 02             	cmp    eax,0x2
c0015ec0:	76 41                	jbe    c0015f03 <sysCallClose(regs*)+0x51>
c0015ec2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015ec8:	83 fa 01             	cmp    edx,0x1
c0015ecb:	76 2d                	jbe    c0015efa <sysCallClose(regs*)+0x48>
c0015ecd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015ed2:	77 2f                	ja     c0015f03 <sysCallClose(regs*)+0x51>
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	50                   	push   eax
c0015ed8:	e8 ea 58 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015edd:	89 c3                	mov    ebx,eax
c0015edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ee2:	e8 89 73 ff ff       	call   c000d270 <File::close()>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	85 db                	test   ebx,ebx
c0015eec:	74 0c                	je     c0015efa <sysCallClose(regs*)+0x48>
c0015eee:	83 ec 0c             	sub    esp,0xc
c0015ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ef3:	53                   	push   ebx
c0015ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	31 c0                	xor    eax,eax
c0015efc:	31 d2                	xor    edx,edx
c0015efe:	83 c4 08             	add    esp,0x8
c0015f01:	5b                   	pop    ebx
c0015f02:	c3                   	ret    
c0015f03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f08:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f0d:	83 c4 08             	add    esp,0x8
c0015f10:	5b                   	pop    ebx
c0015f11:	c3                   	ret    

c0015f12 <sysCallOpenDir(regs*)>:
c0015f12:	56                   	push   esi
c0015f13:	53                   	push   ebx
c0015f14:	53                   	push   ebx
c0015f15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f19:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015f1c:	85 f6                	test   esi,esi
c0015f1e:	74 59                	je     c0015f79 <sysCallOpenDir(regs*)+0x67>
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	68 14 01 00 00       	push   0x114
c0015f28:	e8 96 3a ff ff       	call   c00099c3 <malloc>
c0015f2d:	83 c4 0c             	add    esp,0xc
c0015f30:	89 c6                	mov    esi,eax
c0015f32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f37:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f3d:	56                   	push   esi
c0015f3e:	e8 17 77 ff ff       	call   c000d65a <Directory::Directory(char const*, Process*)>
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	85 f6                	test   esi,esi
c0015f48:	74 2f                	je     c0015f79 <sysCallOpenDir(regs*)+0x67>
c0015f4a:	83 ec 0c             	sub    esp,0xc
c0015f4d:	56                   	push   esi
c0015f4e:	e8 6b 77 ff ff       	call   c000d6be <Directory::open()>
c0015f53:	83 c4 10             	add    esp,0x10
c0015f56:	85 c0                	test   eax,eax
c0015f58:	75 1f                	jne    c0015f79 <sysCallOpenDir(regs*)+0x67>
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	56                   	push   esi
c0015f5e:	e8 6f 55 ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c0015f63:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	89 02                	mov    DWORD PTR [edx],eax
c0015f6b:	c1 f8 1f             	sar    eax,0x1f
c0015f6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f71:	31 c0                	xor    eax,eax
c0015f73:	59                   	pop    ecx
c0015f74:	31 d2                	xor    edx,edx
c0015f76:	5b                   	pop    ebx
c0015f77:	5e                   	pop    esi
c0015f78:	c3                   	ret    
c0015f79:	59                   	pop    ecx
c0015f7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f84:	5b                   	pop    ebx
c0015f85:	5e                   	pop    esi
c0015f86:	c3                   	ret    

c0015f87 <sysCallCloseDir(regs*)>:
c0015f87:	53                   	push   ebx
c0015f88:	83 ec 08             	sub    esp,0x8
c0015f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f92:	8d 50 fd             	lea    edx,[eax-0x3]
c0015f95:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015f9b:	77 2f                	ja     c0015fcc <sysCallCloseDir(regs*)+0x45>
c0015f9d:	83 ec 0c             	sub    esp,0xc
c0015fa0:	50                   	push   eax
c0015fa1:	e8 21 58 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0015fa6:	89 c3                	mov    ebx,eax
c0015fa8:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fab:	e8 6a 77 ff ff       	call   c000d71a <Directory::close()>
c0015fb0:	83 c4 10             	add    esp,0x10
c0015fb3:	85 db                	test   ebx,ebx
c0015fb5:	74 0c                	je     c0015fc3 <sysCallCloseDir(regs*)+0x3c>
c0015fb7:	83 ec 0c             	sub    esp,0xc
c0015fba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fbc:	53                   	push   ebx
c0015fbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	31 c0                	xor    eax,eax
c0015fc5:	31 d2                	xor    edx,edx
c0015fc7:	83 c4 08             	add    esp,0x8
c0015fca:	5b                   	pop    ebx
c0015fcb:	c3                   	ret    
c0015fcc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fd1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fd6:	83 c4 08             	add    esp,0x8
c0015fd9:	5b                   	pop    ebx
c0015fda:	c3                   	ret    

c0015fdb <sysCallMakeDir(regs*)>:
c0015fdb:	56                   	push   esi
c0015fdc:	53                   	push   ebx
c0015fdd:	83 ec 10             	sub    esp,0x10
c0015fe0:	68 14 01 00 00       	push   0x114
c0015fe5:	e8 d9 39 ff ff       	call   c00099c3 <malloc>
c0015fea:	83 c4 0c             	add    esp,0xc
c0015fed:	89 c3                	mov    ebx,eax
c0015fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ff7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ffb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015ffe:	53                   	push   ebx
c0015fff:	e8 56 76 ff ff       	call   c000d65a <Directory::Directory(char const*, Process*)>
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	85 db                	test   ebx,ebx
c0016009:	74 32                	je     c001603d <sysCallMakeDir(regs*)+0x62>
c001600b:	83 ec 0c             	sub    esp,0xc
c001600e:	53                   	push   ebx
c001600f:	e8 8a 78 ff ff       	call   c000d89e <Directory::create()>
c0016014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016017:	89 c6                	mov    esi,eax
c0016019:	e8 fc 76 ff ff       	call   c000d71a <Directory::close()>
c001601e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016023:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016026:	83 c4 10             	add    esp,0x10
c0016029:	31 c0                	xor    eax,eax
c001602b:	59                   	pop    ecx
c001602c:	85 f6                	test   esi,esi
c001602e:	5b                   	pop    ebx
c001602f:	0f 95 c0             	setne  al
c0016032:	5e                   	pop    esi
c0016033:	31 d2                	xor    edx,edx
c0016035:	f7 d8                	neg    eax
c0016037:	83 d2 00             	adc    edx,0x0
c001603a:	f7 da                	neg    edx
c001603c:	c3                   	ret    
c001603d:	59                   	pop    ecx
c001603e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016043:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016048:	5b                   	pop    ebx
c0016049:	5e                   	pop    esi
c001604a:	c3                   	ret    

c001604b <sysCallWait(regs*)>:
c001604b:	83 ec 10             	sub    esp,0x10
c001604e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016052:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016055:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016058:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001605b:	e8 fc 24 00 00       	call   c001855c <waitTask(int, int*, int)>
c0016060:	83 c4 1c             	add    esp,0x1c
c0016063:	99                   	cdq    
c0016064:	c3                   	ret    

c0016065 <sysCallNotImpl(regs*)>:
c0016065:	83 ec 18             	sub    esp,0x18
c0016068:	68 01 55 02 c0       	push   0xc0025501
c001606d:	e8 f1 e6 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0016072:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016077:	ba ff ff ff ff       	mov    edx,0xffffffff
c001607c:	83 c4 1c             	add    esp,0x1c
c001607f:	c3                   	ret    

c0016080 <sysPanic(regs*)>:
c0016080:	83 ec 18             	sub    esp,0x18
c0016083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016087:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001608a:	e8 d4 e6 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001608f:	b8 01 00 00 00       	mov    eax,0x1
c0016094:	31 d2                	xor    edx,edx
c0016096:	83 c4 1c             	add    esp,0x1c
c0016099:	c3                   	ret    

c001609a <sysCallRmdir(regs*)>:
c001609a:	56                   	push   esi
c001609b:	53                   	push   ebx
c001609c:	83 ec 20             	sub    esp,0x20
c001609f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160a3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00160a6:	68 14 01 00 00       	push   0x114
c00160ab:	e8 13 39 ff ff       	call   c00099c3 <malloc>
c00160b0:	83 c4 0c             	add    esp,0xc
c00160b3:	89 c3                	mov    ebx,eax
c00160b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ba:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160bd:	56                   	push   esi
c00160be:	53                   	push   ebx
c00160bf:	e8 ea 70 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00160c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160c7:	e8 be 72 ff ff       	call   c000d38a <File::unlink()>
c00160cc:	83 c4 10             	add    esp,0x10
c00160cf:	85 db                	test   ebx,ebx
c00160d1:	74 14                	je     c00160e7 <sysCallRmdir(regs*)+0x4d>
c00160d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160d9:	83 ec 0c             	sub    esp,0xc
c00160dc:	53                   	push   ebx
c00160dd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160e7:	85 c0                	test   eax,eax
c00160e9:	0f 95 c0             	setne  al
c00160ec:	31 d2                	xor    edx,edx
c00160ee:	0f b6 c0             	movzx  eax,al
c00160f1:	f7 d8                	neg    eax
c00160f3:	83 d2 00             	adc    edx,0x0
c00160f6:	83 c4 14             	add    esp,0x14
c00160f9:	f7 da                	neg    edx
c00160fb:	5b                   	pop    ebx
c00160fc:	5e                   	pop    esi
c00160fd:	c3                   	ret    

c00160fe <sysCallUnlink(regs*)>:
c00160fe:	56                   	push   esi
c00160ff:	53                   	push   ebx
c0016100:	83 ec 20             	sub    esp,0x20
c0016103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016107:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001610a:	68 14 01 00 00       	push   0x114
c001610f:	e8 af 38 ff ff       	call   c00099c3 <malloc>
c0016114:	83 c4 0c             	add    esp,0xc
c0016117:	89 c3                	mov    ebx,eax
c0016119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001611e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016121:	56                   	push   esi
c0016122:	53                   	push   ebx
c0016123:	e8 86 70 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0016128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001612b:	e8 5a 72 ff ff       	call   c000d38a <File::unlink()>
c0016130:	83 c4 10             	add    esp,0x10
c0016133:	85 db                	test   ebx,ebx
c0016135:	74 14                	je     c001614b <sysCallUnlink(regs*)+0x4d>
c0016137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001613b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001613d:	83 ec 0c             	sub    esp,0xc
c0016140:	53                   	push   ebx
c0016141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016144:	83 c4 10             	add    esp,0x10
c0016147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001614b:	85 c0                	test   eax,eax
c001614d:	0f 95 c0             	setne  al
c0016150:	31 d2                	xor    edx,edx
c0016152:	0f b6 c0             	movzx  eax,al
c0016155:	f7 d8                	neg    eax
c0016157:	83 d2 00             	adc    edx,0x0
c001615a:	83 c4 14             	add    esp,0x14
c001615d:	f7 da                	neg    edx
c001615f:	5b                   	pop    ebx
c0016160:	5e                   	pop    esi
c0016161:	c3                   	ret    

c0016162 <sysCallGetArgv(regs*)>:
c0016162:	83 ec 0c             	sub    esp,0xc
c0016165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016169:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001616c:	85 c0                	test   eax,eax
c001616e:	78 2b                	js     c001619b <sysCallGetArgv(regs*)+0x39>
c0016170:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016176:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016179:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001617f:	7d 1a                	jge    c001619b <sysCallGetArgv(regs*)+0x39>
c0016181:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016188:	85 c0                	test   eax,eax
c001618a:	74 17                	je     c00161a3 <sysCallGetArgv(regs*)+0x41>
c001618c:	83 ec 08             	sub    esp,0x8
c001618f:	50                   	push   eax
c0016190:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016193:	e8 a8 a5 fe ff       	call   c0000740 <strcpy>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	31 c0                	xor    eax,eax
c001619d:	31 d2                	xor    edx,edx
c001619f:	83 c4 0c             	add    esp,0xc
c00161a2:	c3                   	ret    
c00161a3:	b8 01 00 00 00       	mov    eax,0x1
c00161a8:	31 d2                	xor    edx,edx
c00161aa:	83 c4 0c             	add    esp,0xc
c00161ad:	c3                   	ret    

c00161ae <sysCallTTYName(regs*)>:
c00161ae:	56                   	push   esi
c00161af:	53                   	push   ebx
c00161b0:	53                   	push   ebx
c00161b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161b5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00161b8:	85 c0                	test   eax,eax
c00161ba:	74 5f                	je     c001621b <sysCallTTYName(regs*)+0x6d>
c00161bc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00161bf:	83 f8 02             	cmp    eax,0x2
c00161c2:	77 3e                	ja     c0016202 <sysCallTTYName(regs*)+0x54>
c00161c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161cc:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00161d2:	85 db                	test   ebx,ebx
c00161d4:	74 45                	je     c001621b <sysCallTTYName(regs*)+0x6d>
c00161d6:	83 ec 0c             	sub    esp,0xc
c00161d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161db:	53                   	push   ebx
c00161dc:	ff 10                	call   DWORD PTR [eax]
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	84 c0                	test   al,al
c00161e3:	74 41                	je     c0016226 <sysCallTTYName(regs*)+0x78>
c00161e5:	83 ec 08             	sub    esp,0x8
c00161e8:	81 c3 82 00 00 00    	add    ebx,0x82
c00161ee:	53                   	push   ebx
c00161ef:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00161f2:	e8 49 a5 fe ff       	call   c0000740 <strcpy>
c00161f7:	83 c4 10             	add    esp,0x10
c00161fa:	31 c0                	xor    eax,eax
c00161fc:	59                   	pop    ecx
c00161fd:	31 d2                	xor    edx,edx
c00161ff:	5b                   	pop    ebx
c0016200:	5e                   	pop    esi
c0016201:	c3                   	ret    
c0016202:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016207:	74 bb                	je     c00161c4 <sysCallTTYName(regs*)+0x16>
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	50                   	push   eax
c001620d:	e8 b5 55 ff ff       	call   c000b7c7 <getFromFileDescriptor(int)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	89 c3                	mov    ebx,eax
c0016217:	85 db                	test   ebx,ebx
c0016219:	75 bb                	jne    c00161d6 <sysCallTTYName(regs*)+0x28>
c001621b:	59                   	pop    ecx
c001621c:	b8 01 00 00 00       	mov    eax,0x1
c0016221:	31 d2                	xor    edx,edx
c0016223:	5b                   	pop    ebx
c0016224:	5e                   	pop    esi
c0016225:	c3                   	ret    
c0016226:	59                   	pop    ecx
c0016227:	b8 02 00 00 00       	mov    eax,0x2
c001622c:	31 d2                	xor    edx,edx
c001622e:	5b                   	pop    ebx
c001622f:	5e                   	pop    esi
c0016230:	c3                   	ret    

c0016231 <sysCallUSleep(regs*)>:
c0016231:	83 ec 1c             	sub    esp,0x1c
c0016234:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016238:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001623b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001623e:	6a 00                	push   0x0
c0016240:	6a 64                	push   0x64
c0016242:	52                   	push   edx
c0016243:	50                   	push   eax
c0016244:	e8 fb bc 00 00       	call   c0021f44 <__udivdi3>
c0016249:	83 c4 14             	add    esp,0x14
c001624c:	50                   	push   eax
c001624d:	e8 da 23 00 00       	call   c001862c <milliTenthSleep(unsigned int)>
c0016252:	31 c0                	xor    eax,eax
c0016254:	31 d2                	xor    edx,edx
c0016256:	83 c4 1c             	add    esp,0x1c
c0016259:	c3                   	ret    

c001625a <sysCallSpawn(regs*)>:
c001625a:	56                   	push   esi
c001625b:	53                   	push   ebx
c001625c:	50                   	push   eax
c001625d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016261:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016264:	85 c0                	test   eax,eax
c0016266:	75 08                	jne    c0016270 <sysCallSpawn(regs*)+0x16>
c0016268:	59                   	pop    ecx
c0016269:	31 c0                	xor    eax,eax
c001626b:	31 d2                	xor    edx,edx
c001626d:	5b                   	pop    ebx
c001626e:	5e                   	pop    esi
c001626f:	c3                   	ret    
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	68 1f 07 00 00       	push   0x71f
c0016278:	e8 46 37 ff ff       	call   c00099c3 <malloc>
c001627d:	83 c4 10             	add    esp,0x10
c0016280:	89 c6                	mov    esi,eax
c0016282:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016285:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016288:	85 c0                	test   eax,eax
c001628a:	75 32                	jne    c00162be <sysCallSpawn(regs*)+0x64>
c001628c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016291:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016294:	52                   	push   edx
c0016295:	50                   	push   eax
c0016296:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016299:	56                   	push   esi
c001629a:	e8 85 1a 00 00       	call   c0017d24 <Process::Process(char const*, Process*, char**)>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00162a9:	75 bd                	jne    c0016268 <sysCallSpawn(regs*)+0xe>
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	56                   	push   esi
c00162af:	e8 5c 1f 00 00       	call   c0018210 <Process::createUserThread()>
c00162b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00162b6:	83 c4 10             	add    esp,0x10
c00162b9:	99                   	cdq    
c00162ba:	59                   	pop    ecx
c00162bb:	5b                   	pop    ebx
c00162bc:	5e                   	pop    esi
c00162bd:	c3                   	ret    
c00162be:	31 c0                	xor    eax,eax
c00162c0:	eb d2                	jmp    c0016294 <sysCallSpawn(regs*)+0x3a>

c00162c2 <sysCallGetEnv(regs*)>:
c00162c2:	57                   	push   edi
c00162c3:	56                   	push   esi
c00162c4:	53                   	push   ebx
c00162c5:	83 ec 1c             	sub    esp,0x1c
c00162c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00162cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00162d4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00162d7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162da:	e8 d0 e3 ff ff       	call   c00146af <Krnl::getProcessTotalEnvCount(Process*)>
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	39 c7                	cmp    edi,eax
c00162e4:	7c 14                	jl     c00162fa <sysCallGetEnv(regs*)+0x38>
c00162e6:	85 f6                	test   esi,esi
c00162e8:	75 0b                	jne    c00162f5 <sysCallGetEnv(regs*)+0x33>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	31 c0                	xor    eax,eax
c00162ef:	5b                   	pop    ebx
c00162f0:	31 d2                	xor    edx,edx
c00162f2:	5e                   	pop    esi
c00162f3:	5f                   	pop    edi
c00162f4:	c3                   	ret    
c00162f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00162f8:	eb f0                	jmp    c00162ea <sysCallGetEnv(regs*)+0x28>
c00162fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00162fe:	52                   	push   edx
c00162ff:	57                   	push   edi
c0016300:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016306:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016309:	50                   	push   eax
c001630a:	e8 c0 e3 ff ff       	call   c00146cf <Krnl::getProcessEnvPair(Process*, int)>
c001630f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016312:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016316:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001631a:	83 c4 0c             	add    esp,0xc
c001631d:	85 c9                	test   ecx,ecx
c001631f:	75 23                	jne    c0016344 <sysCallGetEnv(regs*)+0x82>
c0016321:	83 ec 0c             	sub    esp,0xc
c0016324:	50                   	push   eax
c0016325:	e8 76 a3 fe ff       	call   c00006a0 <strlen>
c001632a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001632d:	89 c3                	mov    ebx,eax
c001632f:	e8 6c a3 fe ff       	call   c00006a0 <strlen>
c0016334:	83 c4 10             	add    esp,0x10
c0016337:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	31 d2                	xor    edx,edx
c0016340:	5b                   	pop    ebx
c0016341:	5e                   	pop    esi
c0016342:	5f                   	pop    edi
c0016343:	c3                   	ret    
c0016344:	83 ec 08             	sub    esp,0x8
c0016347:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001634a:	50                   	push   eax
c001634b:	56                   	push   esi
c001634c:	e8 ef a3 fe ff       	call   c0000740 <strcpy>
c0016351:	58                   	pop    eax
c0016352:	5a                   	pop    edx
c0016353:	68 1b 55 02 c0       	push   0xc002551b
c0016358:	56                   	push   esi
c0016359:	e8 22 a5 fe ff       	call   c0000880 <strcat>
c001635e:	59                   	pop    ecx
c001635f:	5b                   	pop    ebx
c0016360:	57                   	push   edi
c0016361:	56                   	push   esi
c0016362:	e8 19 a5 fe ff       	call   c0000880 <strcat>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	e9 7b ff ff ff       	jmp    c00162ea <sysCallGetEnv(regs*)+0x28>

c001636f <sysAppSettings(regs*)>:
c001636f:	57                   	push   edi
c0016370:	56                   	push   esi
c0016371:	56                   	push   esi
c0016372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016376:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016379:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001637f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016384:	66 3d c0 09          	cmp    ax,0x9c0
c0016388:	75 2e                	jne    c00163b8 <sysAppSettings(regs*)+0x49>
c001638a:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016390:	83 e0 1f             	and    eax,0x1f
c0016393:	3c 01                	cmp    al,0x1
c0016395:	74 2c                	je     c00163c3 <sysAppSettings(regs*)+0x54>
c0016397:	3c 07                	cmp    al,0x7
c0016399:	0f 84 b3 00 00 00    	je     c0016452 <sysAppSettings(regs*)+0xe3>
c001639f:	84 c0                	test   al,al
c00163a1:	0f 84 d2 00 00 00    	je     c0016479 <sysAppSettings(regs*)+0x10a>
c00163a7:	3c 08                	cmp    al,0x8
c00163a9:	74 63                	je     c001640e <sysAppSettings(regs*)+0x9f>
c00163ab:	59                   	pop    ecx
c00163ac:	0f b6 c0             	movzx  eax,al
c00163af:	5e                   	pop    esi
c00163b0:	05 e8 03 00 00       	add    eax,0x3e8
c00163b5:	5f                   	pop    edi
c00163b6:	99                   	cdq    
c00163b7:	c3                   	ret    
c00163b8:	b8 01 00 00 00       	mov    eax,0x1
c00163bd:	59                   	pop    ecx
c00163be:	31 d2                	xor    edx,edx
c00163c0:	5e                   	pop    esi
c00163c1:	5f                   	pop    edi
c00163c2:	c3                   	ret    
c00163c3:	50                   	push   eax
c00163c4:	68 00 01 00 00       	push   0x100
c00163c9:	6a 00                	push   0x0
c00163cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163d3:	83 c0 0c             	add    eax,0xc
c00163d6:	50                   	push   eax
c00163d7:	e8 a8 a2 fe ff       	call   c0000684 <memset>
c00163dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e1:	b9 ff 00 00 00       	mov    ecx,0xff
c00163e6:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00163e9:	83 c7 0c             	add    edi,0xc
c00163ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00163ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163f3:	5a                   	pop    edx
c00163f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163f7:	59                   	pop    ecx
c00163f8:	8d 50 0c             	lea    edx,[eax+0xc]
c00163fb:	52                   	push   edx
c00163fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016402:	e8 e3 44 ff ff       	call   c000a8ea <VgaText::setTitle(char*)>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	31 c0                	xor    eax,eax
c001640c:	eb af                	jmp    c00163bd <sysAppSettings(regs*)+0x4e>
c001640e:	83 ec 08             	sub    esp,0x8
c0016411:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016417:	83 e0 0f             	and    eax,0xf
c001641a:	50                   	push   eax
c001641b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016420:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016423:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016429:	e8 ac 44 ff ff       	call   c000a8da <VgaText::setTitleColour(VgaColour)>
c001642e:	5f                   	pop    edi
c001642f:	58                   	pop    eax
c0016430:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016436:	c1 e8 04             	shr    eax,0x4
c0016439:	83 e0 0f             	and    eax,0xf
c001643c:	50                   	push   eax
c001643d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016442:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016445:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001644b:	e8 7a 44 ff ff       	call   c000a8ca <VgaText::setTitleTextColour(VgaColour)>
c0016450:	eb b5                	jmp    c0016407 <sysAppSettings(regs*)+0x98>
c0016452:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016457:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001645a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016460:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016466:	c0 e8 06             	shr    al,0x6
c0016469:	83 e0 01             	and    eax,0x1
c001646c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016472:	31 c0                	xor    eax,eax
c0016474:	e9 44 ff ff ff       	jmp    c00163bd <sysAppSettings(regs*)+0x4e>
c0016479:	b8 02 00 00 00       	mov    eax,0x2
c001647e:	e9 3a ff ff ff       	jmp    c00163bd <sysAppSettings(regs*)+0x4e>

c0016483 <sysSetFatAttrib(regs*)>:
c0016483:	57                   	push   edi
c0016484:	56                   	push   esi
c0016485:	53                   	push   ebx
c0016486:	83 ec 1c             	sub    esp,0x1c
c0016489:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001648d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016490:	68 14 01 00 00       	push   0x114
c0016495:	e8 29 35 ff ff       	call   c00099c3 <malloc>
c001649a:	83 c4 0c             	add    esp,0xc
c001649d:	89 c3                	mov    ebx,eax
c001649f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164a7:	57                   	push   edi
c00164a8:	53                   	push   ebx
c00164a9:	e8 00 6d ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00164ae:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00164b1:	83 c4 0c             	add    esp,0xc
c00164b4:	0f b6 d4             	movzx  edx,ah
c00164b7:	0f b6 c0             	movzx  eax,al
c00164ba:	52                   	push   edx
c00164bb:	50                   	push   eax
c00164bc:	53                   	push   ebx
c00164bd:	e8 62 6f ff ff       	call   c000d424 <File::chfatattr(unsigned char, unsigned char)>
c00164c2:	83 c4 10             	add    esp,0x10
c00164c5:	85 db                	test   ebx,ebx
c00164c7:	74 14                	je     c00164dd <sysSetFatAttrib(regs*)+0x5a>
c00164c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164cd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164cf:	83 ec 0c             	sub    esp,0xc
c00164d2:	53                   	push   ebx
c00164d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164d6:	83 c4 10             	add    esp,0x10
c00164d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164dd:	85 c0                	test   eax,eax
c00164df:	0f 95 c0             	setne  al
c00164e2:	31 d2                	xor    edx,edx
c00164e4:	0f b6 c0             	movzx  eax,al
c00164e7:	f7 d8                	neg    eax
c00164e9:	83 d2 00             	adc    edx,0x0
c00164ec:	83 c4 10             	add    esp,0x10
c00164ef:	f7 da                	neg    edx
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	5f                   	pop    edi
c00164f4:	c3                   	ret    

c00164f5 <sysPipe(regs*)>:
c00164f5:	57                   	push   edi
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016502:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016505:	6a 20                	push   0x20
c0016507:	e8 b7 34 ff ff       	call   c00099c3 <malloc>
c001650c:	89 c3                	mov    ebx,eax
c001650e:	58                   	pop    eax
c001650f:	5a                   	pop    edx
c0016510:	68 00 50 00 00       	push   0x5000
c0016515:	53                   	push   ebx
c0016516:	e8 47 41 ff ff       	call   c000a662 <Pipe::Pipe(int)>
c001651b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001651e:	e8 af 4f ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c0016523:	89 07                	mov    DWORD PTR [edi],eax
c0016525:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016528:	e8 a5 4f ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	89 06                	mov    DWORD PTR [esi],eax
c0016532:	31 d2                	xor    edx,edx
c0016534:	5b                   	pop    ebx
c0016535:	31 c0                	xor    eax,eax
c0016537:	5e                   	pop    esi
c0016538:	5f                   	pop    edi
c0016539:	c3                   	ret    

c001653a <sysGetUnixTime(regs*)>:
c001653a:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001653f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016545:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016549:	e9 54 76 ff ff       	jmp    c000dba2 <Clock::timeInSecondsLocal()>

c001654e <string_ends_with(char const*, char const*)>:
c001654e:	57                   	push   edi
c001654f:	56                   	push   esi
c0016550:	53                   	push   ebx
c0016551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016555:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	53                   	push   ebx
c001655d:	e8 3e a1 fe ff       	call   c00006a0 <strlen>
c0016562:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016565:	89 c6                	mov    esi,eax
c0016567:	e8 34 a1 fe ff       	call   c00006a0 <strlen>
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	39 c6                	cmp    esi,eax
c0016571:	7d 06                	jge    c0016579 <string_ends_with(char const*, char const*)+0x2b>
c0016573:	5b                   	pop    ebx
c0016574:	31 c0                	xor    eax,eax
c0016576:	5e                   	pop    esi
c0016577:	5f                   	pop    edi
c0016578:	c3                   	ret    
c0016579:	83 ec 08             	sub    esp,0x8
c001657c:	29 c6                	sub    esi,eax
c001657e:	57                   	push   edi
c001657f:	01 f3                	add    ebx,esi
c0016581:	53                   	push   ebx
c0016582:	e8 45 a2 fe ff       	call   c00007cc <strcmp>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	85 c0                	test   eax,eax
c001658c:	5b                   	pop    ebx
c001658d:	0f 94 c0             	sete   al
c0016590:	5e                   	pop    esi
c0016591:	0f b6 c0             	movzx  eax,al
c0016594:	5f                   	pop    edi
c0016595:	c3                   	ret    

c0016596 <sysCallOpen(regs*)>:
c0016596:	56                   	push   esi
c0016597:	53                   	push   ebx
c0016598:	81 ec 04 01 00 00    	sub    esp,0x104
c001659e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00165a5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00165a8:	85 c9                	test   ecx,ecx
c00165aa:	0f 84 ad 01 00 00    	je     c001675d <sysCallOpen(regs*)+0x1c7>
c00165b0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00165b3:	85 c0                	test   eax,eax
c00165b5:	0f 84 a2 01 00 00    	je     c001675d <sysCallOpen(regs*)+0x1c7>
c00165bb:	52                   	push   edx
c00165bc:	68 1d 55 02 c0       	push   0xc002551d
c00165c1:	50                   	push   eax
c00165c2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00165c6:	56                   	push   esi
c00165c7:	e8 38 6a ff ff       	call   c000d004 <Fs::standardiseFiles(char*, char const*, char const*)>
c00165cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00165cf:	e8 cc a0 fe ff       	call   c00006a0 <strlen>
c00165d4:	83 c4 10             	add    esp,0x10
c00165d7:	48                   	dec    eax
c00165d8:	74 1d                	je     c00165f7 <sysCallOpen(regs*)+0x61>
c00165da:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00165dd:	eb 0f                	jmp    c00165ee <sysCallOpen(regs*)+0x58>
c00165df:	80 fa 3a             	cmp    dl,0x3a
c00165e2:	74 0f                	je     c00165f3 <sysCallOpen(regs*)+0x5d>
c00165e4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00165e8:	48                   	dec    eax
c00165e9:	74 0c                	je     c00165f7 <sysCallOpen(regs*)+0x61>
c00165eb:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00165ee:	80 fa 2e             	cmp    dl,0x2e
c00165f1:	75 ec                	jne    c00165df <sysCallOpen(regs*)+0x49>
c00165f3:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00165f7:	83 ec 08             	sub    esp,0x8
c00165fa:	68 21 55 02 c0       	push   0xc0025521
c00165ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016602:	e8 47 ff ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	85 c0                	test   eax,eax
c001660c:	74 1d                	je     c001662b <sysCallOpen(regs*)+0x95>
c001660e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016611:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001661e:	81 c4 04 01 00 00    	add    esp,0x104
c0016624:	31 c0                	xor    eax,eax
c0016626:	31 d2                	xor    edx,edx
c0016628:	5b                   	pop    ebx
c0016629:	5e                   	pop    esi
c001662a:	c3                   	ret    
c001662b:	83 ec 08             	sub    esp,0x8
c001662e:	68 26 55 02 c0       	push   0xc0025526
c0016633:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016636:	e8 13 ff ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	85 c0                	test   eax,eax
c0016640:	75 cc                	jne    c001660e <sysCallOpen(regs*)+0x78>
c0016642:	83 ec 08             	sub    esp,0x8
c0016645:	68 22 55 02 c0       	push   0xc0025522
c001664a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001664d:	e8 7a a1 fe ff       	call   c00007cc <strcmp>
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	85 c0                	test   eax,eax
c0016657:	74 b5                	je     c001660e <sysCallOpen(regs*)+0x78>
c0016659:	83 ec 08             	sub    esp,0x8
c001665c:	68 21 55 02 c0       	push   0xc0025521
c0016661:	56                   	push   esi
c0016662:	e8 e7 fe ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	85 c0                	test   eax,eax
c001666c:	75 a0                	jne    c001660e <sysCallOpen(regs*)+0x78>
c001666e:	83 ec 08             	sub    esp,0x8
c0016671:	68 2b 55 02 c0       	push   0xc002552b
c0016676:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016679:	e8 d0 fe ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	85 c0                	test   eax,eax
c0016683:	0f 85 e7 00 00 00    	jne    c0016770 <sysCallOpen(regs*)+0x1da>
c0016689:	83 ec 08             	sub    esp,0x8
c001668c:	68 30 55 02 c0       	push   0xc0025530
c0016691:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016694:	e8 b5 fe ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	85 c0                	test   eax,eax
c001669e:	0f 85 cc 00 00 00    	jne    c0016770 <sysCallOpen(regs*)+0x1da>
c00166a4:	83 ec 08             	sub    esp,0x8
c00166a7:	68 2c 55 02 c0       	push   0xc002552c
c00166ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166af:	e8 18 a1 fe ff       	call   c00007cc <strcmp>
c00166b4:	83 c4 10             	add    esp,0x10
c00166b7:	85 c0                	test   eax,eax
c00166b9:	0f 84 b1 00 00 00    	je     c0016770 <sysCallOpen(regs*)+0x1da>
c00166bf:	83 ec 08             	sub    esp,0x8
c00166c2:	68 2b 55 02 c0       	push   0xc002552b
c00166c7:	56                   	push   esi
c00166c8:	e8 81 fe ff ff       	call   c001654e <string_ends_with(char const*, char const*)>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	85 c0                	test   eax,eax
c00166d2:	0f 85 98 00 00 00    	jne    c0016770 <sysCallOpen(regs*)+0x1da>
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	68 14 01 00 00       	push   0x114
c00166e0:	e8 de 32 ff ff       	call   c00099c3 <malloc>
c00166e5:	83 c4 0c             	add    esp,0xc
c00166e8:	89 c6                	mov    esi,eax
c00166ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ef:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00166f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166f5:	56                   	push   esi
c00166f6:	e8 b3 6a ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	85 f6                	test   esi,esi
c0016700:	74 5b                	je     c001675d <sysCallOpen(regs*)+0x1c7>
c0016702:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016705:	0f b6 c2             	movzx  eax,dl
c0016708:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001670b:	89 d0                	mov    eax,edx
c001670d:	83 e0 01             	and    eax,0x1
c0016710:	f6 c2 02             	test   dl,0x2
c0016713:	74 03                	je     c0016718 <sysCallOpen(regs*)+0x182>
c0016715:	83 c8 02             	or     eax,0x2
c0016718:	f6 c2 04             	test   dl,0x4
c001671b:	74 03                	je     c0016720 <sysCallOpen(regs*)+0x18a>
c001671d:	83 c8 04             	or     eax,0x4
c0016720:	f6 c2 08             	test   dl,0x8
c0016723:	74 03                	je     c0016728 <sysCallOpen(regs*)+0x192>
c0016725:	83 c8 0a             	or     eax,0xa
c0016728:	83 e2 10             	and    edx,0x10
c001672b:	74 03                	je     c0016730 <sysCallOpen(regs*)+0x19a>
c001672d:	83 c8 12             	or     eax,0x12
c0016730:	83 ec 08             	sub    esp,0x8
c0016733:	50                   	push   eax
c0016734:	56                   	push   esi
c0016735:	e8 d8 6a ff ff       	call   c000d212 <File::open(FileOpenMode)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	85 c0                	test   eax,eax
c001673f:	75 1c                	jne    c001675d <sysCallOpen(regs*)+0x1c7>
c0016741:	83 ec 0c             	sub    esp,0xc
c0016744:	56                   	push   esi
c0016745:	e8 88 4d ff ff       	call   c000b4d2 <UnixFile::getFileDescriptor()>
c001674a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	89 02                	mov    DWORD PTR [edx],eax
c0016752:	c1 f8 1f             	sar    eax,0x1f
c0016755:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016758:	e9 c1 fe ff ff       	jmp    c001661e <sysCallOpen(regs*)+0x88>
c001675d:	81 c4 04 01 00 00    	add    esp,0x104
c0016763:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016768:	ba ff ff ff ff       	mov    edx,0xffffffff
c001676d:	5b                   	pop    ebx
c001676e:	5e                   	pop    esi
c001676f:	c3                   	ret    
c0016770:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016773:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016779:	e9 99 fe ff ff       	jmp    c0016617 <sysCallOpen(regs*)+0x81>

c001677e <Sys::loadSyscalls()>:
c001677e:	c7 05 a0 7f 02 c0 ef 59 01 c0 	mov    DWORD PTR ds:0xc0027fa0,0xc00159ef
c0016788:	c7 05 a4 7f 02 c0 e4 55 01 c0 	mov    DWORD PTR ds:0xc0027fa4,0xc00155e4
c0016792:	c7 05 a8 7f 02 c0 d5 57 01 c0 	mov    DWORD PTR ds:0xc0027fa8,0xc00157d5
c001679c:	c7 05 ac 7f 02 c0 25 59 01 c0 	mov    DWORD PTR ds:0xc0027fac,0xc0015925
c00167a6:	c7 05 b0 7f 02 c0 6d 57 01 c0 	mov    DWORD PTR ds:0xc0027fb0,0xc001576d
c00167b0:	c7 05 b4 7f 02 c0 1b 56 01 c0 	mov    DWORD PTR ds:0xc0027fb4,0xc001561b
c00167ba:	c7 05 b8 7f 02 c0 fc 55 01 c0 	mov    DWORD PTR ds:0xc0027fb8,0xc00155fc
c00167c4:	c7 05 bc 7f 02 c0 2a 58 01 c0 	mov    DWORD PTR ds:0xc0027fbc,0xc001582a
c00167ce:	c7 05 c4 7f 02 c0 b2 5e 01 c0 	mov    DWORD PTR ds:0xc0027fc4,0xc0015eb2
c00167d8:	c7 05 c0 7f 02 c0 96 65 01 c0 	mov    DWORD PTR ds:0xc0027fc0,0xc0016596
c00167e2:	c7 05 c8 7f 02 c0 12 5f 01 c0 	mov    DWORD PTR ds:0xc0027fc8,0xc0015f12
c00167ec:	c7 05 cc 7f 02 c0 f5 5b 01 c0 	mov    DWORD PTR ds:0xc0027fcc,0xc0015bf5
c00167f6:	c7 05 d0 7f 02 c0 27 5a 01 c0 	mov    DWORD PTR ds:0xc0027fd0,0xc0015a27
c0016800:	c7 05 d4 7f 02 c0 2c 5a 01 c0 	mov    DWORD PTR ds:0xc0027fd4,0xc0015a2c
c001680a:	c7 05 d8 7f 02 c0 db 5f 01 c0 	mov    DWORD PTR ds:0xc0027fd8,0xc0015fdb
c0016814:	c7 05 dc 7f 02 c0 87 5f 01 c0 	mov    DWORD PTR ds:0xc0027fdc,0xc0015f87
c001681e:	c7 05 e0 7f 02 c0 ce 5c 01 c0 	mov    DWORD PTR ds:0xc0027fe0,0xc0015cce
c0016828:	c7 05 e4 7f 02 c0 25 5d 01 c0 	mov    DWORD PTR ds:0xc0027fe4,0xc0015d25
c0016832:	c7 05 e8 7f 02 c0 91 5d 01 c0 	mov    DWORD PTR ds:0xc0027fe8,0xc0015d91
c001683c:	c7 05 ec 7f 02 c0 31 5a 01 c0 	mov    DWORD PTR ds:0xc0027fec,0xc0015a31
c0016846:	c7 05 f0 7f 02 c0 4b 60 01 c0 	mov    DWORD PTR ds:0xc0027ff0,0xc001604b
c0016850:	c7 05 f4 7f 02 c0 65 60 01 c0 	mov    DWORD PTR ds:0xc0027ff4,0xc0016065
c001685a:	c7 05 f8 7f 02 c0 65 60 01 c0 	mov    DWORD PTR ds:0xc0027ff8,0xc0016065
c0016864:	c7 05 fc 7f 02 c0 9a 60 01 c0 	mov    DWORD PTR ds:0xc0027ffc,0xc001609a
c001686e:	c7 05 00 80 02 c0 fe 60 01 c0 	mov    DWORD PTR ds:0xc0028000,0xc00160fe
c0016878:	c7 05 04 80 02 c0 3b 5a 01 c0 	mov    DWORD PTR ds:0xc0028004,0xc0015a3b
c0016882:	c7 05 08 80 02 c0 62 61 01 c0 	mov    DWORD PTR ds:0xc0028008,0xc0016162
c001688c:	c7 05 0c 80 02 c0 b2 5b 01 c0 	mov    DWORD PTR ds:0xc002800c,0xc0015bb2
c0016896:	c7 05 10 80 02 c0 ae 61 01 c0 	mov    DWORD PTR ds:0xc0028010,0xc00161ae
c00168a0:	c7 05 14 80 02 c0 74 5c 01 c0 	mov    DWORD PTR ds:0xc0028014,0xc0015c74
c00168aa:	c7 05 18 80 02 c0 31 62 01 c0 	mov    DWORD PTR ds:0xc0028018,0xc0016231
c00168b4:	c7 05 1c 80 02 c0 03 5e 01 c0 	mov    DWORD PTR ds:0xc002801c,0xc0015e03
c00168be:	c7 05 20 80 02 c0 5a 62 01 c0 	mov    DWORD PTR ds:0xc0028020,0xc001625a
c00168c8:	c7 05 24 80 02 c0 c2 62 01 c0 	mov    DWORD PTR ds:0xc0028024,0xc00162c2
c00168d2:	c7 05 28 80 02 c0 6f 63 01 c0 	mov    DWORD PTR ds:0xc0028028,0xc001636f
c00168dc:	c7 05 2c 80 02 c0 4b 5a 01 c0 	mov    DWORD PTR ds:0xc002802c,0xc0015a4b
c00168e6:	c7 05 30 80 02 c0 b5 5a 01 c0 	mov    DWORD PTR ds:0xc0028030,0xc0015ab5
c00168f0:	c7 05 34 80 02 c0 ff 5a 01 c0 	mov    DWORD PTR ds:0xc0028034,0xc0015aff
c00168fa:	c7 05 38 80 02 c0 83 64 01 c0 	mov    DWORD PTR ds:0xc0028038,0xc0016483
c0016904:	c7 05 3c 80 02 c0 80 60 01 c0 	mov    DWORD PTR ds:0xc002803c,0xc0016080
c001690e:	c7 05 40 80 02 c0 54 5b 01 c0 	mov    DWORD PTR ds:0xc0028040,0xc0015b54
c0016918:	c7 05 44 80 02 c0 f5 64 01 c0 	mov    DWORD PTR ds:0xc0028044,0xc00164f5
c0016922:	c7 05 48 80 02 c0 3a 65 01 c0 	mov    DWORD PTR ds:0xc0028048,0xc001653a
c001692c:	c7 05 4c 80 02 c0 c5 56 01 c0 	mov    DWORD PTR ds:0xc002804c,0xc00156c5
c0016936:	c7 05 50 80 02 c0 46 58 01 c0 	mov    DWORD PTR ds:0xc0028050,0xc0015846
c0016940:	c7 05 54 80 02 c0 db 58 01 c0 	mov    DWORD PTR ds:0xc0028054,0xc00158db
c001694a:	c7 05 58 80 02 c0 ae 55 01 c0 	mov    DWORD PTR ds:0xc0028058,0xc00155ae
c0016954:	c7 05 5c 80 02 c0 8d 59 01 c0 	mov    DWORD PTR ds:0xc002805c,0xc001598d
c001695e:	c7 05 60 80 02 c0 27 56 01 c0 	mov    DWORD PTR ds:0xc0028060,0xc0015627
c0016968:	c7 05 64 80 02 c0 41 56 01 c0 	mov    DWORD PTR ds:0xc0028064,0xc0015641
c0016972:	c3                   	ret    

c0016973 <Sys::systemCall(regs*, void*)>:
c0016973:	53                   	push   ebx
c0016974:	83 ec 08             	sub    esp,0x8
c0016977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001697b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001697e:	83 f8 7f             	cmp    eax,0x7f
c0016981:	77 16                	ja     c0016999 <Sys::systemCall(regs*, void*)+0x26>
c0016983:	8b 14 85 a0 7f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8060]
c001698a:	85 d2                	test   edx,edx
c001698c:	74 0b                	je     c0016999 <Sys::systemCall(regs*, void*)+0x26>
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	53                   	push   ebx
c0016992:	ff d2                	call   edx
c0016994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016997:	eb 0d                	jmp    c00169a6 <Sys::systemCall(regs*, void*)+0x33>
c0016999:	52                   	push   edx
c001699a:	52                   	push   edx
c001699b:	50                   	push   eax
c001699c:	68 35 55 02 c0       	push   0xc0025535
c00169a1:	e8 9d 62 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00169ae:	31 d2                	xor    edx,edx
c00169b0:	83 c4 08             	add    esp,0x8
c00169b3:	5b                   	pop    ebx
c00169b4:	c3                   	ret    

c00169b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00169b5:	55                   	push   ebp
c00169b6:	57                   	push   edi
c00169b7:	56                   	push   esi
c00169b8:	53                   	push   ebx
c00169b9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00169bf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00169c6:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00169cd:	85 c0                	test   eax,eax
c00169cf:	0f 95 c1             	setne  cl
c00169d2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00169da:	0f 94 c2             	sete   dl
c00169dd:	84 d1                	test   cl,dl
c00169df:	74 23                	je     c0016a04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00169e1:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00169e7:	74 1b                	je     c0016a04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00169e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00169ef:	89 da                	mov    edx,ebx
c00169f1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00169f7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00169fd:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016a04:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016a0b:	05 ff 0f 00 00       	add    eax,0xfff
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a17:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016a1d:	c1 e8 0c             	shr    eax,0xc
c0016a20:	89 fe                	mov    esi,edi
c0016a22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a26:	c1 ee 0c             	shr    esi,0xc
c0016a29:	6a 01                	push   0x1
c0016a2b:	e8 ed 4e ff ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0016a30:	89 c5                	mov    ebp,eax
c0016a32:	58                   	pop    eax
c0016a33:	5a                   	pop    edx
c0016a34:	56                   	push   esi
c0016a35:	68 49 55 02 c0       	push   0xc0025549
c0016a3a:	e8 04 62 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0016a3f:	59                   	pop    ecx
c0016a40:	58                   	pop    eax
c0016a41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a45:	68 5b 55 02 c0       	push   0xc002555b
c0016a4a:	e8 f4 61 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016a58:	0f 86 31 01 00 00    	jbe    c0016b8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016a5e:	c1 e6 0c             	shl    esi,0xc
c0016a61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a64:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a6b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016a75:	01 df                	add    edi,ebx
c0016a77:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016a7a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a7e:	0f 84 08 01 00 00    	je     c0016b8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016a84:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016a8a:	76 05                	jbe    c0016a91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016a8c:	bf 00 10 00 00       	mov    edi,0x1000
c0016a91:	83 ec 0c             	sub    esp,0xc
c0016a94:	31 d2                	xor    edx,edx
c0016a96:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016a9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016a9f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016aa3:	50                   	push   eax
c0016aa4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016aa8:	56                   	push   esi
c0016aa9:	52                   	push   edx
c0016aaa:	57                   	push   edi
c0016aab:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016ab2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ab5:	83 c4 20             	add    esp,0x20
c0016ab8:	85 c0                	test   eax,eax
c0016aba:	74 0a                	je     c0016ac6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016abc:	53                   	push   ebx
c0016abd:	53                   	push   ebx
c0016abe:	50                   	push   eax
c0016abf:	68 6d 55 02 c0       	push   0xc002556d
c0016ac4:	eb 0f                	jmp    c0016ad5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016ac6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016aca:	74 20                	je     c0016aec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016acc:	51                   	push   ecx
c0016acd:	51                   	push   ecx
c0016ace:	6a 00                	push   0x0
c0016ad0:	68 98 55 02 c0       	push   0xc0025598
c0016ad5:	e8 69 61 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0016ada:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016add:	e8 6b 51 ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	31 c0                	xor    eax,eax
c0016ae7:	e9 68 01 00 00       	jmp    c0016c54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016aec:	fa                   	cli    
c0016aed:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0016af3:	e8 11 35 ff ff       	call   c000a009 <Phys::allocatePage()>
c0016af8:	6a 07                	push   0x7
c0016afa:	89 c7                	mov    edi,eax
c0016afc:	55                   	push   ebp
c0016afd:	50                   	push   eax
c0016afe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b06:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b0c:	e8 b3 54 ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016b11:	83 c4 0c             	add    esp,0xc
c0016b14:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016b1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b21:	6a 00                	push   0x0
c0016b23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b31:	e8 e8 52 ff ff       	call   c000be1e <VAS::mapOtherVASIn(bool, VAS*)>
c0016b36:	58                   	pop    eax
c0016b37:	5a                   	pop    edx
c0016b38:	68 07 0c 00 00       	push   0xc07
c0016b3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b41:	57                   	push   edi
c0016b42:	89 ef                	mov    edi,ebp
c0016b44:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016b4b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b51:	6a 00                	push   0x0
c0016b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b61:	e8 1a 58 ff ff       	call   c000c380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016b66:	b9 00 10 00 00       	mov    ecx,0x1000
c0016b6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b6d:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0016b72:	83 c4 20             	add    esp,0x20
c0016b75:	48                   	dec    eax
c0016b76:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0016b7b:	85 c0                	test   eax,eax
c0016b7d:	75 01                	jne    c0016b80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016b7f:	fb                   	sti    
c0016b80:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016b87:	e9 df fe ff ff       	jmp    c0016a6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016b8c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016b8f:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016b97:	0f 86 a9 00 00 00    	jbe    c0016c46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016b9d:	fa                   	cli    
c0016b9e:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0016ba4:	51                   	push   ecx
c0016ba5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016bac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bb2:	6a 00                	push   0x0
c0016bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bbc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bc2:	e8 57 52 ff ff       	call   c000be1e <VAS::mapOtherVASIn(bool, VAS*)>
c0016bc7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016bcb:	c1 e6 0c             	shl    esi,0xc
c0016bce:	01 de                	add    esi,ebx
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	39 de                	cmp    esi,ebx
c0016bd5:	74 61                	je     c0016c38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016bd7:	e8 2d 34 ff ff       	call   c000a009 <Phys::allocatePage()>
c0016bdc:	6a 07                	push   0x7
c0016bde:	89 c7                	mov    edi,eax
c0016be0:	55                   	push   ebp
c0016be1:	50                   	push   eax
c0016be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bf0:	e8 cf 53 ff ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016bf5:	58                   	pop    eax
c0016bf6:	5a                   	pop    edx
c0016bf7:	68 07 0c 00 00       	push   0xc07
c0016bfc:	53                   	push   ebx
c0016bfd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016c03:	57                   	push   edi
c0016c04:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c11:	6a 00                	push   0x0
c0016c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c21:	e8 5a 57 ff ff       	call   c000c380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c26:	83 c4 1c             	add    esp,0x1c
c0016c29:	68 00 10 00 00       	push   0x1000
c0016c2e:	6a 00                	push   0x0
c0016c30:	55                   	push   ebp
c0016c31:	e8 4e 9a fe ff       	call   c0000684 <memset>
c0016c36:	eb 98                	jmp    c0016bd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016c38:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0016c3d:	48                   	dec    eax
c0016c3e:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0016c43:	75 01                	jne    c0016c46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c45:	fb                   	sti    
c0016c46:	83 ec 0c             	sub    esp,0xc
c0016c49:	55                   	push   ebp
c0016c4a:	e8 fe 4f ff ff       	call   c000bc4d <Virt::freeKernelVirtualPages(unsigned long)>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	b0 01                	mov    al,0x1
c0016c54:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016c5a:	5b                   	pop    ebx
c0016c5b:	5e                   	pop    esi
c0016c5c:	5f                   	pop    edi
c0016c5d:	5d                   	pop    ebp
c0016c5e:	c3                   	ret    

c0016c5f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016c5f:	55                   	push   ebp
c0016c60:	57                   	push   edi
c0016c61:	56                   	push   esi
c0016c62:	53                   	push   ebx
c0016c63:	83 ec 48             	sub    esp,0x48
c0016c66:	68 14 01 00 00       	push   0x114
c0016c6b:	e8 53 2d ff ff       	call   c00099c3 <malloc>
c0016c70:	83 c4 0c             	add    esp,0xc
c0016c73:	89 c6                	mov    esi,eax
c0016c75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c79:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016c7d:	50                   	push   eax
c0016c7e:	e8 2b 65 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0016c83:	58                   	pop    eax
c0016c84:	5a                   	pop    edx
c0016c85:	6a 01                	push   0x1
c0016c87:	56                   	push   esi
c0016c88:	e8 85 65 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	85 c0                	test   eax,eax
c0016c92:	0f 85 47 01 00 00    	jne    c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016c98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ca0:	83 ec 0c             	sub    esp,0xc
c0016ca3:	6a 34                	push   0x34
c0016ca5:	e8 19 2d ff ff       	call   c00099c3 <malloc>
c0016caa:	89 c3                	mov    ebx,eax
c0016cac:	58                   	pop    eax
c0016cad:	8b 06                	mov    eax,DWORD PTR [esi]
c0016caf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016cb3:	57                   	push   edi
c0016cb4:	53                   	push   ebx
c0016cb5:	6a 00                	push   0x0
c0016cb7:	6a 34                	push   0x34
c0016cb9:	56                   	push   esi
c0016cba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cbd:	83 c4 20             	add    esp,0x20
c0016cc0:	85 c0                	test   eax,eax
c0016cc2:	0f 85 17 01 00 00    	jne    c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cc8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016cce:	0f 85 0b 01 00 00    	jne    c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016cd7:	85 c0                	test   eax,eax
c0016cd9:	0f 84 00 01 00 00    	je     c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cdf:	31 d2                	xor    edx,edx
c0016ce1:	55                   	push   ebp
c0016ce2:	52                   	push   edx
c0016ce3:	50                   	push   eax
c0016ce4:	56                   	push   esi
c0016ce5:	e8 e6 65 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0016cea:	83 c4 10             	add    esp,0x10
c0016ced:	85 c0                	test   eax,eax
c0016cef:	0f 85 ea 00 00 00    	jne    c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cf5:	83 ec 0c             	sub    esp,0xc
c0016cf8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016cfb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016cff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016d03:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d07:	0f af c2             	imul   eax,edx
c0016d0a:	50                   	push   eax
c0016d0b:	e8 b3 2c ff ff       	call   c00099c3 <malloc>
c0016d10:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d12:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d1d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016d21:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d25:	0f af c2             	imul   eax,edx
c0016d28:	99                   	cdq    
c0016d29:	52                   	push   edx
c0016d2a:	50                   	push   eax
c0016d2b:	56                   	push   esi
c0016d2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d2f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016d32:	83 c4 20             	add    esp,0x20
c0016d35:	85 c0                	test   eax,eax
c0016d37:	0f 84 a2 00 00 00    	je     c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d3d:	31 d2                	xor    edx,edx
c0016d3f:	51                   	push   ecx
c0016d40:	52                   	push   edx
c0016d41:	50                   	push   eax
c0016d42:	56                   	push   esi
c0016d43:	e8 88 65 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0016d48:	83 c4 10             	add    esp,0x10
c0016d4b:	85 c0                	test   eax,eax
c0016d4d:	0f 85 8c 00 00 00    	jne    c0016ddf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d53:	83 ec 0c             	sub    esp,0xc
c0016d56:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016d5a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016d5e:	31 ed                	xor    ebp,ebp
c0016d60:	0f af c2             	imul   eax,edx
c0016d63:	50                   	push   eax
c0016d64:	e8 5a 2c ff ff       	call   c00099c3 <malloc>
c0016d69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d76:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016d7a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016d7e:	0f af c2             	imul   eax,edx
c0016d81:	99                   	cdq    
c0016d82:	52                   	push   edx
c0016d83:	50                   	push   eax
c0016d84:	56                   	push   esi
c0016d85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d88:	83 c4 20             	add    esp,0x20
c0016d8b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016d93:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016d97:	0f 86 80 00 00 00    	jbe    c0016e1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016d9d:	0f b7 fd             	movzx  edi,bp
c0016da0:	c1 e7 05             	shl    edi,0x5
c0016da3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016da7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016daa:	75 6b                	jne    c0016e17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016dac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016daf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016db3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016db6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016dba:	52                   	push   edx
c0016dbb:	31 d2                	xor    edx,edx
c0016dbd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016dc0:	52                   	push   edx
c0016dc1:	50                   	push   eax
c0016dc2:	56                   	push   esi
c0016dc3:	e8 08 65 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	85 c0                	test   eax,eax
c0016dcd:	74 17                	je     c0016de6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016dcf:	83 ec 0c             	sub    esp,0xc
c0016dd2:	68 c4 55 02 c0       	push   0xc00255c4
c0016dd7:	e8 67 5e ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	31 c0                	xor    eax,eax
c0016de1:	e9 87 00 00 00       	jmp    c0016e6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016dec:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016def:	50                   	push   eax
c0016df0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016df4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016df8:	56                   	push   esi
c0016df9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016dfd:	e8 b3 fb ff ff       	call   c00169b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016e02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e06:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016e0a:	83 c4 20             	add    esp,0x20
c0016e0d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016e11:	73 04                	jae    c0016e17 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e17:	45                   	inc    ebp
c0016e18:	e9 76 ff ff ff       	jmp    c0016d93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016e1d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016e21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e29:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016e2f:	83 ec 0c             	sub    esp,0xc
c0016e32:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016e38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016e3d:	05 00 10 00 00       	add    eax,0x1000
c0016e42:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016e45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e49:	e8 85 2b ff ff       	call   c00099d3 <free>
c0016e4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e51:	e8 7d 2b ff ff       	call   c00099d3 <free>
c0016e56:	58                   	pop    eax
c0016e57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e5b:	e8 73 2b ff ff       	call   c00099d3 <free>
c0016e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0016e63:	e8 08 64 ff ff       	call   c000d270 <File::close()>
c0016e68:	83 c4 10             	add    esp,0x10
c0016e6b:	b0 01                	mov    al,0x1
c0016e6d:	83 c4 3c             	add    esp,0x3c
c0016e70:	5b                   	pop    ebx
c0016e71:	5e                   	pop    esi
c0016e72:	5f                   	pop    edi
c0016e73:	5d                   	pop    ebp
c0016e74:	c3                   	ret    

c0016e75 <Thr::runtimeReferenceHelper()>:
c0016e75:	83 ec 18             	sub    esp,0x18
c0016e78:	68 cc 55 02 c0       	push   0xc00255cc
c0016e7d:	e8 c1 5d ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0016e82:	fa                   	cli    
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	eb fe                	jmp    c0016e86 <Thr::runtimeReferenceHelper()+0x11>

c0016e88 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016e88:	57                   	push   edi
c0016e89:	56                   	push   esi
c0016e8a:	53                   	push   ebx
c0016e8b:	31 db                	xor    ebx,ebx
c0016e8d:	39 1d 40 89 02 c0    	cmp    DWORD PTR ds:0xc0028940,ebx
c0016e93:	7e 3c                	jle    c0016ed1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016e95:	8b 34 9d c0 88 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7740]
c0016e9c:	31 ff                	xor    edi,edi
c0016e9e:	39 3c 9d c0 87 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd7840],edi
c0016ea5:	7e 27                	jle    c0016ece <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016ea7:	50                   	push   eax
c0016ea8:	50                   	push   eax
c0016ea9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ead:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eaf:	03 04 9d 40 88 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd77c0]
c0016eb6:	50                   	push   eax
c0016eb7:	e8 10 99 fe ff       	call   c00007cc <strcmp>
c0016ebc:	83 c4 10             	add    esp,0x10
c0016ebf:	85 c0                	test   eax,eax
c0016ec1:	75 05                	jne    c0016ec8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016ec3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016ec6:	eb 0b                	jmp    c0016ed3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016ec8:	83 c6 10             	add    esi,0x10
c0016ecb:	47                   	inc    edi
c0016ecc:	eb d0                	jmp    c0016e9e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016ece:	43                   	inc    ebx
c0016ecf:	eb bc                	jmp    c0016e8d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016ed1:	31 c0                	xor    eax,eax
c0016ed3:	5b                   	pop    ebx
c0016ed4:	5e                   	pop    esi
c0016ed5:	5f                   	pop    edi
c0016ed6:	c3                   	ret    

c0016ed7 <Thr::loadKernelSymbolTable(char const*)>:
c0016ed7:	55                   	push   ebp
c0016ed8:	57                   	push   edi
c0016ed9:	56                   	push   esi
c0016eda:	53                   	push   ebx
c0016edb:	83 ec 68             	sub    esp,0x68
c0016ede:	8b 35 90 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028990
c0016ee4:	68 14 01 00 00       	push   0x114
c0016ee9:	e8 d5 2a ff ff       	call   c00099c3 <malloc>
c0016eee:	83 c4 0c             	add    esp,0xc
c0016ef1:	89 c3                	mov    ebx,eax
c0016ef3:	56                   	push   esi
c0016ef4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016ef8:	50                   	push   eax
c0016ef9:	e8 b0 62 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c0016efe:	5e                   	pop    esi
c0016eff:	5f                   	pop    edi
c0016f00:	6a 01                	push   0x1
c0016f02:	53                   	push   ebx
c0016f03:	e8 0a 63 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c0016f08:	83 c4 10             	add    esp,0x10
c0016f0b:	85 c0                	test   eax,eax
c0016f0d:	74 0a                	je     c0016f19 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016f0f:	83 ec 0c             	sub    esp,0xc
c0016f12:	68 ee 55 02 c0       	push   0xc00255ee
c0016f17:	eb 34                	jmp    c0016f4d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016f19:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016f21:	83 ec 0c             	sub    esp,0xc
c0016f24:	6a 34                	push   0x34
c0016f26:	e8 98 2a ff ff       	call   c00099c3 <malloc>
c0016f2b:	59                   	pop    ecx
c0016f2c:	89 c7                	mov    edi,eax
c0016f2e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016f32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f34:	56                   	push   esi
c0016f35:	57                   	push   edi
c0016f36:	6a 00                	push   0x0
c0016f38:	6a 34                	push   0x34
c0016f3a:	53                   	push   ebx
c0016f3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f3e:	83 c4 20             	add    esp,0x20
c0016f41:	85 c0                	test   eax,eax
c0016f43:	74 17                	je     c0016f5c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	68 05 56 02 c0       	push   0xc0025605
c0016f4d:	e8 11 d8 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0016f52:	83 c4 10             	add    esp,0x10
c0016f55:	31 c0                	xor    eax,eax
c0016f57:	e9 31 02 00 00       	jmp    c001718d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016f5c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016f62:	75 e1                	jne    c0016f45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016f64:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016f67:	85 c0                	test   eax,eax
c0016f69:	74 da                	je     c0016f45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016f6b:	52                   	push   edx
c0016f6c:	31 d2                	xor    edx,edx
c0016f6e:	52                   	push   edx
c0016f6f:	50                   	push   eax
c0016f70:	53                   	push   ebx
c0016f71:	e8 5a 63 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	85 c0                	test   eax,eax
c0016f7b:	75 c8                	jne    c0016f45 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f88:	31 ed                	xor    ebp,ebp
c0016f8a:	0f af c2             	imul   eax,edx
c0016f8d:	50                   	push   eax
c0016f8e:	e8 30 2a ff ff       	call   c00099c3 <malloc>
c0016f93:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016f95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f99:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016fa4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016fa8:	0f af c2             	imul   eax,edx
c0016fab:	99                   	cdq    
c0016fac:	52                   	push   edx
c0016fad:	50                   	push   eax
c0016fae:	53                   	push   ebx
c0016faf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fb2:	83 c4 20             	add    esp,0x20
c0016fb5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016fbd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016fc5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fcd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fd5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016fd9:	0f 86 aa 00 00 00    	jbe    c0017089 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016fdf:	0f b7 f5             	movzx  esi,bp
c0016fe2:	6b f6 28             	imul   esi,esi,0x28
c0016fe5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016fe9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016fec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ff0:	50                   	push   eax
c0016ff1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ff5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016ff9:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ffb:	6b c0 28             	imul   eax,eax,0x28
c0016ffe:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017002:	89 d0                	mov    eax,edx
c0017004:	31 d2                	xor    edx,edx
c0017006:	52                   	push   edx
c0017007:	50                   	push   eax
c0017008:	53                   	push   ebx
c0017009:	e8 c2 62 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c001700e:	83 c4 0c             	add    esp,0xc
c0017011:	6a 20                	push   0x20
c0017013:	6a 00                	push   0x0
c0017015:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017019:	52                   	push   edx
c001701a:	e8 65 96 fe ff       	call   c0000684 <memset>
c001701f:	58                   	pop    eax
c0017020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017022:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017026:	51                   	push   ecx
c0017027:	8d 54 24 40          	lea    edx,[esp+0x40]
c001702b:	52                   	push   edx
c001702c:	6a 00                	push   0x0
c001702e:	6a 1f                	push   0x1f
c0017030:	53                   	push   ebx
c0017031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017034:	83 c4 18             	add    esp,0x18
c0017037:	68 1c 56 02 c0       	push   0xc002561c
c001703c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017040:	52                   	push   edx
c0017041:	e8 86 97 fe ff       	call   c00007cc <strcmp>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	85 c0                	test   eax,eax
c001704b:	75 0f                	jne    c001705c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001704d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017050:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017054:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001705c:	50                   	push   eax
c001705d:	50                   	push   eax
c001705e:	68 24 56 02 c0       	push   0xc0025624
c0017063:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017067:	50                   	push   eax
c0017068:	e8 5f 97 fe ff       	call   c00007cc <strcmp>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	85 c0                	test   eax,eax
c0017072:	75 0f                	jne    c0017083 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017074:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017077:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001707b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001707f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017083:	45                   	inc    ebp
c0017084:	e9 4c ff ff ff       	jmp    c0016fd5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017089:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001708e:	75 10                	jne    c00170a0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	68 2c 56 02 c0       	push   0xc002562c
c0017098:	e8 c6 d6 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001709d:	83 c4 10             	add    esp,0x10
c00170a0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00170a5:	75 10                	jne    c00170b7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00170a7:	83 ec 0c             	sub    esp,0xc
c00170aa:	68 2c 56 02 c0       	push   0xc002562c
c00170af:	e8 af d6 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	31 d2                	xor    edx,edx
c00170b9:	50                   	push   eax
c00170ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170be:	52                   	push   edx
c00170bf:	50                   	push   eax
c00170c0:	53                   	push   ebx
c00170c1:	e8 0a 62 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c00170c6:	5a                   	pop    edx
c00170c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170cb:	e8 f3 28 ff ff       	call   c00099c3 <malloc>
c00170d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00170d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170d8:	31 c9                	xor    ecx,ecx
c00170da:	5e                   	pop    esi
c00170db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00170dd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00170e1:	55                   	push   ebp
c00170e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e6:	51                   	push   ecx
c00170e7:	52                   	push   edx
c00170e8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00170ec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00170f0:	53                   	push   ebx
c00170f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170f4:	83 c4 14             	add    esp,0x14
c00170f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170fb:	e8 c3 28 ff ff       	call   c00099c3 <malloc>
c0017100:	89 c6                	mov    esi,eax
c0017102:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017104:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017107:	56                   	push   esi
c0017108:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001710c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017110:	51                   	push   ecx
c0017111:	52                   	push   edx
c0017112:	53                   	push   ebx
c0017113:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001711a:	8b 15 40 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028940
c0017120:	83 c4 1c             	add    esp,0x1c
c0017123:	c1 e8 04             	shr    eax,0x4
c0017126:	89 04 95 c0 87 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7840],eax
c001712d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017131:	31 d2                	xor    edx,edx
c0017133:	52                   	push   edx
c0017134:	50                   	push   eax
c0017135:	53                   	push   ebx
c0017136:	e8 95 61 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c001713b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001713d:	31 d2                	xor    edx,edx
c001713f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017142:	56                   	push   esi
c0017143:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017147:	52                   	push   edx
c0017148:	50                   	push   eax
c0017149:	53                   	push   ebx
c001714a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001714d:	83 c4 14             	add    esp,0x14
c0017150:	53                   	push   ebx
c0017151:	e8 1a 61 ff ff       	call   c000d270 <File::close()>
c0017156:	5d                   	pop    ebp
c0017157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001715b:	e8 73 28 ff ff       	call   c00099d3 <free>
c0017160:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017163:	e8 6b 28 ff ff       	call   c00099d3 <free>
c0017168:	a1 40 89 02 c0       	mov    eax,ds:0xc0028940
c001716d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017171:	8d 50 01             	lea    edx,[eax+0x1]
c0017174:	89 0c 85 c0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7740],ecx
c001717b:	89 34 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],esi
c0017182:	89 15 40 89 02 c0    	mov    DWORD PTR ds:0xc0028940,edx
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	b0 01                	mov    al,0x1
c001718d:	83 c4 5c             	add    esp,0x5c
c0017190:	5b                   	pop    ebx
c0017191:	5e                   	pop    esi
c0017192:	5f                   	pop    edi
c0017193:	5d                   	pop    ebp
c0017194:	c3                   	ret    

c0017195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017195:	55                   	push   ebp
c0017196:	57                   	push   edi
c0017197:	56                   	push   esi
c0017198:	53                   	push   ebx
c0017199:	81 ec 68 03 00 00    	sub    esp,0x368
c001719f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00171a6:	8b 1d 90 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028990
c00171ac:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00171b0:	68 14 01 00 00       	push   0x114
c00171b5:	e8 09 28 ff ff       	call   c00099c3 <malloc>
c00171ba:	83 c4 0c             	add    esp,0xc
c00171bd:	89 c5                	mov    ebp,eax
c00171bf:	53                   	push   ebx
c00171c0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00171c7:	50                   	push   eax
c00171c8:	e8 e1 5f ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c00171cd:	5e                   	pop    esi
c00171ce:	5f                   	pop    edi
c00171cf:	6a 01                	push   0x1
c00171d1:	55                   	push   ebp
c00171d2:	e8 3b 60 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	85 c0                	test   eax,eax
c00171dc:	0f 85 a7 06 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00171e2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00171ea:	83 ec 0c             	sub    esp,0xc
c00171ed:	6a 34                	push   0x34
c00171ef:	e8 cf 27 ff ff       	call   c00099c3 <malloc>
c00171f4:	5b                   	pop    ebx
c00171f5:	89 c7                	mov    edi,eax
c00171f7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00171fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00171fe:	53                   	push   ebx
c00171ff:	57                   	push   edi
c0017200:	6a 00                	push   0x0
c0017202:	6a 34                	push   0x34
c0017204:	55                   	push   ebp
c0017205:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017208:	83 c4 20             	add    esp,0x20
c001720b:	85 c0                	test   eax,eax
c001720d:	0f 85 76 06 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017213:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017219:	0f 85 6a 06 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001721f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017222:	85 c0                	test   eax,eax
c0017224:	0f 84 5f 06 00 00    	je     c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001722a:	31 d2                	xor    edx,edx
c001722c:	51                   	push   ecx
c001722d:	52                   	push   edx
c001722e:	50                   	push   eax
c001722f:	55                   	push   ebp
c0017230:	e8 9b 60 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0017235:	83 c4 10             	add    esp,0x10
c0017238:	85 c0                	test   eax,eax
c001723a:	0f 85 49 06 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017240:	83 ec 0c             	sub    esp,0xc
c0017243:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017246:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001724a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001724e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017252:	0f af c2             	imul   eax,edx
c0017255:	50                   	push   eax
c0017256:	e8 68 27 ff ff       	call   c00099c3 <malloc>
c001725b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001725e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017269:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001726d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017271:	0f af c2             	imul   eax,edx
c0017274:	99                   	cdq    
c0017275:	52                   	push   edx
c0017276:	50                   	push   eax
c0017277:	55                   	push   ebp
c0017278:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001727b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001727e:	83 c4 20             	add    esp,0x20
c0017281:	85 c0                	test   eax,eax
c0017283:	0f 84 00 06 00 00    	je     c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017289:	52                   	push   edx
c001728a:	31 d2                	xor    edx,edx
c001728c:	52                   	push   edx
c001728d:	50                   	push   eax
c001728e:	55                   	push   ebp
c001728f:	e8 3c 60 ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0017294:	83 c4 10             	add    esp,0x10
c0017297:	85 c0                	test   eax,eax
c0017299:	0f 85 ea 05 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001729f:	83 ec 0c             	sub    esp,0xc
c00172a2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00172a6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00172aa:	31 f6                	xor    esi,esi
c00172ac:	0f af c2             	imul   eax,edx
c00172af:	50                   	push   eax
c00172b0:	e8 0e 27 ff ff       	call   c00099c3 <malloc>
c00172b5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172c3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00172c7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00172cb:	0f af c2             	imul   eax,edx
c00172ce:	99                   	cdq    
c00172cf:	52                   	push   edx
c00172d0:	50                   	push   eax
c00172d1:	55                   	push   ebp
c00172d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172d5:	83 c4 20             	add    esp,0x20
c00172d8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00172dc:	0f 86 8a 00 00 00    	jbe    c001736c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00172e2:	0f b7 de             	movzx  ebx,si
c00172e5:	c1 e3 05             	shl    ebx,0x5
c00172e8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00172ec:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00172ef:	75 75                	jne    c0017366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00172f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f4:	31 d2                	xor    edx,edx
c00172f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00172fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017301:	50                   	push   eax
c0017302:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017305:	52                   	push   edx
c0017306:	50                   	push   eax
c0017307:	55                   	push   ebp
c0017308:	e8 c3 5f ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c001730d:	83 c4 10             	add    esp,0x10
c0017310:	85 c0                	test   eax,eax
c0017312:	0f 85 71 05 00 00    	jne    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017318:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001731f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017322:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017326:	31 d2                	xor    edx,edx
c0017328:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001732c:	83 ec 0c             	sub    esp,0xc
c001732f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017333:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001733a:	50                   	push   eax
c001733b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001733f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017343:	52                   	push   edx
c0017344:	50                   	push   eax
c0017345:	55                   	push   ebp
c0017346:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017349:	83 c4 1c             	add    esp,0x1c
c001734c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001734f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017352:	50                   	push   eax
c0017353:	6a 00                	push   0x0
c0017355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017359:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001735d:	50                   	push   eax
c001735e:	e8 21 93 fe ff       	call   c0000684 <memset>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	46                   	inc    esi
c0017367:	e9 6c ff ff ff       	jmp    c00172d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001736c:	53                   	push   ebx
c001736d:	31 db                	xor    ebx,ebx
c001736f:	68 00 01 00 00       	push   0x100
c0017374:	6a 00                	push   0x0
c0017376:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001737a:	50                   	push   eax
c001737b:	e8 04 93 fe ff       	call   c0000684 <memset>
c0017380:	83 c4 0c             	add    esp,0xc
c0017383:	68 00 01 00 00       	push   0x100
c0017388:	6a 00                	push   0x0
c001738a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017391:	50                   	push   eax
c0017392:	e8 ed 92 fe ff       	call   c0000684 <memset>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173a2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00173aa:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00173b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00173ba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00173c2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00173c6:	0f 86 30 01 00 00    	jbe    c00174fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00173cc:	0f b7 f3             	movzx  esi,bx
c00173cf:	6b f6 28             	imul   esi,esi,0x28
c00173d2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00173d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00173d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173dd:	52                   	push   edx
c00173de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00173e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00173e8:	6b d2 28             	imul   edx,edx,0x28
c00173eb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00173ef:	31 d2                	xor    edx,edx
c00173f1:	52                   	push   edx
c00173f2:	50                   	push   eax
c00173f3:	55                   	push   ebp
c00173f4:	e8 d7 5e ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c00173f9:	83 c4 0c             	add    esp,0xc
c00173fc:	6a 20                	push   0x20
c00173fe:	6a 00                	push   0x0
c0017400:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017407:	51                   	push   ecx
c0017408:	e8 77 92 fe ff       	call   c0000684 <memset>
c001740d:	59                   	pop    ecx
c001740e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017411:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017415:	52                   	push   edx
c0017416:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001741d:	51                   	push   ecx
c001741e:	6a 00                	push   0x0
c0017420:	6a 1f                	push   0x1f
c0017422:	55                   	push   ebp
c0017423:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017426:	83 c4 1c             	add    esp,0x1c
c0017429:	6a 09                	push   0x9
c001742b:	68 46 56 02 c0       	push   0xc0025646
c0017430:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017437:	51                   	push   ecx
c0017438:	e8 43 91 fe ff       	call   c0000580 <memcmp>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	85 c0                	test   eax,eax
c0017442:	75 21                	jne    c0017465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001744c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017454:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017457:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001745e:	89 d0                	mov    eax,edx
c0017460:	40                   	inc    eax
c0017461:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017465:	50                   	push   eax
c0017466:	6a 09                	push   0x9
c0017468:	68 50 56 02 c0       	push   0xc0025650
c001746d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017474:	50                   	push   eax
c0017475:	e8 06 91 fe ff       	call   c0000580 <memcmp>
c001747a:	83 c4 10             	add    esp,0x10
c001747d:	85 c0                	test   eax,eax
c001747f:	75 21                	jne    c00174a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017489:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001748d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017491:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017494:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001749b:	89 d0                	mov    eax,edx
c001749d:	40                   	inc    eax
c001749e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174a2:	50                   	push   eax
c00174a3:	50                   	push   eax
c00174a4:	68 1c 56 02 c0       	push   0xc002561c
c00174a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00174b0:	50                   	push   eax
c00174b1:	e8 16 93 fe ff       	call   c00007cc <strcmp>
c00174b6:	83 c4 10             	add    esp,0x10
c00174b9:	85 c0                	test   eax,eax
c00174bb:	75 0f                	jne    c00174cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00174bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00174c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00174cc:	50                   	push   eax
c00174cd:	50                   	push   eax
c00174ce:	68 24 56 02 c0       	push   0xc0025624
c00174d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00174da:	50                   	push   eax
c00174db:	e8 ec 92 fe ff       	call   c00007cc <strcmp>
c00174e0:	83 c4 10             	add    esp,0x10
c00174e3:	85 c0                	test   eax,eax
c00174e5:	75 0f                	jne    c00174f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00174e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00174ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174f6:	43                   	inc    ebx
c00174f7:	e9 c6 fe ff ff       	jmp    c00173c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00174fc:	31 d2                	xor    edx,edx
c00174fe:	50                   	push   eax
c00174ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017503:	52                   	push   edx
c0017504:	50                   	push   eax
c0017505:	55                   	push   ebp
c0017506:	e8 c5 5d ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c001750b:	58                   	pop    eax
c001750c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017510:	e8 ae 24 ff ff       	call   c00099c3 <malloc>
c0017515:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017518:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001751c:	31 d2                	xor    edx,edx
c001751e:	58                   	pop    eax
c001751f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017523:	53                   	push   ebx
c0017524:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752c:	52                   	push   edx
c001752d:	50                   	push   eax
c001752e:	55                   	push   ebp
c001752f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017532:	83 c4 14             	add    esp,0x14
c0017535:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017539:	e8 85 24 ff ff       	call   c00099c3 <malloc>
c001753e:	31 d2                	xor    edx,edx
c0017540:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017544:	83 c4 0c             	add    esp,0xc
c0017547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001754b:	52                   	push   edx
c001754c:	50                   	push   eax
c001754d:	55                   	push   ebp
c001754e:	e8 7d 5d ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c0017553:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017556:	31 d2                	xor    edx,edx
c0017558:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001755b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001755f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017563:	52                   	push   edx
c0017564:	50                   	push   eax
c0017565:	55                   	push   ebp
c0017566:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017569:	83 c4 20             	add    esp,0x20
c001756c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017574:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017578:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001757c:	0f 84 0b 03 00 00    	je     c001788d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017582:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017589:	31 d2                	xor    edx,edx
c001758b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001758f:	c1 e8 03             	shr    eax,0x3
c0017592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017596:	51                   	push   ecx
c0017597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001759b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001759f:	52                   	push   edx
c00175a0:	50                   	push   eax
c00175a1:	55                   	push   ebp
c00175a2:	e8 29 5d ff ff       	call   c000d2d0 <File::seek(unsigned long long)>
c00175a7:	5b                   	pop    ebx
c00175a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175ac:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00175b3:	e8 0b 24 ff ff       	call   c00099c3 <malloc>
c00175b8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175bf:	31 d2                	xor    edx,edx
c00175c1:	5e                   	pop    esi
c00175c2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00175c6:	50                   	push   eax
c00175c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175cf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00175d6:	52                   	push   edx
c00175d7:	50                   	push   eax
c00175d8:	55                   	push   ebp
c00175d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175dc:	83 c4 20             	add    esp,0x20
c00175df:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00175e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00175eb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00175ef:	0f 8d 7c 02 00 00    	jge    c0017871 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00175f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017602:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017605:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001760d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017611:	89 d8                	mov    eax,ebx
c0017613:	c1 e8 08             	shr    eax,0x8
c0017616:	89 c6                	mov    esi,eax
c0017618:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001761c:	c1 e6 04             	shl    esi,0x4
c001761f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017623:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017626:	85 d2                	test   edx,edx
c0017628:	0f 85 bf 00 00 00    	jne    c00176ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001762e:	83 ec 0c             	sub    esp,0xc
c0017631:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017635:	03 06                	add    eax,DWORD PTR [esi]
c0017637:	50                   	push   eax
c0017638:	e8 4b f8 ff ff       	call   c0016e88 <Thr::getAddressOfKernelSymbol(char const*)>
c001763d:	83 c4 10             	add    esp,0x10
c0017640:	89 c2                	mov    edx,eax
c0017642:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017647:	85 c0                	test   eax,eax
c0017649:	0f 85 9e 00 00 00    	jne    c00176ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017656:	03 06                	add    eax,DWORD PTR [esi]
c0017658:	50                   	push   eax
c0017659:	e8 b2 12 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001765e:	83 c4 10             	add    esp,0x10
c0017661:	89 c2                	mov    edx,eax
c0017663:	85 c0                	test   eax,eax
c0017665:	0f 85 82 00 00 00    	jne    c00176ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001766b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001766f:	50                   	push   eax
c0017670:	50                   	push   eax
c0017671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017675:	03 06                	add    eax,DWORD PTR [esi]
c0017677:	50                   	push   eax
c0017678:	68 5a 56 02 c0       	push   0xc002565a
c001767d:	e8 c1 55 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0017682:	58                   	pop    eax
c0017683:	5a                   	pop    edx
c0017684:	68 74 56 02 c0       	push   0xc0025674
c0017689:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017690:	50                   	push   eax
c0017691:	e8 aa 90 fe ff       	call   c0000740 <strcpy>
c0017696:	59                   	pop    ecx
c0017697:	58                   	pop    eax
c0017698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001769c:	03 06                	add    eax,DWORD PTR [esi]
c001769e:	50                   	push   eax
c001769f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176a6:	50                   	push   eax
c00176a7:	e8 d4 91 fe ff       	call   c0000880 <strcat>
c00176ac:	58                   	pop    eax
c00176ad:	5a                   	pop    edx
c00176ae:	68 0a 57 02 c0       	push   0xc002570a
c00176b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176ba:	50                   	push   eax
c00176bb:	e8 c0 91 fe ff       	call   c0000880 <strcat>
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00176c8:	0f 84 5d 01 00 00    	je     c001782b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00176ce:	83 ec 0c             	sub    esp,0xc
c00176d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176d8:	50                   	push   eax
c00176d9:	e8 85 d0 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00176e5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00176e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00176ed:	80 fb 01             	cmp    bl,0x1
c00176f0:	0f 85 88 00 00 00    	jne    c001777e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00176f6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00176fd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017701:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017705:	01 ce                	add    esi,ecx
c0017707:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001770d:	0f 94 c0             	sete   al
c0017710:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017716:	0f 94 c3             	sete   bl
c0017719:	09 c3                	or     ebx,eax
c001771b:	8b 06                	mov    eax,DWORD PTR [esi]
c001771d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017722:	74 41                	je     c0017765 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017724:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017727:	84 db                	test   bl,bl
c0017729:	75 15                	jne    c0017740 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001772b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001772f:	66 83 f8 0c          	cmp    ax,0xc
c0017733:	76 05                	jbe    c001773a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017735:	b8 0c 00 00 00       	mov    eax,0xc
c001773a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001773e:	76 37                	jbe    c0017777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017740:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017744:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017749:	0f 84 dc 00 00 00    	je     c001782b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001774f:	83 ec 0c             	sub    esp,0xc
c0017752:	68 8b 56 02 c0       	push   0xc002568b
c0017757:	e8 07 d0 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001775c:	83 c4 10             	add    esp,0x10
c001775f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017763:	eb 12                	jmp    c0017777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017765:	01 c1                	add    ecx,eax
c0017767:	84 db                	test   bl,bl
c0017769:	75 0c                	jne    c0017777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001776b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001776f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017773:	77 02                	ja     c0017777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017775:	01 d1                	add    ecx,edx
c0017777:	89 0e                	mov    DWORD PTR [esi],ecx
c0017779:	e9 ea 00 00 00       	jmp    c0017868 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001777e:	80 fb 02             	cmp    bl,0x2
c0017781:	75 7c                	jne    c00177ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017783:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001778a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001778e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017792:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017798:	74 20                	je     c00177ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001779a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00177a0:	74 18                	je     c00177ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00177a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177a6:	b9 0a 00 00 00       	mov    ecx,0xa
c00177ab:	66 83 f8 0e          	cmp    ax,0xe
c00177af:	77 03                	ja     c00177b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00177b1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00177b4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00177b8:	76 1f                	jbe    c00177d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00177ba:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00177be:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177c3:	74 66                	je     c001782b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00177c5:	83 ec 0c             	sub    esp,0xc
c00177c8:	68 a7 56 02 c0       	push   0xc00256a7
c00177cd:	e8 91 cf ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00177d2:	83 c4 10             	add    esp,0x10
c00177d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00177db:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00177e0:	74 13                	je     c00177f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00177e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177e6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00177ed:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00177f1:	01 c8                	add    eax,ecx
c00177f3:	eb 04                	jmp    c00177f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00177f5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00177f9:	01 c2                	add    edx,eax
c00177fb:	89 16                	mov    DWORD PTR [esi],edx
c00177fd:	eb 69                	jmp    c0017868 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00177ff:	0f b6 db             	movzx  ebx,bl
c0017802:	50                   	push   eax
c0017803:	50                   	push   eax
c0017804:	53                   	push   ebx
c0017805:	68 c3 56 02 c0       	push   0xc00256c3
c001780a:	e8 34 54 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001780f:	83 c4 10             	add    esp,0x10
c0017812:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017817:	74 12                	je     c001782b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	68 ce 56 02 c0       	push   0xc00256ce
c0017821:	e8 3d cf ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	eb 3d                	jmp    c0017868 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	55                   	push   ebp
c001782f:	e8 3c 5a ff ff       	call   c000d270 <File::close()>
c0017834:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017837:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001783a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001783d:	59                   	pop    ecx
c001783e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017842:	e8 8c 21 ff ff       	call   c00099d3 <free>
c0017847:	5b                   	pop    ebx
c0017848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001784c:	e8 82 21 ff ff       	call   c00099d3 <free>
c0017851:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017854:	e8 7a 21 ff ff       	call   c00099d3 <free>
c0017859:	5e                   	pop    esi
c001785a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001785e:	e8 70 21 ff ff       	call   c00099d3 <free>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	eb 21                	jmp    c0017889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017868:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001786c:	e9 76 fd ff ff       	jmp    c00175e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017878:	e8 56 21 ff ff       	call   c00099d3 <free>
c001787d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	e9 eb fc ff ff       	jmp    c0017574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017889:	31 c0                	xor    eax,eax
c001788b:	eb 33                	jmp    c00178c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001788d:	83 ec 0c             	sub    esp,0xc
c0017890:	55                   	push   ebp
c0017891:	e8 da 59 ff ff       	call   c000d270 <File::close()>
c0017896:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017899:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001789c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001789f:	58                   	pop    eax
c00178a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178a4:	e8 2a 21 ff ff       	call   c00099d3 <free>
c00178a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178ac:	e8 22 21 ff ff       	call   c00099d3 <free>
c00178b1:	5a                   	pop    edx
c00178b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178b6:	e8 18 21 ff ff       	call   c00099d3 <free>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	b0 01                	mov    al,0x1
c00178c0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00178c6:	5b                   	pop    ebx
c00178c7:	5e                   	pop    esi
c00178c8:	5f                   	pop    edi
c00178c9:	5d                   	pop    ebp
c00178ca:	c3                   	ret    

c00178cb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00178cb:	56                   	push   esi
c00178cc:	31 d2                	xor    edx,edx
c00178ce:	53                   	push   ebx
c00178cf:	8b 1d a0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281a0
c00178d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178d9:	39 d3                	cmp    ebx,edx
c00178db:	7e 1b                	jle    c00178f8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00178dd:	8b 04 95 c0 83 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7c40]
c00178e4:	39 c8                	cmp    eax,ecx
c00178e6:	77 0d                	ja     c00178f5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00178e8:	8b 34 95 c0 81 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7e40]
c00178ef:	01 c6                	add    esi,eax
c00178f1:	39 ce                	cmp    esi,ecx
c00178f3:	77 05                	ja     c00178fa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00178f5:	42                   	inc    edx
c00178f6:	eb e1                	jmp    c00178d9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00178f8:	31 c0                	xor    eax,eax
c00178fa:	5b                   	pop    ebx
c00178fb:	5e                   	pop    esi
c00178fc:	c3                   	ret    

c00178fd <Thr::getDriverNameFromAddress(unsigned long)>:
c00178fd:	53                   	push   ebx
c00178fe:	31 c0                	xor    eax,eax
c0017900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017904:	8b 1d a0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281a0
c001790a:	39 c3                	cmp    ebx,eax
c001790c:	7e 22                	jle    c0017930 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001790e:	8b 14 85 c0 83 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7c40]
c0017915:	39 ca                	cmp    edx,ecx
c0017917:	77 14                	ja     c001792d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017919:	03 14 85 c0 81 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7e40]
c0017920:	39 ca                	cmp    edx,ecx
c0017922:	76 09                	jbe    c001792d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017924:	8b 04 85 c0 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7a40]
c001792b:	eb 05                	jmp    c0017932 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001792d:	40                   	inc    eax
c001792e:	eb da                	jmp    c001790a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017930:	31 c0                	xor    eax,eax
c0017932:	5b                   	pop    ebx
c0017933:	c3                   	ret    

c0017934 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017934:	53                   	push   ebx
c0017935:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017939:	53                   	push   ebx
c001793a:	e8 8c ff ff ff       	call   c00178cb <Thr::getDriverBaseFromAddress(unsigned long)>
c001793f:	5a                   	pop    edx
c0017940:	31 d2                	xor    edx,edx
c0017942:	85 c0                	test   eax,eax
c0017944:	74 04                	je     c001794a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017946:	89 da                	mov    edx,ebx
c0017948:	29 c2                	sub    edx,eax
c001794a:	89 d0                	mov    eax,edx
c001794c:	5b                   	pop    ebx
c001794d:	c3                   	ret    

c001794e <Thr::loadDLL(char const*, bool)>:
c001794e:	55                   	push   ebp
c001794f:	57                   	push   edi
c0017950:	56                   	push   esi
c0017951:	53                   	push   ebx
c0017952:	81 ec 34 01 00 00    	sub    esp,0x134
c0017958:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001795f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017966:	56                   	push   esi
c0017967:	68 e6 56 02 c0       	push   0xc00256e6
c001796c:	e8 d2 52 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0017971:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017978:	e8 46 20 ff ff       	call   c00099c3 <malloc>
c001797d:	83 c4 0c             	add    esp,0xc
c0017980:	89 c3                	mov    ebx,eax
c0017982:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0017988:	56                   	push   esi
c0017989:	50                   	push   eax
c001798a:	e8 1f 58 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	85 db                	test   ebx,ebx
c0017994:	75 3c                	jne    c00179d2 <Thr::loadDLL(char const*, bool)+0x84>
c0017996:	89 f8                	mov    eax,edi
c0017998:	84 c0                	test   al,al
c001799a:	0f 84 d2 01 00 00    	je     c0017b72 <Thr::loadDLL(char const*, bool)+0x224>
c00179a0:	55                   	push   ebp
c00179a1:	55                   	push   ebp
c00179a2:	68 f7 56 02 c0       	push   0xc00256f7
c00179a7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00179ab:	55                   	push   ebp
c00179ac:	e8 8f 8d fe ff       	call   c0000740 <strcpy>
c00179b1:	58                   	pop    eax
c00179b2:	5a                   	pop    edx
c00179b3:	56                   	push   esi
c00179b4:	55                   	push   ebp
c00179b5:	e8 c6 8e fe ff       	call   c0000880 <strcat>
c00179ba:	59                   	pop    ecx
c00179bb:	58                   	pop    eax
c00179bc:	68 0a 57 02 c0       	push   0xc002570a
c00179c1:	55                   	push   ebp
c00179c2:	e8 b9 8e fe ff       	call   c0000880 <strcat>
c00179c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179ca:	e8 94 cd ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00179cf:	83 c4 10             	add    esp,0x10
c00179d2:	51                   	push   ecx
c00179d3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00179d7:	50                   	push   eax
c00179d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00179dc:	50                   	push   eax
c00179dd:	53                   	push   ebx
c00179de:	e8 db 5a ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	85 db                	test   ebx,ebx
c00179e8:	74 0c                	je     c00179f6 <Thr::loadDLL(char const*, bool)+0xa8>
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179ef:	53                   	push   ebx
c00179f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00179fb:	75 0a                	jne    c0017a07 <Thr::loadDLL(char const*, bool)+0xb9>
c00179fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a01:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017a05:	75 3c                	jne    c0017a43 <Thr::loadDLL(char const*, bool)+0xf5>
c0017a07:	89 f8                	mov    eax,edi
c0017a09:	84 c0                	test   al,al
c0017a0b:	0f 84 49 01 00 00    	je     c0017b5a <Thr::loadDLL(char const*, bool)+0x20c>
c0017a11:	51                   	push   ecx
c0017a12:	51                   	push   ecx
c0017a13:	68 f7 56 02 c0       	push   0xc00256f7
c0017a18:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017a1c:	53                   	push   ebx
c0017a1d:	e8 1e 8d fe ff       	call   c0000740 <strcpy>
c0017a22:	5d                   	pop    ebp
c0017a23:	58                   	pop    eax
c0017a24:	56                   	push   esi
c0017a25:	53                   	push   ebx
c0017a26:	e8 55 8e fe ff       	call   c0000880 <strcat>
c0017a2b:	58                   	pop    eax
c0017a2c:	5a                   	pop    edx
c0017a2d:	68 0a 57 02 c0       	push   0xc002570a
c0017a32:	53                   	push   ebx
c0017a33:	e8 48 8e fe ff       	call   c0000880 <strcat>
c0017a38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a3b:	e8 23 cd ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	52                   	push   edx
c0017a44:	6a 03                	push   0x3
c0017a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017a4e:	05 ff 0f 00 00       	add    eax,0xfff
c0017a53:	83 d2 00             	adc    edx,0x0
c0017a56:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017a5a:	50                   	push   eax
c0017a5b:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c0017a61:	e8 60 46 ff ff       	call   c000c0c6 <VAS::allocatePages(int, int)>
c0017a66:	59                   	pop    ecx
c0017a67:	89 c3                	mov    ebx,eax
c0017a69:	5d                   	pop    ebp
c0017a6a:	50                   	push   eax
c0017a6b:	68 86 39 02 c0       	push   0xc0023986
c0017a70:	e8 ce 51 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0017a75:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a78:	e8 23 8c fe ff       	call   c00006a0 <strlen>
c0017a7d:	8b 2d a0 81 02 c0    	mov    ebp,DWORD PTR ds:0xc00281a0
c0017a83:	40                   	inc    eax
c0017a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a87:	e8 37 1f ff ff       	call   c00099c3 <malloc>
c0017a8c:	89 04 ad c0 85 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7a40],eax
c0017a93:	58                   	pop    eax
c0017a94:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c0017a99:	5a                   	pop    edx
c0017a9a:	56                   	push   esi
c0017a9b:	ff 34 85 c0 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7a40]
c0017aa2:	e8 99 8c fe ff       	call   c0000740 <strcpy>
c0017aa7:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c0017aac:	8d 50 01             	lea    edx,[eax+0x1]
c0017aaf:	89 1c 85 c0 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c40],ebx
c0017ab6:	89 15 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,edx
c0017abc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ac0:	83 c4 0c             	add    esp,0xc
c0017ac3:	89 14 85 c0 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7e40],edx
c0017aca:	6a 01                	push   0x1
c0017acc:	53                   	push   ebx
c0017acd:	56                   	push   esi
c0017ace:	e8 c2 f6 ff ff       	call   c0017195 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017ad3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017adf:	0f 85 89 00 00 00    	jne    c0017b6e <Thr::loadDLL(char const*, bool)+0x220>
c0017ae5:	89 f8                	mov    eax,edi
c0017ae7:	84 c0                	test   al,al
c0017ae9:	74 73                	je     c0017b5e <Thr::loadDLL(char const*, bool)+0x210>
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	68 0c 57 02 c0       	push   0xc002570c
c0017af3:	e8 6b cc ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	eb 61                	jmp    c0017b5e <Thr::loadDLL(char const*, bool)+0x210>
c0017afd:	50                   	push   eax
c0017afe:	50                   	push   eax
c0017aff:	89 e8                	mov    eax,ebp
c0017b01:	c1 e0 0c             	shl    eax,0xc
c0017b04:	01 d8                	add    eax,ebx
c0017b06:	50                   	push   eax
c0017b07:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c0017b0d:	e8 1c 41 ff ff       	call   c000bc2e <VAS::getPageTableEntry(unsigned long)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b17:	a8 60                	test   al,0x60
c0017b19:	75 11                	jne    c0017b2c <Thr::loadDLL(char const*, bool)+0x1de>
c0017b1b:	83 ec 0c             	sub    esp,0xc
c0017b1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017b23:	50                   	push   eax
c0017b24:	e8 5d 24 ff ff       	call   c0009f86 <Phys::freePage(unsigned long)>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	45                   	inc    ebp
c0017b2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b35:	05 ff 0f 00 00       	add    eax,0xfff
c0017b3a:	bf 00 00 00 00       	mov    edi,0x0
c0017b3f:	83 d2 00             	adc    edx,0x0
c0017b42:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b46:	c1 ea 0c             	shr    edx,0xc
c0017b49:	39 c5                	cmp    ebp,eax
c0017b4b:	89 d1                	mov    ecx,edx
c0017b4d:	89 f8                	mov    eax,edi
c0017b4f:	19 c8                	sbb    eax,ecx
c0017b51:	72 aa                	jb     c0017afd <Thr::loadDLL(char const*, bool)+0x1af>
c0017b53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017b58:	75 18                	jne    c0017b72 <Thr::loadDLL(char const*, bool)+0x224>
c0017b5a:	31 db                	xor    ebx,ebx
c0017b5c:	eb 14                	jmp    c0017b72 <Thr::loadDLL(char const*, bool)+0x224>
c0017b5e:	83 ec 0c             	sub    esp,0xc
c0017b61:	68 2b 57 02 c0       	push   0xc002572b
c0017b66:	e8 f8 cb ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	31 ed                	xor    ebp,ebp
c0017b70:	eb bb                	jmp    c0017b2d <Thr::loadDLL(char const*, bool)+0x1df>
c0017b72:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017b78:	89 d8                	mov    eax,ebx
c0017b7a:	5b                   	pop    ebx
c0017b7b:	5e                   	pop    esi
c0017b7c:	5f                   	pop    edi
c0017b7d:	5d                   	pop    ebp
c0017b7e:	c3                   	ret    

c0017b7f <Thr::executeDLL(unsigned long, void*)>:
c0017b7f:	56                   	push   esi
c0017b80:	53                   	push   ebx
c0017b81:	52                   	push   edx
c0017b82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017b86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017b8a:	85 db                	test   ebx,ebx
c0017b8c:	75 10                	jne    c0017b9e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017b8e:	83 ec 0c             	sub    esp,0xc
c0017b91:	68 47 57 02 c0       	push   0xc0025747
c0017b96:	e8 c8 cb ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	50                   	push   eax
c0017b9f:	50                   	push   eax
c0017ba0:	53                   	push   ebx
c0017ba1:	68 71 57 02 c0       	push   0xc0025771
c0017ba6:	e8 98 50 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0017bab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017baf:	89 d8                	mov    eax,ebx
c0017bb1:	83 c4 14             	add    esp,0x14
c0017bb4:	5b                   	pop    ebx
c0017bb5:	5e                   	pop    esi
c0017bb6:	ff e0                	jmp    eax

c0017bb8 <userModeEntryPoint(void*)>:
c0017bb8:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0017bbd:	48                   	dec    eax
c0017bbe:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0017bc3:	75 03                	jne    c0017bc8 <userModeEntryPoint(void*)+0x10>
c0017bc5:	fb                   	sti    
c0017bc6:	66 90                	xchg   ax,ax
c0017bc8:	fb                   	sti    
c0017bc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017bd1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017bd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bdb:	e9 7f 86 fe ff       	jmp    c000025f <goToUsermode>

c0017be0 <changeTSS>:
c0017be0:	83 ec 14             	sub    esp,0x14
c0017be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017be8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017beb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017bf0:	c1 e2 15             	shl    edx,0x15
c0017bf3:	29 d0                	sub    eax,edx
c0017bf5:	50                   	push   eax
c0017bf6:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0017bfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c01:	05 7c 11 00 00       	add    eax,0x117c
c0017c06:	50                   	push   eax
c0017c07:	e8 64 36 ff ff       	call   c000b270 <TSS::setESP(unsigned long)>
c0017c0c:	83 c4 1c             	add    esp,0x1c
c0017c0f:	c3                   	ret    

c0017c10 <switchToThread(ThreadControlBlock*)>:
c0017c10:	57                   	push   edi
c0017c11:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0017c16:	56                   	push   esi
c0017c17:	85 c0                	test   eax,eax
c0017c19:	53                   	push   ebx
c0017c1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c1e:	0f 85 90 00 00 00    	jne    c0017cb4 <switchToThread(ThreadControlBlock*)+0xa4>
c0017c24:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017c27:	3c ff                	cmp    al,0xff
c0017c29:	0f 84 81 00 00 00    	je     c0017cb0 <switchToThread(ThreadControlBlock*)+0xa0>
c0017c2f:	0f b6 d0             	movzx  edx,al
c0017c32:	b8 00 04 00 00       	mov    eax,0x400
c0017c37:	29 d0                	sub    eax,edx
c0017c39:	d1 f8                	sar    eax,1
c0017c3b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017c3e:	66 90                	xchg   ax,ax
c0017c40:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017c43:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0017c48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c4e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017c55:	74 4d                	je     c0017ca4 <switchToThread(ThreadControlBlock*)+0x94>
c0017c57:	0f 31                	rdtsc  
c0017c59:	a3 a8 89 02 c0       	mov    ds:0xc00289a8,eax
c0017c5e:	89 c6                	mov    esi,eax
c0017c60:	89 d7                	mov    edi,edx
c0017c62:	2b 35 98 89 02 c0    	sub    esi,DWORD PTR ds:0xc0028998
c0017c68:	89 15 ac 89 02 c0    	mov    DWORD PTR ds:0xc00289ac,edx
c0017c6e:	1b 3d 9c 89 02 c0    	sbb    edi,DWORD PTR ds:0xc002899c
c0017c74:	89 35 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,esi
c0017c7a:	a3 98 89 02 c0       	mov    ds:0xc0028998,eax
c0017c7f:	89 3d a4 89 02 c0    	mov    DWORD PTR ds:0xc00289a4,edi
c0017c85:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017c8b:	89 15 9c 89 02 c0    	mov    DWORD PTR ds:0xc002899c,edx
c0017c91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017c94:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017c97:	01 c6                	add    esi,eax
c0017c99:	11 d7                	adc    edi,edx
c0017c9b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017c9e:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ca4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017ca8:	5b                   	pop    ebx
c0017ca9:	5e                   	pop    esi
c0017caa:	5f                   	pop    edi
c0017cab:	e9 e7 85 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017cb0:	31 c0                	xor    eax,eax
c0017cb2:	eb 8c                	jmp    c0017c40 <switchToThread(ThreadControlBlock*)+0x30>
c0017cb4:	5b                   	pop    ebx
c0017cb5:	c7 05 60 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x1
c0017cbf:	5e                   	pop    esi
c0017cc0:	5f                   	pop    edi
c0017cc1:	c3                   	ret    
c0017cc2:	66 90                	xchg   ax,ax

c0017cc4 <Process::addArgs(char**)>:
c0017cc4:	57                   	push   edi
c0017cc5:	56                   	push   esi
c0017cc6:	53                   	push   ebx
c0017cc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017ccb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017ccf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017cd9:	85 ff                	test   edi,edi
c0017cdb:	74 43                	je     c0017d20 <Process::addArgs(char**)+0x5c>
c0017cdd:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cdf:	85 c0                	test   eax,eax
c0017ce1:	74 3d                	je     c0017d20 <Process::addArgs(char**)+0x5c>
c0017ce3:	31 db                	xor    ebx,ebx
c0017ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ce8:	83 ec 0c             	sub    esp,0xc
c0017ceb:	50                   	push   eax
c0017cec:	e8 af 89 fe ff       	call   c00006a0 <strlen>
c0017cf1:	40                   	inc    eax
c0017cf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017cf5:	e8 c9 1c ff ff       	call   c00099c3 <malloc>
c0017cfa:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017d01:	5a                   	pop    edx
c0017d02:	59                   	pop    ecx
c0017d03:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017d06:	43                   	inc    ebx
c0017d07:	50                   	push   eax
c0017d08:	e8 33 8a fe ff       	call   c0000740 <strcpy>
c0017d0d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017d19:	85 c0                	test   eax,eax
c0017d1b:	75 cb                	jne    c0017ce8 <Process::addArgs(char**)+0x24>
c0017d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d20:	5b                   	pop    ebx
c0017d21:	5e                   	pop    esi
c0017d22:	5f                   	pop    edi
c0017d23:	c3                   	ret    

c0017d24 <Process::Process(char const*, Process*, char**)>:
c0017d24:	56                   	push   esi
c0017d25:	53                   	push   ebx
c0017d26:	83 ec 14             	sub    esp,0x14
c0017d29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d2d:	05 0c 02 00 00       	add    eax,0x20c
c0017d32:	bb 07 00 00 00       	mov    ebx,0x7
c0017d37:	89 c6                	mov    esi,eax
c0017d39:	8d 76 00             	lea    esi,[esi+0x0]
c0017d3c:	85 db                	test   ebx,ebx
c0017d3e:	78 14                	js     c0017d54 <Process::Process(char const*, Process*, char**)+0x30>
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	56                   	push   esi
c0017d44:	e8 07 ab 00 00       	call   c0022850 <ThreadControlBlock::ThreadControlBlock()>
c0017d49:	83 c4 10             	add    esp,0x10
c0017d4c:	83 c6 5f             	add    esi,0x5f
c0017d4f:	4b                   	dec    ebx
c0017d50:	eb ea                	jmp    c0017d3c <Process::Process(char const*, Process*, char**)+0x18>
c0017d52:	66 90                	xchg   ax,ax
c0017d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d58:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d66:	e8 81 c8 ff ff       	call   c00145ec <Krnl::newProcessEnv(Process*)>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	89 c2                	mov    edx,eax
c0017d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d74:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017d7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017d87:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0017d8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d8f:	89 15 d0 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed0,edx
c0017d95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d99:	89 02                	mov    DWORD PTR [edx],eax
c0017d9b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017daa:	e8 14 1c ff ff       	call   c00099c3 <malloc>
c0017daf:	83 c4 10             	add    esp,0x10
c0017db2:	89 c3                	mov    ebx,eax
c0017db4:	83 ec 08             	sub    esp,0x8
c0017db7:	6a 00                	push   0x0
c0017db9:	53                   	push   ebx
c0017dba:	e8 af 46 ff ff       	call   c000c46e <VAS::VAS(bool)>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017df2:	85 c0                	test   eax,eax
c0017df4:	74 42                	je     c0017e38 <Process::Process(char const*, Process*, char**)+0x114>
c0017df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dfa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e24:	05 0c 01 00 00       	add    eax,0x10c
c0017e29:	83 ec 08             	sub    esp,0x8
c0017e2c:	52                   	push   edx
c0017e2d:	50                   	push   eax
c0017e2e:	e8 0d 89 fe ff       	call   c0000740 <strcpy>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	eb 64                	jmp    c0017e9c <Process::Process(char const*, Process*, char**)+0x178>
c0017e38:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017e40:	83 ec 0c             	sub    esp,0xc
c0017e43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e47:	e8 77 1b ff ff       	call   c00099c3 <malloc>
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	89 c3                	mov    ebx,eax
c0017e51:	83 ec 08             	sub    esp,0x8
c0017e54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e58:	53                   	push   ebx
c0017e59:	e8 20 31 ff ff       	call   c000af7e <VgaText::VgaText(char const*)>
c0017e5e:	83 c4 10             	add    esp,0x10
c0017e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	50                   	push   eax
c0017e79:	e8 bf 28 ff ff       	call   c000a73d <addToTerminalCycle(VgaText*)>
c0017e7e:	83 c4 10             	add    esp,0x10
c0017e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e85:	05 0c 01 00 00       	add    eax,0x10c
c0017e8a:	83 ec 08             	sub    esp,0x8
c0017e8d:	68 90 57 02 c0       	push   0xc0025790
c0017e92:	50                   	push   eax
c0017e93:	e8 a8 88 fe ff       	call   c0000740 <strcpy>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	90                   	nop
c0017e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea0:	83 c0 0c             	add    eax,0xc
c0017ea3:	83 ec 08             	sub    esp,0x8
c0017ea6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eaa:	50                   	push   eax
c0017eab:	e8 90 88 fe ff       	call   c0000740 <strcpy>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	83 ec 08             	sub    esp,0x8
c0017eb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017eba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ebe:	e8 01 fe ff ff       	call   c0017cc4 <Process::addArgs(char**)>
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	83 ec 08             	sub    esp,0x8
c0017ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ed1:	e8 89 ed ff ff       	call   c0016c5f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017edd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017ee1:	83 f0 01             	xor    eax,0x1
c0017ee4:	88 c2                	mov    dl,al
c0017ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017ef0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ef5:	83 ec 08             	sub    esp,0x8
c0017ef8:	50                   	push   eax
c0017ef9:	68 e8 57 02 c0       	push   0xc00257e8
c0017efe:	e8 40 4d ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	90                   	nop
c0017f07:	83 c4 14             	add    esp,0x14
c0017f0a:	5b                   	pop    ebx
c0017f0b:	5e                   	pop    esi
c0017f0c:	c3                   	ret    
c0017f0d:	90                   	nop
c0017f0e:	66 90                	xchg   ax,ax

c0017f10 <Process::Process(bool, char const*, Process*, char**)>:
c0017f10:	56                   	push   esi
c0017f11:	53                   	push   ebx
c0017f12:	83 ec 24             	sub    esp,0x24
c0017f15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f19:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f21:	05 0c 02 00 00       	add    eax,0x20c
c0017f26:	bb 07 00 00 00       	mov    ebx,0x7
c0017f2b:	89 c6                	mov    esi,eax
c0017f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f30:	85 db                	test   ebx,ebx
c0017f32:	78 14                	js     c0017f48 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	56                   	push   esi
c0017f38:	e8 13 a9 00 00       	call   c0022850 <ThreadControlBlock::ThreadControlBlock()>
c0017f3d:	83 c4 10             	add    esp,0x10
c0017f40:	83 c6 5f             	add    esi,0x5f
c0017f43:	4b                   	dec    ebx
c0017f44:	eb ea                	jmp    c0017f30 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017f46:	66 90                	xchg   ax,ax
c0017f48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f4c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017f5a:	e8 8d c6 ff ff       	call   c00145ec <Krnl::newProcessEnv(Process*)>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	89 c2                	mov    edx,eax
c0017f64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f68:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017f6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f72:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017f7b:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0017f80:	8d 50 01             	lea    edx,[eax+0x1]
c0017f83:	89 15 d0 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed0,edx
c0017f89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f8d:	89 02                	mov    DWORD PTR [edx],eax
c0017f8f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017f97:	83 ec 0c             	sub    esp,0xc
c0017f9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017f9e:	e8 20 1a ff ff       	call   c00099c3 <malloc>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	89 c3                	mov    ebx,eax
c0017fa8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017fad:	83 ec 08             	sub    esp,0x8
c0017fb0:	50                   	push   eax
c0017fb1:	53                   	push   ebx
c0017fb2:	e8 b7 44 ff ff       	call   c000c46e <VAS::VAS(bool)>
c0017fb7:	83 c4 10             	add    esp,0x10
c0017fba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fbe:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017fc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fc8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017fd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fd6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fda:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017fe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fe4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017fea:	85 c0                	test   eax,eax
c0017fec:	74 42                	je     c0018030 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ff2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ff8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017ffe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018002:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018008:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018012:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018018:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001801c:	05 0c 01 00 00       	add    eax,0x10c
c0018021:	83 ec 08             	sub    esp,0x8
c0018024:	52                   	push   edx
c0018025:	50                   	push   eax
c0018026:	e8 15 87 fe ff       	call   c0000740 <strcpy>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	eb 64                	jmp    c0018094 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018030:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018038:	83 ec 0c             	sub    esp,0xc
c001803b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001803f:	e8 7f 19 ff ff       	call   c00099c3 <malloc>
c0018044:	83 c4 10             	add    esp,0x10
c0018047:	89 c3                	mov    ebx,eax
c0018049:	83 ec 08             	sub    esp,0x8
c001804c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018050:	53                   	push   ebx
c0018051:	e8 28 2f ff ff       	call   c000af7e <VgaText::VgaText(char const*)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001805d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018067:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	50                   	push   eax
c0018071:	e8 c7 26 ff ff       	call   c000a73d <addToTerminalCycle(VgaText*)>
c0018076:	83 c4 10             	add    esp,0x10
c0018079:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001807d:	05 0c 01 00 00       	add    eax,0x10c
c0018082:	83 ec 08             	sub    esp,0x8
c0018085:	68 90 57 02 c0       	push   0xc0025790
c001808a:	50                   	push   eax
c001808b:	e8 b0 86 fe ff       	call   c0000740 <strcpy>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	90                   	nop
c0018094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018098:	83 c0 0c             	add    eax,0xc
c001809b:	83 ec 08             	sub    esp,0x8
c001809e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00180a2:	50                   	push   eax
c00180a3:	e8 98 86 fe ff       	call   c0000740 <strcpy>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	83 ec 08             	sub    esp,0x8
c00180ae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00180b6:	e8 09 fc ff ff       	call   c0017cc4 <Process::addArgs(char**)>
c00180bb:	83 c4 10             	add    esp,0x10
c00180be:	90                   	nop
c00180bf:	83 c4 24             	add    esp,0x24
c00180c2:	5b                   	pop    ebx
c00180c3:	5e                   	pop    esi
c00180c4:	c3                   	ret    
c00180c5:	8d 76 00             	lea    esi,[esi+0x0]

c00180c8 <taskStartupFunction>:
c00180c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180cd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00180d0:	c3                   	ret    
c00180d1:	90                   	nop
c00180d2:	66 90                	xchg   ax,ax

c00180d4 <Semaphore::Semaphore(int)>:
c00180d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180dc:	89 10                	mov    DWORD PTR [eax],edx
c00180de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180e2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00180f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00180ff:	90                   	nop
c0018100:	c3                   	ret    
c0018101:	90                   	nop
c0018102:	66 90                	xchg   ax,ax

c0018104 <Mutex::Mutex()>:
c0018104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018108:	6a 01                	push   0x1
c001810a:	50                   	push   eax
c001810b:	e8 c4 ff ff ff       	call   c00180d4 <Semaphore::Semaphore(int)>
c0018110:	83 c4 08             	add    esp,0x8
c0018113:	90                   	nop
c0018114:	c3                   	ret    
c0018115:	90                   	nop
c0018116:	66 90                	xchg   ax,ax

c0018118 <Process::createThread(void (*)(void*), void*, int)>:
c0018118:	57                   	push   edi
c0018119:	31 c9                	xor    ecx,ecx
c001811b:	56                   	push   esi
c001811c:	53                   	push   ebx
c001811d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018121:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018128:	89 f2                	mov    edx,esi
c001812a:	66 90                	xchg   ax,ax
c001812c:	0f b7 c2             	movzx  eax,dx
c001812f:	83 e2 01             	and    edx,0x1
c0018132:	74 14                	je     c0018148 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018134:	d1 f8                	sar    eax,1
c0018136:	41                   	inc    ecx
c0018137:	89 c2                	mov    edx,eax
c0018139:	83 f9 10             	cmp    ecx,0x10
c001813c:	75 ee                	jne    c001812c <Process::createThread(void (*)(void*), void*, int)+0x14>
c001813e:	31 db                	xor    ebx,ebx
c0018140:	89 d8                	mov    eax,ebx
c0018142:	5b                   	pop    ebx
c0018143:	5e                   	pop    esi
c0018144:	5f                   	pop    edi
c0018145:	c3                   	ret    
c0018146:	66 90                	xchg   ax,ax
c0018148:	b8 01 00 00 00       	mov    eax,0x1
c001814d:	d3 e0                	shl    eax,cl
c001814f:	09 c6                	or     esi,eax
c0018151:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018154:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001815b:	01 c0                	add    eax,eax
c001815d:	01 c8                	add    eax,ecx
c001815f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018162:	01 d8                	add    eax,ebx
c0018164:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001816b:	75 0b                	jne    c0018178 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001816d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018177:	90                   	nop
c0018178:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001817e:	83 ec 08             	sub    esp,0x8
c0018181:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018184:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018187:	01 c0                	add    eax,eax
c0018189:	01 c8                	add    eax,ecx
c001818b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001818e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018191:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018197:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001819d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181a1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00181a7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00181ad:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00181b4:	89 ca                	mov    edx,ecx
c00181b6:	f7 da                	neg    edx
c00181b8:	c1 e2 15             	shl    edx,0x15
c00181bb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00181c1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00181c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00181cb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00181d5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00181db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181df:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00181e5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00181ef:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00181f9:	53                   	push   ebx
c00181fa:	68 84 89 02 c0       	push   0xc0028984
c00181ff:	e8 ec a3 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	89 d8                	mov    eax,ebx
c0018209:	5b                   	pop    ebx
c001820a:	5e                   	pop    esi
c001820b:	5f                   	pop    edi
c001820c:	c3                   	ret    
c001820d:	90                   	nop
c001820e:	66 90                	xchg   ax,ax

c0018210 <Process::createUserThread()>:
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	68 80 00 00 00       	push   0x80
c0018218:	6a 00                	push   0x0
c001821a:	68 b8 7b 01 c0       	push   0xc0017bb8
c001821f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018223:	e8 f0 fe ff ff       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c0018228:	83 c4 1c             	add    esp,0x1c
c001822b:	c3                   	ret    

c001822c <setupMultitasking(void (*)())>:
c001822c:	56                   	push   esi
c001822d:	53                   	push   ebx
c001822e:	51                   	push   ecx
c001822f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018233:	eb 13                	jmp    c0018248 <setupMultitasking(void (*)())+0x1c>
c0018235:	8d 76 00             	lea    esi,[esi+0x0]
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	68 84 89 02 c0       	push   0xc0028984
c0018240:	e8 f3 a2 00 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	83 ec 0c             	sub    esp,0xc
c001824b:	68 84 89 02 c0       	push   0xc0028984
c0018250:	e8 bf a2 00 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	84 c0                	test   al,al
c001825a:	74 dc                	je     c0018238 <setupMultitasking(void (*)())+0xc>
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	68 1f 07 00 00       	push   0x71f
c0018264:	e8 5a 17 ff ff       	call   c00099c3 <malloc>
c0018269:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018270:	89 c3                	mov    ebx,eax
c0018272:	6a 00                	push   0x0
c0018274:	68 94 57 02 c0       	push   0xc0025794
c0018279:	6a 01                	push   0x1
c001827b:	50                   	push   eax
c001827c:	e8 8f fc ff ff       	call   c0017f10 <Process::Process(bool, char const*, Process*, char**)>
c0018281:	83 c4 14             	add    esp,0x14
c0018284:	89 1d 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,ebx
c001828a:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018290:	e8 b6 27 ff ff       	call   c000aa4b <setActiveTerminal(VgaText*)>
c0018295:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001829d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00182a7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00182ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182b0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00182ba:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00182c0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00182c6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00182d0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00182da:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00182e4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00182ea:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00182f4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00182fa:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018304:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001830a:	58                   	pop    eax
c001830b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018311:	5a                   	pop    edx
c0018312:	68 90 57 02 c0       	push   0xc0025790
c0018317:	50                   	push   eax
c0018318:	e8 23 84 fe ff       	call   c0000740 <strcpy>
c001831d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018324:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018328:	83 c4 14             	add    esp,0x14
c001832b:	5b                   	pop    ebx
c001832c:	5e                   	pop    esi
c001832d:	e9 57 7f fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018332:	66 90                	xchg   ax,ax

c0018334 <schedule()>:
c0018334:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018339:	85 c0                	test   eax,eax
c001833b:	74 0b                	je     c0018348 <schedule()+0x14>
c001833d:	c7 05 60 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x1
c0018347:	c3                   	ret    
c0018348:	53                   	push   ebx
c0018349:	83 ec 14             	sub    esp,0x14
c001834c:	68 84 89 02 c0       	push   0xc0028984
c0018351:	e8 be a1 00 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	84 c0                	test   al,al
c001835b:	75 3b                	jne    c0018398 <schedule()+0x64>
c001835d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018362:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018365:	4a                   	dec    edx
c0018366:	74 38                	je     c00183a0 <schedule()+0x6c>
c0018368:	83 ec 0c             	sub    esp,0xc
c001836b:	68 84 89 02 c0       	push   0xc0028984
c0018370:	e8 bb a1 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018375:	c7 04 24 84 89 02 c0 	mov    DWORD PTR [esp],0xc0028984
c001837c:	89 c3                	mov    ebx,eax
c001837e:	e8 b5 a1 00 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018383:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001838a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001838d:	e8 7e f8 ff ff       	call   c0017c10 <switchToThread(ThreadControlBlock*)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	83 c4 08             	add    esp,0x8
c001839b:	5b                   	pop    ebx
c001839c:	c3                   	ret    
c001839d:	8d 76 00             	lea    esi,[esi+0x0]
c00183a0:	83 ec 08             	sub    esp,0x8
c00183a3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00183aa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00183b0:	68 84 89 02 c0       	push   0xc0028984
c00183b5:	e8 36 a2 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	eb a9                	jmp    c0018368 <schedule()+0x34>
c00183bf:	90                   	nop

c00183c0 <Semaphore::tryAcquire()>:
c00183c0:	53                   	push   ebx
c00183c1:	83 ec 08             	sub    esp,0x8
c00183c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183c8:	fa                   	cli    
c00183c9:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00183ce:	8d 50 01             	lea    edx,[eax+0x1]
c00183d1:	89 15 68 89 02 c0    	mov    DWORD PTR ds:0xc0028968,edx
c00183d7:	8b 15 64 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028964
c00183dd:	8d 5a 01             	lea    ebx,[edx+0x1]
c00183e0:	89 1d 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,ebx
c00183e6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00183e9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00183eb:	7c 33                	jl     c0018420 <Semaphore::tryAcquire()+0x60>
c00183ed:	89 15 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,edx
c00183f3:	85 d2                	test   edx,edx
c00183f5:	75 0d                	jne    c0018404 <Semaphore::tryAcquire()+0x44>
c00183f7:	8b 15 60 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028960
c00183fd:	85 d2                	test   edx,edx
c00183ff:	75 6b                	jne    c001846c <Semaphore::tryAcquire()+0xac>
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018409:	85 c0                	test   eax,eax
c001840b:	74 0b                	je     c0018418 <Semaphore::tryAcquire()+0x58>
c001840d:	8d 76 00             	lea    esi,[esi+0x0]
c0018410:	31 c0                	xor    eax,eax
c0018412:	83 c4 08             	add    esp,0x8
c0018415:	5b                   	pop    ebx
c0018416:	c3                   	ret    
c0018417:	90                   	nop
c0018418:	fb                   	sti    
c0018419:	83 c4 08             	add    esp,0x8
c001841c:	5b                   	pop    ebx
c001841d:	c3                   	ret    
c001841e:	66 90                	xchg   ax,ax
c0018420:	43                   	inc    ebx
c0018421:	89 15 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,edx
c0018427:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001842a:	85 d2                	test   edx,edx
c001842c:	75 22                	jne    c0018450 <Semaphore::tryAcquire()+0x90>
c001842e:	8b 0d 60 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028960
c0018434:	85 c9                	test   ecx,ecx
c0018436:	74 18                	je     c0018450 <Semaphore::tryAcquire()+0x90>
c0018438:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018442:	e8 ed fe ff ff       	call   c0018334 <schedule()>
c0018447:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c001844c:	48                   	dec    eax
c001844d:	8d 76 00             	lea    esi,[esi+0x0]
c0018450:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018455:	85 c0                	test   eax,eax
c0018457:	75 0b                	jne    c0018464 <Semaphore::tryAcquire()+0xa4>
c0018459:	fb                   	sti    
c001845a:	b0 01                	mov    al,0x1
c001845c:	83 c4 08             	add    esp,0x8
c001845f:	5b                   	pop    ebx
c0018460:	c3                   	ret    
c0018461:	8d 76 00             	lea    esi,[esi+0x0]
c0018464:	b0 01                	mov    al,0x1
c0018466:	83 c4 08             	add    esp,0x8
c0018469:	5b                   	pop    ebx
c001846a:	c3                   	ret    
c001846b:	90                   	nop
c001846c:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018476:	e8 b9 fe ff ff       	call   c0018334 <schedule()>
c001847b:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018480:	48                   	dec    eax
c0018481:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018486:	85 c0                	test   eax,eax
c0018488:	75 86                	jne    c0018410 <Semaphore::tryAcquire()+0x50>
c001848a:	eb 8c                	jmp    c0018418 <Semaphore::tryAcquire()+0x58>

c001848c <Semaphore::assertLocked(char const*)>:
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018493:	fa                   	cli    
c0018494:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c001849a:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c001849f:	8d 48 01             	lea    ecx,[eax+0x1]
c00184a2:	89 0d 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,ecx
c00184a8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00184aa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00184ad:	7c 29                	jl     c00184d8 <Semaphore::assertLocked(char const*)+0x4c>
c00184af:	90                   	nop
c00184b0:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c00184b5:	85 c0                	test   eax,eax
c00184b7:	75 0b                	jne    c00184c4 <Semaphore::assertLocked(char const*)+0x38>
c00184b9:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c00184be:	85 c0                	test   eax,eax
c00184c0:	75 2e                	jne    c00184f0 <Semaphore::assertLocked(char const*)+0x64>
c00184c2:	66 90                	xchg   ax,ax
c00184c4:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00184c9:	48                   	dec    eax
c00184ca:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00184cf:	75 03                	jne    c00184d4 <Semaphore::assertLocked(char const*)+0x48>
c00184d1:	fb                   	sti    
c00184d2:	66 90                	xchg   ax,ax
c00184d4:	83 c4 0c             	add    esp,0xc
c00184d7:	c3                   	ret    
c00184d8:	83 ec 0c             	sub    esp,0xc
c00184db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00184df:	e8 7f c2 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00184e4:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c00184e9:	83 c4 10             	add    esp,0x10
c00184ec:	48                   	dec    eax
c00184ed:	eb c1                	jmp    c00184b0 <Semaphore::assertLocked(char const*)+0x24>
c00184ef:	90                   	nop
c00184f0:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c00184fa:	e8 35 fe ff ff       	call   c0018334 <schedule()>
c00184ff:	eb c3                	jmp    c00184c4 <Semaphore::assertLocked(char const*)+0x38>
c0018501:	8d 76 00             	lea    esi,[esi+0x0]

c0018504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001850c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018510:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018513:	e8 1c fe ff ff       	call   c0018334 <schedule()>
c0018518:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c001851d:	48                   	dec    eax
c001851e:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018523:	75 03                	jne    c0018528 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018525:	fb                   	sti    
c0018526:	66 90                	xchg   ax,ax
c0018528:	83 c4 0c             	add    esp,0xc
c001852b:	c3                   	ret    

c001852c <blockTask(TaskState)>:
c001852c:	83 ec 0c             	sub    esp,0xc
c001852f:	fa                   	cli    
c0018530:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018536:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001853a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001853f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018542:	e8 ed fd ff ff       	call   c0018334 <schedule()>
c0018547:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c001854c:	48                   	dec    eax
c001854d:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018552:	75 04                	jne    c0018558 <blockTask(TaskState)+0x2c>
c0018554:	fb                   	sti    
c0018555:	8d 76 00             	lea    esi,[esi+0x0]
c0018558:	83 c4 0c             	add    esp,0xc
c001855b:	c3                   	ret    

c001855c <waitTask(int, int*, int)>:
c001855c:	83 ec 18             	sub    esp,0x18
c001855f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018564:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018568:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001856b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001856f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018574:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018577:	6a 07                	push   0x7
c0018579:	e8 ae ff ff ff       	call   c001852c <blockTask(TaskState)>
c001857e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018589:	85 d2                	test   edx,edx
c001858b:	74 0b                	je     c0018598 <waitTask(int, int*, int)+0x3c>
c001858d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018590:	89 02                	mov    DWORD PTR [edx],eax
c0018592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018597:	90                   	nop
c0018598:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001859b:	83 c4 0c             	add    esp,0xc
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <milliTenthSleepUntil(unsigned int)>:
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a7:	39 05 cc 7a 02 c0    	cmp    DWORD PTR ds:0xc0027acc,eax
c00185ad:	76 05                	jbe    c00185b4 <milliTenthSleepUntil(unsigned int)+0x14>
c00185af:	90                   	nop
c00185b0:	83 c4 0c             	add    esp,0xc
c00185b3:	c3                   	ret    
c00185b4:	fa                   	cli    
c00185b5:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c00185bb:	83 ec 08             	sub    esp,0x8
c00185be:	ff 05 64 89 02 c0    	inc    DWORD PTR ds:0xc0028964
c00185c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185ca:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00185cd:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00185d3:	68 78 89 02 c0       	push   0xc0028978
c00185d8:	e8 13 a0 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00185e4:	e8 43 ff ff ff       	call   c001852c <blockTask(TaskState)>
c00185e9:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	48                   	dec    eax
c00185f2:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c00185f7:	85 c0                	test   eax,eax
c00185f9:	75 09                	jne    c0018604 <milliTenthSleepUntil(unsigned int)+0x64>
c00185fb:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0018600:	85 c0                	test   eax,eax
c0018602:	75 14                	jne    c0018618 <milliTenthSleepUntil(unsigned int)+0x78>
c0018604:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018609:	48                   	dec    eax
c001860a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c001860f:	75 9f                	jne    c00185b0 <milliTenthSleepUntil(unsigned int)+0x10>
c0018611:	fb                   	sti    
c0018612:	83 c4 0c             	add    esp,0xc
c0018615:	c3                   	ret    
c0018616:	66 90                	xchg   ax,ax
c0018618:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018622:	e8 0d fd ff ff       	call   c0018334 <schedule()>
c0018627:	eb db                	jmp    c0018604 <milliTenthSleepUntil(unsigned int)+0x64>
c0018629:	8d 76 00             	lea    esi,[esi+0x0]

c001862c <milliTenthSleep(unsigned int)>:
c001862c:	a1 cc 7a 02 c0       	mov    eax,ds:0xc0027acc
c0018631:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018635:	e9 66 ff ff ff       	jmp    c00185a0 <milliTenthSleepUntil(unsigned int)>
c001863a:	66 90                	xchg   ax,ax

c001863c <sleep(unsigned int)>:
c001863c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018640:	8d 04 80             	lea    eax,[eax+eax*4]
c0018643:	8d 04 80             	lea    eax,[eax+eax*4]
c0018646:	8d 04 80             	lea    eax,[eax+eax*4]
c0018649:	8d 04 80             	lea    eax,[eax+eax*4]
c001864c:	c1 e0 04             	shl    eax,0x4
c001864f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018653:	eb d7                	jmp    c001862c <milliTenthSleep(unsigned int)>
c0018655:	90                   	nop
c0018656:	66 90                	xchg   ax,ax

c0018658 <Semaphore::acquire()>:
c0018658:	83 ec 0c             	sub    esp,0xc
c001865b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001865f:	fa                   	cli    
c0018660:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018665:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c001866b:	8d 48 01             	lea    ecx,[eax+0x1]
c001866e:	89 0d 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,ecx
c0018674:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018677:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018679:	7d 2d                	jge    c00186a8 <Semaphore::acquire()+0x50>
c001867b:	41                   	inc    ecx
c001867c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001867f:	90                   	nop
c0018680:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c0018685:	85 c0                	test   eax,eax
c0018687:	75 0b                	jne    c0018694 <Semaphore::acquire()+0x3c>
c0018689:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c001868e:	85 c0                	test   eax,eax
c0018690:	75 62                	jne    c00186f4 <Semaphore::acquire()+0x9c>
c0018692:	66 90                	xchg   ax,ax
c0018694:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018699:	48                   	dec    eax
c001869a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c001869f:	75 03                	jne    c00186a4 <Semaphore::acquire()+0x4c>
c00186a1:	fb                   	sti    
c00186a2:	66 90                	xchg   ax,ax
c00186a4:	83 c4 0c             	add    esp,0xc
c00186a7:	c3                   	ret    
c00186a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00186b4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00186b7:	85 c9                	test   ecx,ecx
c00186b9:	74 4d                	je     c0018708 <Semaphore::acquire()+0xb0>
c00186bb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00186be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186c4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00186c7:	90                   	nop
c00186c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00186d3:	68 10 58 02 c0       	push   0xc0025810
c00186d8:	e8 66 45 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00186dd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00186e4:	e8 43 fe ff ff       	call   c001852c <blockTask(TaskState)>
c00186e9:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	48                   	dec    eax
c00186f2:	eb 8c                	jmp    c0018680 <Semaphore::acquire()+0x28>
c00186f4:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c00186fe:	e8 31 fc ff ff       	call   c0018334 <schedule()>
c0018703:	eb 8f                	jmp    c0018694 <Semaphore::acquire()+0x3c>
c0018705:	8d 76 00             	lea    esi,[esi+0x0]
c0018708:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001870d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018710:	eb b6                	jmp    c00186c8 <Semaphore::acquire()+0x70>
c0018712:	66 90                	xchg   ax,ax

c0018714 <taskReturned>:
c0018714:	83 ec 18             	sub    esp,0x18
c0018717:	68 30 58 02 c0       	push   0xc0025830
c001871c:	e8 42 c0 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	6a 02                	push   0x2
c0018729:	e8 fe fd ff ff       	call   c001852c <blockTask(TaskState)>
c001872e:	fa                   	cli    
c001872f:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018735:	e8 fa fb ff ff       	call   c0018334 <schedule()>
c001873a:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	48                   	dec    eax
c0018743:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018748:	85 c0                	test   eax,eax
c001874a:	75 d8                	jne    c0018724 <taskReturned+0x10>
c001874c:	fb                   	sti    
c001874d:	eb d5                	jmp    c0018724 <taskReturned+0x10>
c001874f:	90                   	nop

c0018750 <Thr::processFromPID(int)>:
c0018750:	57                   	push   edi
c0018751:	56                   	push   esi
c0018752:	53                   	push   ebx
c0018753:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018757:	fa                   	cli    
c0018758:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c001875e:	83 ec 0c             	sub    esp,0xc
c0018761:	68 84 89 02 c0       	push   0xc0028984
c0018766:	e8 c5 9d 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	89 c7                	mov    edi,eax
c0018770:	eb 16                	jmp    c0018788 <Thr::processFromPID(int)+0x38>
c0018772:	66 90                	xchg   ax,ax
c0018774:	83 ec 0c             	sub    esp,0xc
c0018777:	68 84 89 02 c0       	push   0xc0028984
c001877c:	e8 af 9d 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	39 f8                	cmp    eax,edi
c0018786:	74 4c                	je     c00187d4 <Thr::processFromPID(int)+0x84>
c0018788:	83 ec 0c             	sub    esp,0xc
c001878b:	68 84 89 02 c0       	push   0xc0028984
c0018790:	e8 9b 9d 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018795:	c7 04 24 84 89 02 c0 	mov    DWORD PTR [esp],0xc0028984
c001879c:	89 c3                	mov    ebx,eax
c001879e:	e8 95 9d 00 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187a3:	58                   	pop    eax
c00187a4:	5a                   	pop    edx
c00187a5:	53                   	push   ebx
c00187a6:	68 84 89 02 c0       	push   0xc0028984
c00187ab:	e8 40 9e 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187b3:	83 c4 10             	add    esp,0x10
c00187b6:	39 30                	cmp    DWORD PTR [eax],esi
c00187b8:	75 ba                	jne    c0018774 <Thr::processFromPID(int)+0x24>
c00187ba:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00187bf:	48                   	dec    eax
c00187c0:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00187c5:	74 09                	je     c00187d0 <Thr::processFromPID(int)+0x80>
c00187c7:	90                   	nop
c00187c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187cb:	5b                   	pop    ebx
c00187cc:	5e                   	pop    esi
c00187cd:	5f                   	pop    edi
c00187ce:	c3                   	ret    
c00187cf:	90                   	nop
c00187d0:	fb                   	sti    
c00187d1:	eb f5                	jmp    c00187c8 <Thr::processFromPID(int)+0x78>
c00187d3:	90                   	nop
c00187d4:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00187d9:	48                   	dec    eax
c00187da:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00187df:	75 07                	jne    c00187e8 <Thr::processFromPID(int)+0x98>
c00187e1:	fb                   	sti    
c00187e2:	5b                   	pop    ebx
c00187e3:	5e                   	pop    esi
c00187e4:	5f                   	pop    edi
c00187e5:	c3                   	ret    
c00187e6:	66 90                	xchg   ax,ax
c00187e8:	5b                   	pop    ebx
c00187e9:	31 c0                	xor    eax,eax
c00187eb:	5e                   	pop    esi
c00187ec:	5f                   	pop    edi
c00187ed:	c3                   	ret    
c00187ee:	66 90                	xchg   ax,ax

c00187f0 <unblockTask(ThreadControlBlock*)>:
c00187f0:	53                   	push   ebx
c00187f1:	83 ec 08             	sub    esp,0x8
c00187f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187f8:	fa                   	cli    
c00187f9:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c00187ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018802:	85 c0                	test   eax,eax
c0018804:	74 66                	je     c001886c <unblockTask(ThreadControlBlock*)+0x7c>
c0018806:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018809:	48                   	dec    eax
c001880a:	74 38                	je     c0018844 <unblockTask(ThreadControlBlock*)+0x54>
c001880c:	83 ec 0c             	sub    esp,0xc
c001880f:	68 84 89 02 c0       	push   0xc0028984
c0018814:	e8 17 9d 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	85 c0                	test   eax,eax
c001881e:	75 1c                	jne    c001883c <unblockTask(ThreadControlBlock*)+0x4c>
c0018820:	eb 5e                	jmp    c0018880 <unblockTask(ThreadControlBlock*)+0x90>
c0018822:	66 90                	xchg   ax,ax
c0018824:	83 ec 08             	sub    esp,0x8
c0018827:	50                   	push   eax
c0018828:	68 84 89 02 c0       	push   0xc0028984
c001882d:	e8 ae a0 00 00       	call   c00228e0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	85 c0                	test   eax,eax
c0018837:	74 47                	je     c0018880 <unblockTask(ThreadControlBlock*)+0x90>
c0018839:	8d 76 00             	lea    esi,[esi+0x0]
c001883c:	39 c3                	cmp    ebx,eax
c001883e:	75 e4                	jne    c0018824 <unblockTask(ThreadControlBlock*)+0x34>
c0018840:	eb 12                	jmp    c0018854 <unblockTask(ThreadControlBlock*)+0x64>
c0018842:	66 90                	xchg   ax,ax
c0018844:	83 ec 0c             	sub    esp,0xc
c0018847:	68 b2 57 02 c0       	push   0xc00257b2
c001884c:	e8 f2 43 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0018851:	83 c4 10             	add    esp,0x10
c0018854:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018859:	48                   	dec    eax
c001885a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c001885f:	75 03                	jne    c0018864 <unblockTask(ThreadControlBlock*)+0x74>
c0018861:	fb                   	sti    
c0018862:	66 90                	xchg   ax,ax
c0018864:	83 c4 08             	add    esp,0x8
c0018867:	5b                   	pop    ebx
c0018868:	c3                   	ret    
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	83 ec 0c             	sub    esp,0xc
c001886f:	68 9b 57 02 c0       	push   0xc002579b
c0018874:	e8 ca 43 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0018879:	83 c4 10             	add    esp,0x10
c001887c:	eb d6                	jmp    c0018854 <unblockTask(ThreadControlBlock*)+0x64>
c001887e:	66 90                	xchg   ax,ax
c0018880:	83 ec 08             	sub    esp,0x8
c0018883:	53                   	push   ebx
c0018884:	68 84 89 02 c0       	push   0xc0028984
c0018889:	e8 62 9d 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001888e:	83 c4 10             	add    esp,0x10
c0018891:	eb c1                	jmp    c0018854 <unblockTask(ThreadControlBlock*)+0x64>
c0018893:	90                   	nop

c0018894 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018894:	55                   	push   ebp
c0018895:	57                   	push   edi
c0018896:	56                   	push   esi
c0018897:	53                   	push   ebx
c0018898:	83 ec 1c             	sub    esp,0x1c
c001889b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001889f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188a2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00188a8:	85 ff                	test   edi,edi
c00188aa:	7e 24                	jle    c00188d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00188ac:	31 f6                	xor    esi,esi
c00188ae:	66 90                	xchg   ax,ax
c00188b0:	83 ec 0c             	sub    esp,0xc
c00188b3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00188ba:	46                   	inc    esi
c00188bb:	e8 13 11 ff ff       	call   c00099d3 <free>
c00188c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188c3:	83 c4 10             	add    esp,0x10
c00188c6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00188cc:	7f e2                	jg     c00188b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00188ce:	66 90                	xchg   ax,ax
c00188d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00188da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00188df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00188e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00188e5:	d3 c0                	rol    eax,cl
c00188e7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00188ee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00188f1:	89 f7                	mov    edi,esi
c00188f3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00188fb:	0f 85 73 01 00 00    	jne    c0018a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018901:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018907:	85 ed                	test   ebp,ebp
c0018909:	74 1d                	je     c0018928 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	55                   	push   ebp
c001890f:	e8 f4 bb ff ff       	call   c0014508 <EnvVarContainer::~EnvVarContainer()>
c0018914:	59                   	pop    ecx
c0018915:	5e                   	pop    esi
c0018916:	6a 0c                	push   0xc
c0018918:	55                   	push   ebp
c0018919:	e8 44 42 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c001891e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	89 f7                	mov    edi,esi
c0018926:	66 90                	xchg   ax,ax
c0018928:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001892e:	85 c0                	test   eax,eax
c0018930:	0f 84 b2 00 00 00    	je     c00189e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018936:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018939:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001893d:	31 c9                	xor    ecx,ecx
c001893f:	eb 17                	jmp    c0018958 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018941:	8d 76 00             	lea    esi,[esi+0x0]
c0018944:	41                   	inc    ecx
c0018945:	83 f9 10             	cmp    ecx,0x10
c0018948:	0f 84 9a 00 00 00    	je     c00189e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001894e:	66 90                	xchg   ax,ax
c0018950:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018956:	66 90                	xchg   ax,ax
c0018958:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001895f:	d3 fa                	sar    edx,cl
c0018961:	83 e2 01             	and    edx,0x1
c0018964:	74 de                	je     c0018944 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018966:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018969:	01 d2                	add    edx,edx
c001896b:	01 ca                	add    edx,ecx
c001896d:	8d 14 92             	lea    edx,[edx+edx*4]
c0018970:	01 d0                	add    eax,edx
c0018972:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018978:	83 fd 07             	cmp    ebp,0x7
c001897b:	75 c7                	jne    c0018944 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001897d:	05 40 02 00 00       	add    eax,0x240
c0018982:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018985:	83 fd ff             	cmp    ebp,0xffffffff
c0018988:	0f 8c ee 00 00 00    	jl     c0018a7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001898e:	0f 84 ac 01 00 00    	je     c0018b40 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018994:	85 ed                	test   ebp,ebp
c0018996:	0f 84 90 01 00 00    	je     c0018b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c001899c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001899e:	75 a4                	jne    c0018944 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00189aa:	01 d0                	add    eax,edx
c00189ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00189b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00189bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189c2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00189c9:	50                   	push   eax
c00189ca:	e8 21 fe ff ff       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189d9:	89 f7                	mov    edi,esi
c00189db:	41                   	inc    ecx
c00189dc:	83 f9 10             	cmp    ecx,0x10
c00189df:	0f 85 6b ff ff ff    	jne    c0018950 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00189e5:	8d 76 00             	lea    esi,[esi+0x0]
c00189e8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00189ee:	85 c0                	test   eax,eax
c00189f0:	74 62                	je     c0018a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00189f2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00189f8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00189fe:	74 54                	je     c0018a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	68 84 89 02 c0       	push   0xc0028984
c0018a08:	e8 23 9b 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a0d:	c7 04 24 84 89 02 c0 	mov    DWORD PTR [esp],0xc0028984
c0018a14:	89 c7                	mov    edi,eax
c0018a16:	e8 f9 9a 00 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	84 c0                	test   al,al
c0018a20:	0f 84 ce 00 00 00    	je     c0018af4 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018a26:	66 90                	xchg   ax,ax
c0018a28:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a2b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a31:	85 d2                	test   edx,edx
c0018a33:	74 0f                	je     c0018a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	8b 02                	mov    eax,DWORD PTR [edx]
c0018a3a:	52                   	push   edx
c0018a3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018a3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a41:	83 c4 10             	add    esp,0x10
c0018a44:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018a4e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018a51:	8d 76 00             	lea    esi,[esi+0x0]
c0018a54:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018a5a:	85 db                	test   ebx,ebx
c0018a5c:	74 16                	je     c0018a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018a5e:	83 ec 0c             	sub    esp,0xc
c0018a61:	53                   	push   ebx
c0018a62:	e8 e1 33 ff ff       	call   c000be48 <VAS::~VAS()>
c0018a67:	58                   	pop    eax
c0018a68:	5a                   	pop    edx
c0018a69:	6a 14                	push   0x14
c0018a6b:	53                   	push   ebx
c0018a6c:	e8 f1 40 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0018a71:	83 c4 10             	add    esp,0x10
c0018a74:	83 c4 1c             	add    esp,0x1c
c0018a77:	5b                   	pop    ebx
c0018a78:	5e                   	pop    esi
c0018a79:	5f                   	pop    edi
c0018a7a:	5d                   	pop    ebp
c0018a7b:	c3                   	ret    
c0018a7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018a80:	83 ec 0c             	sub    esp,0xc
c0018a83:	68 64 58 02 c0       	push   0xc0025864
c0018a88:	e8 d6 bc ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0018a8d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a90:	83 c4 10             	add    esp,0x10
c0018a93:	89 f7                	mov    edi,esi
c0018a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a99:	e9 a6 fe ff ff       	jmp    c0018944 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a9e:	66 90                	xchg   ax,ax
c0018aa0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018aa6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018aac:	75 1e                	jne    c0018acc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018aae:	83 ec 0c             	sub    esp,0xc
c0018ab1:	68 cc 58 02 c0       	push   0xc00258cc
c0018ab6:	e8 88 41 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0018abb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018ac2:	e8 65 fa ff ff       	call   c001852c <blockTask(TaskState)>
c0018ac7:	83 c4 10             	add    esp,0x10
c0018aca:	66 90                	xchg   ax,ax
c0018acc:	83 ec 08             	sub    esp,0x8
c0018acf:	56                   	push   esi
c0018ad0:	68 84 89 02 c0       	push   0xc0028984
c0018ad5:	e8 16 9b 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ada:	c7 04 24 84 89 02 c0 	mov    DWORD PTR [esp],0xc0028984
c0018ae1:	e8 4a 9a 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ae6:	83 c4 10             	add    esp,0x10
c0018ae9:	39 f8                	cmp    eax,edi
c0018aeb:	0f 84 37 ff ff ff    	je     c0018a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018af1:	8d 76 00             	lea    esi,[esi+0x0]
c0018af4:	83 ec 0c             	sub    esp,0xc
c0018af7:	68 84 89 02 c0       	push   0xc0028984
c0018afc:	e8 2f 9a 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b01:	c7 04 24 84 89 02 c0 	mov    DWORD PTR [esp],0xc0028984
c0018b08:	89 c6                	mov    esi,eax
c0018b0a:	e8 29 9a 00 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b0f:	83 c4 10             	add    esp,0x10
c0018b12:	39 f3                	cmp    ebx,esi
c0018b14:	74 b6                	je     c0018acc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b16:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018b19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b1c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018b22:	75 a8                	jne    c0018acc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b24:	e9 77 ff ff ff       	jmp    c0018aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018b29:	8d 76 00             	lea    esi,[esi+0x0]
c0018b2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b30:	83 ec 0c             	sub    esp,0xc
c0018b33:	68 98 58 02 c0       	push   0xc0025898
c0018b38:	e9 4b ff ff ff       	jmp    c0018a88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b40:	8b 36                	mov    esi,DWORD PTR [esi]
c0018b42:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b46:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018b49:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b4c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018b52:	01 d7                	add    edi,edx
c0018b54:	89 f8                	mov    eax,edi
c0018b56:	e9 51 fe ff ff       	jmp    c00189ac <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018b5b:	90                   	nop

c0018b5c <cleanerTaskFunction(void*)>:
c0018b5c:	53                   	push   ebx
c0018b5d:	83 ec 08             	sub    esp,0x8
c0018b60:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018b65:	48                   	dec    eax
c0018b66:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018b6b:	75 03                	jne    c0018b70 <cleanerTaskFunction(void*)+0x14>
c0018b6d:	fb                   	sti    
c0018b6e:	66 90                	xchg   ax,ax
c0018b70:	fa                   	cli    
c0018b71:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018b76:	80 3d 4c 89 02 c0 00 	cmp    BYTE PTR ds:0xc002894c,0x0
c0018b7d:	8d 50 01             	lea    edx,[eax+0x1]
c0018b80:	89 15 68 89 02 c0    	mov    DWORD PTR ds:0xc0028968,edx
c0018b86:	0f 84 ac 00 00 00    	je     c0018c38 <cleanerTaskFunction(void*)+0xdc>
c0018b8c:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018b91:	85 c0                	test   eax,eax
c0018b93:	75 03                	jne    c0018b98 <cleanerTaskFunction(void*)+0x3c>
c0018b95:	fb                   	sti    
c0018b96:	66 90                	xchg   ax,ax
c0018b98:	c6 05 4c 89 02 c0 00 	mov    BYTE PTR ds:0xc002894c,0x0
c0018b9f:	fa                   	cli    
c0018ba0:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018ba6:	ff 05 64 89 02 c0    	inc    DWORD PTR ds:0xc0028964
c0018bac:	fa                   	cli    
c0018bad:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018bb3:	eb 2b                	jmp    c0018be0 <cleanerTaskFunction(void*)+0x84>
c0018bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb8:	83 ec 0c             	sub    esp,0xc
c0018bbb:	68 6c 89 02 c0       	push   0xc002896c
c0018bc0:	e8 6b 99 00 00       	call   c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bc5:	c7 04 24 6c 89 02 c0 	mov    DWORD PTR [esp],0xc002896c
c0018bcc:	89 c3                	mov    ebx,eax
c0018bce:	e8 65 99 00 00       	call   c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bd6:	e8 b9 fc ff ff       	call   c0018894 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018bdb:	83 c4 10             	add    esp,0x10
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	83 ec 0c             	sub    esp,0xc
c0018be3:	68 6c 89 02 c0       	push   0xc002896c
c0018be8:	e8 27 99 00 00       	call   c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	84 c0                	test   al,al
c0018bf2:	74 c4                	je     c0018bb8 <cleanerTaskFunction(void*)+0x5c>
c0018bf4:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018bf9:	48                   	dec    eax
c0018bfa:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018bff:	75 03                	jne    c0018c04 <cleanerTaskFunction(void*)+0xa8>
c0018c01:	fb                   	sti    
c0018c02:	66 90                	xchg   ax,ax
c0018c04:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018c09:	48                   	dec    eax
c0018c0a:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c0018c0f:	0f 85 4b ff ff ff    	jne    c0018b60 <cleanerTaskFunction(void*)+0x4>
c0018c15:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0018c1a:	85 c0                	test   eax,eax
c0018c1c:	0f 84 3e ff ff ff    	je     c0018b60 <cleanerTaskFunction(void*)+0x4>
c0018c22:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018c2c:	e8 03 f7 ff ff       	call   c0018334 <schedule()>
c0018c31:	e9 2a ff ff ff       	jmp    c0018b60 <cleanerTaskFunction(void*)+0x4>
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	6a 02                	push   0x2
c0018c3d:	e8 c2 f8 ff ff       	call   c0018504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018c42:	83 c4 10             	add    esp,0x10
c0018c45:	e9 4e ff ff ff       	jmp    c0018b98 <cleanerTaskFunction(void*)+0x3c>
c0018c4a:	66 90                	xchg   ax,ax

c0018c4c <terminateTask(int)>:
c0018c4c:	83 ec 14             	sub    esp,0x14
c0018c4f:	fa                   	cli    
c0018c50:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018c56:	ff 05 64 89 02 c0    	inc    DWORD PTR ds:0xc0028964
c0018c5c:	fa                   	cli    
c0018c5d:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018c63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c6c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c74:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018c77:	50                   	push   eax
c0018c78:	68 6c 89 02 c0       	push   0xc002896c
c0018c7d:	e8 6e 99 00 00       	call   c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018c91:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0018c96:	85 c0                	test   eax,eax
c0018c98:	74 5e                	je     c0018cf8 <terminateTask(int)+0xac>
c0018c9a:	83 ec 0c             	sub    esp,0xc
c0018c9d:	c6 05 4c 89 02 c0 01 	mov    BYTE PTR ds:0xc002894c,0x1
c0018ca4:	50                   	push   eax
c0018ca5:	e8 46 fb ff ff       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c0018caa:	83 c4 10             	add    esp,0x10
c0018cad:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb0:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018cb5:	48                   	dec    eax
c0018cb6:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018cbb:	75 03                	jne    c0018cc0 <terminateTask(int)+0x74>
c0018cbd:	fb                   	sti    
c0018cbe:	66 90                	xchg   ax,ax
c0018cc0:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018cc5:	48                   	dec    eax
c0018cc6:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c0018ccb:	75 0b                	jne    c0018cd8 <terminateTask(int)+0x8c>
c0018ccd:	83 3d 60 89 02 c0 00 	cmp    DWORD PTR ds:0xc0028960,0x0
c0018cd4:	75 36                	jne    c0018d0c <terminateTask(int)+0xc0>
c0018cd6:	66 90                	xchg   ax,ax
c0018cd8:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018cdd:	48                   	dec    eax
c0018cde:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018ce3:	75 03                	jne    c0018ce8 <terminateTask(int)+0x9c>
c0018ce5:	fb                   	sti    
c0018ce6:	66 90                	xchg   ax,ax
c0018ce8:	fa                   	cli    
c0018ce9:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018cef:	90                   	nop
c0018cf0:	e8 3f f6 ff ff       	call   c0018334 <schedule()>
c0018cf5:	eb e1                	jmp    c0018cd8 <terminateTask(int)+0x8c>
c0018cf7:	90                   	nop
c0018cf8:	83 ec 0c             	sub    esp,0xc
c0018cfb:	68 c9 57 02 c0       	push   0xc00257c9
c0018d00:	e8 3e 3f ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	eb a6                	jmp    c0018cb0 <terminateTask(int)+0x64>
c0018d0a:	66 90                	xchg   ax,ax
c0018d0c:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018d16:	eb d8                	jmp    c0018cf0 <terminateTask(int)+0xa4>

c0018d18 <Thr::terminateFromIRQ(int)>:
c0018d18:	83 ec 18             	sub    esp,0x18
c0018d1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d1f:	e8 28 ff ff ff       	call   c0018c4c <terminateTask(int)>

c0018d24 <Semaphore::release()>:
c0018d24:	83 ec 0c             	sub    esp,0xc
c0018d27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d2b:	fa                   	cli    
c0018d2c:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018d31:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018d37:	8d 48 01             	lea    ecx,[eax+0x1]
c0018d3a:	89 0d 64 89 02 c0    	mov    DWORD PTR ds:0xc0028964,ecx
c0018d40:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018d43:	85 c9                	test   ecx,ecx
c0018d45:	74 41                	je     c0018d88 <Semaphore::release()+0x64>
c0018d47:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018d4a:	83 ec 0c             	sub    esp,0xc
c0018d4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018d50:	51                   	push   ecx
c0018d51:	e8 9a fa ff ff       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c0018d56:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0018d5b:	83 c4 10             	add    esp,0x10
c0018d5e:	48                   	dec    eax
c0018d5f:	90                   	nop
c0018d60:	a3 64 89 02 c0       	mov    ds:0xc0028964,eax
c0018d65:	85 c0                	test   eax,eax
c0018d67:	75 0b                	jne    c0018d74 <Semaphore::release()+0x50>
c0018d69:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0018d6e:	85 c0                	test   eax,eax
c0018d70:	75 1e                	jne    c0018d90 <Semaphore::release()+0x6c>
c0018d72:	66 90                	xchg   ax,ax
c0018d74:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018d79:	48                   	dec    eax
c0018d7a:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018d7f:	75 03                	jne    c0018d84 <Semaphore::release()+0x60>
c0018d81:	fb                   	sti    
c0018d82:	66 90                	xchg   ax,ax
c0018d84:	83 c4 0c             	add    esp,0xc
c0018d87:	c3                   	ret    
c0018d88:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018d8b:	eb d3                	jmp    c0018d60 <Semaphore::release()+0x3c>
c0018d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d90:	c7 05 60 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x0
c0018d9a:	e8 95 f5 ff ff       	call   c0018334 <schedule()>
c0018d9f:	eb d3                	jmp    c0018d74 <Semaphore::release()+0x50>
c0018da1:	8d 76 00             	lea    esi,[esi+0x0]

c0018da4 <__static_initialization_and_destruction_0(int, int)>:
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018dac:	0f 85 8e 00 00 00    	jne    c0018e40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018db2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018dba:	0f 85 80 00 00 00    	jne    c0018e40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	68 84 89 02 c0       	push   0xc0028984
c0018dc8:	e8 cf 9a 00 00       	call   c002289c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	83 ec 04             	sub    esp,0x4
c0018dd3:	68 10 67 02 c0       	push   0xc0026710
c0018dd8:	68 84 89 02 c0       	push   0xc0028984
c0018ddd:	68 4c 28 02 c0       	push   0xc002284c
c0018de2:	e8 f5 3c ff ff       	call   c000cadc <__cxa_atexit>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	83 ec 0c             	sub    esp,0xc
c0018ded:	68 78 89 02 c0       	push   0xc0028978
c0018df2:	e8 a5 9a 00 00       	call   c002289c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018df7:	83 c4 10             	add    esp,0x10
c0018dfa:	83 ec 04             	sub    esp,0x4
c0018dfd:	68 10 67 02 c0       	push   0xc0026710
c0018e02:	68 78 89 02 c0       	push   0xc0028978
c0018e07:	68 4c 28 02 c0       	push   0xc002284c
c0018e0c:	e8 cb 3c ff ff       	call   c000cadc <__cxa_atexit>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	68 6c 89 02 c0       	push   0xc002896c
c0018e1c:	e8 7b 9a 00 00       	call   c002289c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	83 ec 04             	sub    esp,0x4
c0018e27:	68 10 67 02 c0       	push   0xc0026710
c0018e2c:	68 6c 89 02 c0       	push   0xc002896c
c0018e31:	68 4c 28 02 c0       	push   0xc002284c
c0018e36:	e8 a1 3c ff ff       	call   c000cadc <__cxa_atexit>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	66 90                	xchg   ax,ax
c0018e40:	90                   	nop
c0018e41:	83 c4 0c             	add    esp,0xc
c0018e44:	c3                   	ret    
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]

c0018e48 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018e48:	83 ec 0c             	sub    esp,0xc
c0018e4b:	83 ec 08             	sub    esp,0x8
c0018e4e:	68 ff ff 00 00       	push   0xffff
c0018e53:	6a 01                	push   0x1
c0018e55:	e8 4a ff ff ff       	call   c0018da4 <__static_initialization_and_destruction_0(int, int)>
c0018e5a:	83 c4 10             	add    esp,0x10
c0018e5d:	83 c4 0c             	add    esp,0xc
c0018e60:	c3                   	ret    

c0018e61 <Vm::inbv(unsigned short)>:
c0018e61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018e65:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018e6a:	75 06                	jne    c0018e72 <Vm::inbv(unsigned short)+0x11>
c0018e6c:	a0 cc 89 02 c0       	mov    al,ds:0xc00289cc
c0018e71:	c3                   	ret    
c0018e72:	ec                   	in     al,dx
c0018e73:	c3                   	ret    

c0018e74 <Vm::outbv(unsigned short, unsigned char)>:
c0018e74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e7c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018e81:	75 25                	jne    c0018ea8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018e83:	8b 0d cc 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289cc
c0018e89:	8d 51 01             	lea    edx,[ecx+0x1]
c0018e8c:	88 81 e0 89 02 c0    	mov    BYTE PTR [ecx-0x3ffd7620],al
c0018e92:	89 15 cc 89 02 c0    	mov    DWORD PTR ds:0xc00289cc,edx
c0018e98:	83 fa 20             	cmp    edx,0x20
c0018e9b:	75 0c                	jne    c0018ea9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018e9d:	c7 05 cc 89 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00289cc,0x1f
c0018ea7:	c3                   	ret    
c0018ea8:	ee                   	out    dx,al
c0018ea9:	c3                   	ret    

c0018eaa <Vm::realToLinear(unsigned short, unsigned short)>:
c0018eaa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018eaf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018eb4:	c1 e0 04             	shl    eax,0x4
c0018eb7:	01 d0                	add    eax,edx
c0018eb9:	c3                   	ret    

c0018eba <Vm::getSegment(unsigned int)>:
c0018eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ebe:	c1 e8 10             	shr    eax,0x10
c0018ec1:	c3                   	ret    

c0018ec2 <Vm::getOffset(unsigned int)>:
c0018ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ec6:	c3                   	ret    

c0018ec7 <Vm::mainloop2()>:
c0018ec7:	83 ec 18             	sub    esp,0x18
c0018eca:	fa                   	cli    
c0018ecb:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018ed1:	6a 02                	push   0x2
c0018ed3:	c6 05 c5 89 02 c0 01 	mov    BYTE PTR ds:0xc00289c5,0x1
c0018eda:	e8 25 f6 ff ff       	call   c0018504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ee4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018ee8:	52                   	push   edx
c0018ee9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018eed:	52                   	push   edx
c0018eee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018ef2:	52                   	push   edx
c0018ef3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018ef7:	50                   	push   eax
c0018ef8:	e8 32 73 fe ff       	call   c000022f <goToVM86>
c0018efd:	83 c4 2c             	add    esp,0x2c
c0018f00:	c3                   	ret    

c0018f01 <Vm::mainVm8086Loop(void*)>:
c0018f01:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018f06:	48                   	dec    eax
c0018f07:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018f0c:	75 01                	jne    c0018f0f <Vm::mainVm8086Loop(void*)+0xe>
c0018f0e:	fb                   	sti    
c0018f0f:	eb b6                	jmp    c0018ec7 <Vm::mainloop2()>

c0018f11 <Vm::mainloop3(unsigned long)>:
c0018f11:	83 ec 18             	sub    esp,0x18
c0018f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f18:	fa                   	cli    
c0018f19:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018f1f:	6a 02                	push   0x2
c0018f21:	c6 05 c4 89 02 c0 01 	mov    BYTE PTR ds:0xc00289c4,0x1
c0018f28:	a3 c0 89 02 c0       	mov    ds:0xc00289c0,eax
c0018f2d:	e8 d2 f5 ff ff       	call   c0018504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f32:	83 c4 1c             	add    esp,0x1c
c0018f35:	eb 90                	jmp    c0018ec7 <Vm::mainloop2()>

c0018f37 <Vm::initialise8086()>:
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	68 80 00 00 00       	push   0x80
c0018f3f:	6a 00                	push   0x0
c0018f41:	68 01 8f 01 c0       	push   0xc0018f01
c0018f46:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0018f4c:	e8 c7 f1 ff ff       	call   c0018118 <Process::createThread(void (*)(void*), void*, int)>
c0018f51:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018f58:	a3 c8 89 02 c0       	mov    ds:0xc00289c8,eax
c0018f5d:	68 00 01 00 00       	push   0x100
c0018f62:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0018f67:	6a 00                	push   0x0
c0018f69:	6a 00                	push   0x0
c0018f6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018f71:	e8 44 33 ff ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f76:	83 c4 2c             	add    esp,0x2c
c0018f79:	c3                   	ret    

c0018f7a <Vm::finish8086()>:
c0018f7a:	53                   	push   ebx
c0018f7b:	83 ec 08             	sub    esp,0x8
c0018f7e:	fa                   	cli    
c0018f7f:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c0018f85:	80 3d c4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289c4,0x0
c0018f8c:	75 15                	jne    c0018fa3 <Vm::finish8086()+0x29>
c0018f8e:	e8 a1 f3 ff ff       	call   c0018334 <schedule()>
c0018f93:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018f98:	48                   	dec    eax
c0018f99:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0018f9e:	75 de                	jne    c0018f7e <Vm::finish8086()+0x4>
c0018fa0:	fb                   	sti    
c0018fa1:	eb db                	jmp    c0018f7e <Vm::finish8086()+0x4>
c0018fa3:	83 ec 0c             	sub    esp,0xc
c0018fa6:	8b 1d c0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289c0
c0018fac:	ff 35 c8 89 02 c0    	push   DWORD PTR ds:0xc00289c8
c0018fb2:	c6 05 c4 89 02 c0 00 	mov    BYTE PTR ds:0xc00289c4,0x0
c0018fb9:	e8 32 f8 ff ff       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c0018fbe:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	8d 50 ff             	lea    edx,[eax-0x1]
c0018fc9:	89 15 68 89 02 c0    	mov    DWORD PTR ds:0xc0028968,edx
c0018fcf:	85 d2                	test   edx,edx
c0018fd1:	75 01                	jne    c0018fd4 <Vm::finish8086()+0x5a>
c0018fd3:	fb                   	sti    
c0018fd4:	89 d8                	mov    eax,ebx
c0018fd6:	83 c4 08             	add    esp,0x8
c0018fd9:	5b                   	pop    ebx
c0018fda:	c3                   	ret    

c0018fdb <Vm::getOutput8086(unsigned char*)>:
c0018fdb:	57                   	push   edi
c0018fdc:	8b 0d cc 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289cc
c0018fe2:	56                   	push   esi
c0018fe3:	be e0 89 02 c0       	mov    esi,0xc00289e0
c0018fe8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fee:	a1 cc 89 02 c0       	mov    eax,ds:0xc00289cc
c0018ff3:	5e                   	pop    esi
c0018ff4:	c7 05 cc 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289cc,0x0
c0018ffe:	5f                   	pop    edi
c0018fff:	c3                   	ret    

c0019000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019000:	55                   	push   ebp
c0019001:	57                   	push   edi
c0019002:	56                   	push   esi
c0019003:	53                   	push   ebx
c0019004:	83 ec 2c             	sub    esp,0x2c
c0019007:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001900b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001900f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019013:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019017:	fa                   	cli    
c0019018:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c001901e:	0f b6 35 c5 89 02 c0 	movzx  esi,BYTE PTR ds:0xc00289c5
c0019025:	89 f0                	mov    eax,esi
c0019027:	84 c0                	test   al,al
c0019029:	75 1d                	jne    c0019048 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001902b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001902f:	e8 00 f3 ff ff       	call   c0018334 <schedule()>
c0019034:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0019039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001903d:	48                   	dec    eax
c001903e:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0019043:	75 d2                	jne    c0019017 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019045:	fb                   	sti    
c0019046:	eb cf                	jmp    c0019017 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019048:	a1 c8 89 02 c0       	mov    eax,ds:0xc00289c8
c001904d:	c7 05 cc 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289cc,0x0
c0019057:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001905b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001905f:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019063:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019067:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001906b:	50                   	push   eax
c001906c:	6a 20                	push   0x20
c001906e:	6a 00                	push   0x0
c0019070:	68 e0 89 02 c0       	push   0xc00289e0
c0019075:	e8 0a 76 fe ff       	call   c0000684 <memset>
c001907a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019081:	e8 3d 09 ff ff       	call   c00099c3 <malloc>
c0019086:	83 c4 0c             	add    esp,0xc
c0019089:	89 c3                	mov    ebx,eax
c001908b:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c0019091:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019095:	50                   	push   eax
c0019096:	e8 13 41 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	85 db                	test   ebx,ebx
c00190a0:	75 0a                	jne    c00190ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00190a2:	83 ec 0c             	sub    esp,0xc
c00190a5:	68 f4 58 02 c0       	push   0xc00258f4
c00190aa:	eb 3e                	jmp    c00190ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00190ac:	50                   	push   eax
c00190ad:	8d 44 24 17          	lea    eax,[esp+0x17]
c00190b1:	50                   	push   eax
c00190b2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00190b6:	50                   	push   eax
c00190b7:	53                   	push   ebx
c00190b8:	e8 01 44 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00190c5:	74 0a                	je     c00190d1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00190c7:	83 ec 0c             	sub    esp,0xc
c00190ca:	68 08 59 02 c0       	push   0xc0025908
c00190cf:	eb 19                	jmp    c00190ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00190d1:	51                   	push   ecx
c00190d2:	51                   	push   ecx
c00190d3:	6a 01                	push   0x1
c00190d5:	53                   	push   ebx
c00190d6:	e8 37 41 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	85 c0                	test   eax,eax
c00190e0:	74 24                	je     c0019106 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00190e2:	83 ec 0c             	sub    esp,0xc
c00190e5:	68 21 59 02 c0       	push   0xc0025921
c00190ea:	e8 74 b6 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00190ef:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	48                   	dec    eax
c00190f8:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00190fd:	85 c0                	test   eax,eax
c00190ff:	75 01                	jne    c0019102 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019101:	fb                   	sti    
c0019102:	31 f6                	xor    esi,esi
c0019104:	eb 58                	jmp    c001915e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019106:	0f b7 ed             	movzx  ebp,bp
c0019109:	50                   	push   eax
c001910a:	0f b7 ff             	movzx  edi,di
c001910d:	50                   	push   eax
c001910e:	55                   	push   ebp
c001910f:	57                   	push   edi
c0019110:	e8 95 fd ff ff       	call   c0018eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0019115:	5a                   	pop    edx
c0019116:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019118:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001911c:	51                   	push   ecx
c001911d:	50                   	push   eax
c001911e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019122:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019126:	53                   	push   ebx
c0019127:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001912a:	83 c4 14             	add    esp,0x14
c001912d:	53                   	push   ebx
c001912e:	e8 3d 41 ff ff       	call   c000d270 <File::close()>
c0019133:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	48                   	dec    eax
c001913c:	c6 05 c5 89 02 c0 00 	mov    BYTE PTR ds:0xc00289c5,0x0
c0019143:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c0019148:	85 c0                	test   eax,eax
c001914a:	75 01                	jne    c001914d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001914c:	fb                   	sti    
c001914d:	83 ec 0c             	sub    esp,0xc
c0019150:	ff 35 c8 89 02 c0    	push   DWORD PTR ds:0xc00289c8
c0019156:	e8 95 f6 ff ff       	call   c00187f0 <unblockTask(ThreadControlBlock*)>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	83 c4 2c             	add    esp,0x2c
c0019161:	89 f0                	mov    eax,esi
c0019163:	5b                   	pop    ebx
c0019164:	5e                   	pop    esi
c0019165:	5f                   	pop    edi
c0019166:	5d                   	pop    ebp
c0019167:	c3                   	ret    

c0019168 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019168:	57                   	push   edi
c0019169:	56                   	push   esi
c001916a:	53                   	push   ebx
c001916b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001916f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019173:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019177:	83 e8 06             	sub    eax,0x6
c001917a:	0f b7 c0             	movzx  eax,ax
c001917d:	50                   	push   eax
c001917e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019183:	50                   	push   eax
c0019184:	e8 21 fd ff ff       	call   c0018eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0019189:	5a                   	pop    edx
c001918a:	5e                   	pop    esi
c001918b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001918e:	8d 56 fa             	lea    edx,[esi-0x6]
c0019191:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019197:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001919a:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001919d:	83 c2 02             	add    edx,0x2
c00191a0:	66 89 10             	mov    WORD PTR [eax],dx
c00191a3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00191a6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00191aa:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00191ad:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00191b1:	89 d6                	mov    esi,edx
c00191b3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00191b9:	66 81 e6 ff fd       	and    si,0xfdff
c00191be:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00191c2:	74 07                	je     c00191cb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00191c4:	89 d6                	mov    esi,edx
c00191c6:	66 81 ce 00 02       	or     si,0x200
c00191cb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00191cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00191d8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00191e0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00191e3:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00191eb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00191ee:	5b                   	pop    ebx
c00191ef:	5e                   	pop    esi
c00191f0:	5f                   	pop    edi
c00191f1:	c3                   	ret    

c00191f2 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00191f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00191f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00191fc:	c1 e0 04             	shl    eax,0x4
c00191ff:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019202:	c3                   	ret    

c0019203 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019203:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019208:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001920d:	c1 e0 04             	shl    eax,0x4
c0019210:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019214:	c3                   	ret    

c0019215 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019215:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001921a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001921f:	c1 e0 04             	shl    eax,0x4
c0019222:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019225:	c3                   	ret    

c0019226 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019226:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001922b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019230:	c1 e0 04             	shl    eax,0x4
c0019233:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019237:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001923a:	c3                   	ret    

c001923b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001923b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019240:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019245:	c1 e0 04             	shl    eax,0x4
c0019248:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001924c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019250:	c3                   	ret    

c0019251 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019251:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019256:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001925b:	c1 e0 04             	shl    eax,0x4
c001925e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019262:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019265:	c3                   	ret    

c0019266 <Vm::faultHandler(regs*)>:
c0019266:	55                   	push   ebp
c0019267:	57                   	push   edi
c0019268:	56                   	push   esi
c0019269:	53                   	push   ebx
c001926a:	83 ec 1c             	sub    esp,0x1c
c001926d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019271:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019274:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019278:	0f b7 f8             	movzx  edi,ax
c001927b:	52                   	push   edx
c001927c:	0f b7 c0             	movzx  eax,ax
c001927f:	50                   	push   eax
c0019280:	e8 25 fc ff ff       	call   c0018eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0019285:	5a                   	pop    edx
c0019286:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019289:	59                   	pop    ecx
c001928a:	89 c1                	mov    ecx,eax
c001928c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001928f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019293:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001929c:	0f b7 c5             	movzx  eax,bp
c001929f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192a3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00192a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00192ab:	e8 fa fb ff ff       	call   c0018eaa <Vm::realToLinear(unsigned short, unsigned short)>
c00192b0:	5e                   	pop    esi
c00192b1:	be 06 00 00 00       	mov    esi,0x6
c00192b6:	5a                   	pop    edx
c00192b7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00192bc:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00192c1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00192c4:	80 fa 9d             	cmp    dl,0x9d
c00192c7:	0f 84 2c 02 00 00    	je     c00194f9 <Vm::faultHandler(regs*)+0x293>
c00192cd:	0f 87 91 00 00 00    	ja     c0019364 <Vm::faultHandler(regs*)+0xfe>
c00192d3:	80 fa 66             	cmp    dl,0x66
c00192d6:	0f 84 98 01 00 00    	je     c0019474 <Vm::faultHandler(regs*)+0x20e>
c00192dc:	77 47                	ja     c0019325 <Vm::faultHandler(regs*)+0xbf>
c00192de:	80 fa 36             	cmp    dl,0x36
c00192e1:	0f 84 80 01 00 00    	je     c0019467 <Vm::faultHandler(regs*)+0x201>
c00192e7:	77 1a                	ja     c0019303 <Vm::faultHandler(regs*)+0x9d>
c00192e9:	80 fa 26             	cmp    dl,0x26
c00192ec:	0f 84 4e 01 00 00    	je     c0019440 <Vm::faultHandler(regs*)+0x1da>
c00192f2:	80 fa 2e             	cmp    dl,0x2e
c00192f5:	0f 85 e2 05 00 00    	jne    c00198dd <Vm::faultHandler(regs*)+0x677>
c00192fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00192fe:	31 f6                	xor    esi,esi
c0019300:	41                   	inc    ecx
c0019301:	eb be                	jmp    c00192c1 <Vm::faultHandler(regs*)+0x5b>
c0019303:	80 fa 64             	cmp    dl,0x64
c0019306:	0f 84 41 01 00 00    	je     c001944d <Vm::faultHandler(regs*)+0x1e7>
c001930c:	0f 87 48 01 00 00    	ja     c001945a <Vm::faultHandler(regs*)+0x1f4>
c0019312:	80 fa 3e             	cmp    dl,0x3e
c0019315:	0f 85 c2 05 00 00    	jne    c00198dd <Vm::faultHandler(regs*)+0x677>
c001931b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001931e:	be 01 00 00 00       	mov    esi,0x1
c0019323:	eb db                	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c0019325:	80 fa 6d             	cmp    dl,0x6d
c0019328:	0f 84 ec 02 00 00    	je     c001961a <Vm::faultHandler(regs*)+0x3b4>
c001932e:	77 17                	ja     c0019347 <Vm::faultHandler(regs*)+0xe1>
c0019330:	80 fa 67             	cmp    dl,0x67
c0019333:	0f 84 48 01 00 00    	je     c0019481 <Vm::faultHandler(regs*)+0x21b>
c0019339:	80 fa 6c             	cmp    dl,0x6c
c001933c:	0f 84 69 02 00 00    	je     c00195ab <Vm::faultHandler(regs*)+0x345>
c0019342:	e9 96 05 00 00       	jmp    c00198dd <Vm::faultHandler(regs*)+0x677>
c0019347:	80 fa 6f             	cmp    dl,0x6f
c001934a:	0f 84 f4 03 00 00    	je     c0019744 <Vm::faultHandler(regs*)+0x4de>
c0019350:	0f 82 59 03 00 00    	jb     c00196af <Vm::faultHandler(regs*)+0x449>
c0019356:	80 fa 9c             	cmp    dl,0x9c
c0019359:	0f 84 2f 01 00 00    	je     c001948e <Vm::faultHandler(regs*)+0x228>
c001935f:	e9 79 05 00 00       	jmp    c00198dd <Vm::faultHandler(regs*)+0x677>
c0019364:	80 fa ec             	cmp    dl,0xec
c0019367:	0f 84 14 05 00 00    	je     c0019881 <Vm::faultHandler(regs*)+0x61b>
c001936d:	77 7b                	ja     c00193ea <Vm::faultHandler(regs*)+0x184>
c001936f:	80 fa e4             	cmp    dl,0xe4
c0019372:	0f 84 93 04 00 00    	je     c001980b <Vm::faultHandler(regs*)+0x5a5>
c0019378:	77 53                	ja     c00193cd <Vm::faultHandler(regs*)+0x167>
c001937a:	80 fa cd             	cmp    dl,0xcd
c001937d:	0f 84 d9 01 00 00    	je     c001955c <Vm::faultHandler(regs*)+0x2f6>
c0019383:	80 fa cf             	cmp    dl,0xcf
c0019386:	0f 85 51 05 00 00    	jne    c00198dd <Vm::faultHandler(regs*)+0x677>
c001938c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001938f:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019392:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019396:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019399:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001939d:	81 ca 00 02 02 00    	or     edx,0x20200
c00193a3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00193a6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00193aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00193b0:	66 c1 e8 09          	shr    ax,0x9
c00193b4:	83 e0 01             	and    eax,0x1
c00193b7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00193ba:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00193bd:	83 c0 06             	add    eax,0x6
c00193c0:	25 ff ff 00 00       	and    eax,0xffff
c00193c5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00193c8:	e9 0c 05 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x673>
c00193cd:	80 fa e6             	cmp    dl,0xe6
c00193d0:	0f 84 7f 04 00 00    	je     c0019855 <Vm::faultHandler(regs*)+0x5ef>
c00193d6:	0f 82 4b 04 00 00    	jb     c0019827 <Vm::faultHandler(regs*)+0x5c1>
c00193dc:	80 fa e7             	cmp    dl,0xe7
c00193df:	0f 84 87 04 00 00    	je     c001986c <Vm::faultHandler(regs*)+0x606>
c00193e5:	e9 f3 04 00 00       	jmp    c00198dd <Vm::faultHandler(regs*)+0x677>
c00193ea:	80 fa ef             	cmp    dl,0xef
c00193ed:	0f 84 d1 04 00 00    	je     c00198c4 <Vm::faultHandler(regs*)+0x65e>
c00193f3:	77 28                	ja     c001941d <Vm::faultHandler(regs*)+0x1b7>
c00193f5:	80 fa ed             	cmp    dl,0xed
c00193f8:	0f 84 9f 04 00 00    	je     c001989d <Vm::faultHandler(regs*)+0x637>
c00193fe:	80 fa ee             	cmp    dl,0xee
c0019401:	0f 85 d6 04 00 00    	jne    c00198dd <Vm::faultHandler(regs*)+0x677>
c0019407:	50                   	push   eax
c0019408:	50                   	push   eax
c0019409:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001940d:	50                   	push   eax
c001940e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019412:	50                   	push   eax
c0019413:	e8 5c fa ff ff       	call   c0018e74 <Vm::outbv(unsigned short, unsigned char)>
c0019418:	e9 9f 04 00 00       	jmp    c00198bc <Vm::faultHandler(regs*)+0x656>
c001941d:	80 fa fa             	cmp    dl,0xfa
c0019420:	0f 84 69 01 00 00    	je     c001958f <Vm::faultHandler(regs*)+0x329>
c0019426:	80 fa fb             	cmp    dl,0xfb
c0019429:	0f 84 6e 01 00 00    	je     c001959d <Vm::faultHandler(regs*)+0x337>
c001942f:	80 fa f3             	cmp    dl,0xf3
c0019432:	0f 85 a5 04 00 00    	jne    c00198dd <Vm::faultHandler(regs*)+0x677>
c0019438:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001943b:	e9 c0 fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c0019440:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019443:	be 02 00 00 00       	mov    esi,0x2
c0019448:	e9 b3 fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c001944d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019450:	be 03 00 00 00       	mov    esi,0x3
c0019455:	e9 a6 fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c001945a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001945d:	be 04 00 00 00       	mov    esi,0x4
c0019462:	e9 99 fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c0019467:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001946a:	be 05 00 00 00       	mov    esi,0x5
c001946f:	e9 8c fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c0019474:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019477:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001947c:	e9 7f fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c0019481:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019484:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019489:	e9 72 fe ff ff       	jmp    c0019300 <Vm::faultHandler(regs*)+0x9a>
c001948e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019491:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019495:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001949a:	74 30                	je     c00194cc <Vm::faultHandler(regs*)+0x266>
c001949c:	83 e9 04             	sub    ecx,0x4
c001949f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00194a5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00194ab:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00194ae:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00194b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00194b7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00194bb:	0f 84 15 04 00 00    	je     c00198d6 <Vm::faultHandler(regs*)+0x670>
c00194c1:	80 ce 02             	or     dh,0x2
c00194c4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00194c7:	e9 0a 04 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00194cc:	83 e9 02             	sub    ecx,0x2
c00194cf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00194d5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00194d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00194dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00194e2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00194e6:	74 05                	je     c00194ed <Vm::faultHandler(regs*)+0x287>
c00194e8:	80 ce 02             	or     dh,0x2
c00194eb:	eb 03                	jmp    c00194f0 <Vm::faultHandler(regs*)+0x28a>
c00194ed:	80 e6 fd             	and    dh,0xfd
c00194f0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00194f4:	e9 dd 03 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00194f9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194fe:	74 2a                	je     c001952a <Vm::faultHandler(regs*)+0x2c4>
c0019500:	8b 10                	mov    edx,DWORD PTR [eax]
c0019502:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019508:	81 ca 00 02 02 00    	or     edx,0x20200
c001950e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019511:	8b 00                	mov    eax,DWORD PTR [eax]
c0019513:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019519:	c1 e8 09             	shr    eax,0x9
c001951c:	83 e0 01             	and    eax,0x1
c001951f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019522:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019525:	83 c0 04             	add    eax,0x4
c0019528:	eb 25                	jmp    c001954f <Vm::faultHandler(regs*)+0x2e9>
c001952a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001952d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019533:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019536:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019539:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001953f:	66 c1 e8 09          	shr    ax,0x9
c0019543:	83 e0 01             	and    eax,0x1
c0019546:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019549:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001954c:	83 c0 02             	add    eax,0x2
c001954f:	25 ff ff 00 00       	and    eax,0xffff
c0019554:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019557:	e9 7a 03 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c001955c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019560:	3c ee                	cmp    al,0xee
c0019562:	75 10                	jne    c0019574 <Vm::faultHandler(regs*)+0x30e>
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001956a:	e8 a2 f9 ff ff       	call   c0018f11 <Vm::mainloop3(unsigned long)>
c001956f:	e9 4b 03 00 00       	jmp    c00198bf <Vm::faultHandler(regs*)+0x659>
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001957b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001957f:	51                   	push   ecx
c0019580:	50                   	push   eax
c0019581:	53                   	push   ebx
c0019582:	e8 e1 fb ff ff       	call   c0019168 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019587:	83 c4 20             	add    esp,0x20
c001958a:	e9 4a 03 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x673>
c001958f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019594:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019598:	e9 39 03 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c001959d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195a2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00195a6:	e9 2b 03 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00195ab:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00195ae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00195b3:	74 2b                	je     c00195e0 <Vm::faultHandler(regs*)+0x37a>
c00195b5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00195bc:	76 22                	jbe    c00195e0 <Vm::faultHandler(regs*)+0x37a>
c00195be:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00195c2:	50                   	push   eax
c00195c3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00195c7:	50                   	push   eax
c00195c8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00195cc:	50                   	push   eax
c00195cd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00195d1:	50                   	push   eax
c00195d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00195d6:	50                   	push   eax
c00195d7:	6a 6c                	push   0x6c
c00195d9:	6a 6c                	push   0x6c
c00195db:	e9 b9 01 00 00       	jmp    c0019799 <Vm::faultHandler(regs*)+0x533>
c00195e0:	83 ec 0c             	sub    esp,0xc
c00195e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00195e7:	0f b7 f6             	movzx  esi,si
c00195ea:	50                   	push   eax
c00195eb:	e8 71 f8 ff ff       	call   c0018e61 <Vm::inbv(unsigned short)>
c00195f0:	83 c4 0c             	add    esp,0xc
c00195f3:	0f b6 c0             	movzx  eax,al
c00195f6:	50                   	push   eax
c00195f7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00195fb:	50                   	push   eax
c00195fc:	56                   	push   esi
c00195fd:	e8 24 fc ff ff       	call   c0019226 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019602:	83 c4 10             	add    esp,0x10
c0019605:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019608:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001960c:	74 03                	je     c0019611 <Vm::faultHandler(regs*)+0x3ab>
c001960e:	48                   	dec    eax
c001960f:	eb 01                	jmp    c0019612 <Vm::faultHandler(regs*)+0x3ac>
c0019611:	40                   	inc    eax
c0019612:	0f b7 c0             	movzx  eax,ax
c0019615:	e9 8d 00 00 00       	jmp    c00196a7 <Vm::faultHandler(regs*)+0x441>
c001961a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001961d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019620:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019625:	74 29                	je     c0019650 <Vm::faultHandler(regs*)+0x3ea>
c0019627:	3d ff ff 00 00       	cmp    eax,0xffff
c001962c:	76 22                	jbe    c0019650 <Vm::faultHandler(regs*)+0x3ea>
c001962e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019632:	50                   	push   eax
c0019633:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019637:	50                   	push   eax
c0019638:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001963c:	50                   	push   eax
c001963d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019641:	50                   	push   eax
c0019642:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019646:	50                   	push   eax
c0019647:	6a 6d                	push   0x6d
c0019649:	6a 6d                	push   0x6d
c001964b:	e9 49 01 00 00       	jmp    c0019799 <Vm::faultHandler(regs*)+0x533>
c0019650:	0f b7 c8             	movzx  ecx,ax
c0019653:	0f b7 f6             	movzx  esi,si
c0019656:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019659:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001965e:	74 20                	je     c0019680 <Vm::faultHandler(regs*)+0x41a>
c0019660:	ed                   	in     eax,dx
c0019661:	55                   	push   ebp
c0019662:	50                   	push   eax
c0019663:	51                   	push   ecx
c0019664:	56                   	push   esi
c0019665:	e8 e7 fb ff ff       	call   c0019251 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001966a:	83 c4 10             	add    esp,0x10
c001966d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019670:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019674:	74 05                	je     c001967b <Vm::faultHandler(regs*)+0x415>
c0019676:	83 e8 04             	sub    eax,0x4
c0019679:	eb 27                	jmp    c00196a2 <Vm::faultHandler(regs*)+0x43c>
c001967b:	83 c0 04             	add    eax,0x4
c001967e:	eb 22                	jmp    c00196a2 <Vm::faultHandler(regs*)+0x43c>
c0019680:	66 ed                	in     ax,dx
c0019682:	0f b7 c0             	movzx  eax,ax
c0019685:	57                   	push   edi
c0019686:	50                   	push   eax
c0019687:	51                   	push   ecx
c0019688:	56                   	push   esi
c0019689:	e8 ad fb ff ff       	call   c001923b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001968e:	83 c4 10             	add    esp,0x10
c0019691:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019694:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019698:	74 05                	je     c001969f <Vm::faultHandler(regs*)+0x439>
c001969a:	83 e8 02             	sub    eax,0x2
c001969d:	eb 03                	jmp    c00196a2 <Vm::faultHandler(regs*)+0x43c>
c001969f:	83 c0 02             	add    eax,0x2
c00196a2:	25 ff ff 00 00       	and    eax,0xffff
c00196a7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00196aa:	e9 27 02 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00196af:	8d 46 ff             	lea    eax,[esi-0x1]
c00196b2:	3c 05                	cmp    al,0x5
c00196b4:	77 24                	ja     c00196da <Vm::faultHandler(regs*)+0x474>
c00196b6:	0f b6 c0             	movzx  eax,al
c00196b9:	ff 24 85 94 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda66c]
c00196c0:	0f b7 fd             	movzx  edi,bp
c00196c3:	eb 15                	jmp    c00196da <Vm::faultHandler(regs*)+0x474>
c00196c5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00196c9:	eb 0f                	jmp    c00196da <Vm::faultHandler(regs*)+0x474>
c00196cb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00196cf:	eb 09                	jmp    c00196da <Vm::faultHandler(regs*)+0x474>
c00196d1:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00196d5:	eb 03                	jmp    c00196da <Vm::faultHandler(regs*)+0x474>
c00196d7:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00196da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00196dd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196e2:	74 29                	je     c001970d <Vm::faultHandler(regs*)+0x4a7>
c00196e4:	3d ff ff 00 00       	cmp    eax,0xffff
c00196e9:	76 22                	jbe    c001970d <Vm::faultHandler(regs*)+0x4a7>
c00196eb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00196ef:	50                   	push   eax
c00196f0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00196f4:	50                   	push   eax
c00196f5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00196f9:	50                   	push   eax
c00196fa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00196fe:	50                   	push   eax
c00196ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019703:	50                   	push   eax
c0019704:	6a 6e                	push   0x6e
c0019706:	6a 6e                	push   0x6e
c0019708:	e9 8c 00 00 00       	jmp    c0019799 <Vm::faultHandler(regs*)+0x533>
c001970d:	0f b7 c0             	movzx  eax,ax
c0019710:	52                   	push   edx
c0019711:	52                   	push   edx
c0019712:	50                   	push   eax
c0019713:	57                   	push   edi
c0019714:	e8 d9 fa ff ff       	call   c00191f2 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019719:	59                   	pop    ecx
c001971a:	0f b6 c0             	movzx  eax,al
c001971d:	5e                   	pop    esi
c001971e:	50                   	push   eax
c001971f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019723:	50                   	push   eax
c0019724:	e8 4b f7 ff ff       	call   c0018e74 <Vm::outbv(unsigned short, unsigned char)>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001972f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019733:	74 03                	je     c0019738 <Vm::faultHandler(regs*)+0x4d2>
c0019735:	48                   	dec    eax
c0019736:	eb 01                	jmp    c0019739 <Vm::faultHandler(regs*)+0x4d3>
c0019738:	40                   	inc    eax
c0019739:	0f b7 c0             	movzx  eax,ax
c001973c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001973f:	e9 92 01 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c0019744:	8d 46 ff             	lea    eax,[esi-0x1]
c0019747:	3c 05                	cmp    al,0x5
c0019749:	77 1f                	ja     c001976a <Vm::faultHandler(regs*)+0x504>
c001974b:	0f b6 c0             	movzx  eax,al
c001974e:	ff 24 85 ac 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda654]
c0019755:	89 ef                	mov    edi,ebp
c0019757:	eb 11                	jmp    c001976a <Vm::faultHandler(regs*)+0x504>
c0019759:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001975c:	eb 0c                	jmp    c001976a <Vm::faultHandler(regs*)+0x504>
c001975e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019761:	eb 07                	jmp    c001976a <Vm::faultHandler(regs*)+0x504>
c0019763:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019766:	eb 02                	jmp    c001976a <Vm::faultHandler(regs*)+0x504>
c0019768:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001976a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001976d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019772:	74 37                	je     c00197ab <Vm::faultHandler(regs*)+0x545>
c0019774:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001977a:	76 2f                	jbe    c00197ab <Vm::faultHandler(regs*)+0x545>
c001977c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019780:	50                   	push   eax
c0019781:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019785:	50                   	push   eax
c0019786:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001978a:	50                   	push   eax
c001978b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001978f:	50                   	push   eax
c0019790:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019794:	50                   	push   eax
c0019795:	6a 6f                	push   0x6f
c0019797:	6a 6f                	push   0x6f
c0019799:	68 3a 59 02 c0       	push   0xc002593a
c001979e:	e8 a0 34 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00197a3:	83 c4 20             	add    esp,0x20
c00197a6:	e9 86 01 00 00       	jmp    c0019931 <Vm::faultHandler(regs*)+0x6cb>
c00197ab:	0f b7 d7             	movzx  edx,di
c00197ae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00197b1:	0f b7 c6             	movzx  eax,si
c00197b4:	81 e1 00 04 00 00    	and    ecx,0x400
c00197ba:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00197bd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197c2:	74 1d                	je     c00197e1 <Vm::faultHandler(regs*)+0x57b>
c00197c4:	55                   	push   ebp
c00197c5:	55                   	push   ebp
c00197c6:	50                   	push   eax
c00197c7:	52                   	push   edx
c00197c8:	e8 48 fa ff ff       	call   c0019215 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	89 fa                	mov    edx,edi
c00197d2:	ef                   	out    dx,eax
c00197d3:	85 c9                	test   ecx,ecx
c00197d5:	74 05                	je     c00197dc <Vm::faultHandler(regs*)+0x576>
c00197d7:	83 ee 04             	sub    esi,0x4
c00197da:	eb 21                	jmp    c00197fd <Vm::faultHandler(regs*)+0x597>
c00197dc:	83 c6 04             	add    esi,0x4
c00197df:	eb 1c                	jmp    c00197fd <Vm::faultHandler(regs*)+0x597>
c00197e1:	55                   	push   ebp
c00197e2:	55                   	push   ebp
c00197e3:	50                   	push   eax
c00197e4:	52                   	push   edx
c00197e5:	e8 19 fa ff ff       	call   c0019203 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00197ea:	83 c4 10             	add    esp,0x10
c00197ed:	89 fa                	mov    edx,edi
c00197ef:	66 ef                	out    dx,ax
c00197f1:	85 c9                	test   ecx,ecx
c00197f3:	74 05                	je     c00197fa <Vm::faultHandler(regs*)+0x594>
c00197f5:	83 ee 02             	sub    esi,0x2
c00197f8:	eb 03                	jmp    c00197fd <Vm::faultHandler(regs*)+0x597>
c00197fa:	83 c6 02             	add    esi,0x2
c00197fd:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019803:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019806:	e9 cb 00 00 00       	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c001980b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019812:	83 ec 0c             	sub    esp,0xc
c0019815:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019819:	50                   	push   eax
c001981a:	e8 42 f6 ff ff       	call   c0018e61 <Vm::inbv(unsigned short)>
c001981f:	0f b6 c0             	movzx  eax,al
c0019822:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019825:	eb 3f                	jmp    c0019866 <Vm::faultHandler(regs*)+0x600>
c0019827:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001982c:	74 07                	je     c0019835 <Vm::faultHandler(regs*)+0x5cf>
c001982e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019832:	ed                   	in     eax,dx
c0019833:	eb 14                	jmp    c0019849 <Vm::faultHandler(regs*)+0x5e3>
c0019835:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019838:	66 31 f6             	xor    si,si
c001983b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001983e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019842:	66 ed                	in     ax,dx
c0019844:	0f b7 c0             	movzx  eax,ax
c0019847:	09 f0                	or     eax,esi
c0019849:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001984c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019850:	e9 84 00 00 00       	jmp    c00198d9 <Vm::faultHandler(regs*)+0x673>
c0019855:	52                   	push   edx
c0019856:	52                   	push   edx
c0019857:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001985b:	50                   	push   eax
c001985c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019860:	50                   	push   eax
c0019861:	e8 0e f6 ff ff       	call   c0018e74 <Vm::outbv(unsigned short, unsigned char)>
c0019866:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001986a:	eb 53                	jmp    c00198bf <Vm::faultHandler(regs*)+0x659>
c001986c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001986f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019873:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019878:	74 03                	je     c001987d <Vm::faultHandler(regs*)+0x617>
c001987a:	ef                   	out    dx,eax
c001987b:	eb cf                	jmp    c001984c <Vm::faultHandler(regs*)+0x5e6>
c001987d:	66 ef                	out    dx,ax
c001987f:	eb cb                	jmp    c001984c <Vm::faultHandler(regs*)+0x5e6>
c0019881:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019888:	83 ec 0c             	sub    esp,0xc
c001988b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001988f:	50                   	push   eax
c0019890:	e8 cc f5 ff ff       	call   c0018e61 <Vm::inbv(unsigned short)>
c0019895:	0f b6 c0             	movzx  eax,al
c0019898:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001989b:	eb 1f                	jmp    c00198bc <Vm::faultHandler(regs*)+0x656>
c001989d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00198a0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198a5:	74 03                	je     c00198aa <Vm::faultHandler(regs*)+0x644>
c00198a7:	ed                   	in     eax,dx
c00198a8:	eb 0d                	jmp    c00198b7 <Vm::faultHandler(regs*)+0x651>
c00198aa:	66 ed                	in     ax,dx
c00198ac:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00198af:	0f b7 c0             	movzx  eax,ax
c00198b2:	66 31 d2             	xor    dx,dx
c00198b5:	09 d0                	or     eax,edx
c00198b7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00198ba:	eb 1a                	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00198bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198bf:	83 c4 10             	add    esp,0x10
c00198c2:	eb 15                	jmp    c00198d9 <Vm::faultHandler(regs*)+0x673>
c00198c4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00198c7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00198ca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198cf:	74 03                	je     c00198d4 <Vm::faultHandler(regs*)+0x66e>
c00198d1:	ef                   	out    dx,eax
c00198d2:	eb 02                	jmp    c00198d6 <Vm::faultHandler(regs*)+0x670>
c00198d4:	66 ef                	out    dx,ax
c00198d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198d9:	b0 01                	mov    al,0x1
c00198db:	eb 56                	jmp    c0019933 <Vm::faultHandler(regs*)+0x6cd>
c00198dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198e1:	50                   	push   eax
c00198e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198e6:	50                   	push   eax
c00198e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00198eb:	50                   	push   eax
c00198ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00198f0:	50                   	push   eax
c00198f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00198f5:	50                   	push   eax
c00198f6:	52                   	push   edx
c00198f7:	52                   	push   edx
c00198f8:	68 67 59 02 c0       	push   0xc0025967
c00198fd:	e8 41 33 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0019902:	83 c4 20             	add    esp,0x20
c0019905:	83 ec 0c             	sub    esp,0xc
c0019908:	6a 60                	push   0x60
c001990a:	e8 52 f5 ff ff       	call   c0018e61 <Vm::inbv(unsigned short)>
c001990f:	83 c4 10             	add    esp,0x10
c0019912:	3c 1c                	cmp    al,0x1c
c0019914:	74 04                	je     c001991a <Vm::faultHandler(regs*)+0x6b4>
c0019916:	3c 5a                	cmp    al,0x5a
c0019918:	75 eb                	jne    c0019905 <Vm::faultHandler(regs*)+0x69f>
c001991a:	3c 5a                	cmp    al,0x5a
c001991c:	74 04                	je     c0019922 <Vm::faultHandler(regs*)+0x6bc>
c001991e:	3c 1c                	cmp    al,0x1c
c0019920:	75 0f                	jne    c0019931 <Vm::faultHandler(regs*)+0x6cb>
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	6a 60                	push   0x60
c0019927:	e8 35 f5 ff ff       	call   c0018e61 <Vm::inbv(unsigned short)>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	eb e9                	jmp    c001991a <Vm::faultHandler(regs*)+0x6b4>
c0019931:	31 c0                	xor    eax,eax
c0019933:	83 c4 1c             	add    esp,0x1c
c0019936:	5b                   	pop    ebx
c0019937:	5e                   	pop    esi
c0019938:	5f                   	pop    edi
c0019939:	5d                   	pop    ebp
c001993a:	c3                   	ret    
c001993b:	90                   	nop

c001993c <Vm::fpuInternalTo32(unsigned long long)>:
c001993c:	57                   	push   edi
c001993d:	56                   	push   esi
c001993e:	53                   	push   ebx
c001993f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019947:	89 d6                	mov    esi,edx
c0019949:	89 d7                	mov    edi,edx
c001994b:	89 c1                	mov    ecx,eax
c001994d:	c1 ef 14             	shr    edi,0x14
c0019950:	89 d3                	mov    ebx,edx
c0019952:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019958:	31 d2                	xor    edx,edx
c001995a:	89 f8                	mov    eax,edi
c001995c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019962:	bf ff 00 00 00       	mov    edi,0xff
c0019967:	05 80 fc ff ff       	add    eax,0xfffffc80
c001996c:	83 d2 ff             	adc    edx,0xffffffff
c001996f:	39 c7                	cmp    edi,eax
c0019971:	bf 00 00 00 00       	mov    edi,0x0
c0019976:	19 d7                	sbb    edi,edx
c0019978:	72 16                	jb     c0019990 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001997a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001997e:	c1 e0 17             	shl    eax,0x17
c0019981:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019987:	09 f1                	or     ecx,esi
c0019989:	09 c1                	or     ecx,eax
c001998b:	89 cf                	mov    edi,ecx
c001998d:	eb 05                	jmp    c0019994 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001998f:	90                   	nop
c0019990:	31 ff                	xor    edi,edi
c0019992:	66 90                	xchg   ax,ax
c0019994:	89 f8                	mov    eax,edi
c0019996:	5b                   	pop    ebx
c0019997:	5e                   	pop    esi
c0019998:	5f                   	pop    edi
c0019999:	c3                   	ret    

c001999a <Vm::fpuInternalTo64(unsigned long long)>:
c001999a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001999e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199a2:	c3                   	ret    

c00199a3 <Vm::fpu32ToInternal(unsigned int)>:
c00199a3:	57                   	push   edi
c00199a4:	31 ff                	xor    edi,edi
c00199a6:	56                   	push   esi
c00199a7:	53                   	push   ebx
c00199a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00199ac:	89 cb                	mov    ebx,ecx
c00199ae:	89 ce                	mov    esi,ecx
c00199b0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00199b6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00199bc:	c1 e9 17             	shr    ecx,0x17
c00199bf:	89 f0                	mov    eax,esi
c00199c1:	0f b6 d1             	movzx  edx,cl
c00199c4:	81 c2 80 03 00 00    	add    edx,0x380
c00199ca:	89 d1                	mov    ecx,edx
c00199cc:	89 fa                	mov    edx,edi
c00199ce:	c1 e1 14             	shl    ecx,0x14
c00199d1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00199d5:	c1 e0 1d             	shl    eax,0x1d
c00199d8:	89 d7                	mov    edi,edx
c00199da:	89 c6                	mov    esi,eax
c00199dc:	89 ca                	mov    edx,ecx
c00199de:	89 f0                	mov    eax,esi
c00199e0:	09 fa                	or     edx,edi
c00199e2:	09 da                	or     edx,ebx
c00199e4:	5b                   	pop    ebx
c00199e5:	5e                   	pop    esi
c00199e6:	5f                   	pop    edi
c00199e7:	c3                   	ret    

c00199e8 <Vm::fpu64ToInternal(unsigned long long)>:
c00199e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199f0:	c3                   	ret    

c00199f1 <Vm::fpuFloatToLong(unsigned long long)>:
c00199f1:	57                   	push   edi
c00199f2:	31 c0                	xor    eax,eax
c00199f4:	56                   	push   esi
c00199f5:	31 d2                	xor    edx,edx
c00199f7:	53                   	push   ebx
c00199f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00199fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a00:	89 d9                	mov    ecx,ebx
c0019a02:	c1 e9 14             	shr    ecx,0x14
c0019a05:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019a0b:	89 cf                	mov    edi,ecx
c0019a0d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019a13:	78 37                	js     c0019a4c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019a15:	89 d9                	mov    ecx,ebx
c0019a17:	89 f0                	mov    eax,esi
c0019a19:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019a1f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019a25:	89 ca                	mov    edx,ecx
c0019a27:	b9 34 00 00 00       	mov    ecx,0x34
c0019a2c:	29 f9                	sub    ecx,edi
c0019a2e:	0f ad d0             	shrd   eax,edx,cl
c0019a31:	d3 fa                	sar    edx,cl
c0019a33:	f6 c1 20             	test   cl,0x20
c0019a36:	74 08                	je     c0019a40 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019a38:	89 d0                	mov    eax,edx
c0019a3a:	c1 fa 1f             	sar    edx,0x1f
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	85 db                	test   ebx,ebx
c0019a42:	79 08                	jns    c0019a4c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019a44:	f7 d8                	neg    eax
c0019a46:	83 d2 00             	adc    edx,0x0
c0019a49:	f7 da                	neg    edx
c0019a4b:	90                   	nop
c0019a4c:	5b                   	pop    ebx
c0019a4d:	5e                   	pop    esi
c0019a4e:	5f                   	pop    edi
c0019a4f:	c3                   	ret    

c0019a50 <Vm::fpuULongToFloat(unsigned long long)>:
c0019a50:	57                   	push   edi
c0019a51:	31 c9                	xor    ecx,ecx
c0019a53:	56                   	push   esi
c0019a54:	53                   	push   ebx
c0019a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a60:	0f ba e7 14          	bt     edi,0x14
c0019a64:	72 0a                	jb     c0019a70 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019a66:	01 f6                	add    esi,esi
c0019a68:	11 ff                	adc    edi,edi
c0019a6a:	41                   	inc    ecx
c0019a6b:	eb f3                	jmp    c0019a60 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	89 fa                	mov    edx,edi
c0019a72:	89 f0                	mov    eax,esi
c0019a74:	bb 33 04 00 00       	mov    ebx,0x433
c0019a79:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019a7f:	29 cb                	sub    ebx,ecx
c0019a81:	89 d9                	mov    ecx,ebx
c0019a83:	5b                   	pop    ebx
c0019a84:	c1 e1 14             	shl    ecx,0x14
c0019a87:	5e                   	pop    esi
c0019a88:	09 ca                	or     edx,ecx
c0019a8a:	5f                   	pop    edi
c0019a8b:	c3                   	ret    

c0019a8c <Vm::fpuLongToFloat(long long)>:
c0019a8c:	56                   	push   esi
c0019a8d:	31 c0                	xor    eax,eax
c0019a8f:	53                   	push   ebx
c0019a90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a98:	39 c8                	cmp    eax,ecx
c0019a9a:	19 d8                	sbb    eax,ebx
c0019a9c:	7d 06                	jge    c0019aa4 <Vm::fpuLongToFloat(long long)+0x18>
c0019a9e:	31 f6                	xor    esi,esi
c0019aa0:	eb 0e                	jmp    c0019ab0 <Vm::fpuLongToFloat(long long)+0x24>
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	f7 d9                	neg    ecx
c0019aa6:	be 01 00 00 00       	mov    esi,0x1
c0019aab:	83 d3 00             	adc    ebx,0x0
c0019aae:	f7 db                	neg    ebx
c0019ab0:	31 c0                	xor    eax,eax
c0019ab2:	66 90                	xchg   ax,ax
c0019ab4:	0f ba e3 14          	bt     ebx,0x14
c0019ab8:	72 0a                	jb     c0019ac4 <Vm::fpuLongToFloat(long long)+0x38>
c0019aba:	01 c9                	add    ecx,ecx
c0019abc:	11 db                	adc    ebx,ebx
c0019abe:	40                   	inc    eax
c0019abf:	eb f3                	jmp    c0019ab4 <Vm::fpuLongToFloat(long long)+0x28>
c0019ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac4:	ba 33 04 00 00       	mov    edx,0x433
c0019ac9:	29 c2                	sub    edx,eax
c0019acb:	89 c8                	mov    eax,ecx
c0019acd:	c1 e2 14             	shl    edx,0x14
c0019ad0:	89 d9                	mov    ecx,ebx
c0019ad2:	89 f3                	mov    ebx,esi
c0019ad4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019ada:	09 ca                	or     edx,ecx
c0019adc:	84 db                	test   bl,bl
c0019ade:	74 08                	je     c0019ae8 <Vm::fpuLongToFloat(long long)+0x5c>
c0019ae0:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019ae6:	66 90                	xchg   ax,ax
c0019ae8:	5b                   	pop    ebx
c0019ae9:	5e                   	pop    esi
c0019aea:	c3                   	ret    

c0019aeb <Vm::fpuGet0()>:
c0019aeb:	31 c0                	xor    eax,eax
c0019aed:	31 d2                	xor    edx,edx
c0019aef:	c3                   	ret    

c0019af0 <Vm::fpuGet1()>:
c0019af0:	b8 01 00 00 00       	mov    eax,0x1
c0019af5:	31 d2                	xor    edx,edx
c0019af7:	c3                   	ret    

c0019af8 <Vm::fpuGetPi()>:
c0019af8:	b8 03 00 00 00       	mov    eax,0x3
c0019afd:	31 d2                	xor    edx,edx
c0019aff:	c3                   	ret    

c0019b00 <Vm::fpuGetLog2E()>:
c0019b00:	83 ec 18             	sub    esp,0x18
c0019b03:	68 c4 59 02 c0       	push   0xc00259c4
c0019b08:	e8 56 ac ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019b0d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019b12:	31 d2                	xor    edx,edx
c0019b14:	83 c4 1c             	add    esp,0x1c
c0019b17:	c3                   	ret    

c0019b18 <Vm::fpuGetLogE2()>:
c0019b18:	83 ec 18             	sub    esp,0x18
c0019b1b:	68 d0 59 02 c0       	push   0xc00259d0
c0019b20:	e8 3e ac ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019b25:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019b2a:	31 d2                	xor    edx,edx
c0019b2c:	83 c4 1c             	add    esp,0x1c
c0019b2f:	c3                   	ret    

c0019b30 <Vm::fpuGetLog210()>:
c0019b30:	83 ec 18             	sub    esp,0x18
c0019b33:	68 dc 59 02 c0       	push   0xc00259dc
c0019b38:	e8 26 ac ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019b3d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019b42:	31 d2                	xor    edx,edx
c0019b44:	83 c4 1c             	add    esp,0x1c
c0019b47:	c3                   	ret    

c0019b48 <Vm::fpuGetLog102()>:
c0019b48:	83 ec 18             	sub    esp,0x18
c0019b4b:	68 e9 59 02 c0       	push   0xc00259e9
c0019b50:	e8 0e ac ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019b55:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019b5a:	31 d2                	xor    edx,edx
c0019b5c:	83 c4 1c             	add    esp,0x1c
c0019b5f:	c3                   	ret    

c0019b60 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019b68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b6c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019b70:	0f 92 c0             	setb   al
c0019b73:	c3                   	ret    

c0019b74 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019b74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b7c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019b80:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019b84:	09 c2                	or     edx,eax
c0019b86:	0f 94 c0             	sete   al
c0019b89:	c3                   	ret    

c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019b8a:	57                   	push   edi
c0019b8b:	56                   	push   esi
c0019b8c:	53                   	push   ebx
c0019b8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019b99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019b9d:	57                   	push   edi
c0019b9e:	56                   	push   esi
c0019b9f:	53                   	push   ebx
c0019ba0:	51                   	push   ecx
c0019ba1:	e8 ce ff ff ff       	call   c0019b74 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	88 c2                	mov    dl,al
c0019bab:	31 c0                	xor    eax,eax
c0019bad:	84 d2                	test   dl,dl
c0019baf:	75 0f                	jne    c0019bc0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019bb1:	57                   	push   edi
c0019bb2:	56                   	push   esi
c0019bb3:	53                   	push   ebx
c0019bb4:	51                   	push   ecx
c0019bb5:	e8 a6 ff ff ff       	call   c0019b60 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019bba:	83 c4 10             	add    esp,0x10
c0019bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc0:	83 e0 01             	and    eax,0x1
c0019bc3:	5b                   	pop    ebx
c0019bc4:	88 c1                	mov    cl,al
c0019bc6:	83 e2 01             	and    edx,0x1
c0019bc9:	a0 01 8a 02 c0       	mov    al,ds:0xc0028a01
c0019bce:	c1 e2 06             	shl    edx,0x6
c0019bd1:	83 e0 ba             	and    eax,0xffffffba
c0019bd4:	5e                   	pop    esi
c0019bd5:	09 c8                	or     eax,ecx
c0019bd7:	5f                   	pop    edi
c0019bd8:	09 d0                	or     eax,edx
c0019bda:	a2 01 8a 02 c0       	mov    ds:0xc0028a01,al
c0019bdf:	c3                   	ret    

c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019be0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019be4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019be8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019bec:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019bf0:	c3                   	ret    

c0019bf1 <Vm::fpuAbs(unsigned long long)>:
c0019bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bf9:	c3                   	ret    

c0019bfa <Vm::fpuChs(unsigned long long)>:
c0019bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c02:	f7 d8                	neg    eax
c0019c04:	83 d2 00             	adc    edx,0x0
c0019c07:	f7 da                	neg    edx
c0019c09:	c3                   	ret    

c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019c0a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019c0e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019c13:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019c17:	eb c7                	jmp    c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019c19:	53                   	push   ebx
c0019c1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019c26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c2a:	0f af ca             	imul   ecx,edx
c0019c2d:	0f af d8             	imul   ebx,eax
c0019c30:	f7 e2                	mul    edx
c0019c32:	01 d9                	add    ecx,ebx
c0019c34:	5b                   	pop    ebx
c0019c35:	01 ca                	add    edx,ecx
c0019c37:	c3                   	ret    

c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019c38:	83 ec 0c             	sub    esp,0xc
c0019c3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c4b:	e8 f4 82 00 00       	call   c0021f44 <__udivdi3>
c0019c50:	83 c4 1c             	add    esp,0x1c
c0019c53:	c3                   	ret    

c0019c54 <Vm::fpuSquare(unsigned long long)>:
c0019c54:	50                   	push   eax
c0019c55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c5d:	52                   	push   edx
c0019c5e:	50                   	push   eax
c0019c5f:	52                   	push   edx
c0019c60:	50                   	push   eax
c0019c61:	e8 b3 ff ff ff       	call   c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c66:	83 c4 14             	add    esp,0x14
c0019c69:	c3                   	ret    

c0019c6a <Vm::fpuGetReg(int)>:
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019c72:	76 10                	jbe    c0019c84 <Vm::fpuGetReg(int)+0x1a>
c0019c74:	83 ec 0c             	sub    esp,0xc
c0019c77:	68 f6 59 02 c0       	push   0xc00259f6
c0019c7c:	e8 e2 aa ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019c81:	83 c4 10             	add    esp,0x10
c0019c84:	a0 01 8a 02 c0       	mov    al,ds:0xc0028a01
c0019c89:	b9 08 00 00 00       	mov    ecx,0x8
c0019c8e:	c0 e8 03             	shr    al,0x3
c0019c91:	83 e0 07             	and    eax,0x7
c0019c94:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019c98:	99                   	cdq    
c0019c99:	f7 f9                	idiv   ecx
c0019c9b:	8b 04 d5 04 8a 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd75fc]
c0019ca2:	8b 14 d5 08 8a 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd75f8]
c0019ca9:	83 c4 0c             	add    esp,0xc
c0019cac:	c3                   	ret    

c0019cad <Vm::fpuSetReg(int, unsigned long long)>:
c0019cad:	57                   	push   edi
c0019cae:	56                   	push   esi
c0019caf:	52                   	push   edx
c0019cb0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cb4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019cb8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019cbd:	76 11                	jbe    c0019cd0 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019cbf:	83 ec 0c             	sub    esp,0xc
c0019cc2:	68 09 5a 02 c0       	push   0xc0025a09
c0019cc7:	e8 97 aa ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	90                   	nop
c0019cd0:	a0 01 8a 02 c0       	mov    al,ds:0xc0028a01
c0019cd5:	b9 08 00 00 00       	mov    ecx,0x8
c0019cda:	c0 e8 03             	shr    al,0x3
c0019cdd:	83 e0 07             	and    eax,0x7
c0019ce0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019ce4:	99                   	cdq    
c0019ce5:	f7 f9                	idiv   ecx
c0019ce7:	89 34 d5 04 8a 02 c0 	mov    DWORD PTR [edx*8-0x3ffd75fc],esi
c0019cee:	89 3c d5 08 8a 02 c0 	mov    DWORD PTR [edx*8-0x3ffd75f8],edi
c0019cf5:	58                   	pop    eax
c0019cf6:	5e                   	pop    esi
c0019cf7:	5f                   	pop    edi
c0019cf8:	c3                   	ret    

c0019cf9 <Vm::fpuPush(unsigned long long)>:
c0019cf9:	a0 01 8a 02 c0       	mov    al,ds:0xc0028a01
c0019cfe:	c0 e8 03             	shr    al,0x3
c0019d01:	83 e0 07             	and    eax,0x7
c0019d04:	83 c0 07             	add    eax,0x7
c0019d07:	88 c2                	mov    dl,al
c0019d09:	83 e0 07             	and    eax,0x7
c0019d0c:	83 e2 07             	and    edx,0x7
c0019d0f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019d16:	8a 15 01 8a 02 c0    	mov    dl,BYTE PTR ds:0xc0028a01
c0019d1c:	83 e2 c7             	and    edx,0xffffffc7
c0019d1f:	09 ca                	or     edx,ecx
c0019d21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019d25:	88 15 01 8a 02 c0    	mov    BYTE PTR ds:0xc0028a01,dl
c0019d2b:	89 0c c5 08 8a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd75f8],ecx
c0019d32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019d36:	89 14 c5 04 8a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd75fc],edx
c0019d3d:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c0019d42:	83 f8 08             	cmp    eax,0x8
c0019d45:	75 09                	jne    c0019d50 <Vm::fpuPush(unsigned long long)+0x57>
c0019d47:	80 0d 00 8a 02 c0 40 	or     BYTE PTR ds:0xc0028a00,0x40
c0019d4e:	c3                   	ret    
c0019d4f:	90                   	nop
c0019d50:	40                   	inc    eax
c0019d51:	a3 44 8a 02 c0       	mov    ds:0xc0028a44,eax
c0019d56:	c3                   	ret    

c0019d57 <Vm::fpuPop()>:
c0019d57:	8a 0d 01 8a 02 c0    	mov    cl,BYTE PTR ds:0xc0028a01
c0019d5d:	53                   	push   ebx
c0019d5e:	c0 e9 03             	shr    cl,0x3
c0019d61:	8a 1d 01 8a 02 c0    	mov    bl,BYTE PTR ds:0xc0028a01
c0019d67:	83 e1 07             	and    ecx,0x7
c0019d6a:	83 e3 c7             	and    ebx,0xffffffc7
c0019d6d:	8b 04 cd 04 8a 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd75fc]
c0019d74:	8b 14 cd 08 8a 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd75f8]
c0019d7b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019d82:	83 e1 38             	and    ecx,0x38
c0019d85:	09 d9                	or     ecx,ebx
c0019d87:	88 0d 01 8a 02 c0    	mov    BYTE PTR ds:0xc0028a01,cl
c0019d8d:	8b 0d 44 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a44
c0019d93:	85 c9                	test   ecx,ecx
c0019d95:	74 09                	je     c0019da0 <Vm::fpuPop()+0x49>
c0019d97:	49                   	dec    ecx
c0019d98:	89 0d 44 8a 02 c0    	mov    DWORD PTR ds:0xc0028a44,ecx
c0019d9e:	eb 08                	jmp    c0019da8 <Vm::fpuPop()+0x51>
c0019da0:	80 0d 00 8a 02 c0 40 	or     BYTE PTR ds:0xc0028a00,0x40
c0019da7:	90                   	nop
c0019da8:	5b                   	pop    ebx
c0019da9:	c3                   	ret    

c0019daa <Vm::x87Handler(regs*)>:
c0019daa:	55                   	push   ebp
c0019dab:	57                   	push   edi
c0019dac:	56                   	push   esi
c0019dad:	53                   	push   ebx
c0019dae:	83 ec 1c             	sub    esp,0x1c
c0019db1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019db5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019dba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019dbd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019dc5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019dc9:	50                   	push   eax
c0019dca:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019dce:	50                   	push   eax
c0019dcf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dd3:	50                   	push   eax
c0019dd4:	53                   	push   ebx
c0019dd5:	e8 a2 a0 ff ff       	call   c0013e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019dda:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019ddd:	83 c4 10             	add    esp,0x10
c0019de0:	89 c6                	mov    esi,eax
c0019de2:	80 fa d9             	cmp    dl,0xd9
c0019de5:	0f 85 79 01 00 00    	jne    c0019f64 <Vm::x87Handler(regs*)+0x1ba>
c0019deb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019def:	8d 50 20             	lea    edx,[eax+0x20]
c0019df2:	80 fa 0e             	cmp    dl,0xe
c0019df5:	0f 87 a5 00 00 00    	ja     c0019ea0 <Vm::x87Handler(regs*)+0xf6>
c0019dfb:	0f b6 d2             	movzx  edx,dl
c0019dfe:	ff 24 95 1c 5a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda5e4]
c0019e05:	8d 76 00             	lea    esi,[esi+0x0]
c0019e08:	e8 de fc ff ff       	call   c0019aeb <Vm::fpuGet0()>
c0019e0d:	eb 09                	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e0f:	90                   	nop
c0019e10:	e8 db fc ff ff       	call   c0019af0 <Vm::fpuGet1()>
c0019e15:	8d 76 00             	lea    esi,[esi+0x0]
c0019e18:	57                   	push   edi
c0019e19:	57                   	push   edi
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	52                   	push   edx
c0019e1d:	50                   	push   eax
c0019e1e:	e8 d6 fe ff ff       	call   c0019cf9 <Vm::fpuPush(unsigned long long)>
c0019e23:	90                   	nop
c0019e24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	90                   	nop
c0019e2c:	b0 01                	mov    al,0x1
c0019e2e:	e9 89 0a 00 00       	jmp    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c0019e33:	90                   	nop
c0019e34:	83 ec 0c             	sub    esp,0xc
c0019e37:	6a 00                	push   0x0
c0019e39:	e8 2c fe ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c0019e3e:	59                   	pop    ecx
c0019e3f:	5e                   	pop    esi
c0019e40:	52                   	push   edx
c0019e41:	50                   	push   eax
c0019e42:	e8 b3 fd ff ff       	call   c0019bfa <Vm::fpuChs(unsigned long long)>
c0019e47:	eb 17                	jmp    c0019e60 <Vm::x87Handler(regs*)+0xb6>
c0019e49:	8d 76 00             	lea    esi,[esi+0x0]
c0019e4c:	83 ec 0c             	sub    esp,0xc
c0019e4f:	6a 00                	push   0x0
c0019e51:	e8 14 fe ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c0019e56:	5f                   	pop    edi
c0019e57:	5d                   	pop    ebp
c0019e58:	52                   	push   edx
c0019e59:	50                   	push   eax
c0019e5a:	e8 92 fd ff ff       	call   c0019bf1 <Vm::fpuAbs(unsigned long long)>
c0019e5f:	90                   	nop
c0019e60:	83 c4 0c             	add    esp,0xc
c0019e63:	90                   	nop
c0019e64:	52                   	push   edx
c0019e65:	50                   	push   eax
c0019e66:	66 90                	xchg   ax,ax
c0019e68:	6a 00                	push   0x0
c0019e6a:	66 90                	xchg   ax,ax
c0019e6c:	e8 3c fe ff ff       	call   c0019cad <Vm::fpuSetReg(int, unsigned long long)>
c0019e71:	eb b1                	jmp    c0019e24 <Vm::x87Handler(regs*)+0x7a>
c0019e73:	90                   	nop
c0019e74:	e8 b7 fc ff ff       	call   c0019b30 <Vm::fpuGetLog210()>
c0019e79:	eb 9d                	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e7b:	90                   	nop
c0019e7c:	e8 7f fc ff ff       	call   c0019b00 <Vm::fpuGetLog2E()>
c0019e81:	eb 95                	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e83:	90                   	nop
c0019e84:	e8 6f fc ff ff       	call   c0019af8 <Vm::fpuGetPi()>
c0019e89:	eb 8d                	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e8b:	90                   	nop
c0019e8c:	e8 b7 fc ff ff       	call   c0019b48 <Vm::fpuGetLog102()>
c0019e91:	eb 85                	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e93:	90                   	nop
c0019e94:	e8 7f fc ff ff       	call   c0019b18 <Vm::fpuGetLogE2()>
c0019e99:	e9 7a ff ff ff       	jmp    c0019e18 <Vm::x87Handler(regs*)+0x6e>
c0019e9e:	66 90                	xchg   ax,ax
c0019ea0:	8d 50 40             	lea    edx,[eax+0x40]
c0019ea3:	80 fa 07             	cmp    dl,0x7
c0019ea6:	77 18                	ja     c0019ec0 <Vm::x87Handler(regs*)+0x116>
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	2d c0 00 00 00       	sub    eax,0xc0
c0019eb0:	50                   	push   eax
c0019eb1:	e8 b4 fd ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c0019eb6:	59                   	pop    ecx
c0019eb7:	5e                   	pop    esi
c0019eb8:	e9 5f ff ff ff       	jmp    c0019e1c <Vm::x87Handler(regs*)+0x72>
c0019ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec0:	8d 50 38             	lea    edx,[eax+0x38]
c0019ec3:	80 fa 07             	cmp    dl,0x7
c0019ec6:	77 3c                	ja     c0019f04 <Vm::x87Handler(regs*)+0x15a>
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	2d c8 00 00 00       	sub    eax,0xc8
c0019ed0:	50                   	push   eax
c0019ed1:	e8 94 fd ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c0019ed6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019edd:	89 c6                	mov    esi,eax
c0019edf:	89 d7                	mov    edi,edx
c0019ee1:	e8 84 fd ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c0019ee6:	83 c4 0c             	add    esp,0xc
c0019ee9:	52                   	push   edx
c0019eea:	50                   	push   eax
c0019eeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eef:	2d c8 00 00 00       	sub    eax,0xc8
c0019ef4:	50                   	push   eax
c0019ef5:	e8 b3 fd ff ff       	call   c0019cad <Vm::fpuSetReg(int, unsigned long long)>
c0019efa:	83 c4 0c             	add    esp,0xc
c0019efd:	57                   	push   edi
c0019efe:	56                   	push   esi
c0019eff:	e9 64 ff ff ff       	jmp    c0019e68 <Vm::x87Handler(regs*)+0xbe>
c0019f04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019f08:	84 d2                	test   dl,dl
c0019f0a:	75 10                	jne    c0019f1c <Vm::x87Handler(regs*)+0x172>
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	ff 36                	push   DWORD PTR [esi]
c0019f11:	e8 8d fa ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c0019f16:	e9 c9 00 00 00       	jmp    c0019fe4 <Vm::x87Handler(regs*)+0x23a>
c0019f1b:	90                   	nop
c0019f1c:	80 fa 03             	cmp    dl,0x3
c0019f1f:	75 13                	jne    c0019f34 <Vm::x87Handler(regs*)+0x18a>
c0019f21:	e8 31 fe ff ff       	call   c0019d57 <Vm::fpuPop()>
c0019f26:	55                   	push   ebp
c0019f27:	55                   	push   ebp
c0019f28:	52                   	push   edx
c0019f29:	50                   	push   eax
c0019f2a:	e8 0d fa ff ff       	call   c001993c <Vm::fpuInternalTo32(unsigned long long)>
c0019f2f:	e9 90 00 00 00       	jmp    c0019fc4 <Vm::x87Handler(regs*)+0x21a>
c0019f34:	80 fa 05             	cmp    dl,0x5
c0019f37:	75 0f                	jne    c0019f48 <Vm::x87Handler(regs*)+0x19e>
c0019f39:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019f3c:	66 a3 02 8a 02 c0    	mov    ds:0xc0028a02,ax
c0019f42:	e9 ed 00 00 00       	jmp    c001a034 <Vm::x87Handler(regs*)+0x28a>
c0019f47:	90                   	nop
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	80 fa 07             	cmp    dl,0x7
c0019f4d:	0f 85 69 09 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c0019f53:	66 a1 02 8a 02 c0    	mov    ax,ds:0xc0028a02
c0019f59:	66 89 06             	mov    WORD PTR [esi],ax
c0019f5c:	e9 d3 00 00 00       	jmp    c001a034 <Vm::x87Handler(regs*)+0x28a>
c0019f61:	8d 76 00             	lea    esi,[esi+0x0]
c0019f64:	80 fa d8             	cmp    dl,0xd8
c0019f67:	0f 84 d3 00 00 00    	je     c001a040 <Vm::x87Handler(regs*)+0x296>
c0019f6d:	80 fa dc             	cmp    dl,0xdc
c0019f70:	0f 84 2a 02 00 00    	je     c001a1a0 <Vm::x87Handler(regs*)+0x3f6>
c0019f76:	80 fa de             	cmp    dl,0xde
c0019f79:	0f 84 f1 02 00 00    	je     c001a270 <Vm::x87Handler(regs*)+0x4c6>
c0019f7f:	80 fa dd             	cmp    dl,0xdd
c0019f82:	0f 84 94 04 00 00    	je     c001a41c <Vm::x87Handler(regs*)+0x672>
c0019f88:	80 fa da             	cmp    dl,0xda
c0019f8b:	0f 84 5f 05 00 00    	je     c001a4f0 <Vm::x87Handler(regs*)+0x746>
c0019f91:	80 fa df             	cmp    dl,0xdf
c0019f94:	0f 84 aa 05 00 00    	je     c001a544 <Vm::x87Handler(regs*)+0x79a>
c0019f9a:	31 c0                	xor    eax,eax
c0019f9c:	80 fa db             	cmp    dl,0xdb
c0019f9f:	0f 85 17 09 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c0019fa5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019fa9:	80 fa 03             	cmp    dl,0x3
c0019fac:	0f 85 c2 06 00 00    	jne    c001a674 <Vm::x87Handler(regs*)+0x8ca>
c0019fb2:	e8 a0 fd ff ff       	call   c0019d57 <Vm::fpuPop()>
c0019fb7:	55                   	push   ebp
c0019fb8:	55                   	push   ebp
c0019fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fbc:	52                   	push   edx
c0019fbd:	50                   	push   eax
c0019fbe:	e8 2e fa ff ff       	call   c00199f1 <Vm::fpuFloatToLong(unsigned long long)>
c0019fc3:	90                   	nop
c0019fc4:	83 c4 10             	add    esp,0x10
c0019fc7:	89 06                	mov    DWORD PTR [esi],eax
c0019fc9:	eb 69                	jmp    c001a034 <Vm::x87Handler(regs*)+0x28a>
c0019fcb:	90                   	nop
c0019fcc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019fd0:	84 d2                	test   dl,dl
c0019fd2:	0f 85 2c 06 00 00    	jne    c001a604 <Vm::x87Handler(regs*)+0x85a>
c0019fd8:	57                   	push   edi
c0019fd9:	57                   	push   edi
c0019fda:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019fdd:	ff 36                	push   DWORD PTR [esi]
c0019fdf:	e8 04 fa ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c0019fe4:	5e                   	pop    esi
c0019fe5:	5f                   	pop    edi
c0019fe6:	52                   	push   edx
c0019fe7:	50                   	push   eax
c0019fe8:	e8 0c fd ff ff       	call   c0019cf9 <Vm::fpuPush(unsigned long long)>
c0019fed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ff4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019ff7:	e9 2c fe ff ff       	jmp    c0019e28 <Vm::x87Handler(regs*)+0x7e>
c0019ffc:	80 fa 03             	cmp    dl,0x3
c0019fff:	0f 85 2b 07 00 00    	jne    c001a730 <Vm::x87Handler(regs*)+0x986>
c001a005:	57                   	push   edi
c001a006:	57                   	push   edi
c001a007:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a00a:	ff 36                	push   DWORD PTR [esi]
c001a00c:	e8 d7 f9 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a011:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a018:	89 c6                	mov    esi,eax
c001a01a:	89 d7                	mov    edi,edx
c001a01c:	e8 49 fc ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a021:	57                   	push   edi
c001a022:	56                   	push   esi
c001a023:	52                   	push   edx
c001a024:	50                   	push   eax
c001a025:	e8 60 fb ff ff       	call   c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a02a:	83 c4 20             	add    esp,0x20
c001a02d:	e8 25 fd ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a032:	66 90                	xchg   ax,ax
c001a034:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a038:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a03b:	e9 ec fd ff ff       	jmp    c0019e2c <Vm::x87Handler(regs*)+0x82>
c001a040:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a044:	8d 50 40             	lea    edx,[eax+0x40]
c001a047:	80 fa 07             	cmp    dl,0x7
c001a04a:	77 2c                	ja     c001a078 <Vm::x87Handler(regs*)+0x2ce>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	2d c0 00 00 00       	sub    eax,0xc0
c001a054:	50                   	push   eax
c001a055:	e8 10 fc ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a05a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a061:	89 c6                	mov    esi,eax
c001a063:	89 d7                	mov    edi,edx
c001a065:	e8 00 fc ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a06a:	57                   	push   edi
c001a06b:	56                   	push   esi
c001a06c:	52                   	push   edx
c001a06d:	50                   	push   eax
c001a06e:	e8 6d fb ff ff       	call   c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a073:	eb 33                	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x2fe>
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	8d 50 38             	lea    edx,[eax+0x38]
c001a07b:	80 fa 07             	cmp    dl,0x7
c001a07e:	77 30                	ja     c001a0b0 <Vm::x87Handler(regs*)+0x306>
c001a080:	83 ec 0c             	sub    esp,0xc
c001a083:	2d c8 00 00 00       	sub    eax,0xc8
c001a088:	50                   	push   eax
c001a089:	e8 dc fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a08e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a095:	89 c6                	mov    esi,eax
c001a097:	89 d7                	mov    edi,edx
c001a099:	e8 cc fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a09e:	57                   	push   edi
c001a09f:	56                   	push   esi
c001a0a0:	52                   	push   edx
c001a0a1:	50                   	push   eax
c001a0a2:	e8 72 fb ff ff       	call   c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a0a7:	90                   	nop
c001a0a8:	83 c4 1c             	add    esp,0x1c
c001a0ab:	e9 b4 fd ff ff       	jmp    c0019e64 <Vm::x87Handler(regs*)+0xba>
c001a0b0:	8d 50 30             	lea    edx,[eax+0x30]
c001a0b3:	80 fa 07             	cmp    dl,0x7
c001a0b6:	77 10                	ja     c001a0c8 <Vm::x87Handler(regs*)+0x31e>
c001a0b8:	83 ec 0c             	sub    esp,0xc
c001a0bb:	2d d0 00 00 00       	sub    eax,0xd0
c001a0c0:	e9 c3 03 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0x6de>
c001a0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c8:	8d 50 28             	lea    edx,[eax+0x28]
c001a0cb:	80 fa 07             	cmp    dl,0x7
c001a0ce:	77 10                	ja     c001a0e0 <Vm::x87Handler(regs*)+0x336>
c001a0d0:	83 ec 0c             	sub    esp,0xc
c001a0d3:	2d d8 00 00 00       	sub    eax,0xd8
c001a0d8:	e9 e7 03 00 00       	jmp    c001a4c4 <Vm::x87Handler(regs*)+0x71a>
c001a0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e0:	8d 50 20             	lea    edx,[eax+0x20]
c001a0e3:	80 fa 07             	cmp    dl,0x7
c001a0e6:	77 1c                	ja     c001a104 <Vm::x87Handler(regs*)+0x35a>
c001a0e8:	83 ec 0c             	sub    esp,0xc
c001a0eb:	2d e0 00 00 00       	sub    eax,0xe0
c001a0f0:	50                   	push   eax
c001a0f1:	e8 74 fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a0f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0fd:	89 c6                	mov    esi,eax
c001a0ff:	89 d7                	mov    edi,edx
c001a101:	eb 25                	jmp    c001a128 <Vm::x87Handler(regs*)+0x37e>
c001a103:	90                   	nop
c001a104:	8d 50 18             	lea    edx,[eax+0x18]
c001a107:	80 fa 07             	cmp    dl,0x7
c001a10a:	77 30                	ja     c001a13c <Vm::x87Handler(regs*)+0x392>
c001a10c:	83 ec 0c             	sub    esp,0xc
c001a10f:	6a 00                	push   0x0
c001a111:	e8 54 fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a116:	89 c6                	mov    esi,eax
c001a118:	89 d7                	mov    edi,edx
c001a11a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a11e:	2d e8 00 00 00       	sub    eax,0xe8
c001a123:	89 04 24             	mov    DWORD PTR [esp],eax
c001a126:	66 90                	xchg   ax,ax
c001a128:	e8 3d fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a12d:	57                   	push   edi
c001a12e:	56                   	push   esi
c001a12f:	52                   	push   edx
c001a130:	50                   	push   eax
c001a131:	e8 d4 fa ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a136:	e9 6d ff ff ff       	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x2fe>
c001a13b:	90                   	nop
c001a13c:	8d 50 10             	lea    edx,[eax+0x10]
c001a13f:	80 fa 07             	cmp    dl,0x7
c001a142:	77 1c                	ja     c001a160 <Vm::x87Handler(regs*)+0x3b6>
c001a144:	83 ec 0c             	sub    esp,0xc
c001a147:	2d f0 00 00 00       	sub    eax,0xf0
c001a14c:	50                   	push   eax
c001a14d:	e8 18 fb ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a152:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a159:	89 c6                	mov    esi,eax
c001a15b:	89 d7                	mov    edi,edx
c001a15d:	eb 25                	jmp    c001a184 <Vm::x87Handler(regs*)+0x3da>
c001a15f:	90                   	nop
c001a160:	3c f7                	cmp    al,0xf7
c001a162:	0f 86 00 04 00 00    	jbe    c001a568 <Vm::x87Handler(regs*)+0x7be>
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	6a 00                	push   0x0
c001a16d:	e8 f8 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a172:	89 c6                	mov    esi,eax
c001a174:	89 d7                	mov    edi,edx
c001a176:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a17a:	2d f8 00 00 00       	sub    eax,0xf8
c001a17f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a182:	66 90                	xchg   ax,ax
c001a184:	e8 e1 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a189:	57                   	push   edi
c001a18a:	56                   	push   esi
c001a18b:	52                   	push   edx
c001a18c:	50                   	push   eax
c001a18d:	e8 a6 fa ff ff       	call   c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a192:	83 c4 1c             	add    esp,0x1c
c001a195:	52                   	push   edx
c001a196:	50                   	push   eax
c001a197:	6a 00                	push   0x0
c001a199:	e9 6a 02 00 00       	jmp    c001a408 <Vm::x87Handler(regs*)+0x65e>
c001a19e:	66 90                	xchg   ax,ax
c001a1a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1a4:	8d 50 40             	lea    edx,[eax+0x40]
c001a1a7:	80 fa 07             	cmp    dl,0x7
c001a1aa:	77 38                	ja     c001a1e4 <Vm::x87Handler(regs*)+0x43a>
c001a1ac:	83 ec 0c             	sub    esp,0xc
c001a1af:	2d c0 00 00 00       	sub    eax,0xc0
c001a1b4:	50                   	push   eax
c001a1b5:	e8 b0 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a1ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1c1:	89 c6                	mov    esi,eax
c001a1c3:	89 d7                	mov    edi,edx
c001a1c5:	e8 a0 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a1ca:	57                   	push   edi
c001a1cb:	56                   	push   esi
c001a1cc:	52                   	push   edx
c001a1cd:	50                   	push   eax
c001a1ce:	e8 0d fa ff ff       	call   c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a1d3:	83 c4 1c             	add    esp,0x1c
c001a1d6:	52                   	push   edx
c001a1d7:	50                   	push   eax
c001a1d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1dc:	2d c0 00 00 00       	sub    eax,0xc0
c001a1e1:	eb 41                	jmp    c001a224 <Vm::x87Handler(regs*)+0x47a>
c001a1e3:	90                   	nop
c001a1e4:	8d 50 38             	lea    edx,[eax+0x38]
c001a1e7:	80 fa 07             	cmp    dl,0x7
c001a1ea:	77 40                	ja     c001a22c <Vm::x87Handler(regs*)+0x482>
c001a1ec:	83 ec 0c             	sub    esp,0xc
c001a1ef:	2d c8 00 00 00       	sub    eax,0xc8
c001a1f4:	50                   	push   eax
c001a1f5:	e8 70 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a1fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a201:	89 c6                	mov    esi,eax
c001a203:	89 d7                	mov    edi,edx
c001a205:	e8 60 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a20a:	57                   	push   edi
c001a20b:	56                   	push   esi
c001a20c:	52                   	push   edx
c001a20d:	50                   	push   eax
c001a20e:	e8 06 fa ff ff       	call   c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a213:	83 c4 1c             	add    esp,0x1c
c001a216:	52                   	push   edx
c001a217:	50                   	push   eax
c001a218:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a21c:	2d c8 00 00 00       	sub    eax,0xc8
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	50                   	push   eax
c001a225:	e9 42 fc ff ff       	jmp    c0019e6c <Vm::x87Handler(regs*)+0xc2>
c001a22a:	66 90                	xchg   ax,ax
c001a22c:	83 c0 18             	add    eax,0x18
c001a22f:	3c 07                	cmp    al,0x7
c001a231:	0f 87 6d 04 00 00    	ja     c001a6a4 <Vm::x87Handler(regs*)+0x8fa>
c001a237:	83 ec 0c             	sub    esp,0xc
c001a23a:	6a 00                	push   0x0
c001a23c:	e8 29 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a241:	89 c6                	mov    esi,eax
c001a243:	89 d7                	mov    edi,edx
c001a245:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a249:	2d e8 00 00 00       	sub    eax,0xe8
c001a24e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a251:	e8 14 fa ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a256:	57                   	push   edi
c001a257:	56                   	push   esi
c001a258:	52                   	push   edx
c001a259:	50                   	push   eax
c001a25a:	e8 ab f9 ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a25f:	83 c4 1c             	add    esp,0x1c
c001a262:	52                   	push   edx
c001a263:	50                   	push   eax
c001a264:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a268:	2d e8 00 00 00       	sub    eax,0xe8
c001a26d:	eb b5                	jmp    c001a224 <Vm::x87Handler(regs*)+0x47a>
c001a26f:	90                   	nop
c001a270:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a274:	8d 50 40             	lea    edx,[eax+0x40]
c001a277:	80 fa 07             	cmp    dl,0x7
c001a27a:	77 3c                	ja     c001a2b8 <Vm::x87Handler(regs*)+0x50e>
c001a27c:	83 ec 0c             	sub    esp,0xc
c001a27f:	2d c0 00 00 00       	sub    eax,0xc0
c001a284:	50                   	push   eax
c001a285:	e8 e0 f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a28a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a291:	89 c6                	mov    esi,eax
c001a293:	89 d7                	mov    edi,edx
c001a295:	e8 d0 f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a29a:	57                   	push   edi
c001a29b:	56                   	push   esi
c001a29c:	52                   	push   edx
c001a29d:	50                   	push   eax
c001a29e:	e8 3d f9 ff ff       	call   c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2a3:	83 c4 1c             	add    esp,0x1c
c001a2a6:	52                   	push   edx
c001a2a7:	50                   	push   eax
c001a2a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2ac:	2d c0 00 00 00       	sub    eax,0xc0
c001a2b1:	e9 b2 01 00 00       	jmp    c001a468 <Vm::x87Handler(regs*)+0x6be>
c001a2b6:	66 90                	xchg   ax,ax
c001a2b8:	8d 50 20             	lea    edx,[eax+0x20]
c001a2bb:	80 fa 07             	cmp    dl,0x7
c001a2be:	77 3c                	ja     c001a2fc <Vm::x87Handler(regs*)+0x552>
c001a2c0:	83 ec 0c             	sub    esp,0xc
c001a2c3:	2d e0 00 00 00       	sub    eax,0xe0
c001a2c8:	50                   	push   eax
c001a2c9:	e8 9c f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a2ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d5:	89 c6                	mov    esi,eax
c001a2d7:	89 d7                	mov    edi,edx
c001a2d9:	e8 8c f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a2de:	57                   	push   edi
c001a2df:	56                   	push   esi
c001a2e0:	52                   	push   edx
c001a2e1:	50                   	push   eax
c001a2e2:	e8 23 f9 ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a2e7:	83 c4 1c             	add    esp,0x1c
c001a2ea:	52                   	push   edx
c001a2eb:	50                   	push   eax
c001a2ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2f0:	2d e0 00 00 00       	sub    eax,0xe0
c001a2f5:	e9 6e 01 00 00       	jmp    c001a468 <Vm::x87Handler(regs*)+0x6be>
c001a2fa:	66 90                	xchg   ax,ax
c001a2fc:	8d 50 18             	lea    edx,[eax+0x18]
c001a2ff:	80 fa 07             	cmp    dl,0x7
c001a302:	77 3c                	ja     c001a340 <Vm::x87Handler(regs*)+0x596>
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	6a 00                	push   0x0
c001a309:	e8 5c f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a30e:	89 c6                	mov    esi,eax
c001a310:	89 d7                	mov    edi,edx
c001a312:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a316:	2d e8 00 00 00       	sub    eax,0xe8
c001a31b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a31e:	e8 47 f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a323:	57                   	push   edi
c001a324:	56                   	push   esi
c001a325:	52                   	push   edx
c001a326:	50                   	push   eax
c001a327:	e8 de f8 ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a32c:	83 c4 1c             	add    esp,0x1c
c001a32f:	52                   	push   edx
c001a330:	50                   	push   eax
c001a331:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a335:	2d e8 00 00 00       	sub    eax,0xe8
c001a33a:	e9 29 01 00 00       	jmp    c001a468 <Vm::x87Handler(regs*)+0x6be>
c001a33f:	90                   	nop
c001a340:	8d 50 38             	lea    edx,[eax+0x38]
c001a343:	80 fa 07             	cmp    dl,0x7
c001a346:	77 3c                	ja     c001a384 <Vm::x87Handler(regs*)+0x5da>
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	2d c8 00 00 00       	sub    eax,0xc8
c001a350:	50                   	push   eax
c001a351:	e8 14 f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a356:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a35d:	89 c6                	mov    esi,eax
c001a35f:	89 d7                	mov    edi,edx
c001a361:	e8 04 f9 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a366:	57                   	push   edi
c001a367:	56                   	push   esi
c001a368:	52                   	push   edx
c001a369:	50                   	push   eax
c001a36a:	e8 aa f8 ff ff       	call   c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a36f:	83 c4 1c             	add    esp,0x1c
c001a372:	52                   	push   edx
c001a373:	50                   	push   eax
c001a374:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a378:	2d c8 00 00 00       	sub    eax,0xc8
c001a37d:	e9 82 00 00 00       	jmp    c001a404 <Vm::x87Handler(regs*)+0x65a>
c001a382:	66 90                	xchg   ax,ax
c001a384:	3c f7                	cmp    al,0xf7
c001a386:	76 38                	jbe    c001a3c0 <Vm::x87Handler(regs*)+0x616>
c001a388:	83 ec 0c             	sub    esp,0xc
c001a38b:	6a 00                	push   0x0
c001a38d:	e8 d8 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a392:	89 c6                	mov    esi,eax
c001a394:	89 d7                	mov    edi,edx
c001a396:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a39a:	2d f8 00 00 00       	sub    eax,0xf8
c001a39f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3a2:	e8 c3 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a3a7:	57                   	push   edi
c001a3a8:	56                   	push   esi
c001a3a9:	52                   	push   edx
c001a3aa:	50                   	push   eax
c001a3ab:	e8 88 f8 ff ff       	call   c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3b0:	83 c4 1c             	add    esp,0x1c
c001a3b3:	52                   	push   edx
c001a3b4:	50                   	push   eax
c001a3b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3b9:	2d f8 00 00 00       	sub    eax,0xf8
c001a3be:	eb 44                	jmp    c001a404 <Vm::x87Handler(regs*)+0x65a>
c001a3c0:	8d 50 10             	lea    edx,[eax+0x10]
c001a3c3:	80 fa 07             	cmp    dl,0x7
c001a3c6:	0f 87 6c 01 00 00    	ja     c001a538 <Vm::x87Handler(regs*)+0x78e>
c001a3cc:	83 ec 0c             	sub    esp,0xc
c001a3cf:	2d f0 00 00 00       	sub    eax,0xf0
c001a3d4:	50                   	push   eax
c001a3d5:	e8 90 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a3da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3e1:	89 c6                	mov    esi,eax
c001a3e3:	89 d7                	mov    edi,edx
c001a3e5:	e8 80 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a3ea:	57                   	push   edi
c001a3eb:	56                   	push   esi
c001a3ec:	52                   	push   edx
c001a3ed:	50                   	push   eax
c001a3ee:	e8 45 f8 ff ff       	call   c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3f3:	83 c4 1c             	add    esp,0x1c
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3fc:	2d f0 00 00 00       	sub    eax,0xf0
c001a401:	8d 76 00             	lea    esi,[esi+0x0]
c001a404:	50                   	push   eax
c001a405:	8d 76 00             	lea    esi,[esi+0x0]
c001a408:	e8 a0 f8 ff ff       	call   c0019cad <Vm::fpuSetReg(int, unsigned long long)>
c001a40d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a411:	e8 41 f9 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a416:	e9 0d fa ff ff       	jmp    c0019e28 <Vm::x87Handler(regs*)+0x7e>
c001a41b:	90                   	nop
c001a41c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a420:	8d 50 30             	lea    edx,[eax+0x30]
c001a423:	80 fa 07             	cmp    dl,0x7
c001a426:	77 20                	ja     c001a448 <Vm::x87Handler(regs*)+0x69e>
c001a428:	83 ec 0c             	sub    esp,0xc
c001a42b:	6a 00                	push   0x0
c001a42d:	e8 38 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a432:	83 c4 0c             	add    esp,0xc
c001a435:	52                   	push   edx
c001a436:	50                   	push   eax
c001a437:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a43b:	2d d0 00 00 00       	sub    eax,0xd0
c001a440:	e9 df fd ff ff       	jmp    c001a224 <Vm::x87Handler(regs*)+0x47a>
c001a445:	8d 76 00             	lea    esi,[esi+0x0]
c001a448:	8d 50 28             	lea    edx,[eax+0x28]
c001a44b:	80 fa 07             	cmp    dl,0x7
c001a44e:	77 28                	ja     c001a478 <Vm::x87Handler(regs*)+0x6ce>
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	6a 00                	push   0x0
c001a455:	e8 10 f8 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a45a:	83 c4 0c             	add    esp,0xc
c001a45d:	52                   	push   edx
c001a45e:	50                   	push   eax
c001a45f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a463:	2d d8 00 00 00       	sub    eax,0xd8
c001a468:	50                   	push   eax
c001a469:	e8 3f f8 ff ff       	call   c0019cad <Vm::fpuSetReg(int, unsigned long long)>
c001a46e:	e8 e4 f8 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a473:	e9 ac f9 ff ff       	jmp    c0019e24 <Vm::x87Handler(regs*)+0x7a>
c001a478:	8d 50 20             	lea    edx,[eax+0x20]
c001a47b:	80 fa 07             	cmp    dl,0x7
c001a47e:	77 30                	ja     c001a4b0 <Vm::x87Handler(regs*)+0x706>
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	2d e0 00 00 00       	sub    eax,0xe0
c001a488:	50                   	push   eax
c001a489:	e8 dc f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a48e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a495:	89 c6                	mov    esi,eax
c001a497:	89 d7                	mov    edi,edx
c001a499:	e8 cc f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a49e:	57                   	push   edi
c001a49f:	56                   	push   esi
c001a4a0:	52                   	push   edx
c001a4a1:	50                   	push   eax
c001a4a2:	e8 e3 f6 ff ff       	call   c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a4a7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4ab:	e9 78 02 00 00       	jmp    c001a728 <Vm::x87Handler(regs*)+0x97e>
c001a4b0:	8d 50 18             	lea    edx,[eax+0x18]
c001a4b3:	80 fa 07             	cmp    dl,0x7
c001a4b6:	0f 87 10 fb ff ff    	ja     c0019fcc <Vm::x87Handler(regs*)+0x222>
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	2d e8 00 00 00       	sub    eax,0xe8
c001a4c4:	50                   	push   eax
c001a4c5:	e8 a0 f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a4ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4d1:	89 c6                	mov    esi,eax
c001a4d3:	89 d7                	mov    edi,edx
c001a4d5:	e8 90 f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a4da:	57                   	push   edi
c001a4db:	56                   	push   esi
c001a4dc:	52                   	push   edx
c001a4dd:	50                   	push   eax
c001a4de:	e8 a7 f6 ff ff       	call   c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a4e3:	83 c4 20             	add    esp,0x20
c001a4e6:	e8 6c f8 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a4eb:	eb 6f                	jmp    c001a55c <Vm::x87Handler(regs*)+0x7b2>
c001a4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a4f4:	0f 85 22 01 00 00    	jne    c001a61c <Vm::x87Handler(regs*)+0x872>
c001a4fa:	66 90                	xchg   ax,ax
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	6a 01                	push   0x1
c001a501:	e8 64 f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a506:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a50d:	89 c6                	mov    esi,eax
c001a50f:	89 d7                	mov    edi,edx
c001a511:	e8 54 f7 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a516:	57                   	push   edi
c001a517:	56                   	push   esi
c001a518:	52                   	push   edx
c001a519:	50                   	push   eax
c001a51a:	e8 6b f6 ff ff       	call   c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a51f:	83 c4 20             	add    esp,0x20
c001a522:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a526:	e8 2c f8 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a52b:	e8 27 f8 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a530:	e9 f7 f8 ff ff       	jmp    c0019e2c <Vm::x87Handler(regs*)+0x82>
c001a535:	8d 76 00             	lea    esi,[esi+0x0]
c001a538:	3c d9                	cmp    al,0xd9
c001a53a:	0f 85 e8 02 00 00    	jne    c001a828 <Vm::x87Handler(regs*)+0xa7e>
c001a540:	eb ba                	jmp    c001a4fc <Vm::x87Handler(regs*)+0x752>
c001a542:	66 90                	xchg   ax,ax
c001a544:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a548:	0f 85 2a 03 00 00    	jne    c001a878 <Vm::x87Handler(regs*)+0xace>
c001a54e:	0f b7 05 00 8a 02 c0 	movzx  eax,WORD PTR ds:0xc0028a00
c001a555:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a559:	8d 76 00             	lea    esi,[esi+0x0]
c001a55c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a560:	e9 c7 f8 ff ff       	jmp    c0019e2c <Vm::x87Handler(regs*)+0x82>
c001a565:	8d 76 00             	lea    esi,[esi+0x0]
c001a568:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a56c:	84 d2                	test   dl,dl
c001a56e:	75 10                	jne    c001a580 <Vm::x87Handler(regs*)+0x7d6>
c001a570:	83 ec 0c             	sub    esp,0xc
c001a573:	ff 36                	push   DWORD PTR [esi]
c001a575:	e8 29 f4 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a57a:	e9 39 01 00 00       	jmp    c001a6b8 <Vm::x87Handler(regs*)+0x90e>
c001a57f:	90                   	nop
c001a580:	80 fa 01             	cmp    dl,0x1
c001a583:	75 0f                	jne    c001a594 <Vm::x87Handler(regs*)+0x7ea>
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	ff 36                	push   DWORD PTR [esi]
c001a58a:	e8 14 f4 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a58f:	e9 b4 02 00 00       	jmp    c001a848 <Vm::x87Handler(regs*)+0xa9e>
c001a594:	80 fa 04             	cmp    dl,0x4
c001a597:	75 0f                	jne    c001a5a8 <Vm::x87Handler(regs*)+0x7fe>
c001a599:	83 ec 0c             	sub    esp,0xc
c001a59c:	ff 36                	push   DWORD PTR [esi]
c001a59e:	e8 00 f4 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a5a3:	e9 9c 01 00 00       	jmp    c001a744 <Vm::x87Handler(regs*)+0x99a>
c001a5a8:	80 fa 05             	cmp    dl,0x5
c001a5ab:	75 1b                	jne    c001a5c8 <Vm::x87Handler(regs*)+0x81e>
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	6a 00                	push   0x0
c001a5b2:	e8 b3 f6 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a5b7:	89 c7                	mov    edi,eax
c001a5b9:	89 d5                	mov    ebp,edx
c001a5bb:	58                   	pop    eax
c001a5bc:	ff 36                	push   DWORD PTR [esi]
c001a5be:	e8 e0 f3 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a5c3:	e9 bc 01 00 00       	jmp    c001a784 <Vm::x87Handler(regs*)+0x9da>
c001a5c8:	80 fa 06             	cmp    dl,0x6
c001a5cb:	75 0f                	jne    c001a5dc <Vm::x87Handler(regs*)+0x832>
c001a5cd:	83 ec 0c             	sub    esp,0xc
c001a5d0:	ff 36                	push   DWORD PTR [esi]
c001a5d2:	e8 cc f3 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a5d7:	e9 cc 01 00 00       	jmp    c001a7a8 <Vm::x87Handler(regs*)+0x9fe>
c001a5dc:	31 c0                	xor    eax,eax
c001a5de:	80 fa 07             	cmp    dl,0x7
c001a5e1:	0f 85 d5 02 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a5e7:	83 ec 0c             	sub    esp,0xc
c001a5ea:	6a 00                	push   0x0
c001a5ec:	e8 79 f6 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a5f1:	89 c7                	mov    edi,eax
c001a5f3:	89 d5                	mov    ebp,edx
c001a5f5:	58                   	pop    eax
c001a5f6:	ff 36                	push   DWORD PTR [esi]
c001a5f8:	e8 a6 f3 ff ff       	call   c00199a3 <Vm::fpu32ToInternal(unsigned int)>
c001a5fd:	e9 ee 01 00 00       	jmp    c001a7f0 <Vm::x87Handler(regs*)+0xa46>
c001a602:	66 90                	xchg   ax,ax
c001a604:	80 fa 03             	cmp    dl,0x3
c001a607:	0f 85 f7 01 00 00    	jne    c001a804 <Vm::x87Handler(regs*)+0xa5a>
c001a60d:	e8 45 f7 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a612:	51                   	push   ecx
c001a613:	51                   	push   ecx
c001a614:	e9 03 02 00 00       	jmp    c001a81c <Vm::x87Handler(regs*)+0xa72>
c001a619:	8d 76 00             	lea    esi,[esi+0x0]
c001a61c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a620:	80 fa 01             	cmp    dl,0x1
c001a623:	75 0b                	jne    c001a630 <Vm::x87Handler(regs*)+0x886>
c001a625:	57                   	push   edi
c001a626:	57                   	push   edi
c001a627:	8b 06                	mov    eax,DWORD PTR [esi]
c001a629:	e9 0e 02 00 00       	jmp    c001a83c <Vm::x87Handler(regs*)+0xa92>
c001a62e:	66 90                	xchg   ax,ax
c001a630:	80 fa 04             	cmp    dl,0x4
c001a633:	75 13                	jne    c001a648 <Vm::x87Handler(regs*)+0x89e>
c001a635:	31 d2                	xor    edx,edx
c001a637:	51                   	push   ecx
c001a638:	51                   	push   ecx
c001a639:	8b 06                	mov    eax,DWORD PTR [esi]
c001a63b:	52                   	push   edx
c001a63c:	50                   	push   eax
c001a63d:	e8 4a f4 ff ff       	call   c0019a8c <Vm::fpuLongToFloat(long long)>
c001a642:	e9 fd 00 00 00       	jmp    c001a744 <Vm::x87Handler(regs*)+0x99a>
c001a647:	90                   	nop
c001a648:	31 c0                	xor    eax,eax
c001a64a:	80 fa 07             	cmp    dl,0x7
c001a64d:	0f 85 69 02 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a653:	83 ec 0c             	sub    esp,0xc
c001a656:	6a 00                	push   0x0
c001a658:	e8 0d f6 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a65d:	89 c7                	mov    edi,eax
c001a65f:	89 d5                	mov    ebp,edx
c001a661:	58                   	pop    eax
c001a662:	8b 06                	mov    eax,DWORD PTR [esi]
c001a664:	5a                   	pop    edx
c001a665:	31 d2                	xor    edx,edx
c001a667:	52                   	push   edx
c001a668:	50                   	push   eax
c001a669:	e8 1e f4 ff ff       	call   c0019a8c <Vm::fpuLongToFloat(long long)>
c001a66e:	e9 7d 01 00 00       	jmp    c001a7f0 <Vm::x87Handler(regs*)+0xa46>
c001a673:	90                   	nop
c001a674:	84 d2                	test   dl,dl
c001a676:	75 10                	jne    c001a688 <Vm::x87Handler(regs*)+0x8de>
c001a678:	31 d2                	xor    edx,edx
c001a67a:	55                   	push   ebp
c001a67b:	55                   	push   ebp
c001a67c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a67e:	52                   	push   edx
c001a67f:	50                   	push   eax
c001a680:	e9 03 02 00 00       	jmp    c001a888 <Vm::x87Handler(regs*)+0xade>
c001a685:	8d 76 00             	lea    esi,[esi+0x0]
c001a688:	31 c0                	xor    eax,eax
c001a68a:	80 fa 02             	cmp    dl,0x2
c001a68d:	0f 85 29 02 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a693:	83 ec 0c             	sub    esp,0xc
c001a696:	6a 00                	push   0x0
c001a698:	e8 cd f5 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a69d:	59                   	pop    ecx
c001a69e:	5f                   	pop    edi
c001a69f:	e9 18 f9 ff ff       	jmp    c0019fbc <Vm::x87Handler(regs*)+0x212>
c001a6a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a6a8:	84 d2                	test   dl,dl
c001a6aa:	75 2c                	jne    c001a6d8 <Vm::x87Handler(regs*)+0x92e>
c001a6ac:	50                   	push   eax
c001a6ad:	50                   	push   eax
c001a6ae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a6b1:	ff 36                	push   DWORD PTR [esi]
c001a6b3:	e8 30 f3 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a6b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6bf:	89 c6                	mov    esi,eax
c001a6c1:	89 d7                	mov    edi,edx
c001a6c3:	e8 a2 f5 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a6c8:	57                   	push   edi
c001a6c9:	56                   	push   esi
c001a6ca:	52                   	push   edx
c001a6cb:	50                   	push   eax
c001a6cc:	e8 0f f5 ff ff       	call   c0019be0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a6d1:	e9 8e 01 00 00       	jmp    c001a864 <Vm::x87Handler(regs*)+0xaba>
c001a6d6:	66 90                	xchg   ax,ax
c001a6d8:	80 fa 01             	cmp    dl,0x1
c001a6db:	75 13                	jne    c001a6f0 <Vm::x87Handler(regs*)+0x946>
c001a6dd:	50                   	push   eax
c001a6de:	50                   	push   eax
c001a6df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a6e2:	ff 36                	push   DWORD PTR [esi]
c001a6e4:	e8 ff f2 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a6e9:	e9 5a 01 00 00       	jmp    c001a848 <Vm::x87Handler(regs*)+0xa9e>
c001a6ee:	66 90                	xchg   ax,ax
c001a6f0:	80 fa 02             	cmp    dl,0x2
c001a6f3:	0f 85 03 f9 ff ff    	jne    c0019ffc <Vm::x87Handler(regs*)+0x252>
c001a6f9:	55                   	push   ebp
c001a6fa:	55                   	push   ebp
c001a6fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a6fe:	ff 36                	push   DWORD PTR [esi]
c001a700:	e8 e3 f2 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a705:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a70c:	89 c6                	mov    esi,eax
c001a70e:	89 d7                	mov    edi,edx
c001a710:	e8 55 f5 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a715:	57                   	push   edi
c001a716:	56                   	push   esi
c001a717:	52                   	push   edx
c001a718:	50                   	push   eax
c001a719:	e8 6c f4 ff ff       	call   c0019b8a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a722:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a725:	8d 76 00             	lea    esi,[esi+0x0]
c001a728:	83 c4 20             	add    esp,0x20
c001a72b:	e9 fc f6 ff ff       	jmp    c0019e2c <Vm::x87Handler(regs*)+0x82>
c001a730:	80 fa 04             	cmp    dl,0x4
c001a733:	75 2f                	jne    c001a764 <Vm::x87Handler(regs*)+0x9ba>
c001a735:	51                   	push   ecx
c001a736:	51                   	push   ecx
c001a737:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a73a:	ff 36                	push   DWORD PTR [esi]
c001a73c:	e8 a7 f2 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a741:	8d 76 00             	lea    esi,[esi+0x0]
c001a744:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a74b:	89 c6                	mov    esi,eax
c001a74d:	89 d7                	mov    edi,edx
c001a74f:	e8 16 f5 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a754:	57                   	push   edi
c001a755:	56                   	push   esi
c001a756:	52                   	push   edx
c001a757:	50                   	push   eax
c001a758:	e8 ad f4 ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a75d:	e9 02 01 00 00       	jmp    c001a864 <Vm::x87Handler(regs*)+0xaba>
c001a762:	66 90                	xchg   ax,ax
c001a764:	80 fa 05             	cmp    dl,0x5
c001a767:	75 2b                	jne    c001a794 <Vm::x87Handler(regs*)+0x9ea>
c001a769:	83 ec 0c             	sub    esp,0xc
c001a76c:	6a 00                	push   0x0
c001a76e:	e8 f7 f4 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a773:	89 c7                	mov    edi,eax
c001a775:	89 d5                	mov    ebp,edx
c001a777:	58                   	pop    eax
c001a778:	5a                   	pop    edx
c001a779:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a77c:	ff 36                	push   DWORD PTR [esi]
c001a77e:	e8 65 f2 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a783:	90                   	nop
c001a784:	83 c4 10             	add    esp,0x10
c001a787:	55                   	push   ebp
c001a788:	57                   	push   edi
c001a789:	52                   	push   edx
c001a78a:	50                   	push   eax
c001a78b:	e8 7a f4 ff ff       	call   c0019c0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a790:	eb 6a                	jmp    c001a7fc <Vm::x87Handler(regs*)+0xa52>
c001a792:	66 90                	xchg   ax,ax
c001a794:	80 fa 06             	cmp    dl,0x6
c001a797:	75 2f                	jne    c001a7c8 <Vm::x87Handler(regs*)+0xa1e>
c001a799:	51                   	push   ecx
c001a79a:	51                   	push   ecx
c001a79b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a79e:	ff 36                	push   DWORD PTR [esi]
c001a7a0:	e8 43 f2 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7af:	89 c6                	mov    esi,eax
c001a7b1:	89 d7                	mov    edi,edx
c001a7b3:	e8 b2 f4 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a7b8:	57                   	push   edi
c001a7b9:	56                   	push   esi
c001a7ba:	52                   	push   edx
c001a7bb:	50                   	push   eax
c001a7bc:	e8 77 f4 ff ff       	call   c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7c1:	e9 9e 00 00 00       	jmp    c001a864 <Vm::x87Handler(regs*)+0xaba>
c001a7c6:	66 90                	xchg   ax,ax
c001a7c8:	31 c0                	xor    eax,eax
c001a7ca:	80 fa 07             	cmp    dl,0x7
c001a7cd:	0f 85 e9 00 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a7d3:	83 ec 0c             	sub    esp,0xc
c001a7d6:	6a 00                	push   0x0
c001a7d8:	e8 8d f4 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a7dd:	89 c7                	mov    edi,eax
c001a7df:	89 d5                	mov    ebp,edx
c001a7e1:	58                   	pop    eax
c001a7e2:	5a                   	pop    edx
c001a7e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7e6:	ff 36                	push   DWORD PTR [esi]
c001a7e8:	e8 fb f1 ff ff       	call   c00199e8 <Vm::fpu64ToInternal(unsigned long long)>
c001a7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f0:	83 c4 10             	add    esp,0x10
c001a7f3:	55                   	push   ebp
c001a7f4:	57                   	push   edi
c001a7f5:	52                   	push   edx
c001a7f6:	50                   	push   eax
c001a7f7:	e8 3c f4 ff ff       	call   c0019c38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7fc:	83 c4 0c             	add    esp,0xc
c001a7ff:	eb 67                	jmp    c001a868 <Vm::x87Handler(regs*)+0xabe>
c001a801:	8d 76 00             	lea    esi,[esi+0x0]
c001a804:	31 c0                	xor    eax,eax
c001a806:	80 fa 02             	cmp    dl,0x2
c001a809:	0f 85 ad 00 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a80f:	83 ec 0c             	sub    esp,0xc
c001a812:	6a 00                	push   0x0
c001a814:	e8 51 f4 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a819:	59                   	pop    ecx
c001a81a:	5f                   	pop    edi
c001a81b:	90                   	nop
c001a81c:	52                   	push   edx
c001a81d:	50                   	push   eax
c001a81e:	e8 77 f1 ff ff       	call   c001999a <Vm::fpuInternalTo64(unsigned long long)>
c001a823:	e9 84 00 00 00       	jmp    c001a8ac <Vm::x87Handler(regs*)+0xb02>
c001a828:	31 c0                	xor    eax,eax
c001a82a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a82f:	0f 85 87 00 00 00    	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a835:	50                   	push   eax
c001a836:	50                   	push   eax
c001a837:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a83a:	66 90                	xchg   ax,ax
c001a83c:	31 d2                	xor    edx,edx
c001a83e:	52                   	push   edx
c001a83f:	50                   	push   eax
c001a840:	e8 47 f2 ff ff       	call   c0019a8c <Vm::fpuLongToFloat(long long)>
c001a845:	8d 76 00             	lea    esi,[esi+0x0]
c001a848:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a84f:	89 c6                	mov    esi,eax
c001a851:	89 d7                	mov    edi,edx
c001a853:	e8 12 f4 ff ff       	call   c0019c6a <Vm::fpuGetReg(int)>
c001a858:	57                   	push   edi
c001a859:	56                   	push   esi
c001a85a:	52                   	push   edx
c001a85b:	50                   	push   eax
c001a85c:	e8 b8 f3 ff ff       	call   c0019c19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a861:	8d 76 00             	lea    esi,[esi+0x0]
c001a864:	83 c4 1c             	add    esp,0x1c
c001a867:	90                   	nop
c001a868:	52                   	push   edx
c001a869:	50                   	push   eax
c001a86a:	6a 00                	push   0x0
c001a86c:	e8 3c f4 ff ff       	call   c0019cad <Vm::fpuSetReg(int, unsigned long long)>
c001a871:	e9 7a f7 ff ff       	jmp    c0019ff0 <Vm::x87Handler(regs*)+0x246>
c001a876:	66 90                	xchg   ax,ax
c001a878:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a87c:	80 fa 05             	cmp    dl,0x5
c001a87f:	75 13                	jne    c001a894 <Vm::x87Handler(regs*)+0xaea>
c001a881:	55                   	push   ebp
c001a882:	55                   	push   ebp
c001a883:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a886:	ff 36                	push   DWORD PTR [esi]
c001a888:	e8 c3 f1 ff ff       	call   c0019a50 <Vm::fpuULongToFloat(unsigned long long)>
c001a88d:	e9 52 f7 ff ff       	jmp    c0019fe4 <Vm::x87Handler(regs*)+0x23a>
c001a892:	66 90                	xchg   ax,ax
c001a894:	31 c0                	xor    eax,eax
c001a896:	80 fa 07             	cmp    dl,0x7
c001a899:	75 21                	jne    c001a8bc <Vm::x87Handler(regs*)+0xb12>
c001a89b:	e8 b7 f4 ff ff       	call   c0019d57 <Vm::fpuPop()>
c001a8a0:	51                   	push   ecx
c001a8a1:	51                   	push   ecx
c001a8a2:	52                   	push   edx
c001a8a3:	50                   	push   eax
c001a8a4:	e8 48 f1 ff ff       	call   c00199f1 <Vm::fpuFloatToLong(unsigned long long)>
c001a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	89 06                	mov    DWORD PTR [esi],eax
c001a8b1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8b4:	e9 7b f7 ff ff       	jmp    c001a034 <Vm::x87Handler(regs*)+0x28a>
c001a8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8bc:	83 c4 1c             	add    esp,0x1c
c001a8bf:	5b                   	pop    ebx
c001a8c0:	5e                   	pop    esi
c001a8c1:	5f                   	pop    edi
c001a8c2:	5d                   	pop    ebp
c001a8c3:	c3                   	ret    

c001a8c4 <__static_initialization_and_destruction_0(int, int)>:
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a8cc:	75 1a                	jne    c001a8e8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a8ce:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a8d6:	75 10                	jne    c001a8e8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	68 00 8a 02 c0       	push   0xc0028a00
c001a8e0:	e8 03 80 00 00       	call   c00228e8 <Vm::_FPUState::_FPUState()>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	90                   	nop
c001a8e9:	83 c4 0c             	add    esp,0xc
c001a8ec:	c3                   	ret    
c001a8ed:	8d 76 00             	lea    esi,[esi+0x0]

c001a8f0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	83 ec 08             	sub    esp,0x8
c001a8f6:	68 ff ff 00 00       	push   0xffff
c001a8fb:	6a 01                	push   0x1
c001a8fd:	e8 c2 ff ff ff       	call   c001a8c4 <__static_initialization_and_destruction_0(int, int)>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	83 c4 0c             	add    esp,0xc
c001a908:	c3                   	ret    
c001a909:	66 90                	xchg   ax,ax
c001a90b:	90                   	nop

c001a90c <FAT::getName()>:
c001a90c:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c001a911:	c3                   	ret    
c001a912:	66 90                	xchg   ax,ax

c001a914 <FAT::tell(void*, unsigned long long*)>:
c001a914:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a919:	75 09                	jne    c001a924 <FAT::tell(void*, unsigned long long*)+0x10>
c001a91b:	b8 04 00 00 00       	mov    eax,0x4
c001a920:	c3                   	ret    
c001a921:	8d 76 00             	lea    esi,[esi+0x0]
c001a924:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a929:	75 09                	jne    c001a934 <FAT::tell(void*, unsigned long long*)+0x20>
c001a92b:	b8 04 00 00 00       	mov    eax,0x4
c001a930:	c3                   	ret    
c001a931:	8d 76 00             	lea    esi,[esi+0x0]
c001a934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a938:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a93b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a93e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a942:	89 01                	mov    DWORD PTR [ecx],eax
c001a944:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a947:	b8 00 00 00 00       	mov    eax,0x0
c001a94c:	c3                   	ret    
c001a94d:	90                   	nop
c001a94e:	66 90                	xchg   ax,ax

c001a950 <FAT::stat(void*, unsigned long long*)>:
c001a950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a955:	75 09                	jne    c001a960 <FAT::stat(void*, unsigned long long*)+0x10>
c001a957:	b8 04 00 00 00       	mov    eax,0x4
c001a95c:	c3                   	ret    
c001a95d:	8d 76 00             	lea    esi,[esi+0x0]
c001a960:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a965:	75 09                	jne    c001a970 <FAT::stat(void*, unsigned long long*)+0x20>
c001a967:	b8 04 00 00 00       	mov    eax,0x4
c001a96c:	c3                   	ret    
c001a96d:	8d 76 00             	lea    esi,[esi+0x0]
c001a970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a974:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a977:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a97a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a97e:	89 01                	mov    DWORD PTR [ecx],eax
c001a980:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a983:	b8 00 00 00 00       	mov    eax,0x0
c001a988:	c3                   	ret    
c001a989:	90                   	nop
c001a98a:	66 90                	xchg   ax,ax

c001a98c <FAT::~FAT()>:
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	ba a4 5a 02 c0       	mov    edx,0xc0025aa4
c001a994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a998:	89 10                	mov    DWORD PTR [eax],edx
c001a99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	50                   	push   eax
c001a9a2:	e8 d7 25 ff ff       	call   c000cf7e <Filesystem::~Filesystem()>
c001a9a7:	83 c4 10             	add    esp,0x10
c001a9aa:	90                   	nop
c001a9ab:	83 c4 0c             	add    esp,0xc
c001a9ae:	c3                   	ret    
c001a9af:	90                   	nop

c001a9b0 <FAT::~FAT()>:
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	83 ec 0c             	sub    esp,0xc
c001a9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a9ba:	e8 cd ff ff ff       	call   c001a98c <FAT::~FAT()>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	83 ec 08             	sub    esp,0x8
c001a9c5:	6a 08                	push   0x8
c001a9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a9cb:	e8 92 21 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	83 c4 0c             	add    esp,0xc
c001a9d6:	c3                   	ret    
c001a9d7:	90                   	nop

c001a9d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a9d8:	83 ec 1c             	sub    esp,0x1c
c001a9db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a9e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a9e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9eb:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001a9f2:	83 f8 ff             	cmp    eax,0xffffffff
c001a9f5:	75 35                	jne    c001aa2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a9f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a9fb:	88 c2                	mov    dl,al
c001a9fd:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001aa02:	01 d0                	add    eax,edx
c001aa04:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aa08:	8b 15 60 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a60
c001aa0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa12:	89 14 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],edx
c001aa19:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001aa1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa22:	89 14 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],edx
c001aa29:	eb 19                	jmp    c001aa44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001aa2b:	90                   	nop
c001aa2c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aa30:	88 c2                	mov    dl,al
c001aa32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa36:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001aa3d:	01 d0                	add    eax,edx
c001aa3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aa43:	90                   	nop
c001aa44:	83 ec 04             	sub    esp,0x4
c001aa47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aa4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aa4f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001aa53:	50                   	push   eax
c001aa54:	e8 d9 c1 fe ff       	call   c0006c32 <f_getlabel>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa65:	75 09                	jne    c001aa70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001aa67:	b8 00 00 00 00       	mov    eax,0x0
c001aa6c:	eb 0a                	jmp    c001aa78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001aa6e:	66 90                	xchg   ax,ax
c001aa70:	b8 01 00 00 00       	mov    eax,0x1
c001aa75:	8d 76 00             	lea    esi,[esi+0x0]
c001aa78:	83 c4 1c             	add    esp,0x1c
c001aa7b:	c3                   	ret    

c001aa7c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001aa7c:	57                   	push   edi
c001aa7d:	83 ec 58             	sub    esp,0x58
c001aa80:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001aa88:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aa8c:	b9 0f 00 00 00       	mov    ecx,0xf
c001aa91:	b8 00 00 00 00       	mov    eax,0x0
c001aa96:	fc                   	cld    
c001aa97:	89 d7                	mov    edi,edx
c001aa99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aa9f:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001aaa6:	83 f8 ff             	cmp    eax,0xffffffff
c001aaa9:	75 35                	jne    c001aae0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001aaab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aaaf:	88 c2                	mov    dl,al
c001aab1:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001aab6:	01 d0                	add    eax,edx
c001aab8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aabc:	8b 15 60 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a60
c001aac2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aac6:	89 14 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],edx
c001aacd:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001aad2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001aad6:	89 14 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],edx
c001aadd:	eb 19                	jmp    c001aaf8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001aadf:	90                   	nop
c001aae0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aae4:	88 c2                	mov    dl,al
c001aae6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aaea:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001aaf1:	01 d0                	add    eax,edx
c001aaf3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aaf7:	90                   	nop
c001aaf8:	83 ec 08             	sub    esp,0x8
c001aafb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001aaff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab03:	50                   	push   eax
c001ab04:	e8 77 5d fe ff       	call   c0000880 <strcat>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab13:	50                   	push   eax
c001ab14:	e8 07 c3 fe ff       	call   c0006e20 <f_setlabel>
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ab20:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ab25:	75 09                	jne    c001ab30 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ab27:	b8 00 00 00 00       	mov    eax,0x0
c001ab2c:	eb 0a                	jmp    c001ab38 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ab2e:	66 90                	xchg   ax,ax
c001ab30:	b8 01 00 00 00       	mov    eax,0x1
c001ab35:	8d 76 00             	lea    esi,[esi+0x0]
c001ab38:	83 c4 58             	add    esp,0x58
c001ab3b:	5f                   	pop    edi
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop
c001ab3e:	66 90                	xchg   ax,ax

c001ab40 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ab40:	83 ec 2c             	sub    esp,0x2c
c001ab43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ab4b:	83 ec 08             	sub    esp,0x8
c001ab4e:	68 7c 5a 02 c0       	push   0xc0025a7c
c001ab53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab57:	e8 70 5c fe ff       	call   c00007cc <strcmp>
c001ab5c:	83 c4 10             	add    esp,0x10
c001ab5f:	85 c0                	test   eax,eax
c001ab61:	0f 94 c0             	sete   al
c001ab64:	84 c0                	test   al,al
c001ab66:	74 10                	je     c001ab78 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ab68:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ab70:	e9 b3 00 00 00       	jmp    c001ac28 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ab75:	8d 76 00             	lea    esi,[esi+0x0]
c001ab78:	83 ec 08             	sub    esp,0x8
c001ab7b:	68 6e 5a 02 c0       	push   0xc0025a6e
c001ab80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab84:	e8 43 5c fe ff       	call   c00007cc <strcmp>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	85 c0                	test   eax,eax
c001ab8e:	0f 94 c0             	sete   al
c001ab91:	84 c0                	test   al,al
c001ab93:	74 0f                	je     c001aba4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001ab95:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ab9d:	e9 86 00 00 00       	jmp    c001ac28 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aba2:	66 90                	xchg   ax,ax
c001aba4:	83 ec 08             	sub    esp,0x8
c001aba7:	68 74 5a 02 c0       	push   0xc0025a74
c001abac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001abb0:	e8 17 5c fe ff       	call   c00007cc <strcmp>
c001abb5:	83 c4 10             	add    esp,0x10
c001abb8:	85 c0                	test   eax,eax
c001abba:	0f 94 c0             	sete   al
c001abbd:	84 c0                	test   al,al
c001abbf:	74 0b                	je     c001abcc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001abc1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001abc9:	eb 5d                	jmp    c001ac28 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001abcb:	90                   	nop
c001abcc:	83 ec 08             	sub    esp,0x8
c001abcf:	68 4c 30 02 c0       	push   0xc002304c
c001abd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001abd8:	e8 ef 5b fe ff       	call   c00007cc <strcmp>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	85 c0                	test   eax,eax
c001abe2:	0f 94 c0             	sete   al
c001abe5:	84 c0                	test   al,al
c001abe7:	74 0b                	je     c001abf4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001abe9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001abf1:	eb 35                	jmp    c001ac28 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001abf3:	90                   	nop
c001abf4:	83 ec 08             	sub    esp,0x8
c001abf7:	68 7a 5a 02 c0       	push   0xc0025a7a
c001abfc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac00:	e8 c7 5b fe ff       	call   c00007cc <strcmp>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	85 c0                	test   eax,eax
c001ac0a:	0f 94 c0             	sete   al
c001ac0d:	84 c0                	test   al,al
c001ac0f:	74 0b                	je     c001ac1c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001ac11:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ac19:	eb 0d                	jmp    c001ac28 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac1b:	90                   	nop
c001ac1c:	b8 08 00 00 00       	mov    eax,0x8
c001ac21:	e9 ea 00 00 00       	jmp    c001ad10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ac26:	66 90                	xchg   ax,ax
c001ac28:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ac2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ac34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac38:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001ac3f:	83 f8 ff             	cmp    eax,0xffffffff
c001ac42:	75 34                	jne    c001ac78 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001ac44:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ac48:	88 c2                	mov    dl,al
c001ac4a:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001ac4f:	01 d0                	add    eax,edx
c001ac51:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ac55:	8b 15 60 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a60
c001ac5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac5f:	89 14 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],edx
c001ac66:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001ac6b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac6f:	89 14 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],edx
c001ac76:	eb 18                	jmp    c001ac90 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001ac78:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ac7c:	88 c2                	mov    dl,al
c001ac7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac82:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001ac89:	01 d0                	add    eax,edx
c001ac8b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ac8f:	90                   	nop
c001ac90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac94:	88 04 24             	mov    BYTE PTR [esp],al
c001ac97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ac9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac9f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001aca7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001acac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	68 00 20 00 00       	push   0x2000
c001acbc:	e8 02 ed fe ff       	call   c00099c3 <malloc>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acc8:	68 00 20 00 00       	push   0x2000
c001accd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acd1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001acd5:	50                   	push   eax
c001acd6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001acda:	50                   	push   eax
c001acdb:	e8 c1 c7 fe ff       	call   c00074a1 <f_mkfs>
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ace7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001acec:	75 0a                	jne    c001acf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001acee:	b8 00 00 00 00       	mov    eax,0x0
c001acf3:	eb 1b                	jmp    c001ad10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001acf5:	8d 76 00             	lea    esi,[esi+0x0]
c001acf8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001acfd:	75 09                	jne    c001ad08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001acff:	b8 09 00 00 00       	mov    eax,0x9
c001ad04:	eb 0a                	jmp    c001ad10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ad06:	66 90                	xchg   ax,ax
c001ad08:	b8 01 00 00 00       	mov    eax,0x1
c001ad0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad10:	83 c4 2c             	add    esp,0x2c
c001ad13:	c3                   	ret    

c001ad14 <FAT::tryMount(LogicalDisk*, int)>:
c001ad14:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ad1a:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001ad1f:	83 f8 14             	cmp    eax,0x14
c001ad22:	75 18                	jne    c001ad3c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	68 80 5a 02 c0       	push   0xc0025a80
c001ad2c:	e8 32 9a ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001ad31:	83 c4 10             	add    esp,0x10
c001ad34:	b0 00                	mov    al,0x0
c001ad36:	e9 e9 01 00 00       	jmp    c001af24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ad3b:	90                   	nop
c001ad3c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ad43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ad49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ad4f:	3d 00 02 00 00       	cmp    eax,0x200
c001ad54:	74 0a                	je     c001ad60 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ad56:	b0 00                	mov    al,0x0
c001ad58:	e9 c7 01 00 00       	jmp    c001af24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ad68:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ad6f:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001ad76:	83 f8 ff             	cmp    eax,0xffffffff
c001ad79:	74 09                	je     c001ad84 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ad7b:	b0 01                	mov    al,0x1
c001ad7d:	e9 a2 01 00 00       	jmp    c001af24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ad82:	66 90                	xchg   ax,ax
c001ad84:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ad8e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ad96:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ad9d:	88 c2                	mov    dl,al
c001ad9f:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001ada4:	01 d0                	add    eax,edx
c001ada6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001adad:	8b 15 60 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a60
c001adb3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001adba:	89 14 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],edx
c001adc1:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001adc6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001adcd:	89 14 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],edx
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	68 54 02 00 00       	push   0x254
c001addc:	e8 e2 eb fe ff       	call   c00099c3 <malloc>
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001adeb:	83 ec 04             	sub    esp,0x4
c001adee:	6a 00                	push   0x0
c001adf0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001adf7:	50                   	push   eax
c001adf8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001adff:	e8 25 a0 fe ff       	call   c0004e29 <f_mount>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ae0e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001ae16:	74 1c                	je     c001ae34 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ae22:	e8 bc eb fe ff       	call   c00099e3 <rfree>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	b0 00                	mov    al,0x0
c001ae2c:	e9 f3 00 00 00       	jmp    c001af24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	83 ec 04             	sub    esp,0x4
c001ae37:	68 00 01 00 00       	push   0x100
c001ae3c:	6a 00                	push   0x0
c001ae3e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ae45:	50                   	push   eax
c001ae46:	e8 39 58 fe ff       	call   c0000684 <memset>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	83 ec 08             	sub    esp,0x8
c001ae51:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ae58:	50                   	push   eax
c001ae59:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ae60:	50                   	push   eax
c001ae61:	e8 1a 5a fe ff       	call   c0000880 <strcat>
c001ae66:	83 c4 10             	add    esp,0x10
c001ae69:	83 ec 08             	sub    esp,0x8
c001ae6c:	68 8e 5a 02 c0       	push   0xc0025a8e
c001ae71:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ae78:	50                   	push   eax
c001ae79:	e8 02 5a fe ff       	call   c0000880 <strcat>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	83 ec 04             	sub    esp,0x4
c001ae84:	6a 01                	push   0x1
c001ae86:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001ae8d:	50                   	push   eax
c001ae8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ae92:	50                   	push   eax
c001ae93:	e8 f3 9f fe ff       	call   c0004e8b <f_open>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aea2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aea9:	85 c0                	test   eax,eax
c001aeab:	74 0b                	je     c001aeb8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aead:	78 31                	js     c001aee0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aeaf:	83 e8 04             	sub    eax,0x4
c001aeb2:	83 f8 01             	cmp    eax,0x1
c001aeb5:	77 29                	ja     c001aee0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aeb7:	90                   	nop
c001aeb8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aec7:	50                   	push   eax
c001aec8:	e8 10 ab fe ff       	call   c00059dd <f_close>
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	90                   	nop
c001aed1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aed9:	74 41                	je     c001af1c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aedb:	eb 33                	jmp    c001af10 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aedd:	8d 76 00             	lea    esi,[esi+0x0]
c001aee0:	83 ec 0c             	sub    esp,0xc
c001aee3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aeea:	e8 f4 ea fe ff       	call   c00099e3 <rfree>
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	83 ec 04             	sub    esp,0x4
c001aef5:	6a 00                	push   0x0
c001aef7:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aefe:	50                   	push   eax
c001aeff:	6a 00                	push   0x0
c001af01:	e8 23 9f fe ff       	call   c0004e29 <f_mount>
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	b0 00                	mov    al,0x0
c001af0b:	eb 17                	jmp    c001af24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001af0d:	8d 76 00             	lea    esi,[esi+0x0]
c001af10:	a1 60 8a 02 c0       	mov    eax,ds:0xc0028a60
c001af15:	40                   	inc    eax
c001af16:	a3 60 8a 02 c0       	mov    ds:0xc0028a60,eax
c001af1b:	90                   	nop
c001af1c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001af23:	90                   	nop
c001af24:	81 c4 6c 03 00 00    	add    esp,0x36c
c001af2a:	c3                   	ret    
c001af2b:	90                   	nop

c001af2c <FAT::allocateSwapfile(char const*, int)>:
c001af2c:	55                   	push   ebp
c001af2d:	57                   	push   edi
c001af2e:	56                   	push   esi
c001af2f:	53                   	push   ebx
c001af30:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001af36:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001af4b:	e8 73 ea fe ff       	call   c00099c3 <malloc>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	89 c7                	mov    edi,eax
c001af55:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c001af5a:	83 ec 04             	sub    esp,0x4
c001af5d:	50                   	push   eax
c001af5e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001af65:	57                   	push   edi
c001af66:	e8 43 22 ff ff       	call   c000d1ae <File::File(char const*, Process*)>
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001af75:	83 ec 04             	sub    esp,0x4
c001af78:	8d 44 24 13          	lea    eax,[esp+0x13]
c001af7c:	50                   	push   eax
c001af7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af81:	50                   	push   eax
c001af82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001af89:	e8 30 25 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c001af8e:	83 c4 10             	add    esp,0x10
c001af91:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001af98:	c1 e0 14             	shl    eax,0x14
c001af9b:	89 c7                	mov    edi,eax
c001af9d:	89 c5                	mov    ebp,eax
c001af9f:	c1 fd 1f             	sar    ebp,0x1f
c001afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afaa:	89 f9                	mov    ecx,edi
c001afac:	31 c1                	xor    ecx,eax
c001afae:	89 cb                	mov    ebx,ecx
c001afb0:	89 e9                	mov    ecx,ebp
c001afb2:	31 d1                	xor    ecx,edx
c001afb4:	89 ce                	mov    esi,ecx
c001afb6:	89 f0                	mov    eax,esi
c001afb8:	09 d8                	or     eax,ebx
c001afba:	0f 84 98 00 00 00    	je     c001b058 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001afc0:	83 ec 0c             	sub    esp,0xc
c001afc3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001afca:	e8 bb 23 ff ff       	call   c000d38a <File::unlink()>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	83 ec 08             	sub    esp,0x8
c001afd5:	6a 12                	push   0x12
c001afd7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001afde:	e8 2f 22 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001afed:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aff3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001affa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b001:	c1 e0 14             	shl    eax,0x14
c001b004:	99                   	cdq    
c001b005:	6a 01                	push   0x1
c001b007:	52                   	push   edx
c001b008:	50                   	push   eax
c001b009:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b010:	e8 78 c0 fe ff       	call   c000708d <f_expand>
c001b015:	83 c4 10             	add    esp,0x10
c001b018:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b01f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b021:	83 c0 10             	add    eax,0x10
c001b024:	8b 00                	mov    eax,DWORD PTR [eax]
c001b026:	83 ec 0c             	sub    esp,0xc
c001b029:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b02d:	52                   	push   edx
c001b02e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b032:	52                   	push   edx
c001b033:	6a 00                	push   0x0
c001b035:	68 00 04 00 00       	push   0x400
c001b03a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b041:	ff d0                	call   eax
c001b043:	83 c4 20             	add    esp,0x20
c001b046:	83 ec 0c             	sub    esp,0xc
c001b049:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b050:	e8 1b 22 ff ff       	call   c000d270 <File::close()>
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	83 ec 08             	sub    esp,0x8
c001b05b:	6a 01                	push   0x1
c001b05d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b064:	e8 a9 21 ff ff       	call   c000d212 <File::open(FileOpenMode)>
c001b069:	83 c4 10             	add    esp,0x10
c001b06c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b073:	8b 00                	mov    eax,DWORD PTR [eax]
c001b075:	83 c0 0c             	add    eax,0xc
c001b078:	8b 00                	mov    eax,DWORD PTR [eax]
c001b07a:	83 ec 0c             	sub    esp,0xc
c001b07d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b081:	52                   	push   edx
c001b082:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b086:	52                   	push   edx
c001b087:	6a 00                	push   0x0
c001b089:	6a 04                	push   0x4
c001b08b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b092:	ff d0                	call   eax
c001b094:	83 c4 20             	add    esp,0x20
c001b097:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b09e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b0a4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b0ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b0b2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b0b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b0b8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b0c9:	e8 a2 21 ff ff       	call   c000d270 <File::close()>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b0d8:	ba 00 00 00 00       	mov    edx,0x0
c001b0dd:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b0e3:	5b                   	pop    ebx
c001b0e4:	5e                   	pop    esi
c001b0e5:	5f                   	pop    edi
c001b0e6:	5d                   	pop    ebp
c001b0e7:	c3                   	ret    

c001b0e8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b0e8:	57                   	push   edi
c001b0e9:	56                   	push   esi
c001b0ea:	53                   	push   ebx
c001b0eb:	81 ec 50 02 00 00    	sub    esp,0x250
c001b0f1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b0f9:	74 0d                	je     c001b108 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b0fb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b103:	75 0f                	jne    c001b114 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	b8 04 00 00 00       	mov    eax,0x4
c001b10d:	e9 36 01 00 00       	jmp    c001b248 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b112:	66 90                	xchg   ax,ax
c001b114:	83 ec 08             	sub    esp,0x8
c001b117:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b11e:	50                   	push   eax
c001b11f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b126:	e8 bc ae fe ff       	call   c0005fe7 <f_readdir>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b135:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b13c:	83 ec 0c             	sub    esp,0xc
c001b13f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b146:	83 c0 1a             	add    eax,0x1a
c001b149:	50                   	push   eax
c001b14a:	e8 51 55 fe ff       	call   c00006a0 <strlen>
c001b14f:	83 c4 10             	add    esp,0x10
c001b152:	ba 00 00 00 00       	mov    edx,0x0
c001b157:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b15b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b15f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b166:	0f b6 c0             	movzx  eax,al
c001b169:	83 e0 10             	and    eax,0x10
c001b16c:	74 0a                	je     c001b178 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b16e:	b8 02 00 00 00       	mov    eax,0x2
c001b173:	eb 0b                	jmp    c001b180 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b175:	8d 76 00             	lea    esi,[esi+0x0]
c001b178:	b8 01 00 00 00       	mov    eax,0x1
c001b17d:	8d 76 00             	lea    esi,[esi+0x0]
c001b180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b184:	83 ec 08             	sub    esp,0x8
c001b187:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b18e:	83 c0 1a             	add    eax,0x1a
c001b191:	50                   	push   eax
c001b192:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b196:	83 c0 10             	add    eax,0x10
c001b199:	50                   	push   eax
c001b19a:	e8 a1 55 fe ff       	call   c0000740 <strcpy>
c001b19f:	83 c4 10             	add    esp,0x10
c001b1a2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b1a9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b1b0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b1b4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b1bb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b1c2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b1c9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b1d0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b1d7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b1de:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b1e5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b1ec:	89 c6                	mov    esi,eax
c001b1ee:	89 d7                	mov    edi,edx
c001b1f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f2:	89 c8                	mov    eax,ecx
c001b1f4:	89 fa                	mov    edx,edi
c001b1f6:	89 f3                	mov    ebx,esi
c001b1f8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b1ff:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b206:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b20d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b214:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b21a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b221:	84 c0                	test   al,al
c001b223:	75 07                	jne    c001b22c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b225:	b8 07 00 00 00       	mov    eax,0x7
c001b22a:	eb 1c                	jmp    c001b248 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b22c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b233:	85 c0                	test   eax,eax
c001b235:	75 09                	jne    c001b240 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b237:	b8 00 00 00 00       	mov    eax,0x0
c001b23c:	eb 0a                	jmp    c001b248 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b23e:	66 90                	xchg   ax,ax
c001b240:	b8 01 00 00 00       	mov    eax,0x1
c001b245:	8d 76 00             	lea    esi,[esi+0x0]
c001b248:	81 c4 50 02 00 00    	add    esp,0x250
c001b24e:	5b                   	pop    ebx
c001b24f:	5e                   	pop    esi
c001b250:	5f                   	pop    edi
c001b251:	c3                   	ret    
c001b252:	66 90                	xchg   ax,ax

c001b254 <FAT::read(void*, unsigned long, void*, int*)>:
c001b254:	83 ec 1c             	sub    esp,0x1c
c001b257:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b25c:	74 0a                	je     c001b268 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b25e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b263:	75 0b                	jne    c001b270 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b265:	8d 76 00             	lea    esi,[esi+0x0]
c001b268:	b8 04 00 00 00       	mov    eax,0x4
c001b26d:	eb 41                	jmp    c001b2b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b26f:	90                   	nop
c001b270:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b274:	50                   	push   eax
c001b275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b279:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b27d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b281:	e8 41 a0 fe ff       	call   c00052c7 <f_read>
c001b286:	83 c4 10             	add    esp,0x10
c001b289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b28d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b291:	89 c2                	mov    edx,eax
c001b293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b297:	89 10                	mov    DWORD PTR [eax],edx
c001b299:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b29d:	85 c0                	test   eax,eax
c001b29f:	75 07                	jne    c001b2a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b2a1:	b8 00 00 00 00       	mov    eax,0x0
c001b2a6:	eb 08                	jmp    c001b2b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b2a8:	b8 01 00 00 00       	mov    eax,0x1
c001b2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b0:	83 c4 1c             	add    esp,0x1c
c001b2b3:	c3                   	ret    

c001b2b4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b2b4:	83 ec 1c             	sub    esp,0x1c
c001b2b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b2bc:	74 0a                	je     c001b2c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b2be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b2c3:	75 0b                	jne    c001b2d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2c8:	b8 04 00 00 00       	mov    eax,0x4
c001b2cd:	eb 41                	jmp    c001b310 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b2cf:	90                   	nop
c001b2d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2d4:	50                   	push   eax
c001b2d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b2dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b2e1:	e8 61 a2 fe ff       	call   c0005547 <f_write>
c001b2e6:	83 c4 10             	add    esp,0x10
c001b2e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2f1:	89 c2                	mov    edx,eax
c001b2f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b2f7:	89 10                	mov    DWORD PTR [eax],edx
c001b2f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2fd:	85 c0                	test   eax,eax
c001b2ff:	75 07                	jne    c001b308 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b301:	b8 00 00 00 00       	mov    eax,0x0
c001b306:	eb 08                	jmp    c001b310 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b308:	b8 01 00 00 00       	mov    eax,0x1
c001b30d:	8d 76 00             	lea    esi,[esi+0x0]
c001b310:	83 c4 1c             	add    esp,0x1c
c001b313:	c3                   	ret    

c001b314 <FAT::close(void*)>:
c001b314:	83 ec 1c             	sub    esp,0x1c
c001b317:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b31c:	75 0a                	jne    c001b328 <FAT::close(void*)+0x14>
c001b31e:	b8 04 00 00 00       	mov    eax,0x4
c001b323:	eb 3f                	jmp    c001b364 <FAT::close(void*)+0x50>
c001b325:	8d 76 00             	lea    esi,[esi+0x0]
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b32f:	e8 a9 a6 fe ff       	call   c00059dd <f_close>
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b342:	e8 8c e6 fe ff       	call   c00099d3 <free>
c001b347:	83 c4 10             	add    esp,0x10
c001b34a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34e:	85 c0                	test   eax,eax
c001b350:	75 0a                	jne    c001b35c <FAT::close(void*)+0x48>
c001b352:	b8 00 00 00 00       	mov    eax,0x0
c001b357:	eb 0b                	jmp    c001b364 <FAT::close(void*)+0x50>
c001b359:	8d 76 00             	lea    esi,[esi+0x0]
c001b35c:	b8 01 00 00 00       	mov    eax,0x1
c001b361:	8d 76 00             	lea    esi,[esi+0x0]
c001b364:	83 c4 1c             	add    esp,0x1c
c001b367:	c3                   	ret    

c001b368 <FAT::closeDir(void*)>:
c001b368:	83 ec 1c             	sub    esp,0x1c
c001b36b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b370:	75 0a                	jne    c001b37c <FAT::closeDir(void*)+0x14>
c001b372:	b8 04 00 00 00       	mov    eax,0x4
c001b377:	eb 3f                	jmp    c001b3b8 <FAT::closeDir(void*)+0x50>
c001b379:	8d 76 00             	lea    esi,[esi+0x0]
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b383:	e8 3d ac fe ff       	call   c0005fc5 <f_closedir>
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b38f:	83 ec 0c             	sub    esp,0xc
c001b392:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b396:	e8 38 e6 fe ff       	call   c00099d3 <free>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3a2:	85 c0                	test   eax,eax
c001b3a4:	75 0a                	jne    c001b3b0 <FAT::closeDir(void*)+0x48>
c001b3a6:	b8 00 00 00 00       	mov    eax,0x0
c001b3ab:	eb 0b                	jmp    c001b3b8 <FAT::closeDir(void*)+0x50>
c001b3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b3b0:	b8 01 00 00 00       	mov    eax,0x1
c001b3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3b8:	83 c4 1c             	add    esp,0x1c
c001b3bb:	c3                   	ret    

c001b3bc <FAT::seek(void*, unsigned long long)>:
c001b3bc:	83 ec 2c             	sub    esp,0x2c
c001b3bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b3cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b3d4:	75 0a                	jne    c001b3e0 <FAT::seek(void*, unsigned long long)+0x24>
c001b3d6:	b8 04 00 00 00       	mov    eax,0x4
c001b3db:	eb 37                	jmp    c001b414 <FAT::seek(void*, unsigned long long)+0x58>
c001b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e0:	83 ec 04             	sub    esp,0x4
c001b3e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b3e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b3eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b3ef:	e8 18 a6 fe ff       	call   c0005a0c <f_lseek>
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b3fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3ff:	85 c0                	test   eax,eax
c001b401:	75 09                	jne    c001b40c <FAT::seek(void*, unsigned long long)+0x50>
c001b403:	b8 00 00 00 00       	mov    eax,0x0
c001b408:	eb 0a                	jmp    c001b414 <FAT::seek(void*, unsigned long long)+0x58>
c001b40a:	66 90                	xchg   ax,ax
c001b40c:	b8 01 00 00 00       	mov    eax,0x1
c001b411:	8d 76 00             	lea    esi,[esi+0x0]
c001b414:	83 c4 2c             	add    esp,0x2c
c001b417:	c3                   	ret    

c001b418 <fatWrapperReadDisk>:
c001b418:	83 ec 1c             	sub    esp,0x1c
c001b41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b423:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b427:	89 04 24             	mov    DWORD PTR [esp],eax
c001b42a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b42e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b432:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b437:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b43e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b449:	52                   	push   edx
c001b44a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b452:	50                   	push   eax
c001b453:	e8 08 4f ff ff       	call   c0010360 <LogicalDisk::read(unsigned long long, int, void*)>
c001b458:	83 c4 20             	add    esp,0x20
c001b45b:	83 c4 1c             	add    esp,0x1c
c001b45e:	c3                   	ret    
c001b45f:	90                   	nop

c001b460 <fatWrapperWriteDisk>:
c001b460:	83 ec 1c             	sub    esp,0x1c
c001b463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b467:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b46b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b46f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b472:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b47a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b47f:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b486:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b48a:	83 ec 0c             	sub    esp,0xc
c001b48d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b491:	52                   	push   edx
c001b492:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b49a:	50                   	push   eax
c001b49b:	e8 2c 4f ff ff       	call   c00103cc <LogicalDisk::write(unsigned long long, int, void*)>
c001b4a0:	83 c4 20             	add    esp,0x20
c001b4a3:	83 c4 1c             	add    esp,0x1c
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <fatWrapperIoctl>:
c001b4a8:	53                   	push   ebx
c001b4a9:	83 ec 28             	sub    esp,0x28
c001b4ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b4b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b4b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b4bc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b4c1:	75 31                	jne    c001b4f4 <fatWrapperIoctl+0x4c>
c001b4c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b4c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4d0:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b4d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b4dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b4e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4e7:	66 89 02             	mov    WORD PTR [edx],ax
c001b4ea:	b8 00 00 00 00       	mov    eax,0x0
c001b4ef:	e9 bc 00 00 00       	jmp    c001b5b0 <fatWrapperIoctl+0x108>
c001b4f4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b4f9:	75 6d                	jne    c001b568 <fatWrapperIoctl+0xc0>
c001b4fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b503:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b508:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b50f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b515:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b51b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b521:	89 c8                	mov    eax,ecx
c001b523:	89 da                	mov    edx,ebx
c001b525:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b529:	c1 e0 0a             	shl    eax,0xa
c001b52c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b531:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c001b538:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b53e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b544:	89 cb                	mov    ebx,ecx
c001b546:	c1 fb 1f             	sar    ebx,0x1f
c001b549:	53                   	push   ebx
c001b54a:	51                   	push   ecx
c001b54b:	52                   	push   edx
c001b54c:	50                   	push   eax
c001b54d:	e8 f2 69 00 00       	call   c0021f44 <__udivdi3>
c001b552:	83 c4 10             	add    esp,0x10
c001b555:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b559:	89 01                	mov    DWORD PTR [ecx],eax
c001b55b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b55e:	b8 00 00 00 00       	mov    eax,0x0
c001b563:	eb 4b                	jmp    c001b5b0 <fatWrapperIoctl+0x108>
c001b565:	8d 76 00             	lea    esi,[esi+0x0]
c001b568:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b56d:	75 09                	jne    c001b578 <fatWrapperIoctl+0xd0>
c001b56f:	b8 00 00 00 00       	mov    eax,0x0
c001b574:	eb 3a                	jmp    c001b5b0 <fatWrapperIoctl+0x108>
c001b576:	66 90                	xchg   ax,ax
c001b578:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b57d:	75 19                	jne    c001b598 <fatWrapperIoctl+0xf0>
c001b57f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b583:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b587:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b58b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b591:	b8 00 00 00 00       	mov    eax,0x0
c001b596:	eb 18                	jmp    c001b5b0 <fatWrapperIoctl+0x108>
c001b598:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b59d:	75 09                	jne    c001b5a8 <fatWrapperIoctl+0x100>
c001b59f:	b8 00 00 00 00       	mov    eax,0x0
c001b5a4:	eb 0a                	jmp    c001b5b0 <fatWrapperIoctl+0x108>
c001b5a6:	66 90                	xchg   ax,ax
c001b5a8:	b8 04 00 00 00       	mov    eax,0x4
c001b5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b0:	83 c4 28             	add    esp,0x28
c001b5b3:	5b                   	pop    ebx
c001b5b4:	c3                   	ret    
c001b5b5:	90                   	nop
c001b5b6:	66 90                	xchg   ax,ax

c001b5b8 <FAT::FAT()>:
c001b5b8:	83 ec 1c             	sub    esp,0x1c
c001b5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5bf:	83 ec 0c             	sub    esp,0xc
c001b5c2:	50                   	push   eax
c001b5c3:	e8 92 19 ff ff       	call   c000cf5a <Filesystem::Filesystem()>
c001b5c8:	83 c4 10             	add    esp,0x10
c001b5cb:	ba a4 5a 02 c0       	mov    edx,0xc0025aa4
c001b5d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5d4:	89 10                	mov    DWORD PTR [eax],edx
c001b5d6:	c7 05 60 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a60,0x0
c001b5e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5e8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b5ed:	7f 15                	jg     c001b604 <FAT::FAT()+0x4c>
c001b5ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5f3:	c7 04 85 80 8a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7580],0xffffffff
c001b5fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b602:	eb e4                	jmp    c001b5e8 <FAT::FAT()+0x30>
c001b604:	90                   	nop
c001b605:	83 c4 1c             	add    esp,0x1c
c001b608:	c3                   	ret    
c001b609:	90                   	nop
c001b60a:	66 90                	xchg   ax,ax

c001b60c <FAT::fixFilepath(char*)>:
c001b60c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b610:	8a 00                	mov    al,BYTE PTR [eax]
c001b612:	3c 40                	cmp    al,0x40
c001b614:	7e 2e                	jle    c001b644 <FAT::fixFilepath(char*)+0x38>
c001b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b61a:	8a 00                	mov    al,BYTE PTR [eax]
c001b61c:	83 e8 41             	sub    eax,0x41
c001b61f:	88 c2                	mov    dl,al
c001b621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b625:	88 10                	mov    BYTE PTR [eax],dl
c001b627:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b62b:	8a 00                	mov    al,BYTE PTR [eax]
c001b62d:	0f be c0             	movsx  eax,al
c001b630:	8b 04 85 80 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7580]
c001b637:	83 c0 30             	add    eax,0x30
c001b63a:	88 c2                	mov    dl,al
c001b63c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b640:	88 10                	mov    BYTE PTR [eax],dl
c001b642:	66 90                	xchg   ax,ax
c001b644:	90                   	nop
c001b645:	c3                   	ret    
c001b646:	66 90                	xchg   ax,ax

c001b648 <FAT::open(char const*, void**, FileOpenMode)>:
c001b648:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b64e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b656:	74 0c                	je     c001b664 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b658:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b660:	75 0e                	jne    c001b670 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b662:	66 90                	xchg   ax,ax
c001b664:	b8 04 00 00 00       	mov    eax,0x4
c001b669:	e9 06 01 00 00       	jmp    c001b774 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b66e:	66 90                	xchg   ax,ax
c001b670:	83 ec 08             	sub    esp,0x8
c001b673:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b67a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b67e:	50                   	push   eax
c001b67f:	e8 bc 50 fe ff       	call   c0000740 <strcpy>
c001b684:	83 c4 10             	add    esp,0x10
c001b687:	83 ec 08             	sub    esp,0x8
c001b68a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b68e:	50                   	push   eax
c001b68f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b696:	e8 71 ff ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b6a6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b6ad:	83 e0 01             	and    eax,0x1
c001b6b0:	74 0a                	je     c001b6bc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b6b2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b6ba:	66 90                	xchg   ax,ax
c001b6bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b6c3:	83 e0 04             	and    eax,0x4
c001b6c6:	74 10                	je     c001b6d8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b6c8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b6d0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b6d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b6df:	83 e0 02             	and    eax,0x2
c001b6e2:	74 08                	je     c001b6ec <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b6e4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b6ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b6f3:	83 e0 08             	and    eax,0x8
c001b6f6:	74 08                	je     c001b700 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b6f8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b700:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b707:	83 e0 10             	and    eax,0x10
c001b70a:	74 08                	je     c001b714 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b70c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	68 50 02 00 00       	push   0x250
c001b71c:	e8 a2 e2 fe ff       	call   c00099c3 <malloc>
c001b721:	83 c4 10             	add    esp,0x10
c001b724:	89 c2                	mov    edx,eax
c001b726:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b72d:	89 10                	mov    DWORD PTR [eax],edx
c001b72f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b737:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b73e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b740:	83 ec 04             	sub    esp,0x4
c001b743:	52                   	push   edx
c001b744:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b748:	52                   	push   edx
c001b749:	50                   	push   eax
c001b74a:	e8 3c 97 fe ff       	call   c0004e8b <f_open>
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b759:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b761:	74 09                	je     c001b76c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b763:	b8 01 00 00 00       	mov    eax,0x1
c001b768:	eb 0a                	jmp    c001b774 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b76a:	66 90                	xchg   ax,ax
c001b76c:	b8 00 00 00 00       	mov    eax,0x0
c001b771:	8d 76 00             	lea    esi,[esi+0x0]
c001b774:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b77a:	c3                   	ret    
c001b77b:	90                   	nop

c001b77c <FAT::openDir(char const*, void**)>:
c001b77c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b782:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b78a:	74 0c                	je     c001b798 <FAT::openDir(char const*, void**)+0x1c>
c001b78c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b794:	75 0e                	jne    c001b7a4 <FAT::openDir(char const*, void**)+0x28>
c001b796:	66 90                	xchg   ax,ax
c001b798:	b8 04 00 00 00       	mov    eax,0x4
c001b79d:	e9 82 00 00 00       	jmp    c001b824 <FAT::openDir(char const*, void**)+0xa8>
c001b7a2:	66 90                	xchg   ax,ax
c001b7a4:	83 ec 08             	sub    esp,0x8
c001b7a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7b2:	50                   	push   eax
c001b7b3:	e8 88 4f fe ff       	call   c0000740 <strcpy>
c001b7b8:	83 c4 10             	add    esp,0x10
c001b7bb:	83 ec 08             	sub    esp,0x8
c001b7be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7c2:	50                   	push   eax
c001b7c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ca:	e8 3d fe ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001b7cf:	83 c4 10             	add    esp,0x10
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	6a 4c                	push   0x4c
c001b7d7:	e8 e7 e1 fe ff       	call   c00099c3 <malloc>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	89 c2                	mov    edx,eax
c001b7e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b7e8:	89 10                	mov    DWORD PTR [eax],edx
c001b7ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b7f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7f3:	83 ec 08             	sub    esp,0x8
c001b7f6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b7fa:	52                   	push   edx
c001b7fb:	50                   	push   eax
c001b7fc:	e8 c2 a6 fe ff       	call   c0005ec3 <f_opendir>
c001b801:	83 c4 10             	add    esp,0x10
c001b804:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b80b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b813:	74 07                	je     c001b81c <FAT::openDir(char const*, void**)+0xa0>
c001b815:	b8 01 00 00 00       	mov    eax,0x1
c001b81a:	eb 08                	jmp    c001b824 <FAT::openDir(char const*, void**)+0xa8>
c001b81c:	b8 00 00 00 00       	mov    eax,0x0
c001b821:	8d 76 00             	lea    esi,[esi+0x0]
c001b824:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b82a:	c3                   	ret    
c001b82b:	90                   	nop

c001b82c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b82c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b832:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b83a:	75 0c                	jne    c001b848 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b83c:	b8 04 00 00 00       	mov    eax,0x4
c001b841:	e9 d2 00 00 00       	jmp    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b846:	66 90                	xchg   ax,ax
c001b848:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b850:	75 0a                	jne    c001b85c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b852:	b8 04 00 00 00       	mov    eax,0x4
c001b857:	e9 bc 00 00 00       	jmp    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b85c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b864:	75 0a                	jne    c001b870 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b866:	b8 04 00 00 00       	mov    eax,0x4
c001b86b:	e9 a8 00 00 00       	jmp    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b87a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b881:	50                   	push   eax
c001b882:	e8 b9 4e fe ff       	call   c0000740 <strcpy>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	83 ec 08             	sub    esp,0x8
c001b88d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b894:	50                   	push   eax
c001b895:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b89c:	e8 6b fd ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001b8a1:	83 c4 10             	add    esp,0x10
c001b8a4:	83 ec 08             	sub    esp,0x8
c001b8a7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8ab:	50                   	push   eax
c001b8ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b8b3:	50                   	push   eax
c001b8b4:	e8 c9 a7 fe ff       	call   c0006082 <f_stat>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b8c3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b8ca:	85 c0                	test   eax,eax
c001b8cc:	74 0a                	je     c001b8d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b8ce:	83 f8 04             	cmp    eax,0x4
c001b8d1:	74 35                	je     c001b908 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b8d3:	eb 3b                	jmp    c001b910 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8dc:	0f b6 c0             	movzx  eax,al
c001b8df:	83 e0 10             	and    eax,0x10
c001b8e2:	0f 95 c2             	setne  dl
c001b8e5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b8ec:	88 10                	mov    BYTE PTR [eax],dl
c001b8ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b8f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8f5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b8fc:	89 01                	mov    DWORD PTR [ecx],eax
c001b8fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b901:	b8 00 00 00 00       	mov    eax,0x0
c001b906:	eb 10                	jmp    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b908:	b8 02 00 00 00       	mov    eax,0x2
c001b90d:	eb 09                	jmp    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b90f:	90                   	nop
c001b910:	b8 01 00 00 00       	mov    eax,0x1
c001b915:	8d 76 00             	lea    esi,[esi+0x0]
c001b918:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b91e:	c3                   	ret    
c001b91f:	90                   	nop

c001b920 <FAT::unlink(char const*)>:
c001b920:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b926:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b92e:	75 08                	jne    c001b938 <FAT::unlink(char const*)+0x18>
c001b930:	b8 04 00 00 00       	mov    eax,0x4
c001b935:	eb 61                	jmp    c001b998 <FAT::unlink(char const*)+0x78>
c001b937:	90                   	nop
c001b938:	83 ec 08             	sub    esp,0x8
c001b93b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b942:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b946:	50                   	push   eax
c001b947:	e8 f4 4d fe ff       	call   c0000740 <strcpy>
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	83 ec 08             	sub    esp,0x8
c001b952:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b956:	50                   	push   eax
c001b957:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b95e:	e8 a9 fc ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	83 ec 0c             	sub    esp,0xc
c001b969:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b96d:	50                   	push   eax
c001b96e:	e8 61 aa fe ff       	call   c00063d4 <f_unlink>
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b97d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b984:	85 c0                	test   eax,eax
c001b986:	75 08                	jne    c001b990 <FAT::unlink(char const*)+0x70>
c001b988:	b8 00 00 00 00       	mov    eax,0x0
c001b98d:	eb 09                	jmp    c001b998 <FAT::unlink(char const*)+0x78>
c001b98f:	90                   	nop
c001b990:	b8 01 00 00 00       	mov    eax,0x1
c001b995:	8d 76 00             	lea    esi,[esi+0x0]
c001b998:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b99e:	c3                   	ret    
c001b99f:	90                   	nop

c001b9a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b9a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b9a6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b9ad:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b9b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b9b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b9bc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b9c4:	75 0a                	jne    c001b9d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b9c6:	b8 04 00 00 00       	mov    eax,0x4
c001b9cb:	e9 30 01 00 00       	jmp    c001bb00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b9d0:	83 ec 08             	sub    esp,0x8
c001b9d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b9da:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b9de:	50                   	push   eax
c001b9df:	e8 5c 4d fe ff       	call   c0000740 <strcpy>
c001b9e4:	83 c4 10             	add    esp,0x10
c001b9e7:	83 ec 08             	sub    esp,0x8
c001b9ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b9ee:	50                   	push   eax
c001b9ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b9f6:	e8 11 fc ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001b9fb:	83 c4 10             	add    esp,0x10
c001b9fe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ba06:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ba0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba13:	83 e0 01             	and    eax,0x1
c001ba16:	74 08                	je     c001ba20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ba18:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ba20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba25:	83 e0 02             	and    eax,0x2
c001ba28:	74 0a                	je     c001ba34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001ba2a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ba32:	66 90                	xchg   ax,ax
c001ba34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba39:	83 e0 04             	and    eax,0x4
c001ba3c:	74 0a                	je     c001ba48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001ba3e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ba46:	66 90                	xchg   ax,ax
c001ba48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba4d:	83 e0 08             	and    eax,0x8
c001ba50:	74 0a                	je     c001ba5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001ba52:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ba5a:	66 90                	xchg   ax,ax
c001ba5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba61:	83 e0 01             	and    eax,0x1
c001ba64:	74 0a                	je     c001ba70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001ba66:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ba6e:	66 90                	xchg   ax,ax
c001ba70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba75:	83 e0 02             	and    eax,0x2
c001ba78:	74 0a                	je     c001ba84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001ba7a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ba82:	66 90                	xchg   ax,ax
c001ba84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba89:	83 e0 04             	and    eax,0x4
c001ba8c:	74 0a                	je     c001ba98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001ba8e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ba96:	66 90                	xchg   ax,ax
c001ba98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba9d:	83 e0 08             	and    eax,0x8
c001baa0:	74 0a                	je     c001baac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001baa2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001baaa:	66 90                	xchg   ax,ax
c001baac:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bab3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001baba:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bac2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001baca:	83 ec 04             	sub    esp,0x4
c001bacd:	52                   	push   edx
c001bace:	50                   	push   eax
c001bacf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bad3:	50                   	push   eax
c001bad4:	e8 9d af fe ff       	call   c0006a76 <f_chmod>
c001bad9:	83 c4 10             	add    esp,0x10
c001badc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bae3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001baea:	85 c0                	test   eax,eax
c001baec:	75 0a                	jne    c001baf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001baee:	b8 00 00 00 00       	mov    eax,0x0
c001baf3:	eb 0b                	jmp    c001bb00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001baf5:	8d 76 00             	lea    esi,[esi+0x0]
c001baf8:	b8 01 00 00 00       	mov    eax,0x1
c001bafd:	8d 76 00             	lea    esi,[esi+0x0]
c001bb00:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bb06:	c3                   	ret    
c001bb07:	90                   	nop

c001bb08 <FAT::rename(char const*, char const*)>:
c001bb08:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bb0e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bb16:	74 0c                	je     c001bb24 <FAT::rename(char const*, char const*)+0x1c>
c001bb18:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bb20:	75 0e                	jne    c001bb30 <FAT::rename(char const*, char const*)+0x28>
c001bb22:	66 90                	xchg   ax,ax
c001bb24:	b8 04 00 00 00       	mov    eax,0x4
c001bb29:	e9 9e 00 00 00       	jmp    c001bbcc <FAT::rename(char const*, char const*)+0xc4>
c001bb2e:	66 90                	xchg   ax,ax
c001bb30:	83 ec 08             	sub    esp,0x8
c001bb33:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bb3a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bb41:	50                   	push   eax
c001bb42:	e8 f9 4b fe ff       	call   c0000740 <strcpy>
c001bb47:	83 c4 10             	add    esp,0x10
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bb54:	50                   	push   eax
c001bb55:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bb5c:	e8 ab fa ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	83 ec 08             	sub    esp,0x8
c001bb67:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bb6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb72:	50                   	push   eax
c001bb73:	e8 c8 4b fe ff       	call   c0000740 <strcpy>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	83 ec 08             	sub    esp,0x8
c001bb7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb82:	50                   	push   eax
c001bb83:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bb8a:	e8 7d fa ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	83 ec 08             	sub    esp,0x8
c001bb95:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb99:	50                   	push   eax
c001bb9a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bba1:	50                   	push   eax
c001bba2:	e8 dc ab fe ff       	call   c0006783 <f_rename>
c001bba7:	83 c4 10             	add    esp,0x10
c001bbaa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bbb1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bbb8:	85 c0                	test   eax,eax
c001bbba:	75 08                	jne    c001bbc4 <FAT::rename(char const*, char const*)+0xbc>
c001bbbc:	b8 00 00 00 00       	mov    eax,0x0
c001bbc1:	eb 09                	jmp    c001bbcc <FAT::rename(char const*, char const*)+0xc4>
c001bbc3:	90                   	nop
c001bbc4:	b8 01 00 00 00       	mov    eax,0x1
c001bbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbcc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bbd2:	c3                   	ret    
c001bbd3:	90                   	nop

c001bbd4 <FAT::mkdir(char const*)>:
c001bbd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bbda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bbe2:	75 08                	jne    c001bbec <FAT::mkdir(char const*)+0x18>
c001bbe4:	b8 04 00 00 00       	mov    eax,0x4
c001bbe9:	eb 61                	jmp    c001bc4c <FAT::mkdir(char const*)+0x78>
c001bbeb:	90                   	nop
c001bbec:	83 ec 08             	sub    esp,0x8
c001bbef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbf6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbfa:	50                   	push   eax
c001bbfb:	e8 40 4b fe ff       	call   c0000740 <strcpy>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	83 ec 08             	sub    esp,0x8
c001bc06:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc0a:	50                   	push   eax
c001bc0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc12:	e8 f5 f9 ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	83 ec 0c             	sub    esp,0xc
c001bc1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc21:	50                   	push   eax
c001bc22:	e8 30 a9 fe ff       	call   c0006557 <f_mkdir>
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc31:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bc38:	85 c0                	test   eax,eax
c001bc3a:	75 08                	jne    c001bc44 <FAT::mkdir(char const*)+0x70>
c001bc3c:	b8 00 00 00 00       	mov    eax,0x0
c001bc41:	eb 09                	jmp    c001bc4c <FAT::mkdir(char const*)+0x78>
c001bc43:	90                   	nop
c001bc44:	b8 01 00 00 00       	mov    eax,0x1
c001bc49:	8d 76 00             	lea    esi,[esi+0x0]
c001bc4c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc52:	c3                   	ret    
c001bc53:	90                   	nop

c001bc54 <FAT::exists(char const*)>:
c001bc54:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc5a:	83 ec 08             	sub    esp,0x8
c001bc5d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bc68:	50                   	push   eax
c001bc69:	e8 d2 4a fe ff       	call   c0000740 <strcpy>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	83 ec 08             	sub    esp,0x8
c001bc74:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc78:	50                   	push   eax
c001bc79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc80:	e8 87 f9 ff ff       	call   c001b60c <FAT::fixFilepath(char*)>
c001bc85:	83 c4 10             	add    esp,0x10
c001bc88:	83 ec 08             	sub    esp,0x8
c001bc8b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bc92:	50                   	push   eax
c001bc93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bc97:	50                   	push   eax
c001bc98:	e8 e5 a3 fe ff       	call   c0006082 <f_stat>
c001bc9d:	83 c4 10             	add    esp,0x10
c001bca0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bca7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bcae:	85 c0                	test   eax,eax
c001bcb0:	75 06                	jne    c001bcb8 <FAT::exists(char const*)+0x64>
c001bcb2:	b0 01                	mov    al,0x1
c001bcb4:	eb 06                	jmp    c001bcbc <FAT::exists(char const*)+0x68>
c001bcb6:	66 90                	xchg   ax,ax
c001bcb8:	b0 00                	mov    al,0x0
c001bcba:	66 90                	xchg   ax,ax
c001bcbc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bcc2:	c3                   	ret    
c001bcc3:	90                   	nop

c001bcc4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bcc4:	b8 08 00 00 00       	mov    eax,0x8
c001bcc9:	c3                   	ret    

c001bcca <ISO9660::seek(void*, unsigned long long)>:
c001bcca:	53                   	push   ebx
c001bccb:	b8 04 00 00 00       	mov    eax,0x4
c001bcd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bcdc:	85 d2                	test   edx,edx
c001bcde:	74 17                	je     c001bcf7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bce0:	89 c8                	mov    eax,ecx
c001bce2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001bce5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001bce8:	b8 01 00 00 00       	mov    eax,0x1
c001bced:	73 08                	jae    c001bcf7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bcef:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001bcf2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bcf5:	31 c0                	xor    eax,eax
c001bcf7:	5b                   	pop    ebx
c001bcf8:	c3                   	ret    
c001bcf9:	90                   	nop

c001bcfa <ISO9660::tell(void*, unsigned long long*)>:
c001bcfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bcfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd02:	85 d2                	test   edx,edx
c001bd04:	74 12                	je     c001bd18 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bd06:	85 c0                	test   eax,eax
c001bd08:	74 0e                	je     c001bd18 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bd0a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd0d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001bd10:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bd13:	89 10                	mov    DWORD PTR [eax],edx
c001bd15:	31 c0                	xor    eax,eax
c001bd17:	c3                   	ret    
c001bd18:	b8 04 00 00 00       	mov    eax,0x4
c001bd1d:	c3                   	ret    

c001bd1e <ISO9660::getName()>:
c001bd1e:	b8 04 5b 02 c0       	mov    eax,0xc0025b04
c001bd23:	c3                   	ret    

c001bd24 <ISO9660::stat(void*, unsigned long long*)>:
c001bd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd2c:	85 d2                	test   edx,edx
c001bd2e:	74 12                	je     c001bd42 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bd30:	85 c0                	test   eax,eax
c001bd32:	74 0e                	je     c001bd42 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bd34:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001bd37:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001bd3a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bd3d:	89 10                	mov    DWORD PTR [eax],edx
c001bd3f:	31 c0                	xor    eax,eax
c001bd41:	c3                   	ret    
c001bd42:	b8 04 00 00 00       	mov    eax,0x4
c001bd47:	c3                   	ret    

c001bd48 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bd48:	b8 01 00 00 00       	mov    eax,0x1
c001bd4d:	c3                   	ret    

c001bd4e <ISO9660::unlink(char const*)>:
c001bd4e:	b8 01 00 00 00       	mov    eax,0x1
c001bd53:	c3                   	ret    

c001bd54 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001bd54:	b8 01 00 00 00       	mov    eax,0x1
c001bd59:	c3                   	ret    

c001bd5a <ISO9660::rename(char const*, char const*)>:
c001bd5a:	b8 01 00 00 00       	mov    eax,0x1
c001bd5f:	c3                   	ret    

c001bd60 <ISO9660::mkdir(char const*)>:
c001bd60:	b8 01 00 00 00       	mov    eax,0x1
c001bd65:	c3                   	ret    

c001bd66 <ISO9660::close(void*)>:
c001bd66:	83 ec 0c             	sub    esp,0xc
c001bd69:	b8 04 00 00 00       	mov    eax,0x4
c001bd6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd72:	85 d2                	test   edx,edx
c001bd74:	74 0e                	je     c001bd84 <ISO9660::close(void*)+0x1e>
c001bd76:	83 ec 0c             	sub    esp,0xc
c001bd79:	52                   	push   edx
c001bd7a:	e8 54 dc fe ff       	call   c00099d3 <free>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	31 c0                	xor    eax,eax
c001bd84:	83 c4 0c             	add    esp,0xc
c001bd87:	c3                   	ret    

c001bd88 <ISO9660::closeDir(void*)>:
c001bd88:	83 ec 0c             	sub    esp,0xc
c001bd8b:	b8 04 00 00 00       	mov    eax,0x4
c001bd90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd94:	85 d2                	test   edx,edx
c001bd96:	74 0e                	je     c001bda6 <ISO9660::closeDir(void*)+0x1e>
c001bd98:	83 ec 0c             	sub    esp,0xc
c001bd9b:	52                   	push   edx
c001bd9c:	e8 32 dc fe ff       	call   c00099d3 <free>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	31 c0                	xor    eax,eax
c001bda6:	83 c4 0c             	add    esp,0xc
c001bda9:	c3                   	ret    

c001bdaa <ISO9660::~ISO9660()>:
c001bdaa:	83 ec 0c             	sub    esp,0xc
c001bdad:	ba 28 5b 02 c0       	mov    edx,0xc0025b28
c001bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb6:	89 10                	mov    DWORD PTR [eax],edx
c001bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbc:	83 ec 0c             	sub    esp,0xc
c001bdbf:	50                   	push   eax
c001bdc0:	e8 b9 11 ff ff       	call   c000cf7e <Filesystem::~Filesystem()>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	90                   	nop
c001bdc9:	83 c4 0c             	add    esp,0xc
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <ISO9660::~ISO9660()>:
c001bdce:	83 ec 0c             	sub    esp,0xc
c001bdd1:	83 ec 0c             	sub    esp,0xc
c001bdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdd8:	e8 cd ff ff ff       	call   c001bdaa <ISO9660::~ISO9660()>
c001bddd:	83 c4 10             	add    esp,0x10
c001bde0:	83 ec 08             	sub    esp,0x8
c001bde3:	6a 08                	push   0x8
c001bde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bde9:	e8 74 0d ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c001bdee:	83 c4 10             	add    esp,0x10
c001bdf1:	83 c4 0c             	add    esp,0xc
c001bdf4:	c3                   	ret    

c001bdf5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001bdf5:	55                   	push   ebp
c001bdf6:	31 c9                	xor    ecx,ecx
c001bdf8:	57                   	push   edi
c001bdf9:	56                   	push   esi
c001bdfa:	53                   	push   ebx
c001bdfb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bdff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001be03:	89 eb                	mov    ebx,ebp
c001be05:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001be09:	39 ce                	cmp    esi,ecx
c001be0b:	7e 17                	jle    c001be24 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001be0d:	31 d2                	xor    edx,edx
c001be0f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001be13:	7d 13                	jge    c001be28 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001be15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001be19:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001be1c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001be1f:	75 0d                	jne    c001be2e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001be21:	42                   	inc    edx
c001be22:	eb eb                	jmp    c001be0f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001be24:	31 c0                	xor    eax,eax
c001be26:	eb 0a                	jmp    c001be32 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001be28:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001be2c:	eb 04                	jmp    c001be32 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001be2e:	41                   	inc    ecx
c001be2f:	43                   	inc    ebx
c001be30:	eb d7                	jmp    c001be09 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001be32:	5b                   	pop    ebx
c001be33:	5e                   	pop    esi
c001be34:	5f                   	pop    edi
c001be35:	5d                   	pop    ebp
c001be36:	c3                   	ret    

c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001be37:	57                   	push   edi
c001be38:	56                   	push   esi
c001be39:	53                   	push   ebx
c001be3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be42:	39 0d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ecx
c001be48:	75 08                	jne    c001be52 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001be4a:	38 05 d4 6e 02 c0    	cmp    BYTE PTR ds:0xc0026ed4,al
c001be50:	74 2b                	je     c001be7d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001be52:	83 ec 0c             	sub    esp,0xc
c001be55:	a2 d4 6e 02 c0       	mov    ds:0xc0026ed4,al
c001be5a:	68 80 8b 02 c0       	push   0xc0028b80
c001be5f:	0f be c0             	movsx  eax,al
c001be62:	6a 01                	push   0x1
c001be64:	89 0d 60 8b 02 c0    	mov    DWORD PTR ds:0xc0028b60,ecx
c001be6a:	31 db                	xor    ebx,ebx
c001be6c:	53                   	push   ebx
c001be6d:	51                   	push   ecx
c001be6e:	ff 34 85 5c 79 02 c0 	push   DWORD PTR [eax*4-0x3ffd86a4]
c001be75:	e8 e6 44 ff ff       	call   c0010360 <LogicalDisk::read(unsigned long long, int, void*)>
c001be7a:	83 c4 20             	add    esp,0x20
c001be7d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001be81:	be 80 8b 02 c0       	mov    esi,0xc0028b80
c001be86:	b9 00 08 00 00       	mov    ecx,0x800
c001be8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be8d:	5b                   	pop    ebx
c001be8e:	5e                   	pop    esi
c001be8f:	5f                   	pop    edi
c001be90:	c3                   	ret    
c001be91:	90                   	nop

c001be92 <ISO9660::tryMount(LogicalDisk*, int)>:
c001be92:	81 ec 10 08 00 00    	sub    esp,0x810
c001be98:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001be9f:	83 c0 41             	add    eax,0x41
c001bea2:	0f be c0             	movsx  eax,al
c001bea5:	50                   	push   eax
c001bea6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001beaa:	50                   	push   eax
c001beab:	6a 10                	push   0x10
c001bead:	e8 85 ff ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001beb2:	83 c4 10             	add    esp,0x10
c001beb5:	31 c0                	xor    eax,eax
c001beb7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bebc:	75 1d                	jne    c001bedb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bebe:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bec3:	75 16                	jne    c001bedb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bec5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001beca:	75 0f                	jne    c001bedb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001becc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bed1:	75 08                	jne    c001bedb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bed3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bed8:	0f 94 c0             	sete   al
c001bedb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bee1:	c3                   	ret    

c001bee2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bee2:	55                   	push   ebp
c001bee3:	57                   	push   edi
c001bee4:	56                   	push   esi
c001bee5:	53                   	push   ebx
c001bee6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001beec:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bef3:	85 ed                	test   ebp,ebp
c001bef5:	0f 84 da 01 00 00    	je     c001c0d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001befb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bf03:	0f 84 cc 01 00 00    	je     c001c0d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bf09:	b8 01 00 00 00       	mov    eax,0x1
c001bf0e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bf12:	0f 85 c2 01 00 00    	jne    c001c0da <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bf18:	31 d2                	xor    edx,edx
c001bf1a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bf21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bf24:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bf27:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bf2a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bf31:	01 c8                	add    eax,ecx
c001bf33:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bf36:	11 da                	adc    edx,ebx
c001bf38:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bf3c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bf40:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bf44:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bf48:	19 d7                	sbb    edi,edx
c001bf4a:	72 11                	jb     c001bf5d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bf4c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bf4f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bf53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf5b:	eb 0c                	jmp    c001bf69 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bf5d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bf61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bf65:	29 ce                	sub    esi,ecx
c001bf67:	19 df                	sbb    edi,ebx
c001bf69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf6c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bf6f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bf73:	c1 e0 0b             	shl    eax,0xb
c001bf76:	01 c8                	add    eax,ecx
c001bf78:	11 da                	adc    edx,ebx
c001bf7a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bf81:	51                   	push   ecx
c001bf82:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bf86:	50                   	push   eax
c001bf87:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bf8b:	53                   	push   ebx
c001bf8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf94:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bf98:	50                   	push   eax
c001bf99:	e8 99 fe ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf9e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bfa1:	b8 00 08 00 00       	mov    eax,0x800
c001bfa6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bfac:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bfb0:	29 d0                	sub    eax,edx
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	89 f9                	mov    ecx,edi
c001bfb7:	39 c6                	cmp    esi,eax
c001bfb9:	83 d9 00             	sbb    ecx,0x0
c001bfbc:	7d 1b                	jge    c001bfd9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bfbe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bfc3:	75 12                	jne    c001bfd7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bfc5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bfcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfd2:	e9 fa 00 00 00       	jmp    c001c0d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bfd7:	89 f0                	mov    eax,esi
c001bfd9:	01 d3                	add    ebx,edx
c001bfdb:	31 d2                	xor    edx,edx
c001bfdd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bfe1:	39 c2                	cmp    edx,eax
c001bfe3:	7d 14                	jge    c001bff9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bfe5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bfec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bff0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bff3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bff6:	42                   	inc    edx
c001bff7:	eb e8                	jmp    c001bfe1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bff9:	89 c2                	mov    edx,eax
c001bffb:	85 c0                	test   eax,eax
c001bffd:	79 02                	jns    c001c001 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bfff:	31 d2                	xor    edx,edx
c001c001:	01 c2                	add    edx,eax
c001c003:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c006:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c00d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c011:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c015:	99                   	cdq    
c001c016:	01 c1                	add    ecx,eax
c001c018:	11 d3                	adc    ebx,edx
c001c01a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c01e:	29 c6                	sub    esi,eax
c001c020:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c024:	19 d7                	sbb    edi,edx
c001c026:	89 34 24             	mov    DWORD PTR [esp],esi
c001c029:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c02d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c032:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c035:	b8 00 00 00 00       	mov    eax,0x0
c001c03a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c03e:	7d 43                	jge    c001c083 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c040:	52                   	push   edx
c001c041:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c045:	50                   	push   eax
c001c046:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c04e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c052:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c056:	50                   	push   eax
c001c057:	e8 db fd ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c05c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c064:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c069:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c071:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c079:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	eb aa                	jmp    c001c02d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c087:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c08a:	74 2a                	je     c001c0b6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c08c:	50                   	push   eax
c001c08d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c091:	50                   	push   eax
c001c092:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c096:	56                   	push   esi
c001c097:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c09b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c09f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c0a3:	51                   	push   ecx
c001c0a4:	e8 8e fd ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c0a9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c0ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c0bd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c0c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0c5:	89 18                	mov    DWORD PTR [eax],ebx
c001c0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0cb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c0ce:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c0d1:	31 c0                	xor    eax,eax
c001c0d3:	eb 05                	jmp    c001c0da <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c0d5:	b8 04 00 00 00       	mov    eax,0x4
c001c0da:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c0e0:	5b                   	pop    ebx
c001c0e1:	5e                   	pop    esi
c001c0e2:	5f                   	pop    edi
c001c0e3:	5d                   	pop    ebp
c001c0e4:	c3                   	ret    
c001c0e5:	90                   	nop

c001c0e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c0e6:	55                   	push   ebp
c001c0e7:	57                   	push   edi
c001c0e8:	56                   	push   esi
c001c0e9:	53                   	push   ebx
c001c0ea:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c0f0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c0f7:	85 ed                	test   ebp,ebp
c001c0f9:	0f 84 51 02 00 00    	je     c001c350 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c0ff:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c107:	0f 84 43 02 00 00    	je     c001c350 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c10d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c110:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c113:	75 0a                	jne    c001c11f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c115:	b8 07 00 00 00       	mov    eax,0x7
c001c11a:	e9 36 02 00 00       	jmp    c001c355 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c11f:	50                   	push   eax
c001c120:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c124:	50                   	push   eax
c001c125:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c12c:	53                   	push   ebx
c001c12d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c130:	c1 e0 0b             	shl    eax,0xb
c001c133:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c136:	c1 e8 0b             	shr    eax,0xb
c001c139:	50                   	push   eax
c001c13a:	e8 f8 fc ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c13f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c142:	83 c4 10             	add    esp,0x10
c001c145:	89 c1                	mov    ecx,eax
c001c147:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c14a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c150:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c153:	84 db                	test   bl,bl
c001c155:	0f 85 8b 00 00 00    	jne    c001c1e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c15b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c161:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c164:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c16a:	29 c6                	sub    esi,eax
c001c16c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c170:	89 f3                	mov    ebx,esi
c001c172:	89 f1                	mov    ecx,esi
c001c174:	c1 fb 1f             	sar    ebx,0x1f
c001c177:	01 f0                	add    eax,esi
c001c179:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c17c:	11 da                	adc    edx,ebx
c001c17e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c181:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c185:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c188:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c18b:	89 d8                	mov    eax,ebx
c001c18d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c191:	ba 00 00 00 00       	mov    edx,0x0
c001c196:	19 f8                	sbb    eax,edi
c001c198:	b8 00 00 00 00       	mov    eax,0x0
c001c19d:	73 08                	jae    c001c1a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c19f:	89 f0                	mov    eax,esi
c001c1a1:	89 fa                	mov    edx,edi
c001c1a3:	29 c8                	sub    eax,ecx
c001c1a5:	19 da                	sbb    edx,ebx
c001c1a7:	89 d7                	mov    edi,edx
c001c1a9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c1ac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c1af:	09 c7                	or     edi,eax
c001c1b1:	0f 84 5e ff ff ff    	je     c001c115 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c1b7:	57                   	push   edi
c001c1b8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c1bc:	50                   	push   eax
c001c1bd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c1c4:	53                   	push   ebx
c001c1c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1c8:	c1 e0 0b             	shl    eax,0xb
c001c1cb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c1cf:	c1 e8 0b             	shr    eax,0xb
c001c1d2:	50                   	push   eax
c001c1d3:	e8 5f fc ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c1db:	83 c4 10             	add    esp,0x10
c001c1de:	25 ff 07 00 00       	and    eax,0x7ff
c001c1e3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c1e6:	31 ff                	xor    edi,edi
c001c1e8:	56                   	push   esi
c001c1e9:	6a 28                	push   0x28
c001c1eb:	6a 00                	push   0x0
c001c1ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c1f1:	50                   	push   eax
c001c1f2:	e8 8d 44 fe ff       	call   c0000684 <memset>
c001c1f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c1fa:	25 ff 07 00 00       	and    eax,0x7ff
c001c1ff:	89 c6                	mov    esi,eax
c001c201:	83 c6 21             	add    esi,0x21
c001c204:	83 d7 00             	adc    edi,0x0
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	31 c9                	xor    ecx,ecx
c001c20c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c213:	83 f9 28             	cmp    ecx,0x28
c001c216:	88 04 24             	mov    BYTE PTR [esp],al
c001c219:	0f 94 c2             	sete   dl
c001c21c:	88 d0                	mov    al,dl
c001c21e:	ba ff 07 00 00       	mov    edx,0x7ff
c001c223:	39 f2                	cmp    edx,esi
c001c225:	ba 00 00 00 00       	mov    edx,0x0
c001c22a:	19 fa                	sbb    edx,edi
c001c22c:	0f 92 c2             	setb   dl
c001c22f:	09 c2                	or     edx,eax
c001c231:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c235:	0f 94 c0             	sete   al
c001c238:	08 d0                	or     al,dl
c001c23a:	75 16                	jne    c001c252 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c23c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c240:	74 10                	je     c001c252 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c242:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c245:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c249:	41                   	inc    ecx
c001c24a:	83 c6 01             	add    esi,0x1
c001c24d:	83 d7 00             	adc    edi,0x0
c001c250:	eb ba                	jmp    c001c20c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c252:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c259:	83 ec 0c             	sub    esp,0xc
c001c25c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c260:	56                   	push   esi
c001c261:	e8 3a 44 fe ff       	call   c00006a0 <strlen>
c001c266:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c26d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c271:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c279:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c27c:	5a                   	pop    edx
c001c27d:	25 ff 07 00 00       	and    eax,0x7ff
c001c282:	59                   	pop    ecx
c001c283:	01 f8                	add    eax,edi
c001c285:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c28b:	83 e0 02             	and    eax,0x2
c001c28e:	3c 01                	cmp    al,0x1
c001c290:	19 c0                	sbb    eax,eax
c001c292:	83 c0 02             	add    eax,0x2
c001c295:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c299:	56                   	push   esi
c001c29a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c29e:	50                   	push   eax
c001c29f:	e8 9c 44 fe ff       	call   c0000740 <strcpy>
c001c2a4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c2a8:	83 c4 10             	add    esp,0x10
c001c2ab:	84 c0                	test   al,al
c001c2ad:	75 21                	jne    c001c2d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c2af:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c2b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c2bf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c2c7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c2ce:	eb 28                	jmp    c001c2f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c2d0:	fe c8                	dec    al
c001c2d2:	75 24                	jne    c001c2f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c2d4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c2dc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c2e4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c2ec:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c2f3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c2f8:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c2fc:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c303:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c30a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c30c:	0f b6 f3             	movzx  esi,bl
c001c30f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c316:	31 db                	xor    ebx,ebx
c001c318:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c31e:	89 df                	mov    edi,ebx
c001c320:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c326:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c329:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c32c:	39 c6                	cmp    esi,eax
c001c32e:	19 d7                	sbb    edi,edx
c001c330:	72 10                	jb     c001c342 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c332:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c339:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c340:	eb 0a                	jmp    c001c34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c342:	29 f0                	sub    eax,esi
c001c344:	19 da                	sbb    edx,ebx
c001c346:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c349:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c34c:	31 c0                	xor    eax,eax
c001c34e:	eb 05                	jmp    c001c355 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c350:	b8 04 00 00 00       	mov    eax,0x4
c001c355:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c35b:	5b                   	pop    ebx
c001c35c:	5e                   	pop    esi
c001c35d:	5f                   	pop    edi
c001c35e:	5d                   	pop    ebp
c001c35f:	c3                   	ret    

c001c360 <readRoot(unsigned int*, unsigned int*, char)>:
c001c360:	57                   	push   edi
c001c361:	56                   	push   esi
c001c362:	81 ec 38 08 00 00    	sub    esp,0x838
c001c368:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c370:	50                   	push   eax
c001c371:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c375:	50                   	push   eax
c001c376:	6a 10                	push   0x10
c001c378:	e8 ba fa ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c37d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c384:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c388:	b9 22 00 00 00       	mov    ecx,0x22
c001c38d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c38f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c396:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c39a:	89 10                	mov    DWORD PTR [eax],edx
c001c39c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c3a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3a7:	89 10                	mov    DWORD PTR [eax],edx
c001c3a9:	81 c4 44 08 00 00    	add    esp,0x844
c001c3af:	b0 01                	mov    al,0x1
c001c3b1:	5e                   	pop    esi
c001c3b2:	5f                   	pop    edi
c001c3b3:	c3                   	ret    

c001c3b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c3b4:	55                   	push   ebp
c001c3b5:	57                   	push   edi
c001c3b6:	56                   	push   esi
c001c3b7:	53                   	push   ebx
c001c3b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c3be:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c3c5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c3cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3d0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c3d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c3d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c3dc:	75 03                	jne    c001c3e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c3de:	83 c3 02             	add    ebx,0x2
c001c3e1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c3e4:	75 03                	jne    c001c3e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c3e6:	43                   	inc    ebx
c001c3e7:	eb f8                	jmp    c001c3e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c3e9:	51                   	push   ecx
c001c3ea:	68 00 01 00 00       	push   0x100
c001c3ef:	6a 00                	push   0x0
c001c3f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3f5:	50                   	push   eax
c001c3f6:	e8 89 42 fe ff       	call   c0000684 <memset>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	31 d2                	xor    edx,edx
c001c400:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c403:	84 c0                	test   al,al
c001c405:	74 21                	je     c001c428 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c407:	3c 2f                	cmp    al,0x2f
c001c409:	75 0b                	jne    c001c416 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c40b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c40f:	bd 01 00 00 00       	mov    ebp,0x1
c001c414:	eb 14                	jmp    c001c42a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c416:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c419:	80 f9 19             	cmp    cl,0x19
c001c41c:	77 03                	ja     c001c421 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c41e:	83 e8 20             	sub    eax,0x20
c001c421:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c425:	42                   	inc    edx
c001c426:	eb d8                	jmp    c001c400 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c428:	31 ed                	xor    ebp,ebp
c001c42a:	83 ec 0c             	sub    esp,0xc
c001c42d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c434:	e8 8a d5 fe ff       	call   c00099c3 <malloc>
c001c439:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c440:	89 c6                	mov    esi,eax
c001c442:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c448:	c1 ef 0b             	shr    edi,0xb
c001c44b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c452:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c45e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c462:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c469:	74 28                	je     c001c493 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c46b:	52                   	push   edx
c001c46c:	57                   	push   edi
c001c46d:	50                   	push   eax
c001c46e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c472:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c479:	e8 b9 f9 ff ff       	call   c001be37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c47e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c482:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c489:	05 00 08 00 00       	add    eax,0x800
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	eb cb                	jmp    c001c45e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c493:	83 ec 0c             	sub    esp,0xc
c001c496:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c49a:	57                   	push   edi
c001c49b:	e8 00 42 fe ff       	call   c00006a0 <strlen>
c001c4a0:	50                   	push   eax
c001c4a1:	57                   	push   edi
c001c4a2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c4a9:	56                   	push   esi
c001c4aa:	e8 46 f9 ff ff       	call   c001bdf5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c4af:	83 c4 20             	add    esp,0x20
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	75 13                	jne    c001c4c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c4b6:	83 ec 0c             	sub    esp,0xc
c001c4b9:	56                   	push   esi
c001c4ba:	e8 14 d5 fe ff       	call   c00099d3 <free>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	31 c0                	xor    eax,eax
c001c4c4:	e9 b3 00 00 00       	jmp    c001c57c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c4c9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c4cd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c4d1:	c1 e7 08             	shl    edi,0x8
c001c4d4:	c1 e2 10             	shl    edx,0x10
c001c4d7:	09 d7                	or     edi,edx
c001c4d9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c4dd:	09 d7                	or     edi,edx
c001c4df:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c4e3:	c1 e2 18             	shl    edx,0x18
c001c4e6:	09 d7                	or     edi,edx
c001c4e8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c4ec:	89 d1                	mov    ecx,edx
c001c4ee:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c4f2:	c1 e1 08             	shl    ecx,0x8
c001c4f5:	c1 e2 10             	shl    edx,0x10
c001c4f8:	09 ca                	or     edx,ecx
c001c4fa:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c4fe:	09 ca                	or     edx,ecx
c001c500:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c504:	c1 e1 18             	shl    ecx,0x18
c001c507:	09 ca                	or     edx,ecx
c001c509:	89 e9                	mov    ecx,ebp
c001c50b:	84 c9                	test   cl,cl
c001c50d:	74 3c                	je     c001c54b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c50f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c513:	83 ec 0c             	sub    esp,0xc
c001c516:	56                   	push   esi
c001c517:	e8 b7 d4 fe ff       	call   c00099d3 <free>
c001c51c:	83 c4 0c             	add    esp,0xc
c001c51f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c526:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c52b:	50                   	push   eax
c001c52c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c533:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c53a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c53e:	52                   	push   edx
c001c53f:	57                   	push   edi
c001c540:	53                   	push   ebx
c001c541:	e8 6e fe ff ff       	call   c001c3b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c546:	83 c4 20             	add    esp,0x20
c001c549:	eb 31                	jmp    c001c57c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c54b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c54e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c555:	d0 e8                	shr    al,1
c001c557:	89 3b                	mov    DWORD PTR [ebx],edi
c001c559:	83 e0 01             	and    eax,0x1
c001c55c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c563:	83 ec 0c             	sub    esp,0xc
c001c566:	89 13                	mov    DWORD PTR [ebx],edx
c001c568:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c56f:	89 03                	mov    DWORD PTR [ebx],eax
c001c571:	56                   	push   esi
c001c572:	e8 5c d4 fe ff       	call   c00099d3 <free>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	b0 01                	mov    al,0x1
c001c57c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c582:	5b                   	pop    ebx
c001c583:	5e                   	pop    esi
c001c584:	5f                   	pop    edi
c001c585:	5d                   	pop    ebp
c001c586:	c3                   	ret    

c001c587 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c587:	55                   	push   ebp
c001c588:	57                   	push   edi
c001c589:	56                   	push   esi
c001c58a:	53                   	push   ebx
c001c58b:	83 ec 20             	sub    esp,0x20
c001c58e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c592:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c596:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c59a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c5a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c5aa:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c5af:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c5b5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c5bb:	57                   	push   edi
c001c5bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5c0:	50                   	push   eax
c001c5c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5c5:	50                   	push   eax
c001c5c6:	e8 95 fd ff ff       	call   c001c360 <readRoot(unsigned int*, unsigned int*, char)>
c001c5cb:	5a                   	pop    edx
c001c5cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5d0:	e8 cb 40 fe ff       	call   c00006a0 <strlen>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	83 f8 03             	cmp    eax,0x3
c001c5db:	77 17                	ja     c001c5f4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c5dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5e1:	89 03                	mov    DWORD PTR [ebx],eax
c001c5e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5e7:	89 06                	mov    DWORD PTR [esi],eax
c001c5e9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c5f0:	b0 01                	mov    al,0x1
c001c5f2:	eb 19                	jmp    c001c60d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c5f4:	50                   	push   eax
c001c5f5:	55                   	push   ebp
c001c5f6:	57                   	push   edi
c001c5f7:	56                   	push   esi
c001c5f8:	53                   	push   ebx
c001c5f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c601:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c605:	e8 aa fd ff ff       	call   c001c3b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c60a:	83 c4 20             	add    esp,0x20
c001c60d:	83 c4 1c             	add    esp,0x1c
c001c610:	5b                   	pop    ebx
c001c611:	5e                   	pop    esi
c001c612:	5f                   	pop    edi
c001c613:	5d                   	pop    ebp
c001c614:	c3                   	ret    
c001c615:	90                   	nop

c001c616 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c616:	57                   	push   edi
c001c617:	56                   	push   esi
c001c618:	53                   	push   ebx
c001c619:	83 ec 10             	sub    esp,0x10
c001c61c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c620:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c624:	85 ff                	test   edi,edi
c001c626:	0f 84 8b 00 00 00    	je     c001c6b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c62c:	85 f6                	test   esi,esi
c001c62e:	0f 84 83 00 00 00    	je     c001c6b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c634:	b8 03 00 00 00       	mov    eax,0x3
c001c639:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c63e:	75 7c                	jne    c001c6bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c640:	83 ec 0c             	sub    esp,0xc
c001c643:	6a 1c                	push   0x1c
c001c645:	e8 79 d3 fe ff       	call   c00099c3 <malloc>
c001c64a:	89 07                	mov    DWORD PTR [edi],eax
c001c64c:	89 c3                	mov    ebx,eax
c001c64e:	58                   	pop    eax
c001c64f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c653:	50                   	push   eax
c001c654:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c657:	50                   	push   eax
c001c658:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c65c:	50                   	push   eax
c001c65d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c661:	50                   	push   eax
c001c662:	56                   	push   esi
c001c663:	e8 1f ff ff ff       	call   c001c587 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c668:	83 c4 20             	add    esp,0x20
c001c66b:	84 c0                	test   al,al
c001c66d:	74 07                	je     c001c676 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c66f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c674:	74 0b                	je     c001c681 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c676:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c67a:	b8 01 00 00 00       	mov    eax,0x1
c001c67f:	eb 3b                	jmp    c001c6bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c681:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c685:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c689:	89 03                	mov    DWORD PTR [ebx],eax
c001c68b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c696:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c69d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c6a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c6a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c6ae:	8a 06                	mov    al,BYTE PTR [esi]
c001c6b0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c6b3:	31 c0                	xor    eax,eax
c001c6b5:	eb 05                	jmp    c001c6bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c6b7:	b8 04 00 00 00       	mov    eax,0x4
c001c6bc:	83 c4 10             	add    esp,0x10
c001c6bf:	5b                   	pop    ebx
c001c6c0:	5e                   	pop    esi
c001c6c1:	5f                   	pop    edi
c001c6c2:	c3                   	ret    
c001c6c3:	90                   	nop

c001c6c4 <ISO9660::exists(char const*)>:
c001c6c4:	83 ec 28             	sub    esp,0x28
c001c6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c6cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c6cf:	52                   	push   edx
c001c6d0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c6d3:	52                   	push   edx
c001c6d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c6d8:	52                   	push   edx
c001c6d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c6dd:	52                   	push   edx
c001c6de:	50                   	push   eax
c001c6df:	e8 a3 fe ff ff       	call   c001c587 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c6e4:	83 c4 3c             	add    esp,0x3c
c001c6e7:	c3                   	ret    

c001c6e8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c6e8:	56                   	push   esi
c001c6e9:	53                   	push   ebx
c001c6ea:	83 ec 14             	sub    esp,0x14
c001c6ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c6f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c6f5:	85 db                	test   ebx,ebx
c001c6f7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6fb:	0f 94 c2             	sete   dl
c001c6fe:	85 f6                	test   esi,esi
c001c700:	0f 94 c0             	sete   al
c001c703:	08 c2                	or     dl,al
c001c705:	75 68                	jne    c001c76f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c707:	85 c9                	test   ecx,ecx
c001c709:	74 64                	je     c001c76f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c70b:	83 ec 0c             	sub    esp,0xc
c001c70e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c711:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c715:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c71b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c722:	50                   	push   eax
c001c723:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c726:	50                   	push   eax
c001c727:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c72b:	50                   	push   eax
c001c72c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c730:	50                   	push   eax
c001c731:	51                   	push   ecx
c001c732:	e8 50 fe ff ff       	call   c001c587 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c737:	83 c4 20             	add    esp,0x20
c001c73a:	ba 01 00 00 00       	mov    edx,0x1
c001c73f:	84 c0                	test   al,al
c001c741:	74 31                	je     c001c774 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c747:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c74e:	89 03                	mov    DWORD PTR [ebx],eax
c001c750:	ba 00 00 00 00       	mov    edx,0x0
c001c755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c759:	85 c0                	test   eax,eax
c001c75b:	0f 95 06             	setne  BYTE PTR [esi]
c001c75e:	74 14                	je     c001c774 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c760:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c766:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c76d:	eb 05                	jmp    c001c774 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c76f:	ba 04 00 00 00       	mov    edx,0x4
c001c774:	83 c4 14             	add    esp,0x14
c001c777:	89 d0                	mov    eax,edx
c001c779:	5b                   	pop    ebx
c001c77a:	5e                   	pop    esi
c001c77b:	c3                   	ret    

c001c77c <ISO9660::openDir(char const*, void**)>:
c001c77c:	57                   	push   edi
c001c77d:	56                   	push   esi
c001c77e:	53                   	push   ebx
c001c77f:	83 ec 10             	sub    esp,0x10
c001c782:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c786:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c78a:	85 ff                	test   edi,edi
c001c78c:	74 7b                	je     c001c809 <ISO9660::openDir(char const*, void**)+0x8d>
c001c78e:	85 f6                	test   esi,esi
c001c790:	74 77                	je     c001c809 <ISO9660::openDir(char const*, void**)+0x8d>
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	6a 1c                	push   0x1c
c001c797:	e8 27 d2 fe ff       	call   c00099c3 <malloc>
c001c79c:	89 07                	mov    DWORD PTR [edi],eax
c001c79e:	89 c3                	mov    ebx,eax
c001c7a0:	58                   	pop    eax
c001c7a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c7a5:	50                   	push   eax
c001c7a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c7a9:	50                   	push   eax
c001c7aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7ae:	50                   	push   eax
c001c7af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7b3:	50                   	push   eax
c001c7b4:	56                   	push   esi
c001c7b5:	e8 cd fd ff ff       	call   c001c587 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c7ba:	83 c4 20             	add    esp,0x20
c001c7bd:	84 c0                	test   al,al
c001c7bf:	74 07                	je     c001c7c8 <ISO9660::openDir(char const*, void**)+0x4c>
c001c7c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c7c6:	75 0b                	jne    c001c7d3 <ISO9660::openDir(char const*, void**)+0x57>
c001c7c8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c7cc:	b8 01 00 00 00       	mov    eax,0x1
c001c7d1:	eb 3b                	jmp    c001c80e <ISO9660::openDir(char const*, void**)+0x92>
c001c7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c7db:	89 03                	mov    DWORD PTR [ebx],eax
c001c7dd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c7e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c7ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c7f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c7f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c800:	8a 06                	mov    al,BYTE PTR [esi]
c001c802:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c805:	31 c0                	xor    eax,eax
c001c807:	eb 05                	jmp    c001c80e <ISO9660::openDir(char const*, void**)+0x92>
c001c809:	b8 04 00 00 00       	mov    eax,0x4
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	5b                   	pop    ebx
c001c812:	5e                   	pop    esi
c001c813:	5f                   	pop    edi
c001c814:	c3                   	ret    
c001c815:	90                   	nop

c001c816 <ISO9660::ISO9660()>:
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81d:	83 ec 0c             	sub    esp,0xc
c001c820:	50                   	push   eax
c001c821:	e8 34 07 ff ff       	call   c000cf5a <Filesystem::Filesystem()>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	ba 28 5b 02 c0       	mov    edx,0xc0025b28
c001c82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c832:	89 10                	mov    DWORD PTR [eax],edx
c001c834:	90                   	nop
c001c835:	83 c4 0c             	add    esp,0xc
c001c838:	c3                   	ret    
c001c839:	90                   	nop

c001c83a <SoundCard::beginPlayback()>:
c001c83a:	c7 44 24 04 88 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b88
c001c842:	e9 1c 7f ff ff       	jmp    c0014763 <Krnl::panic(char const*)>
c001c847:	90                   	nop

c001c848 <SoundCard::stopPlayback()>:
c001c848:	c7 44 24 04 bc 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025bbc
c001c850:	e9 0e 7f ff ff       	jmp    c0014763 <Krnl::panic(char const*)>
c001c855:	90                   	nop

c001c856 <SoundCard::SoundCard(char const*)>:
c001c856:	83 ec 1c             	sub    esp,0x1c
c001c859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c85d:	83 ec 08             	sub    esp,0x8
c001c860:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c864:	50                   	push   eax
c001c865:	e8 24 1a ff ff       	call   c000e28e <Device::Device(char const*)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	ba 54 5c 02 c0       	mov    edx,0xc0025c54
c001c872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c876:	89 10                	mov    DWORD PTR [eax],edx
c001c878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c87c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c887:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c891:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c895:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8a3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8b1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c8bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c8c3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c8c8:	7f 19                	jg     c001c8e3 <SoundCard::SoundCard(char const*)+0x8d>
c001c8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8d2:	83 c2 54             	add    edx,0x54
c001c8d5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c8dd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c8e1:	eb e0                	jmp    c001c8c3 <SoundCard::SoundCard(char const*)+0x6d>
c001c8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8e7:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c8ee:	90                   	nop
c001c8ef:	83 c4 1c             	add    esp,0x1c
c001c8f2:	c3                   	ret    
c001c8f3:	90                   	nop

c001c8f4 <SoundCard::~SoundCard()>:
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	ba 54 5c 02 c0       	mov    edx,0xc0025c54
c001c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c900:	89 10                	mov    DWORD PTR [eax],edx
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	50                   	push   eax
c001c90a:	e8 49 16 ff ff       	call   c000df58 <Device::~Device()>
c001c90f:	83 c4 10             	add    esp,0x10
c001c912:	90                   	nop
c001c913:	83 c4 0c             	add    esp,0xc
c001c916:	c3                   	ret    
c001c917:	90                   	nop

c001c918 <SoundCard::~SoundCard()>:
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	83 ec 0c             	sub    esp,0xc
c001c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c922:	e8 cd ff ff ff       	call   c001c8f4 <SoundCard::~SoundCard()>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	83 ec 08             	sub    esp,0x8
c001c92d:	68 e8 01 00 00       	push   0x1e8
c001c932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c936:	e8 27 02 ff ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	83 c4 0c             	add    esp,0xc
c001c941:	c3                   	ret    

c001c942 <SoundCard::configureRates(int, int, int)>:
c001c942:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c946:	31 c0                	xor    eax,eax
c001c948:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c94f:	75 20                	jne    c001c971 <SoundCard::configureRates(int, int, int)+0x2f>
c001c951:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c955:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c95f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c969:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c96f:	b0 01                	mov    al,0x1
c001c971:	c3                   	ret    

c001c972 <SoundCard::getSamples16(int, short*)>:
c001c972:	55                   	push   ebp
c001c973:	57                   	push   edi
c001c974:	31 ff                	xor    edi,edi
c001c976:	56                   	push   esi
c001c977:	53                   	push   ebx
c001c978:	31 db                	xor    ebx,ebx
c001c97a:	83 ec 18             	sub    esp,0x18
c001c97d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c981:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c985:	68 ef 5b 02 c0       	push   0xc0025bef
c001c98a:	e8 b4 02 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001c98f:	83 c4 0c             	add    esp,0xc
c001c992:	8d 04 36             	lea    eax,[esi+esi*1]
c001c995:	50                   	push   eax
c001c996:	6a 00                	push   0x0
c001c998:	55                   	push   ebp
c001c999:	e8 e6 3c fe ff       	call   c0000684 <memset>
c001c99e:	83 c4 10             	add    esp,0x10
c001c9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9a5:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c9ac:	85 c0                	test   eax,eax
c001c9ae:	74 1b                	je     c001c9cb <SoundCard::getSamples16(int, short*)+0x59>
c001c9b0:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c9b4:	75 15                	jne    c001c9cb <SoundCard::getSamples16(int, short*)+0x59>
c001c9b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ba:	55                   	push   ebp
c001c9bb:	56                   	push   esi
c001c9bc:	50                   	push   eax
c001c9bd:	e8 5a 03 00 00       	call   c001cd1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	39 c7                	cmp    edi,eax
c001c9c7:	7d 02                	jge    c001c9cb <SoundCard::getSamples16(int, short*)+0x59>
c001c9c9:	89 c7                	mov    edi,eax
c001c9cb:	43                   	inc    ebx
c001c9cc:	83 fb 20             	cmp    ebx,0x20
c001c9cf:	75 d0                	jne    c001c9a1 <SoundCard::getSamples16(int, short*)+0x2f>
c001c9d1:	83 c4 0c             	add    esp,0xc
c001c9d4:	89 f8                	mov    eax,edi
c001c9d6:	5b                   	pop    ebx
c001c9d7:	5e                   	pop    esi
c001c9d8:	5f                   	pop    edi
c001c9d9:	5d                   	pop    ebp
c001c9da:	c3                   	ret    
c001c9db:	90                   	nop

c001c9dc <SoundCard::getSamples32(int, int*)>:
c001c9dc:	55                   	push   ebp
c001c9dd:	57                   	push   edi
c001c9de:	31 ff                	xor    edi,edi
c001c9e0:	56                   	push   esi
c001c9e1:	31 f6                	xor    esi,esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 10             	sub    esp,0x10
c001c9e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9eb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c9ef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c9f3:	c1 e0 02             	shl    eax,0x2
c001c9f6:	50                   	push   eax
c001c9f7:	6a 00                	push   0x0
c001c9f9:	55                   	push   ebp
c001c9fa:	e8 85 3c fe ff       	call   c0000684 <memset>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ca09:	85 c0                	test   eax,eax
c001ca0b:	74 1b                	je     c001ca28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ca0d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ca11:	75 15                	jne    c001ca28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ca13:	53                   	push   ebx
c001ca14:	55                   	push   ebp
c001ca15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca19:	50                   	push   eax
c001ca1a:	e8 f9 03 00 00       	call   c001ce18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	39 c6                	cmp    esi,eax
c001ca24:	7d 02                	jge    c001ca28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ca26:	89 c6                	mov    esi,eax
c001ca28:	47                   	inc    edi
c001ca29:	83 ff 20             	cmp    edi,0x20
c001ca2c:	75 d4                	jne    c001ca02 <SoundCard::getSamples32(int, int*)+0x26>
c001ca2e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001ca34:	85 f6                	test   esi,esi
c001ca36:	75 0f                	jne    c001ca47 <SoundCard::getSamples32(int, int*)+0x6b>
c001ca38:	84 c0                	test   al,al
c001ca3a:	74 1b                	je     c001ca57 <SoundCard::getSamples32(int, int*)+0x7b>
c001ca3c:	83 ec 0c             	sub    esp,0xc
c001ca3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca41:	53                   	push   ebx
c001ca42:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ca45:	eb 0d                	jmp    c001ca54 <SoundCard::getSamples32(int, int*)+0x78>
c001ca47:	84 c0                	test   al,al
c001ca49:	75 0c                	jne    c001ca57 <SoundCard::getSamples32(int, int*)+0x7b>
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca50:	53                   	push   ebx
c001ca51:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	83 c4 0c             	add    esp,0xc
c001ca5a:	89 f0                	mov    eax,esi
c001ca5c:	5b                   	pop    ebx
c001ca5d:	5e                   	pop    esi
c001ca5e:	5f                   	pop    edi
c001ca5f:	5d                   	pop    ebp
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <SoundCard::addChannel(SoundPort*)>:
c001ca62:	56                   	push   esi
c001ca63:	53                   	push   ebx
c001ca64:	53                   	push   ebx
c001ca65:	31 db                	xor    ebx,ebx
c001ca67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca6b:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001ca73:	74 27                	je     c001ca9c <SoundCard::addChannel(SoundPort*)+0x3a>
c001ca75:	43                   	inc    ebx
c001ca76:	83 fb 20             	cmp    ebx,0x20
c001ca79:	75 f0                	jne    c001ca6b <SoundCard::addChannel(SoundPort*)+0x9>
c001ca7b:	83 ec 0c             	sub    esp,0xc
c001ca7e:	83 cb ff             	or     ebx,0xffffffff
c001ca81:	68 15 5c 02 c0       	push   0xc0025c15
c001ca86:	e8 b8 01 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001ca8b:	c7 04 24 0e 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c0e
c001ca92:	e8 cc 7c ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001ca97:	83 c4 10             	add    esp,0x10
c001ca9a:	eb 1b                	jmp    c001cab7 <SoundCard::addChannel(SoundPort*)+0x55>
c001ca9c:	51                   	push   ecx
c001ca9d:	51                   	push   ecx
c001ca9e:	53                   	push   ebx
c001ca9f:	68 2d 5c 02 c0       	push   0xc0025c2d
c001caa4:	e8 9a 01 ff ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001caa9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001caad:	83 c4 10             	add    esp,0x10
c001cab0:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cab7:	89 d8                	mov    eax,ebx
c001cab9:	5a                   	pop    edx
c001caba:	5b                   	pop    ebx
c001cabb:	5e                   	pop    esi
c001cabc:	c3                   	ret    
c001cabd:	90                   	nop

c001cabe <SoundCard::removeChannel(int)>:
c001cabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cac6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cad1:	c3                   	ret    
c001cad2:	66 90                	xchg   ax,ax

c001cad4 <SoundPort::SoundPort(int, int, int, int)>:
c001cad4:	83 ec 0c             	sub    esp,0xc
c001cad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cadb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001caea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caf2:	89 10                	mov    DWORD PTR [eax],edx
c001caf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cafc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001caff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cb0a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cb0f:	75 13                	jne    c001cb24 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb15:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb17:	05 a0 0f 00 00       	add    eax,0xfa0
c001cb1c:	01 c0                	add    eax,eax
c001cb1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb22:	66 90                	xchg   ax,ax
c001cb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb33:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cb41:	c1 e0 02             	shl    eax,0x2
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	50                   	push   eax
c001cb48:	e8 76 ce fe ff       	call   c00099c3 <malloc>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	89 c2                	mov    edx,eax
c001cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cb59:	90                   	nop
c001cb5a:	83 c4 0c             	add    esp,0xc
c001cb5d:	c3                   	ret    
c001cb5e:	66 90                	xchg   ax,ax

c001cb60 <SoundPort::~SoundPort()>:
c001cb60:	83 ec 0c             	sub    esp,0xc
c001cb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cb6a:	85 c0                	test   eax,eax
c001cb6c:	74 1e                	je     c001cb8c <SoundPort::~SoundPort()+0x2c>
c001cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cb75:	83 ec 0c             	sub    esp,0xc
c001cb78:	50                   	push   eax
c001cb79:	e8 55 ce fe ff       	call   c00099d3 <free>
c001cb7e:	83 c4 10             	add    esp,0x10
c001cb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb85:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cb8c:	90                   	nop
c001cb8d:	83 c4 0c             	add    esp,0xc
c001cb90:	c3                   	ret    
c001cb91:	90                   	nop
c001cb92:	66 90                	xchg   ax,ax

c001cb94 <SoundPort::unpause()>:
c001cb94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb98:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cb9c:	c3                   	ret    
c001cb9d:	90                   	nop
c001cb9e:	66 90                	xchg   ax,ax

c001cba0 <SoundPort::pause()>:
c001cba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cba8:	c3                   	ret    
c001cba9:	90                   	nop
c001cbaa:	66 90                	xchg   ax,ax

c001cbac <SoundPort::getBufferUsed()>:
c001cbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cbb3:	c3                   	ret    

c001cbb4 <SoundPort::getBufferSize()>:
c001cbb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cbbb:	c3                   	ret    

c001cbbc <SoundPort::buffer16(short*, int)>:
c001cbbc:	55                   	push   ebp
c001cbbd:	57                   	push   edi
c001cbbe:	56                   	push   esi
c001cbbf:	53                   	push   ebx
c001cbc0:	83 ec 1c             	sub    esp,0x1c
c001cbc3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbc7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cbcb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cbce:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cbd1:	0f 84 85 00 00 00    	je     c001cc5c <SoundPort::buffer16(short*, int)+0xa0>
c001cbd7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cbdb:	85 c9                	test   ecx,ecx
c001cbdd:	7e 7d                	jle    c001cc5c <SoundPort::buffer16(short*, int)+0xa0>
c001cbdf:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cbe3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cbe6:	c1 e1 0f             	shl    ecx,0xf
c001cbe9:	8d 70 01             	lea    esi,[eax+0x1]
c001cbec:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cbef:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cbf2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cbf5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cbf8:	74 6e                	je     c001cc68 <SoundPort::buffer16(short*, int)+0xac>
c001cbfa:	31 f6                	xor    esi,esi
c001cbfc:	eb 22                	jmp    c001cc20 <SoundPort::buffer16(short*, int)+0x64>
c001cbfe:	66 90                	xchg   ax,ax
c001cc00:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cc05:	8d 79 01             	lea    edi,[ecx+0x1]
c001cc08:	c1 e3 0f             	shl    ebx,0xf
c001cc0b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cc0e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cc11:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cc14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cc17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cc1a:	74 1c                	je     c001cc38 <SoundPort::buffer16(short*, int)+0x7c>
c001cc1c:	89 c6                	mov    esi,eax
c001cc1e:	66 90                	xchg   ax,ax
c001cc20:	8d 46 01             	lea    eax,[esi+0x1]
c001cc23:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cc27:	75 d7                	jne    c001cc00 <SoundPort::buffer16(short*, int)+0x44>
c001cc29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc2d:	83 c4 1c             	add    esp,0x1c
c001cc30:	5b                   	pop    ebx
c001cc31:	5e                   	pop    esi
c001cc32:	5f                   	pop    edi
c001cc33:	5d                   	pop    ebp
c001cc34:	c3                   	ret    
c001cc35:	8d 76 00             	lea    esi,[esi+0x0]
c001cc38:	8d 46 02             	lea    eax,[esi+0x2]
c001cc3b:	90                   	nop
c001cc3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	68 80 5c 02 c0       	push   0xc0025c80
c001cc48:	e8 f6 ff fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001cc4d:	83 c4 10             	add    esp,0x10
c001cc50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc54:	83 c4 1c             	add    esp,0x1c
c001cc57:	5b                   	pop    ebx
c001cc58:	5e                   	pop    esi
c001cc59:	5f                   	pop    edi
c001cc5a:	5d                   	pop    ebp
c001cc5b:	c3                   	ret    
c001cc5c:	83 c4 1c             	add    esp,0x1c
c001cc5f:	31 c0                	xor    eax,eax
c001cc61:	5b                   	pop    ebx
c001cc62:	5e                   	pop    esi
c001cc63:	5f                   	pop    edi
c001cc64:	5d                   	pop    ebp
c001cc65:	c3                   	ret    
c001cc66:	66 90                	xchg   ax,ax
c001cc68:	b8 01 00 00 00       	mov    eax,0x1
c001cc6d:	eb cd                	jmp    c001cc3c <SoundPort::buffer16(short*, int)+0x80>
c001cc6f:	90                   	nop

c001cc70 <SoundPort::buffer32(int*, int)>:
c001cc70:	55                   	push   ebp
c001cc71:	57                   	push   edi
c001cc72:	56                   	push   esi
c001cc73:	53                   	push   ebx
c001cc74:	83 ec 1c             	sub    esp,0x1c
c001cc77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc7f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cc82:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cc86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc8a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cc8d:	74 79                	je     c001cd08 <SoundPort::buffer32(int*, int)+0x98>
c001cc8f:	85 c0                	test   eax,eax
c001cc91:	7e 75                	jle    c001cd08 <SoundPort::buffer32(int*, int)+0x98>
c001cc93:	8d 71 01             	lea    esi,[ecx+0x1]
c001cc96:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cc99:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cc9c:	8b 37                	mov    esi,DWORD PTR [edi]
c001cc9e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cca1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cca4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cca7:	74 6b                	je     c001cd14 <SoundPort::buffer32(int*, int)+0xa4>
c001cca9:	31 f6                	xor    esi,esi
c001ccab:	eb 1f                	jmp    c001cccc <SoundPort::buffer32(int*, int)+0x5c>
c001ccad:	8d 76 00             	lea    esi,[esi+0x0]
c001ccb0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ccb3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ccb6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ccb9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ccbc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ccc0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccc3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccc6:	74 1c                	je     c001cce4 <SoundPort::buffer32(int*, int)+0x74>
c001ccc8:	89 de                	mov    esi,ebx
c001ccca:	66 90                	xchg   ax,ax
c001cccc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cccf:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001ccd3:	75 db                	jne    c001ccb0 <SoundPort::buffer32(int*, int)+0x40>
c001ccd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccd9:	83 c4 1c             	add    esp,0x1c
c001ccdc:	5b                   	pop    ebx
c001ccdd:	5e                   	pop    esi
c001ccde:	5f                   	pop    edi
c001ccdf:	5d                   	pop    ebp
c001cce0:	c3                   	ret    
c001cce1:	8d 76 00             	lea    esi,[esi+0x0]
c001cce4:	8d 46 02             	lea    eax,[esi+0x2]
c001cce7:	90                   	nop
c001cce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	68 9b 5c 02 c0       	push   0xc0025c9b
c001ccf4:	e8 4a ff fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd00:	83 c4 1c             	add    esp,0x1c
c001cd03:	5b                   	pop    ebx
c001cd04:	5e                   	pop    esi
c001cd05:	5f                   	pop    edi
c001cd06:	5d                   	pop    ebp
c001cd07:	c3                   	ret    
c001cd08:	83 c4 1c             	add    esp,0x1c
c001cd0b:	31 c0                	xor    eax,eax
c001cd0d:	5b                   	pop    ebx
c001cd0e:	5e                   	pop    esi
c001cd0f:	5f                   	pop    edi
c001cd10:	5d                   	pop    ebp
c001cd11:	c3                   	ret    
c001cd12:	66 90                	xchg   ax,ax
c001cd14:	b8 01 00 00 00       	mov    eax,0x1
c001cd19:	eb cd                	jmp    c001cce8 <SoundPort::buffer32(int*, int)+0x78>
c001cd1b:	90                   	nop

c001cd1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001cd1c:	57                   	push   edi
c001cd1d:	56                   	push   esi
c001cd1e:	53                   	push   ebx
c001cd1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001cd27:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001cd2d:	39 03                	cmp    DWORD PTR [ebx],eax
c001cd2f:	74 13                	je     c001cd44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001cd31:	83 ec 0c             	sub    esp,0xc
c001cd34:	68 f0 5c 02 c0       	push   0xc0025cf0
c001cd39:	e8 25 7a ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001cd3e:	83 c4 10             	add    esp,0x10
c001cd41:	8d 76 00             	lea    esi,[esi+0x0]
c001cd44:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001cd4a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001cd4d:	74 11                	je     c001cd60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	68 b6 5c 02 c0       	push   0xc0025cb6
c001cd57:	e8 07 7a ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	90                   	nop
c001cd60:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001cd66:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001cd69:	74 11                	je     c001cd7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	68 b6 5c 02 c0       	push   0xc0025cb6
c001cd73:	e8 eb 79 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001cd78:	83 c4 10             	add    esp,0x10
c001cd7b:	90                   	nop
c001cd7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cd7f:	89 c6                	mov    esi,eax
c001cd81:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001cd85:	7e 05                	jle    c001cd8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001cd87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cd8b:	90                   	nop
c001cd8c:	85 f6                	test   esi,esi
c001cd8e:	7e 30                	jle    c001cdc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001cd90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd94:	8d 3c 36             	lea    edi,[esi+esi*1]
c001cd97:	31 c9                	xor    ecx,ecx
c001cd99:	01 d7                	add    edi,edx
c001cd9b:	90                   	nop
c001cd9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cd9f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001cda2:	85 c0                	test   eax,eax
c001cda4:	79 06                	jns    c001cdac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001cda6:	05 ff 7f 00 00       	add    eax,0x7fff
c001cdab:	90                   	nop
c001cdac:	c1 f8 0f             	sar    eax,0xf
c001cdaf:	83 c1 04             	add    ecx,0x4
c001cdb2:	66 01 02             	add    WORD PTR [edx],ax
c001cdb5:	83 c2 02             	add    edx,0x2
c001cdb8:	39 d7                	cmp    edi,edx
c001cdba:	75 e0                	jne    c001cd9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001cdbc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cdbf:	90                   	nop
c001cdc0:	56                   	push   esi
c001cdc1:	89 c2                	mov    edx,eax
c001cdc3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001cdca:	29 f2                	sub    edx,esi
c001cdcc:	52                   	push   edx
c001cdcd:	50                   	push   eax
c001cdce:	68 10 5d 02 c0       	push   0xc0025d10
c001cdd3:	e8 6b fe fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001cdd8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001cddb:	50                   	push   eax
c001cddc:	01 f8                	add    eax,edi
c001cdde:	50                   	push   eax
c001cddf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cde2:	29 f0                	sub    eax,esi
c001cde4:	c1 e0 02             	shl    eax,0x2
c001cde7:	50                   	push   eax
c001cde8:	68 40 5d 02 c0       	push   0xc0025d40
c001cded:	e8 51 fe fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001cdf2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cdf5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cdf8:	83 c4 1c             	add    esp,0x1c
c001cdfb:	01 d7                	add    edi,edx
c001cdfd:	29 f0                	sub    eax,esi
c001cdff:	c1 e0 02             	shl    eax,0x2
c001ce02:	50                   	push   eax
c001ce03:	57                   	push   edi
c001ce04:	52                   	push   edx
c001ce05:	e8 b2 37 fe ff       	call   c00005bc <memmove>
c001ce0a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	89 f0                	mov    eax,esi
c001ce12:	5b                   	pop    ebx
c001ce13:	5e                   	pop    esi
c001ce14:	5f                   	pop    edi
c001ce15:	c3                   	ret    
c001ce16:	66 90                	xchg   ax,ax

c001ce18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ce18:	57                   	push   edi
c001ce19:	56                   	push   esi
c001ce1a:	53                   	push   ebx
c001ce1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ce23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ce27:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ce2d:	39 06                	cmp    DWORD PTR [esi],eax
c001ce2f:	74 13                	je     c001ce44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ce31:	83 ec 0c             	sub    esp,0xc
c001ce34:	68 64 5d 02 c0       	push   0xc0025d64
c001ce39:	e8 25 79 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	8d 76 00             	lea    esi,[esi+0x0]
c001ce44:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ce4a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ce4d:	74 11                	je     c001ce60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ce4f:	83 ec 0c             	sub    esp,0xc
c001ce52:	68 d2 5c 02 c0       	push   0xc0025cd2
c001ce57:	e8 07 79 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	90                   	nop
c001ce60:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ce66:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ce69:	74 11                	je     c001ce7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	68 d2 5c 02 c0       	push   0xc0025cd2
c001ce73:	e8 eb 78 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	90                   	nop
c001ce7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ce7f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ce83:	7e 07                	jle    c001ce8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ce85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce89:	8d 76 00             	lea    esi,[esi+0x0]
c001ce8c:	85 ff                	test   edi,edi
c001ce8e:	7e 1c                	jle    c001ceac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ce90:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ce97:	31 c0                	xor    eax,eax
c001ce99:	8d 76 00             	lea    esi,[esi+0x0]
c001ce9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ce9f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cea2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cea5:	83 c0 04             	add    eax,0x4
c001cea8:	39 c1                	cmp    ecx,eax
c001ceaa:	75 f0                	jne    c001ce9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ceac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ceaf:	50                   	push   eax
c001ceb0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ceb3:	29 f8                	sub    eax,edi
c001ceb5:	c1 e0 02             	shl    eax,0x2
c001ceb8:	50                   	push   eax
c001ceb9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cebc:	50                   	push   eax
c001cebd:	52                   	push   edx
c001cebe:	e8 f9 36 fe ff       	call   c00005bc <memmove>
c001cec3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cec6:	83 c4 10             	add    esp,0x10
c001cec9:	89 f8                	mov    eax,edi
c001cecb:	5b                   	pop    ebx
c001cecc:	5e                   	pop    esi
c001cecd:	5f                   	pop    edi
c001cece:	c3                   	ret    
c001cecf:	90                   	nop

c001ced0 <PCI::open(int, int, void*)>:
c001ced0:	83 ec 18             	sub    esp,0x18
c001ced3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ced7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cedb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cee1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cee3:	50                   	push   eax
c001cee4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cee7:	31 c0                	xor    eax,eax
c001cee9:	83 c4 1c             	add    esp,0x1c
c001ceec:	c3                   	ret    
c001ceed:	90                   	nop

c001ceee <PCI::close(int, int, void*)>:
c001ceee:	31 c0                	xor    eax,eax
c001cef0:	c3                   	ret    
c001cef1:	90                   	nop

c001cef2 <PCI::PCI()>:
c001cef2:	83 ec 0c             	sub    esp,0xc
c001cef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef9:	83 ec 08             	sub    esp,0x8
c001cefc:	68 83 5d 02 c0       	push   0xc0025d83
c001cf01:	50                   	push   eax
c001cf02:	e8 e9 09 ff ff       	call   c000d8f0 <Bus::Bus(char const*)>
c001cf07:	83 c4 10             	add    esp,0x10
c001cf0a:	ba 30 60 02 c0       	mov    edx,0xc0026030
c001cf0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf13:	89 10                	mov    DWORD PTR [eax],edx
c001cf15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf19:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf27:	a3 80 93 02 c0       	mov    ds:0xc0029380,eax
c001cf2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf36:	0f b6 d0             	movzx  edx,al
c001cf39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cf44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf48:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf4e:	0f b6 d0             	movzx  edx,al
c001cf51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf55:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf64:	8d 50 01             	lea    edx,[eax+0x1]
c001cf67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf6b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cf71:	0f b6 d0             	movzx  edx,al
c001cf74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf78:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cf7c:	83 c9 c0             	or     ecx,0xffffffc0
c001cf7f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cf83:	90                   	nop
c001cf84:	83 c4 0c             	add    esp,0xc
c001cf87:	c3                   	ret    

c001cf88 <PCI::readBAR8(unsigned int, int)>:
c001cf88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf90:	f6 c2 01             	test   dl,0x1
c001cf93:	74 07                	je     c001cf9c <PCI::readBAR8(unsigned int, int)+0x14>
c001cf95:	83 e2 fc             	and    edx,0xfffffffc
c001cf98:	01 c2                	add    edx,eax
c001cf9a:	ec                   	in     al,dx
c001cf9b:	c3                   	ret    
c001cf9c:	83 e2 f0             	and    edx,0xfffffff0
c001cf9f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cfa2:	c3                   	ret    
c001cfa3:	90                   	nop

c001cfa4 <PCI::readBAR16(unsigned int, int)>:
c001cfa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfac:	f6 c2 01             	test   dl,0x1
c001cfaf:	74 08                	je     c001cfb9 <PCI::readBAR16(unsigned int, int)+0x15>
c001cfb1:	83 e2 fc             	and    edx,0xfffffffc
c001cfb4:	01 c2                	add    edx,eax
c001cfb6:	66 ed                	in     ax,dx
c001cfb8:	c3                   	ret    
c001cfb9:	83 e2 f0             	and    edx,0xfffffff0
c001cfbc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cfc0:	c3                   	ret    
c001cfc1:	90                   	nop

c001cfc2 <PCI::readBAR32(unsigned int, int)>:
c001cfc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfca:	f6 c2 01             	test   dl,0x1
c001cfcd:	74 07                	je     c001cfd6 <PCI::readBAR32(unsigned int, int)+0x14>
c001cfcf:	83 e2 fc             	and    edx,0xfffffffc
c001cfd2:	01 c2                	add    edx,eax
c001cfd4:	ed                   	in     eax,dx
c001cfd5:	c3                   	ret    
c001cfd6:	83 e2 f0             	and    edx,0xfffffff0
c001cfd9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cfdc:	c3                   	ret    
c001cfdd:	90                   	nop

c001cfde <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cfde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfe6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cfea:	f6 c2 01             	test   dl,0x1
c001cfed:	74 07                	je     c001cff6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cfef:	83 e2 fc             	and    edx,0xfffffffc
c001cff2:	01 ca                	add    edx,ecx
c001cff4:	ee                   	out    dx,al
c001cff5:	c3                   	ret    
c001cff6:	83 e2 f0             	and    edx,0xfffffff0
c001cff9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cffc:	c3                   	ret    
c001cffd:	90                   	nop

c001cffe <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cffe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d006:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d00a:	f6 c2 01             	test   dl,0x1
c001d00d:	74 08                	je     c001d017 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d00f:	83 e2 fc             	and    edx,0xfffffffc
c001d012:	01 ca                	add    edx,ecx
c001d014:	66 ef                	out    dx,ax
c001d016:	c3                   	ret    
c001d017:	83 e2 f0             	and    edx,0xfffffff0
c001d01a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d01e:	c3                   	ret    
c001d01f:	90                   	nop

c001d020 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d028:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d02c:	f6 c2 01             	test   dl,0x1
c001d02f:	74 07                	je     c001d038 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d031:	83 e2 fc             	and    edx,0xfffffffc
c001d034:	01 ca                	add    edx,ecx
c001d036:	ef                   	out    dx,eax
c001d037:	c3                   	ret    
c001d038:	83 e2 f0             	and    edx,0xfffffff0
c001d03b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d03e:	c3                   	ret    
c001d03f:	90                   	nop

c001d040 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d040:	55                   	push   ebp
c001d041:	57                   	push   edi
c001d042:	56                   	push   esi
c001d043:	53                   	push   ebx
c001d044:	83 ec 0c             	sub    esp,0xc
c001d047:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d04b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d04f:	89 f0                	mov    eax,esi
c001d051:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d055:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d059:	3c 07                	cmp    al,0x7
c001d05b:	76 10                	jbe    c001d06d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d05d:	83 ec 0c             	sub    esp,0xc
c001d060:	68 8b 5d 02 c0       	push   0xc0025d8b
c001d065:	e8 f9 76 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001d06a:	83 c4 10             	add    esp,0x10
c001d06d:	80 fb 0f             	cmp    bl,0xf
c001d070:	76 10                	jbe    c001d082 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d072:	83 ec 0c             	sub    esp,0xc
c001d075:	68 bb 5d 02 c0       	push   0xc0025dbb
c001d07a:	e8 e4 76 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001d07f:	83 c4 10             	add    esp,0x10
c001d082:	8d 04 36             	lea    eax,[esi+esi*1]
c001d085:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d08a:	83 c8 f0             	or     eax,0xfffffff0
c001d08d:	ee                   	out    dx,al
c001d08e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d093:	89 e8                	mov    eax,ebp
c001d095:	ee                   	out    dx,al
c001d096:	83 c4 0c             	add    esp,0xc
c001d099:	89 d8                	mov    eax,ebx
c001d09b:	66 81 e7 fc 00       	and    di,0xfc
c001d0a0:	5b                   	pop    ebx
c001d0a1:	c1 e0 08             	shl    eax,0x8
c001d0a4:	5e                   	pop    esi
c001d0a5:	09 f8                	or     eax,edi
c001d0a7:	5f                   	pop    edi
c001d0a8:	66 0d 00 c0          	or     ax,0xc000
c001d0ac:	5d                   	pop    ebp
c001d0ad:	c3                   	ret    

c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d0ae:	57                   	push   edi
c001d0af:	56                   	push   esi
c001d0b0:	53                   	push   ebx
c001d0b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0b9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d0bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d0cb:	83 ff 01             	cmp    edi,0x1
c001d0ce:	75 3e                	jne    c001d10e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d0d0:	89 de                	mov    esi,ebx
c001d0d2:	0f b6 c0             	movzx  eax,al
c001d0d5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d0db:	c1 e0 10             	shl    eax,0x10
c001d0de:	0f b6 c9             	movzx  ecx,cl
c001d0e1:	09 f0                	or     eax,esi
c001d0e3:	c1 e1 08             	shl    ecx,0x8
c001d0e6:	0f b6 d2             	movzx  edx,dl
c001d0e9:	09 c8                	or     eax,ecx
c001d0eb:	c1 e2 0b             	shl    edx,0xb
c001d0ee:	09 d0                	or     eax,edx
c001d0f0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d0f5:	0d 00 00 00 80       	or     eax,0x80000000
c001d0fa:	ef                   	out    dx,eax
c001d0fb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d100:	ed                   	in     eax,dx
c001d101:	83 e3 02             	and    ebx,0x2
c001d104:	0f b6 cb             	movzx  ecx,bl
c001d107:	c1 e1 03             	shl    ecx,0x3
c001d10a:	d3 e8                	shr    eax,cl
c001d10c:	eb 43                	jmp    c001d151 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d10e:	83 ff 02             	cmp    edi,0x2
c001d111:	75 2c                	jne    c001d13f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d113:	83 ec 0c             	sub    esp,0xc
c001d116:	0f b6 c9             	movzx  ecx,cl
c001d119:	0f b6 d2             	movzx  edx,dl
c001d11c:	0f b6 fb             	movzx  edi,bl
c001d11f:	0f b6 c0             	movzx  eax,al
c001d122:	57                   	push   edi
c001d123:	51                   	push   ecx
c001d124:	52                   	push   edx
c001d125:	50                   	push   eax
c001d126:	56                   	push   esi
c001d127:	e8 14 ff ff ff       	call   c001d040 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d12c:	89 c2                	mov    edx,eax
c001d12e:	ed                   	in     eax,dx
c001d12f:	83 e3 02             	and    ebx,0x2
c001d132:	83 c4 20             	add    esp,0x20
c001d135:	0f b6 cb             	movzx  ecx,bl
c001d138:	c1 e1 03             	shl    ecx,0x3
c001d13b:	d3 e8                	shr    eax,cl
c001d13d:	eb 12                	jmp    c001d151 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	68 eb 5d 02 c0       	push   0xc0025deb
c001d147:	e8 17 76 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	31 c0                	xor    eax,eax
c001d151:	5b                   	pop    ebx
c001d152:	5e                   	pop    esi
c001d153:	5f                   	pop    edi
c001d154:	c3                   	ret    
c001d155:	90                   	nop

c001d156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d156:	83 ec 18             	sub    esp,0x18
c001d159:	6a 00                	push   0x0
c001d15b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d160:	50                   	push   eax
c001d161:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d166:	50                   	push   eax
c001d167:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d16c:	50                   	push   eax
c001d16d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d171:	e8 38 ff ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d176:	83 c4 2c             	add    esp,0x2c
c001d179:	c3                   	ret    

c001d17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d17a:	83 ec 18             	sub    esp,0x18
c001d17d:	6a 0e                	push   0xe
c001d17f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d184:	50                   	push   eax
c001d185:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d18a:	50                   	push   eax
c001d18b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d190:	50                   	push   eax
c001d191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d195:	e8 14 ff ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d19a:	83 c4 2c             	add    esp,0x2c
c001d19d:	0f b6 c0             	movzx  eax,al
c001d1a0:	c3                   	ret    
c001d1a1:	90                   	nop

c001d1a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d1a2:	55                   	push   ebp
c001d1a3:	57                   	push   edi
c001d1a4:	56                   	push   esi
c001d1a5:	53                   	push   ebx
c001d1a6:	83 ec 18             	sub    esp,0x18
c001d1a9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d1ae:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d1b3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d1b8:	6a 0a                	push   0xa
c001d1ba:	56                   	push   esi
c001d1bb:	55                   	push   ebp
c001d1bc:	57                   	push   edi
c001d1bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1c1:	e8 e8 fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1c6:	83 c4 14             	add    esp,0x14
c001d1c9:	89 c3                	mov    ebx,eax
c001d1cb:	6a 0a                	push   0xa
c001d1cd:	0f b6 db             	movzx  ebx,bl
c001d1d0:	56                   	push   esi
c001d1d1:	55                   	push   ebp
c001d1d2:	57                   	push   edi
c001d1d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1d7:	e8 d2 fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1dc:	83 c4 2c             	add    esp,0x2c
c001d1df:	25 00 ff 00 00       	and    eax,0xff00
c001d1e4:	09 d8                	or     eax,ebx
c001d1e6:	5b                   	pop    ebx
c001d1e7:	5e                   	pop    esi
c001d1e8:	5f                   	pop    edi
c001d1e9:	5d                   	pop    ebp
c001d1ea:	c3                   	ret    
c001d1eb:	90                   	nop

c001d1ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d1ec:	83 ec 18             	sub    esp,0x18
c001d1ef:	6a 08                	push   0x8
c001d1f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d1f6:	50                   	push   eax
c001d1f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d1fc:	50                   	push   eax
c001d1fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d202:	50                   	push   eax
c001d203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d207:	e8 a2 fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d20c:	83 c4 2c             	add    esp,0x2c
c001d20f:	0f b6 c4             	movzx  eax,ah
c001d212:	c3                   	ret    
c001d213:	90                   	nop

c001d214 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d214:	83 ec 18             	sub    esp,0x18
c001d217:	6a 08                	push   0x8
c001d219:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d21e:	50                   	push   eax
c001d21f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d224:	50                   	push   eax
c001d225:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d22a:	50                   	push   eax
c001d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d22f:	e8 7a fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d234:	83 c4 2c             	add    esp,0x2c
c001d237:	c3                   	ret    

c001d238 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d238:	83 ec 18             	sub    esp,0x18
c001d23b:	6a 3c                	push   0x3c
c001d23d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d242:	50                   	push   eax
c001d243:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d248:	50                   	push   eax
c001d249:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d24e:	50                   	push   eax
c001d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d253:	e8 56 fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d258:	83 c4 2c             	add    esp,0x2c
c001d25b:	c3                   	ret    

c001d25c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d25c:	83 ec 18             	sub    esp,0x18
c001d25f:	6a 18                	push   0x18
c001d261:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d266:	50                   	push   eax
c001d267:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d26c:	50                   	push   eax
c001d26d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d272:	50                   	push   eax
c001d273:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d277:	e8 32 fe ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d27c:	83 c4 2c             	add    esp,0x2c
c001d27f:	0f b6 c4             	movzx  eax,ah
c001d282:	c3                   	ret    
c001d283:	90                   	nop

c001d284 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d284:	55                   	push   ebp
c001d285:	57                   	push   edi
c001d286:	56                   	push   esi
c001d287:	53                   	push   ebx
c001d288:	83 ec 28             	sub    esp,0x28
c001d28b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d28f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d294:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d299:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d29e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d2a5:	8d 43 12             	lea    eax,[ebx+0x12]
c001d2a8:	83 c3 10             	add    ebx,0x10
c001d2ab:	0f b6 c0             	movzx  eax,al
c001d2ae:	0f b6 db             	movzx  ebx,bl
c001d2b1:	50                   	push   eax
c001d2b2:	51                   	push   ecx
c001d2b3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d2b7:	57                   	push   edi
c001d2b8:	55                   	push   ebp
c001d2b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2bd:	e8 ec fd ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2c2:	83 c4 14             	add    esp,0x14
c001d2c5:	89 c6                	mov    esi,eax
c001d2c7:	53                   	push   ebx
c001d2c8:	c1 e6 10             	shl    esi,0x10
c001d2cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2cf:	51                   	push   ecx
c001d2d0:	57                   	push   edi
c001d2d1:	55                   	push   ebp
c001d2d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2d6:	e8 d3 fd ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2db:	83 c4 3c             	add    esp,0x3c
c001d2de:	0f b7 c0             	movzx  eax,ax
c001d2e1:	5b                   	pop    ebx
c001d2e2:	09 f0                	or     eax,esi
c001d2e4:	5e                   	pop    esi
c001d2e5:	5f                   	pop    edi
c001d2e6:	5d                   	pop    ebp
c001d2e7:	c3                   	ret    

c001d2e8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d2e8:	55                   	push   ebp
c001d2e9:	57                   	push   edi
c001d2ea:	56                   	push   esi
c001d2eb:	53                   	push   ebx
c001d2ec:	83 ec 0c             	sub    esp,0xc
c001d2ef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d2f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d2f7:	89 f5                	mov    ebp,esi
c001d2f9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d2ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d303:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d307:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d30b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d30f:	83 f9 01             	cmp    ecx,0x1
c001d312:	75 5d                	jne    c001d371 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d314:	0f b6 c8             	movzx  ecx,al
c001d317:	0f b6 d2             	movzx  edx,dl
c001d31a:	c1 e1 10             	shl    ecx,0x10
c001d31d:	c1 e2 0b             	shl    edx,0xb
c001d320:	89 f0                	mov    eax,esi
c001d322:	25 fc 00 00 00       	and    eax,0xfc
c001d327:	09 c1                	or     ecx,eax
c001d329:	89 e8                	mov    eax,ebp
c001d32b:	0f b6 c0             	movzx  eax,al
c001d32e:	c1 e0 08             	shl    eax,0x8
c001d331:	09 c1                	or     ecx,eax
c001d333:	09 d1                	or     ecx,edx
c001d335:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d33a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d340:	89 c8                	mov    eax,ecx
c001d342:	ef                   	out    dx,eax
c001d343:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d348:	ed                   	in     eax,dx
c001d349:	0f b7 db             	movzx  ebx,bx
c001d34c:	83 e6 02             	and    esi,0x2
c001d34f:	74 0a                	je     c001d35b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d351:	0f b7 d0             	movzx  edx,ax
c001d354:	c1 e3 10             	shl    ebx,0x10
c001d357:	09 d3                	or     ebx,edx
c001d359:	eb 05                	jmp    c001d360 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d35b:	66 31 c0             	xor    ax,ax
c001d35e:	09 c3                	or     ebx,eax
c001d360:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d365:	89 c8                	mov    eax,ecx
c001d367:	ef                   	out    dx,eax
c001d368:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d36d:	89 d8                	mov    eax,ebx
c001d36f:	eb 41                	jmp    c001d3b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d371:	83 f9 02             	cmp    ecx,0x2
c001d374:	75 45                	jne    c001d3bb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	0f b6 d2             	movzx  edx,dl
c001d37c:	89 f1                	mov    ecx,esi
c001d37e:	0f b6 c0             	movzx  eax,al
c001d381:	0f b6 f1             	movzx  esi,cl
c001d384:	89 e9                	mov    ecx,ebp
c001d386:	56                   	push   esi
c001d387:	0f b6 c9             	movzx  ecx,cl
c001d38a:	51                   	push   ecx
c001d38b:	52                   	push   edx
c001d38c:	50                   	push   eax
c001d38d:	57                   	push   edi
c001d38e:	e8 ad fc ff ff       	call   c001d040 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d393:	89 c2                	mov    edx,eax
c001d395:	ed                   	in     eax,dx
c001d396:	83 c4 20             	add    esp,0x20
c001d399:	0f b7 db             	movzx  ebx,bx
c001d39c:	f6 c2 02             	test   dl,0x2
c001d39f:	74 0c                	je     c001d3ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d3a1:	0f b7 c8             	movzx  ecx,ax
c001d3a4:	89 d8                	mov    eax,ebx
c001d3a6:	c1 e0 10             	shl    eax,0x10
c001d3a9:	09 c8                	or     eax,ecx
c001d3ab:	eb 05                	jmp    c001d3b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d3ad:	66 31 c0             	xor    ax,ax
c001d3b0:	09 d8                	or     eax,ebx
c001d3b2:	ef                   	out    dx,eax
c001d3b3:	83 c4 0c             	add    esp,0xc
c001d3b6:	5b                   	pop    ebx
c001d3b7:	5e                   	pop    esi
c001d3b8:	5f                   	pop    edi
c001d3b9:	5d                   	pop    ebp
c001d3ba:	c3                   	ret    
c001d3bb:	c7 44 24 20 eb 5d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025deb
c001d3c3:	83 c4 0c             	add    esp,0xc
c001d3c6:	5b                   	pop    ebx
c001d3c7:	5e                   	pop    esi
c001d3c8:	5f                   	pop    edi
c001d3c9:	5d                   	pop    ebp
c001d3ca:	e9 94 73 ff ff       	jmp    c0014763 <Krnl::panic(char const*)>
c001d3cf:	90                   	nop

c001d3d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d3d0:	55                   	push   ebp
c001d3d1:	57                   	push   edi
c001d3d2:	56                   	push   esi
c001d3d3:	53                   	push   ebx
c001d3d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d3da:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d3e1:	75 0f                	jne    c001d3f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d3e3:	80 3d 8c 93 02 c0 00 	cmp    BYTE PTR ds:0xc002938c,0x0
c001d3ea:	0f 85 e4 00 00 00    	jne    c001d4d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x104>
c001d3f0:	eb 26                	jmp    c001d418 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x48>
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	68 f1 5d 02 c0       	push   0xc0025df1
c001d3fa:	e8 1e c6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d3ff:	83 c4 10             	add    esp,0x10
c001d402:	e4 60                	in     al,0x60
c001d404:	3c 1c                	cmp    al,0x1c
c001d406:	74 04                	je     c001d40c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3c>
c001d408:	3c 5a                	cmp    al,0x5a
c001d40a:	75 f6                	jne    c001d402 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x32>
c001d40c:	e4 60                	in     al,0x60
c001d40e:	3c 5a                	cmp    al,0x5a
c001d410:	74 fa                	je     c001d40c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3c>
c001d412:	3c 1c                	cmp    al,0x1c
c001d414:	74 f6                	je     c001d40c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3c>
c001d416:	eb cb                	jmp    c001d3e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d418:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d41f:	0f 85 86 00 00 00    	jne    c001d4ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	68 14 01 00 00       	push   0x114
c001d42d:	e8 91 c5 fe ff       	call   c00099c3 <malloc>
c001d432:	83 c4 0c             	add    esp,0xc
c001d435:	89 c3                	mov    ebx,eax
c001d437:	ff 35 90 89 02 c0    	push   DWORD PTR ds:0xc0028990
c001d43d:	68 0b 5e 02 c0       	push   0xc0025e0b
c001d442:	50                   	push   eax
c001d443:	e8 66 fd fe ff       	call   c000d1ae <File::File(char const*, Process*)>
c001d448:	5a                   	pop    edx
c001d449:	59                   	pop    ecx
c001d44a:	6a 01                	push   0x1
c001d44c:	53                   	push   ebx
c001d44d:	e8 c0 fd fe ff       	call   c000d212 <File::open(FileOpenMode)>
c001d452:	83 c4 0c             	add    esp,0xc
c001d455:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d459:	50                   	push   eax
c001d45a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d45e:	50                   	push   eax
c001d45f:	53                   	push   ebx
c001d460:	e8 59 00 ff ff       	call   c000d4be <File::stat(unsigned long long*, bool*)>
c001d465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d469:	40                   	inc    eax
c001d46a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d46d:	e8 51 c5 fe ff       	call   c00099c3 <malloc>
c001d472:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d476:	a3 88 93 02 c0       	mov    ds:0xc0029388,eax
c001d47b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d47f:	5e                   	pop    esi
c001d480:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d482:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d486:	51                   	push   ecx
c001d487:	50                   	push   eax
c001d488:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d48c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d490:	53                   	push   ebx
c001d491:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d494:	83 c4 14             	add    esp,0x14
c001d497:	53                   	push   ebx
c001d498:	e8 d3 fd fe ff       	call   c000d270 <File::close()>
c001d49d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	a3 84 93 02 c0       	mov    ds:0xc0029384,eax
c001d4a9:	eb 29                	jmp    c001d4d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x104>
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	68 24 5e 02 c0       	push   0xc0025e24
c001d4b3:	e8 65 c5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d4b8:	83 c4 10             	add    esp,0x10
c001d4bb:	e4 60                	in     al,0x60
c001d4bd:	3c 1c                	cmp    al,0x1c
c001d4bf:	74 04                	je     c001d4c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf5>
c001d4c1:	3c 5a                	cmp    al,0x5a
c001d4c3:	75 f6                	jne    c001d4bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xeb>
c001d4c5:	e4 60                	in     al,0x60
c001d4c7:	3c 5a                	cmp    al,0x5a
c001d4c9:	74 fa                	je     c001d4c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf5>
c001d4cb:	3c 1c                	cmp    al,0x1c
c001d4cd:	74 f6                	je     c001d4c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf5>
c001d4cf:	e9 51 ff ff ff       	jmp    c001d425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x55>
c001d4d4:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d4db:	75 0b                	jne    c001d4e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001d4dd:	31 f6                	xor    esi,esi
c001d4df:	31 db                	xor    ebx,ebx
c001d4e1:	31 ed                	xor    ebp,ebp
c001d4e3:	e9 88 01 00 00       	jmp    c001d670 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a0>
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	68 36 5e 02 c0       	push   0xc0025e36
c001d4f0:	e8 28 c5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	e4 60                	in     al,0x60
c001d4fa:	3c 1c                	cmp    al,0x1c
c001d4fc:	74 04                	je     c001d502 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x132>
c001d4fe:	3c 5a                	cmp    al,0x5a
c001d500:	75 f6                	jne    c001d4f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x128>
c001d502:	e4 60                	in     al,0x60
c001d504:	3c 5a                	cmp    al,0x5a
c001d506:	74 fa                	je     c001d502 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x132>
c001d508:	3c 1c                	cmp    al,0x1c
c001d50a:	74 f6                	je     c001d502 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x132>
c001d50c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d513:	74 c8                	je     c001d4dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10d>
c001d515:	83 ec 0c             	sub    esp,0xc
c001d518:	68 3b 5e 02 c0       	push   0xc0025e3b
c001d51d:	e8 fb c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	e4 60                	in     al,0x60
c001d527:	3c 5a                	cmp    al,0x5a
c001d529:	74 04                	je     c001d52f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15f>
c001d52b:	3c 1c                	cmp    al,0x1c
c001d52d:	75 f6                	jne    c001d525 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d52f:	e4 60                	in     al,0x60
c001d531:	3c 5a                	cmp    al,0x5a
c001d533:	74 fa                	je     c001d52f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15f>
c001d535:	3c 1c                	cmp    al,0x1c
c001d537:	74 f6                	je     c001d52f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15f>
c001d539:	eb a2                	jmp    c001d4dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10d>
c001d53b:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d542:	0f 85 39 01 00 00    	jne    c001d681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b1>
c001d548:	a1 88 93 02 c0       	mov    eax,ds:0xc0029388
c001d54d:	8d 7e 01             	lea    edi,[esi+0x1]
c001d550:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d553:	d4 40                	aam    0x40
c001d555:	d5 39                	aad    0x39
c001d557:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d55e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d562:	0f 85 42 01 00 00    	jne    c001d6aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2da>
c001d568:	8b 15 88 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029388
c001d56e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d571:	d4 40                	aam    0x40
c001d573:	d5 39                	aad    0x39
c001d575:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d579:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d57d:	d4 40                	aam    0x40
c001d57f:	d5 39                	aad    0x39
c001d581:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d585:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d589:	d4 40                	aam    0x40
c001d58b:	d5 39                	aad    0x39
c001d58d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d591:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d595:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d599:	3c 56                	cmp    al,0x56
c001d59b:	74 49                	je     c001d5e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001d59d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d5a1:	d4 40                	aam    0x40
c001d5a3:	d5 39                	aad    0x39
c001d5a5:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d5a8:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d5ac:	0f b6 c9             	movzx  ecx,cl
c001d5af:	c1 e1 04             	shl    ecx,0x4
c001d5b2:	d4 40                	aam    0x40
c001d5b4:	d5 39                	aad    0x39
c001d5b6:	83 e8 30             	sub    eax,0x30
c001d5b9:	0f b6 c0             	movzx  eax,al
c001d5bc:	09 c1                	or     ecx,eax
c001d5be:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d5c2:	c1 e1 04             	shl    ecx,0x4
c001d5c5:	d4 40                	aam    0x40
c001d5c7:	d5 39                	aad    0x39
c001d5c9:	83 e8 30             	sub    eax,0x30
c001d5cc:	0f b6 c0             	movzx  eax,al
c001d5cf:	09 c1                	or     ecx,eax
c001d5d1:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d5d5:	c1 e1 04             	shl    ecx,0x4
c001d5d8:	d4 40                	aam    0x40
c001d5da:	d5 39                	aad    0x39
c001d5dc:	83 e8 30             	sub    eax,0x30
c001d5df:	0f b6 c0             	movzx  eax,al
c001d5e2:	09 c8                	or     eax,ecx
c001d5e4:	89 c5                	mov    ebp,eax
c001d5e6:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d5ea:	80 f9 44             	cmp    cl,0x44
c001d5ed:	74 47                	je     c001d636 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x266>
c001d5ef:	88 c8                	mov    al,cl
c001d5f1:	d4 40                	aam    0x40
c001d5f3:	d5 39                	aad    0x39
c001d5f5:	83 e8 30             	sub    eax,0x30
c001d5f8:	0f b6 f8             	movzx  edi,al
c001d5fb:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d5ff:	c1 e7 04             	shl    edi,0x4
c001d602:	d4 40                	aam    0x40
c001d604:	d5 39                	aad    0x39
c001d606:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d609:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d60d:	0f b6 db             	movzx  ebx,bl
c001d610:	09 fb                	or     ebx,edi
c001d612:	c1 e3 04             	shl    ebx,0x4
c001d615:	d4 40                	aam    0x40
c001d617:	d5 39                	aad    0x39
c001d619:	83 e8 30             	sub    eax,0x30
c001d61c:	0f b6 f8             	movzx  edi,al
c001d61f:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d623:	09 fb                	or     ebx,edi
c001d625:	89 df                	mov    edi,ebx
c001d627:	c1 e7 04             	shl    edi,0x4
c001d62a:	d4 40                	aam    0x40
c001d62c:	d5 39                	aad    0x39
c001d62e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d631:	0f b6 db             	movzx  ebx,bl
c001d634:	09 fb                	or     ebx,edi
c001d636:	a1 84 93 02 c0       	mov    eax,ds:0xc0029384
c001d63b:	83 c6 10             	add    esi,0x10
c001d63e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d642:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d646:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d649:	3c 0a                	cmp    al,0xa
c001d64b:	0f 85 82 00 00 00    	jne    c001d6d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x303>
c001d651:	3c 0a                	cmp    al,0xa
c001d653:	0f 94 c0             	sete   al
c001d656:	0f b6 c0             	movzx  eax,al
c001d659:	01 c6                	add    esi,eax
c001d65b:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d660:	0f 84 84 00 00 00    	je     c001d6ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x31a>
c001d666:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d66e:	74 7a                	je     c001d6ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x31a>
c001d670:	39 35 84 93 02 c0    	cmp    DWORD PTR ds:0xc0029384,esi
c001d676:	0f 8f bf fe ff ff    	jg     c001d53b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x16b>
c001d67c:	e9 ce 00 00 00       	jmp    c001d74f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x37f>
c001d681:	83 ec 0c             	sub    esp,0xc
c001d684:	68 42 5e 02 c0       	push   0xc0025e42
c001d689:	e8 8f c3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d68e:	83 c4 10             	add    esp,0x10
c001d691:	e4 60                	in     al,0x60
c001d693:	3c 5a                	cmp    al,0x5a
c001d695:	74 04                	je     c001d69b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2cb>
c001d697:	3c 1c                	cmp    al,0x1c
c001d699:	75 f6                	jne    c001d691 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2c1>
c001d69b:	e4 60                	in     al,0x60
c001d69d:	3c 5a                	cmp    al,0x5a
c001d69f:	74 fa                	je     c001d69b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2cb>
c001d6a1:	3c 1c                	cmp    al,0x1c
c001d6a3:	74 f6                	je     c001d69b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2cb>
c001d6a5:	e9 9e fe ff ff       	jmp    c001d548 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x178>
c001d6aa:	83 ec 0c             	sub    esp,0xc
c001d6ad:	68 4a 5e 02 c0       	push   0xc0025e4a
c001d6b2:	e8 66 c3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d6b7:	83 c4 10             	add    esp,0x10
c001d6ba:	e4 60                	in     al,0x60
c001d6bc:	3c 5a                	cmp    al,0x5a
c001d6be:	74 04                	je     c001d6c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2f4>
c001d6c0:	3c 1c                	cmp    al,0x1c
c001d6c2:	75 f6                	jne    c001d6ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ea>
c001d6c4:	e4 60                	in     al,0x60
c001d6c6:	3c 5a                	cmp    al,0x5a
c001d6c8:	74 fa                	je     c001d6c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2f4>
c001d6ca:	3c 1c                	cmp    al,0x1c
c001d6cc:	74 f6                	je     c001d6c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2f4>
c001d6ce:	e9 95 fe ff ff       	jmp    c001d568 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d6d3:	47                   	inc    edi
c001d6d4:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d6d8:	0f 84 73 ff ff ff    	je     c001d651 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x281>
c001d6de:	46                   	inc    esi
c001d6df:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d6e2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d6e5:	e9 5c ff ff ff       	jmp    c001d646 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x276>
c001d6ea:	80 f9 44             	cmp    cl,0x44
c001d6ed:	74 0e                	je     c001d6fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x32d>
c001d6ef:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d6f7:	0f 85 73 ff ff ff    	jne    c001d670 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a0>
c001d6fd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d701:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d705:	c1 e0 04             	shl    eax,0x4
c001d708:	83 ea 30             	sub    edx,0x30
c001d70b:	09 d0                	or     eax,edx
c001d70d:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d714:	0f 85 56 ff ff ff    	jne    c001d670 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a0>
c001d71a:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d71e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d722:	c1 e2 04             	shl    edx,0x4
c001d725:	83 e8 30             	sub    eax,0x30
c001d728:	09 d0                	or     eax,edx
c001d72a:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d731:	0f 85 39 ff ff ff    	jne    c001d670 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a0>
c001d737:	50                   	push   eax
c001d738:	50                   	push   eax
c001d739:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d73d:	50                   	push   eax
c001d73e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d745:	e8 f6 2f fe ff       	call   c0000740 <strcpy>
c001d74a:	83 c4 10             	add    esp,0x10
c001d74d:	eb 15                	jmp    c001d764 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x394>
c001d74f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d756:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d761:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d764:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d76b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d771:	5b                   	pop    ebx
c001d772:	5e                   	pop    esi
c001d773:	5f                   	pop    edi
c001d774:	5d                   	pop    ebp
c001d775:	c3                   	ret    

c001d776 <PCI::checkBus(unsigned char)>:
c001d776:	57                   	push   edi
c001d777:	56                   	push   esi
c001d778:	53                   	push   ebx
c001d779:	83 ec 48             	sub    esp,0x48
c001d77c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001d780:	68 53 5e 02 c0       	push   0xc0025e53
c001d785:	89 fe                	mov    esi,edi
c001d787:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001d78b:	53                   	push   ebx
c001d78c:	e8 af 2f fe ff       	call   c0000740 <strcpy>
c001d791:	b1 64                	mov    cl,0x64
c001d793:	89 f8                	mov    eax,edi
c001d795:	0f b6 d0             	movzx  edx,al
c001d798:	89 d0                	mov    eax,edx
c001d79a:	f6 f1                	div    cl
c001d79c:	b1 0a                	mov    cl,0xa
c001d79e:	83 c0 30             	add    eax,0x30
c001d7a1:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	89 d0                	mov    eax,edx
c001d7aa:	f6 f1                	div    cl
c001d7ac:	89 c2                	mov    edx,eax
c001d7ae:	0f b6 c0             	movzx  eax,al
c001d7b1:	88 f2                	mov    dl,dh
c001d7b3:	f6 f1                	div    cl
c001d7b5:	83 c2 30             	add    edx,0x30
c001d7b8:	88 e0                	mov    al,ah
c001d7ba:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001d7be:	83 c0 30             	add    eax,0x30
c001d7c1:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d7c8:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001d7cc:	74 20                	je     c001d7ee <PCI::checkBus(unsigned char)+0x78>
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	53                   	push   ebx
c001d7d2:	e8 46 c2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	e4 60                	in     al,0x60
c001d7dc:	3c 1c                	cmp    al,0x1c
c001d7de:	74 04                	je     c001d7e4 <PCI::checkBus(unsigned char)+0x6e>
c001d7e0:	3c 5a                	cmp    al,0x5a
c001d7e2:	75 f6                	jne    c001d7da <PCI::checkBus(unsigned char)+0x64>
c001d7e4:	e4 60                	in     al,0x60
c001d7e6:	3c 5a                	cmp    al,0x5a
c001d7e8:	74 fa                	je     c001d7e4 <PCI::checkBus(unsigned char)+0x6e>
c001d7ea:	3c 1c                	cmp    al,0x1c
c001d7ec:	74 f6                	je     c001d7e4 <PCI::checkBus(unsigned char)+0x6e>
c001d7ee:	89 f0                	mov    eax,esi
c001d7f0:	31 db                	xor    ebx,ebx
c001d7f2:	0f b6 f0             	movzx  esi,al
c001d7f5:	52                   	push   edx
c001d7f6:	52                   	push   edx
c001d7f7:	68 62 5e 02 c0       	push   0xc0025e62
c001d7fc:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d800:	57                   	push   edi
c001d801:	e8 3a 2f fe ff       	call   c0000740 <strcpy>
c001d806:	83 c4 10             	add    esp,0x10
c001d809:	b2 0a                	mov    dl,0xa
c001d80b:	0f b6 c3             	movzx  eax,bl
c001d80e:	f6 f2                	div    dl
c001d810:	8d 50 30             	lea    edx,[eax+0x30]
c001d813:	88 e0                	mov    al,ah
c001d815:	88 54 24 20          	mov    BYTE PTR [esp+0x20],dl
c001d819:	83 c0 30             	add    eax,0x30
c001d81c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d823:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001d827:	74 20                	je     c001d849 <PCI::checkBus(unsigned char)+0xd3>
c001d829:	83 ec 0c             	sub    esp,0xc
c001d82c:	57                   	push   edi
c001d82d:	e8 eb c1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d832:	83 c4 10             	add    esp,0x10
c001d835:	e4 60                	in     al,0x60
c001d837:	3c 1c                	cmp    al,0x1c
c001d839:	74 04                	je     c001d83f <PCI::checkBus(unsigned char)+0xc9>
c001d83b:	3c 5a                	cmp    al,0x5a
c001d83d:	75 f6                	jne    c001d835 <PCI::checkBus(unsigned char)+0xbf>
c001d83f:	e4 60                	in     al,0x60
c001d841:	3c 5a                	cmp    al,0x5a
c001d843:	74 fa                	je     c001d83f <PCI::checkBus(unsigned char)+0xc9>
c001d845:	3c 1c                	cmp    al,0x1c
c001d847:	74 f6                	je     c001d83f <PCI::checkBus(unsigned char)+0xc9>
c001d849:	50                   	push   eax
c001d84a:	53                   	push   ebx
c001d84b:	43                   	inc    ebx
c001d84c:	56                   	push   esi
c001d84d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d851:	e8 8c 0a 00 00       	call   c001e2e2 <PCI::checkDevice(unsigned char, unsigned char)>
c001d856:	83 c4 10             	add    esp,0x10
c001d859:	83 fb 20             	cmp    ebx,0x20
c001d85c:	75 97                	jne    c001d7f5 <PCI::checkBus(unsigned char)+0x7f>
c001d85e:	83 c4 40             	add    esp,0x40
c001d861:	5b                   	pop    ebx
c001d862:	5e                   	pop    esi
c001d863:	5f                   	pop    edi
c001d864:	c3                   	ret    
c001d865:	90                   	nop

c001d866 <PCI::foundDevice(PCIDeviceInfo)>:
c001d866:	55                   	push   ebp
c001d867:	57                   	push   edi
c001d868:	56                   	push   esi
c001d869:	53                   	push   ebx
c001d86a:	83 ec 1c             	sub    esp,0x1c
c001d86d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d871:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d878:	75 0d                	jne    c001d887 <PCI::foundDevice(PCIDeviceInfo)+0x21>
c001d87a:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d880:	75 2b                	jne    c001d8ad <PCI::foundDevice(PCIDeviceInfo)+0x47>
c001d882:	e9 3d 05 00 00       	jmp    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001d887:	83 ec 0c             	sub    esp,0xc
c001d88a:	68 75 5e 02 c0       	push   0xc0025e75
c001d88f:	e8 89 c1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d894:	83 c4 10             	add    esp,0x10
c001d897:	e4 60                	in     al,0x60
c001d899:	3c 5a                	cmp    al,0x5a
c001d89b:	74 04                	je     c001d8a1 <PCI::foundDevice(PCIDeviceInfo)+0x3b>
c001d89d:	3c 1c                	cmp    al,0x1c
c001d89f:	75 f6                	jne    c001d897 <PCI::foundDevice(PCIDeviceInfo)+0x31>
c001d8a1:	e4 60                	in     al,0x60
c001d8a3:	3c 5a                	cmp    al,0x5a
c001d8a5:	74 fa                	je     c001d8a1 <PCI::foundDevice(PCIDeviceInfo)+0x3b>
c001d8a7:	3c 1c                	cmp    al,0x1c
c001d8a9:	74 f6                	je     c001d8a1 <PCI::foundDevice(PCIDeviceInfo)+0x3b>
c001d8ab:	eb cd                	jmp    c001d87a <PCI::foundDevice(PCIDeviceInfo)+0x14>
c001d8ad:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d8b4:	75 11                	jne    c001d8c7 <PCI::foundDevice(PCIDeviceInfo)+0x61>
c001d8b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d8ba:	66 81 f9 06 04       	cmp    cx,0x406
c001d8bf:	0f 85 f1 00 00 00    	jne    c001d9b6 <PCI::foundDevice(PCIDeviceInfo)+0x150>
c001d8c5:	eb 26                	jmp    c001d8ed <PCI::foundDevice(PCIDeviceInfo)+0x87>
c001d8c7:	83 ec 0c             	sub    esp,0xc
c001d8ca:	68 85 5e 02 c0       	push   0xc0025e85
c001d8cf:	e8 49 c1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d8d4:	83 c4 10             	add    esp,0x10
c001d8d7:	e4 60                	in     al,0x60
c001d8d9:	3c 5a                	cmp    al,0x5a
c001d8db:	74 04                	je     c001d8e1 <PCI::foundDevice(PCIDeviceInfo)+0x7b>
c001d8dd:	3c 1c                	cmp    al,0x1c
c001d8df:	75 f6                	jne    c001d8d7 <PCI::foundDevice(PCIDeviceInfo)+0x71>
c001d8e1:	e4 60                	in     al,0x60
c001d8e3:	3c 5a                	cmp    al,0x5a
c001d8e5:	74 fa                	je     c001d8e1 <PCI::foundDevice(PCIDeviceInfo)+0x7b>
c001d8e7:	3c 1c                	cmp    al,0x1c
c001d8e9:	74 f6                	je     c001d8e1 <PCI::foundDevice(PCIDeviceInfo)+0x7b>
c001d8eb:	eb c9                	jmp    c001d8b6 <PCI::foundDevice(PCIDeviceInfo)+0x50>
c001d8ed:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d8f4:	75 28                	jne    c001d91e <PCI::foundDevice(PCIDeviceInfo)+0xb8>
c001d8f6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d8fb:	50                   	push   eax
c001d8fc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d901:	50                   	push   eax
c001d902:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d907:	50                   	push   eax
c001d908:	53                   	push   ebx
c001d909:	e8 4e f9 ff ff       	call   c001d25c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d90e:	83 c4 10             	add    esp,0x10
c001d911:	89 c6                	mov    esi,eax
c001d913:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d91a:	74 48                	je     c001d964 <PCI::foundDevice(PCIDeviceInfo)+0xfe>
c001d91c:	eb 26                	jmp    c001d944 <PCI::foundDevice(PCIDeviceInfo)+0xde>
c001d91e:	83 ec 0c             	sub    esp,0xc
c001d921:	68 95 5e 02 c0       	push   0xc0025e95
c001d926:	e8 f2 c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d92b:	83 c4 10             	add    esp,0x10
c001d92e:	e4 60                	in     al,0x60
c001d930:	3c 5a                	cmp    al,0x5a
c001d932:	74 04                	je     c001d938 <PCI::foundDevice(PCIDeviceInfo)+0xd2>
c001d934:	3c 1c                	cmp    al,0x1c
c001d936:	75 f6                	jne    c001d92e <PCI::foundDevice(PCIDeviceInfo)+0xc8>
c001d938:	e4 60                	in     al,0x60
c001d93a:	3c 5a                	cmp    al,0x5a
c001d93c:	74 fa                	je     c001d938 <PCI::foundDevice(PCIDeviceInfo)+0xd2>
c001d93e:	3c 1c                	cmp    al,0x1c
c001d940:	74 f6                	je     c001d938 <PCI::foundDevice(PCIDeviceInfo)+0xd2>
c001d942:	eb b2                	jmp    c001d8f6 <PCI::foundDevice(PCIDeviceInfo)+0x90>
c001d944:	83 ec 0c             	sub    esp,0xc
c001d947:	68 9c 5e 02 c0       	push   0xc0025e9c
c001d94c:	e8 cc c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	e4 60                	in     al,0x60
c001d956:	3c 5a                	cmp    al,0x5a
c001d958:	75 3a                	jne    c001d994 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001d95a:	e4 60                	in     al,0x60
c001d95c:	3c 5a                	cmp    al,0x5a
c001d95e:	74 fa                	je     c001d95a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d960:	3c 1c                	cmp    al,0x1c
c001d962:	74 f6                	je     c001d95a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d964:	89 f0                	mov    eax,esi
c001d966:	55                   	push   ebp
c001d967:	0f b6 f0             	movzx  esi,al
c001d96a:	55                   	push   ebp
c001d96b:	56                   	push   esi
c001d96c:	53                   	push   ebx
c001d96d:	e8 04 fe ff ff       	call   c001d776 <PCI::checkBus(unsigned char)>
c001d972:	83 c4 10             	add    esp,0x10
c001d975:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001d97c:	0f 84 42 04 00 00    	je     c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001d982:	83 ec 0c             	sub    esp,0xc
c001d985:	68 a3 5e 02 c0       	push   0xc0025ea3
c001d98a:	e8 8e c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	eb 0a                	jmp    c001d99e <PCI::foundDevice(PCIDeviceInfo)+0x138>
c001d994:	3c 1c                	cmp    al,0x1c
c001d996:	75 bc                	jne    c001d954 <PCI::foundDevice(PCIDeviceInfo)+0xee>
c001d998:	eb c0                	jmp    c001d95a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d99a:	3c 5a                	cmp    al,0x5a
c001d99c:	74 10                	je     c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d99e:	e4 60                	in     al,0x60
c001d9a0:	3c 1c                	cmp    al,0x1c
c001d9a2:	75 f6                	jne    c001d99a <PCI::foundDevice(PCIDeviceInfo)+0x134>
c001d9a4:	eb 08                	jmp    c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d9a6:	3c 1c                	cmp    al,0x1c
c001d9a8:	0f 85 16 04 00 00    	jne    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001d9ae:	e4 60                	in     al,0x60
c001d9b0:	3c 5a                	cmp    al,0x5a
c001d9b2:	74 fa                	je     c001d9ae <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d9b4:	eb f0                	jmp    c001d9a6 <PCI::foundDevice(PCIDeviceInfo)+0x140>
c001d9b6:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d9bc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d9c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d9c8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d9cc:	88 d0                	mov    al,dl
c001d9ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d9d3:	74 3b                	je     c001da10 <PCI::foundDevice(PCIDeviceInfo)+0x1aa>
c001d9d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9d9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d9dc:	85 d2                	test   edx,edx
c001d9de:	74 24                	je     c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x19e>
c001d9e0:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d9e6:	31 ef                	xor    edi,ebp
c001d9e8:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d9ee:	75 14                	jne    c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x19e>
c001d9f0:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d9f6:	75 0c                	jne    c001da04 <PCI::foundDevice(PCIDeviceInfo)+0x19e>
c001d9f8:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d9fe:	0f 84 c0 03 00 00    	je     c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001da04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001da08:	8b 12                	mov    edx,DWORD PTR [edx]
c001da0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da0e:	eb be                	jmp    c001d9ce <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001da10:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c001da15:	25 00 08 00 00       	and    eax,0x800
c001da1a:	66 81 f9 01 06       	cmp    cx,0x601
c001da1f:	0f 85 48 01 00 00    	jne    c001db6d <PCI::foundDevice(PCIDeviceInfo)+0x307>
c001da25:	85 c0                	test   eax,eax
c001da27:	75 25                	jne    c001da4e <PCI::foundDevice(PCIDeviceInfo)+0x1e8>
c001da29:	83 ec 0c             	sub    esp,0xc
c001da2c:	68 64 01 00 00       	push   0x164
c001da31:	e8 8d bf fe ff       	call   c00099c3 <malloc>
c001da36:	89 04 24             	mov    DWORD PTR [esp],eax
c001da39:	89 c5                	mov    ebp,eax
c001da3b:	e8 9e 17 00 00       	call   c001f1de <SATABus::SATABus()>
c001da40:	83 c4 10             	add    esp,0x10
c001da43:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001da4a:	74 48                	je     c001da94 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001da4c:	eb 26                	jmp    c001da74 <PCI::foundDevice(PCIDeviceInfo)+0x20e>
c001da4e:	83 ec 0c             	sub    esp,0xc
c001da51:	68 aa 5e 02 c0       	push   0xc0025eaa
c001da56:	e8 c2 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da5b:	83 c4 10             	add    esp,0x10
c001da5e:	e4 60                	in     al,0x60
c001da60:	3c 1c                	cmp    al,0x1c
c001da62:	74 04                	je     c001da68 <PCI::foundDevice(PCIDeviceInfo)+0x202>
c001da64:	3c 5a                	cmp    al,0x5a
c001da66:	75 f6                	jne    c001da5e <PCI::foundDevice(PCIDeviceInfo)+0x1f8>
c001da68:	e4 60                	in     al,0x60
c001da6a:	3c 5a                	cmp    al,0x5a
c001da6c:	74 fa                	je     c001da68 <PCI::foundDevice(PCIDeviceInfo)+0x202>
c001da6e:	3c 1c                	cmp    al,0x1c
c001da70:	74 f6                	je     c001da68 <PCI::foundDevice(PCIDeviceInfo)+0x202>
c001da72:	eb b5                	jmp    c001da29 <PCI::foundDevice(PCIDeviceInfo)+0x1c3>
c001da74:	83 ec 0c             	sub    esp,0xc
c001da77:	68 b0 5e 02 c0       	push   0xc0025eb0
c001da7c:	e8 9c bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da81:	83 c4 10             	add    esp,0x10
c001da84:	e4 60                	in     al,0x60
c001da86:	3c 1c                	cmp    al,0x1c
c001da88:	75 21                	jne    c001daab <PCI::foundDevice(PCIDeviceInfo)+0x245>
c001da8a:	e4 60                	in     al,0x60
c001da8c:	3c 5a                	cmp    al,0x5a
c001da8e:	74 fa                	je     c001da8a <PCI::foundDevice(PCIDeviceInfo)+0x224>
c001da90:	3c 1c                	cmp    al,0x1c
c001da92:	74 f6                	je     c001da8a <PCI::foundDevice(PCIDeviceInfo)+0x224>
c001da94:	57                   	push   edi
c001da95:	57                   	push   edi
c001da96:	55                   	push   ebp
c001da97:	53                   	push   ebx
c001da98:	e8 ed 05 ff ff       	call   c000e08a <Device::addChild(Device*)>
c001da9d:	83 c4 10             	add    esp,0x10
c001daa0:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001daa7:	74 28                	je     c001dad1 <PCI::foundDevice(PCIDeviceInfo)+0x26b>
c001daa9:	eb 06                	jmp    c001dab1 <PCI::foundDevice(PCIDeviceInfo)+0x24b>
c001daab:	3c 5a                	cmp    al,0x5a
c001daad:	75 d5                	jne    c001da84 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001daaf:	eb d9                	jmp    c001da8a <PCI::foundDevice(PCIDeviceInfo)+0x224>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	68 b8 5e 02 c0       	push   0xc0025eb8
c001dab9:	e8 5f bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	e4 60                	in     al,0x60
c001dac3:	3c 5a                	cmp    al,0x5a
c001dac5:	75 2f                	jne    c001daf6 <PCI::foundDevice(PCIDeviceInfo)+0x290>
c001dac7:	e4 60                	in     al,0x60
c001dac9:	3c 5a                	cmp    al,0x5a
c001dacb:	74 fa                	je     c001dac7 <PCI::foundDevice(PCIDeviceInfo)+0x261>
c001dacd:	3c 1c                	cmp    al,0x1c
c001dacf:	74 f6                	je     c001dac7 <PCI::foundDevice(PCIDeviceInfo)+0x261>
c001dad1:	83 ec 2c             	sub    esp,0x2c
c001dad4:	b9 09 00 00 00       	mov    ecx,0x9
c001dad9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dadd:	fc                   	cld    
c001dade:	89 e7                	mov    edi,esp
c001dae0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dae2:	55                   	push   ebp
c001dae3:	e8 b4 04 ff ff       	call   c000df9c <Device::preOpenPCI(PCIDeviceInfo)>
c001dae8:	83 c4 30             	add    esp,0x30
c001daeb:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001daf2:	74 28                	je     c001db1c <PCI::foundDevice(PCIDeviceInfo)+0x2b6>
c001daf4:	eb 06                	jmp    c001dafc <PCI::foundDevice(PCIDeviceInfo)+0x296>
c001daf6:	3c 1c                	cmp    al,0x1c
c001daf8:	75 c7                	jne    c001dac1 <PCI::foundDevice(PCIDeviceInfo)+0x25b>
c001dafa:	eb cb                	jmp    c001dac7 <PCI::foundDevice(PCIDeviceInfo)+0x261>
c001dafc:	83 ec 0c             	sub    esp,0xc
c001daff:	68 c0 5e 02 c0       	push   0xc0025ec0
c001db04:	e8 14 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	e4 60                	in     al,0x60
c001db0e:	3c 5a                	cmp    al,0x5a
c001db10:	75 39                	jne    c001db4b <PCI::foundDevice(PCIDeviceInfo)+0x2e5>
c001db12:	e4 60                	in     al,0x60
c001db14:	3c 5a                	cmp    al,0x5a
c001db16:	74 fa                	je     c001db12 <PCI::foundDevice(PCIDeviceInfo)+0x2ac>
c001db18:	3c 1c                	cmp    al,0x1c
c001db1a:	74 f6                	je     c001db12 <PCI::foundDevice(PCIDeviceInfo)+0x2ac>
c001db1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db1f:	6a 00                	push   0x0
c001db21:	6a 00                	push   0x0
c001db23:	6a 00                	push   0x0
c001db25:	55                   	push   ebp
c001db26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001db33:	0f 84 8b 02 00 00    	je     c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001db39:	83 ec 0c             	sub    esp,0xc
c001db3c:	68 c8 5e 02 c0       	push   0xc0025ec8
c001db41:	e8 d7 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001db46:	83 c4 10             	add    esp,0x10
c001db49:	eb 0a                	jmp    c001db55 <PCI::foundDevice(PCIDeviceInfo)+0x2ef>
c001db4b:	3c 1c                	cmp    al,0x1c
c001db4d:	75 bd                	jne    c001db0c <PCI::foundDevice(PCIDeviceInfo)+0x2a6>
c001db4f:	eb c1                	jmp    c001db12 <PCI::foundDevice(PCIDeviceInfo)+0x2ac>
c001db51:	3c 1c                	cmp    al,0x1c
c001db53:	74 10                	je     c001db65 <PCI::foundDevice(PCIDeviceInfo)+0x2ff>
c001db55:	e4 60                	in     al,0x60
c001db57:	3c 5a                	cmp    al,0x5a
c001db59:	75 f6                	jne    c001db51 <PCI::foundDevice(PCIDeviceInfo)+0x2eb>
c001db5b:	eb 08                	jmp    c001db65 <PCI::foundDevice(PCIDeviceInfo)+0x2ff>
c001db5d:	3c 1c                	cmp    al,0x1c
c001db5f:	0f 85 5f 02 00 00    	jne    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001db65:	e4 60                	in     al,0x60
c001db67:	3c 5a                	cmp    al,0x5a
c001db69:	74 fa                	je     c001db65 <PCI::foundDevice(PCIDeviceInfo)+0x2ff>
c001db6b:	eb f0                	jmp    c001db5d <PCI::foundDevice(PCIDeviceInfo)+0x2f7>
c001db6d:	66 81 f9 01 01       	cmp    cx,0x101
c001db72:	0f 85 48 01 00 00    	jne    c001dcc0 <PCI::foundDevice(PCIDeviceInfo)+0x45a>
c001db78:	85 c0                	test   eax,eax
c001db7a:	75 25                	jne    c001dba1 <PCI::foundDevice(PCIDeviceInfo)+0x33b>
c001db7c:	83 ec 0c             	sub    esp,0xc
c001db7f:	68 70 02 00 00       	push   0x270
c001db84:	e8 3a be fe ff       	call   c00099c3 <malloc>
c001db89:	89 04 24             	mov    DWORD PTR [esp],eax
c001db8c:	89 c5                	mov    ebp,eax
c001db8e:	e8 ff 0a 00 00       	call   c001e692 <IDE::IDE()>
c001db93:	83 c4 10             	add    esp,0x10
c001db96:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001db9d:	74 48                	je     c001dbe7 <PCI::foundDevice(PCIDeviceInfo)+0x381>
c001db9f:	eb 26                	jmp    c001dbc7 <PCI::foundDevice(PCIDeviceInfo)+0x361>
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	68 d0 5e 02 c0       	push   0xc0025ed0
c001dba9:	e8 6f be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	e4 60                	in     al,0x60
c001dbb3:	3c 5a                	cmp    al,0x5a
c001dbb5:	74 04                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x355>
c001dbb7:	3c 1c                	cmp    al,0x1c
c001dbb9:	75 f6                	jne    c001dbb1 <PCI::foundDevice(PCIDeviceInfo)+0x34b>
c001dbbb:	e4 60                	in     al,0x60
c001dbbd:	3c 5a                	cmp    al,0x5a
c001dbbf:	74 fa                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x355>
c001dbc1:	3c 1c                	cmp    al,0x1c
c001dbc3:	74 f6                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x355>
c001dbc5:	eb b5                	jmp    c001db7c <PCI::foundDevice(PCIDeviceInfo)+0x316>
c001dbc7:	83 ec 0c             	sub    esp,0xc
c001dbca:	68 d7 5e 02 c0       	push   0xc0025ed7
c001dbcf:	e8 49 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	e4 60                	in     al,0x60
c001dbd9:	3c 5a                	cmp    al,0x5a
c001dbdb:	75 21                	jne    c001dbfe <PCI::foundDevice(PCIDeviceInfo)+0x398>
c001dbdd:	e4 60                	in     al,0x60
c001dbdf:	3c 5a                	cmp    al,0x5a
c001dbe1:	74 fa                	je     c001dbdd <PCI::foundDevice(PCIDeviceInfo)+0x377>
c001dbe3:	3c 1c                	cmp    al,0x1c
c001dbe5:	74 f6                	je     c001dbdd <PCI::foundDevice(PCIDeviceInfo)+0x377>
c001dbe7:	56                   	push   esi
c001dbe8:	56                   	push   esi
c001dbe9:	55                   	push   ebp
c001dbea:	53                   	push   ebx
c001dbeb:	e8 9a 04 ff ff       	call   c000e08a <Device::addChild(Device*)>
c001dbf0:	83 c4 10             	add    esp,0x10
c001dbf3:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dbfa:	74 28                	je     c001dc24 <PCI::foundDevice(PCIDeviceInfo)+0x3be>
c001dbfc:	eb 06                	jmp    c001dc04 <PCI::foundDevice(PCIDeviceInfo)+0x39e>
c001dbfe:	3c 1c                	cmp    al,0x1c
c001dc00:	75 d5                	jne    c001dbd7 <PCI::foundDevice(PCIDeviceInfo)+0x371>
c001dc02:	eb d9                	jmp    c001dbdd <PCI::foundDevice(PCIDeviceInfo)+0x377>
c001dc04:	83 ec 0c             	sub    esp,0xc
c001dc07:	68 de 5e 02 c0       	push   0xc0025ede
c001dc0c:	e8 0c be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc11:	83 c4 10             	add    esp,0x10
c001dc14:	e4 60                	in     al,0x60
c001dc16:	3c 5a                	cmp    al,0x5a
c001dc18:	75 2f                	jne    c001dc49 <PCI::foundDevice(PCIDeviceInfo)+0x3e3>
c001dc1a:	e4 60                	in     al,0x60
c001dc1c:	3c 5a                	cmp    al,0x5a
c001dc1e:	74 fa                	je     c001dc1a <PCI::foundDevice(PCIDeviceInfo)+0x3b4>
c001dc20:	3c 1c                	cmp    al,0x1c
c001dc22:	74 f6                	je     c001dc1a <PCI::foundDevice(PCIDeviceInfo)+0x3b4>
c001dc24:	83 ec 2c             	sub    esp,0x2c
c001dc27:	b9 09 00 00 00       	mov    ecx,0x9
c001dc2c:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dc30:	fc                   	cld    
c001dc31:	89 e7                	mov    edi,esp
c001dc33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc35:	55                   	push   ebp
c001dc36:	e8 61 03 ff ff       	call   c000df9c <Device::preOpenPCI(PCIDeviceInfo)>
c001dc3b:	83 c4 30             	add    esp,0x30
c001dc3e:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dc45:	74 28                	je     c001dc6f <PCI::foundDevice(PCIDeviceInfo)+0x409>
c001dc47:	eb 06                	jmp    c001dc4f <PCI::foundDevice(PCIDeviceInfo)+0x3e9>
c001dc49:	3c 1c                	cmp    al,0x1c
c001dc4b:	75 c7                	jne    c001dc14 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001dc4d:	eb cb                	jmp    c001dc1a <PCI::foundDevice(PCIDeviceInfo)+0x3b4>
c001dc4f:	83 ec 0c             	sub    esp,0xc
c001dc52:	68 e5 5e 02 c0       	push   0xc0025ee5
c001dc57:	e8 c1 bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc5c:	83 c4 10             	add    esp,0x10
c001dc5f:	e4 60                	in     al,0x60
c001dc61:	3c 5a                	cmp    al,0x5a
c001dc63:	75 39                	jne    c001dc9e <PCI::foundDevice(PCIDeviceInfo)+0x438>
c001dc65:	e4 60                	in     al,0x60
c001dc67:	3c 5a                	cmp    al,0x5a
c001dc69:	74 fa                	je     c001dc65 <PCI::foundDevice(PCIDeviceInfo)+0x3ff>
c001dc6b:	3c 1c                	cmp    al,0x1c
c001dc6d:	74 f6                	je     c001dc65 <PCI::foundDevice(PCIDeviceInfo)+0x3ff>
c001dc6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc72:	6a 00                	push   0x0
c001dc74:	6a 00                	push   0x0
c001dc76:	6a 00                	push   0x0
c001dc78:	55                   	push   ebp
c001dc79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc7c:	83 c4 10             	add    esp,0x10
c001dc7f:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dc86:	0f 84 38 01 00 00    	je     c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001dc8c:	83 ec 0c             	sub    esp,0xc
c001dc8f:	68 ec 5e 02 c0       	push   0xc0025eec
c001dc94:	e8 84 bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	eb 0a                	jmp    c001dca8 <PCI::foundDevice(PCIDeviceInfo)+0x442>
c001dc9e:	3c 1c                	cmp    al,0x1c
c001dca0:	75 bd                	jne    c001dc5f <PCI::foundDevice(PCIDeviceInfo)+0x3f9>
c001dca2:	eb c1                	jmp    c001dc65 <PCI::foundDevice(PCIDeviceInfo)+0x3ff>
c001dca4:	3c 1c                	cmp    al,0x1c
c001dca6:	74 10                	je     c001dcb8 <PCI::foundDevice(PCIDeviceInfo)+0x452>
c001dca8:	e4 60                	in     al,0x60
c001dcaa:	3c 5a                	cmp    al,0x5a
c001dcac:	75 f6                	jne    c001dca4 <PCI::foundDevice(PCIDeviceInfo)+0x43e>
c001dcae:	eb 08                	jmp    c001dcb8 <PCI::foundDevice(PCIDeviceInfo)+0x452>
c001dcb0:	3c 1c                	cmp    al,0x1c
c001dcb2:	0f 85 0c 01 00 00    	jne    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001dcb8:	e4 60                	in     al,0x60
c001dcba:	3c 5a                	cmp    al,0x5a
c001dcbc:	74 fa                	je     c001dcb8 <PCI::foundDevice(PCIDeviceInfo)+0x452>
c001dcbe:	eb f0                	jmp    c001dcb0 <PCI::foundDevice(PCIDeviceInfo)+0x44a>
c001dcc0:	85 c0                	test   eax,eax
c001dcc2:	75 2a                	jne    c001dcee <PCI::foundDevice(PCIDeviceInfo)+0x488>
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	68 58 01 00 00       	push   0x158
c001dccc:	e8 f2 bc fe ff       	call   c00099c3 <malloc>
c001dcd1:	5a                   	pop    edx
c001dcd2:	89 c5                	mov    ebp,eax
c001dcd4:	59                   	pop    ecx
c001dcd5:	68 f3 5e 02 c0       	push   0xc0025ef3
c001dcda:	50                   	push   eax
c001dcdb:	e8 b4 06 ff ff       	call   c000e394 <DriverlessDevice::DriverlessDevice(char const*)>
c001dce0:	83 c4 10             	add    esp,0x10
c001dce3:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dcea:	74 48                	je     c001dd34 <PCI::foundDevice(PCIDeviceInfo)+0x4ce>
c001dcec:	eb 26                	jmp    c001dd14 <PCI::foundDevice(PCIDeviceInfo)+0x4ae>
c001dcee:	83 ec 0c             	sub    esp,0xc
c001dcf1:	68 0d 5f 02 c0       	push   0xc0025f0d
c001dcf6:	e8 22 bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dcfb:	83 c4 10             	add    esp,0x10
c001dcfe:	e4 60                	in     al,0x60
c001dd00:	3c 5a                	cmp    al,0x5a
c001dd02:	74 04                	je     c001dd08 <PCI::foundDevice(PCIDeviceInfo)+0x4a2>
c001dd04:	3c 1c                	cmp    al,0x1c
c001dd06:	75 f6                	jne    c001dcfe <PCI::foundDevice(PCIDeviceInfo)+0x498>
c001dd08:	e4 60                	in     al,0x60
c001dd0a:	3c 5a                	cmp    al,0x5a
c001dd0c:	74 fa                	je     c001dd08 <PCI::foundDevice(PCIDeviceInfo)+0x4a2>
c001dd0e:	3c 1c                	cmp    al,0x1c
c001dd10:	74 f6                	je     c001dd08 <PCI::foundDevice(PCIDeviceInfo)+0x4a2>
c001dd12:	eb b0                	jmp    c001dcc4 <PCI::foundDevice(PCIDeviceInfo)+0x45e>
c001dd14:	83 ec 0c             	sub    esp,0xc
c001dd17:	68 14 5f 02 c0       	push   0xc0025f14
c001dd1c:	e8 fc bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dd21:	83 c4 10             	add    esp,0x10
c001dd24:	e4 60                	in     al,0x60
c001dd26:	3c 5a                	cmp    al,0x5a
c001dd28:	75 21                	jne    c001dd4b <PCI::foundDevice(PCIDeviceInfo)+0x4e5>
c001dd2a:	e4 60                	in     al,0x60
c001dd2c:	3c 5a                	cmp    al,0x5a
c001dd2e:	74 fa                	je     c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0x4c4>
c001dd30:	3c 1c                	cmp    al,0x1c
c001dd32:	74 f6                	je     c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0x4c4>
c001dd34:	50                   	push   eax
c001dd35:	50                   	push   eax
c001dd36:	55                   	push   ebp
c001dd37:	53                   	push   ebx
c001dd38:	e8 4d 03 ff ff       	call   c000e08a <Device::addChild(Device*)>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dd47:	74 28                	je     c001dd71 <PCI::foundDevice(PCIDeviceInfo)+0x50b>
c001dd49:	eb 06                	jmp    c001dd51 <PCI::foundDevice(PCIDeviceInfo)+0x4eb>
c001dd4b:	3c 1c                	cmp    al,0x1c
c001dd4d:	75 d5                	jne    c001dd24 <PCI::foundDevice(PCIDeviceInfo)+0x4be>
c001dd4f:	eb d9                	jmp    c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0x4c4>
c001dd51:	83 ec 0c             	sub    esp,0xc
c001dd54:	68 1b 5f 02 c0       	push   0xc0025f1b
c001dd59:	e8 bf bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dd5e:	83 c4 10             	add    esp,0x10
c001dd61:	e4 60                	in     al,0x60
c001dd63:	3c 1c                	cmp    al,0x1c
c001dd65:	75 3f                	jne    c001dda6 <PCI::foundDevice(PCIDeviceInfo)+0x540>
c001dd67:	e4 60                	in     al,0x60
c001dd69:	3c 5a                	cmp    al,0x5a
c001dd6b:	74 fa                	je     c001dd67 <PCI::foundDevice(PCIDeviceInfo)+0x501>
c001dd6d:	3c 1c                	cmp    al,0x1c
c001dd6f:	74 f6                	je     c001dd67 <PCI::foundDevice(PCIDeviceInfo)+0x501>
c001dd71:	83 ec 2c             	sub    esp,0x2c
c001dd74:	b9 09 00 00 00       	mov    ecx,0x9
c001dd79:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dd7d:	fc                   	cld    
c001dd7e:	89 e7                	mov    edi,esp
c001dd80:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd82:	55                   	push   ebp
c001dd83:	e8 14 02 ff ff       	call   c000df9c <Device::preOpenPCI(PCIDeviceInfo)>
c001dd88:	83 c4 30             	add    esp,0x30
c001dd8b:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001dd92:	74 30                	je     c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	68 22 5f 02 c0       	push   0xc0025f22
c001dd9c:	e8 7c bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	eb 0a                	jmp    c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x54a>
c001dda6:	3c 5a                	cmp    al,0x5a
c001dda8:	75 b7                	jne    c001dd61 <PCI::foundDevice(PCIDeviceInfo)+0x4fb>
c001ddaa:	eb bb                	jmp    c001dd67 <PCI::foundDevice(PCIDeviceInfo)+0x501>
c001ddac:	3c 1c                	cmp    al,0x1c
c001ddae:	74 0c                	je     c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x556>
c001ddb0:	e4 60                	in     al,0x60
c001ddb2:	3c 5a                	cmp    al,0x5a
c001ddb4:	75 f6                	jne    c001ddac <PCI::foundDevice(PCIDeviceInfo)+0x546>
c001ddb6:	eb 04                	jmp    c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x556>
c001ddb8:	3c 1c                	cmp    al,0x1c
c001ddba:	75 08                	jne    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x55e>
c001ddbc:	e4 60                	in     al,0x60
c001ddbe:	3c 5a                	cmp    al,0x5a
c001ddc0:	74 fa                	je     c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x556>
c001ddc2:	eb f4                	jmp    c001ddb8 <PCI::foundDevice(PCIDeviceInfo)+0x552>
c001ddc4:	83 c4 1c             	add    esp,0x1c
c001ddc7:	5b                   	pop    ebx
c001ddc8:	5e                   	pop    esi
c001ddc9:	5f                   	pop    edi
c001ddca:	5d                   	pop    ebp
c001ddcb:	c3                   	ret    

c001ddcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ddcc:	55                   	push   ebp
c001ddcd:	57                   	push   edi
c001ddce:	56                   	push   esi
c001ddcf:	53                   	push   ebx
c001ddd0:	81 ec a4 00 00 00    	sub    esp,0xa4
c001ddd6:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c001dddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dde1:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
c001dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddec:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c001ddf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddf7:	68 29 5f 02 c0       	push   0xc0025f29
c001ddfc:	8d 5c 24 38          	lea    ebx,[esp+0x38]
c001de00:	53                   	push   ebx
c001de01:	e8 3a 29 fe ff       	call   c0000740 <strcpy>
c001de06:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c001de0b:	b2 64                	mov    dl,0x64
c001de0d:	89 c8                	mov    eax,ecx
c001de0f:	f6 f2                	div    dl
c001de11:	b2 0a                	mov    dl,0xa
c001de13:	83 c0 30             	add    eax,0x30
c001de16:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001de1a:	88 44 24 3c          	mov    BYTE PTR [esp+0x3c],al
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	89 c8                	mov    eax,ecx
c001de23:	f6 f2                	div    dl
c001de25:	89 c1                	mov    ecx,eax
c001de27:	0f b6 c0             	movzx  eax,al
c001de2a:	88 e9                	mov    cl,ch
c001de2c:	f6 f2                	div    dl
c001de2e:	88 e0                	mov    al,ah
c001de30:	83 c0 30             	add    eax,0x30
c001de33:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001de37:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001de3b:	8d 41 30             	lea    eax,[ecx+0x30]
c001de3e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001de42:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001de46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001de4b:	f6 f2                	div    dl
c001de4d:	89 c1                	mov    ecx,eax
c001de4f:	0f b6 c0             	movzx  eax,al
c001de52:	88 e9                	mov    cl,ch
c001de54:	f6 f2                	div    dl
c001de56:	88 e0                	mov    al,ah
c001de58:	83 c0 30             	add    eax,0x30
c001de5b:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001de5f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001de63:	8d 41 30             	lea    eax,[ecx+0x30]
c001de66:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001de6a:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001de6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de73:	f6 f2                	div    dl
c001de75:	89 c1                	mov    ecx,eax
c001de77:	0f b6 c0             	movzx  eax,al
c001de7a:	88 e9                	mov    cl,ch
c001de7c:	f6 f2                	div    dl
c001de7e:	88 e0                	mov    al,ah
c001de80:	83 c0 30             	add    eax,0x30
c001de83:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001de8a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001de8e:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001de92:	8d 41 30             	lea    eax,[ecx+0x30]
c001de95:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001de99:	88 44 24 34          	mov    BYTE PTR [esp+0x34],al
c001de9d:	74 20                	je     c001debf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf3>
c001de9f:	83 ec 0c             	sub    esp,0xc
c001dea2:	53                   	push   ebx
c001dea3:	e8 75 bb fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	e4 60                	in     al,0x60
c001dead:	3c 1c                	cmp    al,0x1c
c001deaf:	74 04                	je     c001deb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xe9>
c001deb1:	3c 5a                	cmp    al,0x5a
c001deb3:	75 f6                	jne    c001deab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xdf>
c001deb5:	e4 60                	in     al,0x60
c001deb7:	3c 5a                	cmp    al,0x5a
c001deb9:	74 fa                	je     c001deb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xe9>
c001debb:	3c 1c                	cmp    al,0x1c
c001debd:	74 f6                	je     c001deb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xe9>
c001debf:	0f b6 6c 24 0c       	movzx  ebp,BYTE PTR [esp+0xc]
c001dec4:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c001dec9:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001dece:	83 ec 0c             	sub    esp,0xc
c001ded1:	6a 0c                	push   0xc
c001ded3:	55                   	push   ebp
c001ded4:	53                   	push   ebx
c001ded5:	57                   	push   edi
c001ded6:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001dedd:	e8 cc f1 ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dee2:	83 c4 20             	add    esp,0x20
c001dee5:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001deec:	74 24                	je     c001df12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x146>
c001deee:	83 ec 0c             	sub    esp,0xc
c001def1:	68 44 5f 02 c0       	push   0xc0025f44
c001def6:	e8 22 bb fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001defb:	83 c4 10             	add    esp,0x10
c001defe:	e4 60                	in     al,0x60
c001df00:	3c 1c                	cmp    al,0x1c
c001df02:	74 04                	je     c001df08 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x13c>
c001df04:	3c 5a                	cmp    al,0x5a
c001df06:	75 f6                	jne    c001defe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x132>
c001df08:	e4 60                	in     al,0x60
c001df0a:	3c 5a                	cmp    al,0x5a
c001df0c:	74 fa                	je     c001df08 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x13c>
c001df0e:	3c 1c                	cmp    al,0x1c
c001df10:	74 f6                	je     c001df08 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x13c>
c001df12:	55                   	push   ebp
c001df13:	53                   	push   ebx
c001df14:	57                   	push   edi
c001df15:	ff b4 24 bc 00 00 00 	push   DWORD PTR [esp+0xbc]
c001df1c:	e8 81 f2 ff ff       	call   c001d1a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001df21:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001df26:	55                   	push   ebp
c001df27:	53                   	push   ebx
c001df28:	57                   	push   edi
c001df29:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001df30:	e8 03 f3 ff ff       	call   c001d238 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001df35:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001df39:	83 c4 20             	add    esp,0x20
c001df3c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001df43:	74 24                	je     c001df69 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x19d>
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	68 4a 5f 02 c0       	push   0xc0025f4a
c001df4d:	e8 cb ba fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	e4 60                	in     al,0x60
c001df57:	3c 1c                	cmp    al,0x1c
c001df59:	74 04                	je     c001df5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x193>
c001df5b:	3c 5a                	cmp    al,0x5a
c001df5d:	75 f6                	jne    c001df55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x189>
c001df5f:	e4 60                	in     al,0x60
c001df61:	3c 5a                	cmp    al,0x5a
c001df63:	74 fa                	je     c001df5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x193>
c001df65:	3c 1c                	cmp    al,0x1c
c001df67:	74 f6                	je     c001df5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x193>
c001df69:	83 ec 0c             	sub    esp,0xc
c001df6c:	6a 3c                	push   0x3c
c001df6e:	55                   	push   ebp
c001df6f:	53                   	push   ebx
c001df70:	57                   	push   edi
c001df71:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001df78:	e8 31 f1 ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df7d:	0f b6 c4             	movzx  eax,ah
c001df80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df84:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c001df88:	88 84 24 ad 00 00 00 	mov    BYTE PTR [esp+0xad],al
c001df8f:	83 c4 20             	add    esp,0x20
c001df92:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001df99:	74 24                	je     c001dfbf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1f3>
c001df9b:	83 ec 0c             	sub    esp,0xc
c001df9e:	68 4f 5f 02 c0       	push   0xc0025f4f
c001dfa3:	e8 75 ba fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dfa8:	83 c4 10             	add    esp,0x10
c001dfab:	e4 60                	in     al,0x60
c001dfad:	3c 5a                	cmp    al,0x5a
c001dfaf:	74 04                	je     c001dfb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1e9>
c001dfb1:	3c 1c                	cmp    al,0x1c
c001dfb3:	75 f6                	jne    c001dfab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1df>
c001dfb5:	e4 60                	in     al,0x60
c001dfb7:	3c 5a                	cmp    al,0x5a
c001dfb9:	74 fa                	je     c001dfb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1e9>
c001dfbb:	3c 1c                	cmp    al,0x1c
c001dfbd:	74 f6                	je     c001dfb5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1e9>
c001dfbf:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001dfc4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dfca:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001dfd1:	0f 84 80 01 00 00    	je     c001e157 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x38b>
c001dfd7:	31 f6                	xor    esi,esi
c001dfd9:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001dfde:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dfe4:	39 b0 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],esi
c001dfea:	0f 8e 67 01 00 00    	jle    c001e157 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x38b>
c001dff0:	50                   	push   eax
c001dff1:	50                   	push   eax
c001dff2:	68 53 5f 02 c0       	push   0xc0025f53
c001dff7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001dffb:	50                   	push   eax
c001dffc:	e8 3f 27 fe ff       	call   c0000740 <strcpy>
c001e001:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001e005:	b9 0a 00 00 00       	mov    ecx,0xa
c001e00a:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001e00e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001e012:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001e016:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001e01a:	88 44 24 5e          	mov    BYTE PTR [esp+0x5e],al
c001e01e:	8a 44 24 26          	mov    al,BYTE PTR [esp+0x26]
c001e022:	88 44 24 60          	mov    BYTE PTR [esp+0x60],al
c001e026:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001e02a:	88 44 24 61          	mov    BYTE PTR [esp+0x61],al
c001e02e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e032:	88 44 24 63          	mov    BYTE PTR [esp+0x63],al
c001e036:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001e03a:	88 44 24 64          	mov    BYTE PTR [esp+0x64],al
c001e03e:	83 c4 10             	add    esp,0x10
c001e041:	89 f0                	mov    eax,esi
c001e043:	99                   	cdq    
c001e044:	f7 f9                	idiv   ecx
c001e046:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e04a:	99                   	cdq    
c001e04b:	f7 f9                	idiv   ecx
c001e04d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001e051:	83 c2 30             	add    edx,0x30
c001e054:	83 c0 30             	add    eax,0x30
c001e057:	88 54 24 56          	mov    BYTE PTR [esp+0x56],dl
c001e05b:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c001e05f:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e066:	74 24                	je     c001e08c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2c0>
c001e068:	83 ec 0c             	sub    esp,0xc
c001e06b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001e06f:	50                   	push   eax
c001e070:	e8 a8 b9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	e4 60                	in     al,0x60
c001e07a:	3c 5a                	cmp    al,0x5a
c001e07c:	74 04                	je     c001e082 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b6>
c001e07e:	3c 1c                	cmp    al,0x1c
c001e080:	75 f6                	jne    c001e078 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2ac>
c001e082:	e4 60                	in     al,0x60
c001e084:	3c 5a                	cmp    al,0x5a
c001e086:	74 fa                	je     c001e082 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b6>
c001e088:	3c 1c                	cmp    al,0x1c
c001e08a:	74 f6                	je     c001e082 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b6>
c001e08c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001e091:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e097:	8d 04 f0             	lea    eax,[eax+esi*8]
c001e09a:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e0a1:	39 d3                	cmp    ebx,edx
c001e0a3:	0f 85 a8 00 00 00    	jne    c001e151 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x385>
c001e0a9:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e0b0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001e0b3:	0f 85 98 00 00 00    	jne    c001e151 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x385>
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	68 82 5f 02 c0       	push   0xc0025f82
c001e0c1:	e8 7d eb fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e0d0:	74 24                	je     c001e0f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x32a>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	68 73 5e 02 c0       	push   0xc0025e73
c001e0da:	e8 3e b9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	e4 60                	in     al,0x60
c001e0e4:	3c 1c                	cmp    al,0x1c
c001e0e6:	74 04                	je     c001e0ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x320>
c001e0e8:	3c 5a                	cmp    al,0x5a
c001e0ea:	75 f6                	jne    c001e0e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x316>
c001e0ec:	e4 60                	in     al,0x60
c001e0ee:	3c 5a                	cmp    al,0x5a
c001e0f0:	74 fa                	je     c001e0ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x320>
c001e0f2:	3c 1c                	cmp    al,0x1c
c001e0f4:	74 f6                	je     c001e0ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x320>
c001e0f6:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c001e0fb:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e102:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e108:	8a 84 f0 5f 01 00 00 	mov    al,BYTE PTR [eax+esi*8+0x15f]
c001e10f:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001e113:	74 24                	je     c001e139 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x36d>
c001e115:	83 ec 0c             	sub    esp,0xc
c001e118:	68 e5 5f 02 c0       	push   0xc0025fe5
c001e11d:	e8 fb b8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	e4 60                	in     al,0x60
c001e127:	3c 5a                	cmp    al,0x5a
c001e129:	74 04                	je     c001e12f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x363>
c001e12b:	3c 1c                	cmp    al,0x1c
c001e12d:	75 f6                	jne    c001e125 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x359>
c001e12f:	e4 60                	in     al,0x60
c001e131:	3c 5a                	cmp    al,0x5a
c001e133:	74 fa                	je     c001e12f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x363>
c001e135:	3c 1c                	cmp    al,0x1c
c001e137:	74 f6                	je     c001e12f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x363>
c001e139:	0f b6 44 24 12       	movzx  eax,BYTE PTR [esp+0x12]
c001e13e:	50                   	push   eax
c001e13f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001e143:	53                   	push   ebx
c001e144:	68 a7 5f 02 c0       	push   0xc0025fa7
c001e149:	e8 f5 ea fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	46                   	inc    esi
c001e152:	e9 82 fe ff ff       	jmp    c001dfd9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x20d>
c001e157:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e15e:	74 24                	je     c001e184 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3b8>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	68 c2 5f 02 c0       	push   0xc0025fc2
c001e168:	e8 b0 b8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	e4 60                	in     al,0x60
c001e172:	3c 5a                	cmp    al,0x5a
c001e174:	74 04                	je     c001e17a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ae>
c001e176:	3c 1c                	cmp    al,0x1c
c001e178:	75 f6                	jne    c001e170 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3a4>
c001e17a:	e4 60                	in     al,0x60
c001e17c:	3c 5a                	cmp    al,0x5a
c001e17e:	74 fa                	je     c001e17a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ae>
c001e180:	3c 1c                	cmp    al,0x1c
c001e182:	74 f6                	je     c001e17a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ae>
c001e184:	31 f6                	xor    esi,esi
c001e186:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e18d:	74 24                	je     c001e1b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3e7>
c001e18f:	83 ec 0c             	sub    esp,0xc
c001e192:	68 c5 5f 02 c0       	push   0xc0025fc5
c001e197:	e8 81 b8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e19c:	83 c4 10             	add    esp,0x10
c001e19f:	e4 60                	in     al,0x60
c001e1a1:	3c 5a                	cmp    al,0x5a
c001e1a3:	74 04                	je     c001e1a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3dd>
c001e1a5:	3c 1c                	cmp    al,0x1c
c001e1a7:	75 f6                	jne    c001e19f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3d3>
c001e1a9:	e4 60                	in     al,0x60
c001e1ab:	3c 5a                	cmp    al,0x5a
c001e1ad:	74 fa                	je     c001e1a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3dd>
c001e1af:	3c 1c                	cmp    al,0x1c
c001e1b1:	74 f6                	je     c001e1a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3dd>
c001e1b3:	83 ec 0c             	sub    esp,0xc
c001e1b6:	55                   	push   ebp
c001e1b7:	53                   	push   ebx
c001e1b8:	57                   	push   edi
c001e1b9:	56                   	push   esi
c001e1ba:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e1c1:	e8 be f0 ff ff       	call   c001d284 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1c6:	89 84 b4 94 00 00 00 	mov    DWORD PTR [esp+esi*4+0x94],eax
c001e1cd:	46                   	inc    esi
c001e1ce:	83 c4 20             	add    esp,0x20
c001e1d1:	83 fe 06             	cmp    esi,0x6
c001e1d4:	75 b0                	jne    c001e186 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ba>
c001e1d6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e1db:	83 ec 0c             	sub    esp,0xc
c001e1de:	86 e0                	xchg   al,ah
c001e1e0:	66 89 44 24 78       	mov    WORD PTR [esp+0x78],ax
c001e1e5:	6a 02                	push   0x2
c001e1e7:	55                   	push   ebp
c001e1e8:	53                   	push   ebx
c001e1e9:	57                   	push   edi
c001e1ea:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e1f1:	e8 b8 ee ff ff       	call   c001d0ae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1f6:	66 89 84 24 ae 00 00 00 	mov    WORD PTR [esp+0xae],ax
c001e1fe:	83 c4 20             	add    esp,0x20
c001e201:	55                   	push   ebp
c001e202:	53                   	push   ebx
c001e203:	57                   	push   edi
c001e204:	ff b4 24 bc 00 00 00 	push   DWORD PTR [esp+0xbc]
c001e20b:	e8 dc ef ff ff       	call   c001d1ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e210:	88 84 24 83 00 00 00 	mov    BYTE PTR [esp+0x83],al
c001e217:	55                   	push   ebp
c001e218:	53                   	push   ebx
c001e219:	57                   	push   edi
c001e21a:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e221:	e8 30 ef ff ff       	call   c001d156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e226:	66 89 84 24 8e 00 00 00 	mov    WORD PTR [esp+0x8e],ax
c001e22e:	8a 44 24 32          	mov    al,BYTE PTR [esp+0x32]
c001e232:	88 84 24 ac 00 00 00 	mov    BYTE PTR [esp+0xac],al
c001e239:	83 c4 20             	add    esp,0x20
c001e23c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e243:	74 24                	je     c001e269 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x49d>
c001e245:	83 ec 0c             	sub    esp,0xc
c001e248:	68 ca 5f 02 c0       	push   0xc0025fca
c001e24d:	e8 cb b7 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	e4 60                	in     al,0x60
c001e257:	3c 5a                	cmp    al,0x5a
c001e259:	74 04                	je     c001e25f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x493>
c001e25b:	3c 1c                	cmp    al,0x1c
c001e25d:	75 f6                	jne    c001e255 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x489>
c001e25f:	e4 60                	in     al,0x60
c001e261:	3c 5a                	cmp    al,0x5a
c001e263:	74 fa                	je     c001e25f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x493>
c001e265:	3c 1c                	cmp    al,0x1c
c001e267:	74 f6                	je     c001e25f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x493>
c001e269:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e26d:	b9 09 00 00 00       	mov    ecx,0x9
c001e272:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e276:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e27a:	83 ec 2c             	sub    esp,0x2c
c001e27d:	88 84 24 9d 00 00 00 	mov    BYTE PTR [esp+0x9d],al
c001e284:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e288:	88 84 24 9e 00 00 00 	mov    BYTE PTR [esp+0x9e],al
c001e28f:	8d b4 24 98 00 00 00 	lea    esi,[esp+0x98]
c001e296:	fc                   	cld    
c001e297:	89 e7                	mov    edi,esp
c001e299:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e29b:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
c001e2a2:	e8 bf f5 ff ff       	call   c001d866 <PCI::foundDevice(PCIDeviceInfo)>
c001e2a7:	83 c4 30             	add    esp,0x30
c001e2aa:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e2b1:	74 24                	je     c001e2d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x50b>
c001e2b3:	83 ec 0c             	sub    esp,0xc
c001e2b6:	68 cd 5f 02 c0       	push   0xc0025fcd
c001e2bb:	e8 5d b7 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	e4 60                	in     al,0x60
c001e2c5:	3c 1c                	cmp    al,0x1c
c001e2c7:	74 04                	je     c001e2cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x501>
c001e2c9:	3c 5a                	cmp    al,0x5a
c001e2cb:	75 f6                	jne    c001e2c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x4f7>
c001e2cd:	e4 60                	in     al,0x60
c001e2cf:	3c 5a                	cmp    al,0x5a
c001e2d1:	74 fa                	je     c001e2cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x501>
c001e2d3:	3c 1c                	cmp    al,0x1c
c001e2d5:	74 f6                	je     c001e2cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x501>
c001e2d7:	81 c4 9c 00 00 00    	add    esp,0x9c
c001e2dd:	5b                   	pop    ebx
c001e2de:	5e                   	pop    esi
c001e2df:	5f                   	pop    edi
c001e2e0:	5d                   	pop    ebp
c001e2e1:	c3                   	ret    

c001e2e2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e2e2:	55                   	push   ebp
c001e2e3:	57                   	push   edi
c001e2e4:	56                   	push   esi
c001e2e5:	53                   	push   ebx
c001e2e6:	83 ec 34             	sub    esp,0x34
c001e2e9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e2ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e2f1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001e2f5:	68 d0 5f 02 c0       	push   0xc0025fd0
c001e2fa:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001e2fe:	57                   	push   edi
c001e2ff:	e8 3c 24 fe ff       	call   c0000740 <strcpy>
c001e304:	b1 64                	mov    cl,0x64
c001e306:	89 e8                	mov    eax,ebp
c001e308:	0f b6 d0             	movzx  edx,al
c001e30b:	89 d0                	mov    eax,edx
c001e30d:	f6 f1                	div    cl
c001e30f:	b1 0a                	mov    cl,0xa
c001e311:	83 c0 30             	add    eax,0x30
c001e314:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001e318:	83 c4 10             	add    esp,0x10
c001e31b:	89 d0                	mov    eax,edx
c001e31d:	f6 f1                	div    cl
c001e31f:	89 c2                	mov    edx,eax
c001e321:	0f b6 c0             	movzx  eax,al
c001e324:	88 f2                	mov    dl,dh
c001e326:	f6 f1                	div    cl
c001e328:	83 c2 30             	add    edx,0x30
c001e32b:	88 e0                	mov    al,ah
c001e32d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001e331:	83 c0 30             	add    eax,0x30
c001e334:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001e338:	0f b6 c3             	movzx  eax,bl
c001e33b:	f6 f1                	div    cl
c001e33d:	89 c2                	mov    edx,eax
c001e33f:	0f b6 c0             	movzx  eax,al
c001e342:	88 f2                	mov    dl,dh
c001e344:	f6 f1                	div    cl
c001e346:	83 c2 30             	add    edx,0x30
c001e349:	88 e0                	mov    al,ah
c001e34b:	88 54 24 05          	mov    BYTE PTR [esp+0x5],dl
c001e34f:	83 c0 30             	add    eax,0x30
c001e352:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e359:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e35d:	74 20                	je     c001e37f <PCI::checkDevice(unsigned char, unsigned char)+0x9d>
c001e35f:	83 ec 0c             	sub    esp,0xc
c001e362:	57                   	push   edi
c001e363:	e8 b5 b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e368:	83 c4 10             	add    esp,0x10
c001e36b:	e4 60                	in     al,0x60
c001e36d:	3c 1c                	cmp    al,0x1c
c001e36f:	74 04                	je     c001e375 <PCI::checkDevice(unsigned char, unsigned char)+0x93>
c001e371:	3c 5a                	cmp    al,0x5a
c001e373:	75 f6                	jne    c001e36b <PCI::checkDevice(unsigned char, unsigned char)+0x89>
c001e375:	e4 60                	in     al,0x60
c001e377:	3c 5a                	cmp    al,0x5a
c001e379:	74 fa                	je     c001e375 <PCI::checkDevice(unsigned char, unsigned char)+0x93>
c001e37b:	3c 1c                	cmp    al,0x1c
c001e37d:	74 f6                	je     c001e375 <PCI::checkDevice(unsigned char, unsigned char)+0x93>
c001e37f:	6a 00                	push   0x0
c001e381:	89 e8                	mov    eax,ebp
c001e383:	0f b6 db             	movzx  ebx,bl
c001e386:	0f b6 e8             	movzx  ebp,al
c001e389:	53                   	push   ebx
c001e38a:	55                   	push   ebp
c001e38b:	56                   	push   esi
c001e38c:	e8 c5 ed ff ff       	call   c001d156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e391:	83 c4 10             	add    esp,0x10
c001e394:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e39b:	74 24                	je     c001e3c1 <PCI::checkDevice(unsigned char, unsigned char)+0xdf>
c001e39d:	83 ec 0c             	sub    esp,0xc
c001e3a0:	68 e7 5f 02 c0       	push   0xc0025fe7
c001e3a5:	e8 73 b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	e4 60                	in     al,0x60
c001e3af:	3c 1c                	cmp    al,0x1c
c001e3b1:	74 04                	je     c001e3b7 <PCI::checkDevice(unsigned char, unsigned char)+0xd5>
c001e3b3:	3c 5a                	cmp    al,0x5a
c001e3b5:	75 f6                	jne    c001e3ad <PCI::checkDevice(unsigned char, unsigned char)+0xcb>
c001e3b7:	e4 60                	in     al,0x60
c001e3b9:	3c 5a                	cmp    al,0x5a
c001e3bb:	74 fa                	je     c001e3b7 <PCI::checkDevice(unsigned char, unsigned char)+0xd5>
c001e3bd:	3c 1c                	cmp    al,0x1c
c001e3bf:	74 f6                	je     c001e3b7 <PCI::checkDevice(unsigned char, unsigned char)+0xd5>
c001e3c1:	6a 00                	push   0x0
c001e3c3:	53                   	push   ebx
c001e3c4:	55                   	push   ebp
c001e3c5:	56                   	push   esi
c001e3c6:	e8 01 fa ff ff       	call   c001ddcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3cb:	83 c4 10             	add    esp,0x10
c001e3ce:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e3d5:	74 24                	je     c001e3fb <PCI::checkDevice(unsigned char, unsigned char)+0x119>
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	68 ea 5f 02 c0       	push   0xc0025fea
c001e3df:	e8 39 b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	e4 60                	in     al,0x60
c001e3e9:	3c 1c                	cmp    al,0x1c
c001e3eb:	74 04                	je     c001e3f1 <PCI::checkDevice(unsigned char, unsigned char)+0x10f>
c001e3ed:	3c 5a                	cmp    al,0x5a
c001e3ef:	75 f6                	jne    c001e3e7 <PCI::checkDevice(unsigned char, unsigned char)+0x105>
c001e3f1:	e4 60                	in     al,0x60
c001e3f3:	3c 5a                	cmp    al,0x5a
c001e3f5:	74 fa                	je     c001e3f1 <PCI::checkDevice(unsigned char, unsigned char)+0x10f>
c001e3f7:	3c 1c                	cmp    al,0x1c
c001e3f9:	74 f6                	je     c001e3f1 <PCI::checkDevice(unsigned char, unsigned char)+0x10f>
c001e3fb:	6a 00                	push   0x0
c001e3fd:	53                   	push   ebx
c001e3fe:	55                   	push   ebp
c001e3ff:	56                   	push   esi
c001e400:	e8 75 ed ff ff       	call   c001d17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	89 c7                	mov    edi,eax
c001e40a:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e411:	74 24                	je     c001e437 <PCI::checkDevice(unsigned char, unsigned char)+0x155>
c001e413:	83 ec 0c             	sub    esp,0xc
c001e416:	68 ee 5f 02 c0       	push   0xc0025fee
c001e41b:	e8 fd b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	e4 60                	in     al,0x60
c001e425:	3c 5a                	cmp    al,0x5a
c001e427:	74 04                	je     c001e42d <PCI::checkDevice(unsigned char, unsigned char)+0x14b>
c001e429:	3c 1c                	cmp    al,0x1c
c001e42b:	75 f6                	jne    c001e423 <PCI::checkDevice(unsigned char, unsigned char)+0x141>
c001e42d:	e4 60                	in     al,0x60
c001e42f:	3c 5a                	cmp    al,0x5a
c001e431:	74 fa                	je     c001e42d <PCI::checkDevice(unsigned char, unsigned char)+0x14b>
c001e433:	3c 1c                	cmp    al,0x1c
c001e435:	74 f6                	je     c001e42d <PCI::checkDevice(unsigned char, unsigned char)+0x14b>
c001e437:	89 f8                	mov    eax,edi
c001e439:	84 c0                	test   al,al
c001e43b:	0f 89 df 00 00 00    	jns    c001e520 <PCI::checkDevice(unsigned char, unsigned char)+0x23e>
c001e441:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e448:	74 24                	je     c001e46e <PCI::checkDevice(unsigned char, unsigned char)+0x18c>
c001e44a:	83 ec 0c             	sub    esp,0xc
c001e44d:	68 f3 5f 02 c0       	push   0xc0025ff3
c001e452:	e8 c6 b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	e4 60                	in     al,0x60
c001e45c:	3c 1c                	cmp    al,0x1c
c001e45e:	74 04                	je     c001e464 <PCI::checkDevice(unsigned char, unsigned char)+0x182>
c001e460:	3c 5a                	cmp    al,0x5a
c001e462:	75 f6                	jne    c001e45a <PCI::checkDevice(unsigned char, unsigned char)+0x178>
c001e464:	e4 60                	in     al,0x60
c001e466:	3c 5a                	cmp    al,0x5a
c001e468:	74 fa                	je     c001e464 <PCI::checkDevice(unsigned char, unsigned char)+0x182>
c001e46a:	3c 1c                	cmp    al,0x1c
c001e46c:	74 f6                	je     c001e464 <PCI::checkDevice(unsigned char, unsigned char)+0x182>
c001e46e:	bf 01 00 00 00       	mov    edi,0x1
c001e473:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e47a:	74 24                	je     c001e4a0 <PCI::checkDevice(unsigned char, unsigned char)+0x1be>
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	68 06 60 02 c0       	push   0xc0026006
c001e484:	e8 94 b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	e4 60                	in     al,0x60
c001e48e:	3c 5a                	cmp    al,0x5a
c001e490:	74 04                	je     c001e496 <PCI::checkDevice(unsigned char, unsigned char)+0x1b4>
c001e492:	3c 1c                	cmp    al,0x1c
c001e494:	75 f6                	jne    c001e48c <PCI::checkDevice(unsigned char, unsigned char)+0x1aa>
c001e496:	e4 60                	in     al,0x60
c001e498:	3c 5a                	cmp    al,0x5a
c001e49a:	74 fa                	je     c001e496 <PCI::checkDevice(unsigned char, unsigned char)+0x1b4>
c001e49c:	3c 1c                	cmp    al,0x1c
c001e49e:	74 f6                	je     c001e496 <PCI::checkDevice(unsigned char, unsigned char)+0x1b4>
c001e4a0:	57                   	push   edi
c001e4a1:	53                   	push   ebx
c001e4a2:	55                   	push   ebp
c001e4a3:	56                   	push   esi
c001e4a4:	e8 ad ec ff ff       	call   c001d156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	66 40                	inc    ax
c001e4ae:	74 66                	je     c001e516 <PCI::checkDevice(unsigned char, unsigned char)+0x234>
c001e4b0:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e4b7:	74 24                	je     c001e4dd <PCI::checkDevice(unsigned char, unsigned char)+0x1fb>
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	68 fd 5f 02 c0       	push   0xc0025ffd
c001e4c1:	e8 57 b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	e4 60                	in     al,0x60
c001e4cb:	3c 5a                	cmp    al,0x5a
c001e4cd:	74 04                	je     c001e4d3 <PCI::checkDevice(unsigned char, unsigned char)+0x1f1>
c001e4cf:	3c 1c                	cmp    al,0x1c
c001e4d1:	75 f6                	jne    c001e4c9 <PCI::checkDevice(unsigned char, unsigned char)+0x1e7>
c001e4d3:	e4 60                	in     al,0x60
c001e4d5:	3c 5a                	cmp    al,0x5a
c001e4d7:	74 fa                	je     c001e4d3 <PCI::checkDevice(unsigned char, unsigned char)+0x1f1>
c001e4d9:	3c 1c                	cmp    al,0x1c
c001e4db:	74 f6                	je     c001e4d3 <PCI::checkDevice(unsigned char, unsigned char)+0x1f1>
c001e4dd:	57                   	push   edi
c001e4de:	53                   	push   ebx
c001e4df:	55                   	push   ebp
c001e4e0:	56                   	push   esi
c001e4e1:	e8 e6 f8 ff ff       	call   c001ddcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4e6:	83 c4 10             	add    esp,0x10
c001e4e9:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e4f0:	74 24                	je     c001e516 <PCI::checkDevice(unsigned char, unsigned char)+0x234>
c001e4f2:	83 ec 0c             	sub    esp,0xc
c001e4f5:	68 02 60 02 c0       	push   0xc0026002
c001e4fa:	e8 1e b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e4ff:	83 c4 10             	add    esp,0x10
c001e502:	e4 60                	in     al,0x60
c001e504:	3c 5a                	cmp    al,0x5a
c001e506:	74 04                	je     c001e50c <PCI::checkDevice(unsigned char, unsigned char)+0x22a>
c001e508:	3c 1c                	cmp    al,0x1c
c001e50a:	75 f6                	jne    c001e502 <PCI::checkDevice(unsigned char, unsigned char)+0x220>
c001e50c:	e4 60                	in     al,0x60
c001e50e:	3c 5a                	cmp    al,0x5a
c001e510:	74 fa                	je     c001e50c <PCI::checkDevice(unsigned char, unsigned char)+0x22a>
c001e512:	3c 1c                	cmp    al,0x1c
c001e514:	74 f6                	je     c001e50c <PCI::checkDevice(unsigned char, unsigned char)+0x22a>
c001e516:	47                   	inc    edi
c001e517:	83 ff 08             	cmp    edi,0x8
c001e51a:	0f 85 53 ff ff ff    	jne    c001e473 <PCI::checkDevice(unsigned char, unsigned char)+0x191>
c001e520:	83 c4 2c             	add    esp,0x2c
c001e523:	5b                   	pop    ebx
c001e524:	5e                   	pop    esi
c001e525:	5f                   	pop    edi
c001e526:	5d                   	pop    ebp
c001e527:	c3                   	ret    

c001e528 <PCI::detect()>:
c001e528:	57                   	push   edi
c001e529:	56                   	push   esi
c001e52a:	53                   	push   ebx
c001e52b:	83 ec 10             	sub    esp,0x10
c001e52e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e532:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e539:	75 1c                	jne    c001e557 <PCI::detect()+0x2f>
c001e53b:	6a 00                	push   0x0
c001e53d:	6a 00                	push   0x0
c001e53f:	6a 00                	push   0x0
c001e541:	56                   	push   esi
c001e542:	e8 33 ec ff ff       	call   c001d17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e547:	83 c4 10             	add    esp,0x10
c001e54a:	89 c3                	mov    ebx,eax
c001e54c:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e553:	74 48                	je     c001e59d <PCI::detect()+0x75>
c001e555:	eb 26                	jmp    c001e57d <PCI::detect()+0x55>
c001e557:	83 ec 0c             	sub    esp,0xc
c001e55a:	68 09 60 02 c0       	push   0xc0026009
c001e55f:	e8 b9 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	e4 60                	in     al,0x60
c001e569:	3c 1c                	cmp    al,0x1c
c001e56b:	74 04                	je     c001e571 <PCI::detect()+0x49>
c001e56d:	3c 5a                	cmp    al,0x5a
c001e56f:	75 f6                	jne    c001e567 <PCI::detect()+0x3f>
c001e571:	e4 60                	in     al,0x60
c001e573:	3c 5a                	cmp    al,0x5a
c001e575:	74 fa                	je     c001e571 <PCI::detect()+0x49>
c001e577:	3c 1c                	cmp    al,0x1c
c001e579:	74 f6                	je     c001e571 <PCI::detect()+0x49>
c001e57b:	eb be                	jmp    c001e53b <PCI::detect()+0x13>
c001e57d:	83 ec 0c             	sub    esp,0xc
c001e580:	68 09 60 02 c0       	push   0xc0026009
c001e585:	e8 93 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e58a:	83 c4 10             	add    esp,0x10
c001e58d:	e4 60                	in     al,0x60
c001e58f:	3c 5a                	cmp    al,0x5a
c001e591:	75 1b                	jne    c001e5ae <PCI::detect()+0x86>
c001e593:	e4 60                	in     al,0x60
c001e595:	3c 5a                	cmp    al,0x5a
c001e597:	74 fa                	je     c001e593 <PCI::detect()+0x6b>
c001e599:	3c 1c                	cmp    al,0x1c
c001e59b:	74 f6                	je     c001e593 <PCI::detect()+0x6b>
c001e59d:	a1 c0 74 02 c0       	mov    eax,ds:0xc00274c0
c001e5a2:	25 00 08 00 00       	and    eax,0x800
c001e5a7:	80 e3 80             	and    bl,0x80
c001e5aa:	74 08                	je     c001e5b4 <PCI::detect()+0x8c>
c001e5ac:	eb 42                	jmp    c001e5f0 <PCI::detect()+0xc8>
c001e5ae:	3c 1c                	cmp    al,0x1c
c001e5b0:	75 db                	jne    c001e58d <PCI::detect()+0x65>
c001e5b2:	eb df                	jmp    c001e593 <PCI::detect()+0x6b>
c001e5b4:	85 c0                	test   eax,eax
c001e5b6:	75 12                	jne    c001e5ca <PCI::detect()+0xa2>
c001e5b8:	51                   	push   ecx
c001e5b9:	51                   	push   ecx
c001e5ba:	6a 00                	push   0x0
c001e5bc:	56                   	push   esi
c001e5bd:	e8 b4 f1 ff ff       	call   c001d776 <PCI::checkBus(unsigned char)>
c001e5c2:	83 c4 10             	add    esp,0x10
c001e5c5:	e9 bd 00 00 00       	jmp    c001e687 <PCI::detect()+0x15f>
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 10 60 02 c0       	push   0xc0026010
c001e5d2:	e8 46 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e5d7:	83 c4 10             	add    esp,0x10
c001e5da:	e4 60                	in     al,0x60
c001e5dc:	3c 5a                	cmp    al,0x5a
c001e5de:	74 04                	je     c001e5e4 <PCI::detect()+0xbc>
c001e5e0:	3c 1c                	cmp    al,0x1c
c001e5e2:	75 f6                	jne    c001e5da <PCI::detect()+0xb2>
c001e5e4:	e4 60                	in     al,0x60
c001e5e6:	3c 5a                	cmp    al,0x5a
c001e5e8:	74 fa                	je     c001e5e4 <PCI::detect()+0xbc>
c001e5ea:	3c 1c                	cmp    al,0x1c
c001e5ec:	74 f6                	je     c001e5e4 <PCI::detect()+0xbc>
c001e5ee:	eb c8                	jmp    c001e5b8 <PCI::detect()+0x90>
c001e5f0:	85 c0                	test   eax,eax
c001e5f2:	75 18                	jne    c001e60c <PCI::detect()+0xe4>
c001e5f4:	31 db                	xor    ebx,ebx
c001e5f6:	52                   	push   edx
c001e5f7:	52                   	push   edx
c001e5f8:	68 17 60 02 c0       	push   0xc0026017
c001e5fd:	8d 7c 24 15          	lea    edi,[esp+0x15]
c001e601:	57                   	push   edi
c001e602:	e8 39 21 fe ff       	call   c0000740 <strcpy>
c001e607:	83 c4 10             	add    esp,0x10
c001e60a:	eb 6a                	jmp    c001e676 <PCI::detect()+0x14e>
c001e60c:	83 ec 0c             	sub    esp,0xc
c001e60f:	68 1e 60 02 c0       	push   0xc002601e
c001e614:	e8 04 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e619:	83 c4 10             	add    esp,0x10
c001e61c:	e4 60                	in     al,0x60
c001e61e:	3c 5a                	cmp    al,0x5a
c001e620:	74 04                	je     c001e626 <PCI::detect()+0xfe>
c001e622:	3c 1c                	cmp    al,0x1c
c001e624:	75 f6                	jne    c001e61c <PCI::detect()+0xf4>
c001e626:	e4 60                	in     al,0x60
c001e628:	3c 5a                	cmp    al,0x5a
c001e62a:	74 fa                	je     c001e626 <PCI::detect()+0xfe>
c001e62c:	3c 1c                	cmp    al,0x1c
c001e62e:	74 f6                	je     c001e626 <PCI::detect()+0xfe>
c001e630:	eb c2                	jmp    c001e5f4 <PCI::detect()+0xcc>
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	57                   	push   edi
c001e636:	e8 e2 b3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e63b:	83 c4 10             	add    esp,0x10
c001e63e:	e4 60                	in     al,0x60
c001e640:	3c 5a                	cmp    al,0x5a
c001e642:	75 3d                	jne    c001e681 <PCI::detect()+0x159>
c001e644:	e4 60                	in     al,0x60
c001e646:	3c 5a                	cmp    al,0x5a
c001e648:	74 fa                	je     c001e644 <PCI::detect()+0x11c>
c001e64a:	3c 1c                	cmp    al,0x1c
c001e64c:	74 f6                	je     c001e644 <PCI::detect()+0x11c>
c001e64e:	fe 44 24 09          	inc    BYTE PTR [esp+0x9]
c001e652:	53                   	push   ebx
c001e653:	6a 00                	push   0x0
c001e655:	6a 00                	push   0x0
c001e657:	56                   	push   esi
c001e658:	e8 f9 ea ff ff       	call   c001d156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e65d:	83 c4 10             	add    esp,0x10
c001e660:	66 40                	inc    ax
c001e662:	75 23                	jne    c001e687 <PCI::detect()+0x15f>
c001e664:	50                   	push   eax
c001e665:	50                   	push   eax
c001e666:	53                   	push   ebx
c001e667:	43                   	inc    ebx
c001e668:	56                   	push   esi
c001e669:	e8 08 f1 ff ff       	call   c001d776 <PCI::checkBus(unsigned char)>
c001e66e:	83 c4 10             	add    esp,0x10
c001e671:	83 fb 08             	cmp    ebx,0x8
c001e674:	74 11                	je     c001e687 <PCI::detect()+0x15f>
c001e676:	f6 05 c1 74 02 c0 08 	test   BYTE PTR ds:0xc00274c1,0x8
c001e67d:	74 cf                	je     c001e64e <PCI::detect()+0x126>
c001e67f:	eb b1                	jmp    c001e632 <PCI::detect()+0x10a>
c001e681:	3c 1c                	cmp    al,0x1c
c001e683:	75 b9                	jne    c001e63e <PCI::detect()+0x116>
c001e685:	eb bd                	jmp    c001e644 <PCI::detect()+0x11c>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	5b                   	pop    ebx
c001e68b:	5e                   	pop    esi
c001e68c:	5f                   	pop    edi
c001e68d:	c3                   	ret    

c001e68e <IDE::close(int, int, void*)>:
c001e68e:	83 c8 ff             	or     eax,0xffffffff
c001e691:	c3                   	ret    

c001e692 <IDE::IDE()>:
c001e692:	83 ec 0c             	sub    esp,0xc
c001e695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e699:	83 ec 08             	sub    esp,0x8
c001e69c:	68 54 60 02 c0       	push   0xc0026054
c001e6a1:	50                   	push   eax
c001e6a2:	e8 91 fd fe ff       	call   c000e438 <HardDiskController::HardDiskController(char const*)>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c001e6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b3:	89 10                	mov    DWORD PTR [eax],edx
c001e6b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e6c0:	90                   	nop
c001e6c1:	83 c4 0c             	add    esp,0xc
c001e6c4:	c3                   	ret    
c001e6c5:	90                   	nop

c001e6c6 <IDE::prepareInterrupt(unsigned char)>:
c001e6c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e6cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e6cf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e6d7:	c3                   	ret    

c001e6d8 <selectDrive(unsigned char, unsigned char)>:
c001e6d8:	c3                   	ret    
c001e6d9:	90                   	nop

c001e6da <IDE::getBase(unsigned char)>:
c001e6da:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e6df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e6eb:	c3                   	ret    

c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e6ec:	55                   	push   ebp
c001e6ed:	57                   	push   edi
c001e6ee:	56                   	push   esi
c001e6ef:	53                   	push   ebx
c001e6f0:	83 ec 1c             	sub    esp,0x1c
c001e6f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e6f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e6fb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e6fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e706:	80 f9 03             	cmp    cl,0x3
c001e709:	77 51                	ja     c001e75c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e70b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e70f:	0f b6 f2             	movzx  esi,dl
c001e712:	0f b6 db             	movzx  ebx,bl
c001e715:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e718:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e71c:	83 ca 80             	or     edx,0xffffff80
c001e71f:	0f b6 d2             	movzx  edx,dl
c001e722:	52                   	push   edx
c001e723:	6a 0c                	push   0xc
c001e725:	56                   	push   esi
c001e726:	57                   	push   edi
c001e727:	e8 c0 ff ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e72c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e735:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e739:	ee                   	out    dx,al
c001e73a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e73f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e743:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e747:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e74b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e753:	83 c4 2c             	add    esp,0x2c
c001e756:	5b                   	pop    ebx
c001e757:	5e                   	pop    esi
c001e758:	5f                   	pop    edi
c001e759:	5d                   	pop    ebp
c001e75a:	eb 90                	jmp    c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e75c:	80 fb 07             	cmp    bl,0x7
c001e75f:	77 12                	ja     c001e773 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e761:	0f b6 d2             	movzx  edx,dl
c001e764:	0f b6 db             	movzx  ebx,bl
c001e767:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e76f:	89 da                	mov    edx,ebx
c001e771:	eb 2f                	jmp    c001e7a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e773:	80 fb 0d             	cmp    bl,0xd
c001e776:	77 13                	ja     c001e78b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e778:	0f b6 d2             	movzx  edx,dl
c001e77b:	0f b6 db             	movzx  ebx,bl
c001e77e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e785:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e789:	eb 17                	jmp    c001e7a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e78b:	80 fb 15             	cmp    bl,0x15
c001e78e:	77 13                	ja     c001e7a3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e790:	0f b6 d2             	movzx  edx,dl
c001e793:	0f b6 db             	movzx  ebx,bl
c001e796:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e79e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e7a2:	ee                   	out    dx,al
c001e7a3:	83 c4 1c             	add    esp,0x1c
c001e7a6:	5b                   	pop    ebx
c001e7a7:	5e                   	pop    esi
c001e7a8:	5f                   	pop    edi
c001e7a9:	5d                   	pop    ebp
c001e7aa:	c3                   	ret    
c001e7ab:	90                   	nop

c001e7ac <IDE::read(unsigned char, unsigned char)>:
c001e7ac:	55                   	push   ebp
c001e7ad:	57                   	push   edi
c001e7ae:	56                   	push   esi
c001e7af:	53                   	push   ebx
c001e7b0:	83 ec 1c             	sub    esp,0x1c
c001e7b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e7b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e7bb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e7be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e7c2:	3c 03                	cmp    al,0x3
c001e7c4:	77 43                	ja     c001e809 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e7c6:	0f b6 f2             	movzx  esi,dl
c001e7c9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e7cc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e7d0:	83 c8 80             	or     eax,0xffffff80
c001e7d3:	0f b6 c0             	movzx  eax,al
c001e7d6:	50                   	push   eax
c001e7d7:	6a 0c                	push   0xc
c001e7d9:	56                   	push   esi
c001e7da:	57                   	push   edi
c001e7db:	e8 0c ff ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7e0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e7e5:	0f b6 c3             	movzx  eax,bl
c001e7e8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e7ec:	ec                   	in     al,dx
c001e7ed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e7f1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e7f6:	52                   	push   edx
c001e7f7:	6a 0c                	push   0xc
c001e7f9:	56                   	push   esi
c001e7fa:	57                   	push   edi
c001e7fb:	e8 ec fe ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e800:	83 c4 20             	add    esp,0x20
c001e803:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e807:	eb 49                	jmp    c001e852 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e809:	80 fb 07             	cmp    bl,0x7
c001e80c:	77 12                	ja     c001e820 <IDE::read(unsigned char, unsigned char)+0x74>
c001e80e:	0f b6 d2             	movzx  edx,dl
c001e811:	0f b6 c3             	movzx  eax,bl
c001e814:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e81c:	89 c2                	mov    edx,eax
c001e81e:	eb 31                	jmp    c001e851 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e820:	80 fb 0d             	cmp    bl,0xd
c001e823:	77 13                	ja     c001e838 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e825:	0f b6 d2             	movzx  edx,dl
c001e828:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e82f:	0f b6 d3             	movzx  edx,bl
c001e832:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e836:	eb 19                	jmp    c001e851 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e838:	31 c0                	xor    eax,eax
c001e83a:	80 fb 15             	cmp    bl,0x15
c001e83d:	77 13                	ja     c001e852 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e83f:	0f b6 d2             	movzx  edx,dl
c001e842:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e84a:	0f b6 d3             	movzx  edx,bl
c001e84d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e851:	ec                   	in     al,dx
c001e852:	83 c4 1c             	add    esp,0x1c
c001e855:	5b                   	pop    ebx
c001e856:	5e                   	pop    esi
c001e857:	5f                   	pop    edi
c001e858:	5d                   	pop    ebp
c001e859:	c3                   	ret    

c001e85a <IDE::waitInterrupt(unsigned char)>:
c001e85a:	55                   	push   ebp
c001e85b:	57                   	push   edi
c001e85c:	56                   	push   esi
c001e85d:	53                   	push   ebx
c001e85e:	31 db                	xor    ebx,ebx
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e867:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e86c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e874:	89 e8                	mov    eax,ebp
c001e876:	84 c0                	test   al,al
c001e878:	75 30                	jne    c001e8aa <IDE::waitInterrupt(unsigned char)+0x50>
c001e87a:	50                   	push   eax
c001e87b:	6a 0c                	push   0xc
c001e87d:	56                   	push   esi
c001e87e:	57                   	push   edi
c001e87f:	e8 28 ff ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001e884:	83 c4 10             	add    esp,0x10
c001e887:	a8 01                	test   al,0x1
c001e889:	75 27                	jne    c001e8b2 <IDE::waitInterrupt(unsigned char)+0x58>
c001e88b:	f6 c3 04             	test   bl,0x4
c001e88e:	75 12                	jne    c001e8a2 <IDE::waitInterrupt(unsigned char)+0x48>
c001e890:	83 fb 32             	cmp    ebx,0x32
c001e893:	7e 0d                	jle    c001e8a2 <IDE::waitInterrupt(unsigned char)+0x48>
c001e895:	83 ec 0c             	sub    esp,0xc
c001e898:	6a 64                	push   0x64
c001e89a:	e8 8d 9d ff ff       	call   c001862c <milliTenthSleep(unsigned int)>
c001e89f:	83 c4 10             	add    esp,0x10
c001e8a2:	83 fb 3c             	cmp    ebx,0x3c
c001e8a5:	74 0b                	je     c001e8b2 <IDE::waitInterrupt(unsigned char)+0x58>
c001e8a7:	43                   	inc    ebx
c001e8a8:	eb c2                	jmp    c001e86c <IDE::waitInterrupt(unsigned char)+0x12>
c001e8aa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e8b2:	83 c4 0c             	add    esp,0xc
c001e8b5:	89 e8                	mov    eax,ebp
c001e8b7:	5b                   	pop    ebx
c001e8b8:	5e                   	pop    esi
c001e8b9:	5f                   	pop    edi
c001e8ba:	5d                   	pop    ebp
c001e8bb:	c3                   	ret    

c001e8bc <ideChannel0IRQHandler(regs*, void*)>:
c001e8bc:	83 ec 10             	sub    esp,0x10
c001e8bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8c3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e8ca:	6a 07                	push   0x7
c001e8cc:	6a 00                	push   0x0
c001e8ce:	50                   	push   eax
c001e8cf:	e8 d8 fe ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001e8d4:	83 c4 1c             	add    esp,0x1c
c001e8d7:	c3                   	ret    

c001e8d8 <ideChannel1IRQHandler(regs*, void*)>:
c001e8d8:	83 ec 10             	sub    esp,0x10
c001e8db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8df:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e8e6:	6a 07                	push   0x7
c001e8e8:	6a 01                	push   0x1
c001e8ea:	50                   	push   eax
c001e8eb:	e8 bc fe ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001e8f0:	83 c4 1c             	add    esp,0x1c
c001e8f3:	c3                   	ret    

c001e8f4 <IDE::enableIRQs(unsigned char, bool)>:
c001e8f4:	57                   	push   edi
c001e8f5:	56                   	push   esi
c001e8f6:	be 04 00 00 00       	mov    esi,0x4
c001e8fb:	53                   	push   ebx
c001e8fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e901:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e905:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e90a:	0f 94 c0             	sete   al
c001e90d:	d1 e0                	shl    eax,1
c001e90f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e916:	0f b6 c0             	movzx  eax,al
c001e919:	50                   	push   eax
c001e91a:	6a 0c                	push   0xc
c001e91c:	57                   	push   edi
c001e91d:	53                   	push   ebx
c001e91e:	e8 c9 fd ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	50                   	push   eax
c001e927:	6a 0c                	push   0xc
c001e929:	57                   	push   edi
c001e92a:	53                   	push   ebx
c001e92b:	e8 7c fe ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	4e                   	dec    esi
c001e934:	75 f0                	jne    c001e926 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e936:	5b                   	pop    ebx
c001e937:	5e                   	pop    esi
c001e938:	5f                   	pop    edi
c001e939:	c3                   	ret    

c001e93a <IDE::open(int, int, void*)>:
c001e93a:	55                   	push   ebp
c001e93b:	57                   	push   edi
c001e93c:	56                   	push   esi
c001e93d:	53                   	push   ebx
c001e93e:	83 ec 1c             	sub    esp,0x1c
c001e941:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e945:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e94e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e957:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e95e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e965:	0f 85 b0 02 00 00    	jne    c001ec1b <IDE::open(int, int, void*)+0x2e1>
c001e96b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e971:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e975:	83 e0 7f             	and    eax,0x7f
c001e978:	3c 05                	cmp    al,0x5
c001e97a:	74 04                	je     c001e980 <IDE::open(int, int, void*)+0x46>
c001e97c:	3c 0f                	cmp    al,0xf
c001e97e:	75 32                	jne    c001e9b2 <IDE::open(int, int, void*)+0x78>
c001e980:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e986:	83 e0 fc             	and    eax,0xfffffffc
c001e989:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e990:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e996:	83 e0 fc             	and    eax,0xfffffffc
c001e999:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e9a0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e9a6:	83 e0 fc             	and    eax,0xfffffffc
c001e9a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9b0:	eb 14                	jmp    c001e9c6 <IDE::open(int, int, void*)+0x8c>
c001e9b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e9bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e9c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e9cd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e9d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9d8:	89 c6                	mov    esi,eax
c001e9da:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e9df:	c1 e6 10             	shl    esi,0x10
c001e9e2:	89 e8                	mov    eax,ebp
c001e9e4:	89 fa                	mov    edx,edi
c001e9e6:	c1 e0 0b             	shl    eax,0xb
c001e9e9:	09 f0                	or     eax,esi
c001e9eb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e9f2:	c1 e6 08             	shl    esi,0x8
c001e9f5:	09 c6                	or     esi,eax
c001e9f7:	89 f0                	mov    eax,esi
c001e9f9:	0d 08 00 00 80       	or     eax,0x80000008
c001e9fe:	ef                   	out    dx,eax
c001e9ff:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ea04:	89 ca                	mov    edx,ecx
c001ea06:	ed                   	in     eax,dx
c001ea07:	c1 e8 10             	shr    eax,0x10
c001ea0a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea0f:	0f 84 f5 00 00 00    	je     c001eb0a <IDE::open(int, int, void*)+0x1d0>
c001ea15:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ea1b:	89 fa                	mov    edx,edi
c001ea1d:	89 f0                	mov    eax,esi
c001ea1f:	ef                   	out    dx,eax
c001ea20:	b0 fe                	mov    al,0xfe
c001ea22:	89 ca                	mov    edx,ecx
c001ea24:	ee                   	out    dx,al
c001ea25:	89 f0                	mov    eax,esi
c001ea27:	89 fa                	mov    edx,edi
c001ea29:	ef                   	out    dx,eax
c001ea2a:	89 ca                	mov    edx,ecx
c001ea2c:	ed                   	in     eax,dx
c001ea2d:	3c fe                	cmp    al,0xfe
c001ea2f:	0f 85 a9 00 00 00    	jne    c001eade <IDE::open(int, int, void*)+0x1a4>
c001ea35:	8b 15 a8 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274a8
c001ea3b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ea42:	74 33                	je     c001ea77 <IDE::open(int, int, void*)+0x13d>
c001ea44:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ea4a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ea4e:	40                   	inc    eax
c001ea4f:	83 ec 0c             	sub    esp,0xc
c001ea52:	0f b6 c0             	movzx  eax,al
c001ea55:	50                   	push   eax
c001ea56:	55                   	push   ebp
c001ea57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea5b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ea61:	51                   	push   ecx
c001ea62:	e8 55 35 ff ff       	call   c0011fbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ea67:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ea6c:	83 c4 1c             	add    esp,0x1c
c001ea6f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ea75:	eb 0a                	jmp    c001ea81 <IDE::open(int, int, void*)+0x147>
c001ea77:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ea81:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ea88:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ea8f:	c1 e1 10             	shl    ecx,0x10
c001ea92:	c1 e0 08             	shl    eax,0x8
c001ea95:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ea9a:	09 c1                	or     ecx,eax
c001ea9c:	89 fa                	mov    edx,edi
c001ea9e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eaa5:	c1 e0 0b             	shl    eax,0xb
c001eaa8:	09 c1                	or     ecx,eax
c001eaaa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eab0:	89 c8                	mov    eax,ecx
c001eab2:	ef                   	out    dx,eax
c001eab3:	be fc 0c 00 00       	mov    esi,0xcfc
c001eab8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eabe:	89 f2                	mov    edx,esi
c001eac0:	ee                   	out    dx,al
c001eac1:	89 c8                	mov    eax,ecx
c001eac3:	89 fa                	mov    edx,edi
c001eac5:	ef                   	out    dx,eax
c001eac6:	89 f2                	mov    edx,esi
c001eac8:	ed                   	in     eax,dx
c001eac9:	0f b6 c0             	movzx  eax,al
c001eacc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ead2:	74 46                	je     c001eb1a <IDE::open(int, int, void*)+0x1e0>
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	68 6c 60 02 c0       	push   0xc002606c
c001eadc:	eb 34                	jmp    c001eb12 <IDE::open(int, int, void*)+0x1d8>
c001eade:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eae7:	75 17                	jne    c001eb00 <IDE::open(int, int, void*)+0x1c6>
c001eae9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001eaee:	74 07                	je     c001eaf7 <IDE::open(int, int, void*)+0x1bd>
c001eaf0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001eaf5:	75 09                	jne    c001eb00 <IDE::open(int, int, void*)+0x1c6>
c001eaf7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eafe:	eb 1a                	jmp    c001eb1a <IDE::open(int, int, void*)+0x1e0>
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	68 74 60 02 c0       	push   0xc0026074
c001eb08:	eb 08                	jmp    c001eb12 <IDE::open(int, int, void*)+0x1d8>
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	68 a5 60 02 c0       	push   0xc00260a5
c001eb12:	e8 4c 5c ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001eb21:	79 1a                	jns    c001eb3d <IDE::open(int, int, void*)+0x203>
c001eb23:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eb29:	83 e0 fc             	and    eax,0xfffffffc
c001eb2c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eb33:	83 c0 08             	add    eax,0x8
c001eb36:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eb3d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eb43:	89 c2                	mov    edx,eax
c001eb45:	83 e2 0f             	and    edx,0xf
c001eb48:	66 83 fa 08          	cmp    dx,0x8
c001eb4c:	75 0a                	jne    c001eb58 <IDE::open(int, int, void*)+0x21e>
c001eb4e:	83 e8 02             	sub    eax,0x2
c001eb51:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb58:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eb5e:	89 c2                	mov    edx,eax
c001eb60:	83 e2 0f             	and    edx,0xf
c001eb63:	66 83 fa 08          	cmp    dx,0x8
c001eb67:	75 0a                	jne    c001eb73 <IDE::open(int, int, void*)+0x239>
c001eb69:	83 e8 02             	sub    eax,0x2
c001eb6c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb73:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eb7a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001eb81:	89 d0                	mov    eax,edx
c001eb83:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eb86:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eb8a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001eb8e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001eb91:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eb96:	0f b6 c9             	movzx  ecx,cl
c001eb99:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001eba0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eba3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eba7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ebab:	8d 50 02             	lea    edx,[eax+0x2]
c001ebae:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ebb3:	0f b6 d2             	movzx  edx,dl
c001ebb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ebbc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ebbf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ebc3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ebc7:	8d 48 03             	lea    ecx,[eax+0x3]
c001ebca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ebcf:	0f b6 c9             	movzx  ecx,cl
c001ebd2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ebd8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebdb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebdf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ebe3:	8d 50 04             	lea    edx,[eax+0x4]
c001ebe6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ebec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ebf1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ebf8:	66 85 f6             	test   si,si
c001ebfb:	74 5b                	je     c001ec58 <IDE::open(int, int, void*)+0x31e>
c001ebfd:	0f b6 d2             	movzx  edx,dl
c001ec00:	83 c0 05             	add    eax,0x5
c001ec03:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec06:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec0a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ec0e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec14:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ec19:	eb 3d                	jmp    c001ec58 <IDE::open(int, int, void*)+0x31e>
c001ec1b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ec21:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec28:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec2f:	66 05 06 02          	add    ax,0x206
c001ec33:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec3a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ec41:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec48:	66 05 06 02          	add    ax,0x206
c001ec4c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ec53:	e9 e5 fe ff ff       	jmp    c001eb3d <IDE::open(int, int, void*)+0x203>
c001ec58:	50                   	push   eax
c001ec59:	50                   	push   eax
c001ec5a:	6a 00                	push   0x0
c001ec5c:	53                   	push   ebx
c001ec5d:	e8 64 fa ff ff       	call   c001e6c6 <IDE::prepareInterrupt(unsigned char)>
c001ec62:	5a                   	pop    edx
c001ec63:	59                   	pop    ecx
c001ec64:	6a 01                	push   0x1
c001ec66:	53                   	push   ebx
c001ec67:	e8 5a fa ff ff       	call   c001e6c6 <IDE::prepareInterrupt(unsigned char)>
c001ec6c:	83 c4 0c             	add    esp,0xc
c001ec6f:	6a 00                	push   0x0
c001ec71:	6a 00                	push   0x0
c001ec73:	53                   	push   ebx
c001ec74:	e8 7b fc ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001ec79:	83 c4 0c             	add    esp,0xc
c001ec7c:	6a 00                	push   0x0
c001ec7e:	6a 01                	push   0x1
c001ec80:	53                   	push   ebx
c001ec81:	e8 6e fc ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001ec86:	83 c4 10             	add    esp,0x10
c001ec89:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ec90:	74 34                	je     c001ecc6 <IDE::open(int, int, void*)+0x38c>
c001ec92:	83 ec 0c             	sub    esp,0xc
c001ec95:	53                   	push   ebx
c001ec96:	6a 01                	push   0x1
c001ec98:	68 bc e8 01 c0       	push   0xc001e8bc
c001ec9d:	6a 0e                	push   0xe
c001ec9f:	53                   	push   ebx
c001eca0:	e8 5d f3 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eca5:	83 c4 14             	add    esp,0x14
c001eca8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ecae:	53                   	push   ebx
c001ecaf:	6a 01                	push   0x1
c001ecb1:	68 d8 e8 01 c0       	push   0xc001e8d8
c001ecb6:	6a 0f                	push   0xf
c001ecb8:	53                   	push   ebx
c001ecb9:	e8 44 f3 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecbe:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ecc4:	eb 38                	jmp    c001ecfe <IDE::open(int, int, void*)+0x3c4>
c001ecc6:	83 ec 0c             	sub    esp,0xc
c001ecc9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ecd3:	53                   	push   ebx
c001ecd4:	6a 00                	push   0x0
c001ecd6:	68 bc e8 01 c0       	push   0xc001e8bc
c001ecdb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ece1:	53                   	push   ebx
c001ece2:	e8 1b f3 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ece7:	83 c4 14             	add    esp,0x14
c001ecea:	53                   	push   ebx
c001eceb:	6a 00                	push   0x0
c001eced:	68 d8 e8 01 c0       	push   0xc001e8d8
c001ecf2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ecf8:	53                   	push   ebx
c001ecf9:	e8 04 f3 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed00:	83 c4 20             	add    esp,0x20
c001ed03:	83 ec 0c             	sub    esp,0xc
c001ed06:	53                   	push   ebx
c001ed07:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ed0a:	83 c4 0c             	add    esp,0xc
c001ed0d:	6a 07                	push   0x7
c001ed0f:	6a 00                	push   0x0
c001ed11:	53                   	push   ebx
c001ed12:	e8 95 fa ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ed17:	83 c4 0c             	add    esp,0xc
c001ed1a:	6a 07                	push   0x7
c001ed1c:	6a 01                	push   0x1
c001ed1e:	53                   	push   ebx
c001ed1f:	e8 88 fa ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ed24:	83 c4 0c             	add    esp,0xc
c001ed27:	6a 01                	push   0x1
c001ed29:	6a 00                	push   0x0
c001ed2b:	53                   	push   ebx
c001ed2c:	e8 c3 fb ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001ed31:	83 c4 0c             	add    esp,0xc
c001ed34:	6a 01                	push   0x1
c001ed36:	6a 01                	push   0x1
c001ed38:	53                   	push   ebx
c001ed39:	e8 b6 fb ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001ed3e:	83 c4 2c             	add    esp,0x2c
c001ed41:	31 c0                	xor    eax,eax
c001ed43:	5b                   	pop    ebx
c001ed44:	5e                   	pop    esi
c001ed45:	5f                   	pop    edi
c001ed46:	5d                   	pop    ebp
c001ed47:	c3                   	ret    

c001ed48 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ed48:	55                   	push   ebp
c001ed49:	57                   	push   edi
c001ed4a:	56                   	push   esi
c001ed4b:	53                   	push   ebx
c001ed4c:	83 ec 1c             	sub    esp,0x1c
c001ed4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ed57:	8d 50 f8             	lea    edx,[eax-0x8]
c001ed5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed5e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ed62:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ed66:	80 fa 03             	cmp    dl,0x3
c001ed69:	77 5d                	ja     c001edc8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ed6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed73:	0f b6 db             	movzx  ebx,bl
c001ed76:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ed79:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ed7d:	83 ca 80             	or     edx,0xffffff80
c001ed80:	0f b6 d2             	movzx  edx,dl
c001ed83:	52                   	push   edx
c001ed84:	6a 0c                	push   0xc
c001ed86:	53                   	push   ebx
c001ed87:	56                   	push   esi
c001ed88:	e8 5f f9 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed8d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ed92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed96:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ed9a:	0f b6 c0             	movzx  eax,al
c001ed9d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eda1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eda3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eda8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001edac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001edb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001edb4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001edbc:	83 c4 2c             	add    esp,0x2c
c001edbf:	5b                   	pop    ebx
c001edc0:	5e                   	pop    esi
c001edc1:	5f                   	pop    edi
c001edc2:	5d                   	pop    ebp
c001edc3:	e9 24 f9 ff ff       	jmp    c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc8:	3c 07                	cmp    al,0x7
c001edca:	77 10                	ja     c001eddc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001edcc:	0f b6 db             	movzx  ebx,bl
c001edcf:	0f b6 d0             	movzx  edx,al
c001edd2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001edda:	eb 2d                	jmp    c001ee09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eddc:	3c 0d                	cmp    al,0xd
c001edde:	77 13                	ja     c001edf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ede0:	0f b6 db             	movzx  ebx,bl
c001ede3:	0f b6 c0             	movzx  eax,al
c001ede6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001eded:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001edf1:	eb 16                	jmp    c001ee09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001edf3:	3c 15                	cmp    al,0x15
c001edf5:	77 14                	ja     c001ee0b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001edf7:	0f b6 db             	movzx  ebx,bl
c001edfa:	0f b6 c0             	movzx  eax,al
c001edfd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ee05:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ee09:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee0b:	83 c4 1c             	add    esp,0x1c
c001ee0e:	5b                   	pop    ebx
c001ee0f:	5e                   	pop    esi
c001ee10:	5f                   	pop    edi
c001ee11:	5d                   	pop    ebp
c001ee12:	c3                   	ret    
c001ee13:	90                   	nop

c001ee14 <IDE::detect()>:
c001ee14:	55                   	push   ebp
c001ee15:	57                   	push   edi
c001ee16:	56                   	push   esi
c001ee17:	53                   	push   ebx
c001ee18:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ee1e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ee25:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ee2c:	0f 85 97 02 00 00    	jne    c001f0c9 <IDE::detect()+0x2b5>
c001ee32:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ee39:	31 f6                	xor    esi,esi
c001ee3b:	31 ed                	xor    ebp,ebp
c001ee3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ee45:	89 e8                	mov    eax,ebp
c001ee47:	c1 e0 06             	shl    eax,0x6
c001ee4a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ee52:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ee56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ee5a:	c1 e0 04             	shl    eax,0x4
c001ee5d:	83 c8 a0             	or     eax,0xffffffa0
c001ee60:	0f b6 c0             	movzx  eax,al
c001ee63:	50                   	push   eax
c001ee64:	6a 06                	push   0x6
c001ee66:	56                   	push   esi
c001ee67:	53                   	push   ebx
c001ee68:	e8 7f f8 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee6d:	83 c4 0c             	add    esp,0xc
c001ee70:	6a 0c                	push   0xc
c001ee72:	56                   	push   esi
c001ee73:	53                   	push   ebx
c001ee74:	e8 33 f9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ee79:	83 c4 0c             	add    esp,0xc
c001ee7c:	6a 0c                	push   0xc
c001ee7e:	56                   	push   esi
c001ee7f:	53                   	push   ebx
c001ee80:	e8 27 f9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ee85:	83 c4 0c             	add    esp,0xc
c001ee88:	6a 0c                	push   0xc
c001ee8a:	56                   	push   esi
c001ee8b:	53                   	push   ebx
c001ee8c:	e8 1b f9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ee91:	83 c4 0c             	add    esp,0xc
c001ee94:	6a 0c                	push   0xc
c001ee96:	56                   	push   esi
c001ee97:	53                   	push   ebx
c001ee98:	e8 0f f9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001ee9d:	68 ec 00 00 00       	push   0xec
c001eea2:	6a 07                	push   0x7
c001eea4:	56                   	push   esi
c001eea5:	53                   	push   ebx
c001eea6:	e8 41 f8 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eeab:	83 c4 1c             	add    esp,0x1c
c001eeae:	6a 0c                	push   0xc
c001eeb0:	56                   	push   esi
c001eeb1:	53                   	push   ebx
c001eeb2:	e8 f5 f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eeb7:	83 c4 0c             	add    esp,0xc
c001eeba:	6a 0c                	push   0xc
c001eebc:	56                   	push   esi
c001eebd:	53                   	push   ebx
c001eebe:	e8 e9 f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eec3:	83 c4 0c             	add    esp,0xc
c001eec6:	6a 0c                	push   0xc
c001eec8:	56                   	push   esi
c001eec9:	53                   	push   ebx
c001eeca:	e8 dd f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eecf:	83 c4 0c             	add    esp,0xc
c001eed2:	6a 0c                	push   0xc
c001eed4:	56                   	push   esi
c001eed5:	53                   	push   ebx
c001eed6:	e8 d1 f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eedb:	83 c4 0c             	add    esp,0xc
c001eede:	6a 0c                	push   0xc
c001eee0:	56                   	push   esi
c001eee1:	53                   	push   ebx
c001eee2:	e8 c5 f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eee7:	83 c4 10             	add    esp,0x10
c001eeea:	84 c0                	test   al,al
c001eeec:	0f 84 5f 01 00 00    	je     c001f051 <IDE::detect()+0x23d>
c001eef2:	31 ff                	xor    edi,edi
c001eef4:	50                   	push   eax
c001eef5:	6a 0c                	push   0xc
c001eef7:	56                   	push   esi
c001eef8:	53                   	push   ebx
c001eef9:	e8 ae f8 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001eefe:	83 c4 10             	add    esp,0x10
c001ef01:	a8 01                	test   al,0x1
c001ef03:	0f 85 69 01 00 00    	jne    c001f072 <IDE::detect()+0x25e>
c001ef09:	84 c0                	test   al,al
c001ef0b:	78 04                	js     c001ef11 <IDE::detect()+0xfd>
c001ef0d:	a8 08                	test   al,0x8
c001ef0f:	75 23                	jne    c001ef34 <IDE::detect()+0x120>
c001ef11:	47                   	inc    edi
c001ef12:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ef18:	7e da                	jle    c001eef4 <IDE::detect()+0xe0>
c001ef1a:	83 ec 0c             	sub    esp,0xc
c001ef1d:	6a 32                	push   0x32
c001ef1f:	e8 08 97 ff ff       	call   c001862c <milliTenthSleep(unsigned int)>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ef2d:	75 c5                	jne    c001eef4 <IDE::detect()+0xe0>
c001ef2f:	e9 3e 01 00 00       	jmp    c001f072 <IDE::detect()+0x25e>
c001ef34:	31 c9                	xor    ecx,ecx
c001ef36:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ef3a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	68 80 00 00 00       	push   0x80
c001ef46:	57                   	push   edi
c001ef47:	6a 00                	push   0x0
c001ef49:	56                   	push   esi
c001ef4a:	53                   	push   ebx
c001ef4b:	e8 f8 fd ff ff       	call   c001ed48 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ef50:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ef55:	89 e8                	mov    eax,ebp
c001ef57:	89 d1                	mov    ecx,edx
c001ef59:	c1 e0 06             	shl    eax,0x6
c001ef5c:	01 d8                	add    eax,ebx
c001ef5e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ef65:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ef6c:	89 f2                	mov    edx,esi
c001ef6e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ef74:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ef78:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ef7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ef82:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ef89:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ef91:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ef98:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001efa0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001efa6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001efad:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001efb3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001efb7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001efbb:	83 c4 20             	add    esp,0x20
c001efbe:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001efc1:	83 c0 02             	add    eax,0x2
c001efc4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001efca:	83 c7 02             	add    edi,0x2
c001efcd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001efd0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001efd6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001efda:	75 e2                	jne    c001efbe <IDE::detect()+0x1aa>
c001efdc:	89 e8                	mov    eax,ebp
c001efde:	c1 e0 06             	shl    eax,0x6
c001efe1:	01 d8                	add    eax,ebx
c001efe3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001efe9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001eff0:	66 c1 ea 09          	shr    dx,0x9
c001eff4:	83 e2 01             	and    edx,0x1
c001eff7:	84 c9                	test   cl,cl
c001eff9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001efff:	75 22                	jne    c001f023 <IDE::detect()+0x20f>
c001f001:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f008:	74 46                	je     c001f050 <IDE::detect()+0x23c>
c001f00a:	83 ec 0c             	sub    esp,0xc
c001f00d:	68 7c 01 00 00       	push   0x17c
c001f012:	e8 ac a9 fe ff       	call   c00099c3 <malloc>
c001f017:	89 c7                	mov    edi,eax
c001f019:	89 04 24             	mov    DWORD PTR [esp],eax
c001f01c:	e8 13 05 00 00       	call   c001f534 <ATA::ATA()>
c001f021:	eb 17                	jmp    c001f03a <IDE::detect()+0x226>
c001f023:	83 ec 0c             	sub    esp,0xc
c001f026:	68 80 01 00 00       	push   0x180
c001f02b:	e8 93 a9 fe ff       	call   c00099c3 <malloc>
c001f030:	89 c7                	mov    edi,eax
c001f032:	89 04 24             	mov    DWORD PTR [esp],eax
c001f035:	e8 82 0b 00 00       	call   c001fbbc <ATAPI::ATAPI()>
c001f03a:	5a                   	pop    edx
c001f03b:	59                   	pop    ecx
c001f03c:	57                   	push   edi
c001f03d:	53                   	push   ebx
c001f03e:	e8 47 f0 fe ff       	call   c000e08a <Device::addChild(Device*)>
c001f043:	8b 07                	mov    eax,DWORD PTR [edi]
c001f045:	53                   	push   ebx
c001f046:	55                   	push   ebp
c001f047:	6a 00                	push   0x0
c001f049:	57                   	push   edi
c001f04a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f04d:	83 c4 20             	add    esp,0x20
c001f050:	45                   	inc    ebp
c001f051:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f056:	74 0d                	je     c001f065 <IDE::detect()+0x251>
c001f058:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f060:	e9 e0 fd ff ff       	jmp    c001ee45 <IDE::detect()+0x31>
c001f065:	4e                   	dec    esi
c001f066:	74 61                	je     c001f0c9 <IDE::detect()+0x2b5>
c001f068:	be 01 00 00 00       	mov    esi,0x1
c001f06d:	e9 cb fd ff ff       	jmp    c001ee3d <IDE::detect()+0x29>
c001f072:	50                   	push   eax
c001f073:	6a 04                	push   0x4
c001f075:	56                   	push   esi
c001f076:	53                   	push   ebx
c001f077:	e8 30 f7 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f07c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f080:	83 c4 0c             	add    esp,0xc
c001f083:	6a 05                	push   0x5
c001f085:	56                   	push   esi
c001f086:	53                   	push   ebx
c001f087:	e8 20 f7 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f093:	80 fa 14             	cmp    dl,0x14
c001f096:	75 04                	jne    c001f09c <IDE::detect()+0x288>
c001f098:	3c eb                	cmp    al,0xeb
c001f09a:	eb 07                	jmp    c001f0a3 <IDE::detect()+0x28f>
c001f09c:	3c 96                	cmp    al,0x96
c001f09e:	75 b1                	jne    c001f051 <IDE::detect()+0x23d>
c001f0a0:	80 fa 69             	cmp    dl,0x69
c001f0a3:	75 ac                	jne    c001f051 <IDE::detect()+0x23d>
c001f0a5:	68 a1 00 00 00       	push   0xa1
c001f0aa:	6a 07                	push   0x7
c001f0ac:	56                   	push   esi
c001f0ad:	53                   	push   ebx
c001f0ae:	e8 39 f6 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0b3:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f0ba:	e8 6d 95 ff ff       	call   c001862c <milliTenthSleep(unsigned int)>
c001f0bf:	83 c4 10             	add    esp,0x10
c001f0c2:	b1 01                	mov    cl,0x1
c001f0c4:	e9 6d fe ff ff       	jmp    c001ef36 <IDE::detect()+0x122>
c001f0c9:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f0cf:	5b                   	pop    ebx
c001f0d0:	5e                   	pop    esi
c001f0d1:	5f                   	pop    edi
c001f0d2:	5d                   	pop    ebp
c001f0d3:	c3                   	ret    

c001f0d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f0d4:	55                   	push   ebp
c001f0d5:	57                   	push   edi
c001f0d6:	56                   	push   esi
c001f0d7:	53                   	push   ebx
c001f0d8:	83 ec 1c             	sub    esp,0x1c
c001f0db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f0df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f0e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f0e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f0eb:	88 c3                	mov    bl,al
c001f0ed:	84 c0                	test   al,al
c001f0ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0f3:	0f 84 81 00 00 00    	je     c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f0f9:	83 ec 0c             	sub    esp,0xc
c001f0fc:	68 cf 60 02 c0       	push   0xc00260cf
c001f101:	e8 3d db fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f106:	83 c4 10             	add    esp,0x10
c001f109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f10d:	3c 01                	cmp    al,0x1
c001f10f:	74 63                	je     c001f174 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f111:	3c 02                	cmp    al,0x2
c001f113:	75 53                	jne    c001f168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f115:	d1 e6                	shl    esi,1
c001f117:	09 ee                	or     esi,ebp
c001f119:	50                   	push   eax
c001f11a:	89 f0                	mov    eax,esi
c001f11c:	6a 01                	push   0x1
c001f11e:	0f b6 f0             	movzx  esi,al
c001f121:	c1 e6 06             	shl    esi,0x6
c001f124:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f12c:	50                   	push   eax
c001f12d:	57                   	push   edi
c001f12e:	e8 79 f6 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	a8 01                	test   al,0x1
c001f138:	74 02                	je     c001f13c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f13a:	b3 07                	mov    bl,0x7
c001f13c:	a8 02                	test   al,0x2
c001f13e:	74 02                	je     c001f142 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f140:	b3 03                	mov    bl,0x3
c001f142:	a8 04                	test   al,0x4
c001f144:	74 02                	je     c001f148 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f146:	b3 14                	mov    bl,0x14
c001f148:	a8 08                	test   al,0x8
c001f14a:	74 02                	je     c001f14e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f14c:	b3 03                	mov    bl,0x3
c001f14e:	a8 10                	test   al,0x10
c001f150:	74 02                	je     c001f154 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f152:	b3 15                	mov    bl,0x15
c001f154:	a8 20                	test   al,0x20
c001f156:	74 02                	je     c001f15a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f158:	b3 03                	mov    bl,0x3
c001f15a:	a8 40                	test   al,0x40
c001f15c:	74 02                	je     c001f160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f15e:	b3 16                	mov    bl,0x16
c001f160:	84 c0                	test   al,al
c001f162:	79 16                	jns    c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f164:	b3 0d                	mov    bl,0xd
c001f166:	eb 12                	jmp    c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f168:	3c 03                	cmp    al,0x3
c001f16a:	74 0c                	je     c001f178 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f16c:	3c 04                	cmp    al,0x4
c001f16e:	75 0a                	jne    c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f170:	b3 08                	mov    bl,0x8
c001f172:	eb 06                	jmp    c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f174:	b3 13                	mov    bl,0x13
c001f176:	eb 02                	jmp    c001f17a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f178:	b3 17                	mov    bl,0x17
c001f17a:	83 c4 1c             	add    esp,0x1c
c001f17d:	88 d8                	mov    al,bl
c001f17f:	5b                   	pop    ebx
c001f180:	5e                   	pop    esi
c001f181:	5f                   	pop    edi
c001f182:	5d                   	pop    ebp
c001f183:	c3                   	ret    

c001f184 <IDE::polling(unsigned char, unsigned int)>:
c001f184:	57                   	push   edi
c001f185:	56                   	push   esi
c001f186:	53                   	push   ebx
c001f187:	bb 04 00 00 00       	mov    ebx,0x4
c001f18c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f190:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f195:	52                   	push   edx
c001f196:	6a 0c                	push   0xc
c001f198:	56                   	push   esi
c001f199:	57                   	push   edi
c001f19a:	e8 0d f6 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	4b                   	dec    ebx
c001f1a3:	75 f0                	jne    c001f195 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f1a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f1aa:	50                   	push   eax
c001f1ab:	6a 0c                	push   0xc
c001f1ad:	56                   	push   esi
c001f1ae:	57                   	push   edi
c001f1af:	e8 f8 f5 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	a8 01                	test   al,0x1
c001f1b9:	75 17                	jne    c001f1d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f1bb:	a8 20                	test   al,0x20
c001f1bd:	75 0f                	jne    c001f1ce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f1bf:	4b                   	dec    ebx
c001f1c0:	74 10                	je     c001f1d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f1c2:	84 c0                	test   al,al
c001f1c4:	78 e4                	js     c001f1aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001f1c6:	a8 08                	test   al,0x8
c001f1c8:	74 e0                	je     c001f1aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001f1ca:	31 c0                	xor    eax,eax
c001f1cc:	eb 06                	jmp    c001f1d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f1ce:	b0 01                	mov    al,0x1
c001f1d0:	eb 02                	jmp    c001f1d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f1d2:	b0 02                	mov    al,0x2
c001f1d4:	5b                   	pop    ebx
c001f1d5:	5e                   	pop    esi
c001f1d6:	5f                   	pop    edi
c001f1d7:	c3                   	ret    

c001f1d8 <SATABus::close(int, int, void*)>:
c001f1d8:	31 c0                	xor    eax,eax
c001f1da:	c3                   	ret    
c001f1db:	90                   	nop

c001f1dc <SATABus::detect()>:
c001f1dc:	c3                   	ret    
c001f1dd:	90                   	nop

c001f1de <SATABus::SATABus()>:
c001f1de:	83 ec 0c             	sub    esp,0xc
c001f1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e5:	83 ec 08             	sub    esp,0x8
c001f1e8:	68 08 61 02 c0       	push   0xc0026108
c001f1ed:	50                   	push   eax
c001f1ee:	e8 45 f2 fe ff       	call   c000e438 <HardDiskController::HardDiskController(char const*)>
c001f1f3:	83 c4 10             	add    esp,0x10
c001f1f6:	ba 5c 61 02 c0       	mov    edx,0xc002615c
c001f1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ff:	89 10                	mov    DWORD PTR [eax],edx
c001f201:	83 ec 0c             	sub    esp,0xc
c001f204:	6a 50                	push   0x50
c001f206:	e8 e9 ae fe ff       	call   c000a0f4 <Phys::allocateContiguousPages(int)>
c001f20b:	83 c4 10             	add    esp,0x10
c001f20e:	89 c2                	mov    edx,eax
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	6a 50                	push   0x50
c001f21f:	e8 f9 c6 fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c001f224:	83 c4 10             	add    esp,0x10
c001f227:	89 c2                	mov    edx,eax
c001f229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f233:	a1 d0 75 02 c0       	mov    eax,ds:0xc00275d0
c001f238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f23c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f242:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f246:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	6a 03                	push   0x3
c001f251:	6a 50                	push   0x50
c001f253:	51                   	push   ecx
c001f254:	52                   	push   edx
c001f255:	50                   	push   eax
c001f256:	e8 5f d0 fe ff       	call   c000c2ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f25b:	83 c4 20             	add    esp,0x20
c001f25e:	90                   	nop
c001f25f:	83 c4 0c             	add    esp,0xc
c001f262:	c3                   	ret    
c001f263:	90                   	nop

c001f264 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f264:	83 ec 0c             	sub    esp,0xc
c001f267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f26b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f26e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f271:	09 c2                	or     edx,eax
c001f273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f277:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f27d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f27f:	31 c0                	xor    eax,eax
c001f281:	c1 e9 08             	shr    ecx,0x8
c001f284:	83 e1 0f             	and    ecx,0xf
c001f287:	39 c8                	cmp    eax,ecx
c001f289:	74 0a                	je     c001f295 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f28b:	f6 c2 01             	test   dl,0x1
c001f28e:	74 18                	je     c001f2a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001f290:	d1 ea                	shr    edx,1
c001f292:	40                   	inc    eax
c001f293:	eb f2                	jmp    c001f287 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001f295:	83 ec 0c             	sub    esp,0xc
c001f298:	68 2c 61 02 c0       	push   0xc002612c
c001f29d:	e8 c1 54 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c001f2a2:	83 c4 10             	add    esp,0x10
c001f2a5:	83 c8 ff             	or     eax,0xffffffff
c001f2a8:	83 c4 0c             	add    esp,0xc
c001f2ab:	c3                   	ret    

c001f2ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f2ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2b0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f2b3:	89 c2                	mov    edx,eax
c001f2b5:	c1 ea 08             	shr    edx,0x8
c001f2b8:	83 e2 0f             	and    edx,0xf
c001f2bb:	fe ca                	dec    dl
c001f2bd:	75 31                	jne    c001f2f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2bf:	83 e0 0f             	and    eax,0xf
c001f2c2:	3c 03                	cmp    al,0x3
c001f2c4:	75 2a                	jne    c001f2f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2c6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f2c9:	b8 02 00 00 00       	mov    eax,0x2
c001f2ce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f2d4:	74 1c                	je     c001f2f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f2d6:	b8 04 00 00 00       	mov    eax,0x4
c001f2db:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f2e1:	74 0f                	je     c001f2f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f2e3:	31 c0                	xor    eax,eax
c001f2e5:	83 fa 03             	cmp    edx,0x3
c001f2e8:	0f 94 c0             	sete   al
c001f2eb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f2ef:	c3                   	ret    
c001f2f0:	31 c0                	xor    eax,eax
c001f2f2:	c3                   	ret    
c001f2f3:	90                   	nop

c001f2f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f2f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2fb:	0f ba e2 0f          	bt     edx,0xf
c001f2ff:	72 f7                	jb     c001f2f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f301:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f304:	83 ca 10             	or     edx,0x10
c001f307:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f30a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f30d:	83 ca 01             	or     edx,0x1
c001f310:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f313:	c3                   	ret    

c001f314 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f318:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f31b:	83 e2 fe             	and    edx,0xfffffffe
c001f31e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f321:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f324:	83 e2 ef             	and    edx,0xffffffef
c001f327:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f32a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f32d:	0f ba e2 0e          	bt     edx,0xe
c001f331:	72 f7                	jb     c001f32a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f333:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f336:	0f ba e2 0f          	bt     edx,0xf
c001f33a:	72 ee                	jb     c001f32a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f33c:	c3                   	ret    
c001f33d:	90                   	nop

c001f33e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f33e:	55                   	push   ebp
c001f33f:	57                   	push   edi
c001f340:	56                   	push   esi
c001f341:	53                   	push   ebx
c001f342:	83 ec 1c             	sub    esp,0x1c
c001f345:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f349:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f34d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f351:	53                   	push   ebx
c001f352:	89 fd                	mov    ebp,edi
c001f354:	56                   	push   esi
c001f355:	c1 e5 0a             	shl    ebp,0xa
c001f358:	e8 b7 ff ff ff       	call   c001f314 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f35d:	83 ec 0c             	sub    esp,0xc
c001f360:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f366:	01 e8                	add    eax,ebp
c001f368:	89 03                	mov    DWORD PTR [ebx],eax
c001f36a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f36c:	68 00 04 00 00       	push   0x400
c001f371:	6a 00                	push   0x0
c001f373:	50                   	push   eax
c001f374:	e8 0b 13 fe ff       	call   c0000684 <memset>
c001f379:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f37f:	89 fa                	mov    edx,edi
c001f381:	01 e8                	add    eax,ebp
c001f383:	c1 e7 0d             	shl    edi,0xd
c001f386:	89 03                	mov    DWORD PTR [ebx],eax
c001f388:	c1 e2 08             	shl    edx,0x8
c001f38b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f392:	81 c2 00 80 00 00    	add    edx,0x8000
c001f398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f39c:	89 d0                	mov    eax,edx
c001f39e:	83 c4 1c             	add    esp,0x1c
c001f3a1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f3a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f3aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f3ad:	68 00 01 00 00       	push   0x100
c001f3b2:	6a 00                	push   0x0
c001f3b4:	50                   	push   eax
c001f3b5:	e8 ca 12 fe ff       	call   c0000684 <memset>
c001f3ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f3c4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f3ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f3ce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f3d1:	83 c4 10             	add    esp,0x10
c001f3d4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f3db:	31 ff                	xor    edi,edi
c001f3dd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f3e3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f3e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3ed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f3f3:	83 c5 20             	add    ebp,0x20
c001f3f6:	01 f8                	add    eax,edi
c001f3f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f3fb:	52                   	push   edx
c001f3fc:	68 00 01 00 00       	push   0x100
c001f401:	6a 00                	push   0x0
c001f403:	50                   	push   eax
c001f404:	e8 7b 12 fe ff       	call   c0000684 <memset>
c001f409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f40d:	83 c4 10             	add    esp,0x10
c001f410:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f416:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f41d:	01 f8                	add    eax,edi
c001f41f:	81 c7 00 01 00 00    	add    edi,0x100
c001f425:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f428:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f42e:	75 b3                	jne    c001f3e3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f430:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f434:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f438:	83 c4 1c             	add    esp,0x1c
c001f43b:	5b                   	pop    ebx
c001f43c:	5e                   	pop    esi
c001f43d:	5f                   	pop    edi
c001f43e:	5d                   	pop    ebp
c001f43f:	e9 b0 fe ff ff       	jmp    c001f2f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f444 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f444:	55                   	push   ebp
c001f445:	57                   	push   edi
c001f446:	56                   	push   esi
c001f447:	53                   	push   ebx
c001f448:	31 db                	xor    ebx,ebx
c001f44a:	83 ec 0c             	sub    esp,0xc
c001f44d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f451:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f455:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f458:	f7 c7 01 00 00 00    	test   edi,0x1
c001f45e:	74 7a                	je     c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f460:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f464:	89 d8                	mov    eax,ebx
c001f466:	c1 e0 07             	shl    eax,0x7
c001f469:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f470:	55                   	push   ebp
c001f471:	56                   	push   esi
c001f472:	e8 35 fe ff ff       	call   c001f2ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f477:	5a                   	pop    edx
c001f478:	83 f8 01             	cmp    eax,0x1
c001f47b:	59                   	pop    ecx
c001f47c:	75 21                	jne    c001f49f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f47e:	50                   	push   eax
c001f47f:	53                   	push   ebx
c001f480:	55                   	push   ebp
c001f481:	56                   	push   esi
c001f482:	e8 b7 fe ff ff       	call   c001f33e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f487:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f48e:	e8 30 a5 fe ff       	call   c00099c3 <malloc>
c001f493:	89 c5                	mov    ebp,eax
c001f495:	89 04 24             	mov    DWORD PTR [esp],eax
c001f498:	e8 7f 0d 00 00       	call   c002021c <SATA::SATA()>
c001f49d:	eb 24                	jmp    c001f4c3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f49f:	83 f8 04             	cmp    eax,0x4
c001f4a2:	75 36                	jne    c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f4a4:	51                   	push   ecx
c001f4a5:	53                   	push   ebx
c001f4a6:	55                   	push   ebp
c001f4a7:	56                   	push   esi
c001f4a8:	e8 91 fe ff ff       	call   c001f33e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4ad:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001f4b4:	e8 0a a5 fe ff       	call   c00099c3 <malloc>
c001f4b9:	89 c5                	mov    ebp,eax
c001f4bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4be:	e8 cf 10 00 00       	call   c0020592 <SATAPI::SATAPI()>
c001f4c3:	58                   	pop    eax
c001f4c4:	5a                   	pop    edx
c001f4c5:	55                   	push   ebp
c001f4c6:	56                   	push   esi
c001f4c7:	e8 be eb fe ff       	call   c000e08a <Device::addChild(Device*)>
c001f4cc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f4cf:	56                   	push   esi
c001f4d0:	6a 00                	push   0x0
c001f4d2:	53                   	push   ebx
c001f4d3:	55                   	push   ebp
c001f4d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f4d7:	83 c4 20             	add    esp,0x20
c001f4da:	d1 ef                	shr    edi,1
c001f4dc:	43                   	inc    ebx
c001f4dd:	83 fb 20             	cmp    ebx,0x20
c001f4e0:	0f 85 72 ff ff ff    	jne    c001f458 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f4e6:	83 c4 0c             	add    esp,0xc
c001f4e9:	5b                   	pop    ebx
c001f4ea:	5e                   	pop    esi
c001f4eb:	5f                   	pop    edi
c001f4ec:	5d                   	pop    ebp
c001f4ed:	c3                   	ret    

c001f4ee <SATABus::open(int, int, void*)>:
c001f4ee:	83 ec 14             	sub    esp,0x14
c001f4f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4f5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f4fb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f501:	52                   	push   edx
c001f502:	50                   	push   eax
c001f503:	e8 3c ff ff ff       	call   c001f444 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f508:	31 c0                	xor    eax,eax
c001f50a:	83 c4 1c             	add    esp,0x1c
c001f50d:	c3                   	ret    

c001f50e <ATA::close(int, int, void*)>:
c001f50e:	83 ec 0c             	sub    esp,0xc
c001f511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f515:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f51b:	85 c0                	test   eax,eax
c001f51d:	74 0c                	je     c001f52b <ATA::close(int, int, void*)+0x1d>
c001f51f:	83 ec 0c             	sub    esp,0xc
c001f522:	8b 10                	mov    edx,DWORD PTR [eax]
c001f524:	50                   	push   eax
c001f525:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f528:	83 c4 10             	add    esp,0x10
c001f52b:	31 c0                	xor    eax,eax
c001f52d:	83 c4 0c             	add    esp,0xc
c001f530:	c3                   	ret    
c001f531:	90                   	nop

c001f532 <ATA::powerSaving(PowerSavingLevel)>:
c001f532:	c3                   	ret    
c001f533:	90                   	nop

c001f534 <ATA::ATA()>:
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53b:	83 ec 04             	sub    esp,0x4
c001f53e:	68 00 02 00 00       	push   0x200
c001f543:	68 51 62 02 c0       	push   0xc0026251
c001f548:	50                   	push   eax
c001f549:	e8 74 ef fe ff       	call   c000e4c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f54e:	83 c4 10             	add    esp,0x10
c001f551:	ba d4 61 02 c0       	mov    edx,0xc00261d4
c001f556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55a:	89 10                	mov    DWORD PTR [eax],edx
c001f55c:	90                   	nop
c001f55d:	83 c4 0c             	add    esp,0xc
c001f560:	c3                   	ret    
c001f561:	90                   	nop

c001f562 <ATA::flush(bool)>:
c001f562:	53                   	push   ebx
c001f563:	83 ec 08             	sub    esp,0x8
c001f566:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f56b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f56f:	19 c0                	sbb    eax,eax
c001f571:	83 e0 fd             	and    eax,0xfffffffd
c001f574:	05 ea 00 00 00       	add    eax,0xea
c001f579:	50                   	push   eax
c001f57a:	6a 07                	push   0x7
c001f57c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f583:	50                   	push   eax
c001f584:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f58a:	e8 5d f1 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58f:	83 c4 0c             	add    esp,0xc
c001f592:	6a 00                	push   0x0
c001f594:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f59b:	50                   	push   eax
c001f59c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5a2:	e8 dd fb ff ff       	call   c001f184 <IDE::polling(unsigned char, unsigned int)>
c001f5a7:	83 c4 18             	add    esp,0x18
c001f5aa:	5b                   	pop    ebx
c001f5ab:	c3                   	ret    

c001f5ac <ATA::readyForCommand()>:
c001f5ac:	56                   	push   esi
c001f5ad:	53                   	push   ebx
c001f5ae:	53                   	push   ebx
c001f5af:	31 db                	xor    ebx,ebx
c001f5b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5b5:	51                   	push   ecx
c001f5b6:	6a 0c                	push   0xc
c001f5b8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5bf:	50                   	push   eax
c001f5c0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f5c6:	e8 e1 f1 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	a8 88                	test   al,0x88
c001f5d0:	74 1f                	je     c001f5f1 <ATA::readyForCommand()+0x45>
c001f5d2:	43                   	inc    ebx
c001f5d3:	83 fb 63             	cmp    ebx,0x63
c001f5d6:	7e dd                	jle    c001f5b5 <ATA::readyForCommand()+0x9>
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	6a 0a                	push   0xa
c001f5dd:	e8 4a 90 ff ff       	call   c001862c <milliTenthSleep(unsigned int)>
c001f5e2:	83 c4 10             	add    esp,0x10
c001f5e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f5eb:	75 c8                	jne    c001f5b5 <ATA::readyForCommand()+0x9>
c001f5ed:	31 c0                	xor    eax,eax
c001f5ef:	eb 02                	jmp    c001f5f3 <ATA::readyForCommand()+0x47>
c001f5f1:	b0 01                	mov    al,0x1
c001f5f3:	5a                   	pop    edx
c001f5f4:	5b                   	pop    ebx
c001f5f5:	5e                   	pop    esi
c001f5f6:	c3                   	ret    
c001f5f7:	90                   	nop

c001f5f8 <ATA::access(unsigned long long, int, void*, bool)>:
c001f5f8:	55                   	push   ebp
c001f5f9:	57                   	push   edi
c001f5fa:	56                   	push   esi
c001f5fb:	53                   	push   ebx
c001f5fc:	83 ec 38             	sub    esp,0x38
c001f5ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f603:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f607:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f60b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f60f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f613:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f617:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f61b:	68 80 61 02 c0       	push   0xc0026180
c001f620:	e8 1e d6 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f625:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f62b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f62f:	83 c4 10             	add    esp,0x10
c001f632:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f638:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f63c:	c1 e0 06             	shl    eax,0x6
c001f63f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f647:	74 5d                	je     c001f6a6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f649:	89 fa                	mov    edx,edi
c001f64b:	89 f0                	mov    eax,esi
c001f64d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f651:	c1 ea 1c             	shr    edx,0x1c
c001f654:	89 d1                	mov    ecx,edx
c001f656:	09 c1                	or     ecx,eax
c001f658:	74 25                	je     c001f67f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f65a:	31 ed                	xor    ebp,ebp
c001f65c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f663:	89 fa                	mov    edx,edi
c001f665:	89 f0                	mov    eax,esi
c001f667:	0f ad d0             	shrd   eax,edx,cl
c001f66a:	d3 ea                	shr    edx,cl
c001f66c:	f6 c1 20             	test   cl,0x20
c001f66f:	74 02                	je     c001f673 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f671:	89 d0                	mov    eax,edx
c001f673:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f677:	45                   	inc    ebp
c001f678:	83 fd 06             	cmp    ebp,0x6
c001f67b:	75 df                	jne    c001f65c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f67d:	eb 76                	jmp    c001f6f5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f67f:	89 f0                	mov    eax,esi
c001f681:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f686:	89 fa                	mov    edx,edi
c001f688:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f68f:	0f ac d0 10          	shrd   eax,edx,0x10
c001f693:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f698:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f69c:	c1 ee 18             	shr    esi,0x18
c001f69f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6a4:	eb 56                	jmp    c001f6fc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6a6:	6a 00                	push   0x0
c001f6a8:	6a 3f                	push   0x3f
c001f6aa:	57                   	push   edi
c001f6ab:	56                   	push   esi
c001f6ac:	e8 93 29 00 00       	call   c0022044 <__umoddi3>
c001f6b1:	83 c4 10             	add    esp,0x10
c001f6b4:	40                   	inc    eax
c001f6b5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f6b9:	6a 00                	push   0x0
c001f6bb:	68 f0 03 00 00       	push   0x3f0
c001f6c0:	57                   	push   edi
c001f6c1:	56                   	push   esi
c001f6c2:	e8 7d 28 00 00       	call   c0021f44 <__udivdi3>
c001f6c7:	83 c4 10             	add    esp,0x10
c001f6ca:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f6cf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6db:	6a 00                	push   0x0
c001f6dd:	6a 3f                	push   0x3f
c001f6df:	57                   	push   edi
c001f6e0:	56                   	push   esi
c001f6e1:	e8 5e 28 00 00       	call   c0021f44 <__udivdi3>
c001f6e6:	83 c4 10             	add    esp,0x10
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f6f0:	83 e6 0f             	and    esi,0xf
c001f6f3:	eb 07                	jmp    c001f6fc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6f5:	31 f6                	xor    esi,esi
c001f6f7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f6fc:	bf 01 00 00 00       	mov    edi,0x1
c001f701:	50                   	push   eax
c001f702:	6a 00                	push   0x0
c001f704:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f70b:	50                   	push   eax
c001f70c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f710:	e8 df f1 ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001f715:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f718:	e8 8f fe ff ff       	call   c001f5ac <ATA::readyForCommand()>
c001f71d:	83 c4 10             	add    esp,0x10
c001f720:	84 c0                	test   al,al
c001f722:	0f 84 bc 02 00 00    	je     c001f9e4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f728:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f72e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f734:	c1 e0 04             	shl    eax,0x4
c001f737:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f73e:	09 c6                	or     esi,eax
c001f740:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f745:	75 05                	jne    c001f74c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f747:	83 ce a0             	or     esi,0xffffffa0
c001f74a:	eb 03                	jmp    c001f74f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f74c:	83 ce e0             	or     esi,0xffffffe0
c001f74f:	89 f0                	mov    eax,esi
c001f751:	0f b6 f0             	movzx  esi,al
c001f754:	56                   	push   esi
c001f755:	6a 06                	push   0x6
c001f757:	51                   	push   ecx
c001f758:	52                   	push   edx
c001f759:	e8 8e ef ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	6a 00                	push   0x0
c001f763:	6a 01                	push   0x1
c001f765:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f76c:	50                   	push   eax
c001f76d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f773:	e8 74 ef ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f778:	83 c4 10             	add    esp,0x10
c001f77b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f780:	75 6e                	jne    c001f7f0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f782:	6a 00                	push   0x0
c001f784:	6a 08                	push   0x8
c001f786:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f78d:	50                   	push   eax
c001f78e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f794:	e8 53 ef ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f799:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f79e:	50                   	push   eax
c001f79f:	6a 09                	push   0x9
c001f7a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a8:	50                   	push   eax
c001f7a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7af:	e8 38 ef ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b4:	83 c4 20             	add    esp,0x20
c001f7b7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f7bc:	50                   	push   eax
c001f7bd:	6a 0a                	push   0xa
c001f7bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c6:	50                   	push   eax
c001f7c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7cd:	e8 1a ef ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f7d7:	50                   	push   eax
c001f7d8:	6a 0b                	push   0xb
c001f7da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7e1:	50                   	push   eax
c001f7e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7e8:	e8 ff ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7ed:	83 c4 20             	add    esp,0x20
c001f7f0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f7f5:	50                   	push   eax
c001f7f6:	6a 02                	push   0x2
c001f7f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7ff:	50                   	push   eax
c001f800:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f806:	e8 e1 ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f80b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f810:	50                   	push   eax
c001f811:	6a 03                	push   0x3
c001f813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f81a:	50                   	push   eax
c001f81b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f821:	e8 c6 ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f826:	83 c4 20             	add    esp,0x20
c001f829:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f82e:	50                   	push   eax
c001f82f:	6a 04                	push   0x4
c001f831:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f838:	50                   	push   eax
c001f839:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f83f:	e8 a8 ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f844:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f849:	50                   	push   eax
c001f84a:	6a 05                	push   0x5
c001f84c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f853:	50                   	push   eax
c001f854:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f85a:	e8 8d ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f85f:	83 c4 20             	add    esp,0x20
c001f862:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f867:	0f 94 c0             	sete   al
c001f86a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f86f:	74 09                	je     c001f87a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f871:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f878:	eb 07                	jmp    c001f881 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f87a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f881:	0f b6 c0             	movzx  eax,al
c001f884:	50                   	push   eax
c001f885:	6a 07                	push   0x7
c001f887:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f88e:	50                   	push   eax
c001f88f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f895:	e8 52 ee ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f89a:	c7 04 24 8d 61 02 c0 	mov    DWORD PTR [esp],0xc002618d
c001f8a1:	e8 9d d3 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f8a6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8aa:	83 c4 10             	add    esp,0x10
c001f8ad:	85 f6                	test   esi,esi
c001f8af:	0f 84 f7 00 00 00    	je     c001f9ac <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f8b5:	83 ec 0c             	sub    esp,0xc
c001f8b8:	68 90 61 02 c0       	push   0xc0026190
c001f8bd:	e8 81 d3 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f8c2:	83 c4 0c             	add    esp,0xc
c001f8c5:	6a 01                	push   0x1
c001f8c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8ce:	50                   	push   eax
c001f8cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8d5:	e8 aa f8 ff ff       	call   c001f184 <IDE::polling(unsigned char, unsigned int)>
c001f8da:	c7 04 24 93 61 02 c0 	mov    DWORD PTR [esp],0xc0026193
c001f8e1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f8e5:	e8 59 d3 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f8ea:	83 c4 10             	add    esp,0x10
c001f8ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f8f1:	84 c0                	test   al,al
c001f8f3:	74 2b                	je     c001f920 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f8f5:	0f b6 f8             	movzx  edi,al
c001f8f8:	57                   	push   edi
c001f8f9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f900:	50                   	push   eax
c001f901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f908:	50                   	push   eax
c001f909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f90f:	e8 c0 f7 ff ff       	call   c001f0d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f914:	c7 04 24 96 61 02 c0 	mov    DWORD PTR [esp],0xc0026196
c001f91b:	e9 bc 00 00 00       	jmp    c001f9dc <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f920:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f925:	74 50                	je     c001f977 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f927:	83 ec 0c             	sub    esp,0xc
c001f92a:	31 ed                	xor    ebp,ebp
c001f92c:	68 a1 61 02 c0       	push   0xc00261a1
c001f931:	e8 0d d3 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f93d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f941:	50                   	push   eax
c001f942:	50                   	push   eax
c001f943:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f94a:	50                   	push   eax
c001f94b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f951:	e8 84 ed ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001f956:	89 c2                	mov    edx,eax
c001f958:	89 f8                	mov    eax,edi
c001f95a:	66 ef                	out    dx,ax
c001f95c:	45                   	inc    ebp
c001f95d:	83 c4 10             	add    esp,0x10
c001f960:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f966:	75 d1                	jne    c001f939 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	68 a4 61 02 c0       	push   0xc00261a4
c001f970:	e8 ce d2 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f975:	eb 24                	jmp    c001f99b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f977:	51                   	push   ecx
c001f978:	51                   	push   ecx
c001f979:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f980:	50                   	push   eax
c001f981:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f987:	e8 4e ed ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001f98c:	b9 00 01 00 00       	mov    ecx,0x100
c001f991:	89 c2                	mov    edx,eax
c001f993:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f997:	fc                   	cld    
c001f998:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f99b:	83 c4 10             	add    esp,0x10
c001f99e:	4e                   	dec    esi
c001f99f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9a7:	e9 01 ff ff ff       	jmp    c001f8ad <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9ac:	31 ff                	xor    edi,edi
c001f9ae:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9b3:	74 2f                	je     c001f9e4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f9b5:	83 ec 0c             	sub    esp,0xc
c001f9b8:	68 a7 61 02 c0       	push   0xc00261a7
c001f9bd:	e8 81 d2 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f9c2:	58                   	pop    eax
c001f9c3:	31 c0                	xor    eax,eax
c001f9c5:	5a                   	pop    edx
c001f9c6:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f9cb:	0f 94 c0             	sete   al
c001f9ce:	50                   	push   eax
c001f9cf:	53                   	push   ebx
c001f9d0:	e8 8d fb ff ff       	call   c001f562 <ATA::flush(bool)>
c001f9d5:	c7 04 24 aa 61 02 c0 	mov    DWORD PTR [esp],0xc00261aa
c001f9dc:	e8 62 d2 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001f9e1:	83 c4 10             	add    esp,0x10
c001f9e4:	83 c4 2c             	add    esp,0x2c
c001f9e7:	89 f8                	mov    eax,edi
c001f9e9:	5b                   	pop    ebx
c001f9ea:	5e                   	pop    esi
c001f9eb:	5f                   	pop    edi
c001f9ec:	5d                   	pop    ebp
c001f9ed:	c3                   	ret    

c001f9ee <ATA::read(unsigned long long, int, void*)>:
c001f9ee:	57                   	push   edi
c001f9ef:	b8 04 00 00 00       	mov    eax,0x4
c001f9f4:	56                   	push   esi
c001f9f5:	53                   	push   ebx
c001f9f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f9fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f9fe:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa09:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa0f:	77 25                	ja     c001fa36 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa11:	b8 06 00 00 00       	mov    eax,0x6
c001fa16:	85 f6                	test   esi,esi
c001fa18:	74 1c                	je     c001fa36 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa1a:	50                   	push   eax
c001fa1b:	50                   	push   eax
c001fa1c:	6a 00                	push   0x0
c001fa1e:	56                   	push   esi
c001fa1f:	52                   	push   edx
c001fa20:	53                   	push   ebx
c001fa21:	51                   	push   ecx
c001fa22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa26:	e8 cd fb ff ff       	call   c001f5f8 <ATA::access(unsigned long long, int, void*, bool)>
c001fa2b:	83 c4 20             	add    esp,0x20
c001fa2e:	85 c0                	test   eax,eax
c001fa30:	0f 95 c0             	setne  al
c001fa33:	0f b6 c0             	movzx  eax,al
c001fa36:	5b                   	pop    ebx
c001fa37:	5e                   	pop    esi
c001fa38:	5f                   	pop    edi
c001fa39:	c3                   	ret    

c001fa3a <ATA::write(unsigned long long, int, void*)>:
c001fa3a:	55                   	push   ebp
c001fa3b:	57                   	push   edi
c001fa3c:	56                   	push   esi
c001fa3d:	53                   	push   ebx
c001fa3e:	83 ec 18             	sub    esp,0x18
c001fa41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa49:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa4d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa51:	68 ad 61 02 c0       	push   0xc00261ad
c001fa56:	e8 e8 d1 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001fa5b:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fa5e:	83 c4 10             	add    esp,0x10
c001fa61:	b8 04 00 00 00       	mov    eax,0x4
c001fa66:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fa6c:	77 25                	ja     c001fa93 <ATA::write(unsigned long long, int, void*)+0x59>
c001fa6e:	b8 06 00 00 00       	mov    eax,0x6
c001fa73:	85 f6                	test   esi,esi
c001fa75:	74 1c                	je     c001fa93 <ATA::write(unsigned long long, int, void*)+0x59>
c001fa77:	50                   	push   eax
c001fa78:	50                   	push   eax
c001fa79:	6a 01                	push   0x1
c001fa7b:	56                   	push   esi
c001fa7c:	53                   	push   ebx
c001fa7d:	55                   	push   ebp
c001fa7e:	57                   	push   edi
c001fa7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fa83:	e8 70 fb ff ff       	call   c001f5f8 <ATA::access(unsigned long long, int, void*, bool)>
c001fa88:	83 c4 20             	add    esp,0x20
c001fa8b:	85 c0                	test   eax,eax
c001fa8d:	0f 95 c0             	setne  al
c001fa90:	0f b6 c0             	movzx  eax,al
c001fa93:	83 c4 0c             	add    esp,0xc
c001fa96:	5b                   	pop    ebx
c001fa97:	5e                   	pop    esi
c001fa98:	5f                   	pop    edi
c001fa99:	5d                   	pop    ebp
c001fa9a:	c3                   	ret    
c001fa9b:	90                   	nop

c001fa9c <ATA::detectCHS()>:
c001fa9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faa0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001faa6:	c1 e0 06             	shl    eax,0x6
c001faa9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001faaf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fab9:	c7 44 24 04 b9 61 02 c0 	mov    DWORD PTR [esp+0x4],0xc00261b9
c001fac1:	e9 9d 4c ff ff       	jmp    c0014763 <Krnl::panic(char const*)>

c001fac6 <ATA::open(int, int, void*)>:
c001fac6:	53                   	push   ebx
c001fac7:	83 ec 08             	sub    esp,0x8
c001faca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001face:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fad6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fadc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fae2:	c1 e0 06             	shl    eax,0x6
c001fae5:	01 d0                	add    eax,edx
c001fae7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001faee:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001faf4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fafb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb05:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb0b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb12:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb19:	75 0c                	jne    c001fb27 <ATA::open(int, int, void*)+0x61>
c001fb1b:	83 ec 0c             	sub    esp,0xc
c001fb1e:	53                   	push   ebx
c001fb1f:	e8 78 ff ff ff       	call   c001fa9c <ATA::detectCHS()>
c001fb24:	83 c4 10             	add    esp,0x10
c001fb27:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb2d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb33:	c1 e0 06             	shl    eax,0x6
c001fb36:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb3d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb47:	d1 e8                	shr    eax,1
c001fb49:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb4f:	6a 04                	push   0x4
c001fb51:	6a 0c                	push   0xc
c001fb53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb5a:	50                   	push   eax
c001fb5b:	52                   	push   edx
c001fb5c:	e8 8b eb ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb61:	90                   	nop
c001fb62:	90                   	nop
c001fb63:	6a 00                	push   0x0
c001fb65:	6a 0c                	push   0xc
c001fb67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb6e:	50                   	push   eax
c001fb6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb75:	e8 72 eb ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb7a:	83 c4 14             	add    esp,0x14
c001fb7d:	53                   	push   ebx
c001fb7e:	e8 a7 e9 fe ff       	call   c000e52a <PhysicalDisk::startCache()>
c001fb83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb86:	e8 db 09 ff ff       	call   c0010566 <createPartitionsForDisk(PhysicalDisk*)>
c001fb8b:	31 c0                	xor    eax,eax
c001fb8d:	83 c4 18             	add    esp,0x18
c001fb90:	5b                   	pop    ebx
c001fb91:	c3                   	ret    

c001fb92 <ATAPI::write(unsigned long long, int, void*)>:
c001fb92:	b8 03 00 00 00       	mov    eax,0x3
c001fb97:	c3                   	ret    

c001fb98 <ATAPI::close(int, int, void*)>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fba5:	85 c0                	test   eax,eax
c001fba7:	74 0c                	je     c001fbb5 <ATAPI::close(int, int, void*)+0x1d>
c001fba9:	83 ec 0c             	sub    esp,0xc
c001fbac:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbae:	50                   	push   eax
c001fbaf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbb2:	83 c4 10             	add    esp,0x10
c001fbb5:	31 c0                	xor    eax,eax
c001fbb7:	83 c4 0c             	add    esp,0xc
c001fbba:	c3                   	ret    
c001fbbb:	90                   	nop

c001fbbc <ATAPI::ATAPI()>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc3:	83 ec 04             	sub    esp,0x4
c001fbc6:	68 00 08 00 00       	push   0x800
c001fbcb:	68 f1 62 02 c0       	push   0xc00262f1
c001fbd0:	50                   	push   eax
c001fbd1:	e8 ec e8 fe ff       	call   c000e4c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fbd6:	83 c4 10             	add    esp,0x10
c001fbd9:	ba 0c 62 02 c0       	mov    edx,0xc002620c
c001fbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe2:	89 10                	mov    DWORD PTR [eax],edx
c001fbe4:	90                   	nop
c001fbe5:	83 c4 0c             	add    esp,0xc
c001fbe8:	c3                   	ret    
c001fbe9:	90                   	nop

c001fbea <ATAPI::readyForCommand()>:
c001fbea:	56                   	push   esi
c001fbeb:	53                   	push   ebx
c001fbec:	53                   	push   ebx
c001fbed:	31 db                	xor    ebx,ebx
c001fbef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbf3:	51                   	push   ecx
c001fbf4:	6a 0c                	push   0xc
c001fbf6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fbfd:	50                   	push   eax
c001fbfe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc04:	e8 a3 eb ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001fc09:	83 c4 10             	add    esp,0x10
c001fc0c:	a8 88                	test   al,0x88
c001fc0e:	74 1f                	je     c001fc2f <ATAPI::readyForCommand()+0x45>
c001fc10:	43                   	inc    ebx
c001fc11:	83 fb 63             	cmp    ebx,0x63
c001fc14:	7e dd                	jle    c001fbf3 <ATAPI::readyForCommand()+0x9>
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	6a 0a                	push   0xa
c001fc1b:	e8 0c 8a ff ff       	call   c001862c <milliTenthSleep(unsigned int)>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fc29:	75 c8                	jne    c001fbf3 <ATAPI::readyForCommand()+0x9>
c001fc2b:	31 c0                	xor    eax,eax
c001fc2d:	eb 02                	jmp    c001fc31 <ATAPI::readyForCommand()+0x47>
c001fc2f:	b0 01                	mov    al,0x1
c001fc31:	5a                   	pop    edx
c001fc32:	5b                   	pop    ebx
c001fc33:	5e                   	pop    esi
c001fc34:	c3                   	ret    
c001fc35:	90                   	nop

c001fc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc36:	55                   	push   ebp
c001fc37:	57                   	push   edi
c001fc38:	56                   	push   esi
c001fc39:	53                   	push   ebx
c001fc3a:	83 ec 20             	sub    esp,0x20
c001fc3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc41:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc45:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc4d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fc51:	6a 01                	push   0x1
c001fc53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc5a:	50                   	push   eax
c001fc5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc61:	e8 8e ec ff ff       	call   c001e8f4 <IDE::enableIRQs(unsigned char, bool)>
c001fc66:	5e                   	pop    esi
c001fc67:	58                   	pop    eax
c001fc68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc6f:	50                   	push   eax
c001fc70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc76:	e8 4b ea ff ff       	call   c001e6c6 <IDE::prepareInterrupt(unsigned char)>
c001fc7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fc7e:	e8 67 ff ff ff       	call   c001fbea <ATAPI::readyForCommand()>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	84 c0                	test   al,al
c001fc88:	75 0a                	jne    c001fc94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fc8a:	bb 01 00 00 00       	mov    ebx,0x1
c001fc8f:	e9 57 02 00 00       	jmp    c001feeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc94:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fc9a:	c1 e0 04             	shl    eax,0x4
c001fc9d:	0f b6 c0             	movzx  eax,al
c001fca0:	50                   	push   eax
c001fca1:	6a 06                	push   0x6
c001fca3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcaa:	50                   	push   eax
c001fcab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcb1:	e8 36 ea ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcb6:	6a 00                	push   0x0
c001fcb8:	6a 01                	push   0x1
c001fcba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcc1:	50                   	push   eax
c001fcc2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcc8:	e8 1f ea ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fccd:	83 c4 20             	add    esp,0x20
c001fcd0:	0f b6 c3             	movzx  eax,bl
c001fcd3:	0f b6 df             	movzx  ebx,bh
c001fcd6:	50                   	push   eax
c001fcd7:	6a 04                	push   0x4
c001fcd9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fce0:	50                   	push   eax
c001fce1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fce7:	e8 00 ea ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcec:	53                   	push   ebx
c001fced:	6a 05                	push   0x5
c001fcef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf6:	50                   	push   eax
c001fcf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcfd:	e8 ea e9 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd02:	83 c4 20             	add    esp,0x20
c001fd05:	68 a0 00 00 00       	push   0xa0
c001fd0a:	6a 07                	push   0x7
c001fd0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd13:	50                   	push   eax
c001fd14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd1a:	e8 cd e9 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd1f:	83 c4 0c             	add    esp,0xc
c001fd22:	6a 01                	push   0x1
c001fd24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd2b:	50                   	push   eax
c001fd2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd32:	e8 4d f4 ff ff       	call   c001f184 <IDE::polling(unsigned char, unsigned int)>
c001fd37:	83 c4 10             	add    esp,0x10
c001fd3a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd40:	84 c0                	test   al,al
c001fd42:	74 23                	je     c001fd67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd44:	0f b6 d8             	movzx  ebx,al
c001fd47:	0f b6 d2             	movzx  edx,dl
c001fd4a:	53                   	push   ebx
c001fd4b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fd52:	50                   	push   eax
c001fd53:	52                   	push   edx
c001fd54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd5a:	e8 75 f3 ff ff       	call   c001f0d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fd5f:	83 c4 10             	add    esp,0x10
c001fd62:	e9 84 01 00 00       	jmp    c001feeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fd67:	0f b6 d2             	movzx  edx,dl
c001fd6a:	53                   	push   ebx
c001fd6b:	53                   	push   ebx
c001fd6c:	52                   	push   edx
c001fd6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd73:	e8 62 e9 ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001fd78:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fd7c:	b9 06 00 00 00       	mov    ecx,0x6
c001fd81:	89 c2                	mov    edx,eax
c001fd83:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fd86:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fd8a:	83 c4 10             	add    esp,0x10
c001fd8d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd93:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd9a:	85 db                	test   ebx,ebx
c001fd9c:	0f 84 ec 00 00 00    	je     c001fe8e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fda2:	51                   	push   ecx
c001fda3:	51                   	push   ecx
c001fda4:	52                   	push   edx
c001fda5:	50                   	push   eax
c001fda6:	e8 af ea ff ff       	call   c001e85a <IDE::waitInterrupt(unsigned char)>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	84 c0                	test   al,al
c001fdb0:	0f 84 d4 fe ff ff    	je     c001fc8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdb6:	56                   	push   esi
c001fdb7:	56                   	push   esi
c001fdb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdbf:	50                   	push   eax
c001fdc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdc6:	e8 fb e8 ff ff       	call   c001e6c6 <IDE::prepareInterrupt(unsigned char)>
c001fdcb:	83 c4 0c             	add    esp,0xc
c001fdce:	6a 04                	push   0x4
c001fdd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdd7:	50                   	push   eax
c001fdd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdde:	e8 c9 e9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001fde3:	83 c4 0c             	add    esp,0xc
c001fde6:	89 c6                	mov    esi,eax
c001fde8:	6a 05                	push   0x5
c001fdea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdf1:	50                   	push   eax
c001fdf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdf8:	e8 af e9 ff ff       	call   c001e7ac <IDE::read(unsigned char, unsigned char)>
c001fdfd:	89 f1                	mov    ecx,esi
c001fdff:	0f b6 c0             	movzx  eax,al
c001fe02:	0f b6 f1             	movzx  esi,cl
c001fe05:	c1 e0 08             	shl    eax,0x8
c001fe08:	09 c6                	or     esi,eax
c001fe0a:	d1 fe                	sar    esi,1
c001fe0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe10:	83 c4 10             	add    esp,0x10
c001fe13:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe18:	74 41                	je     c001fe5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe1a:	31 c9                	xor    ecx,ecx
c001fe1c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe22:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe29:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe2d:	75 0a                	jne    c001fe39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe2f:	01 c9                	add    ecx,ecx
c001fe31:	01 cd                	add    ebp,ecx
c001fe33:	4b                   	dec    ebx
c001fe34:	e9 54 ff ff ff       	jmp    c001fd8d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe39:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe42:	51                   	push   ecx
c001fe43:	51                   	push   ecx
c001fe44:	52                   	push   edx
c001fe45:	50                   	push   eax
c001fe46:	e8 8f e8 ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001fe4b:	89 c2                	mov    edx,eax
c001fe4d:	89 f0                	mov    eax,esi
c001fe4f:	66 ef                	out    dx,ax
c001fe51:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fe55:	83 c4 10             	add    esp,0x10
c001fe58:	41                   	inc    ecx
c001fe59:	eb c1                	jmp    c001fe1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fe5b:	31 f6                	xor    esi,esi
c001fe5d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe63:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe6a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fe6e:	75 06                	jne    c001fe76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fe70:	01 f6                	add    esi,esi
c001fe72:	01 f5                	add    ebp,esi
c001fe74:	eb bd                	jmp    c001fe33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fe76:	51                   	push   ecx
c001fe77:	51                   	push   ecx
c001fe78:	52                   	push   edx
c001fe79:	50                   	push   eax
c001fe7a:	e8 5b e8 ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001fe7f:	89 c2                	mov    edx,eax
c001fe81:	66 ed                	in     ax,dx
c001fe83:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fe88:	83 c4 10             	add    esp,0x10
c001fe8b:	46                   	inc    esi
c001fe8c:	eb cf                	jmp    c001fe5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fe8e:	51                   	push   ecx
c001fe8f:	51                   	push   ecx
c001fe90:	52                   	push   edx
c001fe91:	50                   	push   eax
c001fe92:	e8 c3 e9 ff ff       	call   c001e85a <IDE::waitInterrupt(unsigned char)>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	84 c0                	test   al,al
c001fe9c:	0f 84 e8 fd ff ff    	je     c001fc8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fea2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fea7:	52                   	push   edx
c001fea8:	52                   	push   edx
c001fea9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001feb0:	50                   	push   eax
c001feb1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001feb7:	e8 0a e8 ff ff       	call   c001e6c6 <IDE::prepareInterrupt(unsigned char)>
c001febc:	83 c4 10             	add    esp,0x10
c001febf:	50                   	push   eax
c001fec0:	50                   	push   eax
c001fec1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fec8:	50                   	push   eax
c001fec9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fecf:	e8 06 e8 ff ff       	call   c001e6da <IDE::getBase(unsigned char)>
c001fed4:	8d 50 07             	lea    edx,[eax+0x7]
c001fed7:	ec                   	in     al,dx
c001fed8:	83 c4 10             	add    esp,0x10
c001fedb:	a8 88                	test   al,0x88
c001fedd:	74 0a                	je     c001fee9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fedf:	4b                   	dec    ebx
c001fee0:	75 dd                	jne    c001febf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fee2:	bb 02 00 00 00       	mov    ebx,0x2
c001fee7:	eb 02                	jmp    c001feeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fee9:	31 db                	xor    ebx,ebx
c001feeb:	83 c4 1c             	add    esp,0x1c
c001feee:	89 d8                	mov    eax,ebx
c001fef0:	5b                   	pop    ebx
c001fef1:	5e                   	pop    esi
c001fef2:	5f                   	pop    edi
c001fef3:	5d                   	pop    ebp
c001fef4:	c3                   	ret    
c001fef5:	90                   	nop

c001fef6 <ATAPI::diskRemoved()>:
c001fef6:	83 ec 18             	sub    esp,0x18
c001fef9:	68 fd 62 02 c0       	push   0xc00262fd
c001fefe:	e8 40 cd fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001ff03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff07:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ff0e:	83 c4 1c             	add    esp,0x1c
c001ff11:	c3                   	ret    

c001ff12 <ATAPI::eject()>:
c001ff12:	57                   	push   edi
c001ff13:	b9 03 00 00 00       	mov    ecx,0x3
c001ff18:	53                   	push   ebx
c001ff19:	83 ec 14             	sub    esp,0x14
c001ff1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ff20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ff24:	fc                   	cld    
c001ff25:	31 c0                	xor    eax,eax
c001ff27:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff29:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ff2e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ff33:	50                   	push   eax
c001ff34:	50                   	push   eax
c001ff35:	6a 00                	push   0x0
c001ff37:	6a 00                	push   0x0
c001ff39:	6a 00                	push   0x0
c001ff3b:	6a 02                	push   0x2
c001ff3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff41:	50                   	push   eax
c001ff42:	53                   	push   ebx
c001ff43:	e8 ee fc ff ff       	call   c001fc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff48:	83 c4 14             	add    esp,0x14
c001ff4b:	53                   	push   ebx
c001ff4c:	e8 a5 ff ff ff       	call   c001fef6 <ATAPI::diskRemoved()>
c001ff51:	83 c4 24             	add    esp,0x24
c001ff54:	31 c0                	xor    eax,eax
c001ff56:	5b                   	pop    ebx
c001ff57:	5f                   	pop    edi
c001ff58:	c3                   	ret    
c001ff59:	90                   	nop

c001ff5a <ATAPI::diskInserted()>:
c001ff5a:	53                   	push   ebx
c001ff5b:	83 ec 14             	sub    esp,0x14
c001ff5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff62:	68 14 63 02 c0       	push   0xc0026314
c001ff67:	e8 d7 cc fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c001ff6c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ff73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff76:	e8 af e5 fe ff       	call   c000e52a <PhysicalDisk::startCache()>
c001ff7b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ff7f:	83 c4 18             	add    esp,0x18
c001ff82:	5b                   	pop    ebx
c001ff83:	e9 de 05 ff ff       	jmp    c0010566 <createPartitionsForDisk(PhysicalDisk*)>

c001ff88 <ATAPI::detectMedia()>:
c001ff88:	56                   	push   esi
c001ff89:	53                   	push   ebx
c001ff8a:	83 ec 28             	sub    esp,0x28
c001ff8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff91:	6a 0c                	push   0xc
c001ff93:	6a 00                	push   0x0
c001ff95:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ff99:	56                   	push   esi
c001ff9a:	e8 e5 06 fe ff       	call   c0000684 <memset>
c001ff9f:	58                   	pop    eax
c001ffa0:	5a                   	pop    edx
c001ffa1:	6a 00                	push   0x0
c001ffa3:	6a 00                	push   0x0
c001ffa5:	6a 00                	push   0x0
c001ffa7:	6a 00                	push   0x0
c001ffa9:	56                   	push   esi
c001ffaa:	53                   	push   ebx
c001ffab:	e8 86 fc ff ff       	call   c001fc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ffb0:	83 c4 1c             	add    esp,0x1c
c001ffb3:	6a 0c                	push   0xc
c001ffb5:	6a 00                	push   0x0
c001ffb7:	56                   	push   esi
c001ffb8:	e8 c7 06 fe ff       	call   c0000684 <memset>
c001ffbd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ffc2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ffc7:	59                   	pop    ecx
c001ffc8:	58                   	pop    eax
c001ffc9:	6a 01                	push   0x1
c001ffcb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ffcf:	50                   	push   eax
c001ffd0:	6a 00                	push   0x0
c001ffd2:	6a 12                	push   0x12
c001ffd4:	56                   	push   esi
c001ffd5:	53                   	push   ebx
c001ffd6:	e8 5b fc ff ff       	call   c001fc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ffdb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ffdf:	83 c4 20             	add    esp,0x20
c001ffe2:	83 e0 7f             	and    eax,0x7f
c001ffe5:	3c 70                	cmp    al,0x70
c001ffe7:	74 15                	je     c001fffe <ATAPI::detectMedia()+0x76>
c001ffe9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fff0:	75 0c                	jne    c001fffe <ATAPI::detectMedia()+0x76>
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	53                   	push   ebx
c001fff6:	e8 5f ff ff ff       	call   c001ff5a <ATAPI::diskInserted()>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020002:	83 e0 0f             	and    eax,0xf
c0020005:	3c 02                	cmp    al,0x2
c0020007:	75 1b                	jne    c0020024 <ATAPI::detectMedia()+0x9c>
c0020009:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002000e:	75 2d                	jne    c002003d <ATAPI::detectMedia()+0xb5>
c0020010:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020017:	74 24                	je     c002003d <ATAPI::detectMedia()+0xb5>
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	53                   	push   ebx
c002001d:	e8 d4 fe ff ff       	call   c001fef6 <ATAPI::diskRemoved()>
c0020022:	eb 16                	jmp    c002003a <ATAPI::detectMedia()+0xb2>
c0020024:	84 c0                	test   al,al
c0020026:	75 15                	jne    c002003d <ATAPI::detectMedia()+0xb5>
c0020028:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002002f:	75 0c                	jne    c002003d <ATAPI::detectMedia()+0xb5>
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	53                   	push   ebx
c0020035:	e8 20 ff ff ff       	call   c001ff5a <ATAPI::diskInserted()>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	83 c4 24             	add    esp,0x24
c0020040:	5b                   	pop    ebx
c0020041:	5e                   	pop    esi
c0020042:	c3                   	ret    
c0020043:	90                   	nop

c0020044 <ATAPI::open(int, int, void*)>:
c0020044:	53                   	push   ebx
c0020045:	83 ec 08             	sub    esp,0x8
c0020048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002004c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020054:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002005a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020060:	c1 e0 06             	shl    eax,0x6
c0020063:	01 d0                	add    eax,edx
c0020065:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002006c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020072:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020079:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020083:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020089:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020090:	6a 04                	push   0x4
c0020092:	6a 0c                	push   0xc
c0020094:	51                   	push   ecx
c0020095:	52                   	push   edx
c0020096:	e8 51 e6 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c002009b:	90                   	nop
c002009c:	90                   	nop
c002009d:	6a 00                	push   0x0
c002009f:	6a 0c                	push   0xc
c00200a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200a8:	50                   	push   eax
c00200a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200af:	e8 38 e6 ff ff       	call   c001e6ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200b4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00200bb:	83 c4 14             	add    esp,0x14
c00200be:	53                   	push   ebx
c00200bf:	e8 c4 fe ff ff       	call   c001ff88 <ATAPI::detectMedia()>
c00200c4:	31 c0                	xor    eax,eax
c00200c6:	83 c4 18             	add    esp,0x18
c00200c9:	5b                   	pop    ebx
c00200ca:	c3                   	ret    
c00200cb:	90                   	nop

c00200cc <ATAPI::read(unsigned long long, int, void*)>:
c00200cc:	55                   	push   ebp
c00200cd:	57                   	push   edi
c00200ce:	56                   	push   esi
c00200cf:	53                   	push   ebx
c00200d0:	83 ec 1c             	sub    esp,0x1c
c00200d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00200d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00200db:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00200df:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00200e6:	74 41                	je     c0020129 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00200e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200ec:	b9 03 00 00 00       	mov    ecx,0x3
c00200f1:	fc                   	cld    
c00200f2:	31 c0                	xor    eax,eax
c00200f4:	86 fb                	xchg   bl,bh
c00200f6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200f8:	c1 c3 10             	rol    ebx,0x10
c00200fb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020100:	89 e8                	mov    eax,ebp
c0020102:	86 fb                	xchg   bl,bh
c0020104:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020108:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002010c:	50                   	push   eax
c002010d:	50                   	push   eax
c002010e:	55                   	push   ebp
c002010f:	c1 e5 0b             	shl    ebp,0xb
c0020112:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020116:	6a 00                	push   0x0
c0020118:	55                   	push   ebp
c0020119:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002011d:	50                   	push   eax
c002011e:	56                   	push   esi
c002011f:	e8 12 fb ff ff       	call   c001fc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020124:	83 c4 20             	add    esp,0x20
c0020127:	eb 1a                	jmp    c0020143 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	56                   	push   esi
c002012d:	e8 56 fe ff ff       	call   c001ff88 <ATAPI::detectMedia()>
c0020132:	83 c4 10             	add    esp,0x10
c0020135:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002013c:	75 aa                	jne    c00200e8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002013e:	b8 02 00 00 00       	mov    eax,0x2
c0020143:	83 c4 1c             	add    esp,0x1c
c0020146:	5b                   	pop    ebx
c0020147:	5e                   	pop    esi
c0020148:	5f                   	pop    edi
c0020149:	5d                   	pop    ebp
c002014a:	c3                   	ret    
c002014b:	90                   	nop

c002014c <SATA::close(int, int, void*)>:
c002014c:	83 ec 0c             	sub    esp,0xc
c002014f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020153:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020159:	85 c0                	test   eax,eax
c002015b:	74 0c                	je     c0020169 <SATA::close(int, int, void*)+0x1d>
c002015d:	83 ec 0c             	sub    esp,0xc
c0020160:	8b 10                	mov    edx,DWORD PTR [eax]
c0020162:	50                   	push   eax
c0020163:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020166:	83 c4 10             	add    esp,0x10
c0020169:	31 c0                	xor    eax,eax
c002016b:	83 c4 0c             	add    esp,0xc
c002016e:	c3                   	ret    
c002016f:	90                   	nop

c0020170 <SATA::powerSaving(PowerSavingLevel)>:
c0020170:	c3                   	ret    
c0020171:	90                   	nop

c0020172 <SATA::open(int, int, void*)>:
c0020172:	56                   	push   esi
c0020173:	53                   	push   ebx
c0020174:	50                   	push   eax
c0020175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002017d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020187:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002018d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020197:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002019b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00201a5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00201ab:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00201b2:	e8 52 9e fe ff       	call   c000a009 <Phys::allocatePage()>
c00201b7:	89 c6                	mov    esi,eax
c00201b9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00201bf:	81 c6 00 10 00 00    	add    esi,0x1000
c00201c5:	e8 3f 9e fe ff       	call   c000a009 <Phys::allocatePage()>
c00201ca:	39 c6                	cmp    esi,eax
c00201cc:	74 10                	je     c00201de <SATA::open(int, int, void*)+0x6c>
c00201ce:	83 ec 0c             	sub    esp,0xc
c00201d1:	68 3c 62 02 c0       	push   0xc002623c
c00201d6:	e8 88 45 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	6a 02                	push   0x2
c00201e3:	e8 35 b7 fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c00201e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00201ee:	6a 03                	push   0x3
c00201f0:	50                   	push   eax
c00201f1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00201f7:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c00201fd:	e8 c2 bd fe ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020202:	83 c4 14             	add    esp,0x14
c0020205:	53                   	push   ebx
c0020206:	e8 1f e3 fe ff       	call   c000e52a <PhysicalDisk::startCache()>
c002020b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002020e:	e8 53 03 ff ff       	call   c0010566 <createPartitionsForDisk(PhysicalDisk*)>
c0020213:	83 c4 14             	add    esp,0x14
c0020216:	31 c0                	xor    eax,eax
c0020218:	5b                   	pop    ebx
c0020219:	5e                   	pop    esi
c002021a:	c3                   	ret    
c002021b:	90                   	nop

c002021c <SATA::SATA()>:
c002021c:	83 ec 0c             	sub    esp,0xc
c002021f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020223:	83 ec 04             	sub    esp,0x4
c0020226:	68 00 02 00 00       	push   0x200
c002022b:	68 50 62 02 c0       	push   0xc0026250
c0020230:	50                   	push   eax
c0020231:	e8 8c e2 fe ff       	call   c000e4c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020236:	83 c4 10             	add    esp,0x10
c0020239:	ba c0 62 02 c0       	mov    edx,0xc00262c0
c002023e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020242:	89 10                	mov    DWORD PTR [eax],edx
c0020244:	90                   	nop
c0020245:	83 c4 0c             	add    esp,0xc
c0020248:	c3                   	ret    
c0020249:	90                   	nop

c002024a <SATA::access(unsigned long long, int, void*, bool)>:
c002024a:	55                   	push   ebp
c002024b:	57                   	push   edi
c002024c:	56                   	push   esi
c002024d:	53                   	push   ebx
c002024e:	83 ec 2c             	sub    esp,0x2c
c0020251:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020255:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020259:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002025d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020261:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020265:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002026a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002026e:	7e 10                	jle    c0020280 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0020270:	83 ec 0c             	sub    esp,0xc
c0020273:	68 60 62 02 c0       	push   0xc0026260
c0020278:	e8 e6 44 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020286:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002028c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020292:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020296:	89 d0                	mov    eax,edx
c0020298:	c1 e0 07             	shl    eax,0x7
c002029b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002029f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00202a9:	51                   	push   ecx
c00202aa:	8d 42 02             	lea    eax,[edx+0x2]
c00202ad:	51                   	push   ecx
c00202ae:	c1 e0 07             	shl    eax,0x7
c00202b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00202b5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00202b9:	50                   	push   eax
c00202ba:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00202c0:	e8 9f ef ff ff       	call   c001f264 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00202c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	b8 01 00 00 00       	mov    eax,0x1
c00202d1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00202d6:	0f 84 cb 01 00 00    	je     c00204a7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00202dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00202e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202e4:	c1 e0 09             	shl    eax,0x9
c00202e7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00202ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202f0:	74 0e                	je     c0020300 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00202f2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00202f8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00202fc:	89 c1                	mov    ecx,eax
c00202fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020300:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020304:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002030a:	8d 42 02             	lea    eax,[edx+0x2]
c002030d:	c1 e0 07             	shl    eax,0x7
c0020310:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020314:	8b 00                	mov    eax,DWORD PTR [eax]
c0020316:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002031c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020322:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020326:	c1 e1 05             	shl    ecx,0x5
c0020329:	01 c8                	add    eax,ecx
c002032b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002032f:	83 e1 01             	and    ecx,0x1
c0020332:	89 ce                	mov    esi,ecx
c0020334:	8a 08                	mov    cl,BYTE PTR [eax]
c0020336:	c1 e6 06             	shl    esi,0x6
c0020339:	83 e1 bf             	and    ecx,0xffffffbf
c002033c:	09 f1                	or     ecx,esi
c002033e:	88 08                	mov    BYTE PTR [eax],cl
c0020340:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020342:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020348:	81 c9 05 00 01 00    	or     ecx,0x10005
c002034e:	89 08                	mov    DWORD PTR [eax],ecx
c0020350:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020356:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002035c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020362:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020365:	50                   	push   eax
c0020366:	68 90 00 00 00       	push   0x90
c002036b:	6a 00                	push   0x0
c002036d:	56                   	push   esi
c002036e:	e8 11 03 fe ff       	call   c0000684 <memset>
c0020373:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020379:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002037d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020383:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020387:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	48                   	dec    eax
c002038f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020394:	89 c1                	mov    ecx,eax
c0020396:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002039c:	25 00 00 c0 ff       	and    eax,0xffc00000
c00203a1:	09 c8                	or     eax,ecx
c00203a3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00203a9:	66 8b 06             	mov    ax,WORD PTR [esi]
c00203ac:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00203b3:	66 25 00 7f          	and    ax,0x7f00
c00203b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00203bb:	66 0d 27 80          	or     ax,0x8027
c00203bf:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00203c4:	66 89 06             	mov    WORD PTR [esi],ax
c00203c7:	19 c0                	sbb    eax,eax
c00203c9:	83 e0 f0             	and    eax,0xfffffff0
c00203cc:	83 c0 35             	add    eax,0x35
c00203cf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00203d2:	89 e8                	mov    eax,ebp
c00203d4:	c1 e8 10             	shr    eax,0x10
c00203d7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00203da:	89 e8                	mov    eax,ebp
c00203dc:	c1 e8 18             	shr    eax,0x18
c00203df:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00203e2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00203e6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00203e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203ed:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00203f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00203f4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00203f8:	89 d6                	mov    esi,edx
c00203fa:	31 c0                	xor    eax,eax
c00203fc:	c1 e6 07             	shl    esi,0x7
c00203ff:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020403:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020409:	80 e1 88             	and    cl,0x88
c002040c:	74 0a                	je     c0020418 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002040e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020413:	74 0a                	je     c002041f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0020415:	40                   	inc    eax
c0020416:	eb eb                	jmp    c0020403 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0020418:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002041d:	75 0a                	jne    c0020429 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	68 99 62 02 c0       	push   0xc0026299
c0020427:	eb 56                	jmp    c002047f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0020429:	b8 01 00 00 00       	mov    eax,0x1
c002042e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020432:	c1 e2 07             	shl    edx,0x7
c0020435:	d3 e0                	shl    eax,cl
c0020437:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002043b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020441:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020447:	85 c8                	test   eax,ecx
c0020449:	74 20                	je     c002046b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c002044b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020451:	0f ba e1 1e          	bt     ecx,0x1e
c0020455:	73 ea                	jae    c0020441 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0020457:	83 ec 0c             	sub    esp,0xc
c002045a:	68 a7 62 02 c0       	push   0xc00262a7
c002045f:	e8 ff 42 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0020464:	83 c4 10             	add    esp,0x10
c0020467:	31 c0                	xor    eax,eax
c0020469:	eb 3c                	jmp    c00204a7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002046b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020471:	0f ba e0 1e          	bt     eax,0x1e
c0020475:	73 17                	jae    c002048e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0020477:	83 ec 0c             	sub    esp,0xc
c002047a:	68 a7 62 02 c0       	push   0xc00262a7
c002047f:	e8 df 42 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	b8 01 00 00 00       	mov    eax,0x1
c002048c:	eb 19                	jmp    c00204a7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002048e:	31 c0                	xor    eax,eax
c0020490:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020495:	75 10                	jne    c00204a7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0020497:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002049d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00204a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204a7:	83 c4 2c             	add    esp,0x2c
c00204aa:	5b                   	pop    ebx
c00204ab:	5e                   	pop    esi
c00204ac:	5f                   	pop    edi
c00204ad:	5d                   	pop    ebp
c00204ae:	c3                   	ret    
c00204af:	90                   	nop

c00204b0 <SATA::read(unsigned long long, int, void*)>:
c00204b0:	57                   	push   edi
c00204b1:	b8 04 00 00 00       	mov    eax,0x4
c00204b6:	56                   	push   esi
c00204b7:	53                   	push   ebx
c00204b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00204bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204c0:	8d 7a ff             	lea    edi,[edx-0x1]
c00204c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00204c7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00204cb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00204d1:	77 25                	ja     c00204f8 <SATA::read(unsigned long long, int, void*)+0x48>
c00204d3:	b8 06 00 00 00       	mov    eax,0x6
c00204d8:	85 f6                	test   esi,esi
c00204da:	74 1c                	je     c00204f8 <SATA::read(unsigned long long, int, void*)+0x48>
c00204dc:	50                   	push   eax
c00204dd:	50                   	push   eax
c00204de:	6a 00                	push   0x0
c00204e0:	56                   	push   esi
c00204e1:	52                   	push   edx
c00204e2:	53                   	push   ebx
c00204e3:	51                   	push   ecx
c00204e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204e8:	e8 5d fd ff ff       	call   c002024a <SATA::access(unsigned long long, int, void*, bool)>
c00204ed:	83 c4 20             	add    esp,0x20
c00204f0:	85 c0                	test   eax,eax
c00204f2:	0f 95 c0             	setne  al
c00204f5:	0f b6 c0             	movzx  eax,al
c00204f8:	5b                   	pop    ebx
c00204f9:	5e                   	pop    esi
c00204fa:	5f                   	pop    edi
c00204fb:	c3                   	ret    

c00204fc <SATA::write(unsigned long long, int, void*)>:
c00204fc:	55                   	push   ebp
c00204fd:	b8 04 00 00 00       	mov    eax,0x4
c0020502:	57                   	push   edi
c0020503:	56                   	push   esi
c0020504:	53                   	push   ebx
c0020505:	83 ec 0c             	sub    esp,0xc
c0020508:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002050c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020510:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020513:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020517:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002051b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020521:	77 3d                	ja     c0020560 <SATA::write(unsigned long long, int, void*)+0x64>
c0020523:	b8 06 00 00 00       	mov    eax,0x6
c0020528:	85 ed                	test   ebp,ebp
c002052a:	74 34                	je     c0020560 <SATA::write(unsigned long long, int, void*)+0x64>
c002052c:	c1 e3 09             	shl    ebx,0x9
c002052f:	01 eb                	add    ebx,ebp
c0020531:	89 d6                	mov    esi,edx
c0020533:	89 cf                	mov    edi,ecx
c0020535:	83 c6 01             	add    esi,0x1
c0020538:	83 d7 00             	adc    edi,0x0
c002053b:	50                   	push   eax
c002053c:	50                   	push   eax
c002053d:	6a 01                	push   0x1
c002053f:	55                   	push   ebp
c0020540:	81 c5 00 02 00 00    	add    ebp,0x200
c0020546:	6a 01                	push   0x1
c0020548:	51                   	push   ecx
c0020549:	52                   	push   edx
c002054a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002054e:	e8 f7 fc ff ff       	call   c002024a <SATA::access(unsigned long long, int, void*, bool)>
c0020553:	83 c4 20             	add    esp,0x20
c0020556:	89 f2                	mov    edx,esi
c0020558:	89 f9                	mov    ecx,edi
c002055a:	39 dd                	cmp    ebp,ebx
c002055c:	75 d3                	jne    c0020531 <SATA::write(unsigned long long, int, void*)+0x35>
c002055e:	31 c0                	xor    eax,eax
c0020560:	83 c4 0c             	add    esp,0xc
c0020563:	5b                   	pop    ebx
c0020564:	5e                   	pop    esi
c0020565:	5f                   	pop    edi
c0020566:	5d                   	pop    ebp
c0020567:	c3                   	ret    

c0020568 <SATAPI::write(unsigned long long, int, void*)>:
c0020568:	b8 03 00 00 00       	mov    eax,0x3
c002056d:	c3                   	ret    

c002056e <SATAPI::close(int, int, void*)>:
c002056e:	83 ec 0c             	sub    esp,0xc
c0020571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020575:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002057b:	85 c0                	test   eax,eax
c002057d:	74 0c                	je     c002058b <SATAPI::close(int, int, void*)+0x1d>
c002057f:	83 ec 0c             	sub    esp,0xc
c0020582:	8b 10                	mov    edx,DWORD PTR [eax]
c0020584:	50                   	push   eax
c0020585:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	31 c0                	xor    eax,eax
c002058d:	83 c4 0c             	add    esp,0xc
c0020590:	c3                   	ret    
c0020591:	90                   	nop

c0020592 <SATAPI::SATAPI()>:
c0020592:	83 ec 0c             	sub    esp,0xc
c0020595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020599:	83 ec 04             	sub    esp,0x4
c002059c:	68 00 08 00 00       	push   0x800
c00205a1:	68 f0 62 02 c0       	push   0xc00262f0
c00205a6:	50                   	push   eax
c00205a7:	e8 16 df fe ff       	call   c000e4c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00205ac:	83 c4 10             	add    esp,0x10
c00205af:	ba 9c 63 02 c0       	mov    edx,0xc002639c
c00205b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b8:	89 10                	mov    DWORD PTR [eax],edx
c00205ba:	90                   	nop
c00205bb:	83 c4 0c             	add    esp,0xc
c00205be:	c3                   	ret    
c00205bf:	90                   	nop

c00205c0 <SATAPI::diskRemoved()>:
c00205c0:	83 ec 18             	sub    esp,0x18
c00205c3:	68 fc 62 02 c0       	push   0xc00262fc
c00205c8:	e8 76 c6 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00205cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205d1:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00205d8:	83 c4 1c             	add    esp,0x1c
c00205db:	c3                   	ret    

c00205dc <SATAPI::diskInserted()>:
c00205dc:	53                   	push   ebx
c00205dd:	83 ec 14             	sub    esp,0x14
c00205e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00205e4:	68 13 63 02 c0       	push   0xc0026313
c00205e9:	e8 55 c6 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00205ee:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00205f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205f8:	e8 2d df fe ff       	call   c000e52a <PhysicalDisk::startCache()>
c00205fd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0020601:	83 c4 18             	add    esp,0x18
c0020604:	5b                   	pop    ebx
c0020605:	e9 5c ff fe ff       	jmp    c0010566 <createPartitionsForDisk(PhysicalDisk*)>

c002060a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002060a:	55                   	push   ebp
c002060b:	57                   	push   edi
c002060c:	56                   	push   esi
c002060d:	53                   	push   ebx
c002060e:	83 ec 34             	sub    esp,0x34
c0020611:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020615:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020619:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002061d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020621:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020625:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002062b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020635:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002063b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002063f:	c1 e0 07             	shl    eax,0x7
c0020642:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020646:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002064a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020654:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020658:	8d 58 02             	lea    ebx,[eax+0x2]
c002065b:	c1 e3 07             	shl    ebx,0x7
c002065e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020662:	53                   	push   ebx
c0020663:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020669:	e8 f6 eb ff ff       	call   c001f264 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002066e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020672:	83 c4 10             	add    esp,0x10
c0020675:	b8 01 00 00 00       	mov    eax,0x1
c002067a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002067f:	0f 84 85 01 00 00    	je     c002080a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0020685:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002068b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002068d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020693:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020699:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002069d:	c1 e1 05             	shl    ecx,0x5
c00206a0:	01 c8                	add    eax,ecx
c00206a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00206a4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00206aa:	81 c9 25 00 01 00    	or     ecx,0x10025
c00206b0:	89 08                	mov    DWORD PTR [eax],ecx
c00206b2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00206b8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00206be:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00206c4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00206c7:	8d 7b 40             	lea    edi,[ebx+0x40]
c00206ca:	50                   	push   eax
c00206cb:	68 90 00 00 00       	push   0x90
c00206d0:	6a 00                	push   0x0
c00206d2:	53                   	push   ebx
c00206d3:	e8 ac ff fd ff       	call   c0000684 <memset>
c00206d8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00206dc:	b9 0c 00 00 00       	mov    ecx,0xc
c00206e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206e3:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00206e9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00206ed:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00206f3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00206f7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00206fb:	48                   	dec    eax
c00206fc:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020701:	89 c1                	mov    ecx,eax
c0020703:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020709:	25 00 00 c0 ff       	and    eax,0xffc00000
c002070e:	09 c8                	or     eax,ecx
c0020710:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020716:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020719:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020720:	66 25 00 7f          	and    ax,0x7f00
c0020724:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020728:	66 0d 27 80          	or     ax,0x8027
c002072c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020730:	66 89 03             	mov    WORD PTR [ebx],ax
c0020733:	89 d0                	mov    eax,edx
c0020735:	c1 ea 18             	shr    edx,0x18
c0020738:	c1 e8 10             	shr    eax,0x10
c002073b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002073e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020741:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020745:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002074c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002074f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002075a:	31 c0                	xor    eax,eax
c002075c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020760:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0020766:	80 e2 88             	and    dl,0x88
c0020769:	74 0a                	je     c0020775 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002076b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020770:	74 0a                	je     c002077c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0020772:	40                   	inc    eax
c0020773:	eb eb                	jmp    c0020760 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0020775:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002077a:	75 0f                	jne    c002078b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c002077c:	83 ec 0c             	sub    esp,0xc
c002077f:	68 99 62 02 c0       	push   0xc0026299
c0020784:	e8 da 3f ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0020789:	eb 3f                	jmp    c00207ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c002078b:	ba 01 00 00 00       	mov    edx,0x1
c0020790:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020798:	d3 e2                	shl    edx,cl
c002079a:	c1 e0 07             	shl    eax,0x7
c002079d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00207a3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207a7:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00207ad:	85 ca                	test   edx,ecx
c00207af:	74 23                	je     c00207d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00207b1:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00207b7:	0f ba e1 1e          	bt     ecx,0x1e
c00207bb:	73 ea                	jae    c00207a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00207bd:	83 ec 0c             	sub    esp,0xc
c00207c0:	68 2b 63 02 c0       	push   0xc002632b
c00207c5:	e8 79 c4 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00207ca:	83 c4 10             	add    esp,0x10
c00207cd:	b8 01 00 00 00       	mov    eax,0x1
c00207d2:	eb 36                	jmp    c002080a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00207d4:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00207da:	0f ba e0 1e          	bt     eax,0x1e
c00207de:	73 0a                	jae    c00207ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00207e0:	83 ec 0c             	sub    esp,0xc
c00207e3:	68 3e 63 02 c0       	push   0xc002633e
c00207e8:	eb db                	jmp    c00207c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00207ea:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00207ef:	74 17                	je     c0020808 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00207f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00207f6:	74 10                	je     c0020808 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00207f8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00207fe:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020802:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020808:	31 c0                	xor    eax,eax
c002080a:	83 c4 2c             	add    esp,0x2c
c002080d:	5b                   	pop    ebx
c002080e:	5e                   	pop    esi
c002080f:	5f                   	pop    edi
c0020810:	5d                   	pop    ebp
c0020811:	c3                   	ret    

c0020812 <SATAPI::eject()>:
c0020812:	57                   	push   edi
c0020813:	b9 03 00 00 00       	mov    ecx,0x3
c0020818:	53                   	push   ebx
c0020819:	83 ec 14             	sub    esp,0x14
c002081c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020820:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020824:	fc                   	cld    
c0020825:	31 c0                	xor    eax,eax
c0020827:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020829:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002082e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020833:	50                   	push   eax
c0020834:	6a 00                	push   0x0
c0020836:	6a 00                	push   0x0
c0020838:	6a 00                	push   0x0
c002083a:	6a 00                	push   0x0
c002083c:	6a 02                	push   0x2
c002083e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020842:	50                   	push   eax
c0020843:	53                   	push   ebx
c0020844:	e8 c1 fd ff ff       	call   c002060a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020849:	83 c4 14             	add    esp,0x14
c002084c:	53                   	push   ebx
c002084d:	e8 6e fd ff ff       	call   c00205c0 <SATAPI::diskRemoved()>
c0020852:	83 c4 24             	add    esp,0x24
c0020855:	31 c0                	xor    eax,eax
c0020857:	5b                   	pop    ebx
c0020858:	5f                   	pop    edi
c0020859:	c3                   	ret    

c002085a <SATAPI::detectMedia()>:
c002085a:	56                   	push   esi
c002085b:	53                   	push   ebx
c002085c:	83 ec 28             	sub    esp,0x28
c002085f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020863:	6a 0c                	push   0xc
c0020865:	6a 00                	push   0x0
c0020867:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002086b:	56                   	push   esi
c002086c:	e8 13 fe fd ff       	call   c0000684 <memset>
c0020871:	83 c4 0c             	add    esp,0xc
c0020874:	6a 00                	push   0x0
c0020876:	6a 00                	push   0x0
c0020878:	6a 00                	push   0x0
c002087a:	6a 00                	push   0x0
c002087c:	6a 00                	push   0x0
c002087e:	56                   	push   esi
c002087f:	53                   	push   ebx
c0020880:	e8 85 fd ff ff       	call   c002060a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020885:	83 c4 1c             	add    esp,0x1c
c0020888:	6a 0c                	push   0xc
c002088a:	6a 00                	push   0x0
c002088c:	56                   	push   esi
c002088d:	e8 f2 fd fd ff       	call   c0000684 <memset>
c0020892:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020897:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002089c:	83 c4 0c             	add    esp,0xc
c002089f:	6a 01                	push   0x1
c00208a1:	8d 44 24 16          	lea    eax,[esp+0x16]
c00208a5:	50                   	push   eax
c00208a6:	6a 00                	push   0x0
c00208a8:	6a 00                	push   0x0
c00208aa:	6a 12                	push   0x12
c00208ac:	56                   	push   esi
c00208ad:	53                   	push   ebx
c00208ae:	e8 57 fd ff ff       	call   c002060a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00208b3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00208b7:	83 c4 20             	add    esp,0x20
c00208ba:	83 e0 7f             	and    eax,0x7f
c00208bd:	3c 70                	cmp    al,0x70
c00208bf:	74 15                	je     c00208d6 <SATAPI::detectMedia()+0x7c>
c00208c1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00208c8:	75 0c                	jne    c00208d6 <SATAPI::detectMedia()+0x7c>
c00208ca:	83 ec 0c             	sub    esp,0xc
c00208cd:	53                   	push   ebx
c00208ce:	e8 09 fd ff ff       	call   c00205dc <SATAPI::diskInserted()>
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00208da:	83 e0 0f             	and    eax,0xf
c00208dd:	3c 02                	cmp    al,0x2
c00208df:	75 1b                	jne    c00208fc <SATAPI::detectMedia()+0xa2>
c00208e1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00208e6:	75 2d                	jne    c0020915 <SATAPI::detectMedia()+0xbb>
c00208e8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00208ef:	74 24                	je     c0020915 <SATAPI::detectMedia()+0xbb>
c00208f1:	83 ec 0c             	sub    esp,0xc
c00208f4:	53                   	push   ebx
c00208f5:	e8 c6 fc ff ff       	call   c00205c0 <SATAPI::diskRemoved()>
c00208fa:	eb 16                	jmp    c0020912 <SATAPI::detectMedia()+0xb8>
c00208fc:	84 c0                	test   al,al
c00208fe:	75 15                	jne    c0020915 <SATAPI::detectMedia()+0xbb>
c0020900:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020907:	75 0c                	jne    c0020915 <SATAPI::detectMedia()+0xbb>
c0020909:	83 ec 0c             	sub    esp,0xc
c002090c:	53                   	push   ebx
c002090d:	e8 ca fc ff ff       	call   c00205dc <SATAPI::diskInserted()>
c0020912:	83 c4 10             	add    esp,0x10
c0020915:	83 c4 24             	add    esp,0x24
c0020918:	5b                   	pop    ebx
c0020919:	5e                   	pop    esi
c002091a:	c3                   	ret    
c002091b:	90                   	nop

c002091c <SATAPI::open(int, int, void*)>:
c002091c:	56                   	push   esi
c002091d:	53                   	push   ebx
c002091e:	50                   	push   eax
c002091f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020923:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020927:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020931:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020937:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020941:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020945:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002094f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020955:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002095c:	e8 a8 96 fe ff       	call   c000a009 <Phys::allocatePage()>
c0020961:	89 c6                	mov    esi,eax
c0020963:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020969:	81 c6 00 10 00 00    	add    esi,0x1000
c002096f:	e8 95 96 fe ff       	call   c000a009 <Phys::allocatePage()>
c0020974:	39 c6                	cmp    esi,eax
c0020976:	74 10                	je     c0020988 <SATAPI::open(int, int, void*)+0x6c>
c0020978:	83 ec 0c             	sub    esp,0xc
c002097b:	68 53 63 02 c0       	push   0xc0026353
c0020980:	e8 de 3d ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	83 ec 0c             	sub    esp,0xc
c002098b:	6a 02                	push   0x2
c002098d:	e8 8b af fe ff       	call   c000b91d <Virt::allocateKernelVirtualPages(int)>
c0020992:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020998:	6a 03                	push   0x3
c002099a:	50                   	push   eax
c002099b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00209a1:	ff 35 d0 75 02 c0    	push   DWORD PTR ds:0xc00275d0
c00209a7:	e8 18 b6 fe ff       	call   c000bfc4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00209ac:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00209b3:	83 c4 14             	add    esp,0x14
c00209b6:	53                   	push   ebx
c00209b7:	e8 9e fe ff ff       	call   c002085a <SATAPI::detectMedia()>
c00209bc:	83 c4 14             	add    esp,0x14
c00209bf:	31 c0                	xor    eax,eax
c00209c1:	5b                   	pop    ebx
c00209c2:	5e                   	pop    esi
c00209c3:	c3                   	ret    

c00209c4 <SATAPI::read(unsigned long long, int, void*)>:
c00209c4:	55                   	push   ebp
c00209c5:	57                   	push   edi
c00209c6:	56                   	push   esi
c00209c7:	53                   	push   ebx
c00209c8:	83 ec 1c             	sub    esp,0x1c
c00209cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00209cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00209d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00209d7:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00209de:	74 19                	je     c00209f9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00209e0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00209e5:	7e 2e                	jle    c0020a15 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00209e7:	83 ec 0c             	sub    esp,0xc
c00209ea:	68 69 63 02 c0       	push   0xc0026369
c00209ef:	e8 6f 3d ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00209f4:	83 c4 10             	add    esp,0x10
c00209f7:	eb 1c                	jmp    c0020a15 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00209f9:	83 ec 0c             	sub    esp,0xc
c00209fc:	55                   	push   ebp
c00209fd:	e8 58 fe ff ff       	call   c002085a <SATAPI::detectMedia()>
c0020a02:	83 c4 10             	add    esp,0x10
c0020a05:	b8 02 00 00 00       	mov    eax,0x2
c0020a0a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0020a11:	75 cd                	jne    c00209e0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0020a13:	eb 49                	jmp    c0020a5e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0020a15:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a19:	b9 03 00 00 00       	mov    ecx,0x3
c0020a1e:	fc                   	cld    
c0020a1f:	31 c0                	xor    eax,eax
c0020a21:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a23:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020a28:	89 d8                	mov    eax,ebx
c0020a2a:	86 e0                	xchg   al,ah
c0020a2c:	c1 c0 10             	rol    eax,0x10
c0020a2f:	86 e0                	xchg   al,ah
c0020a31:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0020a35:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0020a39:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020a3d:	50                   	push   eax
c0020a3e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020a42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020a46:	56                   	push   esi
c0020a47:	53                   	push   ebx
c0020a48:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020a4c:	c1 e0 0b             	shl    eax,0xb
c0020a4f:	50                   	push   eax
c0020a50:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020a54:	50                   	push   eax
c0020a55:	55                   	push   ebp
c0020a56:	e8 af fb ff ff       	call   c002060a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020a5b:	83 c4 20             	add    esp,0x20
c0020a5e:	83 c4 1c             	add    esp,0x1c
c0020a61:	5b                   	pop    ebx
c0020a62:	5e                   	pop    esi
c0020a63:	5f                   	pop    edi
c0020a64:	5d                   	pop    ebp
c0020a65:	c3                   	ret    
c0020a66:	66 90                	xchg   ax,ax

c0020a68 <AVX::open(int, int, void*)>:
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	e8 38 11 00 00       	call   c0021ba8 <avxInit>
c0020a70:	b8 00 00 00 00       	mov    eax,0x0
c0020a75:	83 c4 0c             	add    esp,0xc
c0020a78:	c3                   	ret    
c0020a79:	90                   	nop
c0020a7a:	66 90                	xchg   ax,ax

c0020a7c <AVX::close(int, int, void*)>:
c0020a7c:	83 ec 0c             	sub    esp,0xc
c0020a7f:	e8 25 11 00 00       	call   c0021ba9 <avxClose>
c0020a84:	b8 00 00 00 00       	mov    eax,0x0
c0020a89:	83 c4 0c             	add    esp,0xc
c0020a8c:	c3                   	ret    
c0020a8d:	90                   	nop
c0020a8e:	66 90                	xchg   ax,ax

c0020a90 <AVX::available()>:
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	e8 08 11 00 00       	call   c0021ba0 <avxDetect>
c0020a98:	85 c0                	test   eax,eax
c0020a9a:	0f 95 c0             	setne  al
c0020a9d:	83 c4 0c             	add    esp,0xc
c0020aa0:	c3                   	ret    
c0020aa1:	90                   	nop
c0020aa2:	66 90                	xchg   ax,ax

c0020aa4 <AVX::save(void*)>:
c0020aa4:	83 ec 0c             	sub    esp,0xc
c0020aa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aab:	83 ec 0c             	sub    esp,0xc
c0020aae:	50                   	push   eax
c0020aaf:	e8 f2 10 00 00       	call   c0021ba6 <avxSave>
c0020ab4:	83 c4 10             	add    esp,0x10
c0020ab7:	90                   	nop
c0020ab8:	83 c4 0c             	add    esp,0xc
c0020abb:	c3                   	ret    

c0020abc <AVX::load(void*)>:
c0020abc:	83 ec 0c             	sub    esp,0xc
c0020abf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ac3:	83 ec 0c             	sub    esp,0xc
c0020ac6:	50                   	push   eax
c0020ac7:	e8 db 10 00 00       	call   c0021ba7 <avxLoad>
c0020acc:	83 c4 10             	add    esp,0x10
c0020acf:	90                   	nop
c0020ad0:	83 c4 0c             	add    esp,0xc
c0020ad3:	c3                   	ret    

c0020ad4 <AVX::AVX()>:
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020adb:	83 ec 08             	sub    esp,0x8
c0020ade:	68 cc 63 02 c0       	push   0xc00263cc
c0020ae3:	50                   	push   eax
c0020ae4:	e8 b7 da fe ff       	call   c000e5a0 <FPU::FPU(char const*)>
c0020ae9:	83 c4 10             	add    esp,0x10
c0020aec:	ba dc 63 02 c0       	mov    edx,0xc00263dc
c0020af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af5:	89 10                	mov    DWORD PTR [eax],edx
c0020af7:	90                   	nop
c0020af8:	83 c4 0c             	add    esp,0xc
c0020afb:	c3                   	ret    

c0020afc <MMX::available()>:
c0020afc:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0020b01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020b07:	83 e0 20             	and    eax,0x20
c0020b0a:	84 c0                	test   al,al
c0020b0c:	0f 95 c0             	setne  al
c0020b0f:	c3                   	ret    

c0020b10 <MMX::open(int, int, void*)>:
c0020b10:	83 ec 0c             	sub    esp,0xc
c0020b13:	e8 1a 11 00 00       	call   c0021c32 <x87Init>
c0020b18:	b8 00 00 00 00       	mov    eax,0x0
c0020b1d:	83 c4 0c             	add    esp,0xc
c0020b20:	c3                   	ret    
c0020b21:	90                   	nop
c0020b22:	66 90                	xchg   ax,ax

c0020b24 <MMX::close(int, int, void*)>:
c0020b24:	83 ec 0c             	sub    esp,0xc
c0020b27:	e8 20 11 00 00       	call   c0021c4c <x87Close>
c0020b2c:	b8 00 00 00 00       	mov    eax,0x0
c0020b31:	83 c4 0c             	add    esp,0xc
c0020b34:	c3                   	ret    
c0020b35:	90                   	nop
c0020b36:	66 90                	xchg   ax,ax

c0020b38 <MMX::save(void*)>:
c0020b38:	83 ec 0c             	sub    esp,0xc
c0020b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b3f:	83 ec 0c             	sub    esp,0xc
c0020b42:	50                   	push   eax
c0020b43:	e8 d9 10 00 00       	call   c0021c21 <x87Save>
c0020b48:	83 c4 10             	add    esp,0x10
c0020b4b:	90                   	nop
c0020b4c:	83 c4 0c             	add    esp,0xc
c0020b4f:	c3                   	ret    

c0020b50 <MMX::load(void*)>:
c0020b50:	83 ec 0c             	sub    esp,0xc
c0020b53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b57:	83 ec 0c             	sub    esp,0xc
c0020b5a:	50                   	push   eax
c0020b5b:	e8 ca 10 00 00       	call   c0021c2a <x87Load>
c0020b60:	83 c4 10             	add    esp,0x10
c0020b63:	90                   	nop
c0020b64:	83 c4 0c             	add    esp,0xc
c0020b67:	c3                   	ret    

c0020b68 <MMX::MMX()>:
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6f:	83 ec 08             	sub    esp,0x8
c0020b72:	68 0c 64 02 c0       	push   0xc002640c
c0020b77:	50                   	push   eax
c0020b78:	e8 23 da fe ff       	call   c000e5a0 <FPU::FPU(char const*)>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	ba 1c 64 02 c0       	mov    edx,0xc002641c
c0020b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b89:	89 10                	mov    DWORD PTR [eax],edx
c0020b8b:	90                   	nop
c0020b8c:	83 c4 0c             	add    esp,0xc
c0020b8f:	c3                   	ret    

c0020b90 <SSE::open(int, int, void*)>:
c0020b90:	83 ec 0c             	sub    esp,0xc
c0020b93:	e8 4c 10 00 00       	call   c0021be4 <sseInit>
c0020b98:	b8 00 00 00 00       	mov    eax,0x0
c0020b9d:	83 c4 0c             	add    esp,0xc
c0020ba0:	c3                   	ret    
c0020ba1:	90                   	nop
c0020ba2:	66 90                	xchg   ax,ax

c0020ba4 <SSE::close(int, int, void*)>:
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	e8 48 10 00 00       	call   c0021bf4 <sseClose>
c0020bac:	b8 00 00 00 00       	mov    eax,0x0
c0020bb1:	83 c4 0c             	add    esp,0xc
c0020bb4:	c3                   	ret    
c0020bb5:	90                   	nop
c0020bb6:	66 90                	xchg   ax,ax

c0020bb8 <SSE::available()>:
c0020bb8:	83 ec 1c             	sub    esp,0x1c
c0020bbb:	e8 00 10 00 00       	call   c0021bc0 <absolutelyNoChanceInHell>
c0020bc0:	85 c0                	test   eax,eax
c0020bc2:	0f 95 c0             	setne  al
c0020bc5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020bc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020bcd:	83 c4 1c             	add    esp,0x1c
c0020bd0:	c3                   	ret    
c0020bd1:	90                   	nop
c0020bd2:	66 90                	xchg   ax,ax

c0020bd4 <SSE::save(void*)>:
c0020bd4:	83 ec 0c             	sub    esp,0xc
c0020bd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bdb:	83 ec 0c             	sub    esp,0xc
c0020bde:	50                   	push   eax
c0020bdf:	e8 f4 0f 00 00       	call   c0021bd8 <sseSave>
c0020be4:	83 c4 10             	add    esp,0x10
c0020be7:	90                   	nop
c0020be8:	83 c4 0c             	add    esp,0xc
c0020beb:	c3                   	ret    

c0020bec <SSE::load(void*)>:
c0020bec:	83 ec 0c             	sub    esp,0xc
c0020bef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bf3:	83 ec 0c             	sub    esp,0xc
c0020bf6:	50                   	push   eax
c0020bf7:	e8 e2 0f 00 00       	call   c0021bde <sseLoad>
c0020bfc:	83 c4 10             	add    esp,0x10
c0020bff:	90                   	nop
c0020c00:	83 c4 0c             	add    esp,0xc
c0020c03:	c3                   	ret    

c0020c04 <SSE::SSE()>:
c0020c04:	83 ec 0c             	sub    esp,0xc
c0020c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c0b:	83 ec 08             	sub    esp,0x8
c0020c0e:	68 4c 64 02 c0       	push   0xc002644c
c0020c13:	50                   	push   eax
c0020c14:	e8 87 d9 fe ff       	call   c000e5a0 <FPU::FPU(char const*)>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	ba 5c 64 02 c0       	mov    edx,0xc002645c
c0020c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c25:	89 10                	mov    DWORD PTR [eax],edx
c0020c27:	90                   	nop
c0020c28:	83 c4 0c             	add    esp,0xc
c0020c2b:	c3                   	ret    

c0020c2c <x87::open(int, int, void*)>:
c0020c2c:	83 ec 0c             	sub    esp,0xc
c0020c2f:	e8 fe 0f 00 00       	call   c0021c32 <x87Init>
c0020c34:	b8 00 00 00 00       	mov    eax,0x0
c0020c39:	83 c4 0c             	add    esp,0xc
c0020c3c:	c3                   	ret    
c0020c3d:	90                   	nop
c0020c3e:	66 90                	xchg   ax,ax

c0020c40 <x87::close(int, int, void*)>:
c0020c40:	83 ec 0c             	sub    esp,0xc
c0020c43:	e8 04 10 00 00       	call   c0021c4c <x87Close>
c0020c48:	b8 00 00 00 00       	mov    eax,0x0
c0020c4d:	83 c4 0c             	add    esp,0xc
c0020c50:	c3                   	ret    
c0020c51:	90                   	nop
c0020c52:	66 90                	xchg   ax,ax

c0020c54 <x87::available()>:
c0020c54:	83 ec 0c             	sub    esp,0xc
c0020c57:	e8 aa 0f 00 00       	call   c0021c06 <x87Detect>
c0020c5c:	85 c0                	test   eax,eax
c0020c5e:	0f 95 c0             	setne  al
c0020c61:	83 c4 0c             	add    esp,0xc
c0020c64:	c3                   	ret    
c0020c65:	90                   	nop
c0020c66:	66 90                	xchg   ax,ax

c0020c68 <x87::save(void*)>:
c0020c68:	83 ec 0c             	sub    esp,0xc
c0020c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c6f:	83 ec 0c             	sub    esp,0xc
c0020c72:	50                   	push   eax
c0020c73:	e8 a9 0f 00 00       	call   c0021c21 <x87Save>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	90                   	nop
c0020c7c:	83 c4 0c             	add    esp,0xc
c0020c7f:	c3                   	ret    

c0020c80 <x87::load(void*)>:
c0020c80:	83 ec 0c             	sub    esp,0xc
c0020c83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c87:	83 ec 0c             	sub    esp,0xc
c0020c8a:	50                   	push   eax
c0020c8b:	e8 9a 0f 00 00       	call   c0021c2a <x87Load>
c0020c90:	83 c4 10             	add    esp,0x10
c0020c93:	90                   	nop
c0020c94:	83 c4 0c             	add    esp,0xc
c0020c97:	c3                   	ret    

c0020c98 <x87::x87()>:
c0020c98:	83 ec 0c             	sub    esp,0xc
c0020c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c9f:	83 ec 08             	sub    esp,0x8
c0020ca2:	68 8c 64 02 c0       	push   0xc002648c
c0020ca7:	50                   	push   eax
c0020ca8:	e8 f3 d8 fe ff       	call   c000e5a0 <FPU::FPU(char const*)>
c0020cad:	83 c4 10             	add    esp,0x10
c0020cb0:	ba 9c 64 02 c0       	mov    edx,0xc002649c
c0020cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cb9:	89 10                	mov    DWORD PTR [eax],edx
c0020cbb:	90                   	nop
c0020cbc:	83 c4 0c             	add    esp,0xc
c0020cbf:	c3                   	ret    

c0020cc0 <APIC::disable()>:
c0020cc0:	90                   	nop
c0020cc1:	c3                   	ret    

c0020cc2 <APIC::close(int, int, void*)>:
c0020cc2:	55                   	push   ebp
c0020cc3:	89 e5                	mov    ebp,esp
c0020cc5:	83 ec 08             	sub    esp,0x8
c0020cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ccd:	83 c0 3c             	add    eax,0x3c
c0020cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cd2:	83 ec 0c             	sub    esp,0xc
c0020cd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020cd8:	ff d0                	call   eax
c0020cda:	83 c4 10             	add    esp,0x10
c0020cdd:	b8 00 00 00 00       	mov    eax,0x0
c0020ce2:	c9                   	leave  
c0020ce3:	c3                   	ret    

c0020ce4 <IOAPIC::close(int, int, void*)>:
c0020ce4:	b8 00 00 00 00       	mov    eax,0x0
c0020ce9:	c3                   	ret    

c0020cea <APIC::io_wait()>:
c0020cea:	eb 00                	jmp    c0020cec <APIC::io_wait()+0x2>
c0020cec:	eb 00                	jmp    c0020cee <APIC::io_wait()+0x4>
c0020cee:	90                   	nop
c0020cef:	c3                   	ret    

c0020cf0 <APIC::getBase()>:
c0020cf0:	55                   	push   ebp
c0020cf1:	89 e5                	mov    ebp,esp
c0020cf3:	83 ec 18             	sub    esp,0x18
c0020cf6:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0020cfb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020d01:	83 e0 08             	and    eax,0x8
c0020d04:	84 c0                	test   al,al
c0020d06:	75 07                	jne    c0020d0f <APIC::getBase()+0x1f>
c0020d08:	b8 00 00 00 00       	mov    eax,0x0
c0020d0d:	eb 21                	jmp    c0020d30 <APIC::getBase()+0x40>
c0020d0f:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0020d14:	83 ec 08             	sub    esp,0x8
c0020d17:	6a 1b                	push   0x1b
c0020d19:	50                   	push   eax
c0020d1a:	e8 05 82 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0020d1f:	83 c4 10             	add    esp,0x10
c0020d22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020d25:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0020d28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020d2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0020d30:	c9                   	leave  
c0020d31:	c3                   	ret    

c0020d32 <APIC::eoi(unsigned char)>:
c0020d32:	55                   	push   ebp
c0020d33:	89 e5                	mov    ebp,esp
c0020d35:	83 ec 28             	sub    esp,0x28
c0020d38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020d3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020d3e:	83 ec 0c             	sub    esp,0xc
c0020d41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d44:	e8 a7 ff ff ff       	call   c0020cf0 <APIC::getBase()>
c0020d49:	83 c4 10             	add    esp,0x10
c0020d4c:	05 b0 00 00 00       	add    eax,0xb0
c0020d51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020d54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020d57:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020d5d:	90                   	nop
c0020d5e:	c9                   	leave  
c0020d5f:	c3                   	ret    

c0020d60 <APIC::open(int, int, void*)>:
c0020d60:	55                   	push   ebp
c0020d61:	89 e5                	mov    ebp,esp
c0020d63:	57                   	push   edi
c0020d64:	56                   	push   esi
c0020d65:	53                   	push   ebx
c0020d66:	83 ec 2c             	sub    esp,0x2c
c0020d69:	83 ec 0c             	sub    esp,0xc
c0020d6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d6f:	e8 7c ff ff ff       	call   c0020cf0 <APIC::getBase()>
c0020d74:	83 c4 10             	add    esp,0x10
c0020d77:	89 c2                	mov    edx,eax
c0020d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d7c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020d82:	0f b6 f8             	movzx  edi,al
c0020d85:	89 d0                	mov    eax,edx
c0020d87:	ba 00 00 00 00       	mov    edx,0x0
c0020d8c:	89 c1                	mov    ecx,eax
c0020d8e:	80 e5 ff             	and    ch,0xff
c0020d91:	89 cb                	mov    ebx,ecx
c0020d93:	0f b6 f2             	movzx  esi,dl
c0020d96:	89 d8                	mov    eax,ebx
c0020d98:	89 f2                	mov    edx,esi
c0020d9a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020d9d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020da0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020da4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020da8:	83 e0 00             	and    eax,0x0
c0020dab:	09 d0                	or     eax,edx
c0020dad:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020db4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020dba:	8d 50 01             	lea    edx,[eax+0x1]
c0020dbd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020dc0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020dc6:	0f b6 d0             	movzx  edx,al
c0020dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020dcc:	83 c2 08             	add    edx,0x8
c0020dcf:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020dd3:	0f b6 c9             	movzx  ecx,cl
c0020dd6:	81 c9 00 00 01 00    	or     ecx,0x10000
c0020ddc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020de0:	83 ec 0c             	sub    esp,0xc
c0020de3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020de6:	e8 05 ff ff ff       	call   c0020cf0 <APIC::getBase()>
c0020deb:	83 c4 10             	add    esp,0x10
c0020dee:	05 f0 00 00 00       	add    eax,0xf0
c0020df3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0020df6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dfb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020dfe:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0020e05:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0020e0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020e0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020e12:	89 10                	mov    DWORD PTR [eax],edx
c0020e14:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0020e1b:	a1 10 7d 02 c0       	mov    eax,ds:0xc0027d10
c0020e20:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0020e23:	7d 7c                	jge    c0020ea1 <APIC::open(int, int, void*)+0x141>
c0020e25:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0020e28:	8b 04 85 20 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd82e0]
c0020e2f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0020e32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0020e35:	8b 04 85 20 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd82e0]
c0020e3c:	c1 e8 08             	shr    eax,0x8
c0020e3f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0020e43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0020e46:	8b 04 85 20 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd82e0]
c0020e4d:	c1 e8 18             	shr    eax,0x18
c0020e50:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0020e53:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0020e57:	75 40                	jne    c0020e99 <APIC::open(int, int, void*)+0x139>
c0020e59:	83 ec 0c             	sub    esp,0xc
c0020e5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e5f:	e8 8c fe ff ff       	call   c0020cf0 <APIC::getBase()>
c0020e64:	83 c4 10             	add    esp,0x10
c0020e67:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0020e6b:	75 07                	jne    c0020e74 <APIC::open(int, int, void*)+0x114>
c0020e6d:	ba 60 03 00 00       	mov    edx,0x360
c0020e72:	eb 05                	jmp    c0020e79 <APIC::open(int, int, void*)+0x119>
c0020e74:	ba 50 03 00 00       	mov    edx,0x350
c0020e79:	01 d0                	add    eax,edx
c0020e7b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020e7e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0020e81:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e83:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0020e86:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0020e8d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0020e91:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0020e94:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0020e97:	89 10                	mov    DWORD PTR [eax],edx
c0020e99:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0020e9c:	e9 7a ff ff ff       	jmp    c0020e1b <APIC::open(int, int, void*)+0xbb>
c0020ea1:	b8 00 00 00 00       	mov    eax,0x0
c0020ea6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020ea9:	5b                   	pop    ebx
c0020eaa:	5e                   	pop    esi
c0020eab:	5f                   	pop    edi
c0020eac:	5d                   	pop    ebp
c0020ead:	c3                   	ret    

c0020eae <IOAPIC::IOAPIC()>:
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb5:	83 ec 08             	sub    esp,0x8
c0020eb8:	68 cc 64 02 c0       	push   0xc00264cc
c0020ebd:	50                   	push   eax
c0020ebe:	e8 cb d3 fe ff       	call   c000e28e <Device::Device(char const*)>
c0020ec3:	83 c4 10             	add    esp,0x10
c0020ec6:	ba f4 65 02 c0       	mov    edx,0xc00265f4
c0020ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ecf:	89 10                	mov    DWORD PTR [eax],edx
c0020ed1:	90                   	nop
c0020ed2:	83 c4 0c             	add    esp,0xc
c0020ed5:	c3                   	ret    

c0020ed6 <APIC::APIC()>:
c0020ed6:	53                   	push   ebx
c0020ed7:	83 ec 18             	sub    esp,0x18
c0020eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ede:	83 ec 08             	sub    esp,0x8
c0020ee1:	68 d4 64 02 c0       	push   0xc00264d4
c0020ee6:	50                   	push   eax
c0020ee7:	e8 1a db fe ff       	call   c000ea06 <InterruptController::InterruptController(char const*)>
c0020eec:	83 c4 10             	add    esp,0x10
c0020eef:	ba ac 65 02 c0       	mov    edx,0xc00265ac
c0020ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef8:	89 10                	mov    DWORD PTR [eax],edx
c0020efa:	a0 e0 93 02 c0       	mov    al,ds:0xc00293e0
c0020eff:	83 f0 01             	xor    eax,0x1
c0020f02:	84 c0                	test   al,al
c0020f04:	0f 84 a1 00 00 00    	je     c0020fab <APIC::APIC()+0xd5>
c0020f0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020f0f:	a0 c0 7d 02 c0       	mov    al,ds:0xc0027dc0
c0020f14:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0020f18:	0f 83 86 00 00 00    	jae    c0020fa4 <APIC::APIC()+0xce>
c0020f1e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0020f26:	83 ec 0c             	sub    esp,0xc
c0020f29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f2d:	e8 91 8a fe ff       	call   c00099c3 <malloc>
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	89 c3                	mov    ebx,eax
c0020f37:	83 ec 0c             	sub    esp,0xc
c0020f3a:	53                   	push   ebx
c0020f3b:	e8 6e ff ff ff       	call   c0020eae <IOAPIC::IOAPIC()>
c0020f40:	83 c4 10             	add    esp,0x10
c0020f43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0020f47:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0020f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f50:	89 14 85 c0 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c40],edx
c0020f57:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c0020f5c:	40                   	inc    eax
c0020f5d:	a3 a0 93 02 c0       	mov    ds:0xc00293a0,eax
c0020f62:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c0020f67:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020f6d:	83 ec 08             	sub    esp,0x8
c0020f70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f74:	50                   	push   eax
c0020f75:	e8 10 d1 fe ff       	call   c000e08a <Device::addChild(Device*)>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f83:	83 c0 08             	add    eax,0x8
c0020f86:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f88:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0020f8d:	6a 00                	push   0x0
c0020f8f:	6a 00                	push   0x0
c0020f91:	52                   	push   edx
c0020f92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020f96:	ff d0                	call   eax
c0020f98:	83 c4 10             	add    esp,0x10
c0020f9b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0020f9f:	e9 6b ff ff ff       	jmp    c0020f0f <APIC::APIC()+0x39>
c0020fa4:	c6 05 e0 93 02 c0 01 	mov    BYTE PTR ds:0xc00293e0,0x1
c0020fab:	90                   	nop
c0020fac:	83 c4 18             	add    esp,0x18
c0020faf:	5b                   	pop    ebx
c0020fb0:	c3                   	ret    
c0020fb1:	90                   	nop

c0020fb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020fb2:	55                   	push   ebp
c0020fb3:	89 e5                	mov    ebp,esp
c0020fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020fbe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020fc1:	72 1d                	jb     c0020fe0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fc6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fcf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020fd5:	01 d0                	add    eax,edx
c0020fd7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020fda:	73 04                	jae    c0020fe0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020fdc:	b0 01                	mov    al,0x1
c0020fde:	eb 02                	jmp    c0020fe2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020fe0:	b0 00                	mov    al,0x0
c0020fe2:	5d                   	pop    ebp
c0020fe3:	c3                   	ret    

c0020fe4 <IOAPIC::read(int)>:
c0020fe4:	55                   	push   ebp
c0020fe5:	89 e5                	mov    ebp,esp
c0020fe7:	83 ec 10             	sub    esp,0x10
c0020fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020fed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ff3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020ff6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020ff9:	0f b6 d0             	movzx  edx,al
c0020ffc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020fff:	89 10                	mov    DWORD PTR [eax],edx
c0021001:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021004:	83 c0 10             	add    eax,0x10
c0021007:	8b 00                	mov    eax,DWORD PTR [eax]
c0021009:	c9                   	leave  
c002100a:	c3                   	ret    
c002100b:	90                   	nop

c002100c <IOAPIC::open(int, int, void*)>:
c002100c:	55                   	push   ebp
c002100d:	89 e5                	mov    ebp,esp
c002100f:	57                   	push   edi
c0021010:	56                   	push   esi
c0021011:	53                   	push   ebx
c0021012:	83 ec 0c             	sub    esp,0xc
c0021015:	83 ec 0c             	sub    esp,0xc
c0021018:	68 ff 64 02 c0       	push   0xc00264ff
c002101d:	e8 21 bc fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c0021022:	83 c4 10             	add    esp,0x10
c0021025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021028:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002102b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021034:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002103a:	8b 14 85 00 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8200]
c0021041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021044:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002104a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002104d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021053:	8b 14 85 80 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8180]
c002105a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002105d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021066:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002106c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002106f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021075:	0f b6 f8             	movzx  edi,al
c0021078:	89 d0                	mov    eax,edx
c002107a:	ba 00 00 00 00       	mov    edx,0x0
c002107f:	89 c1                	mov    ecx,eax
c0021081:	80 e5 ff             	and    ch,0xff
c0021084:	89 cb                	mov    ebx,ecx
c0021086:	0f b6 f2             	movzx  esi,dl
c0021089:	89 d8                	mov    eax,ebx
c002108b:	89 f2                	mov    edx,esi
c002108d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021090:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021093:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021097:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002109b:	83 e0 00             	and    eax,0x0
c002109e:	09 d0                	or     eax,edx
c00210a0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00210a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00210ad:	8d 50 01             	lea    edx,[eax+0x1]
c00210b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00210b3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00210b9:	0f b6 d0             	movzx  edx,al
c00210bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210bf:	83 c2 08             	add    edx,0x8
c00210c2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00210c6:	0f b6 c9             	movzx  ecx,cl
c00210c9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00210cf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00210d3:	83 ec 08             	sub    esp,0x8
c00210d6:	6a 01                	push   0x1
c00210d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00210db:	e8 04 ff ff ff       	call   c0020fe4 <IOAPIC::read(int)>
c00210e0:	83 c4 10             	add    esp,0x10
c00210e3:	c1 f8 10             	sar    eax,0x10
c00210e6:	0f b6 c0             	movzx  eax,al
c00210e9:	8d 50 01             	lea    edx,[eax+0x1]
c00210ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210ef:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00210f5:	b8 00 00 00 00       	mov    eax,0x0
c00210fa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00210fd:	5b                   	pop    ebx
c00210fe:	5e                   	pop    esi
c00210ff:	5f                   	pop    edi
c0021100:	5d                   	pop    ebp
c0021101:	c3                   	ret    

c0021102 <IOAPIC::write(int, int)>:
c0021102:	55                   	push   ebp
c0021103:	89 e5                	mov    ebp,esp
c0021105:	83 ec 10             	sub    esp,0x10
c0021108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002110b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021111:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021117:	0f b6 d0             	movzx  edx,al
c002111a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002111d:	89 10                	mov    DWORD PTR [eax],edx
c002111f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021122:	8d 50 10             	lea    edx,[eax+0x10]
c0021125:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021128:	89 02                	mov    DWORD PTR [edx],eax
c002112a:	90                   	nop
c002112b:	c9                   	leave  
c002112c:	c3                   	ret    
c002112d:	90                   	nop

c002112e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002112e:	55                   	push   ebp
c002112f:	89 e5                	mov    ebp,esp
c0021131:	53                   	push   ebx
c0021132:	83 ec 2c             	sub    esp,0x2c
c0021135:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021138:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002113b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002113e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021141:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021144:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021147:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002114a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002114d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021150:	88 d8                	mov    al,bl
c0021152:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021155:	88 c8                	mov    al,cl
c0021157:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002115a:	88 d0                	mov    al,dl
c002115c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002115f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021163:	83 c0 08             	add    eax,0x8
c0021166:	01 c0                	add    eax,eax
c0021168:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002116b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002116f:	83 c0 08             	add    eax,0x8
c0021172:	01 c0                	add    eax,eax
c0021174:	40                   	inc    eax
c0021175:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021178:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002117b:	50                   	push   eax
c002117c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002117f:	e8 60 fe ff ff       	call   c0020fe4 <IOAPIC::read(int)>
c0021184:	83 c4 08             	add    esp,0x8
c0021187:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002118a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021191:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021194:	c1 e0 18             	shl    eax,0x18
c0021197:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002119a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002119d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00211a0:	52                   	push   edx
c00211a1:	50                   	push   eax
c00211a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211a5:	e8 58 ff ff ff       	call   c0021102 <IOAPIC::write(int, int)>
c00211aa:	83 c4 0c             	add    esp,0xc
c00211ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00211b0:	50                   	push   eax
c00211b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211b4:	e8 2b fe ff ff       	call   c0020fe4 <IOAPIC::read(int)>
c00211b9:	83 c4 08             	add    esp,0x8
c00211bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00211bf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00211c6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00211cd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00211d4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00211d8:	74 09                	je     c00211e3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00211da:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00211e1:	eb 07                	jmp    c00211ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00211e3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00211ea:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00211ee:	74 09                	je     c00211f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00211f0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00211f7:	eb 07                	jmp    c0021200 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00211f9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021200:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021207:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002120b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002120e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021211:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021214:	52                   	push   edx
c0021215:	50                   	push   eax
c0021216:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021219:	e8 e4 fe ff ff       	call   c0021102 <IOAPIC::write(int, int)>
c002121e:	83 c4 0c             	add    esp,0xc
c0021221:	90                   	nop
c0021222:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021225:	c9                   	leave  
c0021226:	c3                   	ret    
c0021227:	90                   	nop

c0021228 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021228:	55                   	push   ebp
c0021229:	89 e5                	mov    ebp,esp
c002122b:	57                   	push   edi
c002122c:	56                   	push   esi
c002122d:	53                   	push   ebx
c002122e:	83 ec 2c             	sub    esp,0x2c
c0021231:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021234:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021237:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002123b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002123f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021243:	74 5a                	je     c002129f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021245:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021249:	7f 44                	jg     c002128f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002124b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002124e:	05 a0 6b 02 c0       	add    eax,0xc0026ba0
c0021253:	8a 00                	mov    al,BYTE PTR [eax]
c0021255:	0f b6 c0             	movzx  eax,al
c0021258:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002125b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002125e:	66 8b 84 00 a0 7d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd8260]
c0021266:	0f b7 c0             	movzx  eax,ax
c0021269:	83 e0 02             	and    eax,0x2
c002126c:	85 c0                	test   eax,eax
c002126e:	74 04                	je     c0021274 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021270:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021274:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021277:	66 8b 84 00 a0 7d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd8260]
c002127f:	0f b7 c0             	movzx  eax,ax
c0021282:	83 e0 08             	and    eax,0x8
c0021285:	85 c0                	test   eax,eax
c0021287:	74 16                	je     c002129f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021289:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002128d:	eb 10                	jmp    c002129f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002128f:	83 ec 0c             	sub    esp,0xc
c0021292:	68 10 65 02 c0       	push   0xc0026510
c0021297:	e8 c7 34 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00212a3:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c00212a8:	83 ec 08             	sub    esp,0x8
c00212ab:	50                   	push   eax
c00212ac:	68 48 65 02 c0       	push   0xc0026548
c00212b1:	e8 8d b9 fe ff       	call   c000cc43 <Dbg::kprintf(char const*, ...)>
c00212b6:	83 c4 10             	add    esp,0x10
c00212b9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00212c0:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c00212c5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00212c8:	7d 67                	jge    c0021331 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00212ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00212cd:	8b 04 85 c0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c40]
c00212d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00212d7:	83 ec 08             	sub    esp,0x8
c00212da:	52                   	push   edx
c00212db:	50                   	push   eax
c00212dc:	e8 d1 fc ff ff       	call   c0020fb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00212e1:	83 c4 10             	add    esp,0x10
c00212e4:	84 c0                	test   al,al
c00212e6:	74 44                	je     c002132c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00212e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00212eb:	8b 1c 85 c0 93 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6c40]
c00212f2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00212f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00212f9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00212fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021300:	83 c0 20             	add    eax,0x20
c0021303:	0f b6 f0             	movzx  esi,al
c0021306:	b8 00 00 00 00       	mov    eax,0x0
c002130b:	99                   	cdq    
c002130c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002130f:	0f b6 c9             	movzx  ecx,cl
c0021312:	83 ec 04             	sub    esp,0x4
c0021315:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021318:	57                   	push   edi
c0021319:	56                   	push   esi
c002131a:	52                   	push   edx
c002131b:	50                   	push   eax
c002131c:	51                   	push   ecx
c002131d:	53                   	push   ebx
c002131e:	e8 0b fe ff ff       	call   c002112e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021323:	83 c4 20             	add    esp,0x20
c0021326:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002132a:	eb 05                	jmp    c0021331 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002132c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002132f:	eb 8f                	jmp    c00212c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021331:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021334:	83 f0 01             	xor    eax,0x1
c0021337:	84 c0                	test   al,al
c0021339:	74 10                	je     c002134b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002133b:	83 ec 0c             	sub    esp,0xc
c002133e:	68 5f 65 02 c0       	push   0xc002655f
c0021343:	e8 1b 34 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0021348:	83 c4 10             	add    esp,0x10
c002134b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002134f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021356:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002135a:	7f 65                	jg     c00213c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002135c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002135f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021362:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021369:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002136c:	01 ca                	add    edx,ecx
c002136e:	83 c2 54             	add    edx,0x54
c0021371:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021375:	85 c0                	test   eax,eax
c0021377:	75 43                	jne    c00213bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002137c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002137f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021386:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021389:	01 ca                	add    edx,ecx
c002138b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002138e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021391:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021398:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002139b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00213a2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00213a5:	01 ca                	add    edx,ecx
c00213a7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00213ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00213b0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00213b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00213b7:	83 e8 20             	sub    eax,0x20
c00213ba:	eb 1a                	jmp    c00213d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00213bc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00213bf:	eb 95                	jmp    c0021356 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00213c1:	83 ec 0c             	sub    esp,0xc
c00213c4:	68 6c 65 02 c0       	push   0xc002656c
c00213c9:	e8 95 33 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00213ce:	83 c4 10             	add    esp,0x10
c00213d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213d6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00213d9:	5b                   	pop    ebx
c00213da:	5e                   	pop    esi
c00213db:	5f                   	pop    edi
c00213dc:	5d                   	pop    ebp
c00213dd:	c3                   	ret    

c00213de <PIC::disable()>:
c00213de:	55                   	push   ebp
c00213df:	89 e5                	mov    ebp,esp
c00213e1:	83 ec 10             	sub    esp,0x10
c00213e4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00213ea:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00213ee:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00213f1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00213f5:	ee                   	out    dx,al
c00213f6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00213fc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021400:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021403:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021407:	ee                   	out    dx,al
c0021408:	90                   	nop
c0021409:	c9                   	leave  
c002140a:	c3                   	ret    
c002140b:	90                   	nop

c002140c <PIC::close(int, int, void*)>:
c002140c:	55                   	push   ebp
c002140d:	89 e5                	mov    ebp,esp
c002140f:	83 ec 08             	sub    esp,0x8
c0021412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021415:	8b 00                	mov    eax,DWORD PTR [eax]
c0021417:	83 c0 3c             	add    eax,0x3c
c002141a:	8b 00                	mov    eax,DWORD PTR [eax]
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021422:	ff d0                	call   eax
c0021424:	83 c4 10             	add    esp,0x10
c0021427:	b8 00 00 00 00       	mov    eax,0x0
c002142c:	c9                   	leave  
c002142d:	c3                   	ret    

c002142e <PIC::PIC()>:
c002142e:	83 ec 0c             	sub    esp,0xc
c0021431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021435:	83 ec 08             	sub    esp,0x8
c0021438:	68 18 66 02 c0       	push   0xc0026618
c002143d:	50                   	push   eax
c002143e:	e8 c3 d5 fe ff       	call   c000ea06 <InterruptController::InterruptController(char const*)>
c0021443:	83 c4 10             	add    esp,0x10
c0021446:	ba 44 66 02 c0       	mov    edx,0xc0026644
c002144b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144f:	89 10                	mov    DWORD PTR [eax],edx
c0021451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021455:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002145b:	0f b6 d0             	movzx  edx,al
c002145e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021462:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021473:	0f b6 d0             	movzx  edx,al
c0021476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002147f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021483:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021489:	8d 50 01             	lea    edx,[eax+0x1]
c002148c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021490:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021496:	0f b6 d0             	movzx  edx,al
c0021499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00214a1:	83 e1 3f             	and    ecx,0x3f
c00214a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00214a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214b2:	0f b6 d0             	movzx  edx,al
c00214b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00214c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214ca:	0f b6 d0             	movzx  edx,al
c00214cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00214d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214e0:	8d 50 01             	lea    edx,[eax+0x1]
c00214e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00214e7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00214ed:	0f b6 d0             	movzx  edx,al
c00214f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00214f8:	83 e1 3f             	and    ecx,0x3f
c00214fb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00214ff:	90                   	nop
c0021500:	83 c4 0c             	add    esp,0xc
c0021503:	c3                   	ret    

c0021504 <PIC::ioWait()>:
c0021504:	eb 00                	jmp    c0021506 <PIC::ioWait()+0x2>
c0021506:	eb 00                	jmp    c0021508 <PIC::ioWait()+0x4>
c0021508:	90                   	nop
c0021509:	c3                   	ret    

c002150a <PIC::getIRQReg(int)>:
c002150a:	55                   	push   ebp
c002150b:	89 e5                	mov    ebp,esp
c002150d:	83 ec 10             	sub    esp,0x10
c0021510:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021513:	0f b6 c0             	movzx  eax,al
c0021516:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002151c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002151f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021522:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021526:	ee                   	out    dx,al
c0021527:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002152a:	0f b6 c0             	movzx  eax,al
c002152d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021533:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021536:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021539:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002153d:	ee                   	out    dx,al
c002153e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021544:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021548:	89 c2                	mov    edx,eax
c002154a:	ec                   	in     al,dx
c002154b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002154e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021551:	0f b6 c0             	movzx  eax,al
c0021554:	c1 e0 08             	shl    eax,0x8
c0021557:	89 c1                	mov    ecx,eax
c0021559:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002155f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021563:	89 c2                	mov    edx,eax
c0021565:	ec                   	in     al,dx
c0021566:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021569:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002156c:	0f b6 c0             	movzx  eax,al
c002156f:	09 c8                	or     eax,ecx
c0021571:	c9                   	leave  
c0021572:	c3                   	ret    
c0021573:	90                   	nop

c0021574 <PIC::eoi(unsigned char)>:
c0021574:	55                   	push   ebp
c0021575:	89 e5                	mov    ebp,esp
c0021577:	83 ec 14             	sub    esp,0x14
c002157a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002157d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021580:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021584:	75 1e                	jne    c00215a4 <PIC::eoi(unsigned char)+0x30>
c0021586:	6a 0b                	push   0xb
c0021588:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002158b:	e8 7a ff ff ff       	call   c002150a <PIC::getIRQReg(int)>
c0021590:	83 c4 08             	add    esp,0x8
c0021593:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021597:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002159b:	25 80 00 00 00       	and    eax,0x80
c00215a0:	85 c0                	test   eax,eax
c00215a2:	74 5f                	je     c0021603 <PIC::eoi(unsigned char)+0x8f>
c00215a4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00215a8:	75 2d                	jne    c00215d7 <PIC::eoi(unsigned char)+0x63>
c00215aa:	6a 0b                	push   0xb
c00215ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215af:	e8 56 ff ff ff       	call   c002150a <PIC::getIRQReg(int)>
c00215b4:	83 c4 08             	add    esp,0x8
c00215b7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00215bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215be:	66 85 c0             	test   ax,ax
c00215c1:	78 14                	js     c00215d7 <PIC::eoi(unsigned char)+0x63>
c00215c3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00215c9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00215cd:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00215d0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00215d4:	ee                   	out    dx,al
c00215d5:	eb 2d                	jmp    c0021604 <PIC::eoi(unsigned char)+0x90>
c00215d7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00215db:	76 12                	jbe    c00215ef <PIC::eoi(unsigned char)+0x7b>
c00215dd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00215e3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00215e7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00215ea:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00215ee:	ee                   	out    dx,al
c00215ef:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00215f5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00215f9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00215fc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021600:	ee                   	out    dx,al
c0021601:	eb 01                	jmp    c0021604 <PIC::eoi(unsigned char)+0x90>
c0021603:	90                   	nop
c0021604:	c9                   	leave  
c0021605:	c3                   	ret    

c0021606 <PIC::remap()>:
c0021606:	55                   	push   ebp
c0021607:	89 e5                	mov    ebp,esp
c0021609:	83 ec 48             	sub    esp,0x48
c002160c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021613:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002161a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021620:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021623:	89 c2                	mov    edx,eax
c0021625:	ec                   	in     al,dx
c0021626:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021629:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002162c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002162f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021635:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021638:	89 c2                	mov    edx,eax
c002163a:	ec                   	in     al,dx
c002163b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002163e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021641:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021644:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002164a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002164e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021651:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021654:	ee                   	out    dx,al
c0021655:	83 ec 0c             	sub    esp,0xc
c0021658:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002165b:	e8 a4 fe ff ff       	call   c0021504 <PIC::ioWait()>
c0021660:	83 c4 10             	add    esp,0x10
c0021663:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021669:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002166d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021670:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021673:	ee                   	out    dx,al
c0021674:	83 ec 0c             	sub    esp,0xc
c0021677:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002167a:	e8 85 fe ff ff       	call   c0021504 <PIC::ioWait()>
c002167f:	83 c4 10             	add    esp,0x10
c0021682:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021685:	0f b6 c0             	movzx  eax,al
c0021688:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002168e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021691:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021694:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021697:	ee                   	out    dx,al
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002169e:	e8 61 fe ff ff       	call   c0021504 <PIC::ioWait()>
c00216a3:	83 c4 10             	add    esp,0x10
c00216a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00216a9:	0f b6 c0             	movzx  eax,al
c00216ac:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00216b2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00216b5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00216b8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00216bb:	ee                   	out    dx,al
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216c2:	e8 3d fe ff ff       	call   c0021504 <PIC::ioWait()>
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00216d0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00216d4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00216d7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00216da:	ee                   	out    dx,al
c00216db:	83 ec 0c             	sub    esp,0xc
c00216de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216e1:	e8 1e fe ff ff       	call   c0021504 <PIC::ioWait()>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00216ef:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00216f3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00216f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00216f9:	ee                   	out    dx,al
c00216fa:	83 ec 0c             	sub    esp,0xc
c00216fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021700:	e8 ff fd ff ff       	call   c0021504 <PIC::ioWait()>
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002170e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021712:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021715:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021718:	ee                   	out    dx,al
c0021719:	83 ec 0c             	sub    esp,0xc
c002171c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002171f:	e8 e0 fd ff ff       	call   c0021504 <PIC::ioWait()>
c0021724:	83 c4 10             	add    esp,0x10
c0021727:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002172d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021731:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021734:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021737:	ee                   	out    dx,al
c0021738:	83 ec 0c             	sub    esp,0xc
c002173b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002173e:	e8 c1 fd ff ff       	call   c0021504 <PIC::ioWait()>
c0021743:	83 c4 10             	add    esp,0x10
c0021746:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002174a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021750:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021753:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021756:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021759:	ee                   	out    dx,al
c002175a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002175e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021764:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021767:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002176a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002176d:	ee                   	out    dx,al
c002176e:	90                   	nop
c002176f:	c9                   	leave  
c0021770:	c3                   	ret    
c0021771:	90                   	nop

c0021772 <PIC::open(int, int, void*)>:
c0021772:	55                   	push   ebp
c0021773:	89 e5                	mov    ebp,esp
c0021775:	83 ec 18             	sub    esp,0x18
c0021778:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002177e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021782:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021785:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021789:	ee                   	out    dx,al
c002178a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021790:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021794:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021797:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002179b:	ee                   	out    dx,al
c002179c:	83 ec 0c             	sub    esp,0xc
c002179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217a2:	e8 5f fe ff ff       	call   c0021606 <PIC::remap()>
c00217a7:	83 c4 10             	add    esp,0x10
c00217aa:	b8 00 00 00 00       	mov    eax,0x0
c00217af:	c9                   	leave  
c00217b0:	c3                   	ret    
c00217b1:	66 90                	xchg   ax,ax
c00217b3:	90                   	nop

c00217b4 <APICTimer::close(int, int, void*)>:
c00217b4:	b8 00 00 00 00       	mov    eax,0x0
c00217b9:	c3                   	ret    
c00217ba:	66 90                	xchg   ax,ax

c00217bc <apicTimerHandler(regs*, void*)>:
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00217c5:	b8 10 27 00 00       	mov    eax,0x2710
c00217ca:	ba 00 00 00 00       	mov    edx,0x0
c00217cf:	f7 f1                	div    ecx
c00217d1:	83 ec 0c             	sub    esp,0xc
c00217d4:	50                   	push   eax
c00217d5:	e8 37 f1 fe ff       	call   c0010911 <timerHandler(unsigned int)>
c00217da:	83 c4 10             	add    esp,0x10
c00217dd:	90                   	nop
c00217de:	83 c4 0c             	add    esp,0xc
c00217e1:	c3                   	ret    
c00217e2:	66 90                	xchg   ax,ax

c00217e4 <APICTimer::write(int)>:
c00217e4:	83 ec 1c             	sub    esp,0x1c
c00217e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00217ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00217f5:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00217fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021800:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021806:	83 ec 0c             	sub    esp,0xc
c0021809:	50                   	push   eax
c002180a:	e8 e1 f4 ff ff       	call   c0020cf0 <APIC::getBase()>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021816:	a1 cc 7a 02 c0       	mov    eax,ds:0xc0027acc
c002181b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002181f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021823:	05 e0 03 00 00       	add    eax,0x3e0
c0021828:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002182e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021832:	05 80 03 00 00       	add    eax,0x380
c0021837:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002183d:	fb                   	sti    
c002183e:	66 90                	xchg   ax,ax
c0021840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021844:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002184a:	a1 cc 7a 02 c0       	mov    eax,ds:0xc0027acc
c002184f:	39 c2                	cmp    edx,eax
c0021851:	76 05                	jbe    c0021858 <APICTimer::write(int)+0x74>
c0021853:	eb eb                	jmp    c0021840 <APICTimer::write(int)+0x5c>
c0021855:	8d 76 00             	lea    esi,[esi+0x0]
c0021858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002185c:	05 20 03 00 00       	add    eax,0x320
c0021861:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002186b:	05 90 03 00 00       	add    eax,0x390
c0021870:	8b 00                	mov    eax,DWORD PTR [eax]
c0021872:	f7 d0                	not    eax
c0021874:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021878:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002187c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021880:	ba 00 00 00 00       	mov    edx,0x0
c0021885:	f7 f1                	div    ecx
c0021887:	89 04 24             	mov    DWORD PTR [esp],eax
c002188a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002188e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021894:	0d 00 00 02 00       	or     eax,0x20000
c0021899:	89 c2                	mov    edx,eax
c002189b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002189f:	05 20 03 00 00       	add    eax,0x320
c00218a4:	89 10                	mov    DWORD PTR [eax],edx
c00218a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218aa:	05 e0 03 00 00       	add    eax,0x3e0
c00218af:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00218b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218b9:	05 80 03 00 00       	add    eax,0x380
c00218be:	89 c2                	mov    edx,eax
c00218c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218c3:	89 02                	mov    DWORD PTR [edx],eax
c00218c5:	90                   	nop
c00218c6:	83 c4 1c             	add    esp,0x1c
c00218c9:	c3                   	ret    
c00218ca:	66 90                	xchg   ax,ax

c00218cc <APICTimer::open(int, int, void*)>:
c00218cc:	57                   	push   edi
c00218cd:	56                   	push   esi
c00218ce:	53                   	push   ebx
c00218cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00218d5:	83 c0 24             	add    eax,0x24
c00218d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00218da:	83 ec 08             	sub    esp,0x8
c00218dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e5:	ff d0                	call   eax
c00218e7:	83 c4 10             	add    esp,0x10
c00218ea:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c00218ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00218f5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00218fb:	83 ec 0c             	sub    esp,0xc
c00218fe:	50                   	push   eax
c00218ff:	e8 ec f3 ff ff       	call   c0020cf0 <APIC::getBase()>
c0021904:	83 c4 10             	add    esp,0x10
c0021907:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002190d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021911:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021917:	0f b6 f8             	movzx  edi,al
c002191a:	89 d0                	mov    eax,edx
c002191c:	ba 00 00 00 00       	mov    edx,0x0
c0021921:	89 c1                	mov    ecx,eax
c0021923:	80 e5 ff             	and    ch,0xff
c0021926:	89 cb                	mov    ebx,ecx
c0021928:	0f b6 f2             	movzx  esi,dl
c002192b:	89 d8                	mov    eax,ebx
c002192d:	89 f2                	mov    edx,esi
c002192f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021933:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021936:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002193a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002193e:	83 e0 00             	and    eax,0x0
c0021941:	09 d0                	or     eax,edx
c0021943:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021951:	8d 50 01             	lea    edx,[eax+0x1]
c0021954:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021958:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002195e:	0f b6 d0             	movzx  edx,al
c0021961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021965:	83 c2 08             	add    edx,0x8
c0021968:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002196c:	0f b6 c9             	movzx  ecx,cl
c002196f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021975:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021981:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002198f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021995:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021999:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002199f:	83 ec 0c             	sub    esp,0xc
c00219a2:	51                   	push   ecx
c00219a3:	6a 01                	push   0x1
c00219a5:	68 bc 17 02 c0       	push   0xc00217bc
c00219aa:	52                   	push   edx
c00219ab:	50                   	push   eax
c00219ac:	e8 51 c6 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00219b1:	83 c4 20             	add    esp,0x20
c00219b4:	89 c2                	mov    edx,eax
c00219b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ba:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00219c0:	b8 00 00 00 00       	mov    eax,0x0
c00219c5:	5b                   	pop    ebx
c00219c6:	5e                   	pop    esi
c00219c7:	5f                   	pop    edi
c00219c8:	c3                   	ret    
c00219c9:	90                   	nop
c00219ca:	66 90                	xchg   ax,ax

c00219cc <APICTimer::APICTimer()>:
c00219cc:	83 ec 0c             	sub    esp,0xc
c00219cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d3:	83 ec 08             	sub    esp,0x8
c00219d6:	68 84 66 02 c0       	push   0xc0026684
c00219db:	50                   	push   eax
c00219dc:	e8 9f ee fe ff       	call   c0010880 <Timer::Timer(char const*)>
c00219e1:	83 c4 10             	add    esp,0x10
c00219e4:	ba 98 66 02 c0       	mov    edx,0xc0026698
c00219e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ed:	89 10                	mov    DWORD PTR [eax],edx
c00219ef:	90                   	nop
c00219f0:	83 c4 0c             	add    esp,0xc
c00219f3:	c3                   	ret    

c00219f4 <PIT::write(int)>:
c00219f4:	83 ec 10             	sub    esp,0x10
c00219f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00219ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021a05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a09:	a3 e4 93 02 c0       	mov    ds:0xc00293e4,eax
c0021a0e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021a13:	99                   	cdq    
c0021a14:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021a18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a1c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021a23:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021a28:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021a2c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021a31:	ee                   	out    dx,al
c0021a32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a36:	0f b6 c0             	movzx  eax,al
c0021a39:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021a40:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021a44:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021a48:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021a4d:	ee                   	out    dx,al
c0021a4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a52:	c1 f8 08             	sar    eax,0x8
c0021a55:	0f b6 c0             	movzx  eax,al
c0021a58:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021a5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021a63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021a67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021a6c:	ee                   	out    dx,al
c0021a6d:	90                   	nop
c0021a6e:	83 c4 10             	add    esp,0x10
c0021a71:	c3                   	ret    
c0021a72:	66 90                	xchg   ax,ax

c0021a74 <pitHandler(regs*, void*)>:
c0021a74:	83 ec 0c             	sub    esp,0xc
c0021a77:	8b 0d e4 93 02 c0    	mov    ecx,DWORD PTR ds:0xc00293e4
c0021a7d:	b8 a0 86 01 00       	mov    eax,0x186a0
c0021a82:	99                   	cdq    
c0021a83:	f7 f9                	idiv   ecx
c0021a85:	83 ec 0c             	sub    esp,0xc
c0021a88:	50                   	push   eax
c0021a89:	e8 83 ee fe ff       	call   c0010911 <timerHandler(unsigned int)>
c0021a8e:	83 c4 10             	add    esp,0x10
c0021a91:	90                   	nop
c0021a92:	83 c4 0c             	add    esp,0xc
c0021a95:	c3                   	ret    
c0021a96:	66 90                	xchg   ax,ax

c0021a98 <PIT::open(int, int, void*)>:
c0021a98:	83 ec 0c             	sub    esp,0xc
c0021a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aa1:	83 c0 24             	add    eax,0x24
c0021aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aa6:	83 ec 08             	sub    esp,0x8
c0021aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ab1:	ff d0                	call   eax
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aba:	83 ec 0c             	sub    esp,0xc
c0021abd:	6a 00                	push   0x0
c0021abf:	6a 01                	push   0x1
c0021ac1:	68 74 1a 02 c0       	push   0xc0021a74
c0021ac6:	6a 00                	push   0x0
c0021ac8:	50                   	push   eax
c0021ac9:	e8 34 c5 fe ff       	call   c000e002 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021ace:	83 c4 20             	add    esp,0x20
c0021ad1:	89 c2                	mov    edx,eax
c0021ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021add:	b8 00 00 00 00       	mov    eax,0x0
c0021ae2:	83 c4 0c             	add    esp,0xc
c0021ae5:	c3                   	ret    
c0021ae6:	66 90                	xchg   ax,ax

c0021ae8 <PIT::close(int, int, void*)>:
c0021ae8:	83 ec 0c             	sub    esp,0xc
c0021aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afd:	6a 01                	push   0x1
c0021aff:	68 74 1a 02 c0       	push   0xc0021a74
c0021b04:	6a 00                	push   0x0
c0021b06:	50                   	push   eax
c0021b07:	e8 40 c5 fe ff       	call   c000e04c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021b0c:	83 c4 10             	add    esp,0x10
c0021b0f:	b8 00 00 00 00       	mov    eax,0x0
c0021b14:	83 c4 0c             	add    esp,0xc
c0021b17:	c3                   	ret    

c0021b18 <PIT::PIT()>:
c0021b18:	83 ec 0c             	sub    esp,0xc
c0021b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1f:	83 ec 08             	sub    esp,0x8
c0021b22:	68 c0 66 02 c0       	push   0xc00266c0
c0021b27:	50                   	push   eax
c0021b28:	e8 53 ed fe ff       	call   c0010880 <Timer::Timer(char const*)>
c0021b2d:	83 c4 10             	add    esp,0x10
c0021b30:	ba e8 66 02 c0       	mov    edx,0xc00266e8
c0021b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b39:	89 10                	mov    DWORD PTR [eax],edx
c0021b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b45:	0f b6 d0             	movzx  edx,al
c0021b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b5d:	0f b6 d0             	movzx  edx,al
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b73:	8d 50 01             	lea    edx,[eax+0x1]
c0021b76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b7a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021b80:	0f b6 d0             	movzx  edx,al
c0021b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b87:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021b8b:	83 e1 3f             	and    ecx,0x3f
c0021b8e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021b92:	90                   	nop
c0021b93:	83 c4 0c             	add    esp,0xc
c0021b96:	c3                   	ret    
c0021b97:	66 90                	xchg   ax,ax
c0021b99:	66 90                	xchg   ax,ax
c0021b9b:	66 90                	xchg   ax,ax
c0021b9d:	66 90                	xchg   ax,ax
c0021b9f:	90                   	nop

c0021ba0 <avxDetect>:
c0021ba0:	b8 00 00 00 00       	mov    eax,0x0
c0021ba5:	c3                   	ret    

c0021ba6 <avxSave>:
c0021ba6:	c3                   	ret    

c0021ba7 <avxLoad>:
c0021ba7:	c3                   	ret    

c0021ba8 <avxInit>:
c0021ba8:	c3                   	ret    

c0021ba9 <avxClose>:
c0021ba9:	c3                   	ret    

c0021baa <wouldSheSayYes>:
c0021baa:	c3                   	ret    
c0021bab:	49                   	dec    ecx
c0021bac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0021bb0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0021bb4:	75 20                	jne    c0021bd6 <sseDetect.noSSE+0x1>
c0021bb6:	4e                   	dec    esi
c0021bb7:	79 61                	jns    c0021c1a <x87Detect+0x14>
c0021bb9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0021bbe:	66 90                	xchg   ax,ax

c0021bc0 <absolutelyNoChanceInHell>:
c0021bc0:	b8 01 00 00 00       	mov    eax,0x1
c0021bc5:	0f a2                	cpuid  
c0021bc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021bcd:	74 06                	je     c0021bd5 <sseDetect.noSSE>
c0021bcf:	b8 01 00 00 00       	mov    eax,0x1
c0021bd4:	c3                   	ret    

c0021bd5 <sseDetect.noSSE>:
c0021bd5:	31 c0                	xor    eax,eax
c0021bd7:	c3                   	ret    

c0021bd8 <sseSave>:
c0021bd8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0021bdd:	c3                   	ret    

c0021bde <sseLoad>:
c0021bde:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0021be3:	c3                   	ret    

c0021be4 <sseInit>:
c0021be4:	e8 49 00 00 00       	call   c0021c32 <x87Init>
c0021be9:	0f 20 e0             	mov    eax,cr4
c0021bec:	66 0d 00 06          	or     ax,0x600
c0021bf0:	0f 22 e0             	mov    cr4,eax
c0021bf3:	c3                   	ret    

c0021bf4 <sseClose>:
c0021bf4:	c3                   	ret    
c0021bf5:	66 90                	xchg   ax,ax
c0021bf7:	66 90                	xchg   ax,ax
c0021bf9:	66 90                	xchg   ax,ax
c0021bfb:	66 90                	xchg   ax,ax
c0021bfd:	66 90                	xchg   ax,ax
c0021bff:	90                   	nop

c0021c00 <value_37F>:
c0021c00:	7f 03                	jg     c0021c05 <value_37A+0x1>

c0021c02 <value_37E>:
c0021c02:	7e 03                	jle    c0021c07 <x87Detect+0x1>

c0021c04 <value_37A>:
c0021c04:	7a 03                	jp     c0021c09 <x87Detect+0x3>

c0021c06 <x87Detect>:
c0021c06:	b8 01 00 00 00       	mov    eax,0x1
c0021c0b:	0f a2                	cpuid  
c0021c0d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021c13:	74 06                	je     c0021c1b <x87Detect.nox87>
c0021c15:	b8 01 00 00 00       	mov    eax,0x1
c0021c1a:	c3                   	ret    

c0021c1b <x87Detect.nox87>:
c0021c1b:	b8 00 00 00 00       	mov    eax,0x0
c0021c20:	c3                   	ret    

c0021c21 <x87Save>:
c0021c21:	55                   	push   ebp
c0021c22:	89 e5                	mov    ebp,esp
c0021c24:	9b dd 75 08          	fsave  [ebp+0x8]
c0021c28:	c9                   	leave  
c0021c29:	c3                   	ret    

c0021c2a <x87Load>:
c0021c2a:	55                   	push   ebp
c0021c2b:	89 e5                	mov    ebp,esp
c0021c2d:	dd 65 08             	frstor [ebp+0x8]
c0021c30:	c9                   	leave  
c0021c31:	c3                   	ret    

c0021c32 <x87Init>:
c0021c32:	9b db e3             	finit  
c0021c35:	0f 20 c0             	mov    eax,cr0
c0021c38:	66 25 fb ff          	and    ax,0xfffb
c0021c3c:	66 0d 22 00          	or     ax,0x22
c0021c40:	0f 22 c0             	mov    cr0,eax
c0021c43:	0f 06                	clts   
c0021c45:	d9 2d 04 1c 02 c0    	fldcw  WORD PTR ds:0xc0021c04
c0021c4b:	c3                   	ret    

c0021c4c <x87Close>:
c0021c4c:	c3                   	ret    
c0021c4d:	66 90                	xchg   ax,ax
c0021c4f:	90                   	nop

c0021c50 <__do_global_ctors_aux>:
c0021c50:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c0021c55:	83 f8 ff             	cmp    eax,0xffffffff
c0021c58:	74 1a                	je     c0021c74 <__do_global_ctors_aux+0x24>
c0021c5a:	55                   	push   ebp
c0021c5b:	89 e5                	mov    ebp,esp
c0021c5d:	53                   	push   ebx
c0021c5e:	52                   	push   edx
c0021c5f:	bb ec 2d 02 c0       	mov    ebx,0xc0022dec
c0021c64:	ff d0                	call   eax
c0021c66:	83 eb 04             	sub    ebx,0x4
c0021c69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021c6b:	83 f8 ff             	cmp    eax,0xffffffff
c0021c6e:	75 f4                	jne    c0021c64 <__do_global_ctors_aux+0x14>
c0021c70:	58                   	pop    eax
c0021c71:	5b                   	pop    ebx
c0021c72:	5d                   	pop    ebp
c0021c73:	c3                   	ret    
c0021c74:	c3                   	ret    
c0021c75:	66 90                	xchg   ax,ax
c0021c77:	90                   	nop

c0021c78 <__divdi3>:
c0021c78:	55                   	push   ebp
c0021c79:	57                   	push   edi
c0021c7a:	56                   	push   esi
c0021c7b:	53                   	push   ebx
c0021c7c:	83 ec 1c             	sub    esp,0x1c
c0021c7f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021c83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021c87:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021c8a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021c8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021c92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c96:	85 db                	test   ebx,ebx
c0021c98:	0f 88 8e 00 00 00    	js     c0021d2c <__divdi3+0xb4>
c0021c9e:	89 dd                	mov    ebp,ebx
c0021ca0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021ca8:	89 d3                	mov    ebx,edx
c0021caa:	85 d2                	test   edx,edx
c0021cac:	79 0d                	jns    c0021cbb <__divdi3+0x43>
c0021cae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021cb2:	f7 d8                	neg    eax
c0021cb4:	83 d2 00             	adc    edx,0x0
c0021cb7:	f7 da                	neg    edx
c0021cb9:	89 d3                	mov    ebx,edx
c0021cbb:	89 c7                	mov    edi,eax
c0021cbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021cc0:	85 db                	test   ebx,ebx
c0021cc2:	75 48                	jne    c0021d0c <__divdi3+0x94>
c0021cc4:	39 ef                	cmp    edi,ebp
c0021cc6:	76 24                	jbe    c0021cec <__divdi3+0x74>
c0021cc8:	89 ea                	mov    edx,ebp
c0021cca:	f7 f7                	div    edi
c0021ccc:	89 c1                	mov    ecx,eax
c0021cce:	31 f6                	xor    esi,esi
c0021cd0:	89 c8                	mov    eax,ecx
c0021cd2:	89 f2                	mov    edx,esi
c0021cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021cd8:	85 c9                	test   ecx,ecx
c0021cda:	74 07                	je     c0021ce3 <__divdi3+0x6b>
c0021cdc:	f7 d8                	neg    eax
c0021cde:	83 d2 00             	adc    edx,0x0
c0021ce1:	f7 da                	neg    edx
c0021ce3:	83 c4 1c             	add    esp,0x1c
c0021ce6:	5b                   	pop    ebx
c0021ce7:	5e                   	pop    esi
c0021ce8:	5f                   	pop    edi
c0021ce9:	5d                   	pop    ebp
c0021cea:	c3                   	ret    
c0021ceb:	90                   	nop
c0021cec:	85 ff                	test   edi,edi
c0021cee:	75 0b                	jne    c0021cfb <__divdi3+0x83>
c0021cf0:	b8 01 00 00 00       	mov    eax,0x1
c0021cf5:	31 d2                	xor    edx,edx
c0021cf7:	f7 f3                	div    ebx
c0021cf9:	89 c7                	mov    edi,eax
c0021cfb:	31 d2                	xor    edx,edx
c0021cfd:	89 e8                	mov    eax,ebp
c0021cff:	f7 f7                	div    edi
c0021d01:	89 c6                	mov    esi,eax
c0021d03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021d06:	f7 f7                	div    edi
c0021d08:	89 c1                	mov    ecx,eax
c0021d0a:	eb c4                	jmp    c0021cd0 <__divdi3+0x58>
c0021d0c:	39 eb                	cmp    ebx,ebp
c0021d0e:	77 3c                	ja     c0021d4c <__divdi3+0xd4>
c0021d10:	0f bd f3             	bsr    esi,ebx
c0021d13:	83 f6 1f             	xor    esi,0x1f
c0021d16:	75 40                	jne    c0021d58 <__divdi3+0xe0>
c0021d18:	39 eb                	cmp    ebx,ebp
c0021d1a:	72 09                	jb     c0021d25 <__divdi3+0xad>
c0021d1c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021d1f:	0f 87 97 00 00 00    	ja     c0021dbc <__divdi3+0x144>
c0021d25:	b9 01 00 00 00       	mov    ecx,0x1
c0021d2a:	eb a4                	jmp    c0021cd0 <__divdi3+0x58>
c0021d2c:	f7 d9                	neg    ecx
c0021d2e:	83 d3 00             	adc    ebx,0x0
c0021d31:	f7 db                	neg    ebx
c0021d33:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021d36:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021d3a:	89 dd                	mov    ebp,ebx
c0021d3c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021d44:	e9 5f ff ff ff       	jmp    c0021ca8 <__divdi3+0x30>
c0021d49:	8d 76 00             	lea    esi,[esi+0x0]
c0021d4c:	31 f6                	xor    esi,esi
c0021d4e:	31 c9                	xor    ecx,ecx
c0021d50:	e9 7b ff ff ff       	jmp    c0021cd0 <__divdi3+0x58>
c0021d55:	8d 76 00             	lea    esi,[esi+0x0]
c0021d58:	b8 20 00 00 00       	mov    eax,0x20
c0021d5d:	29 f0                	sub    eax,esi
c0021d5f:	89 f1                	mov    ecx,esi
c0021d61:	d3 e3                	shl    ebx,cl
c0021d63:	89 fa                	mov    edx,edi
c0021d65:	88 c1                	mov    cl,al
c0021d67:	d3 ea                	shr    edx,cl
c0021d69:	09 da                	or     edx,ebx
c0021d6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021d6f:	89 f1                	mov    ecx,esi
c0021d71:	d3 e7                	shl    edi,cl
c0021d73:	89 eb                	mov    ebx,ebp
c0021d75:	88 c1                	mov    cl,al
c0021d77:	d3 eb                	shr    ebx,cl
c0021d79:	89 f1                	mov    ecx,esi
c0021d7b:	d3 e5                	shl    ebp,cl
c0021d7d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021d80:	88 c1                	mov    cl,al
c0021d82:	d3 ea                	shr    edx,cl
c0021d84:	09 d5                	or     ebp,edx
c0021d86:	89 e8                	mov    eax,ebp
c0021d88:	89 da                	mov    edx,ebx
c0021d8a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021d8e:	89 d3                	mov    ebx,edx
c0021d90:	89 c5                	mov    ebp,eax
c0021d92:	f7 e7                	mul    edi
c0021d94:	39 d3                	cmp    ebx,edx
c0021d96:	72 18                	jb     c0021db0 <__divdi3+0x138>
c0021d98:	74 0a                	je     c0021da4 <__divdi3+0x12c>
c0021d9a:	89 e9                	mov    ecx,ebp
c0021d9c:	31 f6                	xor    esi,esi
c0021d9e:	e9 2d ff ff ff       	jmp    c0021cd0 <__divdi3+0x58>
c0021da3:	90                   	nop
c0021da4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021da7:	89 f1                	mov    ecx,esi
c0021da9:	d3 e7                	shl    edi,cl
c0021dab:	39 c7                	cmp    edi,eax
c0021dad:	73 eb                	jae    c0021d9a <__divdi3+0x122>
c0021daf:	90                   	nop
c0021db0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021db3:	31 f6                	xor    esi,esi
c0021db5:	e9 16 ff ff ff       	jmp    c0021cd0 <__divdi3+0x58>
c0021dba:	66 90                	xchg   ax,ax
c0021dbc:	31 c9                	xor    ecx,ecx
c0021dbe:	e9 0d ff ff ff       	jmp    c0021cd0 <__divdi3+0x58>
c0021dc3:	90                   	nop

c0021dc4 <__moddi3>:
c0021dc4:	55                   	push   ebp
c0021dc5:	57                   	push   edi
c0021dc6:	56                   	push   esi
c0021dc7:	53                   	push   ebx
c0021dc8:	83 ec 2c             	sub    esp,0x2c
c0021dcb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021dcf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021dd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021dd7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021ddb:	85 db                	test   ebx,ebx
c0021ddd:	0f 88 85 00 00 00    	js     c0021e68 <__moddi3+0xa4>
c0021de3:	89 de                	mov    esi,ebx
c0021de5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ded:	89 d7                	mov    edi,edx
c0021def:	85 d2                	test   edx,edx
c0021df1:	79 09                	jns    c0021dfc <__moddi3+0x38>
c0021df3:	f7 d8                	neg    eax
c0021df5:	83 d2 00             	adc    edx,0x0
c0021df8:	f7 da                	neg    edx
c0021dfa:	89 d7                	mov    edi,edx
c0021dfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e00:	89 cd                	mov    ebp,ecx
c0021e02:	85 ff                	test   edi,edi
c0021e04:	75 52                	jne    c0021e58 <__moddi3+0x94>
c0021e06:	89 c3                	mov    ebx,eax
c0021e08:	39 f0                	cmp    eax,esi
c0021e0a:	76 24                	jbe    c0021e30 <__moddi3+0x6c>
c0021e0c:	89 c8                	mov    eax,ecx
c0021e0e:	89 f2                	mov    edx,esi
c0021e10:	f7 f3                	div    ebx
c0021e12:	89 d6                	mov    esi,edx
c0021e14:	89 f0                	mov    eax,esi
c0021e16:	31 d2                	xor    edx,edx
c0021e18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e1c:	85 c9                	test   ecx,ecx
c0021e1e:	74 07                	je     c0021e27 <__moddi3+0x63>
c0021e20:	f7 d8                	neg    eax
c0021e22:	83 d2 00             	adc    edx,0x0
c0021e25:	f7 da                	neg    edx
c0021e27:	83 c4 2c             	add    esp,0x2c
c0021e2a:	5b                   	pop    ebx
c0021e2b:	5e                   	pop    esi
c0021e2c:	5f                   	pop    edi
c0021e2d:	5d                   	pop    ebp
c0021e2e:	c3                   	ret    
c0021e2f:	90                   	nop
c0021e30:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021e34:	85 db                	test   ebx,ebx
c0021e36:	75 0d                	jne    c0021e45 <__moddi3+0x81>
c0021e38:	b8 01 00 00 00       	mov    eax,0x1
c0021e3d:	31 d2                	xor    edx,edx
c0021e3f:	f7 f7                	div    edi
c0021e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e45:	89 f0                	mov    eax,esi
c0021e47:	31 d2                	xor    edx,edx
c0021e49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e4d:	f7 f7                	div    edi
c0021e4f:	89 e8                	mov    eax,ebp
c0021e51:	f7 f7                	div    edi
c0021e53:	89 d6                	mov    esi,edx
c0021e55:	eb bd                	jmp    c0021e14 <__moddi3+0x50>
c0021e57:	90                   	nop
c0021e58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021e5c:	39 f7                	cmp    edi,esi
c0021e5e:	76 20                	jbe    c0021e80 <__moddi3+0xbc>
c0021e60:	89 c8                	mov    eax,ecx
c0021e62:	89 f2                	mov    edx,esi
c0021e64:	eb b2                	jmp    c0021e18 <__moddi3+0x54>
c0021e66:	66 90                	xchg   ax,ax
c0021e68:	f7 d9                	neg    ecx
c0021e6a:	83 d3 00             	adc    ebx,0x0
c0021e6d:	f7 db                	neg    ebx
c0021e6f:	89 de                	mov    esi,ebx
c0021e71:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021e79:	e9 6f ff ff ff       	jmp    c0021ded <__moddi3+0x29>
c0021e7e:	66 90                	xchg   ax,ax
c0021e80:	0f bd c7             	bsr    eax,edi
c0021e83:	83 f0 1f             	xor    eax,0x1f
c0021e86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e8a:	75 24                	jne    c0021eb0 <__moddi3+0xec>
c0021e8c:	39 f7                	cmp    edi,esi
c0021e8e:	72 06                	jb     c0021e96 <__moddi3+0xd2>
c0021e90:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021e94:	77 0c                	ja     c0021ea2 <__moddi3+0xde>
c0021e96:	89 e9                	mov    ecx,ebp
c0021e98:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021e9c:	19 fe                	sbb    esi,edi
c0021e9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021ea2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ea6:	89 f2                	mov    edx,esi
c0021ea8:	e9 6b ff ff ff       	jmp    c0021e18 <__moddi3+0x54>
c0021ead:	8d 76 00             	lea    esi,[esi+0x0]
c0021eb0:	b8 20 00 00 00       	mov    eax,0x20
c0021eb5:	89 c2                	mov    edx,eax
c0021eb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021ebb:	29 da                	sub    edx,ebx
c0021ebd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021ec1:	88 d9                	mov    cl,bl
c0021ec3:	d3 e7                	shl    edi,cl
c0021ec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ec9:	88 d1                	mov    cl,dl
c0021ecb:	d3 e8                	shr    eax,cl
c0021ecd:	09 c7                	or     edi,eax
c0021ecf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021ed3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ed7:	89 d8                	mov    eax,ebx
c0021ed9:	88 d9                	mov    cl,bl
c0021edb:	d3 e7                	shl    edi,cl
c0021edd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ee1:	89 f3                	mov    ebx,esi
c0021ee3:	88 d1                	mov    cl,dl
c0021ee5:	d3 eb                	shr    ebx,cl
c0021ee7:	89 c7                	mov    edi,eax
c0021ee9:	88 c1                	mov    cl,al
c0021eeb:	d3 e6                	shl    esi,cl
c0021eed:	89 e8                	mov    eax,ebp
c0021eef:	88 d1                	mov    cl,dl
c0021ef1:	d3 e8                	shr    eax,cl
c0021ef3:	09 f0                	or     eax,esi
c0021ef5:	89 f9                	mov    ecx,edi
c0021ef7:	d3 e5                	shl    ebp,cl
c0021ef9:	89 da                	mov    edx,ebx
c0021efb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021eff:	89 d3                	mov    ebx,edx
c0021f01:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021f05:	89 c6                	mov    esi,eax
c0021f07:	89 d1                	mov    ecx,edx
c0021f09:	39 d3                	cmp    ebx,edx
c0021f0b:	72 27                	jb     c0021f34 <__moddi3+0x170>
c0021f0d:	74 21                	je     c0021f30 <__moddi3+0x16c>
c0021f0f:	29 f5                	sub    ebp,esi
c0021f11:	19 cb                	sbb    ebx,ecx
c0021f13:	89 de                	mov    esi,ebx
c0021f15:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021f19:	d3 e6                	shl    esi,cl
c0021f1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021f1f:	89 f9                	mov    ecx,edi
c0021f21:	d3 ed                	shr    ebp,cl
c0021f23:	09 ee                	or     esi,ebp
c0021f25:	89 f0                	mov    eax,esi
c0021f27:	d3 eb                	shr    ebx,cl
c0021f29:	89 da                	mov    edx,ebx
c0021f2b:	e9 e8 fe ff ff       	jmp    c0021e18 <__moddi3+0x54>
c0021f30:	39 c5                	cmp    ebp,eax
c0021f32:	73 db                	jae    c0021f0f <__moddi3+0x14b>
c0021f34:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021f38:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021f3c:	89 d1                	mov    ecx,edx
c0021f3e:	89 c6                	mov    esi,eax
c0021f40:	eb cd                	jmp    c0021f0f <__moddi3+0x14b>
c0021f42:	66 90                	xchg   ax,ax

c0021f44 <__udivdi3>:
c0021f44:	55                   	push   ebp
c0021f45:	57                   	push   edi
c0021f46:	56                   	push   esi
c0021f47:	53                   	push   ebx
c0021f48:	83 ec 1c             	sub    esp,0x1c
c0021f4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021f4f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021f53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021f57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f5b:	85 d2                	test   edx,edx
c0021f5d:	75 41                	jne    c0021fa0 <__udivdi3+0x5c>
c0021f5f:	39 f7                	cmp    edi,esi
c0021f61:	76 15                	jbe    c0021f78 <__udivdi3+0x34>
c0021f63:	89 e8                	mov    eax,ebp
c0021f65:	89 f2                	mov    edx,esi
c0021f67:	f7 f7                	div    edi
c0021f69:	31 db                	xor    ebx,ebx
c0021f6b:	89 da                	mov    edx,ebx
c0021f6d:	83 c4 1c             	add    esp,0x1c
c0021f70:	5b                   	pop    ebx
c0021f71:	5e                   	pop    esi
c0021f72:	5f                   	pop    edi
c0021f73:	5d                   	pop    ebp
c0021f74:	c3                   	ret    
c0021f75:	8d 76 00             	lea    esi,[esi+0x0]
c0021f78:	89 f9                	mov    ecx,edi
c0021f7a:	85 ff                	test   edi,edi
c0021f7c:	75 0b                	jne    c0021f89 <__udivdi3+0x45>
c0021f7e:	b8 01 00 00 00       	mov    eax,0x1
c0021f83:	31 d2                	xor    edx,edx
c0021f85:	f7 f7                	div    edi
c0021f87:	89 c1                	mov    ecx,eax
c0021f89:	31 d2                	xor    edx,edx
c0021f8b:	89 f0                	mov    eax,esi
c0021f8d:	f7 f1                	div    ecx
c0021f8f:	89 c3                	mov    ebx,eax
c0021f91:	89 e8                	mov    eax,ebp
c0021f93:	f7 f1                	div    ecx
c0021f95:	89 da                	mov    edx,ebx
c0021f97:	83 c4 1c             	add    esp,0x1c
c0021f9a:	5b                   	pop    ebx
c0021f9b:	5e                   	pop    esi
c0021f9c:	5f                   	pop    edi
c0021f9d:	5d                   	pop    ebp
c0021f9e:	c3                   	ret    
c0021f9f:	90                   	nop
c0021fa0:	39 f2                	cmp    edx,esi
c0021fa2:	77 1c                	ja     c0021fc0 <__udivdi3+0x7c>
c0021fa4:	0f bd da             	bsr    ebx,edx
c0021fa7:	83 f3 1f             	xor    ebx,0x1f
c0021faa:	75 24                	jne    c0021fd0 <__udivdi3+0x8c>
c0021fac:	39 f2                	cmp    edx,esi
c0021fae:	72 08                	jb     c0021fb8 <__udivdi3+0x74>
c0021fb0:	39 ef                	cmp    edi,ebp
c0021fb2:	0f 87 84 00 00 00    	ja     c002203c <__udivdi3+0xf8>
c0021fb8:	b8 01 00 00 00       	mov    eax,0x1
c0021fbd:	eb ac                	jmp    c0021f6b <__udivdi3+0x27>
c0021fbf:	90                   	nop
c0021fc0:	31 db                	xor    ebx,ebx
c0021fc2:	31 c0                	xor    eax,eax
c0021fc4:	89 da                	mov    edx,ebx
c0021fc6:	83 c4 1c             	add    esp,0x1c
c0021fc9:	5b                   	pop    ebx
c0021fca:	5e                   	pop    esi
c0021fcb:	5f                   	pop    edi
c0021fcc:	5d                   	pop    ebp
c0021fcd:	c3                   	ret    
c0021fce:	66 90                	xchg   ax,ax
c0021fd0:	b8 20 00 00 00       	mov    eax,0x20
c0021fd5:	29 d8                	sub    eax,ebx
c0021fd7:	88 d9                	mov    cl,bl
c0021fd9:	d3 e2                	shl    edx,cl
c0021fdb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021fdf:	89 fa                	mov    edx,edi
c0021fe1:	88 c1                	mov    cl,al
c0021fe3:	d3 ea                	shr    edx,cl
c0021fe5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fe9:	09 d1                	or     ecx,edx
c0021feb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021fef:	88 d9                	mov    cl,bl
c0021ff1:	d3 e7                	shl    edi,cl
c0021ff3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ff7:	89 f7                	mov    edi,esi
c0021ff9:	88 c1                	mov    cl,al
c0021ffb:	d3 ef                	shr    edi,cl
c0021ffd:	88 d9                	mov    cl,bl
c0021fff:	d3 e6                	shl    esi,cl
c0022001:	89 ea                	mov    edx,ebp
c0022003:	88 c1                	mov    cl,al
c0022005:	d3 ea                	shr    edx,cl
c0022007:	09 d6                	or     esi,edx
c0022009:	89 f0                	mov    eax,esi
c002200b:	89 fa                	mov    edx,edi
c002200d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022011:	89 d7                	mov    edi,edx
c0022013:	89 c6                	mov    esi,eax
c0022015:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022019:	39 d7                	cmp    edi,edx
c002201b:	72 13                	jb     c0022030 <__udivdi3+0xec>
c002201d:	74 09                	je     c0022028 <__udivdi3+0xe4>
c002201f:	89 f0                	mov    eax,esi
c0022021:	31 db                	xor    ebx,ebx
c0022023:	e9 43 ff ff ff       	jmp    c0021f6b <__udivdi3+0x27>
c0022028:	88 d9                	mov    cl,bl
c002202a:	d3 e5                	shl    ebp,cl
c002202c:	39 c5                	cmp    ebp,eax
c002202e:	73 ef                	jae    c002201f <__udivdi3+0xdb>
c0022030:	8d 46 ff             	lea    eax,[esi-0x1]
c0022033:	31 db                	xor    ebx,ebx
c0022035:	e9 31 ff ff ff       	jmp    c0021f6b <__udivdi3+0x27>
c002203a:	66 90                	xchg   ax,ax
c002203c:	31 c0                	xor    eax,eax
c002203e:	e9 28 ff ff ff       	jmp    c0021f6b <__udivdi3+0x27>
c0022043:	90                   	nop

c0022044 <__umoddi3>:
c0022044:	55                   	push   ebp
c0022045:	57                   	push   edi
c0022046:	56                   	push   esi
c0022047:	53                   	push   ebx
c0022048:	83 ec 1c             	sub    esp,0x1c
c002204b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002204f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022053:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002205b:	89 da                	mov    edx,ebx
c002205d:	85 c0                	test   eax,eax
c002205f:	75 37                	jne    c0022098 <__umoddi3+0x54>
c0022061:	39 df                	cmp    edi,ebx
c0022063:	76 13                	jbe    c0022078 <__umoddi3+0x34>
c0022065:	89 f0                	mov    eax,esi
c0022067:	f7 f7                	div    edi
c0022069:	89 d0                	mov    eax,edx
c002206b:	31 d2                	xor    edx,edx
c002206d:	83 c4 1c             	add    esp,0x1c
c0022070:	5b                   	pop    ebx
c0022071:	5e                   	pop    esi
c0022072:	5f                   	pop    edi
c0022073:	5d                   	pop    ebp
c0022074:	c3                   	ret    
c0022075:	8d 76 00             	lea    esi,[esi+0x0]
c0022078:	89 fd                	mov    ebp,edi
c002207a:	85 ff                	test   edi,edi
c002207c:	75 0b                	jne    c0022089 <__umoddi3+0x45>
c002207e:	b8 01 00 00 00       	mov    eax,0x1
c0022083:	31 d2                	xor    edx,edx
c0022085:	f7 f7                	div    edi
c0022087:	89 c5                	mov    ebp,eax
c0022089:	89 d8                	mov    eax,ebx
c002208b:	31 d2                	xor    edx,edx
c002208d:	f7 f5                	div    ebp
c002208f:	89 f0                	mov    eax,esi
c0022091:	f7 f5                	div    ebp
c0022093:	89 d0                	mov    eax,edx
c0022095:	eb d4                	jmp    c002206b <__umoddi3+0x27>
c0022097:	90                   	nop
c0022098:	89 f1                	mov    ecx,esi
c002209a:	39 d8                	cmp    eax,ebx
c002209c:	76 0a                	jbe    c00220a8 <__umoddi3+0x64>
c002209e:	89 f0                	mov    eax,esi
c00220a0:	83 c4 1c             	add    esp,0x1c
c00220a3:	5b                   	pop    ebx
c00220a4:	5e                   	pop    esi
c00220a5:	5f                   	pop    edi
c00220a6:	5d                   	pop    ebp
c00220a7:	c3                   	ret    
c00220a8:	0f bd e8             	bsr    ebp,eax
c00220ab:	83 f5 1f             	xor    ebp,0x1f
c00220ae:	75 1c                	jne    c00220cc <__umoddi3+0x88>
c00220b0:	39 d8                	cmp    eax,ebx
c00220b2:	72 04                	jb     c00220b8 <__umoddi3+0x74>
c00220b4:	39 f7                	cmp    edi,esi
c00220b6:	77 08                	ja     c00220c0 <__umoddi3+0x7c>
c00220b8:	89 da                	mov    edx,ebx
c00220ba:	29 fe                	sub    esi,edi
c00220bc:	19 c2                	sbb    edx,eax
c00220be:	89 f1                	mov    ecx,esi
c00220c0:	89 c8                	mov    eax,ecx
c00220c2:	83 c4 1c             	add    esp,0x1c
c00220c5:	5b                   	pop    ebx
c00220c6:	5e                   	pop    esi
c00220c7:	5f                   	pop    edi
c00220c8:	5d                   	pop    ebp
c00220c9:	c3                   	ret    
c00220ca:	66 90                	xchg   ax,ax
c00220cc:	ba 20 00 00 00       	mov    edx,0x20
c00220d1:	29 ea                	sub    edx,ebp
c00220d3:	89 e9                	mov    ecx,ebp
c00220d5:	d3 e0                	shl    eax,cl
c00220d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220db:	89 f8                	mov    eax,edi
c00220dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00220e1:	88 d1                	mov    cl,dl
c00220e3:	d3 e8                	shr    eax,cl
c00220e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00220e9:	09 c1                	or     ecx,eax
c00220eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00220ef:	89 e9                	mov    ecx,ebp
c00220f1:	d3 e7                	shl    edi,cl
c00220f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00220f7:	89 d8                	mov    eax,ebx
c00220f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220fd:	88 d1                	mov    cl,dl
c00220ff:	d3 e8                	shr    eax,cl
c0022101:	89 c7                	mov    edi,eax
c0022103:	89 e9                	mov    ecx,ebp
c0022105:	d3 e3                	shl    ebx,cl
c0022107:	89 f0                	mov    eax,esi
c0022109:	88 d1                	mov    cl,dl
c002210b:	d3 e8                	shr    eax,cl
c002210d:	09 d8                	or     eax,ebx
c002210f:	89 e9                	mov    ecx,ebp
c0022111:	d3 e6                	shl    esi,cl
c0022113:	89 f3                	mov    ebx,esi
c0022115:	89 fa                	mov    edx,edi
c0022117:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002211b:	89 d1                	mov    ecx,edx
c002211d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022121:	89 c6                	mov    esi,eax
c0022123:	89 d7                	mov    edi,edx
c0022125:	39 d1                	cmp    ecx,edx
c0022127:	72 27                	jb     c0022150 <__umoddi3+0x10c>
c0022129:	74 21                	je     c002214c <__umoddi3+0x108>
c002212b:	89 ca                	mov    edx,ecx
c002212d:	29 f3                	sub    ebx,esi
c002212f:	19 fa                	sbb    edx,edi
c0022131:	89 d0                	mov    eax,edx
c0022133:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022137:	d3 e0                	shl    eax,cl
c0022139:	89 e9                	mov    ecx,ebp
c002213b:	d3 eb                	shr    ebx,cl
c002213d:	09 d8                	or     eax,ebx
c002213f:	d3 ea                	shr    edx,cl
c0022141:	83 c4 1c             	add    esp,0x1c
c0022144:	5b                   	pop    ebx
c0022145:	5e                   	pop    esi
c0022146:	5f                   	pop    edi
c0022147:	5d                   	pop    ebp
c0022148:	c3                   	ret    
c0022149:	8d 76 00             	lea    esi,[esi+0x0]
c002214c:	39 c3                	cmp    ebx,eax
c002214e:	73 db                	jae    c002212b <__umoddi3+0xe7>
c0022150:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022154:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022158:	89 d7                	mov    edi,edx
c002215a:	89 c6                	mov    esi,eax
c002215c:	eb cd                	jmp    c002212b <__umoddi3+0xe7>

Disassembly of section .init:

c002215e <_init>:
c002215e:	55                   	push   ebp
c002215f:	89 e5                	mov    ebp,esp
c0022161:	e8 b2 df fd ff       	call   c0000118 <frame_dummy>
c0022166:	e8 e5 fa ff ff       	call   c0021c50 <__do_global_ctors_aux>
c002216b:	5d                   	pop    ebp
c002216c:	c3                   	ret    

Disassembly of section .fini:

c002216d <_fini>:
c002216d:	55                   	push   ebp
c002216e:	89 e5                	mov    ebp,esp
c0022170:	e8 33 df fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022175:	5d                   	pop    ebp
c0022176:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022178 <Computer::~Computer()>:
c0022178:	83 ec 0c             	sub    esp,0xc
c002217b:	ba 94 37 02 c0       	mov    edx,0xc0023794
c0022180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022184:	89 10                	mov    DWORD PTR [eax],edx
c0022186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218a:	83 ec 0c             	sub    esp,0xc
c002218d:	50                   	push   eax
c002218e:	e8 c5 bd fe ff       	call   c000df58 <Device::~Device()>
c0022193:	83 c4 10             	add    esp,0x10
c0022196:	90                   	nop
c0022197:	83 c4 0c             	add    esp,0xc
c002219a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002219c <Computer::~Computer()>:
c002219c:	83 ec 0c             	sub    esp,0xc
c002219f:	83 ec 0c             	sub    esp,0xc
c00221a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221a6:	e8 cd ff ff ff       	call   c0022178 <Computer::~Computer()>
c00221ab:	83 c4 10             	add    esp,0x10
c00221ae:	83 ec 08             	sub    esp,0x8
c00221b1:	68 ec 01 00 00       	push   0x1ec
c00221b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221ba:	e8 a3 a9 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	83 c4 0c             	add    esp,0xc
c00221c5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00221c6 <idleCommon()>:
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	fa                   	cli    
c00221ca:	ff 05 68 89 02 c0    	inc    DWORD PTR ds:0xc0028968
c00221d0:	e8 5f 61 ff ff       	call   c0018334 <schedule()>
c00221d5:	a1 68 89 02 c0       	mov    eax,ds:0xc0028968
c00221da:	48                   	dec    eax
c00221db:	a3 68 89 02 c0       	mov    ds:0xc0028968,eax
c00221e0:	75 01                	jne    c00221e3 <idleCommon()+0x1d>
c00221e2:	fb                   	sti    
c00221e3:	83 c4 0c             	add    esp,0xc
c00221e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00221e8 <LinkedList<UnixFile>::~LinkedList()>:
c00221e8:	90                   	nop
c00221e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00221ea <LinkedList<UnixFile>::LinkedList()>:
c00221ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022203:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002220a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002221f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022223:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002222a:	90                   	nop
c002222b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002222c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022234:	75 10                	jne    c0022246 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022236:	83 ec 0c             	sub    esp,0xc
c0022239:	68 68 3b 02 c0       	push   0xc0023b68
c002223e:	e8 20 25 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022243:	83 c4 10             	add    esp,0x10
c0022246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224a:	8b 00                	mov    eax,DWORD PTR [eax]
c002224c:	85 c0                	test   eax,eax
c002224e:	74 34                	je     c0022284 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022257:	85 c0                	test   eax,eax
c0022259:	74 29                	je     c0022284 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002225b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022262:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022271:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002227b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022282:	eb 65                	jmp    c00222e9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022288:	8b 00                	mov    eax,DWORD PTR [eax]
c002228a:	85 c0                	test   eax,eax
c002228c:	75 4b                	jne    c00222d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002228e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022295:	85 c0                	test   eax,eax
c0022297:	75 40                	jne    c00222d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222a1:	89 10                	mov    DWORD PTR [eax],edx
c00222a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00222bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222c3:	85 c0                	test   eax,eax
c00222c5:	74 22                	je     c00222e9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00222c7:	83 ec 0c             	sub    esp,0xc
c00222ca:	68 8a 3b 02 c0       	push   0xc0023b8a
c00222cf:	e8 8f 24 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00222d4:	83 c4 10             	add    esp,0x10
c00222d7:	eb 10                	jmp    c00222e9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00222d9:	83 ec 0c             	sub    esp,0xc
c00222dc:	68 94 3b 02 c0       	push   0xc0023b94
c00222e1:	e8 7d 24 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00222e6:	83 c4 10             	add    esp,0x10
c00222e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222f0:	8d 50 01             	lea    edx,[eax+0x1]
c00222f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222fa:	90                   	nop
c00222fb:	83 c4 0c             	add    esp,0xc
c00222fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022300 <LinkedList<UnixFile>::getFirstElement()>:
c0022300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022304:	8b 00                	mov    eax,DWORD PTR [eax]
c0022306:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022308 <LinkedList<UnixFile>::removeFirst()>:
c0022308:	83 ec 0c             	sub    esp,0xc
c002230b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022311:	85 c0                	test   eax,eax
c0022313:	75 12                	jne    c0022327 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022315:	83 ec 0c             	sub    esp,0xc
c0022318:	68 a0 3b 02 c0       	push   0xc0023ba0
c002231d:	e8 41 24 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022322:	83 c4 10             	add    esp,0x10
c0022325:	eb 7e                	jmp    c00223a5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002232e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022331:	85 c0                	test   eax,eax
c0022333:	74 10                	je     c0022345 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022335:	83 ec 0c             	sub    esp,0xc
c0022338:	68 eb 3b 02 c0       	push   0xc0023beb
c002233d:	e8 21 24 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022342:	83 c4 10             	add    esp,0x10
c0022345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022349:	8b 00                	mov    eax,DWORD PTR [eax]
c002234b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002234e:	85 c0                	test   eax,eax
c0022350:	75 33                	jne    c0022385 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022356:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002235c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022360:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002236e:	83 f8 01             	cmp    eax,0x1
c0022371:	74 21                	je     c0022394 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022373:	83 ec 0c             	sub    esp,0xc
c0022376:	68 c4 3b 02 c0       	push   0xc0023bc4
c002237b:	e8 e3 23 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022380:	83 c4 10             	add    esp,0x10
c0022383:	eb 0f                	jmp    c0022394 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022389:	8b 00                	mov    eax,DWORD PTR [eax]
c002238b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002238e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022392:	89 10                	mov    DWORD PTR [eax],edx
c0022394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022398:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002239b:	8d 50 ff             	lea    edx,[eax-0x1]
c002239e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223a5:	83 c4 0c             	add    esp,0xc
c00223a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00223aa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00223aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00223b2 <DriverlessDevice::~DriverlessDevice()>:
c00223b2:	ba 9c 43 02 c0       	mov    edx,0xc002439c
c00223b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bb:	89 10                	mov    DWORD PTR [eax],edx
c00223bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c1:	50                   	push   eax
c00223c2:	e8 91 bb fe ff       	call   c000df58 <Device::~Device()>
c00223c7:	83 c4 04             	add    esp,0x4
c00223ca:	90                   	nop
c00223cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00223cc <DriverlessDevice::~DriverlessDevice()>:
c00223cc:	83 ec 0c             	sub    esp,0xc
c00223cf:	83 ec 0c             	sub    esp,0xc
c00223d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223d6:	e8 d7 ff ff ff       	call   c00223b2 <DriverlessDevice::~DriverlessDevice()>
c00223db:	83 c4 10             	add    esp,0x10
c00223de:	83 ec 08             	sub    esp,0x8
c00223e1:	68 58 01 00 00       	push   0x158
c00223e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ea:	e8 73 a7 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c00223ef:	83 c4 10             	add    esp,0x10
c00223f2:	83 c4 0c             	add    esp,0xc
c00223f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00223f6 <LinkedList<Device>::addElement(Device*)>:
c00223f6:	83 ec 0c             	sub    esp,0xc
c00223f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00223fe:	75 10                	jne    c0022410 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022400:	83 ec 0c             	sub    esp,0xc
c0022403:	68 68 3b 02 c0       	push   0xc0023b68
c0022408:	e8 56 23 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002240d:	83 c4 10             	add    esp,0x10
c0022410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022414:	8b 00                	mov    eax,DWORD PTR [eax]
c0022416:	85 c0                	test   eax,eax
c0022418:	74 3a                	je     c0022454 <LinkedList<Device>::addElement(Device*)+0x5e>
c002241a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022421:	85 c0                	test   eax,eax
c0022423:	74 2f                	je     c0022454 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022429:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002242c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022430:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002243e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022445:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022448:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022452:	eb 68                	jmp    c00224bc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022458:	8b 00                	mov    eax,DWORD PTR [eax]
c002245a:	85 c0                	test   eax,eax
c002245c:	75 4e                	jne    c00224ac <LinkedList<Device>::addElement(Device*)+0xb6>
c002245e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022465:	85 c0                	test   eax,eax
c0022467:	75 43                	jne    c00224ac <LinkedList<Device>::addElement(Device*)+0xb6>
c0022469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022471:	89 10                	mov    DWORD PTR [eax],edx
c0022473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002247b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002247e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022485:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002248f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022493:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022496:	85 c0                	test   eax,eax
c0022498:	74 22                	je     c00224bc <LinkedList<Device>::addElement(Device*)+0xc6>
c002249a:	83 ec 0c             	sub    esp,0xc
c002249d:	68 8a 3b 02 c0       	push   0xc0023b8a
c00224a2:	e8 bc 22 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	eb 10                	jmp    c00224bc <LinkedList<Device>::addElement(Device*)+0xc6>
c00224ac:	83 ec 0c             	sub    esp,0xc
c00224af:	68 94 3b 02 c0       	push   0xc0023b94
c00224b4:	e8 aa 22 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224c3:	8d 50 01             	lea    edx,[eax+0x1]
c00224c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224cd:	90                   	nop
c00224ce:	83 c4 0c             	add    esp,0xc
c00224d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00224d2 <LinkedList<Device>::LinkedList()>:
c00224d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00224dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00224e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00224fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022500:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002250b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022512:	90                   	nop
c0022513:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022514 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022518:	8b 00                	mov    eax,DWORD PTR [eax]
c002251a:	85 c0                	test   eax,eax
c002251c:	75 0e                	jne    c002252c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002251e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022525:	85 c0                	test   eax,eax
c0022527:	75 03                	jne    c002252c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022529:	b0 01                	mov    al,0x1
c002252b:	c3                   	ret    
c002252c:	b0 00                	mov    al,0x0
c002252e:	90                   	nop
c002252f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022530 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022534:	8b 00                	mov    eax,DWORD PTR [eax]
c0022536:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022538 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022538:	83 ec 0c             	sub    esp,0xc
c002253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022541:	85 c0                	test   eax,eax
c0022543:	75 17                	jne    c002255c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022545:	83 ec 0c             	sub    esp,0xc
c0022548:	68 a0 3b 02 c0       	push   0xc0023ba0
c002254d:	e8 11 22 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022552:	83 c4 10             	add    esp,0x10
c0022555:	e9 92 00 00 00       	jmp    c00225ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002255a:	66 90                	xchg   ax,ax
c002255c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022563:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022566:	85 c0                	test   eax,eax
c0022568:	0f 95 c0             	setne  al
c002256b:	84 c0                	test   al,al
c002256d:	74 11                	je     c0022580 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002256f:	83 ec 0c             	sub    esp,0xc
c0022572:	68 eb 3b 02 c0       	push   0xc0023beb
c0022577:	e8 e7 21 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002257c:	83 c4 10             	add    esp,0x10
c002257f:	90                   	nop
c0022580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022584:	8b 00                	mov    eax,DWORD PTR [eax]
c0022586:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022589:	85 c0                	test   eax,eax
c002258b:	0f 94 c0             	sete   al
c002258e:	84 c0                	test   al,al
c0022590:	74 36                	je     c00225c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022596:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002259c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00225a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225ae:	83 f8 01             	cmp    eax,0x1
c00225b1:	74 25                	je     c00225d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00225b3:	83 ec 0c             	sub    esp,0xc
c00225b6:	68 c4 3b 02 c0       	push   0xc0023bc4
c00225bb:	e8 a3 21 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00225c0:	83 c4 10             	add    esp,0x10
c00225c3:	eb 13                	jmp    c00225d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00225c5:	8d 76 00             	lea    esi,[esi+0x0]
c00225c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00225ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00225d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d5:	89 10                	mov    DWORD PTR [eax],edx
c00225d7:	90                   	nop
c00225d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225df:	8d 50 ff             	lea    edx,[eax-0x1]
c00225e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00225e9:	8d 76 00             	lea    esi,[esi+0x0]
c00225ec:	83 c4 0c             	add    esp,0xc
c00225ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00225f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00225f0:	83 ec 0c             	sub    esp,0xc
c00225f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00225f8:	75 12                	jne    c002260c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00225fa:	83 ec 0c             	sub    esp,0xc
c00225fd:	68 68 3b 02 c0       	push   0xc0023b68
c0022602:	e8 5c 21 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022607:	83 c4 10             	add    esp,0x10
c002260a:	66 90                	xchg   ax,ax
c002260c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022610:	8b 00                	mov    eax,DWORD PTR [eax]
c0022612:	85 c0                	test   eax,eax
c0022614:	74 36                	je     c002264c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002261d:	85 c0                	test   eax,eax
c002261f:	74 2b                	je     c002264c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022625:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002262c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002262f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002263a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002263e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022641:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022648:	eb 6a                	jmp    c00226b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002264a:	66 90                	xchg   ax,ax
c002264c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022650:	8b 00                	mov    eax,DWORD PTR [eax]
c0022652:	85 c0                	test   eax,eax
c0022654:	75 4e                	jne    c00226a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002265d:	85 c0                	test   eax,eax
c002265f:	75 43                	jne    c00226a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022665:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022669:	89 10                	mov    DWORD PTR [eax],edx
c002266b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022673:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002267a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002267d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022688:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002268b:	85 c0                	test   eax,eax
c002268d:	74 25                	je     c00226b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002268f:	83 ec 0c             	sub    esp,0xc
c0022692:	68 8a 3b 02 c0       	push   0xc0023b8a
c0022697:	e8 c7 20 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002269c:	83 c4 10             	add    esp,0x10
c002269f:	eb 13                	jmp    c00226b4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00226a1:	8d 76 00             	lea    esi,[esi+0x0]
c00226a4:	83 ec 0c             	sub    esp,0xc
c00226a7:	68 94 3b 02 c0       	push   0xc0023b94
c00226ac:	e8 b2 20 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00226b1:	83 c4 10             	add    esp,0x10
c00226b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00226bb:	8d 50 01             	lea    edx,[eax+0x1]
c00226be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00226c5:	90                   	nop
c00226c6:	83 c4 0c             	add    esp,0xc
c00226c9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00226cc <ACPI::~ACPI()>:
c00226cc:	83 ec 0c             	sub    esp,0xc
c00226cf:	ba a4 4d 02 c0       	mov    edx,0xc0024da4
c00226d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d8:	89 10                	mov    DWORD PTR [eax],edx
c00226da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	50                   	push   eax
c00226e2:	e8 71 b8 fe ff       	call   c000df58 <Device::~Device()>
c00226e7:	83 c4 10             	add    esp,0x10
c00226ea:	90                   	nop
c00226eb:	83 c4 0c             	add    esp,0xc
c00226ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00226f0 <ACPI::~ACPI()>:
c00226f0:	83 ec 0c             	sub    esp,0xc
c00226f3:	83 ec 0c             	sub    esp,0xc
c00226f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226fa:	e8 cd ff ff ff       	call   c00226cc <ACPI::~ACPI()>
c00226ff:	83 c4 10             	add    esp,0x10
c0022702:	83 ec 08             	sub    esp,0x8
c0022705:	68 64 12 00 00       	push   0x1264
c002270a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002270e:	e8 4f a4 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022713:	83 c4 10             	add    esp,0x10
c0022716:	83 c4 0c             	add    esp,0xc
c0022719:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002271c <LinkedList<Device>::~LinkedList()>:
c002271c:	90                   	nop
c002271d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022720 <LinkedList<Device>::isEmpty()>:
c0022720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022724:	8b 00                	mov    eax,DWORD PTR [eax]
c0022726:	85 c0                	test   eax,eax
c0022728:	75 0e                	jne    c0022738 <LinkedList<Device>::isEmpty()+0x18>
c002272a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002272e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022731:	85 c0                	test   eax,eax
c0022733:	75 03                	jne    c0022738 <LinkedList<Device>::isEmpty()+0x18>
c0022735:	b0 01                	mov    al,0x1
c0022737:	c3                   	ret    
c0022738:	b0 00                	mov    al,0x0
c002273a:	90                   	nop
c002273b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002273c <LinkedList<Device>::getFirstElement()>:
c002273c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022740:	8b 00                	mov    eax,DWORD PTR [eax]
c0022742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022744 <LinkedList<Device>::removeFirst()>:
c0022744:	83 ec 0c             	sub    esp,0xc
c0022747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002274b:	8b 00                	mov    eax,DWORD PTR [eax]
c002274d:	85 c0                	test   eax,eax
c002274f:	75 17                	jne    c0022768 <LinkedList<Device>::removeFirst()+0x24>
c0022751:	83 ec 0c             	sub    esp,0xc
c0022754:	68 a0 3b 02 c0       	push   0xc0023ba0
c0022759:	e8 05 20 ff ff       	call   c0014763 <Krnl::panic(char const*)>
c002275e:	83 c4 10             	add    esp,0x10
c0022761:	e9 92 00 00 00       	jmp    c00227f8 <LinkedList<Device>::removeFirst()+0xb4>
c0022766:	66 90                	xchg   ax,ax
c0022768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002276c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002276f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022775:	85 c0                	test   eax,eax
c0022777:	74 13                	je     c002278c <LinkedList<Device>::removeFirst()+0x48>
c0022779:	83 ec 0c             	sub    esp,0xc
c002277c:	68 eb 3b 02 c0       	push   0xc0023beb
c0022781:	e8 dd 1f ff ff       	call   c0014763 <Krnl::panic(char const*)>
c0022786:	83 c4 10             	add    esp,0x10
c0022789:	8d 76 00             	lea    esi,[esi+0x0]
c002278c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022790:	8b 00                	mov    eax,DWORD PTR [eax]
c0022792:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022798:	85 c0                	test   eax,eax
c002279a:	75 34                	jne    c00227d0 <LinkedList<Device>::removeFirst()+0x8c>
c002279c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00227a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00227b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227b8:	83 f8 01             	cmp    eax,0x1
c00227bb:	74 27                	je     c00227e4 <LinkedList<Device>::removeFirst()+0xa0>
c00227bd:	83 ec 0c             	sub    esp,0xc
c00227c0:	68 c4 3b 02 c0       	push   0xc0023bc4
c00227c5:	e8 99 1f ff ff       	call   c0014763 <Krnl::panic(char const*)>
c00227ca:	83 c4 10             	add    esp,0x10
c00227cd:	eb 15                	jmp    c00227e4 <LinkedList<Device>::removeFirst()+0xa0>
c00227cf:	90                   	nop
c00227d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00227d6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00227dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e0:	89 10                	mov    DWORD PTR [eax],edx
c00227e2:	66 90                	xchg   ax,ax
c00227e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00227eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00227ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00227f5:	8d 76 00             	lea    esi,[esi+0x0]
c00227f8:	83 c4 0c             	add    esp,0xc
c00227fb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00227fc <CPU::~CPU()>:
c00227fc:	83 ec 0c             	sub    esp,0xc
c00227ff:	ba 80 51 02 c0       	mov    edx,0xc0025180
c0022804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022808:	89 10                	mov    DWORD PTR [eax],edx
c002280a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	50                   	push   eax
c0022812:	e8 41 b7 fe ff       	call   c000df58 <Device::~Device()>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	90                   	nop
c002281b:	83 c4 0c             	add    esp,0xc
c002281e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022820 <CPU::~CPU()>:
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	83 ec 0c             	sub    esp,0xc
c0022826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002282a:	e8 cd ff ff ff       	call   c00227fc <CPU::~CPU()>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	83 ec 08             	sub    esp,0x8
c0022835:	68 98 11 00 00       	push   0x1198
c002283a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002283e:	e8 1f a3 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022843:	83 c4 10             	add    esp,0x10
c0022846:	83 c4 0c             	add    esp,0xc
c0022849:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002284c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002284c:	90                   	nop
c002284d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022850 <ThreadControlBlock::ThreadControlBlock()>:
c0022850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022854:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002285b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002285f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002286a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022875:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002287c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022880:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002288b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002288f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022893:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022897:	90                   	nop
c0022898:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002289c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002289c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00228a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00228b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00228c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00228d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228dc:	90                   	nop
c00228dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00228e0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00228e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00228e7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00228e8 <Vm::_FPUState::_FPUState()>:
c00228e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228ec:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00228f3:	90                   	nop
c00228f4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00228f6 <PCI::~PCI()>:
c00228f6:	83 ec 0c             	sub    esp,0xc
c00228f9:	ba 30 60 02 c0       	mov    edx,0xc0026030
c00228fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022902:	89 10                	mov    DWORD PTR [eax],edx
c0022904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022908:	83 ec 0c             	sub    esp,0xc
c002290b:	50                   	push   eax
c002290c:	e8 17 b0 fe ff       	call   c000d928 <Bus::~Bus()>
c0022911:	83 c4 10             	add    esp,0x10
c0022914:	90                   	nop
c0022915:	83 c4 0c             	add    esp,0xc
c0022918:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002291a <PCI::~PCI()>:
c002291a:	83 ec 0c             	sub    esp,0xc
c002291d:	83 ec 0c             	sub    esp,0xc
c0022920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022924:	e8 cd ff ff ff       	call   c00228f6 <PCI::~PCI()>
c0022929:	83 c4 10             	add    esp,0x10
c002292c:	83 ec 08             	sub    esp,0x8
c002292f:	68 5c 01 00 00       	push   0x15c
c0022934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022938:	e8 25 a2 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c002293d:	83 c4 10             	add    esp,0x10
c0022940:	83 c4 0c             	add    esp,0xc
c0022943:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022944 <IDE::~IDE()>:
c0022944:	83 ec 0c             	sub    esp,0xc
c0022947:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c002294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022950:	89 10                	mov    DWORD PTR [eax],edx
c0022952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022956:	83 ec 0c             	sub    esp,0xc
c0022959:	50                   	push   eax
c002295a:	e8 11 bb fe ff       	call   c000e470 <HardDiskController::~HardDiskController()>
c002295f:	83 c4 10             	add    esp,0x10
c0022962:	90                   	nop
c0022963:	83 c4 0c             	add    esp,0xc
c0022966:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022968 <IDE::~IDE()>:
c0022968:	83 ec 0c             	sub    esp,0xc
c002296b:	83 ec 0c             	sub    esp,0xc
c002296e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022972:	e8 cd ff ff ff       	call   c0022944 <IDE::~IDE()>
c0022977:	83 c4 10             	add    esp,0x10
c002297a:	83 ec 08             	sub    esp,0x8
c002297d:	68 70 02 00 00       	push   0x270
c0022982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022986:	e8 d7 a1 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c002298b:	83 c4 10             	add    esp,0x10
c002298e:	83 c4 0c             	add    esp,0xc
c0022991:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022992 <SATABus::~SATABus()>:
c0022992:	83 ec 0c             	sub    esp,0xc
c0022995:	ba 5c 61 02 c0       	mov    edx,0xc002615c
c002299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299e:	89 10                	mov    DWORD PTR [eax],edx
c00229a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a4:	83 ec 0c             	sub    esp,0xc
c00229a7:	50                   	push   eax
c00229a8:	e8 c3 ba fe ff       	call   c000e470 <HardDiskController::~HardDiskController()>
c00229ad:	83 c4 10             	add    esp,0x10
c00229b0:	90                   	nop
c00229b1:	83 c4 0c             	add    esp,0xc
c00229b4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00229b6 <SATABus::~SATABus()>:
c00229b6:	83 ec 0c             	sub    esp,0xc
c00229b9:	83 ec 0c             	sub    esp,0xc
c00229bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229c0:	e8 cd ff ff ff       	call   c0022992 <SATABus::~SATABus()>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	83 ec 08             	sub    esp,0x8
c00229cb:	68 64 01 00 00       	push   0x164
c00229d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229d4:	e8 89 a1 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c00229d9:	83 c4 10             	add    esp,0x10
c00229dc:	83 c4 0c             	add    esp,0xc
c00229df:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00229e0 <ATA::~ATA()>:
c00229e0:	83 ec 0c             	sub    esp,0xc
c00229e3:	ba d4 61 02 c0       	mov    edx,0xc00261d4
c00229e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ec:	89 10                	mov    DWORD PTR [eax],edx
c00229ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f2:	83 ec 0c             	sub    esp,0xc
c00229f5:	50                   	push   eax
c00229f6:	e8 57 bb fe ff       	call   c000e552 <PhysicalDisk::~PhysicalDisk()>
c00229fb:	83 c4 10             	add    esp,0x10
c00229fe:	90                   	nop
c00229ff:	83 c4 0c             	add    esp,0xc
c0022a02:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022a04 <ATA::~ATA()>:
c0022a04:	83 ec 0c             	sub    esp,0xc
c0022a07:	83 ec 0c             	sub    esp,0xc
c0022a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a0e:	e8 cd ff ff ff       	call   c00229e0 <ATA::~ATA()>
c0022a13:	83 c4 10             	add    esp,0x10
c0022a16:	83 ec 08             	sub    esp,0x8
c0022a19:	68 7c 01 00 00       	push   0x17c
c0022a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a22:	e8 3b a1 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022a27:	83 c4 10             	add    esp,0x10
c0022a2a:	83 c4 0c             	add    esp,0xc
c0022a2d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022a2e <ATAPI::~ATAPI()>:
c0022a2e:	83 ec 0c             	sub    esp,0xc
c0022a31:	ba 0c 62 02 c0       	mov    edx,0xc002620c
c0022a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3a:	89 10                	mov    DWORD PTR [eax],edx
c0022a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a40:	83 ec 0c             	sub    esp,0xc
c0022a43:	50                   	push   eax
c0022a44:	e8 09 bb fe ff       	call   c000e552 <PhysicalDisk::~PhysicalDisk()>
c0022a49:	83 c4 10             	add    esp,0x10
c0022a4c:	90                   	nop
c0022a4d:	83 c4 0c             	add    esp,0xc
c0022a50:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022a52 <ATAPI::~ATAPI()>:
c0022a52:	83 ec 0c             	sub    esp,0xc
c0022a55:	83 ec 0c             	sub    esp,0xc
c0022a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a5c:	e8 cd ff ff ff       	call   c0022a2e <ATAPI::~ATAPI()>
c0022a61:	83 c4 10             	add    esp,0x10
c0022a64:	83 ec 08             	sub    esp,0x8
c0022a67:	68 80 01 00 00       	push   0x180
c0022a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a70:	e8 ed a0 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022a75:	83 c4 10             	add    esp,0x10
c0022a78:	83 c4 0c             	add    esp,0xc
c0022a7b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022a7c <SATA::~SATA()>:
c0022a7c:	83 ec 0c             	sub    esp,0xc
c0022a7f:	ba c0 62 02 c0       	mov    edx,0xc00262c0
c0022a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a88:	89 10                	mov    DWORD PTR [eax],edx
c0022a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8e:	83 ec 0c             	sub    esp,0xc
c0022a91:	50                   	push   eax
c0022a92:	e8 bb ba fe ff       	call   c000e552 <PhysicalDisk::~PhysicalDisk()>
c0022a97:	83 c4 10             	add    esp,0x10
c0022a9a:	90                   	nop
c0022a9b:	83 c4 0c             	add    esp,0xc
c0022a9e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022aa0 <SATA::~SATA()>:
c0022aa0:	83 ec 0c             	sub    esp,0xc
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aaa:	e8 cd ff ff ff       	call   c0022a7c <SATA::~SATA()>
c0022aaf:	83 c4 10             	add    esp,0x10
c0022ab2:	83 ec 08             	sub    esp,0x8
c0022ab5:	68 7c 01 00 00       	push   0x17c
c0022aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022abe:	e8 9f a0 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022ac3:	83 c4 10             	add    esp,0x10
c0022ac6:	83 c4 0c             	add    esp,0xc
c0022ac9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022aca <SATAPI::~SATAPI()>:
c0022aca:	83 ec 0c             	sub    esp,0xc
c0022acd:	ba 9c 63 02 c0       	mov    edx,0xc002639c
c0022ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad6:	89 10                	mov    DWORD PTR [eax],edx
c0022ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	50                   	push   eax
c0022ae0:	e8 6d ba fe ff       	call   c000e552 <PhysicalDisk::~PhysicalDisk()>
c0022ae5:	83 c4 10             	add    esp,0x10
c0022ae8:	90                   	nop
c0022ae9:	83 c4 0c             	add    esp,0xc
c0022aec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022aee <SATAPI::~SATAPI()>:
c0022aee:	83 ec 0c             	sub    esp,0xc
c0022af1:	83 ec 0c             	sub    esp,0xc
c0022af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022af8:	e8 cd ff ff ff       	call   c0022aca <SATAPI::~SATAPI()>
c0022afd:	83 c4 10             	add    esp,0x10
c0022b00:	83 ec 08             	sub    esp,0x8
c0022b03:	68 80 01 00 00       	push   0x180
c0022b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b0c:	e8 51 a0 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022b11:	83 c4 10             	add    esp,0x10
c0022b14:	83 c4 0c             	add    esp,0xc
c0022b17:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0022b18 <AVX::~AVX()>:
c0022b18:	83 ec 0c             	sub    esp,0xc
c0022b1b:	ba dc 63 02 c0       	mov    edx,0xc00263dc
c0022b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b24:	89 10                	mov    DWORD PTR [eax],edx
c0022b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2a:	83 ec 0c             	sub    esp,0xc
c0022b2d:	50                   	push   eax
c0022b2e:	e8 a5 ba fe ff       	call   c000e5d8 <FPU::~FPU()>
c0022b33:	83 c4 10             	add    esp,0x10
c0022b36:	90                   	nop
c0022b37:	83 c4 0c             	add    esp,0xc
c0022b3a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0022b3c <AVX::~AVX()>:
c0022b3c:	83 ec 0c             	sub    esp,0xc
c0022b3f:	83 ec 0c             	sub    esp,0xc
c0022b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b46:	e8 cd ff ff ff       	call   c0022b18 <AVX::~AVX()>
c0022b4b:	83 c4 10             	add    esp,0x10
c0022b4e:	83 ec 08             	sub    esp,0x8
c0022b51:	68 58 01 00 00       	push   0x158
c0022b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b5a:	e8 03 a0 fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022b5f:	83 c4 10             	add    esp,0x10
c0022b62:	83 c4 0c             	add    esp,0xc
c0022b65:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0022b68 <MMX::~MMX()>:
c0022b68:	83 ec 0c             	sub    esp,0xc
c0022b6b:	ba 1c 64 02 c0       	mov    edx,0xc002641c
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	89 10                	mov    DWORD PTR [eax],edx
c0022b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7a:	83 ec 0c             	sub    esp,0xc
c0022b7d:	50                   	push   eax
c0022b7e:	e8 55 ba fe ff       	call   c000e5d8 <FPU::~FPU()>
c0022b83:	83 c4 10             	add    esp,0x10
c0022b86:	90                   	nop
c0022b87:	83 c4 0c             	add    esp,0xc
c0022b8a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0022b8c <MMX::~MMX()>:
c0022b8c:	83 ec 0c             	sub    esp,0xc
c0022b8f:	83 ec 0c             	sub    esp,0xc
c0022b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b96:	e8 cd ff ff ff       	call   c0022b68 <MMX::~MMX()>
c0022b9b:	83 c4 10             	add    esp,0x10
c0022b9e:	83 ec 08             	sub    esp,0x8
c0022ba1:	68 58 01 00 00       	push   0x158
c0022ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022baa:	e8 b3 9f fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022baf:	83 c4 10             	add    esp,0x10
c0022bb2:	83 c4 0c             	add    esp,0xc
c0022bb5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0022bb8 <SSE::~SSE()>:
c0022bb8:	83 ec 0c             	sub    esp,0xc
c0022bbb:	ba 5c 64 02 c0       	mov    edx,0xc002645c
c0022bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc4:	89 10                	mov    DWORD PTR [eax],edx
c0022bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bca:	83 ec 0c             	sub    esp,0xc
c0022bcd:	50                   	push   eax
c0022bce:	e8 05 ba fe ff       	call   c000e5d8 <FPU::~FPU()>
c0022bd3:	83 c4 10             	add    esp,0x10
c0022bd6:	90                   	nop
c0022bd7:	83 c4 0c             	add    esp,0xc
c0022bda:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0022bdc <SSE::~SSE()>:
c0022bdc:	83 ec 0c             	sub    esp,0xc
c0022bdf:	83 ec 0c             	sub    esp,0xc
c0022be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be6:	e8 cd ff ff ff       	call   c0022bb8 <SSE::~SSE()>
c0022beb:	83 c4 10             	add    esp,0x10
c0022bee:	83 ec 08             	sub    esp,0x8
c0022bf1:	68 58 01 00 00       	push   0x158
c0022bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bfa:	e8 63 9f fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022bff:	83 c4 10             	add    esp,0x10
c0022c02:	83 c4 0c             	add    esp,0xc
c0022c05:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0022c08 <x87::~x87()>:
c0022c08:	83 ec 0c             	sub    esp,0xc
c0022c0b:	ba 9c 64 02 c0       	mov    edx,0xc002649c
c0022c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c14:	89 10                	mov    DWORD PTR [eax],edx
c0022c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1a:	83 ec 0c             	sub    esp,0xc
c0022c1d:	50                   	push   eax
c0022c1e:	e8 b5 b9 fe ff       	call   c000e5d8 <FPU::~FPU()>
c0022c23:	83 c4 10             	add    esp,0x10
c0022c26:	90                   	nop
c0022c27:	83 c4 0c             	add    esp,0xc
c0022c2a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0022c2c <x87::~x87()>:
c0022c2c:	83 ec 0c             	sub    esp,0xc
c0022c2f:	83 ec 0c             	sub    esp,0xc
c0022c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c36:	e8 cd ff ff ff       	call   c0022c08 <x87::~x87()>
c0022c3b:	83 c4 10             	add    esp,0x10
c0022c3e:	83 ec 08             	sub    esp,0x8
c0022c41:	68 58 01 00 00       	push   0x158
c0022c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c4a:	e8 13 9f fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022c4f:	83 c4 10             	add    esp,0x10
c0022c52:	83 c4 0c             	add    esp,0xc
c0022c55:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022c56 <IOAPIC::~IOAPIC()>:
c0022c56:	83 ec 0c             	sub    esp,0xc
c0022c59:	ba f4 65 02 c0       	mov    edx,0xc00265f4
c0022c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c62:	89 10                	mov    DWORD PTR [eax],edx
c0022c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c68:	83 ec 0c             	sub    esp,0xc
c0022c6b:	50                   	push   eax
c0022c6c:	e8 e7 b2 fe ff       	call   c000df58 <Device::~Device()>
c0022c71:	83 c4 10             	add    esp,0x10
c0022c74:	90                   	nop
c0022c75:	83 c4 0c             	add    esp,0xc
c0022c78:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022c7a <IOAPIC::~IOAPIC()>:
c0022c7a:	83 ec 0c             	sub    esp,0xc
c0022c7d:	83 ec 0c             	sub    esp,0xc
c0022c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c84:	e8 cd ff ff ff       	call   c0022c56 <IOAPIC::~IOAPIC()>
c0022c89:	83 c4 10             	add    esp,0x10
c0022c8c:	83 ec 08             	sub    esp,0x8
c0022c8f:	68 68 01 00 00       	push   0x168
c0022c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c98:	e8 c5 9e fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022c9d:	83 c4 10             	add    esp,0x10
c0022ca0:	83 c4 0c             	add    esp,0xc
c0022ca3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0022ca4 <APIC::~APIC()>:
c0022ca4:	83 ec 0c             	sub    esp,0xc
c0022ca7:	ba ac 65 02 c0       	mov    edx,0xc00265ac
c0022cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb0:	89 10                	mov    DWORD PTR [eax],edx
c0022cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb6:	83 ec 0c             	sub    esp,0xc
c0022cb9:	50                   	push   eax
c0022cba:	e8 ed bd fe ff       	call   c000eaac <InterruptController::~InterruptController()>
c0022cbf:	83 c4 10             	add    esp,0x10
c0022cc2:	90                   	nop
c0022cc3:	83 c4 0c             	add    esp,0xc
c0022cc6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0022cc8 <APIC::~APIC()>:
c0022cc8:	83 ec 0c             	sub    esp,0xc
c0022ccb:	83 ec 0c             	sub    esp,0xc
c0022cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cd2:	e8 cd ff ff ff       	call   c0022ca4 <APIC::~APIC()>
c0022cd7:	83 c4 10             	add    esp,0x10
c0022cda:	83 ec 08             	sub    esp,0x8
c0022cdd:	68 58 21 00 00       	push   0x2158
c0022ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ce6:	e8 77 9e fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022ceb:	83 c4 10             	add    esp,0x10
c0022cee:	83 c4 0c             	add    esp,0xc
c0022cf1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0022cf2 <PIC::~PIC()>:
c0022cf2:	83 ec 0c             	sub    esp,0xc
c0022cf5:	ba 44 66 02 c0       	mov    edx,0xc0026644
c0022cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfe:	89 10                	mov    DWORD PTR [eax],edx
c0022d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d04:	83 ec 0c             	sub    esp,0xc
c0022d07:	50                   	push   eax
c0022d08:	e8 9f bd fe ff       	call   c000eaac <InterruptController::~InterruptController()>
c0022d0d:	83 c4 10             	add    esp,0x10
c0022d10:	90                   	nop
c0022d11:	83 c4 0c             	add    esp,0xc
c0022d14:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0022d16 <PIC::~PIC()>:
c0022d16:	83 ec 0c             	sub    esp,0xc
c0022d19:	83 ec 0c             	sub    esp,0xc
c0022d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d20:	e8 cd ff ff ff       	call   c0022cf2 <PIC::~PIC()>
c0022d25:	83 c4 10             	add    esp,0x10
c0022d28:	83 ec 08             	sub    esp,0x8
c0022d2b:	68 58 21 00 00       	push   0x2158
c0022d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d34:	e8 29 9e fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022d39:	83 c4 10             	add    esp,0x10
c0022d3c:	83 c4 0c             	add    esp,0xc
c0022d3f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022d40 <APICTimer::~APICTimer()>:
c0022d40:	83 ec 0c             	sub    esp,0xc
c0022d43:	ba 98 66 02 c0       	mov    edx,0xc0026698
c0022d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d4c:	89 10                	mov    DWORD PTR [eax],edx
c0022d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d52:	83 ec 0c             	sub    esp,0xc
c0022d55:	50                   	push   eax
c0022d56:	e8 5d db fe ff       	call   c00108b8 <Timer::~Timer()>
c0022d5b:	83 c4 10             	add    esp,0x10
c0022d5e:	90                   	nop
c0022d5f:	83 c4 0c             	add    esp,0xc
c0022d62:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022d64 <APICTimer::~APICTimer()>:
c0022d64:	83 ec 0c             	sub    esp,0xc
c0022d67:	83 ec 0c             	sub    esp,0xc
c0022d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d6e:	e8 cd ff ff ff       	call   c0022d40 <APICTimer::~APICTimer()>
c0022d73:	83 c4 10             	add    esp,0x10
c0022d76:	83 ec 08             	sub    esp,0x8
c0022d79:	68 60 01 00 00       	push   0x160
c0022d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d82:	e8 db 9d fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022d87:	83 c4 10             	add    esp,0x10
c0022d8a:	83 c4 0c             	add    esp,0xc
c0022d8d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022d90 <PIT::~PIT()>:
c0022d90:	83 ec 0c             	sub    esp,0xc
c0022d93:	ba e8 66 02 c0       	mov    edx,0xc00266e8
c0022d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9c:	89 10                	mov    DWORD PTR [eax],edx
c0022d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da2:	83 ec 0c             	sub    esp,0xc
c0022da5:	50                   	push   eax
c0022da6:	e8 0d db fe ff       	call   c00108b8 <Timer::~Timer()>
c0022dab:	83 c4 10             	add    esp,0x10
c0022dae:	90                   	nop
c0022daf:	83 c4 0c             	add    esp,0xc
c0022db2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022db4 <PIT::~PIT()>:
c0022db4:	83 ec 0c             	sub    esp,0xc
c0022db7:	83 ec 0c             	sub    esp,0xc
c0022dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dbe:	e8 cd ff ff ff       	call   c0022d90 <PIT::~PIT()>
c0022dc3:	83 c4 10             	add    esp,0x10
c0022dc6:	83 ec 08             	sub    esp,0x8
c0022dc9:	68 5c 01 00 00       	push   0x15c
c0022dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dd2:	e8 8b 9d fe ff       	call   c000cb62 <operator delete(void*, unsigned long)>
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	83 c4 0c             	add    esp,0xc
c0022ddd:	c3                   	ret    
