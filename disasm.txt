
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6f 7a 00 00       	call   c0007a8f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c5 c5 01 00       	call   c001c5ea <_init>
c0000025:	c3                   	ret    
c0000026:	bb 86 d0 01 c0       	mov    ebx,0xc001d086
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 d0 01 c0    	cmp    ebx,0xc001d090
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 fb 01 c0       	mov    eax,0xc001fb38
c0000049:	3d 38 fb 01 c0       	cmp    eax,0xc001fb38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 fb 01 c0       	push   0xc001fb38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 fb 01 c0       	mov    eax,0xc001fb38
c0000075:	2d 38 fb 01 c0       	sub    eax,0xc001fb38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 fb 01 c0       	push   0xc001fb38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c4 fc 01 c0 00 	cmp    BYTE PTR ds:0xc001fcc4,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 d0 01 c0       	mov    ebx,0xc001d098
c00000bb:	81 eb 94 d0 01 c0    	sub    ebx,0xc001d094
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 d0 01 c0       	mov    esi,0xc001d094
c00000ca:	a1 c8 fc 01 c0       	mov    eax,ds:0xc001fcc8
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c8 fc 01 c0       	mov    ds:0xc001fcc8,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c8 fc 01 c0       	mov    eax,ds:0xc001fcc8
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 fb 01 c0       	push   0xc001fb38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c4 fc 01 c0 01 	mov    BYTE PTR ds:0xc001fcc4,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 cc fc 01 c0       	push   0xc001fccc
c000012c:	68 38 fb 01 c0       	push   0xc001fb38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 cc 2b 01 00       	call   c0012e9c <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 70 a2 00 00       	call   c000a558 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 aa 2b 01 00       	call   c0012e9c <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 7b 30 01 00       	call   c001338c <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 ca 36 01 00       	call   c00139e4 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 50 0b 02 c0 	lgdtd  ds:0xc0020b50
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 f8 66 00 00       	jmp    c0006a9a <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 e4 fc 01 c0       	mov    ds:0xc001fce4,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 e4 fc 01 c0    	mov    DWORD PTR ds:0xc001fce4,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d e4 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fce4
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 d0 01 c0 02 	test   BYTE PTR [edx-0x3ffe2f60],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 a0 d0 01 c0 01 	test   BYTE PTR [edx-0x3ffe2f60],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 a0 d0 01 c0 08 	test   BYTE PTR [edx-0x3ffe2f60],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 a0 d0 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2f60],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 a0 d0 01 c0 01 	test   BYTE PTR [edx-0x3ffe2f60],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 00 fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fd00
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 00 fd 01 c0    	mov    DWORD PTR ds:0xc001fd00,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 04 fd 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe02fc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 04 fd 01 c0 	mov    DWORD PTR [eax*4-0x3ffe02fc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 00 fd 01 c0    	mov    DWORD PTR ds:0xc001fd00,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 2c fd 01 c0    	cmp    DWORD PTR ds:0xc001fd2c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 3c fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fd3c
c0000d5d:	c7 42 0c 34 fd 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fd34
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 3c fd 01 c0    	mov    DWORD PTR ds:0xc001fd3c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 2c fd 01 c0    	mov    DWORD PTR ds:0xc001fd2c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 00 fd 01 c0 02 	test   BYTE PTR ds:0xc001fd00,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 62 6a 00 00       	call   c00078a0 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 a4 69 00 00       	call   c00078a0 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 8e 69 00 00       	call   c00078a0 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 6a 69 00 00       	call   c00078a0 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 00 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fd00
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 04 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe02fc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 04 fd 01 c0 	mov    DWORD PTR [edx*4-0x3ffe02fc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 34 fd 01 c0 	lea    edx,[eax*8-0x3ffe02cc]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 40 fd 01 c0    	mov    ebx,DWORD PTR ds:0xc001fd40
c00010df:	81 fb 34 fd 01 c0    	cmp    ebx,0xc001fd34
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 34 fd 01 c0       	cmp    eax,0xc001fd34
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 30 fd 01 c0    	cmp    DWORD PTR ds:0xc001fd30,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 3c fd 01 c0       	mov    ds:0xc001fd3c,eax
c000111b:	a3 40 fd 01 c0       	mov    ds:0xc001fd40,eax
c0001120:	a3 30 fd 01 c0       	mov    ds:0xc001fd30,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 34 fd 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fd34
c000112e:	c7 40 0c 34 fd 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fd34
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 40 fd 01 c0       	mov    ds:0xc001fd40,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 34 fd 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fd34
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 f8 fc 01 c0 	lea    ebp,[edx*4-0x3ffe0308]
c000117f:	8b 14 95 00 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0300]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 00 fd 01 c0 	lea    ecx,[edx*4-0x3ffe0300]
c000119a:	8b 14 95 00 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0300]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 34 00 02 c0 	or     DWORD PTR [edi*4-0x3ffdffcc],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 34 fd 01 c0 	lea    eax,[eax*8-0x3ffe02cc]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 3c fd 01 c0    	mov    DWORD PTR ds:0xc001fd3c,ecx
c0001254:	89 0d 40 fd 01 c0    	mov    DWORD PTR ds:0xc001fd40,ecx
c000125a:	c7 41 08 34 fd 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fd34
c0001261:	c7 41 0c 34 fd 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fd34
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 2c fd 01 c0 	lea    edx,[ecx*8-0x3ffe02d4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 34 00 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdffcc]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 34 00 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdffcc]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 2c fd 01 c0 	lea    edx,[eax*4-0x3ffe02d4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 34 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdffcc],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 3c fd 01 c0    	mov    DWORD PTR ds:0xc001fd3c,edi
c0001327:	89 3d 40 fd 01 c0    	mov    DWORD PTR ds:0xc001fd40,edi
c000132d:	c7 47 08 34 fd 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fd34
c0001334:	c7 47 0c 34 fd 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fd34
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 30 fd 01 c0    	mov    DWORD PTR ds:0xc001fd30,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 2c fd 01 c0       	mov    eax,ds:0xc001fd2c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 2c fd 01 c0    	mov    DWORD PTR ds:0xc001fd2c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 00 fd 01 c0       	mov    edx,0xc001fd00
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 00 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fd00,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 54 00 02 c0    	mov    ebx,DWORD PTR ds:0xc0020054
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 54 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020054,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 54 00 02 c0    	mov    DWORD PTR ds:0xc0020054,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 2c fd 01 c0    	cmp    DWORD PTR ds:0xc001fd2c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 2c fd 01 c0    	mov    DWORD PTR ds:0xc001fd2c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 00 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fd00,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 5c 00 02 c0    	push   DWORD PTR ds:0xc002005c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 00 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fd00,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 5c 00 02 c0       	mov    eax,ds:0xc002005c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 2c fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fd2c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 2c fd 01 c0       	mov    eax,ds:0xc001fd2c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 04 fd 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe02fc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 34 fd 01 c0       	mov    eax,0xc001fd34
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 2c 00 02 c0       	cmp    eax,0xc002002c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 68 00 02 c0       	mov    eax,ds:0xc0020068
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 50 00 02 c0    	mov    esi,DWORD PTR ds:0xc0020050
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 64 00 02 c0    	mov    esi,DWORD PTR ds:0xc0020064
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 74 00 02 c0    	mov    esi,DWORD PTR ds:0xc0020074
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 00 fd 01 c0       	mov    eax,0xc001fd00
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 a4 d1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2e5c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 00 fd 01 c0       	mov    eax,ds:0xc001fd00
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 00 fd 01 c0       	mov    ds:0xc001fd00,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 44 00 02 c0    	mov    DWORD PTR ds:0xc0020044,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 48 00 02 c0    	mov    DWORD PTR ds:0xc0020048,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 4c 00 02 c0    	mov    DWORD PTR ds:0xc002004c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 54 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020054,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 02 4f 01 00       	jmp    c0016c0c <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 30 4f 01 00       	jmp    c0016c50 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 55 4f 01 00       	jmp    c0016c94 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 00 d3 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2d00]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 00 d3 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2d00]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba 08 f1 01 c0       	mov    edx,0xc001f108
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba bc d1 01 c0       	mov    edx,0xc001d1bc
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 a0 00 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdff60]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 80 00 02 c0    	mov    ax,ds:0xc0020080
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 80 00 02 c0    	mov    ds:0xc0020080,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 c2 d1 01 c0       	mov    eax,0xc001d1c2
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 80 d2 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2d80]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 cb d1 01 c0       	mov    eax,0xc001d1cb
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 00 d3 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2d00]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 a0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff60]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 a0 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdff60],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 50 d2 01 c0       	mov    eax,0xc001d250
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 a0 00 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdff60]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 40 d2 01 c0       	mov    ebx,0xc001d240
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 20 d2 01 c0       	mov    edx,0xc001d220
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 30 d2 01 c0       	mov    edx,0xc001d230
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba d2 d1 01 c0       	mov    edx,0xc001d1d2
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba de d1 01 c0       	mov    edx,0xc001d1de
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba f2 d1 01 c0       	mov    edx,0xc001d1f2
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 2e 1f 00 00       	call   c00079c9 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 26 1f 00 00       	call   c00079d9 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 20 d6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d620
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 20 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d620
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 20 d4 01 c0       	mov    eax,0xc001d420
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 60 d3 01 c0       	mov    eax,0xc001d360
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 20 d3 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ce0]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	31 c9                	xor    ecx,ecx
c0005d67:	56                   	push   esi
c0005d68:	89 d7                	mov    edi,edx
c0005d6a:	53                   	push   ebx
c0005d6b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d6f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d73:	89 de                	mov    esi,ebx
c0005d75:	c1 fe 08             	sar    esi,0x8
c0005d78:	89 f2                	mov    edx,esi
c0005d7a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d7d:	41                   	inc    ecx
c0005d7e:	85 db                	test   ebx,ebx
c0005d80:	75 e9                	jne    c0005d6b <utf2ucs+0x7>
c0005d82:	5b                   	pop    ebx
c0005d83:	5e                   	pop    esi
c0005d84:	5f                   	pop    edi
c0005d85:	c3                   	ret    

c0005d86 <ucs2utfn>:
c0005d86:	83 e1 fe             	and    ecx,0xfffffffe
c0005d89:	01 d1                	add    ecx,edx
c0005d8b:	39 d1                	cmp    ecx,edx
c0005d8d:	75 04                	jne    c0005d93 <ucs2utfn+0xd>
c0005d8f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d92:	c3                   	ret    
c0005d93:	57                   	push   edi
c0005d94:	56                   	push   esi
c0005d95:	53                   	push   ebx
c0005d96:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d99:	83 c2 02             	add    edx,0x2
c0005d9c:	89 de                	mov    esi,ebx
c0005d9e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005da2:	c1 e6 08             	shl    esi,0x8
c0005da5:	09 f3                	or     ebx,esi
c0005da7:	83 fb 3b             	cmp    ebx,0x3b
c0005daa:	74 51                	je     c0005dfd <ucs2utfn+0x77>
c0005dac:	83 fb 7f             	cmp    ebx,0x7f
c0005daf:	7f 05                	jg     c0005db6 <ucs2utfn+0x30>
c0005db1:	88 18                	mov    BYTE PTR [eax],bl
c0005db3:	40                   	inc    eax
c0005db4:	eb 43                	jmp    c0005df9 <ucs2utfn+0x73>
c0005db6:	89 de                	mov    esi,ebx
c0005db8:	89 df                	mov    edi,ebx
c0005dba:	c1 fe 06             	sar    esi,0x6
c0005dbd:	83 e7 3f             	and    edi,0x3f
c0005dc0:	83 cf 80             	or     edi,0xffffff80
c0005dc3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005dc9:	7f 12                	jg     c0005ddd <ucs2utfn+0x57>
c0005dcb:	89 f3                	mov    ebx,esi
c0005dcd:	83 c0 02             	add    eax,0x2
c0005dd0:	83 cb c0             	or     ebx,0xffffffc0
c0005dd3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd6:	89 fb                	mov    ebx,edi
c0005dd8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005ddb:	eb 1c                	jmp    c0005df9 <ucs2utfn+0x73>
c0005ddd:	c1 fb 0c             	sar    ebx,0xc
c0005de0:	83 e6 3f             	and    esi,0x3f
c0005de3:	83 cb e0             	or     ebx,0xffffffe0
c0005de6:	83 c0 03             	add    eax,0x3
c0005de9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dec:	89 f3                	mov    ebx,esi
c0005dee:	83 cb 80             	or     ebx,0xffffff80
c0005df1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005df4:	89 fb                	mov    ebx,edi
c0005df6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005df9:	39 d1                	cmp    ecx,edx
c0005dfb:	75 99                	jne    c0005d96 <ucs2utfn+0x10>
c0005dfd:	5b                   	pop    ebx
c0005dfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005e01:	5e                   	pop    esi
c0005e02:	5f                   	pop    edi
c0005e03:	c3                   	ret    

c0005e04 <isjoliet>:
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e09:	75 22                	jne    c0005e2d <isjoliet+0x29>
c0005e0b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e0f:	75 1c                	jne    c0005e2d <isjoliet+0x29>
c0005e11:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e14:	ba 02 00 00 00       	mov    edx,0x2
c0005e19:	3c 43                	cmp    al,0x43
c0005e1b:	74 10                	je     c0005e2d <isjoliet+0x29>
c0005e1d:	ba 03 00 00 00       	mov    edx,0x3
c0005e22:	3c 45                	cmp    al,0x45
c0005e24:	74 07                	je     c0005e2d <isjoliet+0x29>
c0005e26:	31 d2                	xor    edx,edx
c0005e28:	3c 40                	cmp    al,0x40
c0005e2a:	0f 94 c2             	sete   dl
c0005e2d:	89 d0                	mov    eax,edx
c0005e2f:	c3                   	ret    

c0005e30 <htohl_32>:
c0005e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e32:	c3                   	ret    

c0005e33 <iso_733>:
c0005e33:	eb fb                	jmp    c0005e30 <htohl_32>

c0005e35 <bclear_cache>:
c0005e35:	31 d2                	xor    edx,edx
c0005e37:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e3a:	42                   	inc    edx
c0005e3b:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
c0005e41:	83 fa 10             	cmp    edx,0x10
c0005e44:	75 f1                	jne    c0005e37 <bclear_cache+0x2>
c0005e46:	c3                   	ret    

c0005e47 <bgrad_cache>:
c0005e47:	83 fa 0e             	cmp    edx,0xe
c0005e4a:	77 16                	ja     c0005e62 <bgrad_cache+0x1b>
c0005e4c:	53                   	push   ebx
c0005e4d:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e50:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e54:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e57:	42                   	inc    edx
c0005e58:	83 fa 0f             	cmp    edx,0xf
c0005e5b:	75 f3                	jne    c0005e50 <bgrad_cache+0x9>
c0005e5d:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e60:	5b                   	pop    ebx
c0005e61:	c3                   	ret    
c0005e62:	c3                   	ret    

c0005e63 <bclear>:
c0005e63:	b8 c0 0a 02 c0       	mov    eax,0xc0020ac0
c0005e68:	e8 c8 ff ff ff       	call   c0005e35 <bclear_cache>
c0005e6d:	b8 00 0b 02 c0       	mov    eax,0xc0020b00
c0005e72:	eb c1                	jmp    c0005e35 <bclear_cache>

c0005e74 <iso_break_all>:
c0005e74:	31 c0                	xor    eax,eax
c0005e76:	c7 80 d0 01 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfe30],0x1
c0005e80:	05 94 00 00 00       	add    eax,0x94
c0005e85:	3d 40 09 00 00       	cmp    eax,0x940
c0005e8a:	75 ea                	jne    c0005e76 <iso_break_all+0x2>
c0005e8c:	c3                   	ret    

c0005e8d <ucscompare>:
c0005e8d:	55                   	push   ebp
c0005e8e:	57                   	push   edi
c0005e8f:	89 c7                	mov    edi,eax
c0005e91:	56                   	push   esi
c0005e92:	89 d6                	mov    esi,edx
c0005e94:	53                   	push   ebx
c0005e95:	31 d2                	xor    edx,edx
c0005e97:	83 ec 1c             	sub    esp,0x1c
c0005e9a:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e9e:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ea3:	c1 e3 08             	shl    ebx,0x8
c0005ea6:	09 c3                	or     ebx,eax
c0005ea8:	39 ca                	cmp    edx,ecx
c0005eaa:	7d 42                	jge    c0005eee <ucscompare+0x61>
c0005eac:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005eb0:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005eb5:	c1 e0 08             	shl    eax,0x8
c0005eb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005ebc:	09 e8                	or     eax,ebp
c0005ebe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ec2:	83 f8 3b             	cmp    eax,0x3b
c0005ec5:	74 27                	je     c0005eee <ucscompare+0x61>
c0005ec7:	83 ec 0c             	sub    esp,0xc
c0005eca:	50                   	push   eax
c0005ecb:	e8 20 aa ff ff       	call   c00008f0 <tolower>
c0005ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005ed3:	89 c5                	mov    ebp,eax
c0005ed5:	e8 16 aa ff ff       	call   c00008f0 <tolower>
c0005eda:	83 c4 10             	add    esp,0x10
c0005edd:	39 c5                	cmp    ebp,eax
c0005edf:	75 20                	jne    c0005f01 <ucscompare+0x74>
c0005ee1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ee9:	83 c2 02             	add    edx,0x2
c0005eec:	eb ac                	jmp    c0005e9a <ucscompare+0xd>
c0005eee:	85 db                	test   ebx,ebx
c0005ef0:	0f 95 c2             	setne  dl
c0005ef3:	31 c0                	xor    eax,eax
c0005ef5:	83 fb 2f             	cmp    ebx,0x2f
c0005ef8:	0f 95 c0             	setne  al
c0005efb:	21 d0                	and    eax,edx
c0005efd:	f7 d8                	neg    eax
c0005eff:	eb 03                	jmp    c0005f04 <ucscompare+0x77>
c0005f01:	83 c8 ff             	or     eax,0xffffffff
c0005f04:	83 c4 1c             	add    esp,0x1c
c0005f07:	5b                   	pop    ebx
c0005f08:	5e                   	pop    esi
c0005f09:	5f                   	pop    edi
c0005f0a:	5d                   	pop    ebp
c0005f0b:	c3                   	ret    

c0005f0c <fncompare>:
c0005f0c:	55                   	push   ebp
c0005f0d:	57                   	push   edi
c0005f0e:	89 c7                	mov    edi,eax
c0005f10:	56                   	push   esi
c0005f11:	89 ce                	mov    esi,ecx
c0005f13:	53                   	push   ebx
c0005f14:	31 db                	xor    ebx,ebx
c0005f16:	83 ec 1c             	sub    esp,0x1c
c0005f19:	39 d3                	cmp    ebx,edx
c0005f1b:	7d 43                	jge    c0005f60 <fncompare+0x54>
c0005f1d:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f21:	3c 3b                	cmp    al,0x3b
c0005f23:	74 3b                	je     c0005f60 <fncompare+0x54>
c0005f25:	3c 2e                	cmp    al,0x2e
c0005f27:	75 0e                	jne    c0005f37 <fncompare+0x2b>
c0005f29:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f2c:	39 d9                	cmp    ecx,ebx
c0005f2e:	74 30                	je     c0005f60 <fncompare+0x54>
c0005f30:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f35:	74 29                	je     c0005f60 <fncompare+0x54>
c0005f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f3b:	83 ec 0c             	sub    esp,0xc
c0005f3e:	50                   	push   eax
c0005f3f:	e8 ac a9 ff ff       	call   c00008f0 <tolower>
c0005f44:	89 c5                	mov    ebp,eax
c0005f46:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f4d:	e8 9e a9 ff ff       	call   c00008f0 <tolower>
c0005f52:	83 c4 10             	add    esp,0x10
c0005f55:	39 c5                	cmp    ebp,eax
c0005f57:	75 1d                	jne    c0005f76 <fncompare+0x6a>
c0005f59:	43                   	inc    ebx
c0005f5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f5e:	eb b9                	jmp    c0005f19 <fncompare+0xd>
c0005f60:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f63:	84 d2                	test   dl,dl
c0005f65:	0f 95 c1             	setne  cl
c0005f68:	31 c0                	xor    eax,eax
c0005f6a:	80 fa 2f             	cmp    dl,0x2f
c0005f6d:	0f 95 c0             	setne  al
c0005f70:	21 c8                	and    eax,ecx
c0005f72:	f7 d8                	neg    eax
c0005f74:	eb 03                	jmp    c0005f79 <fncompare+0x6d>
c0005f76:	83 c8 ff             	or     eax,0xffffffff
c0005f79:	83 c4 1c             	add    esp,0x1c
c0005f7c:	5b                   	pop    ebx
c0005f7d:	5e                   	pop    esi
c0005f7e:	5f                   	pop    edi
c0005f7f:	5d                   	pop    ebp
c0005f80:	c3                   	ret    

c0005f81 <isoReadDiscSector>:
c0005f81:	83 ec 0c             	sub    esp,0xc
c0005f84:	0f be 05 c0 fc 01 c0 	movsx  eax,BYTE PTR ds:0xc001fcc0
c0005f8b:	50                   	push   eax
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	e8 4b 15 01 00       	call   c00174e8 <isoReadDiscSectorHelper>
c0005f9d:	83 c4 1c             	add    esp,0x1c
c0005fa0:	c3                   	ret    

c0005fa1 <strnicmp>:
c0005fa1:	55                   	push   ebp
c0005fa2:	57                   	push   edi
c0005fa3:	56                   	push   esi
c0005fa4:	31 f6                	xor    esi,esi
c0005fa6:	53                   	push   ebx
c0005fa7:	83 ec 0c             	sub    esp,0xc
c0005faa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0005fae:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0005fb2:	74 42                	je     c0005ff6 <strnicmp+0x55>
c0005fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005fb8:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0005fbc:	84 c0                	test   al,al
c0005fbe:	74 36                	je     c0005ff6 <strnicmp+0x55>
c0005fc0:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0005fc3:	84 d2                	test   dl,dl
c0005fc5:	74 2f                	je     c0005ff6 <strnicmp+0x55>
c0005fc7:	38 d0                	cmp    al,dl
c0005fc9:	8d 6e 01             	lea    ebp,[esi+0x1]
c0005fcc:	75 04                	jne    c0005fd2 <strnicmp+0x31>
c0005fce:	89 ee                	mov    esi,ebp
c0005fd0:	eb dc                	jmp    c0005fae <strnicmp+0xd>
c0005fd2:	83 ec 0c             	sub    esp,0xc
c0005fd5:	50                   	push   eax
c0005fd6:	e8 15 a9 ff ff       	call   c00008f0 <tolower>
c0005fdb:	89 c7                	mov    edi,eax
c0005fdd:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0005fe1:	89 ee                	mov    esi,ebp
c0005fe3:	89 04 24             	mov    DWORD PTR [esp],eax
c0005fe6:	e8 05 a9 ff ff       	call   c00008f0 <tolower>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	29 c7                	sub    edi,eax
c0005ff0:	89 f8                	mov    eax,edi
c0005ff2:	74 ba                	je     c0005fae <strnicmp+0xd>
c0005ff4:	eb 02                	jmp    c0005ff8 <strnicmp+0x57>
c0005ff6:	31 c0                	xor    eax,eax
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	5b                   	pop    ebx
c0005ffc:	5e                   	pop    esi
c0005ffd:	5f                   	pop    edi
c0005ffe:	5d                   	pop    ebp
c0005fff:	c3                   	ret    

c0006000 <stricmp>:
c0006000:	57                   	push   edi
c0006001:	56                   	push   esi
c0006002:	31 f6                	xor    esi,esi
c0006004:	53                   	push   ebx
c0006005:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006009:	83 ec 0c             	sub    esp,0xc
c000600c:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006014:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006018:	50                   	push   eax
c0006019:	e8 b2 a8 ff ff       	call   c00008d0 <toupper>
c000601e:	89 04 24             	mov    DWORD PTR [esp],eax
c0006021:	e8 ca a8 ff ff       	call   c00008f0 <tolower>
c0006026:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006029:	89 c3                	mov    ebx,eax
c000602b:	e8 a0 a8 ff ff       	call   c00008d0 <toupper>
c0006030:	89 04 24             	mov    DWORD PTR [esp],eax
c0006033:	e8 b8 a8 ff ff       	call   c00008f0 <tolower>
c0006038:	83 c4 10             	add    esp,0x10
c000603b:	39 c3                	cmp    ebx,eax
c000603d:	75 05                	jne    c0006044 <stricmp+0x44>
c000603f:	46                   	inc    esi
c0006040:	85 db                	test   ebx,ebx
c0006042:	75 c1                	jne    c0006005 <stricmp+0x5>
c0006044:	29 c3                	sub    ebx,eax
c0006046:	89 d8                	mov    eax,ebx
c0006048:	5b                   	pop    ebx
c0006049:	5e                   	pop    esi
c000604a:	5f                   	pop    edi
c000604b:	c3                   	ret    

c000604c <iso_close>:
c000604c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006050:	83 f8 0f             	cmp    eax,0xf
c0006053:	7f 10                	jg     c0006065 <iso_close+0x19>
c0006055:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000605b:	c7 80 40 01 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfec0],0x0
c0006065:	c3                   	ret    

c0006066 <iso_seek>:
c0006066:	55                   	push   ebp
c0006067:	83 c8 ff             	or     eax,0xffffffff
c000606a:	57                   	push   edi
c000606b:	89 c2                	mov    edx,eax
c000606d:	56                   	push   esi
c000606e:	53                   	push   ebx
c000606f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006073:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006077:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000607b:	83 fe 0f             	cmp    esi,0xf
c000607e:	7f 65                	jg     c00060e5 <iso_seek+0x7f>
c0006080:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006086:	8d 8d 40 01 02 c0    	lea    ecx,[ebp-0x3ffdfec0]
c000608c:	83 bd 40 01 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfec0],0x0
c0006093:	74 50                	je     c00060e5 <iso_seek+0x7f>
c0006095:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000609c:	75 47                	jne    c00060e5 <iso_seek+0x7f>
c000609e:	83 fb 01             	cmp    ebx,0x1
c00060a1:	74 0e                	je     c00060b1 <iso_seek+0x4b>
c00060a3:	83 fb 02             	cmp    ebx,0x2
c00060a6:	74 0e                	je     c00060b6 <iso_seek+0x50>
c00060a8:	85 db                	test   ebx,ebx
c00060aa:	75 39                	jne    c00060e5 <iso_seek+0x7f>
c00060ac:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00060af:	eb 0d                	jmp    c00060be <iso_seek+0x58>
c00060b1:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00060b4:	eb 08                	jmp    c00060be <iso_seek+0x58>
c00060b6:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00060b9:	01 f8                	add    eax,edi
c00060bb:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00060be:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00060c4:	8b 88 4c 01 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfeb4]
c00060ca:	05 40 01 02 c0       	add    eax,0xc0020140
c00060cf:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00060d2:	76 03                	jbe    c00060d7 <iso_seek+0x71>
c00060d4:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00060d7:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00060dd:	8b 82 48 01 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfeb8]
c00060e3:	31 d2                	xor    edx,edx
c00060e5:	5b                   	pop    ebx
c00060e6:	5e                   	pop    esi
c00060e7:	5f                   	pop    edi
c00060e8:	5d                   	pop    ebp
c00060e9:	c3                   	ret    

c00060ea <iso_tell>:
c00060ea:	83 c8 ff             	or     eax,0xffffffff
c00060ed:	53                   	push   ebx
c00060ee:	89 c2                	mov    edx,eax
c00060f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00060f4:	83 f9 0f             	cmp    ecx,0xf
c00060f7:	7f 20                	jg     c0006119 <iso_tell+0x2f>
c00060f9:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c00060ff:	83 bb 40 01 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfec0],0x0
c0006106:	74 11                	je     c0006119 <iso_tell+0x2f>
c0006108:	83 bb d0 01 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfe30],0x0
c000610f:	75 08                	jne    c0006119 <iso_tell+0x2f>
c0006111:	8b 83 48 01 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfeb8]
c0006117:	31 d2                	xor    edx,edx
c0006119:	5b                   	pop    ebx
c000611a:	c3                   	ret    

c000611b <iso_total>:
c000611b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000611f:	83 c8 ff             	or     eax,0xffffffff
c0006122:	83 fa 0f             	cmp    edx,0xf
c0006125:	7f 1e                	jg     c0006145 <iso_total+0x2a>
c0006127:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000612d:	83 ba 40 01 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfec0],0x0
c0006134:	74 0f                	je     c0006145 <iso_total+0x2a>
c0006136:	83 ba d0 01 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfe30],0x0
c000613d:	75 06                	jne    c0006145 <iso_total+0x2a>
c000613f:	8b 82 4c 01 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfeb4]
c0006145:	c3                   	ret    

c0006146 <fn_postprocess>:
c0006146:	53                   	push   ebx
c0006147:	83 ec 08             	sub    esp,0x8
c000614a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000614e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006151:	3c 3b                	cmp    al,0x3b
c0006153:	74 16                	je     c000616b <fn_postprocess+0x25>
c0006155:	84 c0                	test   al,al
c0006157:	74 12                	je     c000616b <fn_postprocess+0x25>
c0006159:	83 ec 0c             	sub    esp,0xc
c000615c:	43                   	inc    ebx
c000615d:	50                   	push   eax
c000615e:	e8 8d a7 ff ff       	call   c00008f0 <tolower>
c0006163:	83 c4 10             	add    esp,0x10
c0006166:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0006169:	eb e3                	jmp    c000614e <fn_postprocess+0x8>
c000616b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000616e:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
c0006172:	76 0a                	jbe    c000617e <fn_postprocess+0x38>
c0006174:	80 7b ff 2e          	cmp    BYTE PTR [ebx-0x1],0x2e
c0006178:	75 04                	jne    c000617e <fn_postprocess+0x38>
c000617a:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000617e:	83 c4 08             	add    esp,0x8
c0006181:	5b                   	pop    ebx
c0006182:	c3                   	ret    

c0006183 <iso_reset>:
c0006183:	e8 ec fc ff ff       	call   c0005e74 <iso_break_all>
c0006188:	e8 d6 fc ff ff       	call   c0005e63 <bclear>
c000618d:	c7 05 44 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b44,0x0
c0006197:	31 c0                	xor    eax,eax
c0006199:	c3                   	ret    

c000619a <init_percd>:
c000619a:	57                   	push   edi
c000619b:	56                   	push   esi
c000619c:	53                   	push   ebx
c000619d:	bb 01 00 00 00       	mov    ebx,0x1
c00061a2:	e8 dc ff ff ff       	call   c0006183 <iso_reset>
c00061a7:	c7 05 40 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b40,0x0
c00061b1:	a1 ac 0a 02 c0       	mov    eax,ds:0xc0020aac
c00061b6:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00061ba:	e8 3a 01 00 00       	call   c00062f9 <biread>
c00061bf:	89 c6                	mov    esi,eax
c00061c1:	85 c0                	test   eax,eax
c00061c3:	0f 88 ba 00 00 00    	js     c0006283 <init_percd+0xe9>
c00061c9:	8b 04 85 00 0b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf500]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	52                   	push   edx
c00061d4:	6a 06                	push   0x6
c00061d6:	68 20 d7 01 c0       	push   0xc001d720
c00061db:	50                   	push   eax
c00061dc:	e8 cf a1 ff ff       	call   c00003b0 <memcmp>
c00061e1:	83 c4 10             	add    esp,0x10
c00061e4:	85 c0                	test   eax,eax
c00061e6:	74 08                	je     c00061f0 <init_percd+0x56>
c00061e8:	43                   	inc    ebx
c00061e9:	83 fb 04             	cmp    ebx,0x4
c00061ec:	75 c3                	jne    c00061b1 <init_percd+0x17>
c00061ee:	eb 1a                	jmp    c000620a <init_percd+0x70>
c00061f0:	8b 04 b5 00 0b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdf500]
c00061f7:	83 c0 5c             	add    eax,0x5c
c00061fa:	e8 05 fc ff ff       	call   c0005e04 <isjoliet>
c00061ff:	a3 40 0b 02 c0       	mov    ds:0xc0020b40,eax
c0006204:	85 c0                	test   eax,eax
c0006206:	74 e0                	je     c00061e8 <init_percd+0x4e>
c0006208:	eb 3e                	jmp    c0006248 <init_percd+0xae>
c000620a:	83 3d 40 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b40,0x0
c0006211:	75 35                	jne    c0006248 <init_percd+0xae>
c0006213:	a1 ac 0a 02 c0       	mov    eax,ds:0xc0020aac
c0006218:	83 c0 10             	add    eax,0x10
c000621b:	e8 d9 00 00 00       	call   c00062f9 <biread>
c0006220:	89 c6                	mov    esi,eax
c0006222:	85 c0                	test   eax,eax
c0006224:	78 5f                	js     c0006285 <init_percd+0xeb>
c0006226:	83 cb ff             	or     ebx,0xffffffff
c0006229:	50                   	push   eax
c000622a:	8b 04 b5 00 0b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdf500]
c0006231:	6a 06                	push   0x6
c0006233:	83 c0 04             	add    eax,0x4
c0006236:	68 27 d7 01 c0       	push   0xc001d727
c000623b:	50                   	push   eax
c000623c:	e8 6f a1 ff ff       	call   c00003b0 <memcmp>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	85 c0                	test   eax,eax
c0006246:	75 3d                	jne    c0006285 <init_percd+0xeb>
c0006248:	8b 34 b5 00 0b 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdf500]
c000624f:	bf 80 0a 02 c0       	mov    edi,0xc0020a80
c0006254:	81 c6 a0 00 00 00    	add    esi,0xa0
c000625a:	b9 22 00 00 00       	mov    ecx,0x22
c000625f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006261:	b8 82 0a 02 c0       	mov    eax,0xc0020a82
c0006266:	31 db                	xor    ebx,ebx
c0006268:	e8 c6 fb ff ff       	call   c0005e33 <iso_733>
c000626d:	a3 a8 0a 02 c0       	mov    ds:0xc0020aa8,eax
c0006272:	b8 8a 0a 02 c0       	mov    eax,0xc0020a8a
c0006277:	e8 b7 fb ff ff       	call   c0005e33 <iso_733>
c000627c:	a3 a4 0a 02 c0       	mov    ds:0xc0020aa4,eax
c0006281:	eb 02                	jmp    c0006285 <init_percd+0xeb>
c0006283:	89 c3                	mov    ebx,eax
c0006285:	89 d8                	mov    eax,ebx
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	5f                   	pop    edi
c000628a:	c3                   	ret    

c000628b <bread_cache>:
c000628b:	55                   	push   ebp
c000628c:	57                   	push   edi
c000628d:	89 d7                	mov    edi,edx
c000628f:	56                   	push   esi
c0006290:	ba 0f 00 00 00       	mov    edx,0xf
c0006295:	53                   	push   ebx
c0006296:	89 c6                	mov    esi,eax
c0006298:	83 ec 0c             	sub    esp,0xc
c000629b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000629e:	39 38                	cmp    DWORD PTR [eax],edi
c00062a0:	74 43                	je     c00062e5 <bread_cache+0x5a>
c00062a2:	4a                   	dec    edx
c00062a3:	83 fa ff             	cmp    edx,0xffffffff
c00062a6:	75 f3                	jne    c000629b <bread_cache+0x10>
c00062a8:	31 db                	xor    ebx,ebx
c00062aa:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00062ad:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00062b0:	74 08                	je     c00062ba <bread_cache+0x2f>
c00062b2:	43                   	inc    ebx
c00062b3:	83 fb 10             	cmp    ebx,0x10
c00062b6:	75 f2                	jne    c00062aa <bread_cache+0x1f>
c00062b8:	31 db                	xor    ebx,ebx
c00062ba:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00062bd:	50                   	push   eax
c00062be:	6a 01                	push   0x1
c00062c0:	57                   	push   edi
c00062c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062c4:	83 c0 04             	add    eax,0x4
c00062c7:	50                   	push   eax
c00062c8:	e8 b4 fc ff ff       	call   c0005f81 <isoReadDiscSector>
c00062cd:	83 c4 10             	add    esp,0x10
c00062d0:	85 c0                	test   eax,eax
c00062d2:	79 0a                	jns    c00062de <bread_cache+0x53>
c00062d4:	e8 c1 fe ff ff       	call   c000619a <init_percd>
c00062d9:	83 c8 ff             	or     eax,0xffffffff
c00062dc:	eb 13                	jmp    c00062f1 <bread_cache+0x66>
c00062de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062e1:	89 da                	mov    edx,ebx
c00062e3:	89 38                	mov    DWORD PTR [eax],edi
c00062e5:	89 f0                	mov    eax,esi
c00062e7:	e8 5b fb ff ff       	call   c0005e47 <bgrad_cache>
c00062ec:	b8 0f 00 00 00       	mov    eax,0xf
c00062f1:	83 c4 0c             	add    esp,0xc
c00062f4:	5b                   	pop    ebx
c00062f5:	5e                   	pop    esi
c00062f6:	5f                   	pop    edi
c00062f7:	5d                   	pop    ebp
c00062f8:	c3                   	ret    

c00062f9 <biread>:
c00062f9:	89 c2                	mov    edx,eax
c00062fb:	b8 00 0b 02 c0       	mov    eax,0xc0020b00
c0006300:	eb 89                	jmp    c000628b <bread_cache>

c0006302 <find_object>:
c0006302:	55                   	push   ebp
c0006303:	89 c5                	mov    ebp,eax
c0006305:	57                   	push   edi
c0006306:	56                   	push   esi
c0006307:	53                   	push   ebx
c0006308:	89 d3                	mov    ebx,edx
c000630a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006310:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006317:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000631b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000631f:	83 3d 40 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b40,0x0
c0006326:	74 0b                	je     c0006333 <find_object+0x31>
c0006328:	89 ea                	mov    edx,ebp
c000632a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000632e:	e8 31 fa ff ff       	call   c0005d64 <utf2ucs>
c0006333:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000633a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000633f:	7e 11                	jle    c0006352 <find_object+0x50>
c0006341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006345:	e8 af ff ff ff       	call   c00062f9 <biread>
c000634a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000634e:	85 c0                	test   eax,eax
c0006350:	79 07                	jns    c0006359 <find_object+0x57>
c0006352:	31 db                	xor    ebx,ebx
c0006354:	e9 5b 01 00 00       	jmp    c00064b4 <find_object+0x1b2>
c0006359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0006361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006365:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0006369:	8b 04 85 00 0b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf500]
c0006370:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c0006374:	8a 03                	mov    al,BYTE PTR [ebx]
c0006376:	84 c0                	test   al,al
c0006378:	75 0e                	jne    c0006388 <find_object+0x86>
c000637a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000637e:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c0006386:	eb b2                	jmp    c000633a <find_object+0x38>
c0006388:	8b 35 40 0b 02 c0    	mov    esi,DWORD PTR ds:0xc0020b40
c000638e:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006392:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006396:	89 ca                	mov    edx,ecx
c0006398:	85 f6                	test   esi,esi
c000639a:	74 2b                	je     c00063c7 <find_object+0xc5>
c000639c:	8d 43 21             	lea    eax,[ebx+0x21]
c000639f:	8d 54 24 20          	lea    edx,[esp+0x20]
c00063a3:	e8 e5 fa ff ff       	call   c0005e8d <ucscompare>
c00063a8:	85 c0                	test   eax,eax
c00063aa:	0f 84 c1 00 00 00    	je     c0006471 <find_object+0x16f>
c00063b0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00063b3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00063b7:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c00063bf:	0f 8e dc 00 00 00    	jle    c00064a1 <find_object+0x19f>
c00063c5:	eb b3                	jmp    c000637a <find_object+0x78>
c00063c7:	0f b6 f0             	movzx  esi,al
c00063ca:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c00063ce:	29 ce                	sub    esi,ecx
c00063d0:	80 e2 01             	and    dl,0x1
c00063d3:	74 05                	je     c00063da <find_object+0xd8>
c00063d5:	83 ee 21             	sub    esi,0x21
c00063d8:	eb 55                	jmp    c000642f <find_object+0x12d>
c00063da:	47                   	inc    edi
c00063db:	83 ee 22             	sub    esi,0x22
c00063de:	eb 4f                	jmp    c000642f <find_object+0x12d>
c00063e0:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00063e3:	48                   	dec    eax
c00063e4:	3c 01                	cmp    al,0x1
c00063e6:	77 4c                	ja     c0006434 <find_object+0x132>
c00063e8:	50                   	push   eax
c00063e9:	6a 02                	push   0x2
c00063eb:	68 2e d7 01 c0       	push   0xc001d72e
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a3 ff ff       	call   c0000780 <strncmp>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	85 c0                	test   eax,eax
c00063fb:	75 2a                	jne    c0006427 <find_object+0x125>
c00063fd:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006401:	8d 42 fb             	lea    eax,[edx-0x5]
c0006404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006408:	50                   	push   eax
c0006409:	8d 47 05             	lea    eax,[edi+0x5]
c000640c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006410:	50                   	push   eax
c0006411:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006415:	50                   	push   eax
c0006416:	e8 35 a2 ff ff       	call   c0000650 <strncpy>
c000641b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000641f:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006424:	83 c4 10             	add    esp,0x10
c0006427:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000642b:	29 c6                	sub    esi,eax
c000642d:	01 c7                	add    edi,eax
c000642f:	83 fe 03             	cmp    esi,0x3
c0006432:	7f ac                	jg     c00063e0 <find_object+0xde>
c0006434:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006439:	7e 40                	jle    c000647b <find_object+0x179>
c000643b:	51                   	push   ecx
c000643c:	51                   	push   ecx
c000643d:	6a 2f                	push   0x2f
c000643f:	55                   	push   ebp
c0006440:	e8 0b a3 ff ff       	call   c0000750 <strchr>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	85 c0                	test   eax,eax
c000644a:	74 04                	je     c0006450 <find_object+0x14e>
c000644c:	29 e8                	sub    eax,ebp
c000644e:	eb 0c                	jmp    c000645c <find_object+0x15a>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	55                   	push   ebp
c0006454:	e8 07 a1 ff ff       	call   c0000560 <strlen>
c0006459:	83 c4 10             	add    esp,0x10
c000645c:	52                   	push   edx
c000645d:	50                   	push   eax
c000645e:	55                   	push   ebp
c000645f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006463:	50                   	push   eax
c0006464:	e8 38 fb ff ff       	call   c0005fa1 <strnicmp>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	e9 37 ff ff ff       	jmp    c00063a8 <find_object+0xa6>
c0006471:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006475:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0006479:	eb 1e                	jmp    c0006499 <find_object+0x197>
c000647b:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000647f:	8d 43 21             	lea    eax,[ebx+0x21]
c0006482:	89 e9                	mov    ecx,ebp
c0006484:	e8 83 fa ff ff       	call   c0005f0c <fncompare>
c0006489:	85 c0                	test   eax,eax
c000648b:	0f 85 1f ff ff ff    	jne    c00063b0 <find_object+0xae>
c0006491:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006495:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006499:	0f 85 11 ff ff ff    	jne    c00063b0 <find_object+0xae>
c000649f:	eb 13                	jmp    c00064b4 <find_object+0x1b2>
c00064a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064a5:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c00064a9:	0f 8f b2 fe ff ff    	jg     c0006361 <find_object+0x5f>
c00064af:	e9 c6 fe ff ff       	jmp    c000637a <find_object+0x78>
c00064b4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <find_object_path>:
c00064c1:	55                   	push   ebp
c00064c2:	57                   	push   edi
c00064c3:	89 d7                	mov    edi,edx
c00064c5:	56                   	push   esi
c00064c6:	89 c6                	mov    esi,eax
c00064c8:	53                   	push   ebx
c00064c9:	89 cb                	mov    ebx,ecx
c00064cb:	83 ec 0c             	sub    esp,0xc
c00064ce:	50                   	push   eax
c00064cf:	50                   	push   eax
c00064d0:	6a 2f                	push   0x2f
c00064d2:	56                   	push   esi
c00064d3:	e8 78 a2 ff ff       	call   c0000750 <strchr>
c00064d8:	83 c4 10             	add    esp,0x10
c00064db:	89 c5                	mov    ebp,eax
c00064dd:	85 c0                	test   eax,eax
c00064df:	74 3a                	je     c000651b <find_object_path+0x5a>
c00064e1:	39 ee                	cmp    esi,ebp
c00064e3:	74 31                	je     c0006516 <find_object_path+0x55>
c00064e5:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064e8:	e8 46 f9 ff ff       	call   c0005e33 <iso_733>
c00064ed:	89 c2                	mov    edx,eax
c00064ef:	8d 43 02             	lea    eax,[ebx+0x2]
c00064f2:	e8 3c f9 ff ff       	call   c0005e33 <iso_733>
c00064f7:	83 ec 0c             	sub    esp,0xc
c00064fa:	89 c1                	mov    ecx,eax
c00064fc:	52                   	push   edx
c00064fd:	89 f0                	mov    eax,esi
c00064ff:	ba 01 00 00 00       	mov    edx,0x1
c0006504:	e8 f9 fd ff ff       	call   c0006302 <find_object>
c0006509:	83 c4 10             	add    esp,0x10
c000650c:	89 c3                	mov    ebx,eax
c000650e:	85 c0                	test   eax,eax
c0006510:	75 04                	jne    c0006516 <find_object_path+0x55>
c0006512:	31 db                	xor    ebx,ebx
c0006514:	eb 36                	jmp    c000654c <find_object_path+0x8b>
c0006516:	8d 75 01             	lea    esi,[ebp+0x1]
c0006519:	eb b3                	jmp    c00064ce <find_object_path+0xd>
c000651b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000651e:	74 28                	je     c0006548 <find_object_path+0x87>
c0006520:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006523:	e8 0b f9 ff ff       	call   c0005e33 <iso_733>
c0006528:	89 c2                	mov    edx,eax
c000652a:	8d 43 02             	lea    eax,[ebx+0x2]
c000652d:	e8 01 f9 ff ff       	call   c0005e33 <iso_733>
c0006532:	83 ec 0c             	sub    esp,0xc
c0006535:	89 c1                	mov    ecx,eax
c0006537:	52                   	push   edx
c0006538:	89 f0                	mov    eax,esi
c000653a:	89 fa                	mov    edx,edi
c000653c:	e8 c1 fd ff ff       	call   c0006302 <find_object>
c0006541:	83 c4 10             	add    esp,0x10
c0006544:	89 c3                	mov    ebx,eax
c0006546:	eb 04                	jmp    c000654c <find_object_path+0x8b>
c0006548:	85 ff                	test   edi,edi
c000654a:	74 c6                	je     c0006512 <find_object_path+0x51>
c000654c:	83 c4 0c             	add    esp,0xc
c000654f:	89 d8                	mov    eax,ebx
c0006551:	5b                   	pop    ebx
c0006552:	5e                   	pop    esi
c0006553:	5f                   	pop    edi
c0006554:	5d                   	pop    ebp
c0006555:	c3                   	ret    

c0006556 <iso_readdir>:
c0006556:	55                   	push   ebp
c0006557:	57                   	push   edi
c0006558:	56                   	push   esi
c0006559:	53                   	push   ebx
c000655a:	83 ec 1c             	sub    esp,0x1c
c000655d:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c0006562:	7e 07                	jle    c000656b <iso_readdir+0x15>
c0006564:	31 c0                	xor    eax,eax
c0006566:	e9 d4 01 00 00       	jmp    c000673f <iso_readdir+0x1e9>
c000656b:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006573:	8d b0 40 01 02 c0    	lea    esi,[eax-0x3ffdfec0]
c0006579:	83 b8 40 01 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfec0],0x0
c0006580:	74 e2                	je     c0006564 <iso_readdir+0xe>
c0006582:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c0006586:	74 dc                	je     c0006564 <iso_readdir+0xe>
c0006588:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c000658f:	75 d3                	jne    c0006564 <iso_readdir+0xe>
c0006591:	31 db                	xor    ebx,ebx
c0006593:	83 c8 ff             	or     eax,0xffffffff
c0006596:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006599:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c000659c:	73 3c                	jae    c00065da <iso_readdir+0x84>
c000659e:	c1 ea 0b             	shr    edx,0xb
c00065a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00065a3:	01 d0                	add    eax,edx
c00065a5:	e8 4f fd ff ff       	call   c00062f9 <biread>
c00065aa:	85 c0                	test   eax,eax
c00065ac:	78 b6                	js     c0006564 <iso_readdir+0xe>
c00065ae:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00065b1:	8b 1c 85 00 0b 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdf500]
c00065b8:	89 d1                	mov    ecx,edx
c00065ba:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00065c0:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c00065c4:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c00065c7:	75 11                	jne    c00065da <iso_readdir+0x84>
c00065c9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00065cf:	81 c2 00 08 00 00    	add    edx,0x800
c00065d5:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c00065d8:	eb bc                	jmp    c0006596 <iso_readdir+0x40>
c00065da:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c00065e2:	8b b2 48 01 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfeb8]
c00065e8:	81 c2 40 01 02 c0    	add    edx,0xc0020140
c00065ee:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c00065f1:	0f 83 6d ff ff ff    	jae    c0006564 <iso_readdir+0xe>
c00065f7:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c00065fb:	75 38                	jne    c0006635 <iso_readdir+0xdf>
c00065fd:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006601:	75 32                	jne    c0006635 <iso_readdir+0xdf>
c0006603:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006606:	8b 1c 85 00 0b 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdf500]
c000660d:	01 f1                	add    ecx,esi
c000660f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006612:	89 c8                	mov    eax,ecx
c0006614:	25 ff 07 00 00       	and    eax,0x7ff
c0006619:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c000661e:	01 c8                	add    eax,ecx
c0006620:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006623:	25 ff 07 00 00       	and    eax,0x7ff
c0006628:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c000662c:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000662f:	0f 84 2f ff ff ff    	je     c0006564 <iso_readdir+0xe>
c0006635:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c000663d:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006641:	8d 53 21             	lea    edx,[ebx+0x21]
c0006644:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006648:	8d a8 58 01 02 c0    	lea    ebp,[eax-0x3ffdfea8]
c000664e:	83 3d 40 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b40,0x0
c0006655:	74 0c                	je     c0006663 <iso_readdir+0x10d>
c0006657:	89 e8                	mov    eax,ebp
c0006659:	e8 28 f7 ff ff       	call   c0005d86 <ucs2utfn>
c000665e:	e9 9e 00 00 00       	jmp    c0006701 <iso_readdir+0x1ab>
c0006663:	56                   	push   esi
c0006664:	51                   	push   ecx
c0006665:	52                   	push   edx
c0006666:	55                   	push   ebp
c0006667:	e8 e4 9f ff ff       	call   c0000650 <strncpy>
c000666c:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c0006670:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006674:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006677:	c6 84 07 58 01 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfea8],0x0
c000667f:	e8 c2 fa ff ff       	call   c0006146 <fn_postprocess>
c0006684:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c0006688:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000668b:	83 c4 10             	add    esp,0x10
c000668e:	29 c6                	sub    esi,eax
c0006690:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006694:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006698:	74 05                	je     c000669f <iso_readdir+0x149>
c000669a:	83 ee 21             	sub    esi,0x21
c000669d:	eb 04                	jmp    c00066a3 <iso_readdir+0x14d>
c000669f:	47                   	inc    edi
c00066a0:	83 ee 22             	sub    esi,0x22
c00066a3:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066af:	83 fe 03             	cmp    esi,0x3
c00066b2:	7e 4d                	jle    c0006701 <iso_readdir+0x1ab>
c00066b4:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00066b7:	48                   	dec    eax
c00066b8:	3c 01                	cmp    al,0x1
c00066ba:	77 45                	ja     c0006701 <iso_readdir+0x1ab>
c00066bc:	52                   	push   edx
c00066bd:	6a 02                	push   0x2
c00066bf:	68 2e d7 01 c0       	push   0xc001d72e
c00066c4:	57                   	push   edi
c00066c5:	e8 b6 a0 ff ff       	call   c0000780 <strncmp>
c00066ca:	83 c4 10             	add    esp,0x10
c00066cd:	85 c0                	test   eax,eax
c00066cf:	75 26                	jne    c00066f7 <iso_readdir+0x1a1>
c00066d1:	50                   	push   eax
c00066d2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00066d6:	83 e8 05             	sub    eax,0x5
c00066d9:	50                   	push   eax
c00066da:	8d 47 05             	lea    eax,[edi+0x5]
c00066dd:	50                   	push   eax
c00066de:	55                   	push   ebp
c00066df:	e8 6c 9f ff ff       	call   c0000650 <strncpy>
c00066e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00066e8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00066ec:	83 c4 10             	add    esp,0x10
c00066ef:	c6 84 08 53 01 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfead],0x0
c00066f7:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00066fb:	29 c6                	sub    esi,eax
c00066fd:	01 c7                	add    edi,eax
c00066ff:	eb ae                	jmp    c00066af <iso_readdir+0x159>
c0006701:	83 c8 ff             	or     eax,0xffffffff
c0006704:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006708:	89 c2                	mov    edx,eax
c000670a:	75 0a                	jne    c0006716 <iso_readdir+0x1c0>
c000670c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000670f:	e8 1f f7 ff ff       	call   c0005e33 <iso_733>
c0006714:	31 d2                	xor    edx,edx
c0006716:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c000671e:	89 81 50 01 02 c0    	mov    DWORD PTR [ecx-0x3ffdfeb0],eax
c0006724:	89 91 54 01 02 c0    	mov    DWORD PTR [ecx-0x3ffdfeac],edx
c000672a:	81 c1 40 01 02 c0    	add    ecx,0xc0020140
c0006730:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006733:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c0006736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673a:	05 50 01 02 c0       	add    eax,0xc0020150
c000673f:	83 c4 1c             	add    esp,0x1c
c0006742:	5b                   	pop    ebx
c0006743:	5e                   	pop    esi
c0006744:	5f                   	pop    edi
c0006745:	5d                   	pop    ebp
c0006746:	c3                   	ret    

c0006747 <bdread>:
c0006747:	89 c2                	mov    edx,eax
c0006749:	b8 c0 0a 02 c0       	mov    eax,0xc0020ac0
c000674e:	e9 38 fb ff ff       	jmp    c000628b <bread_cache>

c0006753 <iso_read>:
c0006753:	55                   	push   ebp
c0006754:	57                   	push   edi
c0006755:	56                   	push   esi
c0006756:	53                   	push   ebx
c0006757:	83 ec 1c             	sub    esp,0x1c
c000675a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000675e:	83 fd 0f             	cmp    ebp,0xf
c0006761:	7e 0a                	jle    c000676d <iso_read+0x1a>
c0006763:	83 c8 ff             	or     eax,0xffffffff
c0006766:	89 c2                	mov    edx,eax
c0006768:	e9 f4 00 00 00       	jmp    c0006861 <iso_read+0x10e>
c000676d:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006773:	83 bd 40 01 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfec0],0x0
c000677a:	74 e7                	je     c0006763 <iso_read+0x10>
c000677c:	8b 95 d0 01 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfe30]
c0006782:	85 d2                	test   edx,edx
c0006784:	75 dd                	jne    c0006763 <iso_read+0x10>
c0006786:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000678b:	0f 84 cd 00 00 00    	je     c000685e <iso_read+0x10b>
c0006791:	8b 85 48 01 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfeb8]
c0006797:	8b 8d 4c 01 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfeb4]
c000679d:	29 c1                	sub    ecx,eax
c000679f:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067a3:	76 04                	jbe    c00067a9 <iso_read+0x56>
c00067a5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067a9:	85 c9                	test   ecx,ecx
c00067ab:	0f 84 ad 00 00 00    	je     c000685e <iso_read+0x10b>
c00067b1:	89 c6                	mov    esi,eax
c00067b3:	bb 00 08 00 00       	mov    ebx,0x800
c00067b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067be:	c1 e8 0b             	shr    eax,0xb
c00067c1:	29 f3                	sub    ebx,esi
c00067c3:	03 85 40 01 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfec0]
c00067c9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00067cf:	7e 3f                	jle    c0006810 <iso_read+0xbd>
c00067d1:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00067d7:	75 37                	jne    c0006810 <iso_read+0xbd>
c00067d9:	be 20 00 00 00       	mov    esi,0x20
c00067de:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00067e4:	7f 05                	jg     c00067eb <iso_read+0x98>
c00067e6:	89 ce                	mov    esi,ecx
c00067e8:	c1 fe 0b             	sar    esi,0xb
c00067eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00067ef:	89 f3                	mov    ebx,esi
c00067f1:	c1 e3 0b             	shl    ebx,0xb
c00067f4:	52                   	push   edx
c00067f5:	56                   	push   esi
c00067f6:	50                   	push   eax
c00067f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067fb:	e8 81 f7 ff ff       	call   c0005f81 <isoReadDiscSector>
c0006800:	83 c4 10             	add    esp,0x10
c0006803:	85 c0                	test   eax,eax
c0006805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006809:	7f 3e                	jg     c0006849 <iso_read+0xf6>
c000680b:	e9 53 ff ff ff       	jmp    c0006763 <iso_read+0x10>
c0006810:	39 cb                	cmp    ebx,ecx
c0006812:	7e 02                	jle    c0006816 <iso_read+0xc3>
c0006814:	89 cb                	mov    ebx,ecx
c0006816:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000681a:	e8 28 ff ff ff       	call   c0006747 <bdread>
c000681f:	85 c0                	test   eax,eax
c0006821:	0f 88 3c ff ff ff    	js     c0006763 <iso_read+0x10>
c0006827:	8b 0c 85 c0 0a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf540]
c000682e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006832:	8b 85 48 01 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfeb8]
c0006838:	25 ff 07 00 00       	and    eax,0x7ff
c000683d:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006841:	89 d9                	mov    ecx,ebx
c0006843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006849:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000684d:	01 9d 48 01 02 c0    	add    DWORD PTR [ebp-0x3ffdfeb8],ebx
c0006853:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006857:	01 da                	add    edx,ebx
c0006859:	e9 28 ff ff ff       	jmp    c0006786 <iso_read+0x33>
c000685e:	89 d0                	mov    eax,edx
c0006860:	99                   	cdq    
c0006861:	83 c4 1c             	add    esp,0x1c
c0006864:	5b                   	pop    ebx
c0006865:	5e                   	pop    esi
c0006866:	5f                   	pop    edi
c0006867:	5d                   	pop    ebp
c0006868:	c3                   	ret    

c0006869 <iso_open>:
c0006869:	56                   	push   esi
c000686a:	53                   	push   ebx
c000686b:	51                   	push   ecx
c000686c:	83 3d 44 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b44,0x0
c0006873:	74 24                	je     c0006899 <iso_open+0x30>
c0006875:	31 d2                	xor    edx,edx
c0006877:	b9 80 0a 02 c0       	mov    ecx,0xc0020a80
c000687c:	c7 05 44 0b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0020b44,0x1
c0006886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000688a:	e8 32 fc ff ff       	call   c00064c1 <find_object_path>
c000688f:	31 d2                	xor    edx,edx
c0006891:	89 c1                	mov    ecx,eax
c0006893:	85 c0                	test   eax,eax
c0006895:	75 13                	jne    c00068aa <iso_open+0x41>
c0006897:	eb 66                	jmp    c00068ff <iso_open+0x96>
c0006899:	e8 fc f8 ff ff       	call   c000619a <init_percd>
c000689e:	85 c0                	test   eax,eax
c00068a0:	79 d3                	jns    c0006875 <iso_open+0xc>
c00068a2:	eb 5b                	jmp    c00068ff <iso_open+0x96>
c00068a4:	42                   	inc    edx
c00068a5:	83 fa 10             	cmp    edx,0x10
c00068a8:	74 55                	je     c00068ff <iso_open+0x96>
c00068aa:	69 f2 94 00 00 00    	imul   esi,edx,0x94
c00068b0:	83 be 40 01 02 c0 00 	cmp    DWORD PTR [esi-0x3ffdfec0],0x0
c00068b7:	75 eb                	jne    c00068a4 <iso_open+0x3b>
c00068b9:	8d 41 02             	lea    eax,[ecx+0x2]
c00068bc:	c7 86 40 01 02 c0 ff ff ff ff 	mov    DWORD PTR [esi-0x3ffdfec0],0xffffffff
c00068c6:	e8 68 f5 ff ff       	call   c0005e33 <iso_733>
c00068cb:	c7 86 44 01 02 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffdfebc],0x0
c00068d5:	89 86 40 01 02 c0    	mov    DWORD PTR [esi-0x3ffdfec0],eax
c00068db:	c7 86 48 01 02 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffdfeb8],0x0
c00068e5:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068e8:	e8 46 f5 ff ff       	call   c0005e33 <iso_733>
c00068ed:	c7 86 d0 01 02 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffdfe30],0x0
c00068f7:	89 86 4c 01 02 c0    	mov    DWORD PTR [esi-0x3ffdfeb4],eax
c00068fd:	eb 02                	jmp    c0006901 <iso_open+0x98>
c00068ff:	31 d2                	xor    edx,edx
c0006901:	89 d0                	mov    eax,edx
c0006903:	5a                   	pop    edx
c0006904:	5b                   	pop    ebx
c0006905:	5e                   	pop    esi
c0006906:	c3                   	ret    

c0006907 <iso_ioctl>:
c0006907:	e8 77 f8 ff ff       	call   c0006183 <iso_reset>
c000690c:	31 c0                	xor    eax,eax
c000690e:	c3                   	ret    

c000690f <fs_iso9660_init>:
c000690f:	53                   	push   ebx
c0006910:	31 db                	xor    ebx,ebx
c0006912:	83 ec 0c             	sub    esp,0xc
c0006915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006919:	68 40 09 00 00       	push   0x940
c000691e:	a2 c0 fc 01 c0       	mov    ds:0xc001fcc0,al
c0006923:	6a 00                	push   0x0
c0006925:	68 40 01 02 c0       	push   0xc0020140
c000692a:	e8 c1 9b ff ff       	call   c00004f0 <memset>
c000692f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006936:	c7 05 40 01 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020140,0xffffffff
c0006940:	e8 84 10 00 00       	call   c00079c9 <malloc>
c0006945:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000694c:	a3 b0 0a 02 c0       	mov    ds:0xc0020ab0,eax
c0006951:	e8 73 10 00 00       	call   c00079c9 <malloc>
c0006956:	83 c4 10             	add    esp,0x10
c0006959:	a3 20 01 02 c0       	mov    ds:0xc0020120,eax
c000695e:	83 ec 0c             	sub    esp,0xc
c0006961:	68 04 08 00 00       	push   0x804
c0006966:	e8 5e 10 00 00       	call   c00079c9 <malloc>
c000696b:	89 04 9d 00 0b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdf500],eax
c0006972:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006978:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c000697f:	e8 45 10 00 00       	call   c00079c9 <malloc>
c0006984:	83 c4 10             	add    esp,0x10
c0006987:	89 04 9d c0 0a 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdf540],eax
c000698e:	43                   	inc    ebx
c000698f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006995:	83 fb 10             	cmp    ebx,0x10
c0006998:	75 c4                	jne    c000695e <fs_iso9660_init+0x4f>
c000699a:	c7 05 44 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b44,0x0
c00069a4:	31 c0                	xor    eax,eax
c00069a6:	83 c4 08             	add    esp,0x8
c00069a9:	5b                   	pop    ebx
c00069aa:	c3                   	ret    

c00069ab <fs_iso9660_shutdown>:
c00069ab:	53                   	push   ebx
c00069ac:	31 db                	xor    ebx,ebx
c00069ae:	83 ec 08             	sub    esp,0x8
c00069b1:	83 ec 0c             	sub    esp,0xc
c00069b4:	ff 34 9d 00 0b 02 c0 	push   DWORD PTR [ebx*4-0x3ffdf500]
c00069bb:	e8 19 10 00 00       	call   c00079d9 <free>
c00069c0:	58                   	pop    eax
c00069c1:	ff 34 9d c0 0a 02 c0 	push   DWORD PTR [ebx*4-0x3ffdf540]
c00069c8:	43                   	inc    ebx
c00069c9:	e8 0b 10 00 00       	call   c00079d9 <free>
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	83 fb 10             	cmp    ebx,0x10
c00069d4:	75 db                	jne    c00069b1 <fs_iso9660_shutdown+0x6>
c00069d6:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c00069db:	85 c0                	test   eax,eax
c00069dd:	74 0c                	je     c00069eb <fs_iso9660_shutdown+0x40>
c00069df:	83 ec 0c             	sub    esp,0xc
c00069e2:	50                   	push   eax
c00069e3:	e8 f1 0f 00 00       	call   c00079d9 <free>
c00069e8:	83 c4 10             	add    esp,0x10
c00069eb:	a1 20 01 02 c0       	mov    eax,ds:0xc0020120
c00069f0:	85 c0                	test   eax,eax
c00069f2:	74 0c                	je     c0006a00 <fs_iso9660_shutdown+0x55>
c00069f4:	83 ec 0c             	sub    esp,0xc
c00069f7:	50                   	push   eax
c00069f8:	e8 dc 0f 00 00       	call   c00079d9 <free>
c00069fd:	83 c4 10             	add    esp,0x10
c0006a00:	c7 05 20 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020120,0x0
c0006a0a:	c7 05 b0 0a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020ab0,0x0
c0006a14:	31 c0                	xor    eax,eax
c0006a16:	83 c4 08             	add    esp,0x8
c0006a19:	5b                   	pop    ebx
c0006a1a:	c3                   	ret    

c0006a1b <CPU::current()>:
c0006a1b:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0006a20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006a26:	c3                   	ret    

c0006a27 <operator new(unsigned long)>:
c0006a27:	e9 9d 0f 00 00       	jmp    c00079c9 <malloc>

c0006a2c <operator delete(void*)>:
c0006a2c:	e9 b8 0f 00 00       	jmp    c00079e9 <rfree>

c0006a31 <disableIRQs()>:
c0006a31:	fa                   	cli    
c0006a32:	c3                   	ret    

c0006a33 <enableIRQs()>:
c0006a33:	fb                   	sti    
c0006a34:	c3                   	ret    

c0006a35 <lockScheduler()>:
c0006a35:	fa                   	cli    
c0006a36:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0006a3c:	c3                   	ret    

c0006a3d <unlockScheduler()>:
c0006a3d:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0006a42:	48                   	dec    eax
c0006a43:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0006a48:	75 01                	jne    c0006a4b <unlockScheduler()+0xe>
c0006a4a:	fb                   	sti    
c0006a4b:	c3                   	ret    

c0006a4c <lockStuff()>:
c0006a4c:	fa                   	cli    
c0006a4d:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0006a53:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0006a59:	c3                   	ret    

c0006a5a <unlockStuff()>:
c0006a5a:	83 ec 0c             	sub    esp,0xc
c0006a5d:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0006a62:	48                   	dec    eax
c0006a63:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0006a68:	75 18                	jne    c0006a82 <unlockStuff()+0x28>
c0006a6a:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c0006a71:	74 0f                	je     c0006a82 <unlockStuff()+0x28>
c0006a73:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0006a7d:	e8 7a cb 00 00       	call   c00135fc <schedule()>
c0006a82:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0006a87:	48                   	dec    eax
c0006a88:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0006a8d:	75 01                	jne    c0006a90 <unlockStuff()+0x36>
c0006a8f:	fb                   	sti    
c0006a90:	83 c4 0c             	add    esp,0xc
c0006a93:	c3                   	ret    

c0006a94 <Virt::getAKernelVAS()>:
c0006a94:	a1 30 0c 02 c0       	mov    eax,ds:0xc0020c30
c0006a99:	c3                   	ret    

c0006a9a <__not_memcpy>:
c0006a9a:	57                   	push   edi
c0006a9b:	56                   	push   esi
c0006a9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006aa0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006aa4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006aa8:	89 c7                	mov    edi,eax
c0006aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006aac:	5e                   	pop    esi
c0006aad:	5f                   	pop    edi
c0006aae:	c3                   	ret    
c0006aaf:	90                   	nop

c0006ab0 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006ab0:	83 ec 0c             	sub    esp,0xc
c0006ab3:	83 ec 08             	sub    esp,0x8
c0006ab6:	68 31 d7 01 c0       	push   0xc001d731
c0006abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006abf:	e8 3c 9c ff ff       	call   c0000700 <strcmp>
c0006ac4:	83 c4 10             	add    esp,0x10
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 94 c0             	sete   al
c0006acc:	84 c0                	test   al,al
c0006ace:	74 0c                	je     c0006adc <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006ad0:	b8 48 0b 02 c0       	mov    eax,0xc0020b48
c0006ad5:	e9 ea 00 00 00       	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006ada:	66 90                	xchg   ax,ax
c0006adc:	83 ec 08             	sub    esp,0x8
c0006adf:	68 3a d7 01 c0       	push   0xc001d73a
c0006ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ae8:	e8 13 9c ff ff       	call   c0000700 <strcmp>
c0006aed:	83 c4 10             	add    esp,0x10
c0006af0:	85 c0                	test   eax,eax
c0006af2:	0f 94 c0             	sete   al
c0006af5:	84 c0                	test   al,al
c0006af7:	74 0b                	je     c0006b04 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006af9:	b8 d0 c3 01 c0       	mov    eax,0xc001c3d0
c0006afe:	e9 c1 00 00 00       	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b03:	90                   	nop
c0006b04:	83 ec 08             	sub    esp,0x8
c0006b07:	68 44 d7 01 c0       	push   0xc001d744
c0006b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b10:	e8 eb 9b ff ff       	call   c0000700 <strcmp>
c0006b15:	83 c4 10             	add    esp,0x10
c0006b18:	85 c0                	test   eax,eax
c0006b1a:	0f 94 c0             	sete   al
c0006b1d:	84 c0                	test   al,al
c0006b1f:	74 0b                	je     c0006b2c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006b21:	b8 04 c1 01 c0       	mov    eax,0xc001c104
c0006b26:	e9 99 00 00 00       	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b2b:	90                   	nop
c0006b2c:	83 ec 08             	sub    esp,0x8
c0006b2f:	68 4d d7 01 c0       	push   0xc001d74d
c0006b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b38:	e8 c3 9b ff ff       	call   c0000700 <strcmp>
c0006b3d:	83 c4 10             	add    esp,0x10
c0006b40:	85 c0                	test   eax,eax
c0006b42:	0f 94 c0             	sete   al
c0006b45:	84 c0                	test   al,al
c0006b47:	74 07                	je     c0006b50 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006b49:	b8 d0 c4 01 c0       	mov    eax,0xc001c4d0
c0006b4e:	eb 74                	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b50:	83 ec 08             	sub    esp,0x8
c0006b53:	68 57 d7 01 c0       	push   0xc001d757
c0006b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b5c:	e8 9f 9b ff ff       	call   c0000700 <strcmp>
c0006b61:	83 c4 10             	add    esp,0x10
c0006b64:	85 c0                	test   eax,eax
c0006b66:	0f 94 c0             	sete   al
c0006b69:	84 c0                	test   al,al
c0006b6b:	74 07                	je     c0006b74 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006b6d:	b8 50 c2 01 c0       	mov    eax,0xc001c250
c0006b72:	eb 50                	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b74:	83 ec 08             	sub    esp,0x8
c0006b77:	68 60 d7 01 c0       	push   0xc001d760
c0006b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b80:	e8 7b 9b ff ff       	call   c0000700 <strcmp>
c0006b85:	83 c4 10             	add    esp,0x10
c0006b88:	85 c0                	test   eax,eax
c0006b8a:	0f 94 c0             	sete   al
c0006b8d:	84 c0                	test   al,al
c0006b8f:	74 07                	je     c0006b98 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0006b91:	b8 4c 0b 02 c0       	mov    eax,0xc0020b4c
c0006b96:	eb 2c                	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b98:	83 ec 08             	sub    esp,0x8
c0006b9b:	68 6d d7 01 c0       	push   0xc001d76d
c0006ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ba4:	e8 57 9b ff ff       	call   c0000700 <strcmp>
c0006ba9:	83 c4 10             	add    esp,0x10
c0006bac:	85 c0                	test   eax,eax
c0006bae:	0f 94 c0             	sete   al
c0006bb1:	84 c0                	test   al,al
c0006bb3:	74 07                	je     c0006bbc <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0006bb5:	b8 4d 0b 02 c0       	mov    eax,0xc0020b4d
c0006bba:	eb 08                	jmp    c0006bc4 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006bbc:	b8 00 00 00 00       	mov    eax,0x0
c0006bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0006bc4:	83 c4 0c             	add    esp,0xc
c0006bc7:	c3                   	ret    

c0006bc8 <Computer::close(int, int, void*)>:
c0006bc8:	57                   	push   edi
c0006bc9:	56                   	push   esi
c0006bca:	53                   	push   ebx
c0006bcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006bcf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006bd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006bd7:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	50                   	push   eax
c0006be1:	e8 d0 50 00 00       	call   c000bcb6 <Device::closeAll()>
c0006be6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bec:	83 c4 10             	add    esp,0x10
c0006bef:	8b 10                	mov    edx,DWORD PTR [eax]
c0006bf1:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006bf5:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006bfd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c05:	5b                   	pop    ebx
c0006c06:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c09:	5e                   	pop    esi
c0006c0a:	5f                   	pop    edi
c0006c0b:	ff e0                	jmp    eax

c0006c0d <Krnl::firstTask()>:
c0006c0d:	53                   	push   ebx
c0006c0e:	83 ec 14             	sub    esp,0x14
c0006c11:	fb                   	sti    
c0006c12:	68 7a d7 01 c0       	push   0xc001d77a
c0006c17:	e8 07 0e 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006c1c:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006c23:	e8 a1 0d 00 00       	call   c00079c9 <malloc>
c0006c28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006c2f:	89 c3                	mov    ebx,eax
c0006c31:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0006c36:	50                   	push   eax
c0006c37:	68 93 d7 01 c0       	push   0xc001d793
c0006c3c:	6a 01                	push   0x1
c0006c3e:	53                   	push   ebx
c0006c3f:	e8 8c c5 00 00       	call   c00131d0 <Process::Process(bool, char const*, Process*, char**)>
c0006c44:	83 c4 20             	add    esp,0x20
c0006c47:	68 ff 00 00 00       	push   0xff
c0006c4c:	6a 00                	push   0x0
c0006c4e:	68 23 74 00 c0       	push   0xc0007423
c0006c53:	53                   	push   ebx
c0006c54:	e8 83 c7 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c0006c59:	8b 15 30 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024030
c0006c5f:	6a 7a                	push   0x7a
c0006c61:	6a 00                	push   0x0
c0006c63:	68 30 3e 01 c0       	push   0xc0013e30
c0006c68:	52                   	push   edx
c0006c69:	e8 6e c7 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c0006c6e:	83 c4 14             	add    esp,0x14
c0006c71:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0006c76:	68 90 d8 01 c0       	push   0xc001d890
c0006c7b:	c6 05 4d 0b 02 c0 01 	mov    BYTE PTR ds:0xc0020b4d,0x1
c0006c82:	e8 9c 0d 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006c87:	e8 83 d5 00 00       	call   c001420f <Vm::initialise8086()>
c0006c8c:	e8 69 3e 00 00       	call   c000aafa <Fs::initVFS()>
c0006c91:	c7 04 24 a0 d7 01 c0 	mov    DWORD PTR [esp],0xc001d7a0
c0006c98:	e8 86 0d 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006c9d:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0006ca2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ca8:	8b 10                	mov    edx,DWORD PTR [eax]
c0006caa:	6a 00                	push   0x0
c0006cac:	6a 00                	push   0x0
c0006cae:	6a 00                	push   0x0
c0006cb0:	50                   	push   eax
c0006cb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006cb4:	83 c4 14             	add    esp,0x14
c0006cb7:	68 90 d8 01 c0       	push   0xc001d890
c0006cbc:	e8 62 0d 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006cc1:	e8 9c ad 00 00       	call   c0011a62 <Sys::loadSyscalls()>
c0006cc6:	e8 d3 94 00 00       	call   c001019e <Krnl::loadSystemEnv()>
c0006ccb:	e8 98 97 00 00       	call   c0010468 <Krnl::setupPowerManager()>
c0006cd0:	83 c4 0c             	add    esp,0xc
c0006cd3:	6a 3a                	push   0x3a
c0006cd5:	68 ba d7 01 c0       	push   0xc001d7ba
c0006cda:	68 c3 d7 01 c0       	push   0xc001d7c3
c0006cdf:	e8 ae 9c 00 00       	call   c0010992 <Reg::readIntWithDefault(char*, char*, int)>
c0006ce4:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ce7:	e8 1c 49 00 00       	call   c000b608 <User::loadClockSettings(int)>
c0006cec:	c7 04 24 b4 d8 01 c0 	mov    DWORD PTR [esp],0xc001d8b4
c0006cf3:	e8 2b 0d 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006cf8:	59                   	pop    ecx
c0006cf9:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0006cfe:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d04:	53                   	push   ebx
c0006d05:	e8 aa 4f 00 00       	call   c000bcb4 <Device::loadDriversForAll()>
c0006d0a:	c7 04 24 cb d7 01 c0 	mov    DWORD PTR [esp],0xc001d7cb
c0006d11:	e8 0d 0d 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0006d16:	58                   	pop    eax
c0006d17:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c0006d1d:	5a                   	pop    edx
c0006d1e:	6a 01                	push   0x1
c0006d20:	68 dc d7 01 c0       	push   0xc001d7dc
c0006d25:	e8 e0 be 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c0006d2a:	59                   	pop    ecx
c0006d2b:	5a                   	pop    edx
c0006d2c:	53                   	push   ebx
c0006d2d:	50                   	push   eax
c0006d2e:	e8 08 c1 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	83 ec 0c             	sub    esp,0xc
c0006d39:	6a 02                	push   0x2
c0006d3b:	e8 b8 ca 00 00       	call   c00137f8 <blockTask(TaskState)>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	eb f1                	jmp    c0006d36 <Krnl::firstTask()+0x129>
c0006d45:	90                   	nop

c0006d46 <Computer::Computer()>:
c0006d46:	83 ec 0c             	sub    esp,0xc
c0006d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4d:	83 ec 08             	sub    esp,0x8
c0006d50:	68 f8 d7 01 c0       	push   0xc001d7f8
c0006d55:	50                   	push   eax
c0006d56:	e8 d5 4f 00 00       	call   c000bd30 <Device::Device(char const*)>
c0006d5b:	83 c4 10             	add    esp,0x10
c0006d5e:	ba 00 d9 01 c0       	mov    edx,0xc001d900
c0006d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d67:	89 10                	mov    DWORD PTR [eax],edx
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d7b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d89:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006d8f:	83 ca 04             	or     edx,0x4
c0006d92:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006da2:	31 d2                	xor    edx,edx
c0006da4:	88 c2                	mov    dl,al
c0006da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006daa:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006dbb:	31 d2                	xor    edx,edx
c0006dbd:	88 c2                	mov    dl,al
c0006dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006dd2:	8d 50 01             	lea    edx,[eax+0x1]
c0006dd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006dd9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006ddf:	31 d2                	xor    edx,edx
c0006de1:	88 c2                	mov    dl,al
c0006de3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006deb:	83 e1 3f             	and    ecx,0x3f
c0006dee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006df2:	90                   	nop
c0006df3:	83 c4 0c             	add    esp,0xc
c0006df6:	c3                   	ret    
c0006df7:	90                   	nop

c0006df8 <Computer::setBootMessage(char const*)>:
c0006df8:	c3                   	ret    
c0006df9:	90                   	nop

c0006dfa <Computer::detectFeatures()>:
c0006dfa:	55                   	push   ebp
c0006dfb:	57                   	push   edi
c0006dfc:	56                   	push   esi
c0006dfd:	53                   	push   ebx
c0006dfe:	83 ec 1c             	sub    esp,0x1c
c0006e01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e05:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006e0f:	e8 05 94 ff ff       	call   c0000219 <detectCPUID>
c0006e14:	85 c0                	test   eax,eax
c0006e16:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e1c:	0f 95 c2             	setne  dl
c0006e1f:	83 e0 fd             	and    eax,0xfffffffd
c0006e22:	01 d2                	add    edx,edx
c0006e24:	09 d0                	or     eax,edx
c0006e26:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e2c:	a8 02                	test   al,0x2
c0006e2e:	75 46                	jne    c0006e76 <Computer::detectFeatures()+0x7c>
c0006e30:	f6 05 61 0b 02 c0 04 	test   BYTE PTR ds:0xc0020b61,0x4
c0006e37:	74 07                	je     c0006e40 <Computer::detectFeatures()+0x46>
c0006e39:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006e40:	e8 51 52 01 00       	call   c001c096 <x87Detect>
c0006e45:	83 e0 01             	and    eax,0x1
c0006e48:	c1 e0 04             	shl    eax,0x4
c0006e4b:	88 c2                	mov    dl,al
c0006e4d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e53:	83 e0 ef             	and    eax,0xffffffef
c0006e56:	09 d0                	or     eax,edx
c0006e58:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e5e:	a8 10                	test   al,0x10
c0006e60:	0f 85 2a 01 00 00    	jne    c0006f90 <Computer::detectFeatures()+0x196>
c0006e66:	84 c0                	test   al,al
c0006e68:	0f 88 45 01 00 00    	js     c0006fb3 <Computer::detectFeatures()+0x1b9>
c0006e6e:	83 c4 1c             	add    esp,0x1c
c0006e71:	5b                   	pop    ebx
c0006e72:	5e                   	pop    esi
c0006e73:	5f                   	pop    edi
c0006e74:	5d                   	pop    ebp
c0006e75:	c3                   	ret    
c0006e76:	83 ec 0c             	sub    esp,0xc
c0006e79:	6a 20                	push   0x20
c0006e7b:	e8 40 84 00 00       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006e80:	83 e0 01             	and    eax,0x1
c0006e83:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006e8a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e90:	83 e0 f7             	and    eax,0xfffffff7
c0006e93:	09 d0                	or     eax,edx
c0006e95:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e9b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006ea2:	e8 19 84 00 00       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006ea7:	83 e0 01             	and    eax,0x1
c0006eaa:	88 c2                	mov    dl,al
c0006eac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006eb2:	83 e0 fe             	and    eax,0xfffffffe
c0006eb5:	09 d0                	or     eax,edx
c0006eb7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ebd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006ec4:	e8 f7 83 00 00       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006ec9:	c1 e0 07             	shl    eax,0x7
c0006ecc:	88 c2                	mov    dl,al
c0006ece:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006ed4:	83 e0 7f             	and    eax,0x7f
c0006ed7:	09 d0                	or     eax,edx
c0006ed9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006edf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006ee6:	e8 d5 83 00 00       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006eeb:	83 c4 10             	add    esp,0x10
c0006eee:	83 e0 01             	and    eax,0x1
c0006ef1:	c1 e0 05             	shl    eax,0x5
c0006ef4:	88 c2                	mov    dl,al
c0006ef6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efc:	83 e0 df             	and    eax,0xffffffdf
c0006eff:	09 d0                	or     eax,edx
c0006f01:	f7 05 60 0b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020b60,0x401
c0006f0b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f11:	0f 84 c2 00 00 00    	je     c0006fd9 <Computer::detectFeatures()+0x1df>
c0006f17:	83 e0 fe             	and    eax,0xfffffffe
c0006f1a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f26:	88 c2                	mov    dl,al
c0006f28:	83 e2 09             	and    edx,0x9
c0006f2b:	fe ca                	dec    dl
c0006f2d:	75 09                	jne    c0006f38 <Computer::detectFeatures()+0x13e>
c0006f2f:	83 e0 fe             	and    eax,0xfffffffe
c0006f32:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f38:	83 ec 0c             	sub    esp,0xc
c0006f3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006f3f:	50                   	push   eax
c0006f40:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006f44:	55                   	push   ebp
c0006f45:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006f49:	57                   	push   edi
c0006f4a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006f4e:	56                   	push   esi
c0006f4f:	68 00 00 00 80       	push   0x80000000
c0006f54:	e8 e3 82 00 00       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f59:	83 c4 20             	add    esp,0x20
c0006f5c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006f67:	0f 86 c3 fe ff ff    	jbe    c0006e30 <Computer::detectFeatures()+0x36>
c0006f6d:	83 ec 0c             	sub    esp,0xc
c0006f70:	50                   	push   eax
c0006f71:	55                   	push   ebp
c0006f72:	57                   	push   edi
c0006f73:	56                   	push   esi
c0006f74:	68 01 00 00 80       	push   0x80000001
c0006f79:	e8 be 82 00 00       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f7e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006f88:	83 c4 20             	add    esp,0x20
c0006f8b:	e9 a0 fe ff ff       	jmp    c0006e30 <Computer::detectFeatures()+0x36>
c0006f90:	e8 bb 50 01 00       	call   c001c050 <absolutelyNoChanceInHell>
c0006f95:	88 c2                	mov    dl,al
c0006f97:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f9d:	c1 e2 07             	shl    edx,0x7
c0006fa0:	83 e0 7f             	and    eax,0x7f
c0006fa3:	09 d0                	or     eax,edx
c0006fa5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fab:	84 c0                	test   al,al
c0006fad:	0f 89 bb fe ff ff    	jns    c0006e6e <Computer::detectFeatures()+0x74>
c0006fb3:	e8 18 4e 01 00       	call   c001bdd0 <avxDetect>
c0006fb8:	83 e0 01             	and    eax,0x1
c0006fbb:	c1 e0 05             	shl    eax,0x5
c0006fbe:	88 c2                	mov    dl,al
c0006fc0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fc6:	83 e0 df             	and    eax,0xffffffdf
c0006fc9:	09 d0                	or     eax,edx
c0006fcb:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fd1:	83 c4 1c             	add    esp,0x1c
c0006fd4:	5b                   	pop    ebx
c0006fd5:	5e                   	pop    esi
c0006fd6:	5f                   	pop    edi
c0006fd7:	5d                   	pop    ebp
c0006fd8:	c3                   	ret    
c0006fd9:	83 ec 0c             	sub    esp,0xc
c0006fdc:	68 00 02 00 00       	push   0x200
c0006fe1:	e8 da 82 00 00       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006fe6:	83 c4 10             	add    esp,0x10
c0006fe9:	83 e0 01             	and    eax,0x1
c0006fec:	88 c2                	mov    dl,al
c0006fee:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ff4:	83 e0 fe             	and    eax,0xfffffffe
c0006ff7:	09 d0                	or     eax,edx
c0006ff9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fff:	e9 1c ff ff ff       	jmp    c0006f20 <Computer::detectFeatures()+0x126>

c0007004 <Computer::displayFeatures()>:
c0007004:	c3                   	ret    
c0007005:	90                   	nop

c0007006 <Computer::rdmsr(unsigned int)>:
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000700d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007014:	74 0a                	je     c0007020 <Computer::rdmsr(unsigned int)+0x1a>
c0007016:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000701a:	0f 32                	rdmsr  
c000701c:	83 c4 0c             	add    esp,0xc
c000701f:	c3                   	ret    
c0007020:	83 ec 0c             	sub    esp,0xc
c0007023:	68 01 d8 01 c0       	push   0xc001d801
c0007028:	e8 7a 92 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000702d:	83 c4 10             	add    esp,0x10
c0007030:	eb e4                	jmp    c0007016 <Computer::rdmsr(unsigned int)+0x10>

c0007032 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007032:	57                   	push   edi
c0007033:	56                   	push   esi
c0007034:	52                   	push   edx
c0007035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007039:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000703d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007041:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007048:	74 0e                	je     c0007058 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000704a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000704e:	89 f0                	mov    eax,esi
c0007050:	89 fa                	mov    edx,edi
c0007052:	0f 30                	wrmsr  
c0007054:	58                   	pop    eax
c0007055:	5e                   	pop    esi
c0007056:	5f                   	pop    edi
c0007057:	c3                   	ret    
c0007058:	83 ec 0c             	sub    esp,0xc
c000705b:	68 07 d8 01 c0       	push   0xc001d807
c0007060:	e8 42 92 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007065:	83 c4 10             	add    esp,0x10
c0007068:	eb e0                	jmp    c000704a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000706a <Computer::shutdown()>:
c000706a:	83 ec 0c             	sub    esp,0xc
c000706d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007071:	8b 10                	mov    edx,DWORD PTR [eax]
c0007073:	6a 00                	push   0x0
c0007075:	6a 00                	push   0x0
c0007077:	6a 00                	push   0x0
c0007079:	50                   	push   eax
c000707a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000707d:	83 c4 1c             	add    esp,0x1c
c0007080:	c3                   	ret    
c0007081:	90                   	nop

c0007082 <Computer::restart()>:
c0007082:	83 ec 0c             	sub    esp,0xc
c0007085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007089:	8b 10                	mov    edx,DWORD PTR [eax]
c000708b:	6a 00                	push   0x0
c000708d:	6a 00                	push   0x0
c000708f:	6a 01                	push   0x1
c0007091:	50                   	push   eax
c0007092:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007095:	83 c4 1c             	add    esp,0x1c
c0007098:	c3                   	ret    
c0007099:	90                   	nop

c000709a <Computer::sleep()>:
c000709a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000709e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00070a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070a8:	e9 8b 7c 00 00       	jmp    c000ed38 <ACPI::sleep()>
c00070ad:	90                   	nop

c00070ae <Computer::nmiEnabled()>:
c00070ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <Computer::readCMOS(unsigned char)>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00070c5:	19 c0                	sbb    eax,eax
c00070c7:	83 e0 80             	and    eax,0xffffff80
c00070ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070ce:	e6 70                	out    0x70,al
c00070d0:	e4 71                	in     al,0x71
c00070d2:	c3                   	ret    
c00070d3:	90                   	nop

c00070d4 <Computer::enableNMI(bool)>:
c00070d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070dc:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00070e2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00070ea:	eb ce                	jmp    c00070ba <Computer::readCMOS(unsigned char)>

c00070ec <Computer::open(int, int, void*)>:
c00070ec:	56                   	push   esi
c00070ed:	53                   	push   ebx
c00070ee:	83 ec 10             	sub    esp,0x10
c00070f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00070f5:	f6 05 60 0b 02 c0 04 	test   BYTE PTR ds:0xc0020b60,0x4
c00070fc:	68 0d d8 01 c0       	push   0xc001d80d
c0007101:	0f 94 05 40 fa 01 c0 	sete   BYTE PTR ds:0xc001fa40
c0007108:	e8 16 09 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000710d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007114:	e8 b0 08 00 00       	call   c00079c9 <malloc>
c0007119:	89 04 24             	mov    DWORD PTR [esp],eax
c000711c:	89 c6                	mov    esi,eax
c000711e:	e8 ad 77 00 00       	call   c000e8d0 <ACPI::ACPI()>
c0007123:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007129:	58                   	pop    eax
c000712a:	5a                   	pop    edx
c000712b:	56                   	push   esi
c000712c:	53                   	push   ebx
c000712d:	e8 66 4a 00 00       	call   c000bb98 <Device::addChild(Device*)>
c0007132:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007135:	e8 c0 fc ff ff       	call   c0006dfa <Computer::detectFeatures()>
c000713a:	59                   	pop    ecx
c000713b:	5e                   	pop    esi
c000713c:	6a 01                	push   0x1
c000713e:	53                   	push   ebx
c000713f:	e8 90 ff ff ff       	call   c00070d4 <Computer::enableNMI(bool)>
c0007144:	c7 04 24 25 d8 01 c0 	mov    DWORD PTR [esp],0xc001d825
c000714b:	e8 d3 08 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0007150:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007157:	e8 6d 08 00 00       	call   c00079c9 <malloc>
c000715c:	89 04 24             	mov    DWORD PTR [esp],eax
c000715f:	89 c6                	mov    esi,eax
c0007161:	e8 12 82 00 00       	call   c000f378 <CPU::CPU()>
c0007166:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000716c:	58                   	pop    eax
c000716d:	5a                   	pop    edx
c000716e:	56                   	push   esi
c000716f:	53                   	push   ebx
c0007170:	e8 23 4a 00 00       	call   c000bb98 <Device::addChild(Device*)>
c0007175:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000717b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000717f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007181:	51                   	push   ecx
c0007182:	6a 00                	push   0x0
c0007184:	6a 00                	push   0x0
c0007186:	50                   	push   eax
c0007187:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000718a:	83 c4 14             	add    esp,0x14
c000718d:	68 d4 d8 01 c0       	push   0xc001d8d4
c0007192:	e8 8c 08 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c0007197:	e8 34 e1 00 00       	call   c00152d0 <HalInitialiseCoprocessor()>
c000719c:	c7 04 24 3f d8 01 c0 	mov    DWORD PTR [esp],0xc001d83f
c00071a3:	e8 7b 08 00 00       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c00071a8:	c7 04 24 0d 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c0d
c00071af:	e8 40 c3 00 00       	call   c00134f4 <setupMultitasking(void (*)())>
c00071b4:	83 c4 14             	add    esp,0x14
c00071b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00071bc:	5b                   	pop    ebx
c00071bd:	5e                   	pop    esi
c00071be:	c3                   	ret    
c00071bf:	90                   	nop

c00071c0 <Computer::disableNMI()>:
c00071c0:	6a 00                	push   0x0
c00071c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071c6:	50                   	push   eax
c00071c7:	e8 08 ff ff ff       	call   c00070d4 <Computer::enableNMI(bool)>
c00071cc:	5a                   	pop    edx
c00071cd:	59                   	pop    ecx
c00071ce:	c3                   	ret    
c00071cf:	90                   	nop

c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00071d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071d4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071db:	19 c0                	sbb    eax,eax
c00071dd:	83 e0 80             	and    eax,0xffffff80
c00071e0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071e4:	e6 70                	out    0x70,al
c00071e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071ea:	e6 71                	out    0x71,al
c00071ec:	c3                   	ret    
c00071ed:	90                   	nop

c00071ee <Computer::handleNMI()>:
c00071ee:	56                   	push   esi
c00071ef:	53                   	push   ebx
c00071f0:	83 ec 10             	sub    esp,0x10
c00071f3:	e4 92                	in     al,0x92
c00071f5:	89 c6                	mov    esi,eax
c00071f7:	e4 61                	in     al,0x61
c00071f9:	68 5a d8 01 c0       	push   0xc001d85a
c00071fe:	88 c3                	mov    bl,al
c0007200:	e8 53 35 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	83 e6 10             	and    esi,0x10
c000720b:	75 0d                	jne    c000721a <Computer::handleNMI()+0x2c>
c000720d:	f6 c3 40             	test   bl,0x40
c0007210:	75 1d                	jne    c000722f <Computer::handleNMI()+0x41>
c0007212:	84 db                	test   bl,bl
c0007214:	78 2d                	js     c0007243 <Computer::handleNMI()+0x55>
c0007216:	58                   	pop    eax
c0007217:	5b                   	pop    ebx
c0007218:	5e                   	pop    esi
c0007219:	c3                   	ret    
c000721a:	83 ec 0c             	sub    esp,0xc
c000721d:	68 6b d8 01 c0       	push   0xc001d86b
c0007222:	e8 80 90 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007227:	83 c4 10             	add    esp,0x10
c000722a:	f6 c3 40             	test   bl,0x40
c000722d:	74 e3                	je     c0007212 <Computer::handleNMI()+0x24>
c000722f:	83 ec 0c             	sub    esp,0xc
c0007232:	68 78 d8 01 c0       	push   0xc001d878
c0007237:	e8 6b 90 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	84 db                	test   bl,bl
c0007241:	79 d3                	jns    c0007216 <Computer::handleNMI()+0x28>
c0007243:	c7 44 24 10 82 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d882
c000724b:	5a                   	pop    edx
c000724c:	5b                   	pop    ebx
c000724d:	5e                   	pop    esi
c000724e:	e9 54 90 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c0007253:	90                   	nop

c0007254 <GDTEntry::setBase(unsigned int)>:
c0007254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	89 c1                	mov    ecx,eax
c000725e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007262:	c1 e9 10             	shr    ecx,0x10
c0007265:	c1 e8 18             	shr    eax,0x18
c0007268:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000726b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000726e:	c3                   	ret    
c000726f:	90                   	nop

c0007270 <GDTEntry::setLimit(unsigned int)>:
c0007270:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000727b:	66 89 01             	mov    WORD PTR [ecx],ax
c000727e:	83 e2 f0             	and    edx,0xfffffff0
c0007281:	c1 e8 10             	shr    eax,0x10
c0007284:	83 e0 0f             	and    eax,0xf
c0007287:	09 d0                	or     eax,edx
c0007289:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000728c:	c3                   	ret    
c000728d:	90                   	nop

c000728e <GDT::GDT()>:
c000728e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007292:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000729c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072a2:	90                   	nop
c00072a3:	c3                   	ret    

c00072a4 <GDT::addEntry(GDTEntry)>:
c00072a4:	53                   	push   ebx
c00072a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00072a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00072af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072b3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00072b7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00072bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00072be:	c1 e0 03             	shl    eax,0x3
c00072c1:	89 0a                	mov    DWORD PTR [edx],ecx
c00072c3:	5b                   	pop    ebx
c00072c4:	c3                   	ret    
c00072c5:	90                   	nop

c00072c6 <GDT::getNumberOfEntries()>:
c00072c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00072cc:	c3                   	ret    
c00072cd:	90                   	nop

c00072ce <GDT::flush()>:
c00072ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00072d4:	83 c0 04             	add    eax,0x4
c00072d7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00072de:	a3 52 0b 02 c0       	mov    ds:0xc0020b52,eax
c00072e3:	66 89 15 50 0b 02 c0 	mov    WORD PTR ds:0xc0020b50,dx
c00072ea:	e9 8e 90 ff ff       	jmp    c000037d <loadGDT>
c00072ef:	90                   	nop

c00072f0 <GDT::setup()>:
c00072f0:	57                   	push   edi
c00072f1:	56                   	push   esi
c00072f2:	53                   	push   ebx
c00072f3:	83 ec 30             	sub    esp,0x30
c00072f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072fa:	6a 00                	push   0x0
c00072fc:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007300:	56                   	push   esi
c0007301:	e8 4e ff ff ff       	call   c0007254 <GDTEntry::setBase(unsigned int)>
c0007306:	6a 00                	push   0x0
c0007308:	56                   	push   esi
c0007309:	e8 62 ff ff ff       	call   c0007270 <GDTEntry::setLimit(unsigned int)>
c000730e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007316:	6a 00                	push   0x0
c0007318:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000731c:	56                   	push   esi
c000731d:	e8 32 ff ff ff       	call   c0007254 <GDTEntry::setBase(unsigned int)>
c0007322:	68 ff ff ff 00       	push   0xffffff
c0007327:	56                   	push   esi
c0007328:	e8 43 ff ff ff       	call   c0007270 <GDTEntry::setLimit(unsigned int)>
c000732d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007331:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007335:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007339:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000733d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007342:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007347:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000734b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000734f:	89 f8                	mov    eax,edi
c0007351:	89 fa                	mov    edx,edi
c0007353:	80 e4 f7             	and    ah,0xf7
c0007356:	80 ce 60             	or     dh,0x60
c0007359:	89 c7                	mov    edi,eax
c000735b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000735f:	80 cc 60             	or     ah,0x60
c0007362:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007366:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000736a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000736e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007372:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007376:	83 c4 20             	add    esp,0x20
c0007379:	6a 00                	push   0x0
c000737b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000737f:	50                   	push   eax
c0007380:	e8 cf fe ff ff       	call   c0007254 <GDTEntry::setBase(unsigned int)>
c0007385:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007389:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000738d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007392:	6a 00                	push   0x0
c0007394:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007398:	50                   	push   eax
c0007399:	e8 b6 fe ff ff       	call   c0007254 <GDTEntry::setBase(unsigned int)>
c000739e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00073a3:	83 c4 0c             	add    esp,0xc
c00073a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073ae:	53                   	push   ebx
c00073af:	e8 f0 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c00073b4:	83 c4 0c             	add    esp,0xc
c00073b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073bf:	53                   	push   ebx
c00073c0:	e8 df fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c00073c5:	83 c4 0c             	add    esp,0xc
c00073c8:	57                   	push   edi
c00073c9:	56                   	push   esi
c00073ca:	53                   	push   ebx
c00073cb:	e8 d4 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c00073d0:	83 c4 0c             	add    esp,0xc
c00073d3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00073d7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00073db:	53                   	push   ebx
c00073dc:	e8 c3 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c00073e1:	83 c4 0c             	add    esp,0xc
c00073e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00073e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00073ec:	53                   	push   ebx
c00073ed:	e8 b2 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c00073f2:	83 c4 0c             	add    esp,0xc
c00073f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073fd:	53                   	push   ebx
c00073fe:	e8 a1 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c0007403:	83 c4 0c             	add    esp,0xc
c0007406:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000740a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000740e:	53                   	push   ebx
c000740f:	e8 90 fe ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c0007414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007417:	e8 b2 fe ff ff       	call   c00072ce <GDT::flush()>
c000741c:	83 c4 40             	add    esp,0x40
c000741f:	5b                   	pop    ebx
c0007420:	5e                   	pop    esi
c0007421:	5f                   	pop    edi
c0007422:	c3                   	ret    

c0007423 <idleFunction(void*)>:
c0007423:	83 ec 0c             	sub    esp,0xc
c0007426:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000742b:	48                   	dec    eax
c000742c:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0007431:	75 01                	jne    c0007434 <idleFunction(void*)+0x11>
c0007433:	fb                   	sti    
c0007434:	f4                   	hlt    
c0007435:	e8 18 52 01 00       	call   c001c652 <idleCommon()>
c000743a:	eb f8                	jmp    c0007434 <idleFunction(void*)+0x11>

c000743c <IDTEntry::IDTEntry(bool)>:
c000743c:	83 ec 04             	sub    esp,0x4
c000743f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007443:	88 04 24             	mov    BYTE PTR [esp],al
c0007446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000744a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007454:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000745c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000745f:	83 e2 f0             	and    edx,0xfffffff0
c0007462:	83 ca 0e             	or     edx,0xe
c0007465:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000746f:	83 e2 ef             	and    edx,0xffffffef
c0007472:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007475:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007479:	74 05                	je     c0007480 <IDTEntry::IDTEntry(bool)+0x44>
c000747b:	b2 03                	mov    dl,0x3
c000747d:	eb 05                	jmp    c0007484 <IDTEntry::IDTEntry(bool)+0x48>
c000747f:	90                   	nop
c0007480:	b2 00                	mov    dl,0x0
c0007482:	66 90                	xchg   ax,ax
c0007484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007488:	83 e2 03             	and    edx,0x3
c000748b:	88 d1                	mov    cl,dl
c000748d:	c1 e1 05             	shl    ecx,0x5
c0007490:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007493:	83 e2 9f             	and    edx,0xffffff9f
c0007496:	09 ca                	or     edx,ecx
c0007498:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000749b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000749f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00074a2:	83 ca 80             	or     edx,0xffffff80
c00074a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074a8:	90                   	nop
c00074a9:	83 c4 04             	add    esp,0x4
c00074ac:	c3                   	ret    
c00074ad:	90                   	nop

c00074ae <IDTEntry::setOffset(unsigned int)>:
c00074ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b6:	66 89 02             	mov    WORD PTR [edx],ax
c00074b9:	c1 e8 10             	shr    eax,0x10
c00074bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00074c0:	c3                   	ret    
c00074c1:	90                   	nop
c00074c2:	66 90                	xchg   ax,ax

c00074c4 <IDT::IDT()>:
c00074c4:	90                   	nop
c00074c5:	c3                   	ret    

c00074c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00074c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074ca:	83 c0 30             	add    eax,0x30
c00074cd:	c3                   	ret    

c00074ce <IDT::addEntry(IDTEntry, int)>:
c00074ce:	53                   	push   ebx
c00074cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00074df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00074e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00074e6:	5b                   	pop    ebx
c00074e7:	c3                   	ret    

c00074e8 <IDT::addEntry(int, void (*)(), bool)>:
c00074e8:	53                   	push   ebx
c00074e9:	83 ec 10             	sub    esp,0x10
c00074ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00074f1:	50                   	push   eax
c00074f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00074f6:	53                   	push   ebx
c00074f7:	e8 40 ff ff ff       	call   c000743c <IDTEntry::IDTEntry(bool)>
c00074fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007500:	53                   	push   ebx
c0007501:	e8 a8 ff ff ff       	call   c00074ae <IDTEntry::setOffset(unsigned int)>
c0007506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000750a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000750e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007516:	e8 b3 ff ff ff       	call   c00074ce <IDT::addEntry(IDTEntry, int)>
c000751b:	83 c4 30             	add    esp,0x30
c000751e:	5b                   	pop    ebx
c000751f:	c3                   	ret    

c0007520 <IDT::flush()>:
c0007520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007524:	66 c7 05 58 0b 02 c0 ff 07 	mov    WORD PTR ds:0xc0020b58,0x7ff
c000752d:	a3 5a 0b 02 c0       	mov    ds:0xc0020b5a,eax
c0007532:	0f 01 1d 58 0b 02 c0 	lidtd  ds:0xc0020b58
c0007539:	c3                   	ret    

c000753a <IDT::setup()>:
c000753a:	57                   	push   edi
c000753b:	56                   	push   esi
c000753c:	53                   	push   ebx
c000753d:	83 ec 10             	sub    esp,0x10
c0007540:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007544:	6a 00                	push   0x0
c0007546:	68 60 be 01 c0       	push   0xc001be60
c000754b:	6a 00                	push   0x0
c000754d:	53                   	push   ebx
c000754e:	e8 95 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 70 be 01 c0       	push   0xc001be70
c000755a:	6a 01                	push   0x1
c000755c:	53                   	push   ebx
c000755d:	e8 86 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 7a be 01 c0       	push   0xc001be7a
c000756c:	6a 02                	push   0x2
c000756e:	53                   	push   ebx
c000756f:	e8 74 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 84 be 01 c0       	push   0xc001be84
c000757b:	6a 03                	push   0x3
c000757d:	53                   	push   ebx
c000757e:	e8 65 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 8e be 01 c0       	push   0xc001be8e
c000758d:	6a 04                	push   0x4
c000758f:	53                   	push   ebx
c0007590:	e8 53 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 98 be 01 c0       	push   0xc001be98
c000759c:	6a 05                	push   0x5
c000759e:	53                   	push   ebx
c000759f:	e8 44 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 a2 be 01 c0       	push   0xc001bea2
c00075ae:	6a 06                	push   0x6
c00075b0:	53                   	push   ebx
c00075b1:	e8 32 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 ac be 01 c0       	push   0xc001beac
c00075bd:	6a 07                	push   0x7
c00075bf:	53                   	push   ebx
c00075c0:	e8 23 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 b6 be 01 c0       	push   0xc001beb6
c00075cf:	6a 08                	push   0x8
c00075d1:	53                   	push   ebx
c00075d2:	e8 11 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 be be 01 c0       	push   0xc001bebe
c00075de:	6a 09                	push   0x9
c00075e0:	53                   	push   ebx
c00075e1:	e8 02 ff ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 c8 be 01 c0       	push   0xc001bec8
c00075f0:	6a 0a                	push   0xa
c00075f2:	53                   	push   ebx
c00075f3:	e8 f0 fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 d0 be 01 c0       	push   0xc001bed0
c00075ff:	6a 0b                	push   0xb
c0007601:	53                   	push   ebx
c0007602:	e8 e1 fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 20             	add    esp,0x20
c000760a:	6a 00                	push   0x0
c000760c:	68 d8 be 01 c0       	push   0xc001bed8
c0007611:	6a 0c                	push   0xc
c0007613:	53                   	push   ebx
c0007614:	e8 cf fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007619:	6a 00                	push   0x0
c000761b:	68 e0 be 01 c0       	push   0xc001bee0
c0007620:	6a 0d                	push   0xd
c0007622:	53                   	push   ebx
c0007623:	e8 c0 fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007628:	83 c4 20             	add    esp,0x20
c000762b:	6a 00                	push   0x0
c000762d:	68 e8 be 01 c0       	push   0xc001bee8
c0007632:	6a 0e                	push   0xe
c0007634:	53                   	push   ebx
c0007635:	e8 ae fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000763a:	6a 00                	push   0x0
c000763c:	68 f0 be 01 c0       	push   0xc001bef0
c0007641:	6a 0f                	push   0xf
c0007643:	53                   	push   ebx
c0007644:	e8 9f fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007649:	83 c4 20             	add    esp,0x20
c000764c:	6a 00                	push   0x0
c000764e:	68 fa be 01 c0       	push   0xc001befa
c0007653:	6a 10                	push   0x10
c0007655:	53                   	push   ebx
c0007656:	e8 8d fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 04 bf 01 c0       	push   0xc001bf04
c0007662:	6a 11                	push   0x11
c0007664:	53                   	push   ebx
c0007665:	e8 7e fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 0e bf 01 c0       	push   0xc001bf0e
c0007674:	6a 12                	push   0x12
c0007676:	53                   	push   ebx
c0007677:	e8 6c fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 01                	push   0x1
c000767e:	68 a8 bf 01 c0       	push   0xc001bfa8
c0007683:	6a 60                	push   0x60
c0007685:	53                   	push   ebx
c0007686:	e8 5d fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 af bf 01 c0       	push   0xc001bfaf
c0007695:	6a 20                	push   0x20
c0007697:	53                   	push   ebx
c0007698:	e8 4b fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 9a bf 01 c0       	push   0xc001bf9a
c00076a4:	6a 21                	push   0x21
c00076a6:	53                   	push   ebx
c00076a7:	e8 3c fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 a1 bf 01 c0       	push   0xc001bfa1
c00076b6:	6a 22                	push   0x22
c00076b8:	53                   	push   ebx
c00076b9:	e8 2a fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 18 bf 01 c0       	push   0xc001bf18
c00076c5:	6a 23                	push   0x23
c00076c7:	53                   	push   ebx
c00076c8:	e8 1b fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 22 bf 01 c0       	push   0xc001bf22
c00076d7:	6a 24                	push   0x24
c00076d9:	53                   	push   ebx
c00076da:	e8 09 fe ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 2c bf 01 c0       	push   0xc001bf2c
c00076e6:	6a 25                	push   0x25
c00076e8:	53                   	push   ebx
c00076e9:	e8 fa fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 36 bf 01 c0       	push   0xc001bf36
c00076f8:	6a 26                	push   0x26
c00076fa:	53                   	push   ebx
c00076fb:	e8 e8 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 40 bf 01 c0       	push   0xc001bf40
c0007707:	6a 27                	push   0x27
c0007709:	53                   	push   ebx
c000770a:	e8 d9 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 4a bf 01 c0       	push   0xc001bf4a
c0007719:	6a 28                	push   0x28
c000771b:	53                   	push   ebx
c000771c:	e8 c7 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 54 bf 01 c0       	push   0xc001bf54
c0007728:	6a 29                	push   0x29
c000772a:	53                   	push   ebx
c000772b:	e8 b8 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 5e bf 01 c0       	push   0xc001bf5e
c000773a:	6a 2a                	push   0x2a
c000773c:	53                   	push   ebx
c000773d:	e8 a6 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 68 bf 01 c0       	push   0xc001bf68
c0007749:	6a 2b                	push   0x2b
c000774b:	53                   	push   ebx
c000774c:	e8 97 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 72 bf 01 c0       	push   0xc001bf72
c000775b:	6a 2c                	push   0x2c
c000775d:	53                   	push   ebx
c000775e:	e8 85 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 7c bf 01 c0       	push   0xc001bf7c
c000776a:	6a 2d                	push   0x2d
c000776c:	53                   	push   ebx
c000776d:	e8 76 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 86 bf 01 c0       	push   0xc001bf86
c000777c:	6a 2e                	push   0x2e
c000777e:	53                   	push   ebx
c000777f:	e8 64 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 00                	push   0x0
c0007786:	68 90 bf 01 c0       	push   0xc001bf90
c000778b:	6a 2f                	push   0x2f
c000778d:	53                   	push   ebx
c000778e:	e8 55 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 e6 bf 01 c0       	push   0xc001bfe6
c000779d:	6a 30                	push   0x30
c000779f:	53                   	push   ebx
c00077a0:	e8 43 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 f0 bf 01 c0       	push   0xc001bff0
c00077ac:	6a 31                	push   0x31
c00077ae:	53                   	push   ebx
c00077af:	e8 34 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 fa bf 01 c0       	push   0xc001bffa
c00077be:	6a 32                	push   0x32
c00077c0:	53                   	push   ebx
c00077c1:	e8 22 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 04 c0 01 c0       	push   0xc001c004
c00077cd:	6a 33                	push   0x33
c00077cf:	53                   	push   ebx
c00077d0:	e8 13 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 0e c0 01 c0       	push   0xc001c00e
c00077df:	6a 34                	push   0x34
c00077e1:	53                   	push   ebx
c00077e2:	e8 01 fd ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 18 c0 01 c0       	push   0xc001c018
c00077ee:	6a 35                	push   0x35
c00077f0:	53                   	push   ebx
c00077f1:	e8 f2 fc ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 22 c0 01 c0       	push   0xc001c022
c0007800:	6a 36                	push   0x36
c0007802:	53                   	push   ebx
c0007803:	e8 e0 fc ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 2c c0 01 c0       	push   0xc001c02c
c000780f:	6a 37                	push   0x37
c0007811:	53                   	push   ebx
c0007812:	e8 d1 fc ff ff       	call   c00074e8 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 1c             	add    esp,0x1c
c000781a:	6a 03                	push   0x3
c000781c:	6a 02                	push   0x2
c000781e:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c0007824:	e8 75 24 00 00       	call   c0009c9e <VAS::allocatePages(int, int)>
c0007829:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007830:	89 c6                	mov    esi,eax
c0007832:	e8 92 01 00 00       	call   c00079c9 <malloc>
c0007837:	81 c6 00 20 00 00    	add    esi,0x2000
c000783d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007840:	89 c7                	mov    edi,eax
c0007842:	e8 01 16 00 00       	call   c0008e48 <TSS::TSS()>
c0007847:	83 c4 0c             	add    esp,0xc
c000784a:	68 b6 be 01 c0       	push   0xc001beb6
c000784f:	56                   	push   esi
c0007850:	57                   	push   edi
c0007851:	e8 36 16 00 00       	call   c0008e8c <TSS::setup(unsigned long, unsigned long)>
c0007856:	89 c6                	mov    esi,eax
c0007858:	58                   	pop    eax
c0007859:	5a                   	pop    edx
c000785a:	6a 00                	push   0x0
c000785c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007860:	50                   	push   eax
c0007861:	e8 d6 fb ff ff       	call   c000743c <IDTEntry::IDTEntry(bool)>
c0007866:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000786a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000786f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007876:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000787c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007880:	80 ce 05             	or     dh,0x5
c0007883:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007886:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000788a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000788e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007891:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007894:	e8 87 fc ff ff       	call   c0007520 <IDT::flush()>
c0007899:	83 c4 20             	add    esp,0x20
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	c3                   	ret    

c00078a0 <sbrk>:
c00078a0:	55                   	push   ebp
c00078a1:	57                   	push   edi
c00078a2:	56                   	push   esi
c00078a3:	53                   	push   ebx
c00078a4:	83 ec 1c             	sub    esp,0x1c
c00078a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078ab:	85 c0                	test   eax,eax
c00078ad:	74 5f                	je     c000790e <sbrk+0x6e>
c00078af:	78 64                	js     c0007915 <sbrk+0x75>
c00078b1:	8b 15 d4 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f8d4
c00078b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00078bb:	05 ff 0f 00 00       	add    eax,0xfff
c00078c0:	89 c5                	mov    ebp,eax
c00078c2:	78 69                	js     c000792d <sbrk+0x8d>
c00078c4:	c1 fd 0c             	sar    ebp,0xc
c00078c7:	bb 00 00 00 00       	mov    ebx,0x0
c00078cc:	8b 35 30 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c30
c00078d2:	8b 3d d4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8d4
c00078d8:	e8 b9 04 00 00       	call   c0007d96 <Phys::allocatePage()>
c00078dd:	68 01 04 00 00       	push   0x401
c00078e2:	57                   	push   edi
c00078e3:	50                   	push   eax
c00078e4:	56                   	push   esi
c00078e5:	e8 b0 22 00 00       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c00078ea:	81 05 d4 f8 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f8d4,0x1000
c00078f4:	43                   	inc    ebx
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	39 dd                	cmp    ebp,ebx
c00078fa:	75 d0                	jne    c00078cc <sbrk+0x2c>
c00078fc:	0f 20 d8             	mov    eax,cr3
c00078ff:	0f 22 d8             	mov    cr3,eax
c0007902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007906:	83 c4 1c             	add    esp,0x1c
c0007909:	5b                   	pop    ebx
c000790a:	5e                   	pop    esi
c000790b:	5f                   	pop    edi
c000790c:	5d                   	pop    ebp
c000790d:	c3                   	ret    
c000790e:	a1 d4 f8 01 c0       	mov    eax,ds:0xc001f8d4
c0007913:	eb f1                	jmp    c0007906 <sbrk+0x66>
c0007915:	83 ec 08             	sub    esp,0x8
c0007918:	50                   	push   eax
c0007919:	68 24 d9 01 c0       	push   0xc001d924
c000791e:	e8 35 2e 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0007923:	83 c4 10             	add    esp,0x10
c0007926:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000792b:	eb d9                	jmp    c0007906 <sbrk+0x66>
c000792d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007933:	eb 8f                	jmp    c00078c4 <sbrk+0x24>

c0007935 <mmap>:
c0007935:	83 ec 18             	sub    esp,0x18
c0007938:	68 54 d9 01 c0       	push   0xc001d954
c000793d:	e8 65 89 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007942:	b8 00 00 00 00       	mov    eax,0x0
c0007947:	83 c4 1c             	add    esp,0x1c
c000794a:	c3                   	ret    

c000794b <munmap>:
c000794b:	83 ec 18             	sub    esp,0x18
c000794e:	68 59 d9 01 c0       	push   0xc001d959
c0007953:	e8 4f 89 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007958:	b8 00 00 00 00       	mov    eax,0x0
c000795d:	83 c4 1c             	add    esp,0x1c
c0007960:	c3                   	ret    

c0007961 <liballoc_lock()>:
c0007961:	fa                   	cli    
c0007962:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0007968:	b8 00 00 00 00       	mov    eax,0x0
c000796d:	c3                   	ret    

c000796e <liballoc_unlock()>:
c000796e:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0007973:	48                   	dec    eax
c0007974:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0007979:	75 01                	jne    c000797c <liballoc_unlock()+0xe>
c000797b:	fb                   	sti    
c000797c:	b8 00 00 00 00       	mov    eax,0x0
c0007981:	c3                   	ret    

c0007982 <liballoc_alloc(int)>:
c0007982:	83 ec 10             	sub    esp,0x10
c0007985:	6a 01                	push   0x1
c0007987:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000798b:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c0007991:	e8 08 23 00 00       	call   c0009c9e <VAS::allocatePages(int, int)>
c0007996:	83 c4 1c             	add    esp,0x1c
c0007999:	c3                   	ret    

c000799a <liballoc_free(void*, int)>:
c000799a:	83 ec 14             	sub    esp,0x14
c000799d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00079a1:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c00079a7:	e8 ae 1f 00 00       	call   c000995a <VAS::freeAllocatedPages(unsigned long)>
c00079ac:	b8 00 00 00 00       	mov    eax,0x0
c00079b1:	83 c4 1c             	add    esp,0x1c
c00079b4:	c3                   	ret    

c00079b5 <realloc>:
c00079b5:	83 ec 14             	sub    esp,0x14
c00079b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079c0:	e8 8c 9b ff ff       	call   c0001551 <dlrealloc>
c00079c5:	83 c4 1c             	add    esp,0x1c
c00079c8:	c3                   	ret    

c00079c9 <malloc>:
c00079c9:	83 ec 18             	sub    esp,0x18
c00079cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079d0:	e8 3f 96 ff ff       	call   c0001014 <dlmalloc>
c00079d5:	83 c4 1c             	add    esp,0x1c
c00079d8:	c3                   	ret    

c00079d9 <free>:
c00079d9:	83 ec 18             	sub    esp,0x18
c00079dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079e0:	e8 d4 92 ff ff       	call   c0000cb9 <dlfree>
c00079e5:	83 c4 1c             	add    esp,0x1c
c00079e8:	c3                   	ret    

c00079e9 <rfree>:
c00079e9:	83 ec 18             	sub    esp,0x18
c00079ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079f0:	e8 c4 92 ff ff       	call   c0000cb9 <dlfree>
c00079f5:	83 c4 1c             	add    esp,0x1c
c00079f8:	c3                   	ret    

c00079f9 <calloc>:
c00079f9:	56                   	push   esi
c00079fa:	53                   	push   ebx
c00079fb:	83 ec 10             	sub    esp,0x10
c00079fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007a02:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007a07:	53                   	push   ebx
c0007a08:	e8 bc ff ff ff       	call   c00079c9 <malloc>
c0007a0d:	89 c6                	mov    esi,eax
c0007a0f:	83 c4 0c             	add    esp,0xc
c0007a12:	53                   	push   ebx
c0007a13:	6a 00                	push   0x0
c0007a15:	50                   	push   eax
c0007a16:	e8 d5 8a ff ff       	call   c00004f0 <memset>
c0007a1b:	89 f0                	mov    eax,esi
c0007a1d:	83 c4 14             	add    esp,0x14
c0007a20:	5b                   	pop    ebx
c0007a21:	5e                   	pop    esi
c0007a22:	c3                   	ret    

c0007a23 <Krnl::setBootMessage(char const*)>:
c0007a23:	57                   	push   edi
c0007a24:	56                   	push   esi
c0007a25:	53                   	push   ebx
c0007a26:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007a2c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007a33:	68 9e 00 00 00       	push   0x9e
c0007a38:	6a 00                	push   0x0
c0007a3a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007a3e:	56                   	push   esi
c0007a3f:	e8 ac 8a ff ff       	call   c00004f0 <memset>
c0007a44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a47:	e8 14 8b ff ff       	call   c0000560 <strlen>
c0007a4c:	ba 50 00 00 00       	mov    edx,0x50
c0007a51:	83 c4 10             	add    esp,0x10
c0007a54:	29 c2                	sub    edx,eax
c0007a56:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007a5a:	d1 ea                	shr    edx,1
c0007a5c:	84 c0                	test   al,al
c0007a5e:	74 19                	je     c0007a79 <Krnl::setBootMessage(char const*)+0x56>
c0007a60:	01 d2                	add    edx,edx
c0007a62:	43                   	inc    ebx
c0007a63:	01 f2                	add    edx,esi
c0007a65:	80 cc 0f             	or     ah,0xf
c0007a68:	83 c2 02             	add    edx,0x2
c0007a6b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007a6f:	43                   	inc    ebx
c0007a70:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007a75:	84 c0                	test   al,al
c0007a77:	75 ec                	jne    c0007a65 <Krnl::setBootMessage(char const*)+0x42>
c0007a79:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007a7e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007a83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a85:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007a8b:	5b                   	pop    ebx
c0007a8c:	5e                   	pop    esi
c0007a8d:	5f                   	pop    edi
c0007a8e:	c3                   	ret    

c0007a8f <kernel_main>:
c0007a8f:	55                   	push   ebp
c0007a90:	57                   	push   edi
c0007a91:	bf f9 03 00 00       	mov    edi,0x3f9
c0007a96:	56                   	push   esi
c0007a97:	89 fa                	mov    edx,edi
c0007a99:	53                   	push   ebx
c0007a9a:	31 f6                	xor    esi,esi
c0007a9c:	83 ec 38             	sub    esp,0x38
c0007a9f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007aa4:	a3 60 0b 02 c0       	mov    ds:0xc0020b60,eax
c0007aa9:	89 f0                	mov    eax,esi
c0007aab:	ee                   	out    dx,al
c0007aac:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007ab1:	b0 80                	mov    al,0x80
c0007ab3:	89 da                	mov    edx,ebx
c0007ab5:	ee                   	out    dx,al
c0007ab6:	b1 03                	mov    cl,0x3
c0007ab8:	ba f8 03 00 00       	mov    edx,0x3f8
c0007abd:	88 c8                	mov    al,cl
c0007abf:	ee                   	out    dx,al
c0007ac0:	89 f0                	mov    eax,esi
c0007ac2:	89 fa                	mov    edx,edi
c0007ac4:	ee                   	out    dx,al
c0007ac5:	88 c8                	mov    al,cl
c0007ac7:	89 da                	mov    edx,ebx
c0007ac9:	ee                   	out    dx,al
c0007aca:	b0 c7                	mov    al,0xc7
c0007acc:	ba fa 03 00 00       	mov    edx,0x3fa
c0007ad1:	ee                   	out    dx,al
c0007ad2:	b0 0b                	mov    al,0xb
c0007ad4:	ba fc 03 00 00       	mov    edx,0x3fc
c0007ad9:	ee                   	out    dx,al
c0007ada:	68 60 d9 01 c0       	push   0xc001d960
c0007adf:	e8 74 2c 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0007ae4:	0f be 05 e0 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8e0
c0007aeb:	83 c4 10             	add    esp,0x10
c0007aee:	84 c0                	test   al,al
c0007af0:	74 5c                	je     c0007b4e <kernel_main+0xbf>
c0007af2:	31 db                	xor    ebx,ebx
c0007af4:	bd 0a 00 00 00       	mov    ebp,0xa
c0007af9:	bf 05 00 00 00       	mov    edi,0x5
c0007afe:	31 f6                	xor    esi,esi
c0007b00:	eb 14                	jmp    c0007b16 <kernel_main+0x87>
c0007b02:	47                   	inc    edi
c0007b03:	bd 0a 00 00 00       	mov    ebp,0xa
c0007b08:	31 f6                	xor    esi,esi
c0007b0a:	43                   	inc    ebx
c0007b0b:	0f be 83 e0 f8 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0720]
c0007b12:	84 c0                	test   al,al
c0007b14:	74 38                	je     c0007b4e <kernel_main+0xbf>
c0007b16:	80 be 16 f9 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe06ea],0xdb
c0007b1d:	0f 84 97 00 00 00    	je     c0007bba <kernel_main+0x12b>
c0007b23:	3c 0d                	cmp    al,0xd
c0007b25:	74 e3                	je     c0007b0a <kernel_main+0x7b>
c0007b27:	3c 0a                	cmp    al,0xa
c0007b29:	74 d7                	je     c0007b02 <kernel_main+0x73>
c0007b2b:	83 ec 0c             	sub    esp,0xc
c0007b2e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007b32:	57                   	push   edi
c0007b33:	43                   	inc    ebx
c0007b34:	52                   	push   edx
c0007b35:	46                   	inc    esi
c0007b36:	6a 00                	push   0x0
c0007b38:	6a 0e                	push   0xe
c0007b3a:	50                   	push   eax
c0007b3b:	e8 c4 e4 00 00       	call   c0016004 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007b40:	83 c4 20             	add    esp,0x20
c0007b43:	0f be 83 e0 f8 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0720]
c0007b4a:	84 c0                	test   al,al
c0007b4c:	75 c8                	jne    c0007b16 <kernel_main+0x87>
c0007b4e:	83 ec 0c             	sub    esp,0xc
c0007b51:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b56:	05 ff 0f 00 00       	add    eax,0xfff
c0007b5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b60:	50                   	push   eax
c0007b61:	e8 82 03 00 00       	call   c0007ee8 <Phys::physicalMemorySetup(unsigned int)>
c0007b66:	e8 59 1b 00 00       	call   c00096c4 <Virt::virtualMemorySetup()>
c0007b6b:	58                   	pop    eax
c0007b6c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b70:	53                   	push   ebx
c0007b71:	e8 0a 1c 00 00       	call   c0009780 <VAS::VAS()>
c0007b76:	89 1d 30 0c 02 c0    	mov    DWORD PTR ds:0xc0020c30,ebx
c0007b7c:	e8 9f 84 ff ff       	call   c0000020 <callGlobalConstructors>
c0007b81:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b88:	e8 3c fe ff ff       	call   c00079c9 <malloc>
c0007b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b90:	89 c6                	mov    esi,eax
c0007b92:	e8 af f1 ff ff       	call   c0006d46 <Computer::Computer()>
c0007b97:	6a 00                	push   0x0
c0007b99:	89 35 48 0b 02 c0    	mov    DWORD PTR ds:0xc0020b48,esi
c0007b9f:	6a 00                	push   0x0
c0007ba1:	6a 00                	push   0x0
c0007ba3:	56                   	push   esi
c0007ba4:	e8 43 f5 ff ff       	call   c00070ec <Computer::open(int, int, void*)>
c0007ba9:	83 c4 14             	add    esp,0x14
c0007bac:	53                   	push   ebx
c0007bad:	e8 84 1e 00 00       	call   c0009a36 <VAS::~VAS()>
c0007bb2:	83 c4 3c             	add    esp,0x3c
c0007bb5:	5b                   	pop    ebx
c0007bb6:	5e                   	pop    esi
c0007bb7:	5f                   	pop    edi
c0007bb8:	5d                   	pop    ebp
c0007bb9:	c3                   	ret    
c0007bba:	31 d2                	xor    edx,edx
c0007bbc:	8a 96 15 f9 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe06eb]
c0007bc2:	83 e2 fe             	and    edx,0xfffffffe
c0007bc5:	81 fa ba 00 00 00    	cmp    edx,0xba
c0007bcb:	0f 85 52 ff ff ff    	jne    c0007b23 <kernel_main+0x94>
c0007bd1:	45                   	inc    ebp
c0007bd2:	e9 4c ff ff ff       	jmp    c0007b23 <kernel_main+0x94>

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 19                	jmp    c0007c14 <Phys::allocateDMA(unsigned long)+0x3d>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 33                	je     c0007c3f <Phys::allocateDMA(unsigned long)+0x68>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	43                   	inc    ebx
c0007c0f:	83 fb 0f             	cmp    ebx,0xf
c0007c12:	7f 11                	jg     c0007c25 <Phys::allocateDMA(unsigned long)+0x4e>
c0007c14:	80 bb 7c 0b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf484],0x0
c0007c1b:	74 de                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1d:	31 c0                	xor    eax,eax
c0007c1f:	43                   	inc    ebx
c0007c20:	83 fb 0f             	cmp    ebx,0xf
c0007c23:	7e ef                	jle    c0007c14 <Phys::allocateDMA(unsigned long)+0x3d>
c0007c25:	83 ec 0c             	sub    esp,0xc
c0007c28:	68 78 d9 01 c0       	push   0xc001d978
c0007c2d:	e8 75 86 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007c32:	83 c4 10             	add    esp,0x10
c0007c35:	31 c0                	xor    eax,eax
c0007c37:	83 c4 1c             	add    esp,0x1c
c0007c3a:	5b                   	pop    ebx
c0007c3b:	5e                   	pop    esi
c0007c3c:	5f                   	pop    edi
c0007c3d:	5d                   	pop    ebp
c0007c3e:	c3                   	ret    
c0007c3f:	89 e9                	mov    ecx,ebp
c0007c41:	c1 f9 04             	sar    ecx,0x4
c0007c44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c48:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c4c:	89 ca                	mov    edx,ecx
c0007c4e:	4a                   	dec    edx
c0007c4f:	79 03                	jns    c0007c54 <Phys::allocateDMA(unsigned long)+0x7d>
c0007c51:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c54:	c1 fa 04             	sar    edx,0x4
c0007c57:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c5b:	74 08                	je     c0007c65 <Phys::allocateDMA(unsigned long)+0x8e>
c0007c5d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c61:	31 c0                	xor    eax,eax
c0007c63:	eb ba                	jmp    c0007c1f <Phys::allocateDMA(unsigned long)+0x48>
c0007c65:	85 f6                	test   esi,esi
c0007c67:	74 15                	je     c0007c7e <Phys::allocateDMA(unsigned long)+0xa7>
c0007c69:	8d 95 7c 0b 02 c0    	lea    edx,[ebp-0x3ffdf484]
c0007c6f:	8d 84 05 7d 0b 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf483]
c0007c76:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c79:	42                   	inc    edx
c0007c7a:	39 d0                	cmp    eax,edx
c0007c7c:	75 f8                	jne    c0007c76 <Phys::allocateDMA(unsigned long)+0x9f>
c0007c7e:	01 3d 74 0b 02 c0    	add    DWORD PTR ds:0xc0020b74,edi
c0007c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c88:	85 c0                	test   eax,eax
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xcc>
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	68 78 d9 01 c0       	push   0xc001d978
c0007c94:	e8 0e 86 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007c99:	83 c4 10             	add    esp,0x10
c0007c9c:	89 f0                	mov    eax,esi
c0007c9e:	e9 6b ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007ca3:	c1 e5 0c             	shl    ebp,0xc
c0007ca6:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cac:	eb 89                	jmp    c0007c37 <Phys::allocateDMA(unsigned long)+0x60>

c0007cae <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cbc:	c1 ea 0c             	shr    edx,0xc
c0007cbf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cc4:	29 15 74 0b 02 c0    	sub    DWORD PTR ds:0xc0020b74,edx
c0007cca:	c1 e8 0c             	shr    eax,0xc
c0007ccd:	85 d2                	test   edx,edx
c0007ccf:	74 0f                	je     c0007ce0 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007cd1:	05 7c 0b 02 c0       	add    eax,0xc0020b7c
c0007cd6:	01 c2                	add    edx,eax
c0007cd8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cdb:	40                   	inc    eax
c0007cdc:	39 d0                	cmp    eax,edx
c0007cde:	75 f8                	jne    c0007cd8 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007ce0:	c3                   	ret    

c0007ce1 <Phys::setPageState(unsigned long, bool)>:
c0007ce1:	56                   	push   esi
c0007ce2:	ba 01 00 00 00       	mov    edx,0x1
c0007ce7:	53                   	push   ebx
c0007ce8:	8b 35 24 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa24
c0007cee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007cf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cf6:	89 c8                	mov    eax,ecx
c0007cf8:	83 e1 07             	and    ecx,0x7
c0007cfb:	c1 e8 03             	shr    eax,0x3
c0007cfe:	d3 e3                	shl    ebx,cl
c0007d00:	01 c6                	add    esi,eax
c0007d02:	d3 e2                	shl    edx,cl
c0007d04:	f7 d2                	not    edx
c0007d06:	20 16                	and    BYTE PTR [esi],dl
c0007d08:	03 05 24 fa 01 c0    	add    eax,DWORD PTR ds:0xc001fa24
c0007d0e:	08 18                	or     BYTE PTR [eax],bl
c0007d10:	5b                   	pop    ebx
c0007d11:	5e                   	pop    esi
c0007d12:	c3                   	ret    

c0007d13 <Phys::getPageState(unsigned long)>:
c0007d13:	53                   	push   ebx
c0007d14:	8b 15 24 fa 01 c0    	mov    edx,DWORD PTR ds:0xc001fa24
c0007d1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007d1e:	31 db                	xor    ebx,ebx
c0007d20:	89 c8                	mov    eax,ecx
c0007d22:	83 e1 07             	and    ecx,0x7
c0007d25:	c1 e8 03             	shr    eax,0x3
c0007d28:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007d2b:	89 d8                	mov    eax,ebx
c0007d2d:	5b                   	pop    ebx
c0007d2e:	d3 f8                	sar    eax,cl
c0007d30:	83 e0 01             	and    eax,0x1
c0007d33:	c3                   	ret    

c0007d34 <Phys::freePage(unsigned long)>:
c0007d34:	53                   	push   ebx
c0007d35:	83 ec 08             	sub    esp,0x8
c0007d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d42:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d48:	76 3a                	jbe    c0007d84 <Phys::freePage(unsigned long)+0x50>
c0007d4a:	c1 e8 0c             	shr    eax,0xc
c0007d4d:	50                   	push   eax
c0007d4e:	89 c3                	mov    ebx,eax
c0007d50:	e8 be ff ff ff       	call   c0007d13 <Phys::getPageState(unsigned long)>
c0007d55:	5a                   	pop    edx
c0007d56:	84 c0                	test   al,al
c0007d58:	74 19                	je     c0007d73 <Phys::freePage(unsigned long)+0x3f>
c0007d5a:	83 ec 08             	sub    esp,0x8
c0007d5d:	ff 0d 74 0b 02 c0    	dec    DWORD PTR ds:0xc0020b74
c0007d63:	6a 00                	push   0x0
c0007d65:	53                   	push   ebx
c0007d66:	e8 76 ff ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0007d6b:	83 c4 10             	add    esp,0x10
c0007d6e:	83 c4 08             	add    esp,0x8
c0007d71:	5b                   	pop    ebx
c0007d72:	c3                   	ret    
c0007d73:	c7 44 24 10 1d da 01 c0 	mov    DWORD PTR [esp+0x10],0xc001da1d
c0007d7b:	83 c4 08             	add    esp,0x8
c0007d7e:	5b                   	pop    ebx
c0007d7f:	e9 23 85 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c0007d84:	68 00 10 00 00       	push   0x1000
c0007d89:	50                   	push   eax
c0007d8a:	e8 1f ff ff ff       	call   c0007cae <Phys::freeDMA(unsigned long, unsigned long)>
c0007d8f:	59                   	pop    ecx
c0007d90:	5b                   	pop    ebx
c0007d91:	83 c4 08             	add    esp,0x8
c0007d94:	5b                   	pop    ebx
c0007d95:	c3                   	ret    

c0007d96 <Phys::allocatePage()>:
c0007d96:	56                   	push   esi
c0007d97:	53                   	push   ebx
c0007d98:	83 ec 14             	sub    esp,0x14
c0007d9b:	8b 35 68 0b 02 c0    	mov    esi,DWORD PTR ds:0xc0020b68
c0007da1:	89 f3                	mov    ebx,esi
c0007da3:	eb 0a                	jmp    c0007daf <Phys::allocatePage()+0x19>
c0007da5:	89 1d 68 0b 02 c0    	mov    DWORD PTR ds:0xc0020b68,ebx
c0007dab:	39 de                	cmp    esi,ebx
c0007dad:	74 24                	je     c0007dd3 <Phys::allocatePage()+0x3d>
c0007daf:	53                   	push   ebx
c0007db0:	e8 5e ff ff ff       	call   c0007d13 <Phys::getPageState(unsigned long)>
c0007db5:	5a                   	pop    edx
c0007db6:	84 c0                	test   al,al
c0007db8:	74 5f                	je     c0007e19 <Phys::allocatePage()+0x83>
c0007dba:	43                   	inc    ebx
c0007dbb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dc1:	75 e2                	jne    c0007da5 <Phys::allocatePage()+0xf>
c0007dc3:	31 db                	xor    ebx,ebx
c0007dc5:	c7 05 68 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b68,0x0
c0007dcf:	39 de                	cmp    esi,ebx
c0007dd1:	75 dc                	jne    c0007daf <Phys::allocatePage()+0x19>
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	80 35 8c 0b 02 c0 01 	xor    BYTE PTR ds:0xc0020b8c,0x1
c0007ddd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007de2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007de5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007deb:	50                   	push   eax
c0007dec:	e8 87 26 00 00       	call   c000a478 <VAS::scanForEviction()>
c0007df1:	83 c4 10             	add    esp,0x10
c0007df4:	85 c0                	test   eax,eax
c0007df6:	75 3f                	jne    c0007e37 <Phys::allocatePage()+0xa1>
c0007df8:	83 ec 0c             	sub    esp,0xc
c0007dfb:	68 a0 d9 01 c0       	push   0xc001d9a0
c0007e00:	e8 a2 84 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0007e05:	83 c4 10             	add    esp,0x10
c0007e08:	8b 1d 68 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b68
c0007e0e:	53                   	push   ebx
c0007e0f:	e8 ff fe ff ff       	call   c0007d13 <Phys::getPageState(unsigned long)>
c0007e14:	5a                   	pop    edx
c0007e15:	84 c0                	test   al,al
c0007e17:	75 a1                	jne    c0007dba <Phys::allocatePage()+0x24>
c0007e19:	6a 01                	push   0x1
c0007e1b:	53                   	push   ebx
c0007e1c:	e8 c0 fe ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0007e21:	a1 68 0b 02 c0       	mov    eax,ds:0xc0020b68
c0007e26:	5a                   	pop    edx
c0007e27:	ff 05 74 0b 02 c0    	inc    DWORD PTR ds:0xc0020b74
c0007e2d:	c1 e0 0c             	shl    eax,0xc
c0007e30:	59                   	pop    ecx
c0007e31:	83 c4 14             	add    esp,0x14
c0007e34:	5b                   	pop    ebx
c0007e35:	5e                   	pop    esi
c0007e36:	c3                   	ret    
c0007e37:	83 ec 08             	sub    esp,0x8
c0007e3a:	89 c2                	mov    edx,eax
c0007e3c:	6a 01                	push   0x1
c0007e3e:	c1 ea 0c             	shr    edx,0xc
c0007e41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e45:	52                   	push   edx
c0007e46:	e8 96 fe ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e52:	eb dd                	jmp    c0007e31 <Phys::allocatePage()+0x9b>

c0007e54 <Phys::allocateContiguousPages(int)>:
c0007e54:	57                   	push   edi
c0007e55:	56                   	push   esi
c0007e56:	53                   	push   ebx
c0007e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e5b:	fa                   	cli    
c0007e5c:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0007e62:	31 db                	xor    ebx,ebx
c0007e64:	85 db                	test   ebx,ebx
c0007e66:	75 11                	jne    c0007e79 <Phys::allocateContiguousPages(int)+0x25>
c0007e68:	e8 29 ff ff ff       	call   c0007d96 <Phys::allocatePage()>
c0007e6d:	83 fe 01             	cmp    esi,0x1
c0007e70:	89 c7                	mov    edi,eax
c0007e72:	74 21                	je     c0007e95 <Phys::allocateContiguousPages(int)+0x41>
c0007e74:	bb 01 00 00 00       	mov    ebx,0x1
c0007e79:	e8 18 ff ff ff       	call   c0007d96 <Phys::allocatePage()>
c0007e7e:	89 da                	mov    edx,ebx
c0007e80:	c1 e2 0c             	shl    edx,0xc
c0007e83:	01 fa                	add    edx,edi
c0007e85:	39 c2                	cmp    edx,eax
c0007e87:	74 20                	je     c0007ea9 <Phys::allocateContiguousPages(int)+0x55>
c0007e89:	bb 01 00 00 00       	mov    ebx,0x1
c0007e8e:	89 c7                	mov    edi,eax
c0007e90:	83 fe 01             	cmp    esi,0x1
c0007e93:	75 e4                	jne    c0007e79 <Phys::allocateContiguousPages(int)+0x25>
c0007e95:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0007e9a:	48                   	dec    eax
c0007e9b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0007ea0:	75 01                	jne    c0007ea3 <Phys::allocateContiguousPages(int)+0x4f>
c0007ea2:	fb                   	sti    
c0007ea3:	89 f8                	mov    eax,edi
c0007ea5:	5b                   	pop    ebx
c0007ea6:	5e                   	pop    esi
c0007ea7:	5f                   	pop    edi
c0007ea8:	c3                   	ret    
c0007ea9:	43                   	inc    ebx
c0007eaa:	39 f3                	cmp    ebx,esi
c0007eac:	75 b6                	jne    c0007e64 <Phys::allocateContiguousPages(int)+0x10>
c0007eae:	eb e5                	jmp    c0007e95 <Phys::allocateContiguousPages(int)+0x41>

c0007eb0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007eb0:	56                   	push   esi
c0007eb1:	53                   	push   ebx
c0007eb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eb6:	39 1d 6c 0b 02 c0    	cmp    DWORD PTR ds:0xc0020b6c,ebx
c0007ebc:	73 06                	jae    c0007ec4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ebe:	89 1d 6c 0b 02 c0    	mov    DWORD PTR ds:0xc0020b6c,ebx
c0007ec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ec8:	c1 eb 0c             	shr    ebx,0xc
c0007ecb:	c1 e8 0c             	shr    eax,0xc
c0007ece:	39 d8                	cmp    eax,ebx
c0007ed0:	73 13                	jae    c0007ee5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007ed2:	6a 00                	push   0x0
c0007ed4:	8d 70 01             	lea    esi,[eax+0x1]
c0007ed7:	50                   	push   eax
c0007ed8:	e8 04 fe ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0007edd:	5a                   	pop    edx
c0007ede:	89 f0                	mov    eax,esi
c0007ee0:	59                   	pop    ecx
c0007ee1:	39 f3                	cmp    ebx,esi
c0007ee3:	75 ed                	jne    c0007ed2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ee5:	5b                   	pop    ebx
c0007ee6:	5e                   	pop    esi
c0007ee7:	c3                   	ret    

c0007ee8 <Phys::physicalMemorySetup(unsigned int)>:
c0007ee8:	55                   	push   ebp
c0007ee9:	57                   	push   edi
c0007eea:	56                   	push   esi
c0007eeb:	53                   	push   ebx
c0007eec:	31 db                	xor    ebx,ebx
c0007eee:	83 ec 40             	sub    esp,0x40
c0007ef1:	6a 10                	push   0x10
c0007ef3:	6a 00                	push   0x0
c0007ef5:	68 7c 0b 02 c0       	push   0xc0020b7c
c0007efa:	e8 f1 85 ff ff       	call   c00004f0 <memset>
c0007eff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f03:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f08:	05 00 10 00 00       	add    eax,0x1000
c0007f0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f11:	5a                   	pop    edx
c0007f12:	59                   	pop    ecx
c0007f13:	50                   	push   eax
c0007f14:	68 33 da 01 c0       	push   0xc001da33
c0007f19:	e8 3a 28 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0007f1e:	83 c4 10             	add    esp,0x10
c0007f21:	83 ec 08             	sub    esp,0x8
c0007f24:	6a 01                	push   0x1
c0007f26:	53                   	push   ebx
c0007f27:	43                   	inc    ebx
c0007f28:	e8 b4 fd ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0007f2d:	83 c4 10             	add    esp,0x10
c0007f30:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f36:	75 e9                	jne    c0007f21 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f38:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007f3e:	66 85 c0             	test   ax,ax
c0007f41:	0f 84 97 01 00 00    	je     c00080de <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007f47:	89 c7                	mov    edi,eax
c0007f49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f51:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007f57:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f5c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007f60:	eb 15                	jmp    c0007f77 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007f62:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007f66:	83 c3 18             	add    ebx,0x18
c0007f69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f6d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007f71:	0f 84 77 01 00 00    	je     c00080ee <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007f77:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007f7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007f7d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007f80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007f84:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007f88:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007f8a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007f8d:	01 f0                	add    eax,esi
c0007f8f:	55                   	push   ebp
c0007f90:	11 fa                	adc    edx,edi
c0007f92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007f9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f9e:	50                   	push   eax
c0007f9f:	56                   	push   esi
c0007fa0:	68 d0 d9 01 c0       	push   0xc001d9d0
c0007fa5:	e8 ae 27 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0007faa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fae:	83 c4 10             	add    esp,0x10
c0007fb1:	09 f8                	or     eax,edi
c0007fb3:	0f 85 35 01 00 00    	jne    c00080ee <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007fb9:	4d                   	dec    ebp
c0007fba:	75 a6                	jne    c0007f62 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007fbc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007fc0:	ba 00 00 08 00       	mov    edx,0x80000
c0007fc5:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007fc9:	39 f2                	cmp    edx,esi
c0007fcb:	89 c1                	mov    ecx,eax
c0007fcd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fd5:	19 f9                	sbb    ecx,edi
c0007fd7:	0f 82 a7 00 00 00    	jb     c0008084 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007fdd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fe1:	89 c1                	mov    ecx,eax
c0007fe3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007fe7:	0f 83 97 00 00 00    	jae    c0008084 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007fed:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007ff2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ff6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007ffa:	39 fa                	cmp    edx,edi
c0007ffc:	19 e8                	sbb    eax,ebp
c0007ffe:	0f 82 9a 01 00 00    	jb     c000819e <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008004:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008008:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000800c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008012:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008017:	83 d5 ff             	adc    ebp,0xffffffff
c000801a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000801e:	31 c0                	xor    eax,eax
c0008020:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008024:	39 fa                	cmp    edx,edi
c0008026:	89 c1                	mov    ecx,eax
c0008028:	19 e9                	sbb    ecx,ebp
c000802a:	0f 83 32 ff ff ff    	jae    c0007f62 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008030:	be 00 00 08 00       	mov    esi,0x80000
c0008035:	51                   	push   ecx
c0008036:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000803a:	57                   	push   edi
c000803b:	56                   	push   esi
c000803c:	68 f4 d9 01 c0       	push   0xc001d9f4
c0008041:	e8 12 27 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0008046:	5d                   	pop    ebp
c0008047:	58                   	pop    eax
c0008048:	57                   	push   edi
c0008049:	56                   	push   esi
c000804a:	e8 61 fe ff ff       	call   c0007eb0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000804f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	83 c4 0c             	add    esp,0xc
c000805a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000805e:	03 05 78 0b 02 c0    	add    eax,DWORD PTR ds:0xc0020b78
c0008064:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000806b:	a3 78 0b 02 c0       	mov    ds:0xc0020b78,eax
c0008070:	52                   	push   edx
c0008071:	50                   	push   eax
c0008072:	68 59 da 01 c0       	push   0xc001da59
c0008077:	e8 dc 26 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	e9 de fe ff ff       	jmp    c0007f62 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008084:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000808c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008090:	39 ea                	cmp    edx,ebp
c0008092:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008096:	0f 82 c6 fe ff ff    	jb     c0007f62 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000809c:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080a1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080a5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080a9:	0f 83 b3 fe ff ff    	jae    c0007f62 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00080af:	39 ee                	cmp    esi,ebp
c00080b1:	89 f8                	mov    eax,edi
c00080b3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080b7:	0f 83 78 ff ff ff    	jae    c0008035 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c00080bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00080c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00080c5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00080c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00080cd:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00080d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00080d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00080d9:	e9 57 ff ff ff       	jmp    c0008035 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c00080de:	83 ec 0c             	sub    esp,0xc
c00080e1:	68 4b da 01 c0       	push   0xc001da4b
c00080e6:	e8 bc 81 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c00080eb:	83 c4 10             	add    esp,0x10
c00080ee:	83 ec 08             	sub    esp,0x8
c00080f1:	bb 60 00 00 00       	mov    ebx,0x60
c00080f6:	6a 00                	push   0x0
c00080f8:	6a 06                	push   0x6
c00080fa:	e8 e2 fb ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c00080ff:	58                   	pop    eax
c0008100:	5a                   	pop    edx
c0008101:	6a 00                	push   0x0
c0008103:	6a 07                	push   0x7
c0008105:	e8 d7 fb ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c000810a:	83 05 78 0b 02 c0 02 	add    DWORD PTR ds:0xc0020b78,0x2
c0008111:	83 c4 10             	add    esp,0x10
c0008114:	83 ec 08             	sub    esp,0x8
c0008117:	6a 00                	push   0x0
c0008119:	53                   	push   ebx
c000811a:	43                   	inc    ebx
c000811b:	e8 c1 fb ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0008120:	83 c4 10             	add    esp,0x10
c0008123:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008129:	75 e9                	jne    c0008114 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c000812b:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0008130:	bb 40 01 00 00       	mov    ebx,0x140
c0008135:	83 c0 20             	add    eax,0x20
c0008138:	a3 78 0b 02 c0       	mov    ds:0xc0020b78,eax
c000813d:	eb 22                	jmp    c0008161 <Phys::physicalMemorySetup(unsigned int)+0x279>
c000813f:	83 ec 08             	sub    esp,0x8
c0008142:	6a 00                	push   0x0
c0008144:	53                   	push   ebx
c0008145:	43                   	inc    ebx
c0008146:	e8 96 fb ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c000814b:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	40                   	inc    eax
c0008154:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000815a:	a3 78 0b 02 c0       	mov    ds:0xc0020b78,eax
c000815f:	74 07                	je     c0008168 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008161:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008166:	7e d7                	jle    c000813f <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008168:	bb d0 01 00 00       	mov    ebx,0x1d0
c000816d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008172:	7f 22                	jg     c0008196 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008174:	83 ec 08             	sub    esp,0x8
c0008177:	6a 00                	push   0x0
c0008179:	53                   	push   ebx
c000817a:	43                   	inc    ebx
c000817b:	e8 61 fb ff ff       	call   c0007ce1 <Phys::setPageState(unsigned long, bool)>
c0008180:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0008185:	83 c4 10             	add    esp,0x10
c0008188:	40                   	inc    eax
c0008189:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000818f:	a3 78 0b 02 c0       	mov    ds:0xc0020b78,eax
c0008194:	75 d7                	jne    c000816d <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008196:	83 c4 3c             	add    esp,0x3c
c0008199:	5b                   	pop    ebx
c000819a:	5e                   	pop    esi
c000819b:	5f                   	pop    edi
c000819c:	5d                   	pop    ebp
c000819d:	c3                   	ret    
c000819e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00081ae:	e9 51 fe ff ff       	jmp    c0008004 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c00081b3:	90                   	nop

c00081b4 <Pipe::isAtty()>:
c00081b4:	31 c0                	xor    eax,eax
c00081b6:	c3                   	ret    
c00081b7:	90                   	nop

c00081b8 <Pipe::~Pipe()>:
c00081b8:	83 ec 0c             	sub    esp,0xc
c00081bb:	ba b8 da 01 c0       	mov    edx,0xc001dab8
c00081c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c4:	89 10                	mov    DWORD PTR [eax],edx
c00081c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081ca:	83 ec 0c             	sub    esp,0xc
c00081cd:	50                   	push   eax
c00081ce:	e8 d1 10 00 00       	call   c00092a4 <UnixFile::~UnixFile()>
c00081d3:	83 c4 10             	add    esp,0x10
c00081d6:	90                   	nop
c00081d7:	83 c4 0c             	add    esp,0xc
c00081da:	c3                   	ret    
c00081db:	90                   	nop

c00081dc <Pipe::~Pipe()>:
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	83 ec 0c             	sub    esp,0xc
c00081e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e6:	e8 cd ff ff ff       	call   c00081b8 <Pipe::~Pipe()>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 ec 08             	sub    esp,0x8
c00081f1:	6a 20                	push   0x20
c00081f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081f7:	e8 66 24 00 00       	call   c000a662 <operator delete(void*, unsigned long)>
c00081fc:	83 c4 10             	add    esp,0x10
c00081ff:	83 c4 0c             	add    esp,0xc
c0008202:	c3                   	ret    
c0008203:	90                   	nop

c0008204 <Pipe::write(unsigned long long, void*, int*)>:
c0008204:	55                   	push   ebp
c0008205:	57                   	push   edi
c0008206:	56                   	push   esi
c0008207:	53                   	push   ebx
c0008208:	83 ec 1c             	sub    esp,0x1c
c000820b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000820f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008213:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008216:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000821a:	89 04 24             	mov    DWORD PTR [esp],eax
c000821d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008221:	89 d8                	mov    eax,ebx
c0008223:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008226:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000822a:	89 d6                	mov    esi,edx
c000822c:	89 d7                	mov    edi,edx
c000822e:	c1 ff 1f             	sar    edi,0x1f
c0008231:	03 34 24             	add    esi,DWORD PTR [esp]
c0008234:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008238:	c1 f8 1f             	sar    eax,0x1f
c000823b:	39 f3                	cmp    ebx,esi
c000823d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008245:	19 f8                	sbb    eax,edi
c0008247:	b8 01 00 00 00       	mov    eax,0x1
c000824c:	72 6e                	jb     c00082bc <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000824e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008251:	01 d0                	add    eax,edx
c0008253:	99                   	cdq    
c0008254:	f7 fb                	idiv   ebx
c0008256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000825a:	29 d3                	sub    ebx,edx
c000825c:	89 d7                	mov    edi,edx
c000825e:	89 de                	mov    esi,ebx
c0008260:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008263:	c1 fb 1f             	sar    ebx,0x1f
c0008266:	39 f2                	cmp    edx,esi
c0008268:	19 d8                	sbb    eax,ebx
c000826a:	b8 00 00 00 00       	mov    eax,0x0
c000826f:	72 04                	jb     c0008275 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008271:	89 d0                	mov    eax,edx
c0008273:	29 f0                	sub    eax,esi
c0008275:	89 d3                	mov    ebx,edx
c0008277:	29 c3                	sub    ebx,eax
c0008279:	74 0b                	je     c0008286 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000827b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000827e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008282:	89 d9                	mov    ecx,ebx
c0008284:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008286:	85 c0                	test   eax,eax
c0008288:	74 0d                	je     c0008297 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000828a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000828e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008291:	89 de                	mov    esi,ebx
c0008293:	89 c1                	mov    ecx,eax
c0008295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008297:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000829a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000829f:	75 10                	jne    c00082b1 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082a1:	83 ec 0c             	sub    esp,0xc
c00082a4:	68 75 da 01 c0       	push   0xc001da75
c00082a9:	e8 f9 7f 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c00082ae:	83 c4 10             	add    esp,0x10
c00082b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082b5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00082b8:	89 08                	mov    DWORD PTR [eax],ecx
c00082ba:	31 c0                	xor    eax,eax
c00082bc:	83 c4 1c             	add    esp,0x1c
c00082bf:	5b                   	pop    ebx
c00082c0:	5e                   	pop    esi
c00082c1:	5f                   	pop    edi
c00082c2:	5d                   	pop    ebp
c00082c3:	c3                   	ret    

c00082c4 <Pipe::read(unsigned long long, void*, int*)>:
c00082c4:	55                   	push   ebp
c00082c5:	57                   	push   edi
c00082c6:	56                   	push   esi
c00082c7:	53                   	push   ebx
c00082c8:	83 ec 1c             	sub    esp,0x1c
c00082cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00082cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00082d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00082d7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00082da:	89 c8                	mov    eax,ecx
c00082dc:	99                   	cdq    
c00082dd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00082e1:	74 24                	je     c0008307 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082e3:	39 f9                	cmp    ecx,edi
c00082e5:	89 d1                	mov    ecx,edx
c00082e7:	19 f1                	sbb    ecx,esi
c00082e9:	73 1c                	jae    c0008307 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082eb:	fa                   	cli    
c00082ec:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00082f2:	e8 05 b3 00 00       	call   c00135fc <schedule()>
c00082f7:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00082fc:	48                   	dec    eax
c00082fd:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0008302:	75 d3                	jne    c00082d7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008304:	fb                   	sti    
c0008305:	eb d0                	jmp    c00082d7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008307:	39 f8                	cmp    eax,edi
c0008309:	89 d1                	mov    ecx,edx
c000830b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000830e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008312:	19 f1                	sbb    ecx,esi
c0008314:	73 07                	jae    c000831d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008316:	89 04 24             	mov    DWORD PTR [esp],eax
c0008319:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000831d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008320:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008323:	29 f7                	sub    edi,esi
c0008325:	89 f8                	mov    eax,edi
c0008327:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000832b:	99                   	cdq    
c000832c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000832f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008333:	19 d0                	sbb    eax,edx
c0008335:	73 07                	jae    c000833e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000833e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008341:	89 ea                	mov    edx,ebp
c0008343:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008347:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000834c:	74 0d                	je     c000835b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000834e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008351:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008355:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000835b:	85 d2                	test   edx,edx
c000835d:	74 11                	je     c0008370 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000835f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008363:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008366:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000836a:	89 d1                	mov    ecx,edx
c000836c:	89 c7                	mov    edi,eax
c000836e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008370:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008373:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008376:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008379:	99                   	cdq    
c000837a:	89 f7                	mov    edi,esi
c000837c:	03 04 24             	add    eax,DWORD PTR [esp]
c000837f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008383:	c1 ff 1f             	sar    edi,0x1f
c0008386:	57                   	push   edi
c0008387:	56                   	push   esi
c0008388:	52                   	push   edx
c0008389:	50                   	push   eax
c000838a:	e8 41 41 01 00       	call   c001c4d0 <__umoddi3>
c000838f:	83 c4 10             	add    esp,0x10
c0008392:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008395:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000839a:	75 10                	jne    c00083ac <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000839c:	83 ec 0c             	sub    esp,0xc
c000839f:	68 92 da 01 c0       	push   0xc001da92
c00083a4:	e8 fe 7e 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c00083a9:	83 c4 10             	add    esp,0x10
c00083ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00083b0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00083b3:	89 10                	mov    DWORD PTR [eax],edx
c00083b5:	83 c4 1c             	add    esp,0x1c
c00083b8:	31 c0                	xor    eax,eax
c00083ba:	5b                   	pop    ebx
c00083bb:	5e                   	pop    esi
c00083bc:	5f                   	pop    edi
c00083bd:	5d                   	pop    ebp
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <Pipe::Pipe(int)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083c7:	83 ec 08             	sub    esp,0x8
c00083ca:	6a 00                	push   0x0
c00083cc:	50                   	push   eax
c00083cd:	e8 f0 0c 00 00       	call   c00090c2 <UnixFile::UnixFile(int)>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	ba b8 da 01 c0       	mov    edx,0xc001dab8
c00083da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083de:	89 10                	mov    DWORD PTR [eax],edx
c00083e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00083e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ef:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00083f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083fa:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008405:	83 ec 0c             	sub    esp,0xc
c0008408:	50                   	push   eax
c0008409:	e8 bb f5 ff ff       	call   c00079c9 <malloc>
c000840e:	83 c4 10             	add    esp,0x10
c0008411:	89 c2                	mov    edx,eax
c0008413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008417:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000841a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000841e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008422:	90                   	nop
c0008423:	83 c4 0c             	add    esp,0xc
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <VgaText::isAtty()>:
c0008428:	b0 01                	mov    al,0x1
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <VgaText::~VgaText()>:
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	ba 40 db 01 c0       	mov    edx,0xc001db40
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	50                   	push   eax
c0008442:	e8 5d 0e 00 00       	call   c00092a4 <UnixFile::~UnixFile()>
c0008447:	83 c4 10             	add    esp,0x10
c000844a:	90                   	nop
c000844b:	83 c4 0c             	add    esp,0xc
c000844e:	c3                   	ret    
c000844f:	90                   	nop

c0008450 <VgaText::~VgaText()>:
c0008450:	83 ec 0c             	sub    esp,0xc
c0008453:	83 ec 0c             	sub    esp,0xc
c0008456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000845a:	e8 cd ff ff ff       	call   c000842c <VgaText::~VgaText()>
c000845f:	83 c4 10             	add    esp,0x10
c0008462:	83 ec 08             	sub    esp,0x8
c0008465:	68 34 01 00 00       	push   0x134
c000846a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000846e:	e8 ef 21 00 00       	call   c000a662 <operator delete(void*, unsigned long)>
c0008473:	83 c4 10             	add    esp,0x10
c0008476:	83 c4 0c             	add    esp,0xc
c0008479:	c3                   	ret    

c000847a <VgaText::read(unsigned long long, void*, int*)>:
c000847a:	83 ec 10             	sub    esp,0x10
c000847d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008481:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008489:	e8 24 45 00 00       	call   c000c9b2 <readKeyboard(VgaText*, char*, unsigned long)>
c000848e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008492:	89 02                	mov    DWORD PTR [edx],eax
c0008494:	31 c0                	xor    eax,eax
c0008496:	83 c4 1c             	add    esp,0x1c
c0008499:	c3                   	ret    

c000849a <setTerminalScrollLock(bool)>:
c000849a:	c3                   	ret    

c000849b <doTerminalCycle()>:
c000849b:	c3                   	ret    

c000849c <addToTerminalCycle(VgaText*)>:
c000849c:	c3                   	ret    

c000849d <scrollTerminalScrollLock(int)>:
c000849d:	c3                   	ret    

c000849e <VgaText::updateTitle()>:
c000849e:	c3                   	ret    
c000849f:	90                   	nop

c00084a0 <VgaText::load()>:
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::updateCursor()>:
c00084a2:	83 ec 14             	sub    esp,0x14
c00084a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084a9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084ac:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084af:	e8 bc db 00 00       	call   c0016070 <HalConsoleCursorUpdate(int, int)>
c00084b4:	83 c4 1c             	add    esp,0x1c
c00084b7:	c3                   	ret    

c00084b8 <VgaText::doANSI_SGR(int)>:
c00084b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084c0:	85 d2                	test   edx,edx
c00084c2:	75 0b                	jne    c00084cf <VgaText::doANSI_SGR(int)+0x17>
c00084c4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00084c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084ca:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00084cd:	eb 59                	jmp    c0008528 <VgaText::doANSI_SGR(int)+0x70>
c00084cf:	83 fa 07             	cmp    edx,0x7
c00084d2:	75 0b                	jne    c00084df <VgaText::doANSI_SGR(int)+0x27>
c00084d4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00084d7:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00084da:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00084dd:	eb 49                	jmp    c0008528 <VgaText::doANSI_SGR(int)+0x70>
c00084df:	83 fa 1b             	cmp    edx,0x1b
c00084e2:	74 e0                	je     c00084c4 <VgaText::doANSI_SGR(int)+0xc>
c00084e4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00084e7:	83 f9 07             	cmp    ecx,0x7
c00084ea:	77 09                	ja     c00084f5 <VgaText::doANSI_SGR(int)+0x3d>
c00084ec:	8b 14 8d 60 fa 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe05a0]
c00084f3:	eb 20                	jmp    c0008515 <VgaText::doANSI_SGR(int)+0x5d>
c00084f5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00084f8:	83 f9 07             	cmp    ecx,0x7
c00084fb:	77 09                	ja     c0008506 <VgaText::doANSI_SGR(int)+0x4e>
c00084fd:	8b 14 8d 60 fa 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe05a0]
c0008504:	eb 22                	jmp    c0008528 <VgaText::doANSI_SGR(int)+0x70>
c0008506:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008509:	83 f9 07             	cmp    ecx,0x7
c000850c:	77 0b                	ja     c0008519 <VgaText::doANSI_SGR(int)+0x61>
c000850e:	8b 14 95 18 f9 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe06e8]
c0008515:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008518:	c3                   	ret    
c0008519:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000851c:	83 f9 07             	cmp    ecx,0x7
c000851f:	77 0a                	ja     c000852b <VgaText::doANSI_SGR(int)+0x73>
c0008521:	8b 14 95 f0 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0710]
c0008528:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000852b:	c3                   	ret    

c000852c <VgaText::setDefaultBgColour(VgaColour)>:
c000852c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008534:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008537:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000853a:	c3                   	ret    
c000853b:	90                   	nop

c000853c <VgaText::setDefaultFgColour(VgaColour)>:
c000853c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008544:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008547:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000854a:	c3                   	ret    
c000854b:	90                   	nop

c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000854c:	53                   	push   ebx
c000854d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008551:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008559:	51                   	push   ecx
c000855a:	e8 cd ff ff ff       	call   c000852c <VgaText::setDefaultBgColour(VgaColour)>
c000855f:	58                   	pop    eax
c0008560:	5a                   	pop    edx
c0008561:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008565:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008569:	5b                   	pop    ebx
c000856a:	eb d0                	jmp    c000853c <VgaText::setDefaultFgColour(VgaColour)>

c000856c <VgaText::setTitleTextColour(VgaColour)>:
c000856c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008570:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008574:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008577:	c3                   	ret    

c0008578 <VgaText::setTitleColour(VgaColour)>:
c0008578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000857c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008580:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008583:	c3                   	ret    

c0008584 <VgaText::setTitle(char*)>:
c0008584:	c3                   	ret    
c0008585:	90                   	nop

c0008586 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008586:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000858a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000858f:	83 e0 0f             	and    eax,0xf
c0008592:	c1 e2 04             	shl    edx,0x4
c0008595:	09 d0                	or     eax,edx
c0008597:	c3                   	ret    

c0008598 <VgaText::scrollScreen()>:
c0008598:	55                   	push   ebp
c0008599:	b9 01 00 00 00       	mov    ecx,0x1
c000859e:	57                   	push   edi
c000859f:	56                   	push   esi
c00085a0:	53                   	push   ebx
c00085a1:	83 ec 0c             	sub    esp,0xc
c00085a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085a8:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00085ae:	31 ff                	xor    edi,edi
c00085b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085b3:	83 f9 18             	cmp    ecx,0x18
c00085b6:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00085b9:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00085c0:	75 27                	jne    c00085e9 <VgaText::scrollScreen()+0x51>
c00085c2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085c5:	01 f5                	add    ebp,esi
c00085c7:	f7 c7 01 00 00 00    	test   edi,0x1
c00085cd:	74 16                	je     c00085e5 <VgaText::scrollScreen()+0x4d>
c00085cf:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085d3:	50                   	push   eax
c00085d4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085d8:	50                   	push   eax
c00085d9:	e8 a8 ff ff ff       	call   c0008586 <VgaText::combineColours(unsigned char, unsigned char)>
c00085de:	5a                   	pop    edx
c00085df:	5a                   	pop    edx
c00085e0:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00085e3:	eb 04                	jmp    c00085e9 <VgaText::scrollScreen()+0x51>
c00085e5:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00085e9:	47                   	inc    edi
c00085ea:	46                   	inc    esi
c00085eb:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00085f1:	75 bd                	jne    c00085b0 <VgaText::scrollScreen()+0x18>
c00085f3:	41                   	inc    ecx
c00085f4:	83 f9 19             	cmp    ecx,0x19
c00085f7:	75 af                	jne    c00085a8 <VgaText::scrollScreen()+0x10>
c00085f9:	39 1d 94 0b 02 c0    	cmp    DWORD PTR ds:0xc0020b94,ebx
c00085ff:	75 1f                	jne    c0008620 <VgaText::scrollScreen()+0x88>
c0008601:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008605:	74 05                	je     c000860c <VgaText::scrollScreen()+0x74>
c0008607:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000860a:	eb 14                	jmp    c0008620 <VgaText::scrollScreen()+0x88>
c000860c:	50                   	push   eax
c000860d:	50                   	push   eax
c000860e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008612:	50                   	push   eax
c0008613:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008617:	50                   	push   eax
c0008618:	e8 df d8 00 00       	call   c0015efc <HalConsoleScroll(int, int)>
c000861d:	83 c4 10             	add    esp,0x10
c0008620:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008624:	83 c4 0c             	add    esp,0xc
c0008627:	5b                   	pop    ebx
c0008628:	5e                   	pop    esi
c0008629:	5f                   	pop    edi
c000862a:	5d                   	pop    ebp
c000862b:	e9 72 fe ff ff       	jmp    c00084a2 <VgaText::updateCursor()>

c0008630 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008630:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008635:	c1 e0 08             	shl    eax,0x8
c0008638:	89 c2                	mov    edx,eax
c000863a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000863f:	09 d0                	or     eax,edx
c0008641:	c3                   	ret    

c0008642 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008642:	55                   	push   ebp
c0008643:	57                   	push   edi
c0008644:	56                   	push   esi
c0008645:	53                   	push   ebx
c0008646:	83 ec 1c             	sub    esp,0x1c
c0008649:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000864d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008651:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008655:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008659:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000865d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008661:	0f b6 c3             	movzx  eax,bl
c0008664:	50                   	push   eax
c0008665:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000866a:	50                   	push   eax
c000866b:	e8 16 ff ff ff       	call   c0008586 <VgaText::combineColours(unsigned char, unsigned char)>
c0008670:	5a                   	pop    edx
c0008671:	0f b6 c0             	movzx  eax,al
c0008674:	59                   	pop    ecx
c0008675:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000867a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000867e:	50                   	push   eax
c000867f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008683:	e8 a8 ff ff ff       	call   c0008630 <VgaText::combineCharAndColour(char, unsigned char)>
c0008688:	5a                   	pop    edx
c0008689:	66 6b d7 50          	imul   dx,di,0x50
c000868d:	59                   	pop    ecx
c000868e:	01 f2                	add    edx,esi
c0008690:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008693:	0f b7 d2             	movzx  edx,dx
c0008696:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000869a:	39 2d 94 0b 02 c0    	cmp    DWORD PTR ds:0xc0020b94,ebp
c00086a0:	75 28                	jne    c00086ca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00086a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086a6:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086aa:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086ae:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00086be:	83 c4 1c             	add    esp,0x1c
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	5f                   	pop    edi
c00086c4:	5d                   	pop    ebp
c00086c5:	e9 3a d9 00 00       	jmp    c0016004 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00086ca:	83 c4 1c             	add    esp,0x1c
c00086cd:	5b                   	pop    ebx
c00086ce:	5e                   	pop    esi
c00086cf:	5f                   	pop    edi
c00086d0:	5d                   	pop    ebp
c00086d1:	c3                   	ret    

c00086d2 <VgaText::getCursorX()>:
c00086d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00086d9:	c3                   	ret    

c00086da <VgaText::getCursorY()>:
c00086da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00086e1:	c3                   	ret    

c00086e2 <VgaText::setCursor(int, int)>:
c00086e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086ea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00086ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00086f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00086f4:	e9 a9 fd ff ff       	jmp    c00084a2 <VgaText::updateCursor()>

c00086f9 <setActiveTerminal(VgaText*)>:
c00086f9:	53                   	push   ebx
c00086fa:	83 ec 08             	sub    esp,0x8
c00086fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008701:	85 db                	test   ebx,ebx
c0008703:	75 11                	jne    c0008716 <setActiveTerminal(VgaText*)+0x1d>
c0008705:	c7 44 24 10 cc da 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dacc
c000870d:	83 c4 08             	add    esp,0x8
c0008710:	5b                   	pop    ebx
c0008711:	e9 91 7b 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c0008716:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c000871b:	85 c0                	test   eax,eax
c000871d:	74 0c                	je     c000872b <setActiveTerminal(VgaText*)+0x32>
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 7a fd ff ff       	call   c00084a2 <VgaText::updateCursor()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	89 1d 94 0b 02 c0    	mov    DWORD PTR ds:0xc0020b94,ebx
c0008731:	50                   	push   eax
c0008732:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008735:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008738:	53                   	push   ebx
c0008739:	e8 a4 ff ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c000873e:	83 c4 18             	add    esp,0x18
c0008741:	5b                   	pop    ebx
c0008742:	c3                   	ret    
c0008743:	90                   	nop

c0008744 <VgaText::clearScreen()>:
c0008744:	57                   	push   edi
c0008745:	56                   	push   esi
c0008746:	31 f6                	xor    esi,esi
c0008748:	53                   	push   ebx
c0008749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874d:	52                   	push   edx
c000874e:	6a 00                	push   0x0
c0008750:	6a 00                	push   0x0
c0008752:	53                   	push   ebx
c0008753:	e8 8a ff ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c0008758:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000875f:	83 c4 10             	add    esp,0x10
c0008762:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008765:	7e 20                	jle    c0008787 <VgaText::clearScreen()+0x43>
c0008767:	31 ff                	xor    edi,edi
c0008769:	50                   	push   eax
c000876a:	50                   	push   eax
c000876b:	56                   	push   esi
c000876c:	57                   	push   edi
c000876d:	47                   	inc    edi
c000876e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008771:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008774:	6a 20                	push   0x20
c0008776:	53                   	push   ebx
c0008777:	e8 c6 fe ff ff       	call   c0008642 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000877c:	83 c4 20             	add    esp,0x20
c000877f:	83 ff 50             	cmp    edi,0x50
c0008782:	75 e5                	jne    c0008769 <VgaText::clearScreen()+0x25>
c0008784:	46                   	inc    esi
c0008785:	eb db                	jmp    c0008762 <VgaText::clearScreen()+0x1e>
c0008787:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000878e:	5b                   	pop    ebx
c000878f:	5e                   	pop    esi
c0008790:	5f                   	pop    edi
c0008791:	c3                   	ret    

c0008792 <VgaText::setCursorX(int)>:
c0008792:	83 ec 10             	sub    esp,0x10
c0008795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008799:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000879c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087a0:	50                   	push   eax
c00087a1:	e8 3c ff ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c00087a6:	83 c4 1c             	add    esp,0x1c
c00087a9:	c3                   	ret    

c00087aa <VgaText::setCursorY(int)>:
c00087aa:	83 ec 10             	sub    esp,0x10
c00087ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087b5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00087b8:	50                   	push   eax
c00087b9:	e8 24 ff ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c00087be:	83 c4 1c             	add    esp,0x1c
c00087c1:	c3                   	ret    

c00087c2 <VgaText::incrementCursor(bool)>:
c00087c2:	56                   	push   esi
c00087c3:	53                   	push   ebx
c00087c4:	51                   	push   ecx
c00087c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00087cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00087d0:	40                   	inc    eax
c00087d1:	83 f8 50             	cmp    eax,0x50
c00087d4:	74 05                	je     c00087db <VgaText::incrementCursor(bool)+0x19>
c00087d6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00087d9:	eb 24                	jmp    c00087ff <VgaText::incrementCursor(bool)+0x3d>
c00087db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00087de:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087e5:	8d 50 01             	lea    edx,[eax+0x1]
c00087e8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00087eb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00087ee:	75 0f                	jne    c00087ff <VgaText::incrementCursor(bool)+0x3d>
c00087f0:	83 ec 0c             	sub    esp,0xc
c00087f3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00087f6:	53                   	push   ebx
c00087f7:	e8 9c fd ff ff       	call   c0008598 <VgaText::scrollScreen()>
c00087fc:	83 c4 10             	add    esp,0x10
c00087ff:	89 f0                	mov    eax,esi
c0008801:	84 c0                	test   al,al
c0008803:	74 0c                	je     c0008811 <VgaText::incrementCursor(bool)+0x4f>
c0008805:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008809:	5a                   	pop    edx
c000880a:	5b                   	pop    ebx
c000880b:	5e                   	pop    esi
c000880c:	e9 91 fc ff ff       	jmp    c00084a2 <VgaText::updateCursor()>
c0008811:	58                   	pop    eax
c0008812:	5b                   	pop    ebx
c0008813:	5e                   	pop    esi
c0008814:	c3                   	ret    
c0008815:	90                   	nop

c0008816 <VgaText::decrementCursor(bool)>:
c0008816:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000881a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000881e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008821:	85 c0                	test   eax,eax
c0008823:	74 04                	je     c0008829 <VgaText::decrementCursor(bool)+0x13>
c0008825:	48                   	dec    eax
c0008826:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008829:	84 c9                	test   cl,cl
c000882b:	74 09                	je     c0008836 <VgaText::decrementCursor(bool)+0x20>
c000882d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008831:	e9 6c fc ff ff       	jmp    c00084a2 <VgaText::updateCursor()>
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008838:	53                   	push   ebx
c0008839:	83 ec 08             	sub    esp,0x8
c000883c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008840:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008844:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008848:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000884c:	3c 07                	cmp    al,0x7
c000884e:	75 21                	jne    c0008871 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008850:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008858:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008860:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008868:	83 c4 08             	add    esp,0x8
c000886b:	5b                   	pop    ebx
c000886c:	e9 3e 2d 00 00       	jmp    c000b5af <Krnl::beep(int, int, bool)>
c0008871:	3c 0d                	cmp    al,0xd
c0008873:	75 09                	jne    c000887e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008875:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000887c:	eb 2c                	jmp    c00088aa <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000887e:	3c 0a                	cmp    al,0xa
c0008880:	75 31                	jne    c00088b3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008882:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008885:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000888c:	8d 50 01             	lea    edx,[eax+0x1]
c000888f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008892:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008895:	75 0f                	jne    c00088a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008897:	83 ec 0c             	sub    esp,0xc
c000889a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000889d:	53                   	push   ebx
c000889e:	e8 f5 fc ff ff       	call   c0008598 <VgaText::scrollScreen()>
c00088a3:	83 c4 10             	add    esp,0x10
c00088a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088aa:	83 c4 08             	add    esp,0x8
c00088ad:	5b                   	pop    ebx
c00088ae:	e9 ef fb ff ff       	jmp    c00084a2 <VgaText::updateCursor()>
c00088b3:	3c 08                	cmp    al,0x8
c00088b5:	75 25                	jne    c00088dc <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00088b7:	50                   	push   eax
c00088b8:	50                   	push   eax
c00088b9:	6a 01                	push   0x1
c00088bb:	53                   	push   ebx
c00088bc:	e8 55 ff ff ff       	call   c0008816 <VgaText::decrementCursor(bool)>
c00088c1:	5a                   	pop    edx
c00088c2:	59                   	pop    ecx
c00088c3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088c6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088c9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088cf:	6a 20                	push   0x20
c00088d1:	53                   	push   ebx
c00088d2:	e8 6b fd ff ff       	call   c0008642 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088d7:	83 c4 28             	add    esp,0x28
c00088da:	5b                   	pop    ebx
c00088db:	c3                   	ret    
c00088dc:	83 ec 08             	sub    esp,0x8
c00088df:	0f be c0             	movsx  eax,al
c00088e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088e8:	51                   	push   ecx
c00088e9:	52                   	push   edx
c00088ea:	50                   	push   eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 51 fd ff ff       	call   c0008642 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088f1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00088f5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00088fd:	83 c4 28             	add    esp,0x28
c0008900:	5b                   	pop    ebx
c0008901:	e9 bc fe ff ff       	jmp    c00087c2 <VgaText::incrementCursor(bool)>

c0008906 <VgaText::putchar(char)>:
c0008906:	56                   	push   esi
c0008907:	53                   	push   ebx
c0008908:	83 ec 14             	sub    esp,0x14
c000890b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000890f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008913:	3c 5b                	cmp    al,0x5b
c0008915:	75 18                	jne    c000892f <VgaText::putchar(char)+0x29>
c0008917:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000891b:	74 1f                	je     c000893c <VgaText::putchar(char)+0x36>
c000891d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008923:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000892a:	e9 bd 00 00 00       	jmp    c00089ec <VgaText::putchar(char)+0xe6>
c000892f:	3c 1b                	cmp    al,0x1b
c0008931:	75 09                	jne    c000893c <VgaText::putchar(char)+0x36>
c0008933:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008937:	e9 b0 00 00 00       	jmp    c00089ec <VgaText::putchar(char)+0xe6>
c000893c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000893f:	84 c9                	test   cl,cl
c0008941:	0f 84 92 00 00 00    	je     c00089d9 <VgaText::putchar(char)+0xd3>
c0008947:	8d 50 c0             	lea    edx,[eax-0x40]
c000894a:	80 fa 3e             	cmp    dl,0x3e
c000894d:	77 76                	ja     c00089c5 <VgaText::putchar(char)+0xbf>
c000894f:	3c 6d                	cmp    al,0x6d
c0008951:	75 47                	jne    c000899a <VgaText::putchar(char)+0x94>
c0008953:	31 f6                	xor    esi,esi
c0008955:	31 d2                	xor    edx,edx
c0008957:	31 c0                	xor    eax,eax
c0008959:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000895c:	7e 2d                	jle    c000898b <VgaText::putchar(char)+0x85>
c000895e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008963:	80 fa 3b             	cmp    dl,0x3b
c0008966:	75 17                	jne    c000897f <VgaText::putchar(char)+0x79>
c0008968:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000896c:	50                   	push   eax
c000896d:	53                   	push   ebx
c000896e:	e8 45 fb ff ff       	call   c00084b8 <VgaText::doANSI_SGR(int)>
c0008973:	59                   	pop    ecx
c0008974:	31 d2                	xor    edx,edx
c0008976:	58                   	pop    eax
c0008977:	31 c0                	xor    eax,eax
c0008979:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000897d:	eb 09                	jmp    c0008988 <VgaText::putchar(char)+0x82>
c000897f:	6b c0 0a             	imul   eax,eax,0xa
c0008982:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008986:	88 ca                	mov    dl,cl
c0008988:	46                   	inc    esi
c0008989:	eb ce                	jmp    c0008959 <VgaText::putchar(char)+0x53>
c000898b:	84 d2                	test   dl,dl
c000898d:	74 2e                	je     c00089bd <VgaText::putchar(char)+0xb7>
c000898f:	50                   	push   eax
c0008990:	53                   	push   ebx
c0008991:	e8 22 fb ff ff       	call   c00084b8 <VgaText::doANSI_SGR(int)>
c0008996:	58                   	pop    eax
c0008997:	5a                   	pop    edx
c0008998:	eb 23                	jmp    c00089bd <VgaText::putchar(char)+0xb7>
c000899a:	3c 4a                	cmp    al,0x4a
c000899c:	75 1f                	jne    c00089bd <VgaText::putchar(char)+0xb7>
c000899e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089a2:	75 19                	jne    c00089bd <VgaText::putchar(char)+0xb7>
c00089a4:	83 ec 0c             	sub    esp,0xc
c00089a7:	53                   	push   ebx
c00089a8:	e8 97 fd ff ff       	call   c0008744 <VgaText::clearScreen()>
c00089ad:	83 c4 0c             	add    esp,0xc
c00089b0:	6a 00                	push   0x0
c00089b2:	6a 00                	push   0x0
c00089b4:	53                   	push   ebx
c00089b5:	e8 28 fd ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c00089ba:	83 c4 10             	add    esp,0x10
c00089bd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00089c3:	eb 27                	jmp    c00089ec <VgaText::putchar(char)+0xe6>
c00089c5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00089c8:	83 fa 0e             	cmp    edx,0xe
c00089cb:	7f 1f                	jg     c00089ec <VgaText::putchar(char)+0xe6>
c00089cd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00089d0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00089d3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00089d7:	eb 13                	jmp    c00089ec <VgaText::putchar(char)+0xe6>
c00089d9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089dc:	0f be c0             	movsx  eax,al
c00089df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089e2:	50                   	push   eax
c00089e3:	53                   	push   ebx
c00089e4:	e8 4f fe ff ff       	call   c0008838 <VgaText::putchar(char, VgaColour, VgaColour)>
c00089e9:	83 c4 10             	add    esp,0x10
c00089ec:	83 c4 14             	add    esp,0x14
c00089ef:	5b                   	pop    ebx
c00089f0:	5e                   	pop    esi
c00089f1:	c3                   	ret    

c00089f2 <VgaText::putx(unsigned int)>:
c00089f2:	57                   	push   edi
c00089f3:	b9 11 00 00 00       	mov    ecx,0x11
c00089f8:	56                   	push   esi
c00089f9:	be da da 01 c0       	mov    esi,0xc001dada
c00089fe:	53                   	push   ebx
c00089ff:	83 ec 20             	sub    esp,0x20
c0008a02:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a06:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a0a:	fc                   	cld    
c0008a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a0d:	be 08 00 00 00       	mov    esi,0x8
c0008a12:	50                   	push   eax
c0008a13:	50                   	push   eax
c0008a14:	89 d8                	mov    eax,ebx
c0008a16:	c1 e3 04             	shl    ebx,0x4
c0008a19:	c1 e8 1c             	shr    eax,0x1c
c0008a1c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a21:	50                   	push   eax
c0008a22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a26:	e8 db fe ff ff       	call   c0008906 <VgaText::putchar(char)>
c0008a2b:	83 c4 10             	add    esp,0x10
c0008a2e:	4e                   	dec    esi
c0008a2f:	75 e1                	jne    c0008a12 <VgaText::putx(unsigned int)+0x20>
c0008a31:	83 c4 20             	add    esp,0x20
c0008a34:	5b                   	pop    ebx
c0008a35:	5e                   	pop    esi
c0008a36:	5f                   	pop    edi
c0008a37:	c3                   	ret    

c0008a38 <VgaText::puts(char const*)>:
c0008a38:	53                   	push   ebx
c0008a39:	83 ec 08             	sub    esp,0x8
c0008a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a40:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a43:	84 c0                	test   al,al
c0008a45:	74 12                	je     c0008a59 <VgaText::puts(char const*)+0x21>
c0008a47:	43                   	inc    ebx
c0008a48:	51                   	push   ecx
c0008a49:	51                   	push   ecx
c0008a4a:	50                   	push   eax
c0008a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a4f:	e8 b2 fe ff ff       	call   c0008906 <VgaText::putchar(char)>
c0008a54:	83 c4 10             	add    esp,0x10
c0008a57:	eb e7                	jmp    c0008a40 <VgaText::puts(char const*)+0x8>
c0008a59:	83 c4 08             	add    esp,0x8
c0008a5c:	5b                   	pop    ebx
c0008a5d:	c3                   	ret    

c0008a5e <VgaText::write(unsigned long long, void*, int*)>:
c0008a5e:	55                   	push   ebp
c0008a5f:	57                   	push   edi
c0008a60:	56                   	push   esi
c0008a61:	53                   	push   ebx
c0008a62:	83 ec 0c             	sub    esp,0xc
c0008a65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a69:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a6d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008a71:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008a78:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008a7b:	39 eb                	cmp    ebx,ebp
c0008a7d:	74 13                	je     c0008a92 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008a7f:	43                   	inc    ebx
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008a86:	50                   	push   eax
c0008a87:	56                   	push   esi
c0008a88:	e8 79 fe ff ff       	call   c0008906 <VgaText::putchar(char)>
c0008a8d:	83 c4 10             	add    esp,0x10
c0008a90:	eb e9                	jmp    c0008a7b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008a92:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008a99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a9d:	89 38                	mov    DWORD PTR [eax],edi
c0008a9f:	83 c4 0c             	add    esp,0xc
c0008aa2:	31 c0                	xor    eax,eax
c0008aa4:	5b                   	pop    ebx
c0008aa5:	5e                   	pop    esi
c0008aa6:	5f                   	pop    edi
c0008aa7:	5d                   	pop    ebp
c0008aa8:	c3                   	ret    
c0008aa9:	90                   	nop

c0008aaa <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008aaa:	55                   	push   ebp
c0008aab:	57                   	push   edi
c0008aac:	56                   	push   esi
c0008aad:	53                   	push   ebx
c0008aae:	83 ec 0c             	sub    esp,0xc
c0008ab1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008ab5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008aba:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008ac1:	50                   	push   eax
c0008ac2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008ac7:	50                   	push   eax
c0008ac8:	e8 b9 fa ff ff       	call   c0008586 <VgaText::combineColours(unsigned char, unsigned char)>
c0008acd:	5a                   	pop    edx
c0008ace:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008ad3:	59                   	pop    ecx
c0008ad4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008ad7:	89 c5                	mov    ebp,eax
c0008ad9:	0f b7 f6             	movzx  esi,si
c0008adc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae0:	01 f6                	add    esi,esi
c0008ae2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ae5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008ae8:	84 c0                	test   al,al
c0008aea:	0f 84 f4 00 00 00    	je     c0008be4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008af0:	3c 0d                	cmp    al,0xd
c0008af2:	75 0c                	jne    c0008b00 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008af4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008afb:	e9 de 00 00 00       	jmp    c0008bde <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008b00:	3c 0a                	cmp    al,0xa
c0008b02:	75 45                	jne    c0008b49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008b04:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b07:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b11:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b14:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b17:	75 0f                	jne    c0008b28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008b19:	83 ec 0c             	sub    esp,0xc
c0008b1c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b1f:	53                   	push   ebx
c0008b20:	e8 73 fa ff ff       	call   c0008598 <VgaText::scrollScreen()>
c0008b25:	83 c4 10             	add    esp,0x10
c0008b28:	83 ec 0c             	sub    esp,0xc
c0008b2b:	53                   	push   ebx
c0008b2c:	e8 71 f9 ff ff       	call   c00084a2 <VgaText::updateCursor()>
c0008b31:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008b36:	83 c4 10             	add    esp,0x10
c0008b39:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b3c:	0f b7 f6             	movzx  esi,si
c0008b3f:	01 f6                	add    esi,esi
c0008b41:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b44:	e9 95 00 00 00       	jmp    c0008bde <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008b49:	3c 08                	cmp    al,0x8
c0008b4b:	75 35                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008b4d:	51                   	push   ecx
c0008b4e:	51                   	push   ecx
c0008b4f:	6a 01                	push   0x1
c0008b51:	53                   	push   ebx
c0008b52:	e8 bf fc ff ff       	call   c0008816 <VgaText::decrementCursor(bool)>
c0008b57:	5e                   	pop    esi
c0008b58:	58                   	pop    eax
c0008b59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b5c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b5f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b62:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b65:	6a 20                	push   0x20
c0008b67:	53                   	push   ebx
c0008b68:	e8 d5 fa ff ff       	call   c0008642 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b6d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008b72:	83 c4 20             	add    esp,0x20
c0008b75:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b78:	0f b7 f6             	movzx  esi,si
c0008b7b:	01 f6                	add    esi,esi
c0008b7d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b80:	eb 5c                	jmp    c0008bde <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008b82:	52                   	push   edx
c0008b83:	52                   	push   edx
c0008b84:	89 ea                	mov    edx,ebp
c0008b86:	0f b6 ca             	movzx  ecx,dl
c0008b89:	51                   	push   ecx
c0008b8a:	50                   	push   eax
c0008b8b:	e8 a0 fa ff ff       	call   c0008630 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b90:	83 c4 10             	add    esp,0x10
c0008b93:	66 89 06             	mov    WORD PTR [esi],ax
c0008b96:	39 1d 94 0b 02 c0    	cmp    DWORD PTR ds:0xc0020b94,ebx
c0008b9c:	75 1d                	jne    c0008bbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ba4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ba7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bab:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008baf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008bb2:	50                   	push   eax
c0008bb3:	e8 4c d4 00 00       	call   c0016004 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008bb8:	83 c4 20             	add    esp,0x20
c0008bbb:	83 c6 02             	add    esi,0x2
c0008bbe:	50                   	push   eax
c0008bbf:	50                   	push   eax
c0008bc0:	6a 00                	push   0x0
c0008bc2:	53                   	push   ebx
c0008bc3:	e8 fa fb ff ff       	call   c00087c2 <VgaText::incrementCursor(bool)>
c0008bc8:	83 c4 10             	add    esp,0x10
c0008bcb:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008bcf:	75 0d                	jne    c0008bde <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008bd1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008bd6:	0f b7 f6             	movzx  esi,si
c0008bd9:	01 f6                	add    esi,esi
c0008bdb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bde:	47                   	inc    edi
c0008bdf:	e9 01 ff ff ff       	jmp    c0008ae5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008be4:	83 ec 0c             	sub    esp,0xc
c0008be7:	53                   	push   ebx
c0008be8:	e8 b5 f8 ff ff       	call   c00084a2 <VgaText::updateCursor()>
c0008bed:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008bf4:	83 c4 1c             	add    esp,0x1c
c0008bf7:	5b                   	pop    ebx
c0008bf8:	5e                   	pop    esi
c0008bf9:	5f                   	pop    edi
c0008bfa:	5d                   	pop    ebp
c0008bfb:	c3                   	ret    

c0008bfc <VgaText::VgaText(char const*)>:
c0008bfc:	56                   	push   esi
c0008bfd:	53                   	push   ebx
c0008bfe:	83 ec 04             	sub    esp,0x4
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	83 ec 08             	sub    esp,0x8
c0008c08:	6a 00                	push   0x0
c0008c0a:	50                   	push   eax
c0008c0b:	e8 b2 04 00 00       	call   c00090c2 <UnixFile::UnixFile(int)>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	ba 40 db 01 c0       	mov    edx,0xc001db40
c0008c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1c:	89 10                	mov    DWORD PTR [eax],edx
c0008c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c22:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c38:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c40:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c48:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c53:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c69:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008c7b:	83 ec 0c             	sub    esp,0xc
c0008c7e:	6a 01                	push   0x1
c0008c80:	e8 80 08 00 00       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0008c85:	83 c4 10             	add    esp,0x10
c0008c88:	89 c2                	mov    edx,eax
c0008c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008c91:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c9e:	89 c6                	mov    esi,eax
c0008ca0:	e8 f1 f0 ff ff       	call   c0007d96 <Phys::allocatePage()>
c0008ca5:	68 05 0c 00 00       	push   0xc05
c0008caa:	56                   	push   esi
c0008cab:	50                   	push   eax
c0008cac:	53                   	push   ebx
c0008cad:	e8 e8 0e 00 00       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0008cb2:	83 c4 10             	add    esp,0x10
c0008cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cbc:	83 ec 04             	sub    esp,0x4
c0008cbf:	68 a0 0f 00 00       	push   0xfa0
c0008cc4:	6a 00                	push   0x0
c0008cc6:	50                   	push   eax
c0008cc7:	e8 24 78 ff ff       	call   c00004f0 <memset>
c0008ccc:	83 c4 10             	add    esp,0x10
c0008ccf:	83 ec 04             	sub    esp,0x4
c0008cd2:	6a 00                	push   0x0
c0008cd4:	6a 07                	push   0x7
c0008cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cda:	e8 6d f8 ff ff       	call   c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008cdf:	83 c4 10             	add    esp,0x10
c0008ce2:	83 ec 04             	sub    esp,0x4
c0008ce5:	6a 00                	push   0x0
c0008ce7:	6a 00                	push   0x0
c0008ce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ced:	e8 f0 f9 ff ff       	call   c00086e2 <VgaText::setCursor(int, int)>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	83 ec 0c             	sub    esp,0xc
c0008cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cfc:	e8 43 fa ff ff       	call   c0008744 <VgaText::clearScreen()>
c0008d01:	83 c4 10             	add    esp,0x10
c0008d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d08:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d10:	05 82 00 00 00       	add    eax,0x82
c0008d15:	83 ec 04             	sub    esp,0x4
c0008d18:	6a 30                	push   0x30
c0008d1a:	6a 00                	push   0x0
c0008d1c:	50                   	push   eax
c0008d1d:	e8 ce 77 ff ff       	call   c00004f0 <memset>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	05 b2 00 00 00       	add    eax,0xb2
c0008d2e:	83 ec 04             	sub    esp,0x4
c0008d31:	68 80 00 00 00       	push   0x80
c0008d36:	6a 00                	push   0x0
c0008d38:	50                   	push   eax
c0008d39:	e8 b2 77 ff ff       	call   c00004f0 <memset>
c0008d3e:	83 c4 10             	add    esp,0x10
c0008d41:	90                   	nop
c0008d42:	83 c4 04             	add    esp,0x4
c0008d45:	5b                   	pop    ebx
c0008d46:	5e                   	pop    esi
c0008d47:	c3                   	ret    

c0008d48 <VgaText::receiveKey(unsigned char)>:
c0008d48:	57                   	push   edi
c0008d49:	56                   	push   esi
c0008d4a:	53                   	push   ebx
c0008d4b:	83 ec 10             	sub    esp,0x10
c0008d4e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008d52:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008d56:	84 db                	test   bl,bl
c0008d58:	0f 84 ba 00 00 00    	je     c0008e18 <VgaText::receiveKey(unsigned char)+0xd0>
c0008d5e:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008d64:	80 fb 08             	cmp    bl,0x8
c0008d67:	75 2c                	jne    c0008d95 <VgaText::receiveKey(unsigned char)+0x4d>
c0008d69:	83 ec 0c             	sub    esp,0xc
c0008d6c:	57                   	push   edi
c0008d6d:	e8 ee 77 ff ff       	call   c0000560 <strlen>
c0008d72:	83 c4 10             	add    esp,0x10
c0008d75:	85 c0                	test   eax,eax
c0008d77:	74 41                	je     c0008dba <VgaText::receiveKey(unsigned char)+0x72>
c0008d79:	50                   	push   eax
c0008d7a:	50                   	push   eax
c0008d7b:	6a 08                	push   0x8
c0008d7d:	56                   	push   esi
c0008d7e:	e8 83 fb ff ff       	call   c0008906 <VgaText::putchar(char)>
c0008d83:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008d86:	e8 d5 77 ff ff       	call   c0000560 <strlen>
c0008d8b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008d93:	eb 22                	jmp    c0008db7 <VgaText::receiveKey(unsigned char)+0x6f>
c0008d95:	0f be c3             	movsx  eax,bl
c0008d98:	52                   	push   edx
c0008d99:	52                   	push   edx
c0008d9a:	50                   	push   eax
c0008d9b:	56                   	push   esi
c0008d9c:	e8 65 fb ff ff       	call   c0008906 <VgaText::putchar(char)>
c0008da1:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008da5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008daa:	59                   	pop    ecx
c0008dab:	58                   	pop    eax
c0008dac:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008db0:	50                   	push   eax
c0008db1:	57                   	push   edi
c0008db2:	e8 29 7a ff ff       	call   c00007e0 <strcat>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008dc1:	75 05                	jne    c0008dc8 <VgaText::receiveKey(unsigned char)+0x80>
c0008dc3:	80 fb 0a             	cmp    bl,0xa
c0008dc6:	75 50                	jne    c0008e18 <VgaText::receiveKey(unsigned char)+0xd0>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008dd1:	56                   	push   esi
c0008dd2:	e8 89 77 ff ff       	call   c0000560 <strlen>
c0008dd7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008dda:	89 c3                	mov    ebx,eax
c0008ddc:	e8 7f 77 ff ff       	call   c0000560 <strlen>
c0008de1:	83 c4 10             	add    esp,0x10
c0008de4:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008de8:	3d 80 00 00 00       	cmp    eax,0x80
c0008ded:	76 10                	jbe    c0008dff <VgaText::receiveKey(unsigned char)+0xb7>
c0008def:	83 ec 0c             	sub    esp,0xc
c0008df2:	68 eb da 01 c0       	push   0xc001daeb
c0008df7:	e8 ab 74 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0008dfc:	83 c4 10             	add    esp,0x10
c0008dff:	50                   	push   eax
c0008e00:	50                   	push   eax
c0008e01:	57                   	push   edi
c0008e02:	56                   	push   esi
c0008e03:	e8 d8 79 ff ff       	call   c00007e0 <strcat>
c0008e08:	83 c4 0c             	add    esp,0xc
c0008e0b:	6a 30                	push   0x30
c0008e0d:	6a 00                	push   0x0
c0008e0f:	57                   	push   edi
c0008e10:	e8 db 76 ff ff       	call   c00004f0 <memset>
c0008e15:	83 c4 10             	add    esp,0x10
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	5b                   	pop    ebx
c0008e1c:	5e                   	pop    esi
c0008e1d:	5f                   	pop    edi
c0008e1e:	c3                   	ret    
c0008e1f:	90                   	nop

c0008e20 <VgaText::doUpdate()>:
c0008e20:	c3                   	ret    

c0008e21 <newTerminal(char*)>:
c0008e21:	83 ec 28             	sub    esp,0x28
c0008e24:	68 34 01 00 00       	push   0x134
c0008e29:	e8 9b eb ff ff       	call   c00079c9 <malloc>
c0008e2e:	5a                   	pop    edx
c0008e2f:	59                   	pop    ecx
c0008e30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008e34:	50                   	push   eax
c0008e35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e39:	e8 be fd ff ff       	call   c0008bfc <VgaText::VgaText(char const*)>
c0008e3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e42:	83 c4 2c             	add    esp,0x2c
c0008e45:	c3                   	ret    
c0008e46:	66 90                	xchg   ax,ax

c0008e48 <TSS::TSS()>:
c0008e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008e53:	90                   	nop
c0008e54:	c3                   	ret    
c0008e55:	90                   	nop
c0008e56:	66 90                	xchg   ax,ax

c0008e58 <TSS::setESP(unsigned long)>:
c0008e58:	55                   	push   ebp
c0008e59:	89 e5                	mov    ebp,esp
c0008e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008e64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e67:	90                   	nop
c0008e68:	5d                   	pop    ebp
c0008e69:	c3                   	ret    
c0008e6a:	66 90                	xchg   ax,ax

c0008e6c <TSS::flush()>:
c0008e6c:	55                   	push   ebp
c0008e6d:	89 e5                	mov    ebp,esp
c0008e6f:	83 ec 10             	sub    esp,0x10
c0008e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e77:	83 c8 03             	or     eax,0x3
c0008e7a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008e7e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008e82:	66 89 d0             	mov    ax,dx
c0008e85:	0f 00 d8             	ltr    ax
c0008e88:	90                   	nop
c0008e89:	c9                   	leave  
c0008e8a:	c3                   	ret    
c0008e8b:	90                   	nop

c0008e8c <TSS::setup(unsigned long, unsigned long)>:
c0008e8c:	55                   	push   ebp
c0008e8d:	89 e5                	mov    ebp,esp
c0008e8f:	83 ec 18             	sub    esp,0x18
c0008e92:	83 ec 0c             	sub    esp,0xc
c0008e95:	6a 68                	push   0x68
c0008e97:	e8 2d eb ff ff       	call   c00079c9 <malloc>
c0008e9c:	83 c4 10             	add    esp,0x10
c0008e9f:	89 c2                	mov    edx,eax
c0008ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ead:	83 ec 04             	sub    esp,0x4
c0008eb0:	6a 68                	push   0x68
c0008eb2:	6a 00                	push   0x0
c0008eb4:	50                   	push   eax
c0008eb5:	e8 36 76 ff ff       	call   c00004f0 <memset>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ec3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ecf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008edb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ede:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ee7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ef0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ef3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eff:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f0b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f17:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f23:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f2f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008f32:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f3b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f47:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f54:	0f 20 da             	mov    edx,cr3
c0008f57:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008f5a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008f5d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f66:	83 ec 08             	sub    esp,0x8
c0008f69:	50                   	push   eax
c0008f6a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008f6d:	50                   	push   eax
c0008f6e:	e8 e1 e2 ff ff       	call   c0007254 <GDTEntry::setBase(unsigned int)>
c0008f73:	83 c4 10             	add    esp,0x10
c0008f76:	83 ec 08             	sub    esp,0x8
c0008f79:	6a 68                	push   0x68
c0008f7b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008f7e:	50                   	push   eax
c0008f7f:	e8 ec e2 ff ff       	call   c0007270 <GDTEntry::setLimit(unsigned int)>
c0008f84:	83 c4 10             	add    esp,0x10
c0008f87:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008f8b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008f8e:	83 e0 0f             	and    eax,0xf
c0008f91:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008f94:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008f97:	83 c8 40             	or     eax,0x40
c0008f9a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008f9d:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0008fa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008fa8:	05 78 01 00 00       	add    eax,0x178
c0008fad:	83 ec 04             	sub    esp,0x4
c0008fb0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008fb3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008fb6:	50                   	push   eax
c0008fb7:	e8 e8 e2 ff ff       	call   c00072a4 <GDT::addEntry(GDTEntry)>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c2                	mov    edx,eax
c0008fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc4:	89 10                	mov    DWORD PTR [eax],edx
c0008fc6:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0008fcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008fd1:	05 78 01 00 00       	add    eax,0x178
c0008fd6:	83 ec 0c             	sub    esp,0xc
c0008fd9:	50                   	push   eax
c0008fda:	e8 ef e2 ff ff       	call   c00072ce <GDT::flush()>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fe7:	c9                   	leave  
c0008fe8:	c3                   	ret    
c0008fe9:	90                   	nop

c0008fea <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ffa:	75 08                	jne    c0009004 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008ffc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009002:	eb 38                	jmp    c000903c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009004:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009009:	75 17                	jne    c0009022 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000900b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009010:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009013:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009019:	8b 10                	mov    edx,DWORD PTR [eax]
c000901b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000901f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009022:	89 c1                	mov    ecx,eax
c0009024:	83 e1 fd             	and    ecx,0xfffffffd
c0009027:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000902d:	74 cd                	je     c0008ffc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000902f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009034:	83 e0 ef             	and    eax,0xffffffef
c0009037:	83 f8 08             	cmp    eax,0x8
c000903a:	76 c0                	jbe    c0008ffc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000903c:	31 c0                	xor    eax,eax
c000903e:	c3                   	ret    
c000903f:	90                   	nop

c0009040 <ReservedFilename::isAtty()>:
c0009040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	31 c0                	xor    eax,eax
c0009049:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000904f:	74 09                	je     c000905a <ReservedFilename::isAtty()+0x1a>
c0009051:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009057:	0f 94 c0             	sete   al
c000905a:	c3                   	ret    
c000905b:	90                   	nop

c000905c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000905c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009067:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000906b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009070:	75 08                	jne    c000907a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009072:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009078:	eb 3d                	jmp    c00090b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000907a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000907f:	75 17                	jne    c0009098 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009086:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009089:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000908f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009091:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009095:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009098:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000909d:	75 04                	jne    c00090a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000909f:	89 0a                	mov    DWORD PTR [edx],ecx
c00090a1:	eb 14                	jmp    c00090b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00090a3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00090a8:	74 c8                	je     c0009072 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00090aa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00090af:	83 e0 ef             	and    eax,0xffffffef
c00090b2:	83 f8 08             	cmp    eax,0x8
c00090b5:	76 bb                	jbe    c0009072 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00090b7:	31 c0                	xor    eax,eax
c00090b9:	c3                   	ret    

c00090ba <UnixFile::getFileDescriptor()>:
c00090ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090c1:	c3                   	ret    

c00090c2 <UnixFile::UnixFile(int)>:
c00090c2:	53                   	push   ebx
c00090c3:	83 ec 28             	sub    esp,0x28
c00090c6:	ba 08 dc 01 c0       	mov    edx,0xc001dc08
c00090cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090cf:	89 10                	mov    DWORD PTR [eax],edx
c00090d1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00090d9:	0f 8f 8c 01 00 00    	jg     c000926b <UnixFile::UnixFile(int)+0x1a9>
c00090df:	a1 a0 fa 01 c0       	mov    eax,ds:0xc001faa0
c00090e4:	8d 50 01             	lea    edx,[eax+0x1]
c00090e7:	89 15 a0 fa 01 c0    	mov    DWORD PTR ds:0xc001faa0,edx
c00090ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00090f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00090f4:	83 ec 08             	sub    esp,0x8
c00090f7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00090fb:	68 18 0c 02 c0       	push   0xc0020c18
c0009100:	e8 b3 35 01 00       	call   c001c6b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	a0 14 0c 02 c0       	mov    al,ds:0xc0020c14
c000910d:	83 f0 01             	xor    eax,0x1
c0009110:	84 c0                	test   al,al
c0009112:	0f 84 54 01 00 00    	je     c000926c <UnixFile::UnixFile(int)+0x1aa>
c0009118:	c6 05 14 0c 02 c0 01 	mov    BYTE PTR ds:0xc0020c14,0x1
c000911f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009127:	83 ec 0c             	sub    esp,0xc
c000912a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000912e:	e8 96 e8 ff ff       	call   c00079c9 <malloc>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	89 c3                	mov    ebx,eax
c0009138:	83 ec 08             	sub    esp,0x8
c000913b:	68 03 ff ff 0f       	push   0xfffff03
c0009140:	53                   	push   ebx
c0009141:	e8 2c 01 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 1d 0c 0c 02 c0    	mov    DWORD PTR ds:0xc0020c0c,ebx
c000914f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009157:	83 ec 0c             	sub    esp,0xc
c000915a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000915e:	e8 66 e8 ff ff       	call   c00079c9 <malloc>
c0009163:	83 c4 10             	add    esp,0x10
c0009166:	89 c3                	mov    ebx,eax
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	68 01 ff ff 0f       	push   0xfffff01
c0009170:	53                   	push   ebx
c0009171:	e8 fc 00 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	89 1d 10 0c 02 c0    	mov    DWORD PTR ds:0xc0020c10,ebx
c000917f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000918e:	e8 36 e8 ff ff       	call   c00079c9 <malloc>
c0009193:	83 c4 10             	add    esp,0x10
c0009196:	89 c3                	mov    ebx,eax
c0009198:	83 ec 08             	sub    esp,0x8
c000919b:	68 00 ff ff 0f       	push   0xfffff00
c00091a0:	53                   	push   ebx
c00091a1:	e8 cc 00 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 1d 04 0c 02 c0    	mov    DWORD PTR ds:0xc0020c04,ebx
c00091af:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00091b7:	83 ec 0c             	sub    esp,0xc
c00091ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091be:	e8 06 e8 ff ff       	call   c00079c9 <malloc>
c00091c3:	83 c4 10             	add    esp,0x10
c00091c6:	89 c3                	mov    ebx,eax
c00091c8:	83 ec 08             	sub    esp,0x8
c00091cb:	68 02 ff ff 0f       	push   0xfffff02
c00091d0:	53                   	push   ebx
c00091d1:	e8 9c 00 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c00091d6:	83 c4 10             	add    esp,0x10
c00091d9:	89 1d 08 0c 02 c0    	mov    DWORD PTR ds:0xc0020c08,ebx
c00091df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00091e7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00091ec:	7f 7e                	jg     c000926c <UnixFile::UnixFile(int)+0x1aa>
c00091ee:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00091f6:	83 ec 0c             	sub    esp,0xc
c00091f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091fd:	e8 c7 e7 ff ff       	call   c00079c9 <malloc>
c0009202:	83 c4 10             	add    esp,0x10
c0009205:	89 c3                	mov    ebx,eax
c0009207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000920b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009210:	83 ec 08             	sub    esp,0x8
c0009213:	50                   	push   eax
c0009214:	53                   	push   ebx
c0009215:	e8 58 00 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009221:	89 1c 85 e0 0b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf420],ebx
c0009228:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009230:	83 ec 0c             	sub    esp,0xc
c0009233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009237:	e8 8d e7 ff ff       	call   c00079c9 <malloc>
c000923c:	83 c4 10             	add    esp,0x10
c000923f:	89 c3                	mov    ebx,eax
c0009241:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009245:	05 20 ff ff 0f       	add    eax,0xfffff20
c000924a:	83 ec 08             	sub    esp,0x8
c000924d:	50                   	push   eax
c000924e:	53                   	push   ebx
c000924f:	e8 1e 00 00 00       	call   c0009272 <ReservedFilename::ReservedFilename(int)>
c0009254:	83 c4 10             	add    esp,0x10
c0009257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000925b:	89 1c 85 a0 0b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf460],ebx
c0009262:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009266:	e9 7c ff ff ff       	jmp    c00091e7 <UnixFile::UnixFile(int)+0x125>
c000926b:	90                   	nop
c000926c:	83 c4 28             	add    esp,0x28
c000926f:	5b                   	pop    ebx
c0009270:	c3                   	ret    
c0009271:	90                   	nop

c0009272 <ReservedFilename::ReservedFilename(int)>:
c0009272:	83 ec 0c             	sub    esp,0xc
c0009275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009279:	83 ec 08             	sub    esp,0x8
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	50                   	push   eax
c0009281:	e8 3c fe ff ff       	call   c00090c2 <UnixFile::UnixFile(int)>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	ba 24 dc 01 c0       	mov    edx,0xc001dc24
c000928e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009292:	89 10                	mov    DWORD PTR [eax],edx
c0009294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009298:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000929c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000929f:	90                   	nop
c00092a0:	83 c4 0c             	add    esp,0xc
c00092a3:	c3                   	ret    

c00092a4 <UnixFile::~UnixFile()>:
c00092a4:	83 ec 1c             	sub    esp,0x1c
c00092a7:	ba 08 dc 01 c0       	mov    edx,0xc001dc08
c00092ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b0:	89 10                	mov    DWORD PTR [eax],edx
c00092b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00092be:	7f 73                	jg     c0009333 <UnixFile::~UnixFile()+0x8f>
c00092c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00092c8:	83 ec 0c             	sub    esp,0xc
c00092cb:	68 18 0c 02 c0       	push   0xc0020c18
c00092d0:	e8 b7 34 01 00       	call   c001c78c <LinkedList<UnixFile>::getFirstElement()>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dc:	83 ec 0c             	sub    esp,0xc
c00092df:	68 18 0c 02 c0       	push   0xc0020c18
c00092e4:	e8 ab 34 01 00       	call   c001c794 <LinkedList<UnixFile>::removeFirst()>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00092f4:	74 40                	je     c0009336 <UnixFile::~UnixFile()+0x92>
c00092f6:	83 ec 08             	sub    esp,0x8
c00092f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fd:	68 18 0c 02 c0       	push   0xc0020c18
c0009302:	e8 b1 33 01 00       	call   c001c6b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009307:	83 c4 10             	add    esp,0x10
c000930a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000930e:	8d 50 01             	lea    edx,[eax+0x1]
c0009311:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009315:	3d 88 13 00 00       	cmp    eax,0x1388
c000931a:	0f 94 c0             	sete   al
c000931d:	84 c0                	test   al,al
c000931f:	74 a7                	je     c00092c8 <UnixFile::~UnixFile()+0x24>
c0009321:	83 ec 0c             	sub    esp,0xc
c0009324:	68 e0 db 01 c0       	push   0xc001dbe0
c0009329:	e8 79 6f 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000932e:	83 c4 10             	add    esp,0x10
c0009331:	eb 95                	jmp    c00092c8 <UnixFile::~UnixFile()+0x24>
c0009333:	90                   	nop
c0009334:	eb 01                	jmp    c0009337 <UnixFile::~UnixFile()+0x93>
c0009336:	90                   	nop
c0009337:	90                   	nop
c0009338:	83 c4 1c             	add    esp,0x1c
c000933b:	c3                   	ret    

c000933c <UnixFile::~UnixFile()>:
c000933c:	83 ec 0c             	sub    esp,0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009346:	e8 59 ff ff ff       	call   c00092a4 <UnixFile::~UnixFile()>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	83 ec 08             	sub    esp,0x8
c0009351:	6a 0c                	push   0xc
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 06 13 00 00       	call   c000a662 <operator delete(void*, unsigned long)>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	83 c4 0c             	add    esp,0xc
c0009362:	c3                   	ret    
c0009363:	90                   	nop

c0009364 <ReservedFilename::~ReservedFilename()>:
c0009364:	83 ec 0c             	sub    esp,0xc
c0009367:	ba 24 dc 01 c0       	mov    edx,0xc001dc24
c000936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009370:	89 10                	mov    DWORD PTR [eax],edx
c0009372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009376:	83 ec 0c             	sub    esp,0xc
c0009379:	50                   	push   eax
c000937a:	e8 25 ff ff ff       	call   c00092a4 <UnixFile::~UnixFile()>
c000937f:	83 c4 10             	add    esp,0x10
c0009382:	90                   	nop
c0009383:	83 c4 0c             	add    esp,0xc
c0009386:	c3                   	ret    
c0009387:	90                   	nop

c0009388 <ReservedFilename::~ReservedFilename()>:
c0009388:	83 ec 0c             	sub    esp,0xc
c000938b:	83 ec 0c             	sub    esp,0xc
c000938e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009392:	e8 cd ff ff ff       	call   c0009364 <ReservedFilename::~ReservedFilename()>
c0009397:	83 c4 10             	add    esp,0x10
c000939a:	83 ec 08             	sub    esp,0x8
c000939d:	6a 0c                	push   0xc
c000939f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a3:	e8 ba 12 00 00       	call   c000a662 <operator delete(void*, unsigned long)>
c00093a8:	83 c4 10             	add    esp,0x10
c00093ab:	83 c4 0c             	add    esp,0xc
c00093ae:	c3                   	ret    

c00093af <getFromFileDescriptor(int)>:
c00093af:	53                   	push   ebx
c00093b0:	83 ec 08             	sub    esp,0x8
c00093b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093b7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00093bd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00093c3:	7f 2c                	jg     c00093f1 <getFromFileDescriptor(int)+0x42>
c00093c5:	83 ec 0c             	sub    esp,0xc
c00093c8:	68 18 0c 02 c0       	push   0xc0020c18
c00093cd:	e8 ba 33 01 00       	call   c001c78c <LinkedList<UnixFile>::getFirstElement()>
c00093d2:	83 c4 10             	add    esp,0x10
c00093d5:	85 c0                	test   eax,eax
c00093d7:	75 04                	jne    c00093dd <getFromFileDescriptor(int)+0x2e>
c00093d9:	31 c0                	xor    eax,eax
c00093db:	eb 6e                	jmp    c000944b <getFromFileDescriptor(int)+0x9c>
c00093dd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00093e0:	74 69                	je     c000944b <getFromFileDescriptor(int)+0x9c>
c00093e2:	52                   	push   edx
c00093e3:	52                   	push   edx
c00093e4:	50                   	push   eax
c00093e5:	68 18 0c 02 c0       	push   0xc0020c18
c00093ea:	e8 47 34 01 00       	call   c001c836 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00093ef:	eb e1                	jmp    c00093d2 <getFromFileDescriptor(int)+0x23>
c00093f1:	a1 0c 0c 02 c0       	mov    eax,ds:0xc0020c0c
c00093f6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00093fc:	74 4d                	je     c000944b <getFromFileDescriptor(int)+0x9c>
c00093fe:	a1 10 0c 02 c0       	mov    eax,ds:0xc0020c10
c0009403:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009409:	74 40                	je     c000944b <getFromFileDescriptor(int)+0x9c>
c000940b:	a1 08 0c 02 c0       	mov    eax,ds:0xc0020c08
c0009410:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009416:	74 33                	je     c000944b <getFromFileDescriptor(int)+0x9c>
c0009418:	a1 04 0c 02 c0       	mov    eax,ds:0xc0020c04
c000941d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009423:	74 26                	je     c000944b <getFromFileDescriptor(int)+0x9c>
c0009425:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000942b:	83 f8 08             	cmp    eax,0x8
c000942e:	77 09                	ja     c0009439 <getFromFileDescriptor(int)+0x8a>
c0009430:	8b 04 85 e0 0b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf420]
c0009437:	eb 12                	jmp    c000944b <getFromFileDescriptor(int)+0x9c>
c0009439:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000943f:	83 fb 08             	cmp    ebx,0x8
c0009442:	77 95                	ja     c00093d9 <getFromFileDescriptor(int)+0x2a>
c0009444:	8b 04 9d a0 0b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf460]
c000944b:	83 c4 08             	add    esp,0x8
c000944e:	5b                   	pop    ebx
c000944f:	c3                   	ret    

c0009450 <__static_initialization_and_destruction_0(int, int)>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009458:	75 34                	jne    c000948e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000945a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009462:	75 2a                	jne    c000948e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009464:	83 ec 0c             	sub    esp,0xc
c0009467:	68 18 0c 02 c0       	push   0xc0020c18
c000946c:	e8 05 32 01 00       	call   c001c676 <LinkedList<UnixFile>::LinkedList()>
c0009471:	83 c4 10             	add    esp,0x10
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	68 d0 f8 01 c0       	push   0xc001f8d0
c000947c:	68 18 0c 02 c0       	push   0xc0020c18
c0009481:	68 74 c6 01 c0       	push   0xc001c674
c0009486:	e8 87 11 00 00       	call   c000a612 <__cxa_atexit>
c000948b:	83 c4 10             	add    esp,0x10
c000948e:	90                   	nop
c000948f:	83 c4 0c             	add    esp,0xc
c0009492:	c3                   	ret    

c0009493 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009493:	83 ec 0c             	sub    esp,0xc
c0009496:	83 ec 08             	sub    esp,0x8
c0009499:	68 ff ff 00 00       	push   0xffff
c000949e:	6a 01                	push   0x1
c00094a0:	e8 ab ff ff ff       	call   c0009450 <__static_initialization_and_destruction_0(int, int)>
c00094a5:	83 c4 10             	add    esp,0x10
c00094a8:	83 c4 0c             	add    esp,0xc
c00094ab:	c3                   	ret    

c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00094ac:	53                   	push   ebx
c00094ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00094b5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	d1 e8                	shr    eax,1
c00094bf:	03 05 a8 fa 01 c0    	add    eax,DWORD PTR ds:0xc001faa8
c00094c5:	83 e1 01             	and    ecx,0x1
c00094c8:	8a 10                	mov    dl,BYTE PTR [eax]
c00094ca:	75 09                	jne    c00094d5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00094cc:	83 e2 f0             	and    edx,0xfffffff0
c00094cf:	09 da                	or     edx,ebx
c00094d1:	88 10                	mov    BYTE PTR [eax],dl
c00094d3:	5b                   	pop    ebx
c00094d4:	c3                   	ret    
c00094d5:	c1 e3 04             	shl    ebx,0x4
c00094d8:	83 e2 0f             	and    edx,0xf
c00094db:	09 da                	or     edx,ebx
c00094dd:	88 10                	mov    BYTE PTR [eax],dl
c00094df:	5b                   	pop    ebx
c00094e0:	c3                   	ret    

c00094e1 <Virt::getPageState(unsigned long)>:
c00094e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e5:	8b 0d a8 fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001faa8
c00094eb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00094f1:	89 d0                	mov    eax,edx
c00094f3:	d1 e8                	shr    eax,1
c00094f5:	83 e2 01             	and    edx,0x1
c00094f8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00094fb:	75 04                	jne    c0009501 <Virt::getPageState(unsigned long)+0x20>
c00094fd:	83 e0 0f             	and    eax,0xf
c0009500:	c3                   	ret    
c0009501:	c0 e8 04             	shr    al,0x4
c0009504:	c3                   	ret    

c0009505 <Virt::allocateKernelVirtualPages(int)>:
c0009505:	55                   	push   ebp
c0009506:	31 ed                	xor    ebp,ebp
c0009508:	57                   	push   edi
c0009509:	56                   	push   esi
c000950a:	53                   	push   ebx
c000950b:	31 db                	xor    ebx,ebx
c000950d:	83 ec 1c             	sub    esp,0x1c
c0009510:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009514:	8b 3d a4 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001faa4
c000951a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000951f:	57                   	push   edi
c0009520:	e8 bc ff ff ff       	call   c00094e1 <Virt::getPageState(unsigned long)>
c0009525:	5a                   	pop    edx
c0009526:	84 c0                	test   al,al
c0009528:	75 3a                	jne    c0009564 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000952a:	85 db                	test   ebx,ebx
c000952c:	75 02                	jne    c0009530 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000952e:	89 fd                	mov    ebp,edi
c0009530:	43                   	inc    ebx
c0009531:	39 f3                	cmp    ebx,esi
c0009533:	74 5a                	je     c000958f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009535:	47                   	inc    edi
c0009536:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000953c:	76 31                	jbe    c000956f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000953e:	c7 05 a4 fa 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001faa4,0xc8000
c0009548:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000954d:	75 28                	jne    c0009577 <Virt::allocateKernelVirtualPages(int)+0x72>
c000954f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009554:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009559:	57                   	push   edi
c000955a:	e8 82 ff ff ff       	call   c00094e1 <Virt::getPageState(unsigned long)>
c000955f:	5a                   	pop    edx
c0009560:	84 c0                	test   al,al
c0009562:	74 c6                	je     c000952a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009564:	31 db                	xor    ebx,ebx
c0009566:	47                   	inc    edi
c0009567:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000956d:	77 cf                	ja     c000953e <Virt::allocateKernelVirtualPages(int)+0x39>
c000956f:	89 3d a4 fa 01 c0    	mov    DWORD PTR ds:0xc001faa4,edi
c0009575:	eb a8                	jmp    c000951f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	68 38 dc 01 c0       	push   0xc001dc38
c000957f:	e8 23 6d 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0009584:	8b 3d a4 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001faa4
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	eb 90                	jmp    c000951f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000958f:	89 2d a4 fa 01 c0    	mov    DWORD PTR ds:0xc001faa4,ebp
c0009595:	4b                   	dec    ebx
c0009596:	74 5f                	je     c00095f7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009598:	85 f6                	test   esi,esi
c000959a:	74 3d                	je     c00095d9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000959c:	89 e8                	mov    eax,ebp
c000959e:	31 db                	xor    ebx,ebx
c00095a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00095a3:	eb 14                	jmp    c00095b9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00095a5:	6a 01                	push   0x1
c00095a7:	43                   	inc    ebx
c00095a8:	50                   	push   eax
c00095a9:	e8 fe fe ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095ae:	58                   	pop    eax
c00095af:	39 f3                	cmp    ebx,esi
c00095b1:	5a                   	pop    edx
c00095b2:	74 25                	je     c00095d9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00095b4:	a1 a4 fa 01 c0       	mov    eax,ds:0xc001faa4
c00095b9:	8d 50 01             	lea    edx,[eax+0x1]
c00095bc:	85 db                	test   ebx,ebx
c00095be:	89 15 a4 fa 01 c0    	mov    DWORD PTR ds:0xc001faa4,edx
c00095c4:	74 20                	je     c00095e6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00095c6:	39 df                	cmp    edi,ebx
c00095c8:	75 db                	jne    c00095a5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00095ca:	6a 03                	push   0x3
c00095cc:	43                   	inc    ebx
c00095cd:	50                   	push   eax
c00095ce:	e8 d9 fe ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095d3:	59                   	pop    ecx
c00095d4:	39 f3                	cmp    ebx,esi
c00095d6:	58                   	pop    eax
c00095d7:	75 db                	jne    c00095b4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00095d9:	83 c4 1c             	add    esp,0x1c
c00095dc:	89 e8                	mov    eax,ebp
c00095de:	5b                   	pop    ebx
c00095df:	c1 e0 0c             	shl    eax,0xc
c00095e2:	5e                   	pop    esi
c00095e3:	5f                   	pop    edi
c00095e4:	5d                   	pop    ebp
c00095e5:	c3                   	ret    
c00095e6:	6a 02                	push   0x2
c00095e8:	bb 01 00 00 00       	mov    ebx,0x1
c00095ed:	50                   	push   eax
c00095ee:	e8 b9 fe ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095f3:	58                   	pop    eax
c00095f4:	5a                   	pop    edx
c00095f5:	eb bd                	jmp    c00095b4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00095f7:	6a 04                	push   0x4
c00095f9:	8d 45 01             	lea    eax,[ebp+0x1]
c00095fc:	55                   	push   ebp
c00095fd:	a3 a4 fa 01 c0       	mov    ds:0xc001faa4,eax
c0009602:	e8 a5 fe ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009607:	59                   	pop    ecx
c0009608:	89 e8                	mov    eax,ebp
c000960a:	5b                   	pop    ebx
c000960b:	c1 e0 0c             	shl    eax,0xc
c000960e:	83 c4 1c             	add    esp,0x1c
c0009611:	5b                   	pop    ebx
c0009612:	5e                   	pop    esi
c0009613:	5f                   	pop    edi
c0009614:	5d                   	pop    ebp
c0009615:	c3                   	ret    

c0009616 <Virt::freeSwapfilePage(unsigned long)>:
c0009616:	53                   	push   ebx
c0009617:	8b 15 2c 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c2c
c000961d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009621:	b8 01 00 00 00       	mov    eax,0x1
c0009626:	89 cb                	mov    ebx,ecx
c0009628:	d3 e0                	shl    eax,cl
c000962a:	c1 eb 05             	shr    ebx,0x5
c000962d:	f7 d0                	not    eax
c000962f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009632:	5b                   	pop    ebx
c0009633:	c3                   	ret    

c0009634 <Virt::swapIDToSector(unsigned long)>:
c0009634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009638:	0f af 05 ac fa 01 c0 	imul   eax,DWORD PTR ds:0xc001faac
c000963f:	03 05 b4 fa 01 c0    	add    eax,DWORD PTR ds:0xc001fab4
c0009645:	c3                   	ret    

c0009646 <Virt::allocateSwapfilePage()>:
c0009646:	55                   	push   ebp
c0009647:	31 d2                	xor    edx,edx
c0009649:	57                   	push   edi
c000964a:	56                   	push   esi
c000964b:	53                   	push   ebx
c000964c:	83 ec 0c             	sub    esp,0xc
c000964f:	8b 0d ac fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001faac
c0009655:	a1 b0 fa 01 c0       	mov    eax,ds:0xc001fab0
c000965a:	f7 f1                	div    ecx
c000965c:	39 0d b0 fa 01 c0    	cmp    DWORD PTR ds:0xc001fab0,ecx
c0009662:	72 2d                	jb     c0009691 <Virt::allocateSwapfilePage()+0x4b>
c0009664:	8b 35 2c 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c2c
c000966a:	8b 16                	mov    edx,DWORD PTR [esi]
c000966c:	f6 c2 01             	test   dl,0x1
c000966f:	74 3c                	je     c00096ad <Virt::allocateSwapfilePage()+0x67>
c0009671:	31 c9                	xor    ecx,ecx
c0009673:	bf 01 00 00 00       	mov    edi,0x1
c0009678:	eb 12                	jmp    c000968c <Virt::allocateSwapfilePage()+0x46>
c000967a:	89 fd                	mov    ebp,edi
c000967c:	89 ca                	mov    edx,ecx
c000967e:	d3 e5                	shl    ebp,cl
c0009680:	c1 ea 05             	shr    edx,0x5
c0009683:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009686:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009688:	85 ea                	test   edx,ebp
c000968a:	74 2a                	je     c00096b6 <Virt::allocateSwapfilePage()+0x70>
c000968c:	41                   	inc    ecx
c000968d:	39 c8                	cmp    eax,ecx
c000968f:	77 e9                	ja     c000967a <Virt::allocateSwapfilePage()+0x34>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 9f dd 01 c0       	push   0xc001dd9f
c0009699:	e8 09 6c 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	31 c9                	xor    ecx,ecx
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	89 c8                	mov    eax,ecx
c00096a8:	5b                   	pop    ebx
c00096a9:	5e                   	pop    esi
c00096aa:	5f                   	pop    edi
c00096ab:	5d                   	pop    ebp
c00096ac:	c3                   	ret    
c00096ad:	89 f3                	mov    ebx,esi
c00096af:	bd 01 00 00 00       	mov    ebp,0x1
c00096b4:	31 c9                	xor    ecx,ecx
c00096b6:	09 ea                	or     edx,ebp
c00096b8:	89 c8                	mov    eax,ecx
c00096ba:	89 13                	mov    DWORD PTR [ebx],edx
c00096bc:	83 c4 0c             	add    esp,0xc
c00096bf:	5b                   	pop    ebx
c00096c0:	5e                   	pop    esi
c00096c1:	5f                   	pop    edi
c00096c2:	5d                   	pop    ebp
c00096c3:	c3                   	ret    

c00096c4 <Virt::virtualMemorySetup()>:
c00096c4:	53                   	push   ebx
c00096c5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00096ca:	6a 0f                	push   0xf
c00096cc:	53                   	push   ebx
c00096cd:	43                   	inc    ebx
c00096ce:	e8 d9 fd ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d3:	58                   	pop    eax
c00096d4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00096da:	5a                   	pop    edx
c00096db:	75 ed                	jne    c00096ca <Virt::virtualMemorySetup()+0x6>
c00096dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00096e2:	6a 00                	push   0x0
c00096e4:	53                   	push   ebx
c00096e5:	43                   	inc    ebx
c00096e6:	e8 c1 fd ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096eb:	59                   	pop    ecx
c00096ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00096f2:	58                   	pop    eax
c00096f3:	75 ed                	jne    c00096e2 <Virt::virtualMemorySetup()+0x1e>
c00096f5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00096fa:	6a 0f                	push   0xf
c00096fc:	53                   	push   ebx
c00096fd:	43                   	inc    ebx
c00096fe:	e8 a9 fd ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009703:	58                   	pop    eax
c0009704:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000970a:	5a                   	pop    edx
c000970b:	75 ed                	jne    c00096fa <Virt::virtualMemorySetup()+0x36>
c000970d:	5b                   	pop    ebx
c000970e:	c3                   	ret    

c000970f <Virt::setupPageSwapping(int)>:
c000970f:	53                   	push   ebx
c0009710:	83 ec 0c             	sub    esp,0xc
c0009713:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009717:	a1 a8 30 02 c0       	mov    eax,ds:0xc00230a8
c000971c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009722:	8b 10                	mov    edx,DWORD PTR [eax]
c0009724:	53                   	push   ebx
c0009725:	c1 e3 0b             	shl    ebx,0xb
c0009728:	68 b6 dd 01 c0       	push   0xc001ddb6
c000972d:	50                   	push   eax
c000972e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009731:	89 1d b0 fa 01 c0    	mov    DWORD PTR ds:0xc001fab0,ebx
c0009737:	c6 05 b8 fa 01 c0 43 	mov    BYTE PTR ds:0xc001fab8,0x43
c000973e:	c1 eb 08             	shr    ebx,0x8
c0009741:	a3 b4 fa 01 c0       	mov    ds:0xc001fab4,eax
c0009746:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009749:	c7 05 ac fa 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001faac,0x8
c0009753:	e8 71 e2 ff ff       	call   c00079c9 <malloc>
c0009758:	83 c4 0c             	add    esp,0xc
c000975b:	89 c1                	mov    ecx,eax
c000975d:	a3 2c 0c 02 c0       	mov    ds:0xc0020c2c,eax
c0009762:	31 d2                	xor    edx,edx
c0009764:	a1 b0 fa 01 c0       	mov    eax,ds:0xc001fab0
c0009769:	f7 35 ac fa 01 c0    	div    DWORD PTR ds:0xc001faac
c000976f:	c1 e8 05             	shr    eax,0x5
c0009772:	50                   	push   eax
c0009773:	6a 00                	push   0x0
c0009775:	51                   	push   ecx
c0009776:	e8 75 6d ff ff       	call   c00004f0 <memset>
c000977b:	83 c4 18             	add    esp,0x18
c000977e:	5b                   	pop    ebx
c000977f:	c3                   	ret    

c0009780 <VAS::VAS()>:
c0009780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009784:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000978b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000978f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000979a:	a3 30 0c 02 c0       	mov    ds:0xc0020c30,eax
c000979f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097a3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00097a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ab:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00097ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00097b9:	90                   	nop
c00097ba:	c3                   	ret    
c00097bb:	90                   	nop

c00097bc <VAS::VAS(VAS*)>:
c00097bc:	83 ec 0c             	sub    esp,0xc
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097d5:	83 ec 0c             	sub    esp,0xc
c00097d8:	68 58 dc 01 c0       	push   0xc001dc58
c00097dd:	e8 c5 6a 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c00097e2:	83 c4 10             	add    esp,0x10
c00097e5:	90                   	nop
c00097e6:	83 c4 0c             	add    esp,0xc
c00097e9:	c3                   	ret    

c00097ea <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00097ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097ee:	89 c2                	mov    edx,eax
c00097f0:	c1 e8 0a             	shr    eax,0xa
c00097f3:	c1 ea 16             	shr    edx,0x16
c00097f6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097fb:	19 c9                	sbb    ecx,ecx
c00097fd:	c1 e2 0c             	shl    edx,0xc
c0009800:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009806:	25 fc 0f 00 00       	and    eax,0xffc
c000980b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009812:	01 d0                	add    eax,edx
c0009814:	c3                   	ret    
c0009815:	90                   	nop

c0009816 <VAS::getPageTableEntry(unsigned long)>:
c0009816:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000981a:	89 ca                	mov    edx,ecx
c000981c:	c1 e9 0a             	shr    ecx,0xa
c000981f:	c1 ea 16             	shr    edx,0x16
c0009822:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009828:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000982e:	c1 e0 0c             	shl    eax,0xc
c0009831:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009834:	c3                   	ret    

c0009835 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009835:	57                   	push   edi
c0009836:	56                   	push   esi
c0009837:	be 01 00 00 00       	mov    esi,0x1
c000983c:	53                   	push   ebx
c000983d:	83 ec 10             	sub    esp,0x10
c0009840:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009844:	c1 eb 0c             	shr    ebx,0xc
c0009847:	eb 3f                	jmp    c0009888 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009849:	83 ec 08             	sub    esp,0x8
c000984c:	a1 30 0c 02 c0       	mov    eax,ds:0xc0020c30
c0009851:	57                   	push   edi
c0009852:	50                   	push   eax
c0009853:	e8 be ff ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c0009858:	83 c4 10             	add    esp,0x10
c000985b:	8b 00                	mov    eax,DWORD PTR [eax]
c000985d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009861:	f6 c4 04             	test   ah,0x4
c0009864:	75 60                	jne    c00098c6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009866:	80 fa 04             	cmp    dl,0x4
c0009869:	74 79                	je     c00098e4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000986b:	80 fa 02             	cmp    dl,0x2
c000986e:	0f 84 89 00 00 00    	je     c00098fd <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009874:	80 fa 03             	cmp    dl,0x3
c0009877:	0f 84 ae 00 00 00    	je     c000992b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000987d:	fe ca                	dec    dl
c000987f:	0f 84 93 00 00 00    	je     c0009918 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009885:	43                   	inc    ebx
c0009886:	31 f6                	xor    esi,esi
c0009888:	53                   	push   ebx
c0009889:	89 df                	mov    edi,ebx
c000988b:	e8 51 fc ff ff       	call   c00094e1 <Virt::getPageState(unsigned long)>
c0009890:	c1 e7 0c             	shl    edi,0xc
c0009893:	5a                   	pop    edx
c0009894:	84 c0                	test   al,al
c0009896:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000989a:	75 ad                	jne    c0009849 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	68 cd dd 01 c0       	push   0xc001ddcd
c00098a4:	e8 fe 69 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c00098a9:	5a                   	pop    edx
c00098aa:	59                   	pop    ecx
c00098ab:	57                   	push   edi
c00098ac:	8b 3d 30 0c 02 c0    	mov    edi,DWORD PTR ds:0xc0020c30
c00098b2:	57                   	push   edi
c00098b3:	e8 5e ff ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c00098b8:	83 c4 10             	add    esp,0x10
c00098bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00098bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00098c1:	f6 c4 04             	test   ah,0x4
c00098c4:	74 bf                	je     c0009885 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00098c6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00098ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098cf:	83 ec 0c             	sub    esp,0xc
c00098d2:	50                   	push   eax
c00098d3:	e8 5c e4 ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00098df:	80 fa 04             	cmp    dl,0x4
c00098e2:	75 87                	jne    c000986b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00098e4:	89 f0                	mov    eax,esi
c00098e6:	84 c0                	test   al,al
c00098e8:	75 47                	jne    c0009931 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00098ea:	c7 44 24 20 7c dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc7c
c00098f2:	83 c4 10             	add    esp,0x10
c00098f5:	5b                   	pop    ebx
c00098f6:	5e                   	pop    esi
c00098f7:	5f                   	pop    edi
c00098f8:	e9 aa 69 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c00098fd:	89 f0                	mov    eax,esi
c00098ff:	84 c0                	test   al,al
c0009901:	75 15                	jne    c0009918 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009903:	83 ec 0c             	sub    esp,0xc
c0009906:	68 e9 dd 01 c0       	push   0xc001dde9
c000990b:	e8 97 69 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0009910:	83 c4 10             	add    esp,0x10
c0009913:	e9 6d ff ff ff       	jmp    c0009885 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009918:	83 ec 08             	sub    esp,0x8
c000991b:	6a 00                	push   0x0
c000991d:	53                   	push   ebx
c000991e:	e8 89 fb ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009923:	83 c4 10             	add    esp,0x10
c0009926:	e9 5a ff ff ff       	jmp    c0009885 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000992b:	89 f0                	mov    eax,esi
c000992d:	84 c0                	test   al,al
c000992f:	75 15                	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009931:	83 ec 08             	sub    esp,0x8
c0009934:	6a 00                	push   0x0
c0009936:	53                   	push   ebx
c0009937:	e8 70 fb ff ff       	call   c00094ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000993c:	83 c4 10             	add    esp,0x10
c000993f:	83 c4 10             	add    esp,0x10
c0009942:	5b                   	pop    ebx
c0009943:	5e                   	pop    esi
c0009944:	5f                   	pop    edi
c0009945:	c3                   	ret    
c0009946:	c7 44 24 20 05 de 01 c0 	mov    DWORD PTR [esp+0x20],0xc001de05
c000994e:	83 c4 10             	add    esp,0x10
c0009951:	5b                   	pop    ebx
c0009952:	5e                   	pop    esi
c0009953:	5f                   	pop    edi
c0009954:	e9 4e 69 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c0009959:	90                   	nop

c000995a <VAS::freeAllocatedPages(unsigned long)>:
c000995a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009962:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009966:	74 09                	je     c0009971 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009968:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000996c:	e9 c4 fe ff ff       	jmp    c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c0009971:	c7 44 24 04 a0 dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dca0
c0009979:	e9 da 0d 00 00       	jmp    c000a758 <Dbg::kprintf(char const*, ...)>

c000997e <VAS::virtualToPhysical(unsigned long)>:
c000997e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009982:	50                   	push   eax
c0009983:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009987:	52                   	push   edx
c0009988:	e8 89 fe ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c000998d:	59                   	pop    ecx
c000998e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009990:	5a                   	pop    edx
c0009991:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009996:	c3                   	ret    
c0009997:	90                   	nop

c0009998 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009998:	55                   	push   ebp
c0009999:	57                   	push   edi
c000999a:	56                   	push   esi
c000999b:	53                   	push   ebx
c000999c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00099a0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00099a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099a8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00099ac:	85 db                	test   ebx,ebx
c00099ae:	7e 22                	jle    c00099d2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00099b0:	c1 e3 0c             	shl    ebx,0xc
c00099b3:	01 f3                	add    ebx,esi
c00099b5:	56                   	push   esi
c00099b6:	81 c6 00 10 00 00    	add    esi,0x1000
c00099bc:	55                   	push   ebp
c00099bd:	e8 54 fe ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c00099c2:	5a                   	pop    edx
c00099c3:	59                   	pop    ecx
c00099c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00099c6:	21 f9                	and    ecx,edi
c00099c8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00099cc:	39 f3                	cmp    ebx,esi
c00099ce:	89 08                	mov    DWORD PTR [eax],ecx
c00099d0:	75 e3                	jne    c00099b5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00099d2:	5b                   	pop    ebx
c00099d3:	5e                   	pop    esi
c00099d4:	5f                   	pop    edi
c00099d5:	5d                   	pop    ebp
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <VAS::setToWriteCombining(unsigned long, int)>:
c00099d8:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c00099dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099e3:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00099ea:	75 01                	jne    c00099ed <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00099ec:	c3                   	ret    
c00099ed:	68 80 00 00 00       	push   0x80
c00099f2:	6a ff                	push   0xffffffff
c00099f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099f8:	50                   	push   eax
c00099f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099fd:	52                   	push   edx
c00099fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009a02:	51                   	push   ecx
c0009a03:	e8 90 ff ff ff       	call   c0009998 <VAS::reflagRange(unsigned long, int, int, int)>
c0009a08:	83 c4 14             	add    esp,0x14
c0009a0b:	c3                   	ret    

c0009a0c <VAS::mapOtherVASIn(bool, VAS*)>:
c0009a0c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a15:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a1c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009a1f:	19 c0                	sbb    eax,eax
c0009a21:	83 ca 03             	or     edx,0x3
c0009a24:	83 e0 fc             	and    eax,0xfffffffc
c0009a27:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009a2e:	0f 20 d8             	mov    eax,cr3
c0009a31:	0f 22 d8             	mov    cr3,eax
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <VAS::~VAS()>:
c0009a36:	83 ec 2c             	sub    esp,0x2c
c0009a39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009a41:	fa                   	cli    
c0009a42:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009a47:	40                   	inc    eax
c0009a48:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0009a4d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009a57:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009a5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009a61:	6a 01                	push   0x1
c0009a63:	50                   	push   eax
c0009a64:	e8 a3 ff ff ff       	call   c0009a0c <VAS::mapOtherVASIn(bool, VAS*)>
c0009a69:	83 c4 0c             	add    esp,0xc
c0009a6c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009a74:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009a7c:	0f 8f d4 00 00 00    	jg     c0009b56 <VAS::~VAS()+0x120>
c0009a82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009a8d:	c1 e2 02             	shl    edx,0x2
c0009a90:	01 d0                	add    eax,edx
c0009a92:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a9c:	83 e0 01             	and    eax,0x1
c0009a9f:	0f 84 a8 00 00 00    	je     c0009b4d <VAS::~VAS()+0x117>
c0009aa5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009aad:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009ab5:	7f 72                	jg     c0009b29 <VAS::~VAS()+0xf3>
c0009ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009abb:	c1 e0 0a             	shl    eax,0xa
c0009abe:	89 c2                	mov    edx,eax
c0009ac0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ac4:	01 d0                	add    eax,edx
c0009ac6:	c1 e0 0c             	shl    eax,0xc
c0009ac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009acd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ad4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ad7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009add:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009ae1:	6a 01                	push   0x1
c0009ae3:	50                   	push   eax
c0009ae4:	e8 01 fd ff ff       	call   c00097ea <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ae9:	83 c4 0c             	add    esp,0xc
c0009aec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009af6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	25 01 04 00 00       	and    eax,0x401
c0009b03:	3d 01 04 00 00       	cmp    eax,0x401
c0009b08:	75 19                	jne    c0009b23 <VAS::~VAS()+0xed>
c0009b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b13:	83 ec 0c             	sub    esp,0xc
c0009b16:	50                   	push   eax
c0009b17:	e8 18 e2 ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c0009b1c:	83 c4 10             	add    esp,0x10
c0009b1f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009b23:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009b27:	eb 84                	jmp    c0009aad <VAS::~VAS()+0x77>
c0009b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b2d:	25 00 04 00 00       	and    eax,0x400
c0009b32:	74 19                	je     c0009b4d <VAS::~VAS()+0x117>
c0009b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b3d:	83 ec 0c             	sub    esp,0xc
c0009b40:	50                   	push   eax
c0009b41:	e8 ee e1 ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009b4d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009b51:	e9 1e ff ff ff       	jmp    c0009a74 <VAS::~VAS()+0x3e>
c0009b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b5d:	83 ec 0c             	sub    esp,0xc
c0009b60:	50                   	push   eax
c0009b61:	e8 cf fc ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b66:	83 c4 10             	add    esp,0x10
c0009b69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b70:	83 ec 0c             	sub    esp,0xc
c0009b73:	50                   	push   eax
c0009b74:	e8 bb e1 ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c0009b79:	83 c4 10             	add    esp,0x10
c0009b7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009b80:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009b85:	48                   	dec    eax
c0009b86:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0009b8b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009b90:	85 c0                	test   eax,eax
c0009b92:	75 01                	jne    c0009b95 <VAS::~VAS()+0x15f>
c0009b94:	fb                   	sti    
c0009b95:	90                   	nop
c0009b96:	83 c4 2c             	add    esp,0x2c
c0009b99:	c3                   	ret    

c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009b9a:	55                   	push   ebp
c0009b9b:	57                   	push   edi
c0009b9c:	56                   	push   esi
c0009b9d:	53                   	push   ebx
c0009b9e:	83 ec 1c             	sub    esp,0x1c
c0009ba1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009ba5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ba9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009baf:	77 0b                	ja     c0009bbc <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009bb1:	0f 20 d8             	mov    eax,cr3
c0009bb4:	0f 20 d8             	mov    eax,cr3
c0009bb7:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009bba:	75 47                	jne    c0009c03 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009bbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bc0:	09 d8                	or     eax,ebx
c0009bc2:	a9 ff 0f 00 00       	test   eax,0xfff
c0009bc7:	75 57                	jne    c0009c20 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009bc9:	89 de                	mov    esi,ebx
c0009bcb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009bce:	c1 ee 16             	shr    esi,0x16
c0009bd1:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009bd8:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009bdc:	74 54                	je     c0009c32 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009bde:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009be2:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009be8:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009bec:	c1 e6 0c             	shl    esi,0xc
c0009bef:	c1 eb 0a             	shr    ebx,0xa
c0009bf2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009bf8:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009bfb:	83 c4 1c             	add    esp,0x1c
c0009bfe:	5b                   	pop    ebx
c0009bff:	5e                   	pop    esi
c0009c00:	5f                   	pop    edi
c0009c01:	5d                   	pop    ebp
c0009c02:	c3                   	ret    
c0009c03:	83 ec 0c             	sub    esp,0xc
c0009c06:	68 c4 dc 01 c0       	push   0xc001dcc4
c0009c0b:	e8 48 0b 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0009c10:	83 c4 10             	add    esp,0x10
c0009c13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c17:	09 d8                	or     eax,ebx
c0009c19:	a9 ff 0f 00 00       	test   eax,0xfff
c0009c1e:	74 a9                	je     c0009bc9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009c20:	83 ec 0c             	sub    esp,0xc
c0009c23:	68 2c dd 01 c0       	push   0xc001dd2c
c0009c28:	e8 7a 66 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0009c2d:	83 c4 10             	add    esp,0x10
c0009c30:	eb 97                	jmp    c0009bc9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c36:	e8 5b e1 ff ff       	call   c0007d96 <Phys::allocatePage()>
c0009c3b:	83 ec 0c             	sub    esp,0xc
c0009c3e:	89 c5                	mov    ebp,eax
c0009c40:	8b 0d 30 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c30
c0009c46:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009c4a:	6a 01                	push   0x1
c0009c4c:	e8 b4 f8 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0009c51:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009c58:	6a 01                	push   0x1
c0009c5a:	50                   	push   eax
c0009c5b:	55                   	push   ebp
c0009c5c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009c62:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009c66:	51                   	push   ecx
c0009c67:	e8 28 02 00 00       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009c6c:	83 c4 1c             	add    esp,0x1c
c0009c6f:	68 00 10 00 00       	push   0x1000
c0009c74:	6a 00                	push   0x0
c0009c76:	50                   	push   eax
c0009c77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c7b:	e8 70 68 ff ff       	call   c00004f0 <memset>
c0009c80:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009c84:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c87:	e8 a9 fb ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c90:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009c99:	e9 40 ff ff ff       	jmp    c0009bde <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009c9e <VAS::allocatePages(int, int)>:
c0009c9e:	55                   	push   ebp
c0009c9f:	57                   	push   edi
c0009ca0:	56                   	push   esi
c0009ca1:	53                   	push   ebx
c0009ca2:	83 ec 1c             	sub    esp,0x1c
c0009ca5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ca9:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0009cae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cb4:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009cba:	83 e0 01             	and    eax,0x1
c0009cbd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009cc1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009cc5:	0f 85 cc 00 00 00    	jne    c0009d97 <VAS::allocatePages(int, int)+0xf9>
c0009ccb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd2:	85 c0                	test   eax,eax
c0009cd4:	0f 84 a1 00 00 00    	je     c0009d7b <VAS::allocatePages(int, int)+0xdd>
c0009cda:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ce2:	c1 e6 0c             	shl    esi,0xc
c0009ce5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009ce9:	85 c0                	test   eax,eax
c0009ceb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009cee:	7e 33                	jle    c0009d23 <VAS::allocatePages(int, int)+0x85>
c0009cf0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009cf4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009cf8:	81 cd 00 04 00 00    	or     ebp,0x400
c0009cfe:	e8 93 e0 ff ff       	call   c0007d96 <Phys::allocatePage()>
c0009d03:	55                   	push   ebp
c0009d04:	53                   	push   ebx
c0009d05:	50                   	push   eax
c0009d06:	57                   	push   edi
c0009d07:	e8 8e fe ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d0c:	83 c4 10             	add    esp,0x10
c0009d0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d14:	74 03                	je     c0009d19 <VAS::allocatePages(int, int)+0x7b>
c0009d16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d1f:	39 de                	cmp    esi,ebx
c0009d21:	75 db                	jne    c0009cfe <VAS::allocatePages(int, int)+0x60>
c0009d23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d28:	75 12                	jne    c0009d3c <VAS::allocatePages(int, int)+0x9e>
c0009d2a:	0f 20 d8             	mov    eax,cr3
c0009d2d:	0f 22 d8             	mov    cr3,eax
c0009d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d34:	83 c4 1c             	add    esp,0x1c
c0009d37:	5b                   	pop    ebx
c0009d38:	5e                   	pop    esi
c0009d39:	5f                   	pop    edi
c0009d3a:	5d                   	pop    ebp
c0009d3b:	c3                   	ret    
c0009d3c:	c1 ee 0a             	shr    esi,0xa
c0009d3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009d43:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009d49:	c1 eb 0a             	shr    ebx,0xa
c0009d4c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009d52:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d58:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d5e:	39 c3                	cmp    ebx,eax
c0009d60:	77 ce                	ja     c0009d30 <VAS::allocatePages(int, int)+0x92>
c0009d62:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d6b:	39 d8                	cmp    eax,ebx
c0009d6d:	73 f3                	jae    c0009d62 <VAS::allocatePages(int, int)+0xc4>
c0009d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d73:	83 c4 1c             	add    esp,0x1c
c0009d76:	5b                   	pop    ebx
c0009d77:	5e                   	pop    esi
c0009d78:	5f                   	pop    edi
c0009d79:	5d                   	pop    ebp
c0009d7a:	c3                   	ret    
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 50 dd 01 c0       	push   0xc001dd50
c0009d83:	e8 1f 65 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0009d88:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009d8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	e9 43 ff ff ff       	jmp    c0009cda <VAS::allocatePages(int, int)+0x3c>
c0009d97:	83 ec 0c             	sub    esp,0xc
c0009d9a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009d9e:	51                   	push   ecx
c0009d9f:	e8 61 f7 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0009da4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009da8:	83 c4 10             	add    esp,0x10
c0009dab:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009db0:	0f 87 9b 00 00 00    	ja     c0009e51 <VAS::allocatePages(int, int)+0x1b3>
c0009db6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009dba:	85 d2                	test   edx,edx
c0009dbc:	7e 3c                	jle    c0009dfa <VAS::allocatePages(int, int)+0x15c>
c0009dbe:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009dc6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009dca:	c1 e5 0c             	shl    ebp,0xc
c0009dcd:	81 ce 00 04 00 00    	or     esi,0x400
c0009dd3:	01 dd                	add    ebp,ebx
c0009dd5:	e8 bc df ff ff       	call   c0007d96 <Phys::allocatePage()>
c0009dda:	56                   	push   esi
c0009ddb:	53                   	push   ebx
c0009ddc:	50                   	push   eax
c0009ddd:	57                   	push   edi
c0009dde:	e8 b7 fd ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009deb:	74 03                	je     c0009df0 <VAS::allocatePages(int, int)+0x152>
c0009ded:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009df0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009df6:	39 dd                	cmp    ebp,ebx
c0009df8:	75 db                	jne    c0009dd5 <VAS::allocatePages(int, int)+0x137>
c0009dfa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009dff:	0f 84 25 ff ff ff    	je     c0009d2a <VAS::allocatePages(int, int)+0x8c>
c0009e05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e0d:	89 d3                	mov    ebx,edx
c0009e0f:	c1 e0 0c             	shl    eax,0xc
c0009e12:	c1 eb 0a             	shr    ebx,0xa
c0009e15:	01 d0                	add    eax,edx
c0009e17:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009e1d:	c1 e8 0a             	shr    eax,0xa
c0009e20:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009e26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e2b:	2d 00 00 40 00       	sub    eax,0x400000
c0009e30:	39 c3                	cmp    ebx,eax
c0009e32:	0f 87 f8 fe ff ff    	ja     c0009d30 <VAS::allocatePages(int, int)+0x92>
c0009e38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e41:	39 d8                	cmp    eax,ebx
c0009e43:	73 f3                	jae    c0009e38 <VAS::allocatePages(int, int)+0x19a>
c0009e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e49:	83 c4 1c             	add    esp,0x1c
c0009e4c:	5b                   	pop    ebx
c0009e4d:	5e                   	pop    esi
c0009e4e:	5f                   	pop    edi
c0009e4f:	5d                   	pop    ebp
c0009e50:	c3                   	ret    
c0009e51:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0009e56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e5c:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009e63:	0f 84 4d ff ff ff    	je     c0009db6 <VAS::allocatePages(int, int)+0x118>
c0009e69:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009e71:	e9 40 ff ff ff       	jmp    c0009db6 <VAS::allocatePages(int, int)+0x118>

c0009e76 <VAS::setCPUSpecific(unsigned long)>:
c0009e76:	83 ec 0c             	sub    esp,0xc
c0009e79:	6a 05                	push   0x5
c0009e7b:	68 00 00 40 c2       	push   0xc2400000
c0009e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e84:	50                   	push   eax
c0009e85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e89:	52                   	push   edx
c0009e8a:	e8 0b fd ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e8f:	83 c4 1c             	add    esp,0x1c
c0009e92:	c3                   	ret    
c0009e93:	90                   	nop

c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009e94:	55                   	push   ebp
c0009e95:	57                   	push   edi
c0009e96:	56                   	push   esi
c0009e97:	53                   	push   ebx
c0009e98:	83 ec 1c             	sub    esp,0x1c
c0009e9b:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0009ea0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ea4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eaa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009eae:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009eb4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009eb8:	83 e0 01             	and    eax,0x1
c0009ebb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009ebf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ec3:	85 c0                	test   eax,eax
c0009ec5:	7e 39                	jle    c0009f00 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009ec7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ecb:	89 f3                	mov    ebx,esi
c0009ecd:	c1 e0 0c             	shl    eax,0xc
c0009ed0:	01 f0                	add    eax,esi
c0009ed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ed6:	55                   	push   ebp
c0009ed7:	53                   	push   ebx
c0009ed8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009edc:	29 f0                	sub    eax,esi
c0009ede:	01 d8                	add    eax,ebx
c0009ee0:	50                   	push   eax
c0009ee1:	57                   	push   edi
c0009ee2:	e8 b3 fc ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee7:	83 c4 10             	add    esp,0x10
c0009eea:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009eef:	74 03                	je     c0009ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009ef1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ef4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009efa:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009efe:	75 d6                	jne    c0009ed6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009f00:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009f05:	75 10                	jne    c0009f17 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009f07:	0f 20 d8             	mov    eax,cr3
c0009f0a:	0f 22 d8             	mov    cr3,eax
c0009f0d:	83 c4 1c             	add    esp,0x1c
c0009f10:	89 f0                	mov    eax,esi
c0009f12:	5b                   	pop    ebx
c0009f13:	5e                   	pop    esi
c0009f14:	5f                   	pop    edi
c0009f15:	5d                   	pop    ebp
c0009f16:	c3                   	ret    
c0009f17:	89 f3                	mov    ebx,esi
c0009f19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f1d:	c1 eb 0a             	shr    ebx,0xa
c0009f20:	c1 e0 0c             	shl    eax,0xc
c0009f23:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f29:	01 f0                	add    eax,esi
c0009f2b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f31:	c1 e8 0a             	shr    eax,0xa
c0009f34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f39:	2d 00 00 40 00       	sub    eax,0x400000
c0009f3e:	39 c3                	cmp    ebx,eax
c0009f40:	77 cb                	ja     c0009f0d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009f42:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f45:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f4b:	39 d8                	cmp    eax,ebx
c0009f4d:	73 f3                	jae    c0009f42 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009f4f:	83 c4 1c             	add    esp,0x1c
c0009f52:	89 f0                	mov    eax,esi
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    
c0009f59:	90                   	nop

c0009f5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f5a:	55                   	push   ebp
c0009f5b:	57                   	push   edi
c0009f5c:	56                   	push   esi
c0009f5d:	53                   	push   ebx
c0009f5e:	83 ec 1c             	sub    esp,0x1c
c0009f61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f69:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009f6d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f71:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f76:	75 4a                	jne    c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009f78:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f7c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f7f:	c1 eb 16             	shr    ebx,0x16
c0009f82:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009f89:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009f8d:	74 4d                	je     c0009fdc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009f8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f93:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009f97:	c1 e8 0a             	shr    eax,0xa
c0009f9a:	80 fa 01             	cmp    dl,0x1
c0009f9d:	19 d2                	sbb    edx,edx
c0009f9f:	c1 e3 0c             	shl    ebx,0xc
c0009fa2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009fa6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fac:	25 fc 0f 00 00       	and    eax,0xffc
c0009fb1:	01 d8                	add    eax,ebx
c0009fb3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fba:	83 c4 1c             	add    esp,0x1c
c0009fbd:	5b                   	pop    ebx
c0009fbe:	5e                   	pop    esi
c0009fbf:	5f                   	pop    edi
c0009fc0:	5d                   	pop    ebp
c0009fc1:	c3                   	ret    
c0009fc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fc6:	83 ec 0c             	sub    esp,0xc
c0009fc9:	68 7c dd 01 c0       	push   0xc001dd7c
c0009fce:	e8 d4 62 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c0009fd3:	83 c4 10             	add    esp,0x10
c0009fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fda:	eb 9c                	jmp    c0009f78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009fdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fe0:	e8 b1 dd ff ff       	call   c0007d96 <Phys::allocatePage()>
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	89 c5                	mov    ebp,eax
c0009fea:	8b 0d 30 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c30
c0009ff0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ff4:	6a 01                	push   0x1
c0009ff6:	e8 0a f5 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0009ffb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a002:	6a 01                	push   0x1
c000a004:	50                   	push   eax
c000a005:	55                   	push   ebp
c000a006:	81 cd 07 04 00 00    	or     ebp,0x407
c000a00c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a010:	51                   	push   ecx
c000a011:	e8 7e fe ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a016:	83 c4 1c             	add    esp,0x1c
c000a019:	68 00 10 00 00       	push   0x1000
c000a01e:	6a 00                	push   0x0
c000a020:	50                   	push   eax
c000a021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a025:	e8 c6 64 ff ff       	call   c00004f0 <memset>
c000a02a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a02e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a031:	e8 ff f7 ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c000a036:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a03f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a043:	e9 47 ff ff ff       	jmp    c0009f8f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a048 <VAS::VAS(bool)>:
c000a048:	53                   	push   ebx
c000a049:	83 ec 28             	sub    esp,0x28
c000a04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a050:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a058:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a05f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a063:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a06a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a072:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a075:	e8 1c dd ff ff       	call   c0007d96 <Phys::allocatePage()>
c000a07a:	89 c2                	mov    edx,eax
c000a07c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a080:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a083:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c000a089:	83 ec 0c             	sub    esp,0xc
c000a08c:	6a 01                	push   0x1
c000a08e:	e8 72 f4 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c000a093:	83 c4 10             	add    esp,0x10
c000a096:	89 c2                	mov    edx,eax
c000a098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a09f:	83 ec 0c             	sub    esp,0xc
c000a0a2:	6a 03                	push   0x3
c000a0a4:	6a 01                	push   0x1
c000a0a6:	52                   	push   edx
c000a0a7:	50                   	push   eax
c000a0a8:	53                   	push   ebx
c000a0a9:	e8 e6 fd ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ae:	83 c4 20             	add    esp,0x20
c000a0b1:	89 c2                	mov    edx,eax
c000a0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0ba:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ca:	7f 1c                	jg     c000a0e8 <VAS::VAS(bool)+0xa0>
c000a0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0d7:	c1 e2 02             	shl    edx,0x2
c000a0da:	01 d0                	add    eax,edx
c000a0dc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0e2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a0e6:	eb da                	jmp    c000a0c2 <VAS::VAS(bool)+0x7a>
c000a0e8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0f0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a0f8:	7f 7a                	jg     c000a174 <VAS::VAS(bool)+0x12c>
c000a0fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fe:	2d 00 02 00 00       	sub    eax,0x200
c000a103:	c1 e0 0c             	shl    eax,0xc
c000a106:	83 c8 03             	or     eax,0x3
c000a109:	89 c2                	mov    edx,eax
c000a10b:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a110:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a116:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a11c:	83 e0 10             	and    eax,0x10
c000a11f:	84 c0                	test   al,al
c000a121:	74 07                	je     c000a12a <VAS::VAS(bool)+0xe2>
c000a123:	b8 00 01 00 00       	mov    eax,0x100
c000a128:	eb 05                	jmp    c000a12f <VAS::VAS(bool)+0xe7>
c000a12a:	b8 00 00 00 00       	mov    eax,0x0
c000a12f:	09 d0                	or     eax,edx
c000a131:	89 c1                	mov    ecx,eax
c000a133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a137:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a13a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a13e:	c1 e2 02             	shl    edx,0x2
c000a141:	01 d0                	add    eax,edx
c000a143:	89 ca                	mov    edx,ecx
c000a145:	89 10                	mov    DWORD PTR [eax],edx
c000a147:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a14b:	2d 40 03 00 00       	sub    eax,0x340
c000a150:	83 f8 7f             	cmp    eax,0x7f
c000a153:	77 16                	ja     c000a16b <VAS::VAS(bool)+0x123>
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a160:	c1 e2 02             	shl    edx,0x2
c000a163:	01 d0                	add    eax,edx
c000a165:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a16b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a16f:	e9 7c ff ff ff       	jmp    c000a0f0 <VAS::VAS(bool)+0xa8>
c000a174:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a179:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a17f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a185:	83 e0 10             	and    eax,0x10
c000a188:	84 c0                	test   al,al
c000a18a:	74 07                	je     c000a193 <VAS::VAS(bool)+0x14b>
c000a18c:	b8 03 41 00 00       	mov    eax,0x4103
c000a191:	eb 05                	jmp    c000a198 <VAS::VAS(bool)+0x150>
c000a193:	b8 03 40 00 00       	mov    eax,0x4003
c000a198:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a19c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a19f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1a5:	89 02                	mov    DWORD PTR [edx],eax
c000a1a7:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a1ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a1b8:	83 ec 08             	sub    esp,0x8
c000a1bb:	50                   	push   eax
c000a1bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a1c0:	e8 b1 fc ff ff       	call   c0009e76 <VAS::setCPUSpecific(unsigned long)>
c000a1c5:	83 c4 10             	add    esp,0x10
c000a1c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1cc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1cf:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a1d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1da:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e0:	83 e0 10             	and    eax,0x10
c000a1e3:	84 c0                	test   al,al
c000a1e5:	74 07                	je     c000a1ee <VAS::VAS(bool)+0x1a6>
c000a1e7:	b8 00 01 00 00       	mov    eax,0x100
c000a1ec:	eb 05                	jmp    c000a1f3 <VAS::VAS(bool)+0x1ab>
c000a1ee:	b8 00 00 00 00       	mov    eax,0x0
c000a1f3:	09 c2                	or     edx,eax
c000a1f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1fc:	05 fc 0f 00 00       	add    eax,0xffc
c000a201:	83 ca 03             	or     edx,0x3
c000a204:	89 10                	mov    DWORD PTR [eax],edx
c000a206:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a20b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a211:	83 ec 0c             	sub    esp,0xc
c000a214:	50                   	push   eax
c000a215:	e8 12 1c 00 00       	call   c000be2c <Device::getName()>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	83 ec 08             	sub    esp,0x8
c000a220:	68 1f de 01 c0       	push   0xc001de1f
c000a225:	50                   	push   eax
c000a226:	e8 d5 64 ff ff       	call   c0000700 <strcmp>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	85 c0                	test   eax,eax
c000a230:	0f 94 c0             	sete   al
c000a233:	84 c0                	test   al,al
c000a235:	0f 84 87 00 00 00    	je     c000a2c2 <VAS::VAS(bool)+0x27a>
c000a23b:	fa                   	cli    
c000a23c:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a241:	40                   	inc    eax
c000a242:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000a247:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a24c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a252:	05 7c 09 00 00       	add    eax,0x97c
c000a257:	83 ec 0c             	sub    esp,0xc
c000a25a:	50                   	push   eax
c000a25b:	e8 66 d2 ff ff       	call   c00074c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a260:	83 c4 10             	add    esp,0x10
c000a263:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a268:	89 c3                	mov    ebx,eax
c000a26a:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000a26f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a275:	05 7c 09 00 00       	add    eax,0x97c
c000a27a:	83 ec 0c             	sub    esp,0xc
c000a27d:	50                   	push   eax
c000a27e:	e8 43 d2 ff ff       	call   c00074c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	83 ec 08             	sub    esp,0x8
c000a289:	50                   	push   eax
c000a28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28e:	e8 83 f5 ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c000a293:	83 c4 10             	add    esp,0x10
c000a296:	8b 00                	mov    eax,DWORD PTR [eax]
c000a298:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29d:	6a 11                	push   0x11
c000a29f:	53                   	push   ebx
c000a2a0:	50                   	push   eax
c000a2a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a5:	e8 f0 f8 ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a2b2:	48                   	dec    eax
c000a2b3:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000a2b8:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a2bd:	85 c0                	test   eax,eax
c000a2bf:	75 01                	jne    c000a2c2 <VAS::VAS(bool)+0x27a>
c000a2c1:	fb                   	sti    
c000a2c2:	90                   	nop
c000a2c3:	83 c4 28             	add    esp,0x28
c000a2c6:	5b                   	pop    ebx
c000a2c7:	c3                   	ret    

c000a2c8 <VAS::evict(unsigned long)>:
c000a2c8:	55                   	push   ebp
c000a2c9:	57                   	push   edi
c000a2ca:	56                   	push   esi
c000a2cb:	53                   	push   ebx
c000a2cc:	83 ec 1c             	sub    esp,0x1c
c000a2cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2db:	e8 66 f3 ff ff       	call   c0009646 <Virt::allocateSwapfilePage()>
c000a2e0:	8b 0d ac fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001faac
c000a2e6:	89 c7                	mov    edi,eax
c000a2e8:	85 c9                	test   ecx,ecx
c000a2ea:	7e 3e                	jle    c000a32a <VAS::evict(unsigned long)+0x62>
c000a2ec:	89 ee                	mov    esi,ebp
c000a2ee:	31 db                	xor    ebx,ebx
c000a2f0:	83 ec 0c             	sub    esp,0xc
c000a2f3:	57                   	push   edi
c000a2f4:	e8 3b f3 ff ff       	call   c0009634 <Virt::swapIDToSector(unsigned long)>
c000a2f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2fc:	01 d8                	add    eax,ebx
c000a2fe:	6a 01                	push   0x1
c000a300:	31 d2                	xor    edx,edx
c000a302:	43                   	inc    ebx
c000a303:	52                   	push   edx
c000a304:	81 c6 00 02 00 00    	add    esi,0x200
c000a30a:	50                   	push   eax
c000a30b:	0f be 05 b8 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fab8
c000a312:	8b 14 85 9c 2f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd064]
c000a319:	52                   	push   edx
c000a31a:	e8 8d 2b 00 00       	call   c000ceac <LogicalDisk::write(unsigned long long, int, void*)>
c000a31f:	83 c4 20             	add    esp,0x20
c000a322:	39 1d ac fa 01 c0    	cmp    DWORD PTR ds:0xc001faac,ebx
c000a328:	7f c6                	jg     c000a2f0 <VAS::evict(unsigned long)+0x28>
c000a32a:	83 ec 08             	sub    esp,0x8
c000a32d:	c1 e7 0b             	shl    edi,0xb
c000a330:	55                   	push   ebp
c000a331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a335:	50                   	push   eax
c000a336:	e8 db f4 ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c000a33b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a33d:	89 d1                	mov    ecx,edx
c000a33f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a345:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a34b:	09 cf                	or     edi,ecx
c000a34d:	89 38                	mov    DWORD PTR [eax],edi
c000a34f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a352:	ff 05 28 0c 02 c0    	inc    DWORD PTR ds:0xc0020c28
c000a358:	e8 d7 d9 ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c000a35d:	0f 20 d8             	mov    eax,cr3
c000a360:	0f 22 d8             	mov    cr3,eax
c000a363:	a1 24 0c 02 c0       	mov    eax,ds:0xc0020c24
c000a368:	c7 44 24 40 2d de 01 c0 	mov    DWORD PTR [esp+0x40],0xc001de2d
c000a370:	8d 50 01             	lea    edx,[eax+0x1]
c000a373:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a377:	89 15 24 0c 02 c0    	mov    DWORD PTR ds:0xc0020c24,edx
c000a37d:	83 c4 2c             	add    esp,0x2c
c000a380:	5b                   	pop    ebx
c000a381:	5e                   	pop    esi
c000a382:	5f                   	pop    edi
c000a383:	5d                   	pop    ebp
c000a384:	e9 cf 03 00 00       	jmp    c000a758 <Dbg::kprintf(char const*, ...)>
c000a389:	90                   	nop

c000a38a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a38a:	55                   	push   ebp
c000a38b:	57                   	push   edi
c000a38c:	56                   	push   esi
c000a38d:	53                   	push   ebx
c000a38e:	83 ec 14             	sub    esp,0x14
c000a391:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a395:	53                   	push   ebx
c000a396:	68 3e de 01 c0       	push   0xc001de3e
c000a39b:	e8 b8 03 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	74 21                	je     c000a3cc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a3ab:	83 ec 08             	sub    esp,0x8
c000a3ae:	53                   	push   ebx
c000a3af:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a3b3:	57                   	push   edi
c000a3b4:	e8 5d f4 ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c000a3b9:	83 c4 10             	add    esp,0x10
c000a3bc:	89 c6                	mov    esi,eax
c000a3be:	85 c0                	test   eax,eax
c000a3c0:	74 0a                	je     c000a3cc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a3c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a3c4:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a3ca:	74 0a                	je     c000a3d6 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a3cc:	31 c0                	xor    eax,eax
c000a3ce:	83 c4 0c             	add    esp,0xc
c000a3d1:	5b                   	pop    ebx
c000a3d2:	5e                   	pop    esi
c000a3d3:	5f                   	pop    edi
c000a3d4:	5d                   	pop    ebp
c000a3d5:	c3                   	ret    
c000a3d6:	e8 bb d9 ff ff       	call   c0007d96 <Phys::allocatePage()>
c000a3db:	c1 ed 0b             	shr    ebp,0xb
c000a3de:	8b 16                	mov    edx,DWORD PTR [esi]
c000a3e0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a3e6:	09 c2                	or     edx,eax
c000a3e8:	81 ca 01 08 00 00    	or     edx,0x801
c000a3ee:	89 16                	mov    DWORD PTR [esi],edx
c000a3f0:	8b 35 ac fa 01 c0    	mov    esi,DWORD PTR ds:0xc001faac
c000a3f6:	85 f6                	test   esi,esi
c000a3f8:	7e 3e                	jle    c000a438 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a3fa:	89 df                	mov    edi,ebx
c000a3fc:	31 f6                	xor    esi,esi
c000a3fe:	83 ec 0c             	sub    esp,0xc
c000a401:	55                   	push   ebp
c000a402:	e8 2d f2 ff ff       	call   c0009634 <Virt::swapIDToSector(unsigned long)>
c000a407:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a40a:	01 f0                	add    eax,esi
c000a40c:	6a 01                	push   0x1
c000a40e:	31 d2                	xor    edx,edx
c000a410:	46                   	inc    esi
c000a411:	52                   	push   edx
c000a412:	81 c7 00 02 00 00    	add    edi,0x200
c000a418:	50                   	push   eax
c000a419:	0f be 05 b8 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fab8
c000a420:	8b 0c 85 9c 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd064]
c000a427:	51                   	push   ecx
c000a428:	e8 13 2a 00 00       	call   c000ce40 <LogicalDisk::read(unsigned long long, int, void*)>
c000a42d:	83 c4 20             	add    esp,0x20
c000a430:	39 35 ac fa 01 c0    	cmp    DWORD PTR ds:0xc001faac,esi
c000a436:	7f c6                	jg     c000a3fe <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a438:	a1 28 0c 02 c0       	mov    eax,ds:0xc0020c28
c000a43d:	48                   	dec    eax
c000a43e:	52                   	push   edx
c000a43f:	a3 28 0c 02 c0       	mov    ds:0xc0020c28,eax
c000a444:	50                   	push   eax
c000a445:	53                   	push   ebx
c000a446:	68 51 de 01 c0       	push   0xc001de51
c000a44b:	e8 08 03 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a450:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a453:	e8 be f1 ff ff       	call   c0009616 <Virt::freeSwapfilePage(unsigned long)>
c000a458:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	48                   	dec    eax
c000a461:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000a466:	85 c0                	test   eax,eax
c000a468:	75 01                	jne    c000a46b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a46a:	fb                   	sti    
c000a46b:	0f 20 d8             	mov    eax,cr3
c000a46e:	0f 22 d8             	mov    cr3,eax
c000a471:	b0 01                	mov    al,0x1
c000a473:	e9 56 ff ff ff       	jmp    c000a3ce <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a478 <VAS::scanForEviction()>:
c000a478:	57                   	push   edi
c000a479:	31 ff                	xor    edi,edi
c000a47b:	56                   	push   esi
c000a47c:	53                   	push   ebx
c000a47d:	83 ec 10             	sub    esp,0x10
c000a480:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a484:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a487:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a48d:	75 0e                	jne    c000a49d <VAS::scanForEviction()+0x25>
c000a48f:	89 da                	mov    edx,ebx
c000a491:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a494:	c1 ea 16             	shr    edx,0x16
c000a497:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a49b:	74 4e                	je     c000a4eb <VAS::scanForEviction()+0x73>
c000a49d:	53                   	push   ebx
c000a49e:	56                   	push   esi
c000a49f:	e8 72 f3 ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c000a4a4:	5a                   	pop    edx
c000a4a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4a7:	59                   	pop    ecx
c000a4a8:	89 d1                	mov    ecx,edx
c000a4aa:	81 e1 01 08 00 00    	and    ecx,0x801
c000a4b0:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a4b6:	74 3e                	je     c000a4f6 <VAS::scanForEviction()+0x7e>
c000a4b8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a4be:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a4c4:	76 2b                	jbe    c000a4f1 <VAS::scanForEviction()+0x79>
c000a4c6:	47                   	inc    edi
c000a4c7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a4ce:	83 ff 03             	cmp    edi,0x3
c000a4d1:	74 32                	je     c000a505 <VAS::scanForEviction()+0x8d>
c000a4d3:	31 db                	xor    ebx,ebx
c000a4d5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a4db:	75 c0                	jne    c000a49d <VAS::scanForEviction()+0x25>
c000a4dd:	89 da                	mov    edx,ebx
c000a4df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a4e2:	c1 ea 16             	shr    edx,0x16
c000a4e5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a4e9:	75 b2                	jne    c000a49d <VAS::scanForEviction()+0x25>
c000a4eb:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a4f1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a4f4:	eb 91                	jmp    c000a487 <VAS::scanForEviction()+0xf>
c000a4f6:	f6 c2 20             	test   dl,0x20
c000a4f9:	74 13                	je     c000a50e <VAS::scanForEviction()+0x96>
c000a4fb:	83 e2 df             	and    edx,0xffffffdf
c000a4fe:	89 10                	mov    DWORD PTR [eax],edx
c000a500:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a503:	eb b3                	jmp    c000a4b8 <VAS::scanForEviction()+0x40>
c000a505:	83 c4 10             	add    esp,0x10
c000a508:	31 c0                	xor    eax,eax
c000a50a:	5b                   	pop    ebx
c000a50b:	5e                   	pop    esi
c000a50c:	5f                   	pop    edi
c000a50d:	c3                   	ret    
c000a50e:	83 ec 08             	sub    esp,0x8
c000a511:	89 d0                	mov    eax,edx
c000a513:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a51c:	53                   	push   ebx
c000a51d:	68 66 de 01 c0       	push   0xc001de66
c000a522:	e8 31 02 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a527:	58                   	pop    eax
c000a528:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a52b:	5a                   	pop    edx
c000a52c:	51                   	push   ecx
c000a52d:	56                   	push   esi
c000a52e:	e8 95 fd ff ff       	call   c000a2c8 <VAS::evict(unsigned long)>
c000a533:	5b                   	pop    ebx
c000a534:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a537:	5f                   	pop    edi
c000a538:	50                   	push   eax
c000a539:	68 7a de 01 c0       	push   0xc001de7a
c000a53e:	e8 15 02 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a543:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a54a:	83 c4 10             	add    esp,0x10
c000a54d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	5b                   	pop    ebx
c000a555:	5e                   	pop    esi
c000a556:	5f                   	pop    edi
c000a557:	c3                   	ret    

c000a558 <mapVASFirstTime>:
c000a558:	55                   	push   ebp
c000a559:	57                   	push   edi
c000a55a:	56                   	push   esi
c000a55b:	53                   	push   ebx
c000a55c:	83 ec 0c             	sub    esp,0xc
c000a55f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a564:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a567:	4a                   	dec    edx
c000a568:	0f 84 8c 00 00 00    	je     c000a5fa <mapVASFirstTime+0xa2>
c000a56e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a571:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a574:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a579:	c1 e5 15             	shl    ebp,0x15
c000a57c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a581:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a587:	29 eb                	sub    ebx,ebp
c000a589:	29 ef                	sub    edi,ebp
c000a58b:	e8 06 d8 ff ff       	call   c0007d96 <Phys::allocatePage()>
c000a590:	83 ec 0c             	sub    esp,0xc
c000a593:	68 03 04 00 00       	push   0x403
c000a598:	6a 01                	push   0x1
c000a59a:	53                   	push   ebx
c000a59b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a5a1:	50                   	push   eax
c000a5a2:	56                   	push   esi
c000a5a3:	e8 ec f8 ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a5a8:	83 c4 20             	add    esp,0x20
c000a5ab:	39 fb                	cmp    ebx,edi
c000a5ad:	75 dc                	jne    c000a58b <mapVASFirstTime+0x33>
c000a5af:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a5b4:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a5b9:	29 eb                	sub    ebx,ebp
c000a5bb:	29 ef                	sub    edi,ebp
c000a5bd:	e8 d4 d7 ff ff       	call   c0007d96 <Phys::allocatePage()>
c000a5c2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a5c6:	19 d2                	sbb    edx,edx
c000a5c8:	83 ec 0c             	sub    esp,0xc
c000a5cb:	83 e2 04             	and    edx,0x4
c000a5ce:	81 c2 03 04 00 00    	add    edx,0x403
c000a5d4:	52                   	push   edx
c000a5d5:	6a 01                	push   0x1
c000a5d7:	53                   	push   ebx
c000a5d8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a5de:	50                   	push   eax
c000a5df:	56                   	push   esi
c000a5e0:	e8 af f8 ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	39 df                	cmp    edi,ebx
c000a5ea:	75 d1                	jne    c000a5bd <mapVASFirstTime+0x65>
c000a5ec:	0f 20 d8             	mov    eax,cr3
c000a5ef:	0f 22 d8             	mov    cr3,eax
c000a5f2:	83 c4 0c             	add    esp,0xc
c000a5f5:	5b                   	pop    ebx
c000a5f6:	5e                   	pop    esi
c000a5f7:	5f                   	pop    edi
c000a5f8:	5d                   	pop    ebp
c000a5f9:	c3                   	ret    
c000a5fa:	83 ec 0c             	sub    esp,0xc
c000a5fd:	68 8d de 01 c0       	push   0xc001de8d
c000a602:	e8 51 01 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a607:	83 c4 10             	add    esp,0x10
c000a60a:	83 c4 0c             	add    esp,0xc
c000a60d:	5b                   	pop    ebx
c000a60e:	5e                   	pop    esi
c000a60f:	5f                   	pop    edi
c000a610:	5d                   	pop    ebp
c000a611:	c3                   	ret    

c000a612 <__cxa_atexit>:
c000a612:	31 c0                	xor    eax,eax
c000a614:	c3                   	ret    

c000a615 <__cxa_finalize>:
c000a615:	c3                   	ret    

c000a616 <__stack_chk_fail>:
c000a616:	55                   	push   ebp
c000a617:	89 e5                	mov    ebp,esp
c000a619:	83 ec 10             	sub    esp,0x10
c000a61c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a61f:	68 a6 de 01 c0       	push   0xc001dea6
c000a624:	e8 2f 01 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a629:	58                   	pop    eax
c000a62a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a62d:	5a                   	pop    edx
c000a62e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a631:	68 a6 de 01 c0       	push   0xc001dea6
c000a636:	e8 1d 01 00 00       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000a63b:	c7 04 24 ae de 01 c0 	mov    DWORD PTR [esp],0xc001deae
c000a642:	e8 60 5c 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	c9                   	leave  
c000a64b:	c3                   	ret    

c000a64c <__cxa_pure_virtual>:
c000a64c:	83 ec 18             	sub    esp,0x18
c000a64f:	68 c6 de 01 c0       	push   0xc001dec6
c000a654:	e8 4e 5c 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000a659:	83 c4 1c             	add    esp,0x1c
c000a65c:	c3                   	ret    

c000a65d <operator new[](unsigned long)>:
c000a65d:	e9 67 d3 ff ff       	jmp    c00079c9 <malloc>

c000a662 <operator delete(void*, unsigned long)>:
c000a662:	e9 82 d3 ff ff       	jmp    c00079e9 <rfree>

c000a667 <operator delete[](void*)>:
c000a667:	e9 7d d3 ff ff       	jmp    c00079e9 <rfree>

c000a66c <operator delete[](void*, unsigned long)>:
c000a66c:	e9 78 d3 ff ff       	jmp    c00079e9 <rfree>

c000a671 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a671:	55                   	push   ebp
c000a672:	b9 04 00 00 00       	mov    ecx,0x4
c000a677:	57                   	push   edi
c000a678:	56                   	push   esi
c000a679:	be db da 01 c0       	mov    esi,0xc001dadb
c000a67e:	53                   	push   ebx
c000a67f:	83 ec 20             	sub    esp,0x20
c000a682:	a1 da da 01 c0       	mov    eax,ds:0xc001dada
c000a687:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a68b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a68f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a693:	a1 e7 da 01 c0       	mov    eax,ds:0xc001dae7
c000a698:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a69c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6a0:	fc                   	cld    
c000a6a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a6a3:	89 ee                	mov    esi,ebp
c000a6a5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a6a9:	eb 02                	jmp    c000a6ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a6ab:	89 c6                	mov    esi,eax
c000a6ad:	31 d2                	xor    edx,edx
c000a6af:	41                   	inc    ecx
c000a6b0:	89 f0                	mov    eax,esi
c000a6b2:	f7 f3                	div    ebx
c000a6b4:	39 de                	cmp    esi,ebx
c000a6b6:	73 f3                	jae    c000a6ab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a6b8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a6bb:	eb 02                	jmp    c000a6bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a6bd:	89 c5                	mov    ebp,eax
c000a6bf:	31 d2                	xor    edx,edx
c000a6c1:	49                   	dec    ecx
c000a6c2:	89 e8                	mov    eax,ebp
c000a6c4:	f7 f3                	div    ebx
c000a6c6:	39 dd                	cmp    ebp,ebx
c000a6c8:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a6cc:	88 11                	mov    BYTE PTR [ecx],dl
c000a6ce:	73 ed                	jae    c000a6bd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a6d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a6d4:	83 c4 20             	add    esp,0x20
c000a6d7:	5b                   	pop    ebx
c000a6d8:	5e                   	pop    esi
c000a6d9:	5f                   	pop    edi
c000a6da:	5d                   	pop    ebp
c000a6db:	c3                   	ret    

c000a6dc <Dbg::logc(char)>:
c000a6dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e0:	f6 05 60 0b 02 c0 10 	test   BYTE PTR ds:0xc0020b60,0x10
c000a6e7:	75 12                	jne    c000a6fb <Dbg::logc(char)+0x1f>
c000a6e9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a6ee:	ec                   	in     al,dx
c000a6ef:	a8 20                	test   al,0x20
c000a6f1:	74 fb                	je     c000a6ee <Dbg::logc(char)+0x12>
c000a6f3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a6f8:	88 c8                	mov    al,cl
c000a6fa:	ee                   	out    dx,al
c000a6fb:	c3                   	ret    

c000a6fc <Dbg::logs(char*)>:
c000a6fc:	53                   	push   ebx
c000a6fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a701:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a704:	84 c0                	test   al,al
c000a706:	74 0f                	je     c000a717 <Dbg::logs(char*)+0x1b>
c000a708:	50                   	push   eax
c000a709:	43                   	inc    ebx
c000a70a:	e8 cd ff ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a70f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a712:	5a                   	pop    edx
c000a713:	84 c0                	test   al,al
c000a715:	75 f1                	jne    c000a708 <Dbg::logs(char*)+0xc>
c000a717:	5b                   	pop    ebx
c000a718:	c3                   	ret    

c000a719 <Dbg::logWriteInt(unsigned int)>:
c000a719:	83 ec 10             	sub    esp,0x10
c000a71c:	6a 0a                	push   0xa
c000a71e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a722:	50                   	push   eax
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	50                   	push   eax
c000a728:	e8 44 ff ff ff       	call   c000a671 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a72d:	50                   	push   eax
c000a72e:	e8 c9 ff ff ff       	call   c000a6fc <Dbg::logs(char*)>
c000a733:	83 c4 20             	add    esp,0x20
c000a736:	c3                   	ret    

c000a737 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a737:	83 ec 10             	sub    esp,0x10
c000a73a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a73e:	50                   	push   eax
c000a73f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a743:	50                   	push   eax
c000a744:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a748:	52                   	push   edx
c000a749:	e8 23 ff ff ff       	call   c000a671 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a74e:	50                   	push   eax
c000a74f:	e8 a8 ff ff ff       	call   c000a6fc <Dbg::logs(char*)>
c000a754:	83 c4 20             	add    esp,0x20
c000a757:	c3                   	ret    

c000a758 <Dbg::kprintf(char const*, ...)>:
c000a758:	55                   	push   ebp
c000a759:	57                   	push   edi
c000a75a:	56                   	push   esi
c000a75b:	53                   	push   ebx
c000a75c:	83 ec 0c             	sub    esp,0xc
c000a75f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a763:	f6 05 60 0b 02 c0 10 	test   BYTE PTR ds:0xc0020b60,0x10
c000a76a:	74 08                	je     c000a774 <Dbg::kprintf(char const*, ...)+0x1c>
c000a76c:	83 c4 0c             	add    esp,0xc
c000a76f:	5b                   	pop    ebx
c000a770:	5e                   	pop    esi
c000a771:	5f                   	pop    edi
c000a772:	5d                   	pop    ebp
c000a773:	c3                   	ret    
c000a774:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a778:	31 ff                	xor    edi,edi
c000a77a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a77e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a781:	84 c0                	test   al,al
c000a783:	74 e7                	je     c000a76c <Dbg::kprintf(char const*, ...)+0x14>
c000a785:	8d 77 01             	lea    esi,[edi+0x1]
c000a788:	3c 25                	cmp    al,0x25
c000a78a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a78d:	75 47                	jne    c000a7d6 <Dbg::kprintf(char const*, ...)+0x7e>
c000a78f:	83 c7 02             	add    edi,0x2
c000a792:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a795:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a798:	83 e8 25             	sub    eax,0x25
c000a79b:	3c 53                	cmp    al,0x53
c000a79d:	0f 87 d2 00 00 00    	ja     c000a875 <Dbg::kprintf(char const*, ...)+0x11d>
c000a7a3:	25 ff 00 00 00       	and    eax,0xff
c000a7a8:	ff 24 85 dc de 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2124]
c000a7af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7b3:	89 c8                	mov    eax,ecx
c000a7b5:	83 c1 04             	add    ecx,0x4
c000a7b8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a7bc:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a7be:	55                   	push   ebp
c000a7bf:	e8 55 ff ff ff       	call   c000a719 <Dbg::logWriteInt(unsigned int)>
c000a7c4:	58                   	pop    eax
c000a7c5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a7c8:	84 c0                	test   al,al
c000a7ca:	74 a0                	je     c000a76c <Dbg::kprintf(char const*, ...)+0x14>
c000a7cc:	8d 77 01             	lea    esi,[edi+0x1]
c000a7cf:	3c 25                	cmp    al,0x25
c000a7d1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a7d4:	74 b9                	je     c000a78f <Dbg::kprintf(char const*, ...)+0x37>
c000a7d6:	50                   	push   eax
c000a7d7:	89 f7                	mov    edi,esi
c000a7d9:	e8 fe fe ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a7de:	89 ee                	mov    esi,ebp
c000a7e0:	58                   	pop    eax
c000a7e1:	eb e2                	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7e7:	89 c8                	mov    eax,ecx
c000a7e9:	83 c1 04             	add    ecx,0x4
c000a7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a7ee:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a7f2:	50                   	push   eax
c000a7f3:	e8 04 ff ff ff       	call   c000a6fc <Dbg::logs(char*)>
c000a7f8:	58                   	pop    eax
c000a7f9:	eb ca                	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a7ff:	89 d0                	mov    eax,edx
c000a801:	83 c2 04             	add    edx,0x4
c000a804:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a808:	8b 00                	mov    eax,DWORD PTR [eax]
c000a80a:	50                   	push   eax
c000a80b:	e8 09 ff ff ff       	call   c000a719 <Dbg::logWriteInt(unsigned int)>
c000a810:	58                   	pop    eax
c000a811:	eb b2                	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a813:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a817:	89 d0                	mov    eax,edx
c000a819:	83 c2 04             	add    edx,0x4
c000a81c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a81f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a823:	50                   	push   eax
c000a824:	e8 b3 fe ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a829:	58                   	pop    eax
c000a82a:	eb 99                	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a82c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a830:	89 c8                	mov    eax,ecx
c000a832:	83 c1 04             	add    ecx,0x4
c000a835:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a839:	6a 10                	push   0x10
c000a83b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a83d:	51                   	push   ecx
c000a83e:	e8 f4 fe ff ff       	call   c000a737 <Dbg::logWriteIntBase(unsigned int, int)>
c000a843:	5d                   	pop    ebp
c000a844:	58                   	pop    eax
c000a845:	e9 7b ff ff ff       	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a84a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a84e:	89 d0                	mov    eax,edx
c000a850:	83 c2 08             	add    edx,0x8
c000a853:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a857:	6a 10                	push   0x10
c000a859:	8b 00                	mov    eax,DWORD PTR [eax]
c000a85b:	50                   	push   eax
c000a85c:	e8 d6 fe ff ff       	call   c000a737 <Dbg::logWriteIntBase(unsigned int, int)>
c000a861:	58                   	pop    eax
c000a862:	5a                   	pop    edx
c000a863:	e9 5d ff ff ff       	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a868:	6a 25                	push   0x25
c000a86a:	e8 6d fe ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a86f:	5a                   	pop    edx
c000a870:	e9 50 ff ff ff       	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a875:	6a 25                	push   0x25
c000a877:	e8 60 fe ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a87c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a880:	50                   	push   eax
c000a881:	e8 56 fe ff ff       	call   c000a6dc <Dbg::logc(char)>
c000a886:	5a                   	pop    edx
c000a887:	59                   	pop    ecx
c000a888:	e9 38 ff ff ff       	jmp    c000a7c5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a88d:	90                   	nop

c000a88e <File::read(unsigned long long, void*, int*)>:
c000a88e:	53                   	push   ebx
c000a88f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a893:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a897:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a89e:	3c 19                	cmp    al,0x19
c000a8a0:	77 35                	ja     c000a8d7 <File::read(unsigned long long, void*, int*)+0x49>
c000a8a2:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000a8a9:	85 c0                	test   eax,eax
c000a8ab:	74 2a                	je     c000a8d7 <File::read(unsigned long long, void*, int*)+0x49>
c000a8ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a8b3:	85 c0                	test   eax,eax
c000a8b5:	74 20                	je     c000a8d7 <File::read(unsigned long long, void*, int*)+0x49>
c000a8b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a8bb:	74 21                	je     c000a8de <File::read(unsigned long long, void*, int*)+0x50>
c000a8bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a8bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8c3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a8c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8d1:	5b                   	pop    ebx
c000a8d2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a8d5:	ff e0                	jmp    eax
c000a8d7:	b8 0b 00 00 00       	mov    eax,0xb
c000a8dc:	eb 05                	jmp    c000a8e3 <File::read(unsigned long long, void*, int*)+0x55>
c000a8de:	b8 05 00 00 00       	mov    eax,0x5
c000a8e3:	5b                   	pop    ebx
c000a8e4:	c3                   	ret    
c000a8e5:	90                   	nop

c000a8e6 <File::write(unsigned long long, void*, int*)>:
c000a8e6:	53                   	push   ebx
c000a8e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a8ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a8f6:	3c 19                	cmp    al,0x19
c000a8f8:	77 35                	ja     c000a92f <File::write(unsigned long long, void*, int*)+0x49>
c000a8fa:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000a901:	85 c0                	test   eax,eax
c000a903:	74 2a                	je     c000a92f <File::write(unsigned long long, void*, int*)+0x49>
c000a905:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a90b:	85 c0                	test   eax,eax
c000a90d:	74 20                	je     c000a92f <File::write(unsigned long long, void*, int*)+0x49>
c000a90f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a913:	74 21                	je     c000a936 <File::write(unsigned long long, void*, int*)+0x50>
c000a915:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a917:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a91b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a921:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a925:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a929:	5b                   	pop    ebx
c000a92a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a92d:	ff e0                	jmp    eax
c000a92f:	b8 0b 00 00 00       	mov    eax,0xb
c000a934:	eb 05                	jmp    c000a93b <File::write(unsigned long long, void*, int*)+0x55>
c000a936:	b8 05 00 00 00       	mov    eax,0x5
c000a93b:	5b                   	pop    ebx
c000a93c:	c3                   	ret    
c000a93d:	90                   	nop

c000a93e <Directory::read(unsigned long long, void*, int*)>:
c000a93e:	53                   	push   ebx
c000a93f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a943:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a947:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a94e:	3c 19                	cmp    al,0x19
c000a950:	77 35                	ja     c000a987 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a952:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000a959:	85 c0                	test   eax,eax
c000a95b:	74 2a                	je     c000a987 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a95d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a963:	85 c0                	test   eax,eax
c000a965:	74 20                	je     c000a987 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a967:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a96b:	74 21                	je     c000a98e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a96d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a96f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a973:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a97d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a981:	5b                   	pop    ebx
c000a982:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a985:	ff e0                	jmp    eax
c000a987:	b8 0b 00 00 00       	mov    eax,0xb
c000a98c:	eb 05                	jmp    c000a993 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a98e:	b8 05 00 00 00       	mov    eax,0x5
c000a993:	5b                   	pop    ebx
c000a994:	c3                   	ret    
c000a995:	90                   	nop

c000a996 <Directory::write(unsigned long long, void*, int*)>:
c000a996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a9a1:	b8 0b 00 00 00       	mov    eax,0xb
c000a9a6:	80 fa 19             	cmp    dl,0x19
c000a9a9:	77 18                	ja     c000a9c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a9ab:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000a9b2:	85 d2                	test   edx,edx
c000a9b4:	74 0d                	je     c000a9c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a9b6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a9bd:	19 c0                	sbb    eax,eax
c000a9bf:	83 e0 0a             	and    eax,0xa
c000a9c2:	40                   	inc    eax
c000a9c3:	c3                   	ret    

c000a9c4 <File::isAtty()>:
c000a9c4:	31 c0                	xor    eax,eax
c000a9c6:	c3                   	ret    
c000a9c7:	90                   	nop

c000a9c8 <Directory::isAtty()>:
c000a9c8:	31 c0                	xor    eax,eax
c000a9ca:	c3                   	ret    
c000a9cb:	90                   	nop

c000a9cc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a9cc:	b8 0a 00 00 00       	mov    eax,0xa
c000a9d1:	c3                   	ret    

c000a9d2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a9d2:	b8 0a 00 00 00       	mov    eax,0xa
c000a9d7:	c3                   	ret    

c000a9d8 <Filesystem::allocateSwapfile(char const*, int)>:
c000a9d8:	31 c0                	xor    eax,eax
c000a9da:	31 d2                	xor    edx,edx
c000a9dc:	c3                   	ret    
c000a9dd:	90                   	nop

c000a9de <File::~File()>:
c000a9de:	83 ec 0c             	sub    esp,0xc
c000a9e1:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c000a9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9ea:	89 10                	mov    DWORD PTR [eax],edx
c000a9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f0:	83 ec 0c             	sub    esp,0xc
c000a9f3:	50                   	push   eax
c000a9f4:	e8 ab e8 ff ff       	call   c00092a4 <UnixFile::~UnixFile()>
c000a9f9:	83 c4 10             	add    esp,0x10
c000a9fc:	90                   	nop
c000a9fd:	83 c4 0c             	add    esp,0xc
c000aa00:	c3                   	ret    
c000aa01:	90                   	nop

c000aa02 <File::~File()>:
c000aa02:	83 ec 0c             	sub    esp,0xc
c000aa05:	83 ec 0c             	sub    esp,0xc
c000aa08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa0c:	e8 cd ff ff ff       	call   c000a9de <File::~File()>
c000aa11:	83 c4 10             	add    esp,0x10
c000aa14:	83 ec 08             	sub    esp,0x8
c000aa17:	68 14 01 00 00       	push   0x114
c000aa1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa20:	e8 3d fc ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000aa25:	83 c4 10             	add    esp,0x10
c000aa28:	83 c4 0c             	add    esp,0xc
c000aa2b:	c3                   	ret    

c000aa2c <Directory::~Directory()>:
c000aa2c:	83 ec 0c             	sub    esp,0xc
c000aa2f:	ba b8 e0 01 c0       	mov    edx,0xc001e0b8
c000aa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa38:	89 10                	mov    DWORD PTR [eax],edx
c000aa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3e:	83 ec 0c             	sub    esp,0xc
c000aa41:	50                   	push   eax
c000aa42:	e8 5d e8 ff ff       	call   c00092a4 <UnixFile::~UnixFile()>
c000aa47:	83 c4 10             	add    esp,0x10
c000aa4a:	90                   	nop
c000aa4b:	83 c4 0c             	add    esp,0xc
c000aa4e:	c3                   	ret    
c000aa4f:	90                   	nop

c000aa50 <Directory::~Directory()>:
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	83 ec 0c             	sub    esp,0xc
c000aa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa5a:	e8 cd ff ff ff       	call   c000aa2c <Directory::~Directory()>
c000aa5f:	83 c4 10             	add    esp,0x10
c000aa62:	83 ec 08             	sub    esp,0x8
c000aa65:	68 14 01 00 00       	push   0x114
c000aa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6e:	e8 ef fb ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	83 c4 0c             	add    esp,0xc
c000aa79:	c3                   	ret    

c000aa7a <Filesystem::Filesystem()>:
c000aa7a:	ba 34 e0 01 c0       	mov    edx,0xc001e034
c000aa7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa83:	89 10                	mov    DWORD PTR [eax],edx
c000aa85:	8b 15 34 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c34
c000aa8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000aa92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa96:	a3 34 0c 02 c0       	mov    ds:0xc0020c34,eax
c000aa9b:	90                   	nop
c000aa9c:	c3                   	ret    
c000aa9d:	90                   	nop

c000aa9e <Filesystem::~Filesystem()>:
c000aa9e:	ba 34 e0 01 c0       	mov    edx,0xc001e034
c000aaa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa7:	89 10                	mov    DWORD PTR [eax],edx
c000aaa9:	90                   	nop
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <Filesystem::~Filesystem()>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aab3:	e8 e6 ff ff ff       	call   c000aa9e <Filesystem::~Filesystem()>
c000aab8:	83 c4 04             	add    esp,0x4
c000aabb:	83 ec 08             	sub    esp,0x8
c000aabe:	6a 08                	push   0x8
c000aac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aac4:	e8 99 fb ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000aac9:	83 c4 10             	add    esp,0x10
c000aacc:	83 c4 0c             	add    esp,0xc
c000aacf:	c3                   	ret    

c000aad0 <Fs::getcwd(Process*, char*, int)>:
c000aad0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aad4:	31 c0                	xor    eax,eax
c000aad6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000aad9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000aadd:	7d 15                	jge    c000aaf4 <Fs::getcwd(Process*, char*, int)+0x24>
c000aadf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aae3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000aaea:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000aaed:	84 c9                	test   cl,cl
c000aaef:	74 06                	je     c000aaf7 <Fs::getcwd(Process*, char*, int)+0x27>
c000aaf1:	40                   	inc    eax
c000aaf2:	eb e2                	jmp    c000aad6 <Fs::getcwd(Process*, char*, int)+0x6>
c000aaf4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aaf7:	31 c0                	xor    eax,eax
c000aaf9:	c3                   	ret    

c000aafa <Fs::initVFS()>:
c000aafa:	83 ec 18             	sub    esp,0x18
c000aafd:	6a 08                	push   0x8
c000aaff:	e8 c5 ce ff ff       	call   c00079c9 <malloc>
c000ab04:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab07:	e8 a4 c2 00 00       	call   c0016db0 <FAT::FAT()>
c000ab0c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ab13:	e8 b1 ce ff ff       	call   c00079c9 <malloc>
c000ab18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1b:	e8 1c d6 00 00       	call   c001813c <ISO9660::ISO9660()>
c000ab20:	83 c4 1c             	add    esp,0x1c
c000ab23:	c3                   	ret    

c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ab24:	55                   	push   ebp
c000ab25:	57                   	push   edi
c000ab26:	56                   	push   esi
c000ab27:	53                   	push   ebx
c000ab28:	81 ec 10 04 00 00    	sub    esp,0x410
c000ab2e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ab35:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ab3c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ab43:	68 00 04 00 00       	push   0x400
c000ab48:	6a 00                	push   0x0
c000ab4a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ab4e:	56                   	push   esi
c000ab4f:	e8 9c 59 ff ff       	call   c00004f0 <memset>
c000ab54:	83 c4 10             	add    esp,0x10
c000ab57:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ab5b:	75 0b                	jne    c000ab68 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ab5d:	50                   	push   eax
c000ab5e:	50                   	push   eax
c000ab5f:	57                   	push   edi
c000ab60:	56                   	push   esi
c000ab61:	e8 ba 5a ff ff       	call   c0000620 <strcpy>
c000ab66:	eb 41                	jmp    c000aba9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ab68:	8a 07                	mov    al,BYTE PTR [edi]
c000ab6a:	3c 5c                	cmp    al,0x5c
c000ab6c:	74 04                	je     c000ab72 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ab6e:	3c 2f                	cmp    al,0x2f
c000ab70:	75 18                	jne    c000ab8a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ab72:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ab75:	3c 60                	cmp    al,0x60
c000ab77:	7e 03                	jle    c000ab7c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ab79:	83 e8 20             	sub    eax,0x20
c000ab7c:	88 04 24             	mov    BYTE PTR [esp],al
c000ab7f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ab86:	50                   	push   eax
c000ab87:	50                   	push   eax
c000ab88:	eb 18                	jmp    c000aba2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ab8a:	50                   	push   eax
c000ab8b:	50                   	push   eax
c000ab8c:	55                   	push   ebp
c000ab8d:	56                   	push   esi
c000ab8e:	e8 8d 5a ff ff       	call   c0000620 <strcpy>
c000ab93:	5a                   	pop    edx
c000ab94:	59                   	pop    ecx
c000ab95:	68 df ec 01 c0       	push   0xc001ecdf
c000ab9a:	56                   	push   esi
c000ab9b:	e8 40 5c ff ff       	call   c00007e0 <strcat>
c000aba0:	5d                   	pop    ebp
c000aba1:	58                   	pop    eax
c000aba2:	57                   	push   edi
c000aba3:	56                   	push   esi
c000aba4:	e8 37 5c ff ff       	call   c00007e0 <strcat>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	8a 04 24             	mov    al,BYTE PTR [esp]
c000abaf:	3c 60                	cmp    al,0x60
c000abb1:	7e 03                	jle    c000abb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000abb3:	83 e8 20             	sub    eax,0x20
c000abb6:	88 04 24             	mov    BYTE PTR [esp],al
c000abb9:	88 03                	mov    BYTE PTR [ebx],al
c000abbb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000abc2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000abc8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000abcc:	bf 03 00 00 00       	mov    edi,0x3
c000abd1:	b8 03 00 00 00       	mov    eax,0x3
c000abd6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000abd9:	84 d2                	test   dl,dl
c000abdb:	0f 84 91 00 00 00    	je     c000ac72 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000abe1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000abe4:	80 fa 5c             	cmp    dl,0x5c
c000abe7:	74 05                	je     c000abee <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000abe9:	80 fa 2f             	cmp    dl,0x2f
c000abec:	75 12                	jne    c000ac00 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000abee:	89 c5                	mov    ebp,eax
c000abf0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abf5:	74 09                	je     c000ac00 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000abf7:	40                   	inc    eax
c000abf8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000abfc:	89 cf                	mov    edi,ecx
c000abfe:	eb d6                	jmp    c000abd6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000ac00:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ac05:	75 5b                	jne    c000ac62 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ac07:	80 fa 2e             	cmp    dl,0x2e
c000ac0a:	75 56                	jne    c000ac62 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ac0c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ac10:	74 19                	je     c000ac2b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ac12:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ac17:	74 53                	je     c000ac6c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ac19:	89 f9                	mov    ecx,edi
c000ac1b:	41                   	inc    ecx
c000ac1c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ac1f:	80 fa 2f             	cmp    dl,0x2f
c000ac22:	74 f7                	je     c000ac1b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ac24:	80 fa 5c             	cmp    dl,0x5c
c000ac27:	74 f2                	je     c000ac1b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ac29:	eb d1                	jmp    c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac2b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ac30:	74 3a                	je     c000ac6c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ac32:	83 f8 03             	cmp    eax,0x3
c000ac35:	74 c5                	je     c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac37:	41                   	inc    ecx
c000ac38:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ac3b:	80 fa 2f             	cmp    dl,0x2f
c000ac3e:	74 f7                	je     c000ac37 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ac40:	80 fa 5c             	cmp    dl,0x5c
c000ac43:	74 f2                	je     c000ac37 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ac45:	48                   	dec    eax
c000ac46:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ac4a:	75 06                	jne    c000ac52 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ac4c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac50:	eb f3                	jmp    c000ac45 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ac52:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ac56:	74 07                	je     c000ac5f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ac58:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac5c:	48                   	dec    eax
c000ac5d:	eb f3                	jmp    c000ac52 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ac5f:	40                   	inc    eax
c000ac60:	eb 9a                	jmp    c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac62:	80 fa 2f             	cmp    dl,0x2f
c000ac65:	74 95                	je     c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac67:	80 fa 5c             	cmp    dl,0x5c
c000ac6a:	74 90                	je     c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac6c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ac6f:	40                   	inc    eax
c000ac70:	eb 8a                	jmp    c000abfc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac72:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac76:	83 ec 0c             	sub    esp,0xc
c000ac79:	53                   	push   ebx
c000ac7a:	e8 e1 58 ff ff       	call   c0000560 <strlen>
c000ac7f:	83 c4 10             	add    esp,0x10
c000ac82:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ac87:	75 26                	jne    c000acaf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ac89:	83 ec 0c             	sub    esp,0xc
c000ac8c:	53                   	push   ebx
c000ac8d:	e8 ce 58 ff ff       	call   c0000560 <strlen>
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ac9a:	74 26                	je     c000acc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	53                   	push   ebx
c000aca0:	e8 bb 58 ff ff       	call   c0000560 <strlen>
c000aca5:	83 c4 10             	add    esp,0x10
c000aca8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000acad:	eb c7                	jmp    c000ac76 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000acaf:	83 ec 0c             	sub    esp,0xc
c000acb2:	53                   	push   ebx
c000acb3:	e8 a8 58 ff ff       	call   c0000560 <strlen>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000acc0:	74 c7                	je     c000ac89 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000acc2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000acc8:	5b                   	pop    ebx
c000acc9:	5e                   	pop    esi
c000acca:	5f                   	pop    edi
c000accb:	5d                   	pop    ebp
c000accc:	c3                   	ret    
c000accd:	90                   	nop

c000acce <File::File(char const*, Process*)>:
c000acce:	83 ec 0c             	sub    esp,0xc
c000acd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd5:	83 ec 08             	sub    esp,0x8
c000acd8:	6a 00                	push   0x0
c000acda:	50                   	push   eax
c000acdb:	e8 e2 e3 ff ff       	call   c00090c2 <UnixFile::UnixFile(int)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	ba 9c e0 01 c0       	mov    edx,0xc001e09c
c000ace8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acec:	89 10                	mov    DWORD PTR [eax],edx
c000acee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000acf2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000acf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acfc:	83 c0 0d             	add    eax,0xd
c000acff:	83 ec 04             	sub    esp,0x4
c000ad02:	52                   	push   edx
c000ad03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad07:	50                   	push   eax
c000ad08:	e8 17 fe ff ff       	call   c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ad0d:	83 c4 10             	add    esp,0x10
c000ad10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad14:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ad17:	8d 50 bf             	lea    edx,[eax-0x41]
c000ad1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ad24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad28:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ad2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad30:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad36:	25 ff 00 00 00       	and    eax,0xff
c000ad3b:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000ad42:	85 c0                	test   eax,eax
c000ad44:	74 42                	je     c000ad88 <File::File(char const*, Process*)+0xba>
c000ad46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad50:	25 ff 00 00 00       	and    eax,0xff
c000ad55:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000ad5c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad62:	85 c0                	test   eax,eax
c000ad64:	75 22                	jne    c000ad88 <File::File(char const*, Process*)+0xba>
c000ad66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad6a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad70:	25 ff 00 00 00       	and    eax,0xff
c000ad75:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	50                   	push   eax
c000ad80:	e8 f9 1f 00 00       	call   c000cd7e <LogicalDisk::mount()>
c000ad85:	83 c4 10             	add    esp,0x10
c000ad88:	90                   	nop
c000ad89:	83 c4 0c             	add    esp,0xc
c000ad8c:	c3                   	ret    
c000ad8d:	90                   	nop

c000ad8e <File::open(FileOpenMode)>:
c000ad8e:	53                   	push   ebx
c000ad8f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad94:	83 ec 08             	sub    esp,0x8
c000ad97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad9b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ada2:	80 fa 19             	cmp    dl,0x19
c000ada5:	77 40                	ja     c000ade7 <File::open(FileOpenMode)+0x59>
c000ada7:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000adae:	85 d2                	test   edx,edx
c000adb0:	74 35                	je     c000ade7 <File::open(FileOpenMode)+0x59>
c000adb2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000adb8:	85 d2                	test   edx,edx
c000adba:	74 2b                	je     c000ade7 <File::open(FileOpenMode)+0x59>
c000adbc:	b8 06 00 00 00       	mov    eax,0x6
c000adc1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000adc5:	75 20                	jne    c000ade7 <File::open(FileOpenMode)+0x59>
c000adc7:	8b 02                	mov    eax,DWORD PTR [edx]
c000adc9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000adcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add3:	51                   	push   ecx
c000add4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000add7:	51                   	push   ecx
c000add8:	52                   	push   edx
c000add9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000addc:	83 c4 10             	add    esp,0x10
c000addf:	85 c0                	test   eax,eax
c000ade1:	75 04                	jne    c000ade7 <File::open(FileOpenMode)+0x59>
c000ade3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ade7:	83 c4 08             	add    esp,0x8
c000adea:	5b                   	pop    ebx
c000adeb:	c3                   	ret    

c000adec <File::close()>:
c000adec:	53                   	push   ebx
c000aded:	b8 0b 00 00 00       	mov    eax,0xb
c000adf2:	83 ec 08             	sub    esp,0x8
c000adf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adf9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ae00:	80 fa 19             	cmp    dl,0x19
c000ae03:	77 41                	ja     c000ae46 <File::close()+0x5a>
c000ae05:	8b 1c 95 a0 30 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcf60]
c000ae0c:	85 db                	test   ebx,ebx
c000ae0e:	74 36                	je     c000ae46 <File::close()+0x5a>
c000ae10:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ae17:	74 2d                	je     c000ae46 <File::close()+0x5a>
c000ae19:	b8 05 00 00 00       	mov    eax,0x5
c000ae1e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ae22:	74 22                	je     c000ae46 <File::close()+0x5a>
c000ae24:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ae28:	8b 04 95 a0 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf60]
c000ae2f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ae35:	53                   	push   ebx
c000ae36:	53                   	push   ebx
c000ae37:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae39:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ae3f:	50                   	push   eax
c000ae40:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ae43:	83 c4 10             	add    esp,0x10
c000ae46:	83 c4 08             	add    esp,0x8
c000ae49:	5b                   	pop    ebx
c000ae4a:	c3                   	ret    
c000ae4b:	90                   	nop

c000ae4c <File::seek(unsigned long long)>:
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae53:	51                   	push   ecx
c000ae54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ae5c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ae63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae67:	80 fa 19             	cmp    dl,0x19
c000ae6a:	77 31                	ja     c000ae9d <File::seek(unsigned long long)+0x51>
c000ae6c:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000ae73:	85 d2                	test   edx,edx
c000ae75:	74 26                	je     c000ae9d <File::seek(unsigned long long)+0x51>
c000ae77:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ae7d:	85 d2                	test   edx,edx
c000ae7f:	74 1c                	je     c000ae9d <File::seek(unsigned long long)+0x51>
c000ae81:	b8 05 00 00 00       	mov    eax,0x5
c000ae86:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ae8a:	74 11                	je     c000ae9d <File::seek(unsigned long long)+0x51>
c000ae8c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ae8e:	53                   	push   ebx
c000ae8f:	51                   	push   ecx
c000ae90:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ae96:	52                   	push   edx
c000ae97:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae9a:	83 c4 10             	add    esp,0x10
c000ae9d:	5a                   	pop    edx
c000ae9e:	5b                   	pop    ebx
c000ae9f:	5e                   	pop    esi
c000aea0:	c3                   	ret    
c000aea1:	90                   	nop

c000aea2 <File::tell(unsigned long long*)>:
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	b8 0b 00 00 00       	mov    eax,0xb
c000aeaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aeb5:	80 fa 19             	cmp    dl,0x19
c000aeb8:	77 34                	ja     c000aeee <File::tell(unsigned long long*)+0x4c>
c000aeba:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000aec1:	85 d2                	test   edx,edx
c000aec3:	74 29                	je     c000aeee <File::tell(unsigned long long*)+0x4c>
c000aec5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aecb:	85 d2                	test   edx,edx
c000aecd:	74 1f                	je     c000aeee <File::tell(unsigned long long*)+0x4c>
c000aecf:	b8 05 00 00 00       	mov    eax,0x5
c000aed4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aed8:	74 14                	je     c000aeee <File::tell(unsigned long long*)+0x4c>
c000aeda:	50                   	push   eax
c000aedb:	8b 02                	mov    eax,DWORD PTR [edx]
c000aedd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aee1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000aee7:	52                   	push   edx
c000aee8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	83 c4 0c             	add    esp,0xc
c000aef1:	c3                   	ret    

c000aef2 <File::rewind()>:
c000aef2:	83 ec 10             	sub    esp,0x10
c000aef5:	6a 00                	push   0x0
c000aef7:	6a 00                	push   0x0
c000aef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aefd:	e8 4a ff ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c000af02:	83 c4 1c             	add    esp,0x1c
c000af05:	c3                   	ret    

c000af06 <File::unlink()>:
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	b8 0b 00 00 00       	mov    eax,0xb
c000af0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af19:	80 f9 19             	cmp    cl,0x19
c000af1c:	77 2f                	ja     c000af4d <File::unlink()+0x47>
c000af1e:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000af25:	85 c9                	test   ecx,ecx
c000af27:	74 24                	je     c000af4d <File::unlink()+0x47>
c000af29:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af2f:	85 c9                	test   ecx,ecx
c000af31:	74 1a                	je     c000af4d <File::unlink()+0x47>
c000af33:	b8 06 00 00 00       	mov    eax,0x6
c000af38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af3c:	75 0f                	jne    c000af4d <File::unlink()+0x47>
c000af3e:	83 c2 0d             	add    edx,0xd
c000af41:	50                   	push   eax
c000af42:	50                   	push   eax
c000af43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af45:	52                   	push   edx
c000af46:	51                   	push   ecx
c000af47:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	83 c4 0c             	add    esp,0xc
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <File::rename(char const*)>:
c000af52:	83 ec 0c             	sub    esp,0xc
c000af55:	b8 0b 00 00 00       	mov    eax,0xb
c000af5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af65:	80 f9 19             	cmp    cl,0x19
c000af68:	77 32                	ja     c000af9c <File::rename(char const*)+0x4a>
c000af6a:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000af71:	85 c9                	test   ecx,ecx
c000af73:	74 27                	je     c000af9c <File::rename(char const*)+0x4a>
c000af75:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af7b:	85 c9                	test   ecx,ecx
c000af7d:	74 1d                	je     c000af9c <File::rename(char const*)+0x4a>
c000af7f:	b8 06 00 00 00       	mov    eax,0x6
c000af84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af88:	75 12                	jne    c000af9c <File::rename(char const*)+0x4a>
c000af8a:	83 c2 0d             	add    edx,0xd
c000af8d:	50                   	push   eax
c000af8e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af94:	52                   	push   edx
c000af95:	51                   	push   ecx
c000af96:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	83 c4 0c             	add    esp,0xc
c000af9f:	c3                   	ret    

c000afa0 <File::chfatattr(unsigned char, unsigned char)>:
c000afa0:	57                   	push   edi
c000afa1:	b8 0b 00 00 00       	mov    eax,0xb
c000afa6:	56                   	push   esi
c000afa7:	53                   	push   ebx
c000afa8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000afac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afb0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000afb7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000afbb:	80 f9 19             	cmp    cl,0x19
c000afbe:	77 37                	ja     c000aff7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afc0:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000afc7:	85 c9                	test   ecx,ecx
c000afc9:	74 2c                	je     c000aff7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afcb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000afd1:	85 c9                	test   ecx,ecx
c000afd3:	74 22                	je     c000aff7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afd5:	b8 06 00 00 00       	mov    eax,0x6
c000afda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000afde:	75 17                	jne    c000aff7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afe0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000afe2:	89 f0                	mov    eax,esi
c000afe4:	83 c2 0d             	add    edx,0xd
c000afe7:	0f b6 f0             	movzx  esi,al
c000afea:	0f b6 db             	movzx  ebx,bl
c000afed:	56                   	push   esi
c000afee:	53                   	push   ebx
c000afef:	52                   	push   edx
c000aff0:	51                   	push   ecx
c000aff1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aff4:	83 c4 10             	add    esp,0x10
c000aff7:	5b                   	pop    ebx
c000aff8:	5e                   	pop    esi
c000aff9:	5f                   	pop    edi
c000affa:	c3                   	ret    
c000affb:	90                   	nop

c000affc <File::exists()>:
c000affc:	83 ec 0c             	sub    esp,0xc
c000afff:	31 c0                	xor    eax,eax
c000b001:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b005:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b00c:	80 f9 19             	cmp    cl,0x19
c000b00f:	77 24                	ja     c000b035 <File::exists()+0x39>
c000b011:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b018:	85 c9                	test   ecx,ecx
c000b01a:	74 19                	je     c000b035 <File::exists()+0x39>
c000b01c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b022:	85 c9                	test   ecx,ecx
c000b024:	74 0f                	je     c000b035 <File::exists()+0x39>
c000b026:	83 c2 0d             	add    edx,0xd
c000b029:	50                   	push   eax
c000b02a:	50                   	push   eax
c000b02b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b02d:	52                   	push   edx
c000b02e:	51                   	push   ecx
c000b02f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	90                   	nop

c000b03a <File::stat(unsigned long long*, bool*)>:
c000b03a:	56                   	push   esi
c000b03b:	53                   	push   ebx
c000b03c:	50                   	push   eax
c000b03d:	b8 0b 00 00 00       	mov    eax,0xb
c000b042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b046:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b04a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b051:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b055:	80 f9 19             	cmp    cl,0x19
c000b058:	77 3d                	ja     c000b097 <File::stat(unsigned long long*, bool*)+0x5d>
c000b05a:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b061:	85 c9                	test   ecx,ecx
c000b063:	74 32                	je     c000b097 <File::stat(unsigned long long*, bool*)+0x5d>
c000b065:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b06b:	85 c9                	test   ecx,ecx
c000b06d:	74 28                	je     c000b097 <File::stat(unsigned long long*, bool*)+0x5d>
c000b06f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b071:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b075:	74 13                	je     c000b08a <File::stat(unsigned long long*, bool*)+0x50>
c000b077:	83 ec 04             	sub    esp,0x4
c000b07a:	56                   	push   esi
c000b07b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b081:	51                   	push   ecx
c000b082:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b085:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b088:	eb 0a                	jmp    c000b094 <File::stat(unsigned long long*, bool*)+0x5a>
c000b08a:	53                   	push   ebx
c000b08b:	83 c2 0d             	add    edx,0xd
c000b08e:	56                   	push   esi
c000b08f:	52                   	push   edx
c000b090:	51                   	push   ecx
c000b091:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b094:	83 c4 10             	add    esp,0x10
c000b097:	5a                   	pop    edx
c000b098:	5b                   	pop    ebx
c000b099:	5e                   	pop    esi
c000b09a:	c3                   	ret    

c000b09b <Fs::setcwd(Process*, char*)>:
c000b09b:	55                   	push   ebp
c000b09c:	57                   	push   edi
c000b09d:	56                   	push   esi
c000b09e:	53                   	push   ebx
c000b09f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b0a5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b0ac:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b0b2:	57                   	push   edi
c000b0b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b0ba:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b0be:	56                   	push   esi
c000b0bf:	e8 60 fa ff ff       	call   c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0c4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b0c7:	e8 94 54 ff ff       	call   c0000560 <strlen>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	83 f8 02             	cmp    eax,0x2
c000b0d2:	77 15                	ja     c000b0e9 <Fs::setcwd(Process*, char*)+0x4e>
c000b0d4:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b0d9:	83 eb 41             	sub    ebx,0x41
c000b0dc:	8b 04 9d a0 30 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcf60]
c000b0e3:	85 c0                	test   eax,eax
c000b0e5:	75 1c                	jne    c000b103 <Fs::setcwd(Process*, char*)+0x68>
c000b0e7:	eb 2f                	jmp    c000b118 <Fs::setcwd(Process*, char*)+0x7d>
c000b0e9:	83 ec 0c             	sub    esp,0xc
c000b0ec:	56                   	push   esi
c000b0ed:	e8 6e 54 ff ff       	call   c0000560 <strlen>
c000b0f2:	83 c4 10             	add    esp,0x10
c000b0f5:	83 f8 03             	cmp    eax,0x3
c000b0f8:	75 57                	jne    c000b151 <Fs::setcwd(Process*, char*)+0xb6>
c000b0fa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b0ff:	75 50                	jne    c000b151 <Fs::setcwd(Process*, char*)+0xb6>
c000b101:	eb d1                	jmp    c000b0d4 <Fs::setcwd(Process*, char*)+0x39>
c000b103:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b10a:	75 0c                	jne    c000b118 <Fs::setcwd(Process*, char*)+0x7d>
c000b10c:	83 ec 0c             	sub    esp,0xc
c000b10f:	50                   	push   eax
c000b110:	e8 69 1c 00 00       	call   c000cd7e <LogicalDisk::mount()>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	b8 03 00 00 00       	mov    eax,0x3
c000b11d:	83 fb 19             	cmp    ebx,0x19
c000b120:	0f 87 c6 00 00 00    	ja     c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b126:	8b 14 9d a0 30 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdcf60]
c000b12d:	b8 05 00 00 00       	mov    eax,0x5
c000b132:	85 d2                	test   edx,edx
c000b134:	0f 84 b2 00 00 00    	je     c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b13a:	b8 06 00 00 00       	mov    eax,0x6
c000b13f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b146:	0f 85 92 00 00 00    	jne    c000b1de <Fs::setcwd(Process*, char*)+0x143>
c000b14c:	e9 9b 00 00 00       	jmp    c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b151:	83 ec 0c             	sub    esp,0xc
c000b154:	68 14 01 00 00       	push   0x114
c000b159:	e8 6b c8 ff ff       	call   c00079c9 <malloc>
c000b15e:	83 c4 0c             	add    esp,0xc
c000b161:	89 c3                	mov    ebx,eax
c000b163:	55                   	push   ebp
c000b164:	56                   	push   esi
c000b165:	50                   	push   eax
c000b166:	e8 63 fb ff ff       	call   c000acce <File::File(char const*, Process*)>
c000b16b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b170:	83 c4 0c             	add    esp,0xc
c000b173:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b177:	50                   	push   eax
c000b178:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b17c:	50                   	push   eax
c000b17d:	53                   	push   ebx
c000b17e:	e8 b7 fe ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c000b183:	83 c4 10             	add    esp,0x10
c000b186:	83 f8 02             	cmp    eax,0x2
c000b189:	74 04                	je     c000b18f <Fs::setcwd(Process*, char*)+0xf4>
c000b18b:	85 c0                	test   eax,eax
c000b18d:	74 1c                	je     c000b1ab <Fs::setcwd(Process*, char*)+0x110>
c000b18f:	b8 01 00 00 00       	mov    eax,0x1
c000b194:	85 db                	test   ebx,ebx
c000b196:	74 54                	je     c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b19d:	53                   	push   ebx
c000b19e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	b8 01 00 00 00       	mov    eax,0x1
c000b1a9:	eb 41                	jmp    c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b1ab:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b1b0:	75 1c                	jne    c000b1ce <Fs::setcwd(Process*, char*)+0x133>
c000b1b2:	b8 02 00 00 00       	mov    eax,0x2
c000b1b7:	85 db                	test   ebx,ebx
c000b1b9:	74 31                	je     c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c0:	53                   	push   ebx
c000b1c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1c4:	83 c4 10             	add    esp,0x10
c000b1c7:	b8 02 00 00 00       	mov    eax,0x2
c000b1cc:	eb 1e                	jmp    c000b1ec <Fs::setcwd(Process*, char*)+0x151>
c000b1ce:	85 db                	test   ebx,ebx
c000b1d0:	74 0c                	je     c000b1de <Fs::setcwd(Process*, char*)+0x143>
c000b1d2:	83 ec 0c             	sub    esp,0xc
c000b1d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d7:	53                   	push   ebx
c000b1d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	50                   	push   eax
c000b1df:	50                   	push   eax
c000b1e0:	56                   	push   esi
c000b1e1:	57                   	push   edi
c000b1e2:	e8 39 54 ff ff       	call   c0000620 <strcpy>
c000b1e7:	83 c4 10             	add    esp,0x10
c000b1ea:	31 c0                	xor    eax,eax
c000b1ec:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b1f2:	5b                   	pop    ebx
c000b1f3:	5e                   	pop    esi
c000b1f4:	5f                   	pop    edi
c000b1f5:	5d                   	pop    ebp
c000b1f6:	c3                   	ret    
c000b1f7:	90                   	nop

c000b1f8 <Directory::Directory(char const*, Process*)>:
c000b1f8:	83 ec 0c             	sub    esp,0xc
c000b1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ff:	83 ec 08             	sub    esp,0x8
c000b202:	6a 00                	push   0x0
c000b204:	50                   	push   eax
c000b205:	e8 b8 de ff ff       	call   c00090c2 <UnixFile::UnixFile(int)>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	ba b8 e0 01 c0       	mov    edx,0xc001e0b8
c000b212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b216:	89 10                	mov    DWORD PTR [eax],edx
c000b218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b21c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b226:	83 c0 0d             	add    eax,0xd
c000b229:	83 ec 04             	sub    esp,0x4
c000b22c:	52                   	push   edx
c000b22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b231:	50                   	push   eax
c000b232:	e8 ed f8 ff ff       	call   c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b23e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b241:	8d 50 bf             	lea    edx,[eax-0x41]
c000b244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b248:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b252:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b25a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b260:	25 ff 00 00 00       	and    eax,0xff
c000b265:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000b26c:	85 c0                	test   eax,eax
c000b26e:	74 42                	je     c000b2b2 <Directory::Directory(char const*, Process*)+0xba>
c000b270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b274:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b27a:	25 ff 00 00 00       	and    eax,0xff
c000b27f:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000b286:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b28c:	85 c0                	test   eax,eax
c000b28e:	75 22                	jne    c000b2b2 <Directory::Directory(char const*, Process*)+0xba>
c000b290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b294:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b29a:	25 ff 00 00 00       	and    eax,0xff
c000b29f:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	50                   	push   eax
c000b2aa:	e8 cf 1a 00 00       	call   c000cd7e <LogicalDisk::mount()>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	90                   	nop
c000b2b3:	83 c4 0c             	add    esp,0xc
c000b2b6:	c3                   	ret    
c000b2b7:	90                   	nop

c000b2b8 <Directory::open()>:
c000b2b8:	53                   	push   ebx
c000b2b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2be:	83 ec 08             	sub    esp,0x8
c000b2c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b2c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b2cc:	80 fa 19             	cmp    dl,0x19
c000b2cf:	77 3d                	ja     c000b30e <Directory::open()+0x56>
c000b2d1:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000b2d8:	85 d2                	test   edx,edx
c000b2da:	74 32                	je     c000b30e <Directory::open()+0x56>
c000b2dc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b2e2:	85 d2                	test   edx,edx
c000b2e4:	74 28                	je     c000b30e <Directory::open()+0x56>
c000b2e6:	b8 06 00 00 00       	mov    eax,0x6
c000b2eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b2ef:	75 1d                	jne    c000b30e <Directory::open()+0x56>
c000b2f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b2f7:	50                   	push   eax
c000b2f8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2fa:	51                   	push   ecx
c000b2fb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b2fe:	51                   	push   ecx
c000b2ff:	52                   	push   edx
c000b300:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b303:	83 c4 10             	add    esp,0x10
c000b306:	85 c0                	test   eax,eax
c000b308:	75 04                	jne    c000b30e <Directory::open()+0x56>
c000b30a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b30e:	83 c4 08             	add    esp,0x8
c000b311:	5b                   	pop    ebx
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <Directory::close()>:
c000b314:	53                   	push   ebx
c000b315:	b8 0b 00 00 00       	mov    eax,0xb
c000b31a:	83 ec 08             	sub    esp,0x8
c000b31d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b321:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b328:	80 fa 19             	cmp    dl,0x19
c000b32b:	77 41                	ja     c000b36e <Directory::close()+0x5a>
c000b32d:	8b 1c 95 a0 30 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcf60]
c000b334:	85 db                	test   ebx,ebx
c000b336:	74 36                	je     c000b36e <Directory::close()+0x5a>
c000b338:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b33f:	74 2d                	je     c000b36e <Directory::close()+0x5a>
c000b341:	b8 05 00 00 00       	mov    eax,0x5
c000b346:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b34a:	74 22                	je     c000b36e <Directory::close()+0x5a>
c000b34c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b350:	8b 04 95 a0 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf60]
c000b357:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b35d:	53                   	push   ebx
c000b35e:	53                   	push   ebx
c000b35f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b361:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b367:	50                   	push   eax
c000b368:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b36b:	83 c4 10             	add    esp,0x10
c000b36e:	83 c4 08             	add    esp,0x8
c000b371:	5b                   	pop    ebx
c000b372:	c3                   	ret    
c000b373:	90                   	nop

c000b374 <Directory::unlink()>:
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	b8 0b 00 00 00       	mov    eax,0xb
c000b37c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b387:	80 f9 19             	cmp    cl,0x19
c000b38a:	77 2f                	ja     c000b3bb <Directory::unlink()+0x47>
c000b38c:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b393:	85 c9                	test   ecx,ecx
c000b395:	74 24                	je     c000b3bb <Directory::unlink()+0x47>
c000b397:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b39d:	85 c9                	test   ecx,ecx
c000b39f:	74 1a                	je     c000b3bb <Directory::unlink()+0x47>
c000b3a1:	b8 06 00 00 00       	mov    eax,0x6
c000b3a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3aa:	75 0f                	jne    c000b3bb <Directory::unlink()+0x47>
c000b3ac:	83 c2 0d             	add    edx,0xd
c000b3af:	50                   	push   eax
c000b3b0:	50                   	push   eax
c000b3b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3b3:	52                   	push   edx
c000b3b4:	51                   	push   ecx
c000b3b5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	83 c4 0c             	add    esp,0xc
c000b3be:	c3                   	ret    
c000b3bf:	90                   	nop

c000b3c0 <Directory::rename(char const*)>:
c000b3c0:	83 ec 0c             	sub    esp,0xc
c000b3c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b3c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3d3:	80 f9 19             	cmp    cl,0x19
c000b3d6:	77 32                	ja     c000b40a <Directory::rename(char const*)+0x4a>
c000b3d8:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b3df:	85 c9                	test   ecx,ecx
c000b3e1:	74 27                	je     c000b40a <Directory::rename(char const*)+0x4a>
c000b3e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3e9:	85 c9                	test   ecx,ecx
c000b3eb:	74 1d                	je     c000b40a <Directory::rename(char const*)+0x4a>
c000b3ed:	b8 06 00 00 00       	mov    eax,0x6
c000b3f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f6:	75 12                	jne    c000b40a <Directory::rename(char const*)+0x4a>
c000b3f8:	83 c2 0d             	add    edx,0xd
c000b3fb:	50                   	push   eax
c000b3fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b402:	52                   	push   edx
c000b403:	51                   	push   ecx
c000b404:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 c4 0c             	add    esp,0xc
c000b40d:	c3                   	ret    

c000b40e <Directory::exists()>:
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	31 c0                	xor    eax,eax
c000b413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b41e:	80 f9 19             	cmp    cl,0x19
c000b421:	77 24                	ja     c000b447 <Directory::exists()+0x39>
c000b423:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b42a:	85 c9                	test   ecx,ecx
c000b42c:	74 19                	je     c000b447 <Directory::exists()+0x39>
c000b42e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b434:	85 c9                	test   ecx,ecx
c000b436:	74 0f                	je     c000b447 <Directory::exists()+0x39>
c000b438:	83 c2 0d             	add    edx,0xd
c000b43b:	50                   	push   eax
c000b43c:	50                   	push   eax
c000b43d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b43f:	52                   	push   edx
c000b440:	51                   	push   ecx
c000b441:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	83 c4 0c             	add    esp,0xc
c000b44a:	c3                   	ret    
c000b44b:	90                   	nop

c000b44c <Directory::read(dirent*)>:
c000b44c:	83 ec 1c             	sub    esp,0x1c
c000b44f:	b8 0b 00 00 00       	mov    eax,0xb
c000b454:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b458:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b45f:	80 fa 19             	cmp    dl,0x19
c000b462:	77 30                	ja     c000b494 <Directory::read(dirent*)+0x48>
c000b464:	8b 14 95 a0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf60]
c000b46b:	85 d2                	test   edx,edx
c000b46d:	74 25                	je     c000b494 <Directory::read(dirent*)+0x48>
c000b46f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b476:	74 1c                	je     c000b494 <Directory::read(dirent*)+0x48>
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b47d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b481:	52                   	push   edx
c000b482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b486:	6a 00                	push   0x0
c000b488:	68 10 01 00 00       	push   0x110
c000b48d:	51                   	push   ecx
c000b48e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b491:	83 c4 20             	add    esp,0x20
c000b494:	83 c4 1c             	add    esp,0x1c
c000b497:	c3                   	ret    

c000b498 <Directory::create()>:
c000b498:	83 ec 0c             	sub    esp,0xc
c000b49b:	b8 0b 00 00 00       	mov    eax,0xb
c000b4a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4ab:	80 f9 19             	cmp    cl,0x19
c000b4ae:	77 2f                	ja     c000b4df <Directory::create()+0x47>
c000b4b0:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c000b4b7:	85 c9                	test   ecx,ecx
c000b4b9:	74 24                	je     c000b4df <Directory::create()+0x47>
c000b4bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4c1:	85 c9                	test   ecx,ecx
c000b4c3:	74 1a                	je     c000b4df <Directory::create()+0x47>
c000b4c5:	b8 06 00 00 00       	mov    eax,0x6
c000b4ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4ce:	75 0f                	jne    c000b4df <Directory::create()+0x47>
c000b4d0:	83 c2 0d             	add    edx,0xd
c000b4d3:	50                   	push   eax
c000b4d4:	50                   	push   eax
c000b4d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4d7:	52                   	push   edx
c000b4d8:	51                   	push   ecx
c000b4d9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	83 c4 0c             	add    esp,0xc
c000b4e2:	c3                   	ret    
c000b4e3:	90                   	nop

c000b4e4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b4e4:	b8 0a 00 00 00       	mov    eax,0xa
c000b4e9:	c3                   	ret    
c000b4ea:	66 90                	xchg   ax,ax

c000b4ec <Bus::Bus(char const*)>:
c000b4ec:	83 ec 0c             	sub    esp,0xc
c000b4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f3:	83 ec 08             	sub    esp,0x8
c000b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fa:	50                   	push   eax
c000b4fb:	e8 30 08 00 00       	call   c000bd30 <Device::Device(char const*)>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	ba d4 e0 01 c0       	mov    edx,0xc001e0d4
c000b508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50c:	89 10                	mov    DWORD PTR [eax],edx
c000b50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b512:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b51c:	90                   	nop
c000b51d:	83 c4 0c             	add    esp,0xc
c000b520:	c3                   	ret    
c000b521:	90                   	nop
c000b522:	66 90                	xchg   ax,ax

c000b524 <Bus::~Bus()>:
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	ba d4 e0 01 c0       	mov    edx,0xc001e0d4
c000b52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b530:	89 10                	mov    DWORD PTR [eax],edx
c000b532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b536:	83 ec 0c             	sub    esp,0xc
c000b539:	50                   	push   eax
c000b53a:	e8 5b 05 00 00       	call   c000ba9a <Device::~Device()>
c000b53f:	83 c4 10             	add    esp,0x10
c000b542:	90                   	nop
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	c3                   	ret    
c000b547:	90                   	nop

c000b548 <Bus::~Bus()>:
c000b548:	83 ec 0c             	sub    esp,0xc
c000b54b:	83 ec 0c             	sub    esp,0xc
c000b54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b552:	e8 cd ff ff ff       	call   c000b524 <Bus::~Bus()>
c000b557:	83 c4 10             	add    esp,0x10
c000b55a:	83 ec 08             	sub    esp,0x8
c000b55d:	68 58 01 00 00       	push   0x158
c000b562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b566:	e8 f7 f0 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 c4 0c             	add    esp,0xc
c000b571:	c3                   	ret    

c000b572 <beepThread(void*)>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000b57a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b57e:	48                   	dec    eax
c000b57f:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000b584:	75 01                	jne    c000b587 <beepThread(void*)+0x15>
c000b586:	fb                   	sti    
c000b587:	83 ec 0c             	sub    esp,0xc
c000b58a:	6b c2 0a             	imul   eax,edx,0xa
c000b58d:	50                   	push   eax
c000b58e:	e8 69 83 00 00       	call   c00138fc <milliTenthSleep(unsigned int)>
c000b593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b59a:	e8 a5 9f 00 00       	call   c0015544 <HalMakeBeep(int)>
c000b59f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b5a7:	83 c4 1c             	add    esp,0x1c
c000b5aa:	e9 49 82 00 00       	jmp    c00137f8 <blockTask(TaskState)>

c000b5af <Krnl::beep(int, int, bool)>:
c000b5af:	56                   	push   esi
c000b5b0:	53                   	push   ebx
c000b5b1:	83 ec 10             	sub    esp,0x10
c000b5b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b5b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	e8 7f 9f 00 00       	call   c0015544 <HalMakeBeep(int)>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	89 f0                	mov    eax,esi
c000b5ca:	84 c0                	test   al,al
c000b5cc:	74 1e                	je     c000b5ec <Krnl::beep(int, int, bool)+0x3d>
c000b5ce:	83 ec 0c             	sub    esp,0xc
c000b5d1:	6b db 0a             	imul   ebx,ebx,0xa
c000b5d4:	53                   	push   ebx
c000b5d5:	e8 22 83 00 00       	call   c00138fc <milliTenthSleep(unsigned int)>
c000b5da:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b5e2:	83 c4 14             	add    esp,0x14
c000b5e5:	5b                   	pop    ebx
c000b5e6:	5e                   	pop    esi
c000b5e7:	e9 58 9f 00 00       	jmp    c0015544 <HalMakeBeep(int)>
c000b5ec:	68 e6 00 00 00       	push   0xe6
c000b5f1:	53                   	push   ebx
c000b5f2:	68 72 b5 00 c0       	push   0xc000b572
c000b5f7:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c000b5fd:	e8 da 7d 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c000b602:	83 c4 14             	add    esp,0x14
c000b605:	5b                   	pop    ebx
c000b606:	5e                   	pop    esi
c000b607:	c3                   	ret    

c000b608 <User::loadClockSettings(int)>:
c000b608:	53                   	push   ebx
c000b609:	83 ec 14             	sub    esp,0x14
c000b60c:	68 14 01 00 00       	push   0x114
c000b611:	e8 b3 c3 ff ff       	call   c00079c9 <malloc>
c000b616:	83 c4 0c             	add    esp,0xc
c000b619:	89 c3                	mov    ebx,eax
c000b61b:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c000b621:	68 f8 e0 01 c0       	push   0xc001e0f8
c000b626:	50                   	push   eax
c000b627:	e8 a2 f6 ff ff       	call   c000acce <File::File(char const*, Process*)>
c000b62c:	58                   	pop    eax
c000b62d:	5a                   	pop    edx
c000b62e:	6a 01                	push   0x1
c000b630:	53                   	push   ebx
c000b631:	e8 58 f7 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c000b636:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b639:	e8 ae f7 ff ff       	call   c000adec <File::close()>
c000b63e:	83 c4 10             	add    esp,0x10
c000b641:	85 db                	test   ebx,ebx
c000b643:	74 0f                	je     c000b654 <User::loadClockSettings(int)+0x4c>
c000b645:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b647:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b64b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b64e:	83 c4 08             	add    esp,0x8
c000b651:	5b                   	pop    ebx
c000b652:	ff e0                	jmp    eax
c000b654:	83 c4 08             	add    esp,0x8
c000b657:	5b                   	pop    ebx
c000b658:	c3                   	ret    
c000b659:	90                   	nop

c000b65a <Clock::Clock(char const*)>:
c000b65a:	83 ec 0c             	sub    esp,0xc
c000b65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b661:	83 ec 08             	sub    esp,0x8
c000b664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b668:	50                   	push   eax
c000b669:	e8 c2 06 00 00       	call   c000bd30 <Device::Device(char const*)>
c000b66e:	83 c4 10             	add    esp,0x10
c000b671:	ba 20 e1 01 c0       	mov    edx,0xc001e120
c000b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b67a:	89 10                	mov    DWORD PTR [eax],edx
c000b67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b680:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b68a:	90                   	nop
c000b68b:	83 c4 0c             	add    esp,0xc
c000b68e:	c3                   	ret    
c000b68f:	90                   	nop

c000b690 <Clock::~Clock()>:
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	ba 20 e1 01 c0       	mov    edx,0xc001e120
c000b698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b69c:	89 10                	mov    DWORD PTR [eax],edx
c000b69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	50                   	push   eax
c000b6a6:	e8 ef 03 00 00       	call   c000ba9a <Device::~Device()>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	90                   	nop
c000b6af:	83 c4 0c             	add    esp,0xc
c000b6b2:	c3                   	ret    
c000b6b3:	90                   	nop

c000b6b4 <Clock::~Clock()>:
c000b6b4:	83 ec 0c             	sub    esp,0xc
c000b6b7:	83 ec 0c             	sub    esp,0xc
c000b6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6be:	e8 cd ff ff ff       	call   c000b690 <Clock::~Clock()>
c000b6c3:	83 c4 10             	add    esp,0x10
c000b6c6:	83 ec 08             	sub    esp,0x8
c000b6c9:	68 58 01 00 00       	push   0x158
c000b6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d2:	e8 8b ef ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 c4 0c             	add    esp,0xc
c000b6dd:	c3                   	ret    

c000b6de <Clock::timeInSecondsLocal()>:
c000b6de:	53                   	push   ebx
c000b6df:	83 ec 14             	sub    esp,0x14
c000b6e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6e8:	50                   	push   eax
c000b6e9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b6ec:	0f b6 0d 38 0c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020c38
c000b6f3:	03 0d 3c 0c 02 c0    	add    ecx,DWORD PTR ds:0xc0020c3c
c000b6f9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6ff:	89 cb                	mov    ebx,ecx
c000b701:	c1 fb 1f             	sar    ebx,0x1f
c000b704:	01 c8                	add    eax,ecx
c000b706:	11 da                	adc    edx,ebx
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	31 c9                	xor    ecx,ecx
c000b70d:	80 3d 39 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c39,0x0
c000b714:	74 05                	je     c000b71b <Clock::timeInSecondsLocal()+0x3d>
c000b716:	b9 08 07 00 00       	mov    ecx,0x708
c000b71b:	31 db                	xor    ebx,ebx
c000b71d:	01 c8                	add    eax,ecx
c000b71f:	11 da                	adc    edx,ebx
c000b721:	83 c4 08             	add    esp,0x8
c000b724:	5b                   	pop    ebx
c000b725:	c3                   	ret    

c000b726 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b726:	57                   	push   edi
c000b727:	56                   	push   esi
c000b728:	53                   	push   ebx
c000b729:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b72d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b731:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b733:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b737:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b73a:	0f b6 05 38 0c 02 c0 	movzx  eax,BYTE PTR ds:0xc0020c38
c000b741:	03 05 3c 0c 02 c0    	add    eax,DWORD PTR ds:0xc0020c3c
c000b747:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b74d:	99                   	cdq    
c000b74e:	29 c6                	sub    esi,eax
c000b750:	19 d7                	sbb    edi,edx
c000b752:	89 f0                	mov    eax,esi
c000b754:	89 fa                	mov    edx,edi
c000b756:	31 f6                	xor    esi,esi
c000b758:	80 3d 39 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c39,0x0
c000b75f:	74 05                	je     c000b766 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b761:	be 08 07 00 00       	mov    esi,0x708
c000b766:	31 ff                	xor    edi,edi
c000b768:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b76c:	29 f0                	sub    eax,esi
c000b76e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b772:	19 fa                	sbb    edx,edi
c000b774:	89 d8                	mov    eax,ebx
c000b776:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b77a:	5b                   	pop    ebx
c000b77b:	5e                   	pop    esi
c000b77c:	5f                   	pop    edi
c000b77d:	ff e0                	jmp    eax

c000b77f <datetimeToSeconds(datetime_t)>:
c000b77f:	55                   	push   ebp
c000b780:	57                   	push   edi
c000b781:	56                   	push   esi
c000b782:	53                   	push   ebx
c000b783:	83 ec 14             	sub    esp,0x14
c000b786:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b78a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b78e:	89 d3                	mov    ebx,edx
c000b790:	0f b6 c6             	movzx  eax,dh
c000b793:	c1 eb 10             	shr    ebx,0x10
c000b796:	48                   	dec    eax
c000b797:	66 81 eb 6c 07       	sub    bx,0x76c
c000b79c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b7a0:	0f b6 f5             	movzx  esi,ch
c000b7a3:	89 cf                	mov    edi,ecx
c000b7a5:	6b f6 3c             	imul   esi,esi,0x3c
c000b7a8:	c1 ef 10             	shr    edi,0x10
c000b7ab:	0f b6 c9             	movzx  ecx,cl
c000b7ae:	89 f8                	mov    eax,edi
c000b7b0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b7b6:	0f b6 f8             	movzx  edi,al
c000b7b9:	0f b6 d2             	movzx  edx,dl
c000b7bc:	01 fe                	add    esi,edi
c000b7be:	01 f1                	add    ecx,esi
c000b7c0:	0f b7 f3             	movzx  esi,bx
c000b7c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b7c7:	c1 f9 1f             	sar    ecx,0x1f
c000b7ca:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b7cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b7d3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b7d8:	8b 0c 8d 60 e1 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe1ea0]
c000b7df:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b7e3:	76 29                	jbe    c000b80e <datetimeToSeconds(datetime_t)+0x8f>
c000b7e5:	f6 c3 03             	test   bl,0x3
c000b7e8:	75 24                	jne    c000b80e <datetimeToSeconds(datetime_t)+0x8f>
c000b7ea:	31 d2                	xor    edx,edx
c000b7ec:	bf 64 00 00 00       	mov    edi,0x64
c000b7f1:	89 d8                	mov    eax,ebx
c000b7f3:	66 f7 f7             	div    di
c000b7f6:	66 85 d2             	test   dx,dx
c000b7f9:	75 12                	jne    c000b80d <datetimeToSeconds(datetime_t)+0x8e>
c000b7fb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b801:	bf 90 01 00 00       	mov    edi,0x190
c000b806:	99                   	cdq    
c000b807:	f7 ff                	idiv   edi
c000b809:	85 d2                	test   edx,edx
c000b80b:	75 01                	jne    c000b80e <datetimeToSeconds(datetime_t)+0x8f>
c000b80d:	41                   	inc    ecx
c000b80e:	66 83 fb 46          	cmp    bx,0x46
c000b812:	76 45                	jbe    c000b859 <datetimeToSeconds(datetime_t)+0xda>
c000b814:	bb 46 00 00 00       	mov    ebx,0x46
c000b819:	bf 64 00 00 00       	mov    edi,0x64
c000b81e:	bd 90 01 00 00       	mov    ebp,0x190
c000b823:	b8 6d 01 00 00       	mov    eax,0x16d
c000b828:	f6 c3 03             	test   bl,0x3
c000b82b:	75 23                	jne    c000b850 <datetimeToSeconds(datetime_t)+0xd1>
c000b82d:	89 d8                	mov    eax,ebx
c000b82f:	99                   	cdq    
c000b830:	f7 ff                	idiv   edi
c000b832:	b8 6e 01 00 00       	mov    eax,0x16e
c000b837:	85 d2                	test   edx,edx
c000b839:	75 15                	jne    c000b850 <datetimeToSeconds(datetime_t)+0xd1>
c000b83b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b841:	99                   	cdq    
c000b842:	f7 fd                	idiv   ebp
c000b844:	31 c0                	xor    eax,eax
c000b846:	85 d2                	test   edx,edx
c000b848:	0f 94 c0             	sete   al
c000b84b:	05 6d 01 00 00       	add    eax,0x16d
c000b850:	01 c1                	add    ecx,eax
c000b852:	43                   	inc    ebx
c000b853:	39 f3                	cmp    ebx,esi
c000b855:	7c cc                	jl     c000b823 <datetimeToSeconds(datetime_t)+0xa4>
c000b857:	eb 3b                	jmp    c000b894 <datetimeToSeconds(datetime_t)+0x115>
c000b859:	74 39                	je     c000b894 <datetimeToSeconds(datetime_t)+0x115>
c000b85b:	b8 45 00 00 00       	mov    eax,0x45
c000b860:	89 c2                	mov    edx,eax
c000b862:	83 e2 03             	and    edx,0x3
c000b865:	39 f0                	cmp    eax,esi
c000b867:	7e 13                	jle    c000b87c <datetimeToSeconds(datetime_t)+0xfd>
c000b869:	85 d2                	test   edx,edx
c000b86b:	0f 94 c2             	sete   dl
c000b86e:	48                   	dec    eax
c000b86f:	0f b6 d2             	movzx  edx,dl
c000b872:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b878:	29 d1                	sub    ecx,edx
c000b87a:	eb e4                	jmp    c000b860 <datetimeToSeconds(datetime_t)+0xe1>
c000b87c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b881:	85 d2                	test   edx,edx
c000b883:	75 0d                	jne    c000b892 <datetimeToSeconds(datetime_t)+0x113>
c000b885:	31 c0                	xor    eax,eax
c000b887:	66 85 db             	test   bx,bx
c000b88a:	0f 95 c0             	setne  al
c000b88d:	05 6d 01 00 00       	add    eax,0x16d
c000b892:	29 c1                	sub    ecx,eax
c000b894:	b8 80 51 01 00       	mov    eax,0x15180
c000b899:	f7 e9                	imul   ecx
c000b89b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b89f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b8a3:	83 c4 14             	add    esp,0x14
c000b8a6:	5b                   	pop    ebx
c000b8a7:	5e                   	pop    esi
c000b8a8:	5f                   	pop    edi
c000b8a9:	5d                   	pop    ebp
c000b8aa:	c3                   	ret    
c000b8ab:	90                   	nop

c000b8ac <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b8ac:	57                   	push   edi
c000b8ad:	56                   	push   esi
c000b8ae:	53                   	push   ebx
c000b8af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8b3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8b5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b8b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8c0:	e8 ba fe ff ff       	call   c000b77f <datetimeToSeconds(datetime_t)>
c000b8c5:	59                   	pop    ecx
c000b8c6:	0f b6 0d 38 0c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020c38
c000b8cd:	5b                   	pop    ebx
c000b8ce:	03 0d 3c 0c 02 c0    	add    ecx,DWORD PTR ds:0xc0020c3c
c000b8d4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b8da:	89 cb                	mov    ebx,ecx
c000b8dc:	c1 fb 1f             	sar    ebx,0x1f
c000b8df:	29 c8                	sub    eax,ecx
c000b8e1:	19 da                	sbb    edx,ebx
c000b8e3:	31 c9                	xor    ecx,ecx
c000b8e5:	80 3d 39 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c39,0x0
c000b8ec:	74 05                	je     c000b8f3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b8ee:	b9 08 07 00 00       	mov    ecx,0x708
c000b8f3:	31 db                	xor    ebx,ebx
c000b8f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b8f9:	29 c8                	sub    eax,ecx
c000b8fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8ff:	19 da                	sbb    edx,ebx
c000b901:	89 f8                	mov    eax,edi
c000b903:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b907:	5b                   	pop    ebx
c000b908:	5e                   	pop    esi
c000b909:	5f                   	pop    edi
c000b90a:	ff e0                	jmp    eax

c000b90c <secondsToDatetime(unsigned long long)>:
c000b90c:	55                   	push   ebp
c000b90d:	57                   	push   edi
c000b90e:	56                   	push   esi
c000b90f:	53                   	push   ebx
c000b910:	83 ec 1c             	sub    esp,0x1c
c000b913:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b917:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b91b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b91f:	6a 00                	push   0x0
c000b921:	68 80 51 01 00       	push   0x15180
c000b926:	55                   	push   ebp
c000b927:	57                   	push   edi
c000b928:	e8 a3 0a 01 00       	call   c001c3d0 <__udivdi3>
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b93a:	6a 00                	push   0x0
c000b93c:	68 80 51 01 00       	push   0x15180
c000b941:	55                   	push   ebp
c000b942:	57                   	push   edi
c000b943:	bf 10 0e 00 00       	mov    edi,0xe10
c000b948:	e8 83 0b 01 00       	call   c001c4d0 <__umoddi3>
c000b94d:	83 c4 10             	add    esp,0x10
c000b950:	99                   	cdq    
c000b951:	f7 ff                	idiv   edi
c000b953:	bf 3c 00 00 00       	mov    edi,0x3c
c000b958:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b95b:	89 d0                	mov    eax,edx
c000b95d:	99                   	cdq    
c000b95e:	f7 ff                	idiv   edi
c000b960:	85 db                	test   ebx,ebx
c000b962:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b965:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b968:	79 11                	jns    c000b97b <secondsToDatetime(unsigned long long)+0x6f>
c000b96a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b96e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b974:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b979:	eb 07                	jmp    c000b982 <secondsToDatetime(unsigned long long)+0x76>
c000b97b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b980:	89 d8                	mov    eax,ebx
c000b982:	bf b4 05 00 00       	mov    edi,0x5b4
c000b987:	99                   	cdq    
c000b988:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b98d:	f7 f9                	idiv   ecx
c000b98f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b998:	31 d2                	xor    edx,edx
c000b99a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b9a2:	01 c3                	add    ebx,eax
c000b9a4:	89 d8                	mov    eax,ebx
c000b9a6:	f7 f1                	div    ecx
c000b9a8:	31 d2                	xor    edx,edx
c000b9aa:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b9ad:	89 d8                	mov    eax,ebx
c000b9af:	f7 f7                	div    edi
c000b9b1:	31 d2                	xor    edx,edx
c000b9b3:	29 c1                	sub    ecx,eax
c000b9b5:	89 d8                	mov    eax,ebx
c000b9b7:	f7 f5                	div    ebp
c000b9b9:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b9be:	29 c1                	sub    ecx,eax
c000b9c0:	31 d2                	xor    edx,edx
c000b9c2:	89 c8                	mov    eax,ecx
c000b9c4:	f7 f5                	div    ebp
c000b9c6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b9cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9cf:	31 d2                	xor    edx,edx
c000b9d1:	89 c8                	mov    eax,ecx
c000b9d3:	f7 f5                	div    ebp
c000b9d5:	31 d2                	xor    edx,edx
c000b9d7:	01 c3                	add    ebx,eax
c000b9d9:	89 c8                	mov    eax,ecx
c000b9db:	f7 f7                	div    edi
c000b9dd:	bf 99 00 00 00       	mov    edi,0x99
c000b9e2:	29 c3                	sub    ebx,eax
c000b9e4:	31 d2                	xor    edx,edx
c000b9e6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b9ee:	29 c3                	sub    ebx,eax
c000b9f0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b9f3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b9f6:	bb 05 00 00 00       	mov    ebx,0x5
c000b9fb:	83 c1 02             	add    ecx,0x2
c000b9fe:	89 c8                	mov    eax,ecx
c000ba00:	f7 f7                	div    edi
c000ba02:	31 d2                	xor    edx,edx
c000ba04:	89 c7                	mov    edi,eax
c000ba06:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ba0c:	83 c0 02             	add    eax,0x2
c000ba0f:	f7 f3                	div    ebx
c000ba11:	89 eb                	mov    ebx,ebp
c000ba13:	29 c3                	sub    ebx,eax
c000ba15:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ba1b:	88 1e                	mov    BYTE PTR [esi],bl
c000ba1d:	19 c0                	sbb    eax,eax
c000ba1f:	31 d2                	xor    edx,edx
c000ba21:	83 e0 0c             	and    eax,0xc
c000ba24:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ba28:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ba30:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ba34:	83 f9 01             	cmp    ecx,0x1
c000ba37:	0f 96 c2             	setbe  dl
c000ba3a:	41                   	inc    ecx
c000ba3b:	01 d0                	add    eax,edx
c000ba3d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ba40:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ba44:	83 c4 1c             	add    esp,0x1c
c000ba47:	89 f0                	mov    eax,esi
c000ba49:	5b                   	pop    ebx
c000ba4a:	5e                   	pop    esi
c000ba4b:	5f                   	pop    edi
c000ba4c:	5d                   	pop    ebp
c000ba4d:	c2 04 00             	ret    0x4

c000ba50 <Clock::timeInDatetimeLocal()>:
c000ba50:	53                   	push   ebx
c000ba51:	83 ec 14             	sub    esp,0x14
c000ba54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba5c:	e8 7d fc ff ff       	call   c000b6de <Clock::timeInSecondsLocal()>
c000ba61:	83 c4 0c             	add    esp,0xc
c000ba64:	52                   	push   edx
c000ba65:	50                   	push   eax
c000ba66:	53                   	push   ebx
c000ba67:	e8 a0 fe ff ff       	call   c000b90c <secondsToDatetime(unsigned long long)>
c000ba6c:	89 d8                	mov    eax,ebx
c000ba6e:	83 c4 14             	add    esp,0x14
c000ba71:	5b                   	pop    ebx
c000ba72:	c2 04 00             	ret    0x4
c000ba75:	90                   	nop

c000ba76 <Device::hibernate()>:
c000ba76:	c3                   	ret    
c000ba77:	90                   	nop

c000ba78 <Device::wake()>:
c000ba78:	c3                   	ret    
c000ba79:	90                   	nop

c000ba7a <Device::detect()>:
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Device::disableLegacy()>:
c000ba7c:	c3                   	ret    
c000ba7d:	90                   	nop

c000ba7e <Device::powerSaving(PowerSavingLevel)>:
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <DriverlessDevice::close(int, int, void*)>:
c000ba80:	31 c0                	xor    eax,eax
c000ba82:	c3                   	ret    
c000ba83:	90                   	nop

c000ba84 <DriverlessDevice::detect()>:
c000ba84:	c3                   	ret    
c000ba85:	90                   	nop

c000ba86 <DriverlessDevice::open(int, int, void*)>:
c000ba86:	83 ec 18             	sub    esp,0x18
c000ba89:	68 90 e1 01 c0       	push   0xc001e190
c000ba8e:	e8 14 48 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000ba93:	83 c8 ff             	or     eax,0xffffffff
c000ba96:	83 c4 1c             	add    esp,0x1c
c000ba99:	c3                   	ret    

c000ba9a <Device::~Device()>:
c000ba9a:	ba f0 e1 01 c0       	mov    edx,0xc001e1f0
c000ba9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa3:	89 10                	mov    DWORD PTR [eax],edx
c000baa5:	90                   	nop
c000baa6:	c3                   	ret    
c000baa7:	90                   	nop

c000baa8 <Device::~Device()>:
c000baa8:	83 ec 0c             	sub    esp,0xc
c000baab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000baaf:	e8 e6 ff ff ff       	call   c000ba9a <Device::~Device()>
c000bab4:	83 c4 04             	add    esp,0x4
c000bab7:	83 ec 08             	sub    esp,0x8
c000baba:	68 58 01 00 00       	push   0x158
c000babf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac3:	e8 9a eb ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000bac8:	83 c4 10             	add    esp,0x10
c000bacb:	83 c4 0c             	add    esp,0xc
c000bace:	c3                   	ret    
c000bacf:	90                   	nop

c000bad0 <Device::findAndLoadDriver()>:
c000bad0:	c7 44 24 04 ae e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e1ae
c000bad8:	e9 7b ec ff ff       	jmp    c000a758 <Dbg::kprintf(char const*, ...)>
c000badd:	90                   	nop

c000bade <Device::preOpenPCI(PCIDeviceInfo)>:
c000bade:	57                   	push   edi
c000badf:	b9 09 00 00 00       	mov    ecx,0x9
c000bae4:	56                   	push   esi
c000bae5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bae9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000baed:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000baf7:	81 c7 18 01 00 00    	add    edi,0x118
c000bafd:	fc                   	cld    
c000bafe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bb00:	5e                   	pop    esi
c000bb01:	5f                   	pop    edi
c000bb02:	c3                   	ret    
c000bb03:	90                   	nop

c000bb04 <Device::preOpenACPI(void*, char*, char*)>:
c000bb04:	57                   	push   edi
c000bb05:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bb0a:	56                   	push   esi
c000bb0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb13:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bb1d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bb23:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bb29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bb2f:	b9 0e 00 00 00       	mov    ecx,0xe
c000bb34:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bb3a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bb40:	5e                   	pop    esi
c000bb41:	5f                   	pop    edi
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bb44:	53                   	push   ebx
c000bb45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bb4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb55:	0f b6 c0             	movzx  eax,al
c000bb58:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bb5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb64:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bb68:	5b                   	pop    ebx
c000bb69:	e9 a6 05 00 00       	jmp    c000c114 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bb6e <Device::getParent()>:
c000bb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb72:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bb78:	c3                   	ret    
c000bb79:	90                   	nop

c000bb7a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bb7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb82:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bb87:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bb8b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bb93:	e9 e8 06 00 00       	jmp    c000c280 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bb98 <Device::addChild(Device*)>:
c000bb98:	53                   	push   ebx
c000bb99:	83 ec 08             	sub    esp,0x8
c000bb9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bba4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bbaa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bbb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bbb2:	85 d2                	test   edx,edx
c000bbb4:	74 04                	je     c000bbba <Device::addChild(Device*)+0x22>
c000bbb6:	89 d3                	mov    ebx,edx
c000bbb8:	eb f6                	jmp    c000bbb0 <Device::addChild(Device*)+0x18>
c000bbba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	6a 08                	push   0x8
c000bbc2:	e8 02 be ff ff       	call   c00079c9 <malloc>
c000bbc7:	89 03                	mov    DWORD PTR [ebx],eax
c000bbc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbd6:	83 c4 18             	add    esp,0x18
c000bbd9:	5b                   	pop    ebx
c000bbda:	c3                   	ret    
c000bbdb:	90                   	nop

c000bbdc <Device::removeAllChildren()>:
c000bbdc:	56                   	push   esi
c000bbdd:	53                   	push   ebx
c000bbde:	52                   	push   edx
c000bbdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbe3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bbe9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbec:	74 17                	je     c000bc05 <Device::removeAllChildren()+0x29>
c000bbee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	74 0c                	je     c000bc01 <Device::removeAllChildren()+0x25>
c000bbf5:	83 ec 0c             	sub    esp,0xc
c000bbf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbfa:	50                   	push   eax
c000bbfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc03:	eb e4                	jmp    c000bbe9 <Device::removeAllChildren()+0xd>
c000bc05:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bc0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc11:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bc17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc1e:	58                   	pop    eax
c000bc1f:	5b                   	pop    ebx
c000bc20:	5e                   	pop    esi
c000bc21:	c3                   	ret    

c000bc22 <Device::hibernateAll()>:
c000bc22:	53                   	push   ebx
c000bc23:	83 ec 14             	sub    esp,0x14
c000bc26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc2c:	53                   	push   ebx
c000bc2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc3c:	74 0f                	je     c000bc4d <Device::hibernateAll()+0x2b>
c000bc3e:	83 ec 0c             	sub    esp,0xc
c000bc41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc44:	e8 d9 ff ff ff       	call   c000bc22 <Device::hibernateAll()>
c000bc49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc4b:	eb e9                	jmp    c000bc36 <Device::hibernateAll()+0x14>
c000bc4d:	83 c4 08             	add    esp,0x8
c000bc50:	5b                   	pop    ebx
c000bc51:	c3                   	ret    

c000bc52 <Device::wakeAll()>:
c000bc52:	53                   	push   ebx
c000bc53:	83 ec 14             	sub    esp,0x14
c000bc56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc5c:	53                   	push   ebx
c000bc5d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bc60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc66:	83 c4 10             	add    esp,0x10
c000bc69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc6c:	74 0f                	je     c000bc7d <Device::wakeAll()+0x2b>
c000bc6e:	83 ec 0c             	sub    esp,0xc
c000bc71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc74:	e8 d9 ff ff ff       	call   c000bc52 <Device::wakeAll()>
c000bc79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc7b:	eb e9                	jmp    c000bc66 <Device::wakeAll()+0x14>
c000bc7d:	83 c4 08             	add    esp,0x8
c000bc80:	5b                   	pop    ebx
c000bc81:	c3                   	ret    

c000bc82 <Device::detectAll()>:
c000bc82:	53                   	push   ebx
c000bc83:	83 ec 14             	sub    esp,0x14
c000bc86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc8c:	53                   	push   ebx
c000bc8d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bc90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc96:	83 c4 10             	add    esp,0x10
c000bc99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc9c:	74 0f                	je     c000bcad <Device::detectAll()+0x2b>
c000bc9e:	83 ec 0c             	sub    esp,0xc
c000bca1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bca4:	e8 d9 ff ff ff       	call   c000bc82 <Device::detectAll()>
c000bca9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bcab:	eb e9                	jmp    c000bc96 <Device::detectAll()+0x14>
c000bcad:	83 c4 08             	add    esp,0x8
c000bcb0:	5b                   	pop    ebx
c000bcb1:	c3                   	ret    

c000bcb2 <Device::disableLegacyAll()>:
c000bcb2:	c3                   	ret    
c000bcb3:	90                   	nop

c000bcb4 <Device::loadDriversForAll()>:
c000bcb4:	c3                   	ret    
c000bcb5:	90                   	nop

c000bcb6 <Device::closeAll()>:
c000bcb6:	53                   	push   ebx
c000bcb7:	83 ec 08             	sub    esp,0x8
c000bcba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bcbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcc0:	6a 00                	push   0x0
c000bcc2:	6a 00                	push   0x0
c000bcc4:	6a 00                	push   0x0
c000bcc6:	53                   	push   ebx
c000bcc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bcca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcd6:	74 0f                	je     c000bce7 <Device::closeAll()+0x31>
c000bcd8:	83 ec 0c             	sub    esp,0xc
c000bcdb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bcde:	e8 d3 ff ff ff       	call   c000bcb6 <Device::closeAll()>
c000bce3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bce5:	eb e9                	jmp    c000bcd0 <Device::closeAll()+0x1a>
c000bce7:	83 c4 08             	add    esp,0x8
c000bcea:	5b                   	pop    ebx
c000bceb:	c3                   	ret    

c000bcec <Device::powerSavingAll(PowerSavingLevel)>:
c000bcec:	56                   	push   esi
c000bced:	53                   	push   ebx
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcf5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bcf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcfb:	56                   	push   esi
c000bcfc:	53                   	push   ebx
c000bcfd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bd00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd06:	83 c4 10             	add    esp,0x10
c000bd09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd0c:	74 0f                	je     c000bd1d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bd0e:	52                   	push   edx
c000bd0f:	52                   	push   edx
c000bd10:	56                   	push   esi
c000bd11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd14:	e8 d3 ff ff ff       	call   c000bcec <Device::powerSavingAll(PowerSavingLevel)>
c000bd19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd1b:	eb e9                	jmp    c000bd06 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bd1d:	58                   	pop    eax
c000bd1e:	5b                   	pop    ebx
c000bd1f:	5e                   	pop    esi
c000bd20:	c3                   	ret    
c000bd21:	90                   	nop

c000bd22 <Device::setName(char const*)>:
c000bd22:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bd2a:	e9 f1 48 ff ff       	jmp    c0000620 <strcpy>
c000bd2f:	90                   	nop

c000bd30 <Device::Device(char const*)>:
c000bd30:	83 ec 1c             	sub    esp,0x1c
c000bd33:	ba f0 e1 01 c0       	mov    edx,0xc001e1f0
c000bd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd3c:	89 10                	mov    DWORD PTR [eax],edx
c000bd3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd42:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bd4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd50:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd5e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bd68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd6c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bd76:	83 ec 08             	sub    esp,0x8
c000bd79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd81:	e8 9c ff ff ff       	call   c000bd22 <Device::setName(char const*)>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bd91:	83 ec 0c             	sub    esp,0xc
c000bd94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd98:	e8 2c bc ff ff       	call   c00079c9 <malloc>
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bda6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bdb1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bdb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdbb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bdc1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdcb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bdd1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bddc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bde3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bde7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bdee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdf2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be00:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000be0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000be18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000be26:	90                   	nop
c000be27:	83 c4 1c             	add    esp,0x1c
c000be2a:	c3                   	ret    
c000be2b:	90                   	nop

c000be2c <Device::getName()>:
c000be2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be30:	05 d0 00 00 00       	add    eax,0xd0
c000be35:	c3                   	ret    

c000be36 <DriverlessDevice::DriverlessDevice(char const*)>:
c000be36:	83 ec 0c             	sub    esp,0xc
c000be39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3d:	83 ec 08             	sub    esp,0x8
c000be40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be44:	50                   	push   eax
c000be45:	e8 e6 fe ff ff       	call   c000bd30 <Device::Device(char const*)>
c000be4a:	83 c4 10             	add    esp,0x10
c000be4d:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c000be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be56:	89 10                	mov    DWORD PTR [eax],edx
c000be58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000be66:	90                   	nop
c000be67:	83 c4 0c             	add    esp,0xc
c000be6a:	c3                   	ret    
c000be6b:	90                   	nop

c000be6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000be6c:	57                   	push   edi
c000be6d:	56                   	push   esi
c000be6e:	53                   	push   ebx
c000be6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000be77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be7b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000be81:	75 0c                	jne    c000be8f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000be83:	52                   	push   edx
c000be84:	52                   	push   edx
c000be85:	53                   	push   ebx
c000be86:	56                   	push   esi
c000be87:	e8 f6 09 01 00       	call   c001c882 <LinkedList<Device>::addElement(Device*)>
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be98:	74 12                	je     c000beac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000be9a:	50                   	push   eax
c000be9b:	57                   	push   edi
c000be9c:	56                   	push   esi
c000be9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bea0:	e8 c7 ff ff ff       	call   c000be6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bea5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bea7:	83 c4 10             	add    esp,0x10
c000beaa:	eb e9                	jmp    c000be95 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000beac:	5b                   	pop    ebx
c000bead:	5e                   	pop    esi
c000beae:	5f                   	pop    edi
c000beaf:	c3                   	ret    

c000beb0 <getDevicesOfType(DeviceType)>:
c000beb0:	53                   	push   ebx
c000beb1:	83 ec 14             	sub    esp,0x14
c000beb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000beb8:	53                   	push   ebx
c000beb9:	e8 a0 0a 01 00       	call   c001c95e <LinkedList<Device>::LinkedList()>
c000bebe:	83 c4 0c             	add    esp,0xc
c000bec1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bec5:	53                   	push   ebx
c000bec6:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c000becc:	e8 9b ff ff ff       	call   c000be6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bed1:	89 d8                	mov    eax,ebx
c000bed3:	83 c4 18             	add    esp,0x18
c000bed6:	5b                   	pop    ebx
c000bed7:	c2 04 00             	ret    0x4
c000beda:	66 90                	xchg   ax,ax

c000bedc <HardDiskController::HardDiskController(char const*)>:
c000bedc:	83 ec 0c             	sub    esp,0xc
c000bedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bee3:	83 ec 08             	sub    esp,0x8
c000bee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beea:	50                   	push   eax
c000beeb:	e8 40 fe ff ff       	call   c000bd30 <Device::Device(char const*)>
c000bef0:	83 c4 10             	add    esp,0x10
c000bef3:	ba 48 e2 01 c0       	mov    edx,0xc001e248
c000bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000befc:	89 10                	mov    DWORD PTR [eax],edx
c000befe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf02:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bf0c:	90                   	nop
c000bf0d:	83 c4 0c             	add    esp,0xc
c000bf10:	c3                   	ret    
c000bf11:	90                   	nop
c000bf12:	66 90                	xchg   ax,ax

c000bf14 <HardDiskController::~HardDiskController()>:
c000bf14:	83 ec 0c             	sub    esp,0xc
c000bf17:	ba 48 e2 01 c0       	mov    edx,0xc001e248
c000bf1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf20:	89 10                	mov    DWORD PTR [eax],edx
c000bf22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf26:	83 ec 0c             	sub    esp,0xc
c000bf29:	50                   	push   eax
c000bf2a:	e8 6b fb ff ff       	call   c000ba9a <Device::~Device()>
c000bf2f:	83 c4 10             	add    esp,0x10
c000bf32:	90                   	nop
c000bf33:	83 c4 0c             	add    esp,0xc
c000bf36:	c3                   	ret    
c000bf37:	90                   	nop

c000bf38 <HardDiskController::~HardDiskController()>:
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	83 ec 0c             	sub    esp,0xc
c000bf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf42:	e8 cd ff ff ff       	call   c000bf14 <HardDiskController::~HardDiskController()>
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	68 58 01 00 00       	push   0x158
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	e8 07 e7 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	83 c4 0c             	add    esp,0xc
c000bf61:	c3                   	ret    

c000bf62 <PhysicalDisk::eject()>:
c000bf62:	83 c8 ff             	or     eax,0xffffffff
c000bf65:	c3                   	ret    

c000bf66 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bf66:	83 ec 0c             	sub    esp,0xc
c000bf69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6d:	83 ec 08             	sub    esp,0x8
c000bf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf74:	50                   	push   eax
c000bf75:	e8 b6 fd ff ff       	call   c000bd30 <Device::Device(char const*)>
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000bf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf86:	89 10                	mov    DWORD PTR [eax],edx
c000bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf97:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bf9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfb4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfbe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bfc8:	90                   	nop
c000bfc9:	83 c4 0c             	add    esp,0xc
c000bfcc:	c3                   	ret    
c000bfcd:	90                   	nop

c000bfce <PhysicalDisk::startCache()>:
c000bfce:	56                   	push   esi
c000bfcf:	53                   	push   ebx
c000bfd0:	83 ec 10             	sub    esp,0x10
c000bfd3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfd7:	6a 44                	push   0x44
c000bfd9:	e8 eb b9 ff ff       	call   c00079c9 <malloc>
c000bfde:	89 c6                	mov    esi,eax
c000bfe0:	58                   	pop    eax
c000bfe1:	5a                   	pop    edx
c000bfe2:	53                   	push   ebx
c000bfe3:	56                   	push   esi
c000bfe4:	e8 ab 15 00 00       	call   c000d594 <VCache::VCache(PhysicalDisk*)>
c000bfe9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bfef:	83 c4 14             	add    esp,0x14
c000bff2:	5b                   	pop    ebx
c000bff3:	5e                   	pop    esi
c000bff4:	c3                   	ret    
c000bff5:	90                   	nop

c000bff6 <PhysicalDisk::~PhysicalDisk()>:
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000bffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c002:	89 10                	mov    DWORD PTR [eax],edx
c000c004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c008:	83 ec 0c             	sub    esp,0xc
c000c00b:	50                   	push   eax
c000c00c:	e8 89 fa ff ff       	call   c000ba9a <Device::~Device()>
c000c011:	83 c4 10             	add    esp,0x10
c000c014:	90                   	nop
c000c015:	83 c4 0c             	add    esp,0xc
c000c018:	c3                   	ret    
c000c019:	90                   	nop

c000c01a <PhysicalDisk::~PhysicalDisk()>:
c000c01a:	83 ec 0c             	sub    esp,0xc
c000c01d:	83 ec 0c             	sub    esp,0xc
c000c020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c024:	e8 cd ff ff ff       	call   c000bff6 <PhysicalDisk::~PhysicalDisk()>
c000c029:	83 c4 10             	add    esp,0x10
c000c02c:	83 ec 08             	sub    esp,0x8
c000c02f:	68 6c 01 00 00       	push   0x16c
c000c034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c038:	e8 25 e6 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000c03d:	83 c4 10             	add    esp,0x10
c000c040:	83 c4 0c             	add    esp,0xc
c000c043:	c3                   	ret    

c000c044 <int_handler>:
c000c044:	55                   	push   ebp
c000c045:	57                   	push   edi
c000c046:	56                   	push   esi
c000c047:	53                   	push   ebx
c000c048:	83 ec 0c             	sub    esp,0xc
c000c04b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c04f:	80 3d c0 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235c0,0x0
c000c056:	74 0b                	je     c000c063 <int_handler+0x1f>
c000c058:	fa                   	cli    
c000c059:	f4                   	hlt    
c000c05a:	80 3d c0 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235c0,0x0
c000c061:	75 f5                	jne    c000c058 <int_handler+0x14>
c000c063:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c066:	8d 46 e0             	lea    eax,[esi-0x20]
c000c069:	83 f8 17             	cmp    eax,0x17
c000c06c:	76 3e                	jbe    c000c0ac <int_handler+0x68>
c000c06e:	c1 e6 04             	shl    esi,0x4
c000c071:	31 db                	xor    ebx,ebx
c000c073:	8d ae 40 1c 02 c0    	lea    ebp,[esi-0x3ffde3c0]
c000c079:	81 c6 40 0c 02 c0    	add    esi,0xc0020c40
c000c07f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c083:	85 c0                	test   eax,eax
c000c085:	74 13                	je     c000c09a <int_handler+0x56>
c000c087:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c08a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c08e:	74 2a                	je     c000c0ba <int_handler+0x76>
c000c090:	83 ec 08             	sub    esp,0x8
c000c093:	52                   	push   edx
c000c094:	57                   	push   edi
c000c095:	ff d0                	call   eax
c000c097:	83 c4 10             	add    esp,0x10
c000c09a:	43                   	inc    ebx
c000c09b:	83 fb 04             	cmp    ebx,0x4
c000c09e:	75 df                	jne    c000c07f <int_handler+0x3b>
c000c0a0:	83 c4 0c             	add    esp,0xc
c000c0a3:	31 c0                	xor    eax,eax
c000c0a5:	5b                   	pop    ebx
c000c0a6:	31 d2                	xor    edx,edx
c000c0a8:	5e                   	pop    esi
c000c0a9:	5f                   	pop    edi
c000c0aa:	5d                   	pop    ebp
c000c0ab:	c3                   	ret    
c000c0ac:	83 ec 0c             	sub    esp,0xc
c000c0af:	50                   	push   eax
c000c0b0:	e8 cc 94 00 00       	call   c0015581 <HalEndOfInterrupt(int)>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	eb b4                	jmp    c000c06e <int_handler+0x2a>
c000c0ba:	83 ec 08             	sub    esp,0x8
c000c0bd:	52                   	push   edx
c000c0be:	57                   	push   edi
c000c0bf:	ff d0                	call   eax
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	83 c4 0c             	add    esp,0xc
c000c0c7:	5b                   	pop    ebx
c000c0c8:	5e                   	pop    esi
c000c0c9:	5f                   	pop    edi
c000c0ca:	5d                   	pop    ebp
c000c0cb:	c3                   	ret    

c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c0cc:	56                   	push   esi
c000c0cd:	31 c0                	xor    eax,eax
c000c0cf:	53                   	push   ebx
c000c0d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c0d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0d8:	89 ca                	mov    edx,ecx
c000c0da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0de:	c1 e2 04             	shl    edx,0x4
c000c0e1:	83 bc 82 40 1c 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde3c0],0x0
c000c0e9:	74 15                	je     c000c100 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c0eb:	40                   	inc    eax
c000c0ec:	83 f8 04             	cmp    eax,0x4
c000c0ef:	75 f0                	jne    c000c0e1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c0f1:	c7 44 24 0c a4 e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e2a4
c000c0f9:	5b                   	pop    ebx
c000c0fa:	5e                   	pop    esi
c000c0fb:	e9 a7 41 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c000c100:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c103:	89 1c 85 40 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3c0],ebx
c000c10a:	89 34 85 40 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf3c0],esi
c000c111:	5b                   	pop    ebx
c000c112:	5e                   	pop    esi
c000c113:	c3                   	ret    

c000c114 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c114:	57                   	push   edi
c000c115:	8b 15 48 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b48
c000c11b:	56                   	push   esi
c000c11c:	53                   	push   ebx
c000c11d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c121:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c125:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c12c:	74 5b                	je     c000c189 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c12e:	89 c7                	mov    edi,eax
c000c130:	84 c0                	test   al,al
c000c132:	74 24                	je     c000c158 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c134:	83 fe 0f             	cmp    esi,0xf
c000c137:	0f 8f d9 00 00 00    	jg     c000c216 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c13d:	8a 86 c0 fa 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0540]
c000c143:	25 ff 00 00 00       	and    eax,0xff
c000c148:	66 8b bc 00 e0 33 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcc20]
c000c150:	89 c6                	mov    esi,eax
c000c152:	66 d1 ef             	shr    di,1
c000c155:	83 e7 01             	and    edi,0x1
c000c158:	83 ec 08             	sub    esp,0x8
c000c15b:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c000c160:	31 db                	xor    ebx,ebx
c000c162:	50                   	push   eax
c000c163:	68 b1 e2 01 c0       	push   0xc001e2b1
c000c168:	e8 eb e5 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c000c175:	85 c0                	test   eax,eax
c000c177:	7f 51                	jg     c000c1ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c179:	83 ec 0c             	sub    esp,0xc
c000c17c:	68 c8 e2 01 c0       	push   0xc001e2c8
c000c181:	e8 21 41 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c18c:	31 d2                	xor    edx,edx
c000c18e:	89 c8                	mov    eax,ecx
c000c190:	c1 e0 04             	shl    eax,0x4
c000c193:	8b 9c 90 40 1c 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde3c0]
c000c19a:	85 db                	test   ebx,ebx
c000c19c:	0f 84 8b 00 00 00    	je     c000c22d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c1a2:	42                   	inc    edx
c000c1a3:	83 fa 04             	cmp    edx,0x4
c000c1a6:	75 eb                	jne    c000c193 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c1a8:	83 ec 0c             	sub    esp,0xc
c000c1ab:	68 1c e3 01 c0       	push   0xc001e31c
c000c1b0:	e8 f2 40 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000c1b5:	83 c4 10             	add    esp,0x10
c000c1b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c1bd:	5b                   	pop    ebx
c000c1be:	5e                   	pop    esi
c000c1bf:	5f                   	pop    edi
c000c1c0:	c3                   	ret    
c000c1c1:	43                   	inc    ebx
c000c1c2:	39 1d 00 4a 02 c0    	cmp    DWORD PTR ds:0xc0024a00,ebx
c000c1c8:	7e af                	jle    c000c179 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c1ca:	83 ec 08             	sub    esp,0x8
c000c1cd:	8b 04 9d 20 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb5e0]
c000c1d4:	56                   	push   esi
c000c1d5:	50                   	push   eax
c000c1d6:	e8 cb f6 00 00       	call   c001b8a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	84 c0                	test   al,al
c000c1e0:	74 df                	je     c000c1c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c1e2:	81 e7 ff 00 00 00    	and    edi,0xff
c000c1e8:	50                   	push   eax
c000c1e9:	8d 46 20             	lea    eax,[esi+0x20]
c000c1ec:	57                   	push   edi
c000c1ed:	25 ff 00 00 00       	and    eax,0xff
c000c1f2:	6a 00                	push   0x0
c000c1f4:	50                   	push   eax
c000c1f5:	89 f0                	mov    eax,esi
c000c1f7:	6a 00                	push   0x0
c000c1f9:	25 ff 00 00 00       	and    eax,0xff
c000c1fe:	6a 00                	push   0x0
c000c200:	50                   	push   eax
c000c201:	8b 04 9d 20 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb5e0]
c000c208:	50                   	push   eax
c000c209:	e8 12 f8 00 00       	call   c001ba20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c20e:	83 c4 20             	add    esp,0x20
c000c211:	e9 73 ff ff ff       	jmp    c000c189 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c216:	83 ec 0c             	sub    esp,0xc
c000c219:	31 ff                	xor    edi,edi
c000c21b:	68 e4 e2 01 c0       	push   0xc001e2e4
c000c220:	e8 82 40 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	e9 2b ff ff ff       	jmp    c000c158 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c22d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c230:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c234:	89 14 85 40 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3c0],edx
c000c23b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c23f:	5b                   	pop    ebx
c000c240:	89 14 85 40 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf3c0],edx
c000c247:	89 f0                	mov    eax,esi
c000c249:	5e                   	pop    esi
c000c24a:	5f                   	pop    edi
c000c24b:	c3                   	ret    

c000c24c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c250:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c254:	c1 e0 04             	shl    eax,0x4
c000c257:	8d 50 10             	lea    edx,[eax+0x10]
c000c25a:	39 88 40 1c 02 c0    	cmp    DWORD PTR [eax-0x3ffde3c0],ecx
c000c260:	74 08                	je     c000c26a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c262:	83 c0 04             	add    eax,0x4
c000c265:	39 d0                	cmp    eax,edx
c000c267:	75 f1                	jne    c000c25a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c269:	c3                   	ret    
c000c26a:	c7 80 40 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3c0],0x0
c000c274:	c7 80 40 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3c0],0x0
c000c27e:	eb e2                	jmp    c000c262 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c280 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c280:	53                   	push   ebx
c000c281:	83 ec 08             	sub    esp,0x8
c000c284:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c288:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c28d:	74 0e                	je     c000c29d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c28f:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000c294:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c29b:	75 37                	jne    c000c2d4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a1:	83 c0 20             	add    eax,0x20
c000c2a4:	c1 e0 04             	shl    eax,0x4
c000c2a7:	8d 50 10             	lea    edx,[eax+0x10]
c000c2aa:	39 98 40 1c 02 c0    	cmp    DWORD PTR [eax-0x3ffde3c0],ebx
c000c2b0:	74 0c                	je     c000c2be <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c2b2:	83 c0 04             	add    eax,0x4
c000c2b5:	39 d0                	cmp    eax,edx
c000c2b7:	75 f1                	jne    c000c2aa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c2b9:	83 c4 08             	add    esp,0x8
c000c2bc:	5b                   	pop    ebx
c000c2bd:	c3                   	ret    
c000c2be:	c7 80 40 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3c0],0x0
c000c2c8:	c7 80 40 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3c0],0x0
c000c2d2:	eb de                	jmp    c000c2b2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c2d4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c2d9:	7f 12                	jg     c000c2ed <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c2db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2df:	31 c0                	xor    eax,eax
c000c2e1:	8a 81 c0 fa 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0540]
c000c2e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2eb:	eb b0                	jmp    c000c29d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c2ed:	83 ec 0c             	sub    esp,0xc
c000c2f0:	68 d5 e2 01 c0       	push   0xc001e2d5
c000c2f5:	e8 ad 3f 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000c2fa:	83 c4 10             	add    esp,0x10
c000c2fd:	eb 9e                	jmp    c000c29d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c2ff <setupINTS()>:
c000c2ff:	31 c0                	xor    eax,eax
c000c301:	c7 80 40 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3c0],0x0
c000c30b:	c7 80 40 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3c0],0x0
c000c315:	c7 80 44 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3bc],0x0
c000c31f:	c7 80 44 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3bc],0x0
c000c329:	c7 80 48 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3b8],0x0
c000c333:	c7 80 48 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3b8],0x0
c000c33d:	c7 80 4c 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde3b4],0x0
c000c347:	c7 80 4c 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf3b4],0x0
c000c351:	83 c0 10             	add    eax,0x10
c000c354:	3d 00 10 00 00       	cmp    eax,0x1000
c000c359:	75 a6                	jne    c000c301 <setupINTS()+0x2>
c000c35b:	c3                   	ret    

c000c35c <convertLegacyIRQNumber(int)>:
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	8b 15 48 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b48
c000c365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c369:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c370:	74 0f                	je     c000c381 <convertLegacyIRQNumber(int)+0x25>
c000c372:	83 f8 0f             	cmp    eax,0xf
c000c375:	7f 0e                	jg     c000c385 <convertLegacyIRQNumber(int)+0x29>
c000c377:	31 c9                	xor    ecx,ecx
c000c379:	8a 88 c0 fa 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0540]
c000c37f:	89 c8                	mov    eax,ecx
c000c381:	83 c4 0c             	add    esp,0xc
c000c384:	c3                   	ret    
c000c385:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c389:	83 ec 0c             	sub    esp,0xc
c000c38c:	68 e4 e2 01 c0       	push   0xc001e2e4
c000c391:	e8 11 3f 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000c396:	83 c4 10             	add    esp,0x10
c000c399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39d:	83 c4 0c             	add    esp,0xc
c000c3a0:	c3                   	ret    
c000c3a1:	90                   	nop

c000c3a2 <startGUI(void*)>:
c000c3a2:	55                   	push   ebp
c000c3a3:	89 e5                	mov    ebp,esp
c000c3a5:	53                   	push   ebx
c000c3a6:	83 ec 04             	sub    esp,0x4
c000c3a9:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c3ae:	48                   	dec    eax
c000c3af:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c3b4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c3b9:	85 c0                	test   eax,eax
c000c3bb:	75 01                	jne    c000c3be <startGUI(void*)+0x1c>
c000c3bd:	fb                   	sti    
c000c3be:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c000c3c4:	83 ec 08             	sub    esp,0x8
c000c3c7:	6a 01                	push   0x1
c000c3c9:	68 41 e3 01 c0       	push   0xc001e341
c000c3ce:	e8 37 68 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	83 ec 08             	sub    esp,0x8
c000c3d9:	53                   	push   ebx
c000c3da:	50                   	push   eax
c000c3db:	e8 5b 6a 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000c3e0:	83 c4 10             	add    esp,0x10
c000c3e3:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c000c3e9:	83 ec 08             	sub    esp,0x8
c000c3ec:	6a 01                	push   0x1
c000c3ee:	68 5b e3 01 c0       	push   0xc001e35b
c000c3f3:	e8 12 68 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	83 ec 08             	sub    esp,0x8
c000c3fe:	53                   	push   ebx
c000c3ff:	50                   	push   eax
c000c400:	e8 36 6a 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000c405:	83 c4 10             	add    esp,0x10
c000c408:	90                   	nop
c000c409:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c40c:	c9                   	leave  
c000c40d:	c3                   	ret    

c000c40e <startGUIVESA(void*)>:
c000c40e:	55                   	push   ebp
c000c40f:	89 e5                	mov    ebp,esp
c000c411:	53                   	push   ebx
c000c412:	83 ec 04             	sub    esp,0x4
c000c415:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c41a:	48                   	dec    eax
c000c41b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c420:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c425:	85 c0                	test   eax,eax
c000c427:	75 01                	jne    c000c42a <startGUIVESA(void*)+0x1c>
c000c429:	fb                   	sti    
c000c42a:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c000c430:	83 ec 08             	sub    esp,0x8
c000c433:	6a 01                	push   0x1
c000c435:	68 79 e3 01 c0       	push   0xc001e379
c000c43a:	e8 cb 67 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000c43f:	83 c4 10             	add    esp,0x10
c000c442:	83 ec 08             	sub    esp,0x8
c000c445:	53                   	push   ebx
c000c446:	50                   	push   eax
c000c447:	e8 ef 69 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c000c455:	83 ec 08             	sub    esp,0x8
c000c458:	6a 01                	push   0x1
c000c45a:	68 5b e3 01 c0       	push   0xc001e35b
c000c45f:	e8 a6 67 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000c464:	83 c4 10             	add    esp,0x10
c000c467:	83 ec 08             	sub    esp,0x8
c000c46a:	53                   	push   ebx
c000c46b:	50                   	push   eax
c000c46c:	e8 ca 69 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000c471:	83 c4 10             	add    esp,0x10
c000c474:	90                   	nop
c000c475:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c478:	c9                   	leave  
c000c479:	c3                   	ret    

c000c47a <sendKeyToTerminal(unsigned char)>:
c000c47a:	55                   	push   ebp
c000c47b:	89 e5                	mov    ebp,esp
c000c47d:	83 ec 28             	sub    esp,0x28
c000c480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c483:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c486:	8b 15 94 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b94
c000c48c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c48f:	25 ff 00 00 00       	and    eax,0xff
c000c494:	83 ec 08             	sub    esp,0x8
c000c497:	50                   	push   eax
c000c498:	52                   	push   edx
c000c499:	e8 aa c8 ff ff       	call   c0008d48 <VgaText::receiveKey(unsigned char)>
c000c49e:	83 c4 10             	add    esp,0x10
c000c4a1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c4a5:	0f 85 8f 00 00 00    	jne    c000c53a <sendKeyToTerminal(unsigned char)+0xc0>
c000c4ab:	fa                   	cli    
c000c4ac:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c4b1:	40                   	inc    eax
c000c4b2:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c4b7:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c4bc:	40                   	inc    eax
c000c4bd:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000c4c2:	a1 40 2c 02 c0       	mov    eax,ds:0xc0022c40
c000c4c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c4ca:	c7 05 40 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022c40,0x0
c000c4d4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c4d8:	74 1f                	je     c000c4f9 <sendKeyToTerminal(unsigned char)+0x7f>
c000c4da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c4dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c4e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c4e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c4e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c4e9:	83 ec 0c             	sub    esp,0xc
c000c4ec:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c4ef:	e8 cc 75 00 00       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c000c4f4:	83 c4 10             	add    esp,0x10
c000c4f7:	eb db                	jmp    c000c4d4 <sendKeyToTerminal(unsigned char)+0x5a>
c000c4f9:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c4fe:	48                   	dec    eax
c000c4ff:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000c504:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c509:	85 c0                	test   eax,eax
c000c50b:	75 18                	jne    c000c525 <sendKeyToTerminal(unsigned char)+0xab>
c000c50d:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c000c512:	85 c0                	test   eax,eax
c000c514:	74 0f                	je     c000c525 <sendKeyToTerminal(unsigned char)+0xab>
c000c516:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c000c520:	e8 d7 70 00 00       	call   c00135fc <schedule()>
c000c525:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c52a:	48                   	dec    eax
c000c52b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c530:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c535:	85 c0                	test   eax,eax
c000c537:	75 01                	jne    c000c53a <sendKeyToTerminal(unsigned char)+0xc0>
c000c539:	fb                   	sti    
c000c53a:	90                   	nop
c000c53b:	c9                   	leave  
c000c53c:	c3                   	ret    

c000c53d <sendKeyboardToken(KeyboardToken)>:
c000c53d:	55                   	push   ebp
c000c53e:	89 e5                	mov    ebp,esp
c000c540:	83 ec 18             	sub    esp,0x18
c000c543:	e8 ab 3e 00 00       	call   c00103f3 <Krnl::userIOReceived()>
c000c548:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54e:	25 ff ff 00 00       	and    eax,0xffff
c000c553:	83 f2 01             	xor    edx,0x1
c000c556:	88 90 60 2c 02 c0    	mov    BYTE PTR [eax-0x3ffdd3a0],dl
c000c55c:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000c561:	85 c0                	test   eax,eax
c000c563:	74 24                	je     c000c589 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c565:	8b 0d 48 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c48
c000c56b:	83 ec 04             	sub    esp,0x4
c000c56e:	68 60 2c 02 c0       	push   0xc0022c60
c000c573:	83 ec 08             	sub    esp,0x8
c000c576:	89 e2                	mov    edx,esp
c000c578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57b:	89 02                	mov    DWORD PTR [edx],eax
c000c57d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c580:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c584:	ff d1                	call   ecx
c000c586:	83 c4 10             	add    esp,0x10
c000c589:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c58d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c590:	a0 68 30 02 c0       	mov    al,ds:0xc0023068
c000c595:	38 c2                	cmp    dl,al
c000c597:	74 1e                	je     c000c5b7 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c599:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c59c:	a2 68 30 02 c0       	mov    ds:0xc0023068,al
c000c5a1:	a0 68 30 02 c0       	mov    al,ds:0xc0023068
c000c5a6:	25 ff 00 00 00       	and    eax,0xff
c000c5ab:	83 ec 0c             	sub    esp,0xc
c000c5ae:	50                   	push   eax
c000c5af:	e8 e6 be ff ff       	call   c000849a <setTerminalScrollLock(bool)>
c000c5b4:	83 c4 10             	add    esp,0x10
c000c5b7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c5ba:	84 c0                	test   al,al
c000c5bc:	0f 84 ae 00 00 00    	je     c000c670 <sendKeyboardToken(KeyboardToken)+0x133>
c000c5c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c5:	66 3d 10 03          	cmp    ax,0x310
c000c5c9:	75 06                	jne    c000c5d1 <sendKeyboardToken(KeyboardToken)+0x94>
c000c5cb:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d4:	66 3d 11 03          	cmp    ax,0x311
c000c5d8:	75 06                	jne    c000c5e0 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c5da:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c5e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e3:	66 3d 12 03          	cmp    ax,0x312
c000c5e7:	75 06                	jne    c000c5ef <sendKeyboardToken(KeyboardToken)+0xb2>
c000c5e9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	66 3d 13 03          	cmp    ax,0x313
c000c5f6:	75 06                	jne    c000c5fe <sendKeyboardToken(KeyboardToken)+0xc1>
c000c5f8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c5fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c601:	66 3d 14 03          	cmp    ax,0x314
c000c605:	75 06                	jne    c000c60d <sendKeyboardToken(KeyboardToken)+0xd0>
c000c607:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c610:	66 3d 15 03          	cmp    ax,0x315
c000c614:	75 06                	jne    c000c61c <sendKeyboardToken(KeyboardToken)+0xdf>
c000c616:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61f:	66 3d 16 03          	cmp    ax,0x316
c000c623:	75 06                	jne    c000c62b <sendKeyboardToken(KeyboardToken)+0xee>
c000c625:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62e:	66 3d 17 03          	cmp    ax,0x317
c000c632:	75 06                	jne    c000c63a <sendKeyboardToken(KeyboardToken)+0xfd>
c000c634:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63d:	66 3d 18 03          	cmp    ax,0x318
c000c641:	75 06                	jne    c000c649 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c643:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64c:	66 3d 19 03          	cmp    ax,0x319
c000c650:	75 06                	jne    c000c658 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c652:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65b:	66 3d 1a 03          	cmp    ax,0x31a
c000c65f:	0f 85 c9 00 00 00    	jne    c000c72e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c665:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c66b:	e9 be 00 00 00       	jmp    c000c72e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c673:	66 3d 10 03          	cmp    ax,0x310
c000c677:	75 0a                	jne    c000c683 <sendKeyboardToken(KeyboardToken)+0x146>
c000c679:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c67f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c686:	66 3d 11 03          	cmp    ax,0x311
c000c68a:	75 0a                	jne    c000c696 <sendKeyboardToken(KeyboardToken)+0x159>
c000c68c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c692:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c699:	66 3d 12 03          	cmp    ax,0x312
c000c69d:	75 0a                	jne    c000c6a9 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c69f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c6a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ac:	66 3d 13 03          	cmp    ax,0x313
c000c6b0:	75 0a                	jne    c000c6bc <sendKeyboardToken(KeyboardToken)+0x17f>
c000c6b2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c6b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bf:	66 3d 14 03          	cmp    ax,0x314
c000c6c3:	75 0a                	jne    c000c6cf <sendKeyboardToken(KeyboardToken)+0x192>
c000c6c5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c6cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d2:	66 3d 15 03          	cmp    ax,0x315
c000c6d6:	75 0a                	jne    c000c6e2 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c6d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c6de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e5:	66 3d 16 03          	cmp    ax,0x316
c000c6e9:	75 0a                	jne    c000c6f5 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c6eb:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c6f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f8:	66 3d 17 03          	cmp    ax,0x317
c000c6fc:	75 0a                	jne    c000c708 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c6fe:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c704:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70b:	66 3d 18 03          	cmp    ax,0x318
c000c70f:	75 0a                	jne    c000c71b <sendKeyboardToken(KeyboardToken)+0x1de>
c000c711:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c717:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c71b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71e:	66 3d 19 03          	cmp    ax,0x319
c000c722:	75 0a                	jne    c000c72e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c724:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c72a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c731:	66 3d 00 02          	cmp    ax,0x200
c000c735:	75 2c                	jne    c000c763 <sendKeyboardToken(KeyboardToken)+0x226>
c000c737:	a0 60 30 02 c0       	mov    al,ds:0xc0023060
c000c73c:	83 f0 01             	xor    eax,0x1
c000c73f:	84 c0                	test   al,al
c000c741:	74 20                	je     c000c763 <sendKeyboardToken(KeyboardToken)+0x226>
c000c743:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000c748:	6a 01                	push   0x1
c000c74a:	6a 00                	push   0x0
c000c74c:	68 a2 c3 00 c0       	push   0xc000c3a2
c000c751:	50                   	push   eax
c000c752:	e8 85 6c 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c000c757:	83 c4 10             	add    esp,0x10
c000c75a:	c6 05 60 30 02 c0 01 	mov    BYTE PTR ds:0xc0023060,0x1
c000c761:	eb 33                	jmp    c000c796 <sendKeyboardToken(KeyboardToken)+0x259>
c000c763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c766:	66 3d 01 02          	cmp    ax,0x201
c000c76a:	75 2a                	jne    c000c796 <sendKeyboardToken(KeyboardToken)+0x259>
c000c76c:	a0 60 30 02 c0       	mov    al,ds:0xc0023060
c000c771:	83 f0 01             	xor    eax,0x1
c000c774:	84 c0                	test   al,al
c000c776:	74 1e                	je     c000c796 <sendKeyboardToken(KeyboardToken)+0x259>
c000c778:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000c77d:	6a 01                	push   0x1
c000c77f:	6a 00                	push   0x0
c000c781:	68 0e c4 00 c0       	push   0xc000c40e
c000c786:	50                   	push   eax
c000c787:	e8 50 6c 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	c6 05 60 30 02 c0 01 	mov    BYTE PTR ds:0xc0023060,0x1
c000c796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c799:	66 3d 1d 03          	cmp    ax,0x31d
c000c79d:	75 06                	jne    c000c7a5 <sendKeyboardToken(KeyboardToken)+0x268>
c000c79f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a8:	66 3d 1c 03          	cmp    ax,0x31c
c000c7ac:	75 06                	jne    c000c7b4 <sendKeyboardToken(KeyboardToken)+0x277>
c000c7ae:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b7:	66 3d 1b 03          	cmp    ax,0x31b
c000c7bb:	75 06                	jne    c000c7c3 <sendKeyboardToken(KeyboardToken)+0x286>
c000c7bd:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c6:	66 3d 1e 03          	cmp    ax,0x31e
c000c7ca:	75 06                	jne    c000c7d2 <sendKeyboardToken(KeyboardToken)+0x295>
c000c7cc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d5:	66 3d 1f 03          	cmp    ax,0x31f
c000c7d9:	75 06                	jne    c000c7e1 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c7db:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e4:	66 3d 1a 03          	cmp    ax,0x31a
c000c7e8:	75 06                	jne    c000c7f0 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c7ea:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c7f0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c7f4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7f7:	83 f0 01             	xor    eax,0x1
c000c7fa:	84 c0                	test   al,al
c000c7fc:	74 7b                	je     c000c879 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c7fe:	a0 61 2d 02 c0       	mov    al,ds:0xc0022d61
c000c803:	84 c0                	test   al,al
c000c805:	74 43                	je     c000c84a <sendKeyboardToken(KeyboardToken)+0x30d>
c000c807:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c80b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c80f:	74 2d                	je     c000c83e <sendKeyboardToken(KeyboardToken)+0x301>
c000c811:	8b 15 64 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023064
c000c817:	89 d0                	mov    eax,edx
c000c819:	c1 e0 02             	shl    eax,0x2
c000c81c:	01 d0                	add    eax,edx
c000c81e:	01 c0                	add    eax,eax
c000c820:	a3 64 30 02 c0       	mov    ds:0xc0023064,eax
c000c825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c828:	25 ff ff 00 00       	and    eax,0xffff
c000c82d:	8d 50 d0             	lea    edx,[eax-0x30]
c000c830:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c000c835:	01 d0                	add    eax,edx
c000c837:	a3 64 30 02 c0       	mov    ds:0xc0023064,eax
c000c83c:	eb 71                	jmp    c000c8af <sendKeyboardToken(KeyboardToken)+0x372>
c000c83e:	c7 05 64 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023064,0x0
c000c848:	eb 65                	jmp    c000c8af <sendKeyboardToken(KeyboardToken)+0x372>
c000c84a:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c000c84f:	85 c0                	test   eax,eax
c000c851:	74 1a                	je     c000c86d <sendKeyboardToken(KeyboardToken)+0x330>
c000c853:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c000c858:	25 ff 00 00 00       	and    eax,0xff
c000c85d:	83 ec 0c             	sub    esp,0xc
c000c860:	50                   	push   eax
c000c861:	e8 14 fc ff ff       	call   c000c47a <sendKeyToTerminal(unsigned char)>
c000c866:	83 c4 10             	add    esp,0x10
c000c869:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c86d:	c7 05 64 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023064,0x0
c000c877:	eb 36                	jmp    c000c8af <sendKeyboardToken(KeyboardToken)+0x372>
c000c879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87c:	66 3d 01 01          	cmp    ax,0x101
c000c880:	75 2d                	jne    c000c8af <sendKeyboardToken(KeyboardToken)+0x372>
c000c882:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c000c887:	85 c0                	test   eax,eax
c000c889:	74 1a                	je     c000c8a5 <sendKeyboardToken(KeyboardToken)+0x368>
c000c88b:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c000c890:	25 ff 00 00 00       	and    eax,0xff
c000c895:	83 ec 0c             	sub    esp,0xc
c000c898:	50                   	push   eax
c000c899:	e8 dc fb ff ff       	call   c000c47a <sendKeyToTerminal(unsigned char)>
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c8a5:	c7 05 64 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023064,0x0
c000c8af:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c8b2:	83 f0 01             	xor    eax,0x1
c000c8b5:	84 c0                	test   al,al
c000c8b7:	74 4e                	je     c000c907 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c8b9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c8bc:	83 f0 01             	xor    eax,0x1
c000c8bf:	84 c0                	test   al,al
c000c8c1:	74 44                	je     c000c907 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c8c3:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000c8c8:	83 f0 01             	xor    eax,0x1
c000c8cb:	84 c0                	test   al,al
c000c8cd:	74 38                	je     c000c907 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c8cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d2:	66 83 f8 1f          	cmp    ax,0x1f
c000c8d6:	76 09                	jbe    c000c8e1 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8db:	66 83 f8 7e          	cmp    ax,0x7e
c000c8df:	76 12                	jbe    c000c8f3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c8e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e4:	66 83 f8 0a          	cmp    ax,0xa
c000c8e8:	74 09                	je     c000c8f3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c8ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ed:	66 83 f8 08          	cmp    ax,0x8
c000c8f1:	75 14                	jne    c000c907 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c8f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f6:	25 ff 00 00 00       	and    eax,0xff
c000c8fb:	83 ec 0c             	sub    esp,0xc
c000c8fe:	50                   	push   eax
c000c8ff:	e8 76 fb ff ff       	call   c000c47a <sendKeyToTerminal(unsigned char)>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c90a:	83 f0 01             	xor    eax,0x1
c000c90d:	84 c0                	test   al,al
c000c90f:	74 51                	je     c000c962 <sendKeyboardToken(KeyboardToken)+0x425>
c000c911:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c914:	83 f0 01             	xor    eax,0x1
c000c917:	84 c0                	test   al,al
c000c919:	74 47                	je     c000c962 <sendKeyboardToken(KeyboardToken)+0x425>
c000c91b:	a0 60 2d 02 c0       	mov    al,ds:0xc0022d60
c000c920:	84 c0                	test   al,al
c000c922:	74 3e                	je     c000c962 <sendKeyboardToken(KeyboardToken)+0x425>
c000c924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c927:	66 83 f8 3f          	cmp    ax,0x3f
c000c92b:	76 35                	jbe    c000c962 <sendKeyboardToken(KeyboardToken)+0x425>
c000c92d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c930:	66 83 f8 7f          	cmp    ax,0x7f
c000c934:	77 2c                	ja     c000c962 <sendKeyboardToken(KeyboardToken)+0x425>
c000c936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c939:	88 c2                	mov    dl,al
c000c93b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93e:	66 83 f8 5f          	cmp    ax,0x5f
c000c942:	76 04                	jbe    c000c948 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c944:	b0 20                	mov    al,0x20
c000c946:	eb 02                	jmp    c000c94a <sendKeyboardToken(KeyboardToken)+0x40d>
c000c948:	b0 00                	mov    al,0x0
c000c94a:	29 c2                	sub    edx,eax
c000c94c:	88 d0                	mov    al,dl
c000c94e:	83 e8 40             	sub    eax,0x40
c000c951:	25 ff 00 00 00       	and    eax,0xff
c000c956:	83 ec 0c             	sub    esp,0xc
c000c959:	50                   	push   eax
c000c95a:	e8 1b fb ff ff       	call   c000c47a <sendKeyToTerminal(unsigned char)>
c000c95f:	83 c4 10             	add    esp,0x10
c000c962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c965:	66 3d 00 03          	cmp    ax,0x300
c000c969:	75 0f                	jne    c000c97a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c96b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c96e:	83 f0 01             	xor    eax,0x1
c000c971:	84 c0                	test   al,al
c000c973:	74 05                	je     c000c97a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c975:	e8 21 bb ff ff       	call   c000849b <doTerminalCycle()>
c000c97a:	90                   	nop
c000c97b:	c9                   	leave  
c000c97c:	c3                   	ret    

c000c97d <clearInternalKeybuffer(VgaText*)>:
c000c97d:	55                   	push   ebp
c000c97e:	89 e5                	mov    ebp,esp
c000c980:	83 ec 08             	sub    esp,0x8
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	05 b2 00 00 00       	add    eax,0xb2
c000c98b:	83 ec 0c             	sub    esp,0xc
c000c98e:	50                   	push   eax
c000c98f:	e8 cc 3b ff ff       	call   c0000560 <strlen>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c99a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c9a0:	83 ec 04             	sub    esp,0x4
c000c9a3:	50                   	push   eax
c000c9a4:	6a 00                	push   0x0
c000c9a6:	52                   	push   edx
c000c9a7:	e8 44 3b ff ff       	call   c00004f0 <memset>
c000c9ac:	83 c4 10             	add    esp,0x10
c000c9af:	90                   	nop
c000c9b0:	c9                   	leave  
c000c9b1:	c3                   	ret    

c000c9b2 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c9b2:	55                   	push   ebp
c000c9b3:	89 e5                	mov    ebp,esp
c000c9b5:	83 ec 18             	sub    esp,0x18
c000c9b8:	a1 48 2c 02 c0       	mov    eax,ds:0xc0022c48
c000c9bd:	85 c0                	test   eax,eax
c000c9bf:	74 2a                	je     c000c9eb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c9c1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c9c7:	8b 0d 48 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c48
c000c9cd:	83 ec 04             	sub    esp,0x4
c000c9d0:	68 60 2c 02 c0       	push   0xc0022c60
c000c9d5:	83 ec 08             	sub    esp,0x8
c000c9d8:	89 e2                	mov    edx,esp
c000c9da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c9dd:	89 02                	mov    DWORD PTR [edx],eax
c000c9df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9e2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c9e6:	ff d1                	call   ecx
c000c9e8:	83 c4 10             	add    esp,0x10
c000c9eb:	fb                   	sti    
c000c9ec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c9f3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c9f7:	0f 84 a1 00 00 00    	je     c000ca9e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c9fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca00:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ca06:	84 c0                	test   al,al
c000ca08:	75 28                	jne    c000ca32 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ca0a:	fa                   	cli    
c000ca0b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000ca10:	40                   	inc    eax
c000ca11:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000ca16:	e8 e1 6b 00 00       	call   c00135fc <schedule()>
c000ca1b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000ca20:	48                   	dec    eax
c000ca21:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000ca26:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000ca2b:	85 c0                	test   eax,eax
c000ca2d:	75 ce                	jne    c000c9fd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ca2f:	fb                   	sti    
c000ca30:	eb cb                	jmp    c000c9fd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ca32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca35:	8d 50 01             	lea    edx,[eax+0x1]
c000ca38:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ca3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca3e:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ca44:	88 10                	mov    BYTE PTR [eax],dl
c000ca46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca49:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ca4f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ca52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca55:	05 b2 00 00 00       	add    eax,0xb2
c000ca5a:	83 ec 0c             	sub    esp,0xc
c000ca5d:	50                   	push   eax
c000ca5e:	e8 fd 3a ff ff       	call   c0000560 <strlen>
c000ca63:	83 c4 10             	add    esp,0x10
c000ca66:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca69:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ca6f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ca72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca75:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ca7b:	83 ec 04             	sub    esp,0x4
c000ca7e:	50                   	push   eax
c000ca7f:	51                   	push   ecx
c000ca80:	52                   	push   edx
c000ca81:	e8 7a 39 ff ff       	call   c0000400 <memmove>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ca8c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ca8f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ca93:	0f 85 5a ff ff ff    	jne    c000c9f3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ca99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ca9c:	eb 03                	jmp    c000caa1 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ca9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000caa1:	c9                   	leave  
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <Keyboard::Keyboard(char const*)>:
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caab:	83 ec 08             	sub    esp,0x8
c000caae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab2:	50                   	push   eax
c000cab3:	e8 78 f2 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000cab8:	83 c4 10             	add    esp,0x10
c000cabb:	ba 9c e3 01 c0       	mov    edx,0xc001e39c
c000cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac4:	89 10                	mov    DWORD PTR [eax],edx
c000cac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cad4:	c6 05 44 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c44,0x1
c000cadb:	90                   	nop
c000cadc:	83 c4 0c             	add    esp,0xc
c000cadf:	c3                   	ret    

c000cae0 <Keyboard::~Keyboard()>:
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	ba 9c e3 01 c0       	mov    edx,0xc001e39c
c000cae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caec:	89 10                	mov    DWORD PTR [eax],edx
c000caee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	50                   	push   eax
c000caf6:	e8 9f ef ff ff       	call   c000ba9a <Device::~Device()>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	90                   	nop
c000caff:	83 c4 0c             	add    esp,0xc
c000cb02:	c3                   	ret    
c000cb03:	90                   	nop

c000cb04 <Keyboard::~Keyboard()>:
c000cb04:	83 ec 0c             	sub    esp,0xc
c000cb07:	83 ec 0c             	sub    esp,0xc
c000cb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb0e:	e8 cd ff ff ff       	call   c000cae0 <Keyboard::~Keyboard()>
c000cb13:	83 c4 10             	add    esp,0x10
c000cb16:	83 ec 08             	sub    esp,0x8
c000cb19:	68 5c 01 00 00       	push   0x15c
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	e8 3b db ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000cb27:	83 c4 10             	add    esp,0x10
c000cb2a:	83 c4 0c             	add    esp,0xc
c000cb2d:	c3                   	ret    

c000cb2e <LogicalDisk::close(int, int, void*)>:
c000cb2e:	83 c8 ff             	or     eax,0xffffffff
c000cb31:	c3                   	ret    

c000cb32 <LogicalDisk::~LogicalDisk()>:
c000cb32:	83 ec 0c             	sub    esp,0xc
c000cb35:	ba 14 e4 01 c0       	mov    edx,0xc001e414
c000cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3e:	89 10                	mov    DWORD PTR [eax],edx
c000cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb44:	83 ec 0c             	sub    esp,0xc
c000cb47:	50                   	push   eax
c000cb48:	e8 4d ef ff ff       	call   c000ba9a <Device::~Device()>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	90                   	nop
c000cb51:	83 c4 0c             	add    esp,0xc
c000cb54:	c3                   	ret    
c000cb55:	90                   	nop

c000cb56 <LogicalDisk::~LogicalDisk()>:
c000cb56:	83 ec 0c             	sub    esp,0xc
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb60:	e8 cd ff ff ff       	call   c000cb32 <LogicalDisk::~LogicalDisk()>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	83 ec 08             	sub    esp,0x8
c000cb6b:	68 74 01 00 00       	push   0x174
c000cb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb74:	e8 e9 da ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	83 c4 0c             	add    esp,0xc
c000cb7f:	c3                   	ret    

c000cb80 <LogicalDisk::open(int, int, void*)>:
c000cb80:	83 ec 18             	sub    esp,0x18
c000cb83:	68 c8 e3 01 c0       	push   0xc001e3c8
c000cb88:	e8 1a 37 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000cb8d:	83 c8 ff             	or     eax,0xffffffff
c000cb90:	83 c4 1c             	add    esp,0x1c
c000cb93:	c3                   	ret    

c000cb94 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cb94:	53                   	push   ebx
c000cb95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cba1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cba7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cbad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cbb3:	77 10                	ja     c000cbc5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cbb5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cbbb:	89 d3                	mov    ebx,edx
c000cbbd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cbc3:	72 05                	jb     c000cbca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cbc5:	83 c8 ff             	or     eax,0xffffffff
c000cbc8:	89 c2                	mov    edx,eax
c000cbca:	5b                   	pop    ebx
c000cbcb:	c3                   	ret    

c000cbcc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cbcc:	56                   	push   esi
c000cbcd:	83 c8 ff             	or     eax,0xffffffff
c000cbd0:	53                   	push   ebx
c000cbd1:	89 c2                	mov    edx,eax
c000cbd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cbd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cbdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cbdf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbe5:	77 27                	ja     c000cc0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cbe7:	89 d8                	mov    eax,ebx
c000cbe9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cbef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cbf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cbfa:	89 c2                	mov    edx,eax
c000cbfc:	73 10                	jae    c000cc0e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cbfe:	89 c8                	mov    eax,ecx
c000cc00:	89 da                	mov    edx,ebx
c000cc02:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cc08:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cc0e:	5b                   	pop    ebx
c000cc0f:	5e                   	pop    esi
c000cc10:	c3                   	ret    
c000cc11:	90                   	nop

c000cc12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cc12:	83 ec 1c             	sub    esp,0x1c
c000cc15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cc29:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc38:	83 ec 08             	sub    esp,0x8
c000cc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3f:	50                   	push   eax
c000cc40:	e8 eb f0 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000cc45:	83 c4 10             	add    esp,0x10
c000cc48:	ba 14 e4 01 c0       	mov    edx,0xc001e414
c000cc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc51:	89 10                	mov    DWORD PTR [eax],edx
c000cc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc57:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc62:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc6d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cc77:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc83:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cc89:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cc8f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cc96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc9a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cca0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ccae:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ccb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ccc2:	90                   	nop
c000ccc3:	83 c4 1c             	add    esp,0x1c
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <LogicalDisk::assignDriveLetter()>:
c000ccc8:	55                   	push   ebp
c000ccc9:	57                   	push   edi
c000ccca:	56                   	push   esi
c000cccb:	53                   	push   ebx
c000cccc:	83 ec 14             	sub    esp,0x14
c000cccf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccd3:	8b 3d 80 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023080
c000ccd9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ccdf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cce3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cce9:	8b 3d 84 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023084
c000ccef:	3c 01                	cmp    al,0x1
c000ccf1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ccf5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ccf9:	19 c0                	sbb    eax,eax
c000ccfb:	83 e0 02             	and    eax,0x2
c000ccfe:	83 c0 41             	add    eax,0x41
c000cd01:	0f be e8             	movsx  ebp,al
c000cd04:	3c 43                	cmp    al,0x43
c000cd06:	75 10                	jne    c000cd18 <LogicalDisk::assignDriveLetter()+0x50>
c000cd08:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cd0f:	75 5d                	jne    c000cd6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cd11:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cd16:	75 56                	jne    c000cd6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cd18:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cd1b:	ba 01 00 00 00       	mov    edx,0x1
c000cd20:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cd24:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cd28:	d3 e2                	shl    edx,cl
c000cd2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cd2e:	89 d7                	mov    edi,edx
c000cd30:	89 d6                	mov    esi,edx
c000cd32:	c1 ff 1f             	sar    edi,0x1f
c000cd35:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cd39:	21 f9                	and    ecx,edi
c000cd3b:	09 d1                	or     ecx,edx
c000cd3d:	75 2f                	jne    c000cd6e <LogicalDisk::assignDriveLetter()+0xa6>
c000cd3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cd43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd47:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cd4d:	09 f2                	or     edx,esi
c000cd4f:	89 15 80 30 02 c0    	mov    DWORD PTR ds:0xc0023080,edx
c000cd55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd59:	09 fa                	or     edx,edi
c000cd5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cd5f:	89 15 84 30 02 c0    	mov    DWORD PTR ds:0xc0023084,edx
c000cd65:	89 1c bd a0 30 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcf60],ebx
c000cd6c:	eb 08                	jmp    c000cd76 <LogicalDisk::assignDriveLetter()+0xae>
c000cd6e:	45                   	inc    ebp
c000cd6f:	40                   	inc    eax
c000cd70:	3c 5b                	cmp    al,0x5b
c000cd72:	75 90                	jne    c000cd04 <LogicalDisk::assignDriveLetter()+0x3c>
c000cd74:	31 c0                	xor    eax,eax
c000cd76:	83 c4 14             	add    esp,0x14
c000cd79:	5b                   	pop    ebx
c000cd7a:	5e                   	pop    esi
c000cd7b:	5f                   	pop    edi
c000cd7c:	5d                   	pop    ebp
c000cd7d:	c3                   	ret    

c000cd7e <LogicalDisk::mount()>:
c000cd7e:	56                   	push   esi
c000cd7f:	53                   	push   ebx
c000cd80:	53                   	push   ebx
c000cd81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd85:	8b 1d 34 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c34
c000cd8b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cd95:	85 db                	test   ebx,ebx
c000cd97:	74 27                	je     c000cdc0 <LogicalDisk::mount()+0x42>
c000cd99:	51                   	push   ecx
c000cd9a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cda1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cda3:	83 e8 41             	sub    eax,0x41
c000cda6:	50                   	push   eax
c000cda7:	56                   	push   esi
c000cda8:	53                   	push   ebx
c000cda9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	84 c0                	test   al,al
c000cdb1:	74 08                	je     c000cdbb <LogicalDisk::mount()+0x3d>
c000cdb3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cdb9:	eb 07                	jmp    c000cdc2 <LogicalDisk::mount()+0x44>
c000cdbb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cdbe:	eb d5                	jmp    c000cd95 <LogicalDisk::mount()+0x17>
c000cdc0:	31 c0                	xor    eax,eax
c000cdc2:	5a                   	pop    edx
c000cdc3:	5b                   	pop    ebx
c000cdc4:	5e                   	pop    esi
c000cdc5:	c3                   	ret    

c000cdc6 <LogicalDisk::unmount()>:
c000cdc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdca:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cdd4:	c3                   	ret    
c000cdd5:	90                   	nop

c000cdd6 <LogicalDisk::eject()>:
c000cdd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cde0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cde2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cde6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cde9:	90                   	nop

c000cdea <LogicalDisk::unassignDriveLetter()>:
c000cdea:	57                   	push   edi
c000cdeb:	56                   	push   esi
c000cdec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cdf0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cdf7:	84 c9                	test   cl,cl
c000cdf9:	75 0f                	jne    c000ce0a <LogicalDisk::unassignDriveLetter()+0x20>
c000cdfb:	c7 44 24 0c ec e3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e3ec
c000ce03:	5e                   	pop    esi
c000ce04:	5f                   	pop    edi
c000ce05:	e9 9d 34 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c000ce0a:	83 e9 41             	sub    ecx,0x41
c000ce0d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ce14:	b8 01 00 00 00       	mov    eax,0x1
c000ce19:	c7 04 8d a0 30 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcf60],0x0
c000ce24:	d3 e0                	shl    eax,cl
c000ce26:	89 c7                	mov    edi,eax
c000ce28:	f7 d0                	not    eax
c000ce2a:	c1 ff 1f             	sar    edi,0x1f
c000ce2d:	21 05 80 30 02 c0    	and    DWORD PTR ds:0xc0023080,eax
c000ce33:	89 fe                	mov    esi,edi
c000ce35:	f7 d6                	not    esi
c000ce37:	21 35 84 30 02 c0    	and    DWORD PTR ds:0xc0023084,esi
c000ce3d:	5e                   	pop    esi
c000ce3e:	5f                   	pop    edi
c000ce3f:	c3                   	ret    

c000ce40 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ce40:	57                   	push   edi
c000ce41:	56                   	push   esi
c000ce42:	53                   	push   ebx
c000ce43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce4b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce59:	77 41                	ja     c000ce9c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ce5b:	99                   	cdq    
c000ce5c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce62:	01 c8                	add    eax,ecx
c000ce64:	11 da                	adc    edx,ebx
c000ce66:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ce6c:	19 d7                	sbb    edi,edx
c000ce6e:	72 33                	jb     c000cea3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ce70:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce76:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce80:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce84:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce94:	5b                   	pop    ebx
c000ce95:	5e                   	pop    esi
c000ce96:	5f                   	pop    edi
c000ce97:	e9 32 0a 00 00       	jmp    c000d8ce <VCache::read(unsigned long long, int, void*)>
c000ce9c:	b8 05 00 00 00       	mov    eax,0x5
c000cea1:	eb 05                	jmp    c000cea8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cea3:	b8 07 00 00 00       	mov    eax,0x7
c000cea8:	5b                   	pop    ebx
c000cea9:	5e                   	pop    esi
c000ceaa:	5f                   	pop    edi
c000ceab:	c3                   	ret    

c000ceac <LogicalDisk::write(unsigned long long, int, void*)>:
c000ceac:	57                   	push   edi
c000cead:	56                   	push   esi
c000ceae:	53                   	push   ebx
c000ceaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ceb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ceb7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cebf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cec5:	77 41                	ja     c000cf08 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cec7:	99                   	cdq    
c000cec8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cece:	01 c8                	add    eax,ecx
c000ced0:	11 da                	adc    edx,ebx
c000ced2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ced8:	19 d7                	sbb    edi,edx
c000ceda:	72 33                	jb     c000cf0f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cedc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cee2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cee8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ceec:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cef0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cef6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cefc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf00:	5b                   	pop    ebx
c000cf01:	5e                   	pop    esi
c000cf02:	5f                   	pop    edi
c000cf03:	e9 cc 08 00 00       	jmp    c000d7d4 <VCache::write(unsigned long long, int, void*)>
c000cf08:	b8 05 00 00 00       	mov    eax,0x5
c000cf0d:	eb 05                	jmp    c000cf14 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cf0f:	b8 07 00 00 00       	mov    eax,0x7
c000cf14:	5b                   	pop    ebx
c000cf15:	5e                   	pop    esi
c000cf16:	5f                   	pop    edi
c000cf17:	c3                   	ret    

c000cf18 <Mouse::Mouse(char const*)>:
c000cf18:	83 ec 0c             	sub    esp,0xc
c000cf1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1f:	83 ec 08             	sub    esp,0x8
c000cf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf26:	50                   	push   eax
c000cf27:	e8 04 ee ff ff       	call   c000bd30 <Device::Device(char const*)>
c000cf2c:	83 c4 10             	add    esp,0x10
c000cf2f:	ba 40 e4 01 c0       	mov    edx,0xc001e440
c000cf34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf38:	89 10                	mov    DWORD PTR [eax],edx
c000cf3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cf48:	90                   	nop
c000cf49:	83 c4 0c             	add    esp,0xc
c000cf4c:	c3                   	ret    
c000cf4d:	90                   	nop
c000cf4e:	66 90                	xchg   ax,ax

c000cf50 <Mouse::~Mouse()>:
c000cf50:	83 ec 0c             	sub    esp,0xc
c000cf53:	ba 40 e4 01 c0       	mov    edx,0xc001e440
c000cf58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5c:	89 10                	mov    DWORD PTR [eax],edx
c000cf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf62:	83 ec 0c             	sub    esp,0xc
c000cf65:	50                   	push   eax
c000cf66:	e8 2f eb ff ff       	call   c000ba9a <Device::~Device()>
c000cf6b:	83 c4 10             	add    esp,0x10
c000cf6e:	90                   	nop
c000cf6f:	83 c4 0c             	add    esp,0xc
c000cf72:	c3                   	ret    
c000cf73:	90                   	nop

c000cf74 <Mouse::~Mouse()>:
c000cf74:	83 ec 0c             	sub    esp,0xc
c000cf77:	83 ec 0c             	sub    esp,0xc
c000cf7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf7e:	e8 cd ff ff ff       	call   c000cf50 <Mouse::~Mouse()>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	83 ec 08             	sub    esp,0x8
c000cf89:	68 58 01 00 00       	push   0x158
c000cf8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf92:	e8 cb d6 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000cf97:	83 c4 10             	add    esp,0x10
c000cf9a:	83 c4 0c             	add    esp,0xc
c000cf9d:	c3                   	ret    

c000cf9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf9e:	55                   	push   ebp
c000cf9f:	57                   	push   edi
c000cfa0:	56                   	push   esi
c000cfa1:	53                   	push   ebx
c000cfa2:	81 ec 28 01 00 00    	sub    esp,0x128
c000cfa8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cfaf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cfb6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cfbd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cfc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfc8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfcc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfd3:	e8 54 ee ff ff       	call   c000be2c <Device::getName()>
c000cfd8:	5a                   	pop    edx
c000cfd9:	59                   	pop    ecx
c000cfda:	50                   	push   eax
c000cfdb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cfdf:	55                   	push   ebp
c000cfe0:	e8 3b 36 ff ff       	call   c0000620 <strcpy>
c000cfe5:	5b                   	pop    ebx
c000cfe6:	58                   	pop    eax
c000cfe7:	68 64 e4 01 c0       	push   0xc001e464
c000cfec:	55                   	push   ebp
c000cfed:	e8 ee 37 ff ff       	call   c00007e0 <strcat>
c000cff2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cff9:	e8 cb a9 ff ff       	call   c00079c9 <malloc>
c000cffe:	83 c4 0c             	add    esp,0xc
c000d001:	89 c3                	mov    ebx,eax
c000d003:	57                   	push   edi
c000d004:	56                   	push   esi
c000d005:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d00d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d014:	55                   	push   ebp
c000d015:	50                   	push   eax
c000d016:	e8 f7 fb ff ff       	call   c000cc12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d01b:	83 c4 14             	add    esp,0x14
c000d01e:	53                   	push   ebx
c000d01f:	e8 a4 fc ff ff       	call   c000ccc8 <LogicalDisk::assignDriveLetter()>
c000d024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d027:	e8 52 fd ff ff       	call   c000cd7e <LogicalDisk::mount()>
c000d02c:	58                   	pop    eax
c000d02d:	5a                   	pop    edx
c000d02e:	53                   	push   ebx
c000d02f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d036:	e8 5d eb ff ff       	call   c000bb98 <Device::addChild(Device*)>
c000d03b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d041:	5b                   	pop    ebx
c000d042:	5e                   	pop    esi
c000d043:	5f                   	pop    edi
c000d044:	5d                   	pop    ebp
c000d045:	c3                   	ret    

c000d046 <createPartitionsForDisk(PhysicalDisk*)>:
c000d046:	55                   	push   ebp
c000d047:	57                   	push   edi
c000d048:	56                   	push   esi
c000d049:	53                   	push   ebx
c000d04a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d050:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d057:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d05d:	3d 00 02 00 00       	cmp    eax,0x200
c000d062:	74 27                	je     c000d08b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d064:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d06a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d070:	83 ec 10             	sub    esp,0x10
c000d073:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d077:	99                   	cdq    
c000d078:	c1 e6 0a             	shl    esi,0xa
c000d07b:	52                   	push   edx
c000d07c:	89 fd                	mov    ebp,edi
c000d07e:	50                   	push   eax
c000d07f:	55                   	push   ebp
c000d080:	56                   	push   esi
c000d081:	e8 4a f3 00 00       	call   c001c3d0 <__udivdi3>
c000d086:	e9 b1 00 00 00       	jmp    c000d13c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d08b:	83 ec 0c             	sub    esp,0xc
c000d08e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d090:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d094:	56                   	push   esi
c000d095:	6a 01                	push   0x1
c000d097:	6a 00                	push   0x0
c000d099:	6a 00                	push   0x0
c000d09b:	53                   	push   ebx
c000d09c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d09f:	83 c4 20             	add    esp,0x20
c000d0a2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d0aa:	75 0a                	jne    c000d0b6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d0ac:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d0b4:	74 2c                	je     c000d0e2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d0b6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0bc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0c8:	83 ec 10             	sub    esp,0x10
c000d0cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0cf:	89 f7                	mov    edi,esi
c000d0d1:	c1 e0 0a             	shl    eax,0xa
c000d0d4:	c1 ff 1f             	sar    edi,0x1f
c000d0d7:	57                   	push   edi
c000d0d8:	56                   	push   esi
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	e8 f0 f2 00 00       	call   c001c3d0 <__udivdi3>
c000d0e0:	eb 5a                	jmp    c000d13c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d0e2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d0e9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d0f0:	83 e1 7f             	and    ecx,0x7f
c000d0f3:	83 e0 7f             	and    eax,0x7f
c000d0f6:	01 c1                	add    ecx,eax
c000d0f8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0ff:	83 e0 7f             	and    eax,0x7f
c000d102:	01 c1                	add    ecx,eax
c000d104:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d10b:	83 e0 7f             	and    eax,0x7f
c000d10e:	00 c1                	add    cl,al
c000d110:	74 41                	je     c000d153 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d112:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d118:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d11e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d124:	83 ec 10             	sub    esp,0x10
c000d127:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d12b:	89 f7                	mov    edi,esi
c000d12d:	c1 e0 0a             	shl    eax,0xa
c000d130:	c1 ff 1f             	sar    edi,0x1f
c000d133:	57                   	push   edi
c000d134:	56                   	push   esi
c000d135:	52                   	push   edx
c000d136:	50                   	push   eax
c000d137:	e8 94 f2 00 00       	call   c001c3d0 <__udivdi3>
c000d13c:	83 c4 14             	add    esp,0x14
c000d13f:	52                   	push   edx
c000d140:	50                   	push   eax
c000d141:	6a 00                	push   0x0
c000d143:	6a 00                	push   0x0
c000d145:	53                   	push   ebx
c000d146:	e8 53 fe ff ff       	call   c000cf9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d14b:	83 c4 20             	add    esp,0x20
c000d14e:	e9 79 01 00 00       	jmp    c000d2cc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d153:	89 f0                	mov    eax,esi
c000d155:	31 f6                	xor    esi,esi
c000d157:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d15e:	75 02                	jne    c000d162 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d160:	89 f1                	mov    ecx,esi
c000d162:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d169:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d170:	c1 e2 08             	shl    edx,0x8
c000d173:	c1 e7 10             	shl    edi,0x10
c000d176:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d17e:	09 fa                	or     edx,edi
c000d180:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d188:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d18f:	83 c0 10             	add    eax,0x10
c000d192:	09 fa                	or     edx,edi
c000d194:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d19b:	c1 e7 18             	shl    edi,0x18
c000d19e:	09 fa                	or     edx,edi
c000d1a0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d1a7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d1ab:	c1 e7 10             	shl    edi,0x10
c000d1ae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d1b5:	c1 e2 08             	shl    edx,0x8
c000d1b8:	09 fa                	or     edx,edi
c000d1ba:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d1c1:	09 fa                	or     edx,edi
c000d1c3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d1ca:	c1 e7 18             	shl    edi,0x18
c000d1cd:	09 fa                	or     edx,edi
c000d1cf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d1d3:	46                   	inc    esi
c000d1d4:	83 fe 04             	cmp    esi,0x4
c000d1d7:	0f 85 7a ff ff ff    	jne    c000d157 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e1:	83 f0 01             	xor    eax,0x1
c000d1e4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d1e8:	75 57                	jne    c000d241 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1ee:	83 f0 01             	xor    eax,0x1
c000d1f1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d1f5:	75 4a                	jne    c000d241 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d203:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d20b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d211:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d217:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d21d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d221:	89 f7                	mov    edi,esi
c000d223:	c1 e0 0a             	shl    eax,0xa
c000d226:	c1 ff 1f             	sar    edi,0x1f
c000d229:	57                   	push   edi
c000d22a:	56                   	push   esi
c000d22b:	52                   	push   edx
c000d22c:	50                   	push   eax
c000d22d:	e8 9e f1 00 00       	call   c001c3d0 <__udivdi3>
c000d232:	83 c4 10             	add    esp,0x10
c000d235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d241:	84 c9                	test   cl,cl
c000d243:	74 53                	je     c000d298 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d245:	0f b6 c9             	movzx  ecx,cl
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d250:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d254:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d25c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d260:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d264:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d278:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d27c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d280:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d284:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d288:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d28c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d290:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d294:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d298:	31 ed                	xor    ebp,ebp
c000d29a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d29e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d2a2:	89 f8                	mov    eax,edi
c000d2a4:	09 f0                	or     eax,esi
c000d2a6:	74 1e                	je     c000d2c6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d2a8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d2ac:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d2b0:	89 d1                	mov    ecx,edx
c000d2b2:	09 c1                	or     ecx,eax
c000d2b4:	74 10                	je     c000d2c6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d2b6:	83 ec 0c             	sub    esp,0xc
c000d2b9:	57                   	push   edi
c000d2ba:	56                   	push   esi
c000d2bb:	52                   	push   edx
c000d2bc:	50                   	push   eax
c000d2bd:	53                   	push   ebx
c000d2be:	e8 db fc ff ff       	call   c000cf9e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d2c3:	83 c4 20             	add    esp,0x20
c000d2c6:	45                   	inc    ebp
c000d2c7:	83 fd 04             	cmp    ebp,0x4
c000d2ca:	75 ce                	jne    c000d29a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d2cc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d2d2:	5b                   	pop    ebx
c000d2d3:	5e                   	pop    esi
c000d2d4:	5f                   	pop    edi
c000d2d5:	5d                   	pop    ebp
c000d2d6:	c3                   	ret    
c000d2d7:	90                   	nop

c000d2d8 <Serial::Serial(char const*)>:
c000d2d8:	83 ec 0c             	sub    esp,0xc
c000d2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2df:	83 ec 08             	sub    esp,0x8
c000d2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e6:	50                   	push   eax
c000d2e7:	e8 44 ea ff ff       	call   c000bd30 <Device::Device(char const*)>
c000d2ec:	83 c4 10             	add    esp,0x10
c000d2ef:	ba 78 e4 01 c0       	mov    edx,0xc001e478
c000d2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f8:	89 10                	mov    DWORD PTR [eax],edx
c000d2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fe:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d308:	90                   	nop
c000d309:	83 c4 0c             	add    esp,0xc
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop
c000d30e:	66 90                	xchg   ax,ax

c000d310 <Serial::~Serial()>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	ba 78 e4 01 c0       	mov    edx,0xc001e478
c000d318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31c:	89 10                	mov    DWORD PTR [eax],edx
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	50                   	push   eax
c000d326:	e8 6f e7 ff ff       	call   c000ba9a <Device::~Device()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	90                   	nop
c000d32f:	83 c4 0c             	add    esp,0xc
c000d332:	c3                   	ret    
c000d333:	90                   	nop

c000d334 <Serial::~Serial()>:
c000d334:	83 ec 0c             	sub    esp,0xc
c000d337:	83 ec 0c             	sub    esp,0xc
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	e8 cd ff ff ff       	call   c000d310 <Serial::~Serial()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	68 58 01 00 00       	push   0x158
c000d34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d352:	e8 0b d3 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	83 c4 0c             	add    esp,0xc
c000d35d:	c3                   	ret    
c000d35e:	66 90                	xchg   ax,ax

c000d360 <Timer::Timer(char const*)>:
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d367:	83 ec 08             	sub    esp,0x8
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	50                   	push   eax
c000d36f:	e8 bc e9 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	ba bc e4 01 c0       	mov    edx,0xc001e4bc
c000d37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d380:	89 10                	mov    DWORD PTR [eax],edx
c000d382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d386:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d390:	90                   	nop
c000d391:	83 c4 0c             	add    esp,0xc
c000d394:	c3                   	ret    
c000d395:	90                   	nop
c000d396:	66 90                	xchg   ax,ax

c000d398 <Timer::~Timer()>:
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	ba bc e4 01 c0       	mov    edx,0xc001e4bc
c000d3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a4:	89 10                	mov    DWORD PTR [eax],edx
c000d3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3aa:	83 ec 0c             	sub    esp,0xc
c000d3ad:	50                   	push   eax
c000d3ae:	e8 e7 e6 ff ff       	call   c000ba9a <Device::~Device()>
c000d3b3:	83 c4 10             	add    esp,0x10
c000d3b6:	90                   	nop
c000d3b7:	83 c4 0c             	add    esp,0xc
c000d3ba:	c3                   	ret    
c000d3bb:	90                   	nop

c000d3bc <Timer::~Timer()>:
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	83 ec 0c             	sub    esp,0xc
c000d3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c6:	e8 cd ff ff ff       	call   c000d398 <Timer::~Timer()>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	83 ec 08             	sub    esp,0x8
c000d3d1:	68 5c 01 00 00       	push   0x15c
c000d3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3da:	e8 83 d2 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	83 c4 0c             	add    esp,0xc
c000d3e5:	c3                   	ret    

c000d3e6 <Timer::read()>:
c000d3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3f0:	c3                   	ret    

c000d3f1 <setupTimer(int)>:
c000d3f1:	53                   	push   ebx
c000d3f2:	83 ec 14             	sub    esp,0x14
c000d3f5:	68 5c 01 00 00       	push   0x15c
c000d3fa:	e8 ca a5 ff ff       	call   c00079c9 <malloc>
c000d3ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d402:	89 c3                	mov    ebx,eax
c000d404:	e8 37 e9 00 00       	call   c001bd40 <PIT::PIT()>
c000d409:	58                   	pop    eax
c000d40a:	5a                   	pop    edx
c000d40b:	53                   	push   ebx
c000d40c:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c000d412:	e8 81 e7 ff ff       	call   c000bb98 <Device::addChild(Device*)>
c000d417:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d419:	6a 00                	push   0x0
c000d41b:	6a 00                	push   0x0
c000d41d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d421:	53                   	push   ebx
c000d422:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d425:	89 d8                	mov    eax,ebx
c000d427:	83 c4 28             	add    esp,0x28
c000d42a:	5b                   	pop    ebx
c000d42b:	c3                   	ret    

c000d42c <timerHandler(unsigned int)>:
c000d42c:	56                   	push   esi
c000d42d:	53                   	push   ebx
c000d42e:	51                   	push   ecx
c000d42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d433:	01 05 0c 31 02 c0    	add    DWORD PTR ds:0xc002310c,eax
c000d439:	80 3d 4d 0b 02 c0 00 	cmp    BYTE PTR ds:0xc0020b4d,0x0
c000d440:	0f 84 4a 01 00 00    	je     c000d590 <timerHandler(unsigned int)+0x164>
c000d446:	fa                   	cli    
c000d447:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c000d44d:	83 ec 0c             	sub    esp,0xc
c000d450:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c000d456:	68 18 40 02 c0       	push   0xc0024018
c000d45b:	e8 40 f5 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	84 c0                	test   al,al
c000d465:	0f 85 a1 00 00 00    	jne    c000d50c <timerHandler(unsigned int)+0xe0>
c000d46b:	83 ec 0c             	sub    esp,0xc
c000d46e:	68 18 40 02 c0       	push   0xc0024018
c000d473:	e8 44 f5 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	89 c6                	mov    esi,eax
c000d47d:	8d 76 00             	lea    esi,[esi+0x0]
c000d480:	83 ec 0c             	sub    esp,0xc
c000d483:	68 18 40 02 c0       	push   0xc0024018
c000d488:	e8 2f f5 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d48d:	c7 04 24 18 40 02 c0 	mov    DWORD PTR [esp],0xc0024018
c000d494:	89 c3                	mov    ebx,eax
c000d496:	e8 29 f5 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d49b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d49e:	83 c4 10             	add    esp,0x10
c000d4a1:	3b 05 0c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002310c
c000d4a7:	77 23                	ja     c000d4cc <timerHandler(unsigned int)+0xa0>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	53                   	push   ebx
c000d4ad:	e8 0e 66 00 00       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	39 de                	cmp    esi,ebx
c000d4b7:	75 27                	jne    c000d4e0 <timerHandler(unsigned int)+0xb4>
c000d4b9:	83 ec 0c             	sub    esp,0xc
c000d4bc:	68 18 40 02 c0       	push   0xc0024018
c000d4c1:	e8 f6 f4 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4c6:	89 c6                	mov    esi,eax
c000d4c8:	eb 12                	jmp    c000d4dc <timerHandler(unsigned int)+0xb0>
c000d4ca:	66 90                	xchg   ax,ax
c000d4cc:	52                   	push   edx
c000d4cd:	52                   	push   edx
c000d4ce:	53                   	push   ebx
c000d4cf:	68 18 40 02 c0       	push   0xc0024018
c000d4d4:	e8 a3 f5 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4dc:	83 c4 10             	add    esp,0x10
c000d4df:	90                   	nop
c000d4e0:	83 ec 0c             	sub    esp,0xc
c000d4e3:	68 18 40 02 c0       	push   0xc0024018
c000d4e8:	e8 b3 f4 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d4ed:	83 c4 10             	add    esp,0x10
c000d4f0:	84 c0                	test   al,al
c000d4f2:	75 18                	jne    c000d50c <timerHandler(unsigned int)+0xe0>
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	68 18 40 02 c0       	push   0xc0024018
c000d4fc:	e8 bb f4 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	39 f0                	cmp    eax,esi
c000d506:	0f 85 74 ff ff ff    	jne    c000d480 <timerHandler(unsigned int)+0x54>
c000d50c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d511:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d515:	74 41                	je     c000d558 <timerHandler(unsigned int)+0x12c>
c000d517:	80 3d 4c 0b 02 c0 00 	cmp    BYTE PTR ds:0xc0020b4c,0x0
c000d51e:	74 38                	je     c000d558 <timerHandler(unsigned int)+0x12c>
c000d520:	fa                   	cli    
c000d521:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c000d527:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c000d52c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d532:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d535:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d53b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d53e:	72 08                	jb     c000d548 <timerHandler(unsigned int)+0x11c>
c000d540:	e8 b7 60 00 00       	call   c00135fc <schedule()>
c000d545:	8d 76 00             	lea    esi,[esi+0x0]
c000d548:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000d54d:	48                   	dec    eax
c000d54e:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000d553:	75 03                	jne    c000d558 <timerHandler(unsigned int)+0x12c>
c000d555:	fb                   	sti    
c000d556:	66 90                	xchg   ax,ax
c000d558:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000d55d:	48                   	dec    eax
c000d55e:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000d563:	75 1b                	jne    c000d580 <timerHandler(unsigned int)+0x154>
c000d565:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c000d56c:	74 12                	je     c000d580 <timerHandler(unsigned int)+0x154>
c000d56e:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c000d578:	e8 7f 60 00 00       	call   c00135fc <schedule()>
c000d57d:	8d 76 00             	lea    esi,[esi+0x0]
c000d580:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000d585:	48                   	dec    eax
c000d586:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000d58b:	75 03                	jne    c000d590 <timerHandler(unsigned int)+0x164>
c000d58d:	fb                   	sti    
c000d58e:	66 90                	xchg   ax,ax
c000d590:	58                   	pop    eax
c000d591:	5b                   	pop    ebx
c000d592:	5e                   	pop    esi
c000d593:	c3                   	ret    

c000d594 <VCache::VCache(PhysicalDisk*)>:
c000d594:	53                   	push   ebx
c000d595:	83 ec 18             	sub    esp,0x18
c000d598:	ba ec e4 01 c0       	mov    edx,0xc001e4ec
c000d59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a1:	89 10                	mov    DWORD PTR [eax],edx
c000d5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d5ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d5c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d5d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d5dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d606:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d60e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d616:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d625:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d62d:	83 ec 0c             	sub    esp,0xc
c000d630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d634:	e8 90 a3 ff ff       	call   c00079c9 <malloc>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 c3                	mov    ebx,eax
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	53                   	push   ebx
c000d642:	e8 81 5d 00 00       	call   c00133c8 <Mutex::Mutex()>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d655:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d659:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d660:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d66b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d675:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d678:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d67c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d682:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d688:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d68c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d68f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d696:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d69a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d69e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d6a4:	05 00 01 00 00       	add    eax,0x100
c000d6a9:	c1 e0 04             	shl    eax,0x4
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	50                   	push   eax
c000d6b0:	e8 14 a3 ff ff       	call   c00079c9 <malloc>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	89 c2                	mov    edx,eax
c000d6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d6d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d6de:	c1 e0 06             	shl    eax,0x6
c000d6e1:	83 ec 0c             	sub    esp,0xc
c000d6e4:	50                   	push   eax
c000d6e5:	e8 df a2 ff ff       	call   c00079c9 <malloc>
c000d6ea:	83 c4 10             	add    esp,0x10
c000d6ed:	89 c2                	mov    edx,eax
c000d6ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6f6:	90                   	nop
c000d6f7:	83 c4 18             	add    esp,0x18
c000d6fa:	5b                   	pop    ebx
c000d6fb:	c3                   	ret    

c000d6fc <VCache::invalidateReadBuffer()>:
c000d6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d700:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d706:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d70a:	c3                   	ret    
c000d70b:	90                   	nop

c000d70c <VCache::writeWriteBuffer()>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 08             	sub    esp,0x8
c000d710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d714:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d718:	74 1e                	je     c000d738 <VCache::writeWriteBuffer()+0x2c>
c000d71a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d71d:	83 ec 0c             	sub    esp,0xc
c000d720:	8b 10                	mov    edx,DWORD PTR [eax]
c000d722:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d725:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d728:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d72b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d72e:	50                   	push   eax
c000d72f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d732:	83 c4 20             	add    esp,0x20
c000d735:	8d 76 00             	lea    esi,[esi+0x0]
c000d738:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d73f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d746:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d74a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d751:	83 c4 08             	add    esp,0x8
c000d754:	5b                   	pop    ebx
c000d755:	c3                   	ret    
c000d756:	66 90                	xchg   ax,ax

c000d758 <VCache::~VCache()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	ba ec e4 01 c0       	mov    edx,0xc001e4ec
c000d760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d76d:	84 c0                	test   al,al
c000d76f:	74 0f                	je     c000d780 <VCache::~VCache()+0x28>
c000d771:	83 ec 0c             	sub    esp,0xc
c000d774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d778:	e8 8f ff ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d784:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d787:	83 ec 0c             	sub    esp,0xc
c000d78a:	50                   	push   eax
c000d78b:	e8 49 a2 ff ff       	call   c00079d9 <free>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d797:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d79a:	83 ec 0c             	sub    esp,0xc
c000d79d:	50                   	push   eax
c000d79e:	e8 36 a2 ff ff       	call   c00079d9 <free>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	90                   	nop
c000d7a7:	83 c4 0c             	add    esp,0xc
c000d7aa:	c3                   	ret    
c000d7ab:	90                   	nop

c000d7ac <VCache::~VCache()>:
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	e8 9d ff ff ff       	call   c000d758 <VCache::~VCache()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	83 ec 08             	sub    esp,0x8
c000d7c1:	6a 44                	push   0x44
c000d7c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c7:	e8 96 ce ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000d7cc:	83 c4 10             	add    esp,0x10
c000d7cf:	83 c4 0c             	add    esp,0xc
c000d7d2:	c3                   	ret    
c000d7d3:	90                   	nop

c000d7d4 <VCache::write(unsigned long long, int, void*)>:
c000d7d4:	55                   	push   ebp
c000d7d5:	31 c0                	xor    eax,eax
c000d7d7:	57                   	push   edi
c000d7d8:	56                   	push   esi
c000d7d9:	53                   	push   ebx
c000d7da:	83 ec 0c             	sub    esp,0xc
c000d7dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d7e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7e5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7ec:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000d7f0:	7d 1a                	jge    c000d80c <VCache::write(unsigned long long, int, void*)+0x38>
c000d7f2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d7f5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d7fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d7ff:	0f af c8             	imul   ecx,eax
c000d802:	01 ca                	add    edx,ecx
c000d804:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d806:	40                   	inc    eax
c000d807:	eb e3                	jmp    c000d7ec <VCache::write(unsigned long long, int, void*)+0x18>
c000d809:	8d 76 00             	lea    esi,[esi+0x0]
c000d80c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d810:	74 0a                	je     c000d81c <VCache::write(unsigned long long, int, void*)+0x48>
c000d812:	53                   	push   ebx
c000d813:	e8 e4 fe ff ff       	call   c000d6fc <VCache::invalidateReadBuffer()>
c000d818:	58                   	pop    eax
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d820:	74 5e                	je     c000d880 <VCache::write(unsigned long long, int, void*)+0xac>
c000d822:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000d825:	89 e8                	mov    eax,ebp
c000d827:	99                   	cdq    
c000d828:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d82b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d82e:	89 c1                	mov    ecx,eax
c000d830:	89 d0                	mov    eax,edx
c000d832:	31 f1                	xor    ecx,esi
c000d834:	31 f8                	xor    eax,edi
c000d836:	09 c1                	or     ecx,eax
c000d838:	75 3a                	jne    c000d874 <VCache::write(unsigned long long, int, void*)+0xa0>
c000d83a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000d83f:	75 33                	jne    c000d874 <VCache::write(unsigned long long, int, void*)+0xa0>
c000d841:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d844:	89 ef                	mov    edi,ebp
c000d846:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d84c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d850:	0f af f9             	imul   edi,ecx
c000d853:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d856:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d858:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d85b:	40                   	inc    eax
c000d85c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d85f:	83 f8 40             	cmp    eax,0x40
c000d862:	75 60                	jne    c000d8c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d864:	83 ec 0c             	sub    esp,0xc
c000d867:	53                   	push   ebx
c000d868:	e8 9f fe ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d86d:	83 c4 10             	add    esp,0x10
c000d870:	eb 52                	jmp    c000d8c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d872:	66 90                	xchg   ax,ax
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	53                   	push   ebx
c000d878:	e8 8f fe ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d87d:	83 c4 10             	add    esp,0x10
c000d880:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d883:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000d888:	7f 22                	jg     c000d8ac <VCache::write(unsigned long long, int, void*)+0xd8>
c000d88a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000d88d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000d890:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d894:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d898:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000d89b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d89e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8aa:	eb 18                	jmp    c000d8c4 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b9:	57                   	push   edi
c000d8ba:	56                   	push   esi
c000d8bb:	50                   	push   eax
c000d8bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d8bf:	83 c4 20             	add    esp,0x20
c000d8c2:	66 90                	xchg   ax,ax
c000d8c4:	83 c4 0c             	add    esp,0xc
c000d8c7:	31 c0                	xor    eax,eax
c000d8c9:	5b                   	pop    ebx
c000d8ca:	5e                   	pop    esi
c000d8cb:	5f                   	pop    edi
c000d8cc:	5d                   	pop    ebp
c000d8cd:	c3                   	ret    

c000d8ce <VCache::read(unsigned long long, int, void*)>:
c000d8ce:	55                   	push   ebp
c000d8cf:	31 c0                	xor    eax,eax
c000d8d1:	57                   	push   edi
c000d8d2:	56                   	push   esi
c000d8d3:	53                   	push   ebx
c000d8d4:	83 ec 1c             	sub    esp,0x1c
c000d8d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d8df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d8e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d8e7:	90                   	nop
c000d8e8:	39 e8                	cmp    eax,ebp
c000d8ea:	7d 18                	jge    c000d904 <VCache::read(unsigned long long, int, void*)+0x36>
c000d8ec:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d8ef:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d8f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d8f9:	0f af c8             	imul   ecx,eax
c000d8fc:	01 ca                	add    edx,ecx
c000d8fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d900:	40                   	inc    eax
c000d901:	eb e5                	jmp    c000d8e8 <VCache::read(unsigned long long, int, void*)+0x1a>
c000d903:	90                   	nop
c000d904:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d908:	74 0e                	je     c000d918 <VCache::read(unsigned long long, int, void*)+0x4a>
c000d90a:	83 ec 0c             	sub    esp,0xc
c000d90d:	53                   	push   ebx
c000d90e:	e8 f9 fd ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	66 90                	xchg   ax,ax
c000d918:	83 fd 01             	cmp    ebp,0x1
c000d91b:	0f 85 87 00 00 00    	jne    c000d9a8 <VCache::read(unsigned long long, int, void*)+0xda>
c000d921:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d924:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d928:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d92f:	75 77                	jne    c000d9a8 <VCache::read(unsigned long long, int, void*)+0xda>
c000d931:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000d934:	89 e9                	mov    ecx,ebp
c000d936:	f7 d9                	neg    ecx
c000d938:	89 c8                	mov    eax,ecx
c000d93a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d93e:	c1 f8 1f             	sar    eax,0x1f
c000d941:	21 f1                	and    ecx,esi
c000d943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d947:	89 c8                	mov    eax,ecx
c000d949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d94d:	21 f9                	and    ecx,edi
c000d94f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d953:	89 ca                	mov    edx,ecx
c000d955:	74 0d                	je     c000d964 <VCache::read(unsigned long long, int, void*)+0x96>
c000d957:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000d95a:	75 08                	jne    c000d964 <VCache::read(unsigned long long, int, void*)+0x96>
c000d95c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000d95f:	74 27                	je     c000d988 <VCache::read(unsigned long long, int, void*)+0xba>
c000d961:	8d 76 00             	lea    esi,[esi+0x0]
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000d96b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d96f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000d972:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d975:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000d977:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000d97a:	55                   	push   ebp
c000d97b:	52                   	push   edx
c000d97c:	50                   	push   eax
c000d97d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d981:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d984:	83 c4 20             	add    esp,0x20
c000d987:	90                   	nop
c000d988:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d98b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d98f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d995:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000d998:	48                   	dec    eax
c000d999:	21 c6                	and    esi,eax
c000d99b:	0f af f1             	imul   esi,ecx
c000d99e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000d9a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9a3:	eb 23                	jmp    c000d9c8 <VCache::read(unsigned long long, int, void*)+0xfa>
c000d9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	53                   	push   ebx
c000d9ac:	e8 4b fd ff ff       	call   c000d6fc <VCache::invalidateReadBuffer()>
c000d9b1:	5a                   	pop    edx
c000d9b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d9b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9bb:	55                   	push   ebp
c000d9bc:	57                   	push   edi
c000d9bd:	56                   	push   esi
c000d9be:	50                   	push   eax
c000d9bf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000d9c2:	83 c4 20             	add    esp,0x20
c000d9c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9c8:	83 c4 1c             	add    esp,0x1c
c000d9cb:	31 c0                	xor    eax,eax
c000d9cd:	5b                   	pop    ebx
c000d9ce:	5e                   	pop    esi
c000d9cf:	5f                   	pop    edi
c000d9d0:	5d                   	pop    ebp
c000d9d1:	c3                   	ret    

c000d9d2 <Video::putrect(int, int, int, int, unsigned int)>:
c000d9d2:	55                   	push   ebp
c000d9d3:	57                   	push   edi
c000d9d4:	56                   	push   esi
c000d9d5:	53                   	push   ebx
c000d9d6:	83 ec 1c             	sub    esp,0x1c
c000d9d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d9dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9e1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d9e5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d9e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9f1:	01 df                	add    edi,ebx
c000d9f3:	39 fb                	cmp    ebx,edi
c000d9f5:	7d 1f                	jge    c000da16 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9f7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9ff:	7d 12                	jge    c000da13 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000da01:	8b 16                	mov    edx,DWORD PTR [esi]
c000da03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da07:	53                   	push   ebx
c000da08:	55                   	push   ebp
c000da09:	45                   	inc    ebp
c000da0a:	56                   	push   esi
c000da0b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da0e:	83 c4 10             	add    esp,0x10
c000da11:	eb e8                	jmp    c000d9fb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000da13:	43                   	inc    ebx
c000da14:	eb dd                	jmp    c000d9f3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000da16:	83 c4 1c             	add    esp,0x1c
c000da19:	5b                   	pop    ebx
c000da1a:	5e                   	pop    esi
c000da1b:	5f                   	pop    edi
c000da1c:	5d                   	pop    ebp
c000da1d:	c3                   	ret    

c000da1e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000da1e:	55                   	push   ebp
c000da1f:	57                   	push   edi
c000da20:	31 ff                	xor    edi,edi
c000da22:	56                   	push   esi
c000da23:	53                   	push   ebx
c000da24:	83 ec 1c             	sub    esp,0x1c
c000da27:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000da2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000da2f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000da36:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000da3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da3f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000da43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da47:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000da4a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da4e:	01 f9                	add    ecx,edi
c000da50:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000da54:	7d 2f                	jge    c000da85 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da56:	31 f6                	xor    esi,esi
c000da58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da5c:	01 f2                	add    edx,esi
c000da5e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da62:	7d 1a                	jge    c000da7e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da67:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da6a:	46                   	inc    esi
c000da6b:	51                   	push   ecx
c000da6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da70:	52                   	push   edx
c000da71:	55                   	push   ebp
c000da72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da7c:	eb da                	jmp    c000da58 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da7e:	47                   	inc    edi
c000da7f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da83:	eb c5                	jmp    c000da4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da85:	83 c4 1c             	add    esp,0x1c
c000da88:	5b                   	pop    ebx
c000da89:	5e                   	pop    esi
c000da8a:	5f                   	pop    edi
c000da8b:	5d                   	pop    ebp
c000da8c:	c3                   	ret    
c000da8d:	90                   	nop

c000da8e <Video::blit(unsigned int*, int, int, int, int)>:
c000da8e:	55                   	push   ebp
c000da8f:	57                   	push   edi
c000da90:	56                   	push   esi
c000da91:	53                   	push   ebx
c000da92:	83 ec 1c             	sub    esp,0x1c
c000da95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da9d:	85 c0                	test   eax,eax
c000da9f:	79 02                	jns    c000daa3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000daa1:	31 c0                	xor    eax,eax
c000daa3:	c1 e0 02             	shl    eax,0x2
c000daa6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000daaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000daae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dab2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dab6:	39 d8                	cmp    eax,ebx
c000dab8:	7e 49                	jle    c000db03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000daba:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dac0:	7c 41                	jl     c000db03 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dac2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dac6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000daca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dace:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dad2:	39 f9                	cmp    ecx,edi
c000dad4:	7e 22                	jle    c000daf8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dad6:	83 c5 04             	add    ebp,0x4
c000dad9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dadf:	7c 14                	jl     c000daf5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dae1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dae3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dae6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000daea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000daee:	56                   	push   esi
c000daef:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	47                   	inc    edi
c000daf6:	eb d2                	jmp    c000daca <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000daf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dafc:	43                   	inc    ebx
c000dafd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000db01:	eb ab                	jmp    c000daae <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000db03:	83 c4 1c             	add    esp,0x1c
c000db06:	5b                   	pop    ebx
c000db07:	5e                   	pop    esi
c000db08:	5f                   	pop    edi
c000db09:	5d                   	pop    ebp
c000db0a:	c3                   	ret    
c000db0b:	90                   	nop

c000db0c <Video::clearScreen(unsigned int)>:
c000db0c:	57                   	push   edi
c000db0d:	56                   	push   esi
c000db0e:	53                   	push   ebx
c000db0f:	31 db                	xor    ebx,ebx
c000db11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db15:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000db1b:	7e 1f                	jle    c000db3c <Video::clearScreen(unsigned int)+0x30>
c000db1d:	31 ff                	xor    edi,edi
c000db1f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000db25:	7e 12                	jle    c000db39 <Video::clearScreen(unsigned int)+0x2d>
c000db27:	8b 06                	mov    eax,DWORD PTR [esi]
c000db29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db2d:	53                   	push   ebx
c000db2e:	57                   	push   edi
c000db2f:	47                   	inc    edi
c000db30:	56                   	push   esi
c000db31:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db34:	83 c4 10             	add    esp,0x10
c000db37:	eb e6                	jmp    c000db1f <Video::clearScreen(unsigned int)+0x13>
c000db39:	43                   	inc    ebx
c000db3a:	eb d9                	jmp    c000db15 <Video::clearScreen(unsigned int)+0x9>
c000db3c:	5b                   	pop    ebx
c000db3d:	5e                   	pop    esi
c000db3e:	5f                   	pop    edi
c000db3f:	c3                   	ret    

c000db40 <Video::putpixel(int, int, unsigned int)>:
c000db40:	c7 44 24 04 f4 e4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e4f4
c000db48:	e9 5a 27 00 00       	jmp    c00102a7 <Krnl::panic(char const*)>
c000db4d:	90                   	nop

c000db4e <Video::Video(char const*)>:
c000db4e:	83 ec 0c             	sub    esp,0xc
c000db51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db55:	83 ec 08             	sub    esp,0x8
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	50                   	push   eax
c000db5d:	e8 ce e1 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c000db6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6e:	89 10                	mov    DWORD PTR [eax],edx
c000db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db74:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db7e:	90                   	nop
c000db7f:	83 c4 0c             	add    esp,0xc
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <Video::~Video()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	89 10                	mov    DWORD PTR [eax],edx
c000db92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	50                   	push   eax
c000db9a:	e8 fb de ff ff       	call   c000ba9a <Device::~Device()>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	90                   	nop
c000dba3:	83 c4 0c             	add    esp,0xc
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <Video::~Video()>:
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	83 ec 0c             	sub    esp,0xc
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 cd ff ff ff       	call   c000db84 <Video::~Video()>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 ec 08             	sub    esp,0x8
c000dbbd:	68 64 01 00 00       	push   0x164
c000dbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc6:	e8 97 ca ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 c4 0c             	add    esp,0xc
c000dbd1:	c3                   	ret    

c000dbd2 <Video::isMonochrome()>:
c000dbd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbd6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dbdc:	c3                   	ret    
c000dbdd:	90                   	nop

c000dbde <Video::getWidth()>:
c000dbde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbe2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbe8:	c3                   	ret    
c000dbe9:	90                   	nop

c000dbea <Video::getHeight()>:
c000dbea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbf4:	c3                   	ret    
c000dbf5:	90                   	nop

c000dbf6 <Video::drawCursor(int, int, unsigned char*, int)>:
c000dbf6:	55                   	push   ebp
c000dbf7:	57                   	push   edi
c000dbf8:	56                   	push   esi
c000dbf9:	53                   	push   ebx
c000dbfa:	83 ec 2c             	sub    esp,0x2c
c000dbfd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dc01:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc05:	83 f8 01             	cmp    eax,0x1
c000dc08:	19 c9                	sbb    ecx,ecx
c000dc0a:	31 db                	xor    ebx,ebx
c000dc0c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dc10:	89 cd                	mov    ebp,ecx
c000dc12:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dc1a:	f7 d5                	not    ebp
c000dc1c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dc22:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dc26:	01 d8                	add    eax,ebx
c000dc28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2c:	56                   	push   esi
c000dc2d:	e8 b8 ff ff ff       	call   c000dbea <Video::getHeight()>
c000dc32:	59                   	pop    ecx
c000dc33:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dc37:	7e 70                	jle    c000dca9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dc39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc3d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dc41:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc4c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc57:	89 f8                	mov    eax,edi
c000dc59:	83 c0 20             	add    eax,0x20
c000dc5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc60:	56                   	push   esi
c000dc61:	e8 78 ff ff ff       	call   c000dbde <Video::getWidth()>
c000dc66:	5a                   	pop    edx
c000dc67:	39 c7                	cmp    edi,eax
c000dc69:	7d 34                	jge    c000dc9f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dc6b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc70:	74 05                	je     c000dc77 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dc72:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc74:	55                   	push   ebp
c000dc75:	eb 0d                	jmp    c000dc84 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dc77:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc7c:	74 12                	je     c000dc90 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000dc7e:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc88:	57                   	push   edi
c000dc89:	56                   	push   esi
c000dc8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc8d:	83 c4 10             	add    esp,0x10
c000dc90:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc94:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc98:	47                   	inc    edi
c000dc99:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc9d:	75 c1                	jne    c000dc60 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000dc9f:	43                   	inc    ebx
c000dca0:	83 fb 20             	cmp    ebx,0x20
c000dca3:	0f 85 79 ff ff ff    	jne    c000dc22 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000dca9:	83 c4 2c             	add    esp,0x2c
c000dcac:	5b                   	pop    ebx
c000dcad:	5e                   	pop    esi
c000dcae:	5f                   	pop    edi
c000dcaf:	5d                   	pop    ebp
c000dcb0:	c3                   	ret    
c000dcb1:	90                   	nop

c000dcb2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dcb2:	55                   	push   ebp
c000dcb3:	57                   	push   edi
c000dcb4:	56                   	push   esi
c000dcb5:	53                   	push   ebx
c000dcb6:	83 ec 28             	sub    esp,0x28
c000dcb9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dcbd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dcc1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dcc5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dcc9:	c1 e6 08             	shl    esi,0x8
c000dccc:	01 c6                	add    esi,eax
c000dcce:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dcd2:	c1 e0 08             	shl    eax,0x8
c000dcd5:	01 d0                	add    eax,edx
c000dcd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcdf:	0f af c6             	imul   eax,esi
c000dce2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dce9:	50                   	push   eax
c000dcea:	e8 da 9c ff ff       	call   c00079c9 <malloc>
c000dcef:	83 c4 10             	add    esp,0x10
c000dcf2:	89 c7                	mov    edi,eax
c000dcf4:	85 c0                	test   eax,eax
c000dcf6:	75 10                	jne    c000dd08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcf8:	83 ec 0c             	sub    esp,0xc
c000dcfb:	68 15 e5 01 c0       	push   0xc001e515
c000dd00:	e8 a2 25 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dd0b:	ba 12 00 00 00       	mov    edx,0x12
c000dd10:	84 c0                	test   al,al
c000dd12:	74 11                	je     c000dd25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dd14:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dd18:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dd1c:	c1 fa 03             	sar    edx,0x3
c000dd1f:	0f af d1             	imul   edx,ecx
c000dd22:	83 c2 12             	add    edx,0x12
c000dd25:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dd29:	74 04                	je     c000dd2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dd2b:	85 f6                	test   esi,esi
c000dd2d:	75 12                	jne    c000dd41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dd2f:	83 ec 0c             	sub    esp,0xc
c000dd32:	68 25 e5 01 c0       	push   0xc001e525
c000dd37:	e8 1c ca ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000dd3c:	e9 b8 00 00 00       	jmp    c000ddf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dd41:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd45:	80 f9 02             	cmp    cl,0x2
c000dd48:	0f 85 96 00 00 00    	jne    c000dde4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd4e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd53:	75 0e                	jne    c000dd63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd55:	84 c0                	test   al,al
c000dd57:	75 0a                	jne    c000dd63 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd59:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd5c:	83 e8 18             	sub    eax,0x18
c000dd5f:	a8 f7                	test   al,0xf7
c000dd61:	74 0a                	je     c000dd6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd63:	83 ec 0c             	sub    esp,0xc
c000dd66:	68 3a e5 01 c0       	push   0xc001e53a
c000dd6b:	eb 7f                	jmp    c000ddec <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd75:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd7d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd81:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd89:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd8d:	75 0c                	jne    c000dd9b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd8f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd94:	c1 e0 18             	shl    eax,0x18
c000dd97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd9b:	45                   	inc    ebp
c000dd9c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dda1:	c1 e1 10             	shl    ecx,0x10
c000dda4:	89 c8                	mov    eax,ecx
c000dda6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ddab:	c1 e1 08             	shl    ecx,0x8
c000ddae:	09 c1                	or     ecx,eax
c000ddb0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ddb4:	09 c1                	or     ecx,eax
c000ddb6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ddba:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ddbe:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ddc2:	c1 f8 03             	sar    eax,0x3
c000ddc5:	01 c2                	add    edx,eax
c000ddc7:	89 e8                	mov    eax,ebp
c000ddc9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ddcd:	39 c6                	cmp    esi,eax
c000ddcf:	7f b0                	jg     c000dd81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000ddd1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ddd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddd9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dddc:	7e 22                	jle    c000de00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ddde:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dde2:	eb 99                	jmp    c000dd7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dde4:	50                   	push   eax
c000dde5:	50                   	push   eax
c000dde6:	51                   	push   ecx
c000dde7:	68 48 e5 01 c0       	push   0xc001e548
c000ddec:	e8 67 c9 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000ddf1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddf4:	e8 e0 9b ff ff       	call   c00079d9 <free>
c000ddf9:	83 c4 10             	add    esp,0x10
c000ddfc:	31 ff                	xor    edi,edi
c000ddfe:	eb 0f                	jmp    c000de0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000de00:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de04:	89 30                	mov    DWORD PTR [eax],esi
c000de06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de0d:	89 30                	mov    DWORD PTR [eax],esi
c000de0f:	83 c4 1c             	add    esp,0x1c
c000de12:	89 f8                	mov    eax,edi
c000de14:	5b                   	pop    ebx
c000de15:	5e                   	pop    esi
c000de16:	5f                   	pop    edi
c000de17:	5d                   	pop    ebp
c000de18:	c3                   	ret    
c000de19:	90                   	nop

c000de1a <Video::putTGA(int, int, unsigned char*, int)>:
c000de1a:	55                   	push   ebp
c000de1b:	57                   	push   edi
c000de1c:	56                   	push   esi
c000de1d:	53                   	push   ebx
c000de1e:	83 ec 28             	sub    esp,0x28
c000de21:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000de25:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de29:	50                   	push   eax
c000de2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de2e:	50                   	push   eax
c000de2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de37:	56                   	push   esi
c000de38:	e8 75 fe ff ff       	call   c000dcb2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000de3d:	83 c4 20             	add    esp,0x20
c000de40:	85 c0                	test   eax,eax
c000de42:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de46:	74 35                	je     c000de7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de48:	89 c7                	mov    edi,eax
c000de4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de52:	39 d8                	cmp    eax,ebx
c000de54:	7e 27                	jle    c000de7d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de56:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de5e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de62:	39 e8                	cmp    eax,ebp
c000de64:	7e 14                	jle    c000de7a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de66:	8b 06                	mov    eax,DWORD PTR [esi]
c000de68:	83 c7 04             	add    edi,0x4
c000de6b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de6e:	53                   	push   ebx
c000de6f:	55                   	push   ebp
c000de70:	45                   	inc    ebp
c000de71:	56                   	push   esi
c000de72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	eb e0                	jmp    c000de5a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de7a:	43                   	inc    ebx
c000de7b:	eb cd                	jmp    c000de4a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de7d:	83 c4 1c             	add    esp,0x1c
c000de80:	5b                   	pop    ebx
c000de81:	5e                   	pop    esi
c000de82:	5f                   	pop    edi
c000de83:	5d                   	pop    ebp
c000de84:	c3                   	ret    
c000de85:	66 90                	xchg   ax,ax
c000de87:	90                   	nop

c000de88 <ACPI::close(int, int, void*)>:
c000de88:	83 ec 1c             	sub    esp,0x1c
c000de8b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de93:	74 0b                	je     c000dea0 <ACPI::close(int, int, void*)+0x18>
c000de95:	b8 00 00 00 00       	mov    eax,0x0
c000de9a:	e9 9d 00 00 00       	jmp    c000df3c <ACPI::close(int, int, void*)+0xb4>
c000de9f:	90                   	nop
c000dea0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dea5:	75 29                	jne    c000ded0 <ACPI::close(int, int, void*)+0x48>
c000dea7:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000deac:	85 c0                	test   eax,eax
c000deae:	74 08                	je     c000deb8 <ACPI::close(int, int, void*)+0x30>
c000deb0:	a1 28 31 02 c0       	mov    eax,ds:0xc0023128
c000deb5:	ff d0                	call   eax
c000deb7:	90                   	nop
c000deb8:	83 ec 0c             	sub    esp,0xc
c000debb:	68 a4 e5 01 c0       	push   0xc001e5a4
c000dec0:	e8 e2 23 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000decd:	eb 6d                	jmp    c000df3c <ACPI::close(int, int, void*)+0xb4>
c000decf:	90                   	nop
c000ded0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ded5:	75 5d                	jne    c000df34 <ACPI::close(int, int, void*)+0xac>
c000ded7:	a1 24 31 02 c0       	mov    eax,ds:0xc0023124
c000dedc:	85 c0                	test   eax,eax
c000dede:	74 08                	je     c000dee8 <ACPI::close(int, int, void*)+0x60>
c000dee0:	a1 24 31 02 c0       	mov    eax,ds:0xc0023124
c000dee5:	ff d0                	call   eax
c000dee7:	90                   	nop
c000dee8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000deed:	8d 76 00             	lea    esi,[esi+0x0]
c000def0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000def4:	25 ff 00 00 00       	and    eax,0xff
c000def9:	83 e0 02             	and    eax,0x2
c000defc:	74 1e                	je     c000df1c <ACPI::close(int, int, void*)+0x94>
c000defe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000df05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df09:	89 c2                	mov    edx,eax
c000df0b:	ec                   	in     al,dx
c000df0c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000df10:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000df14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df18:	eb d6                	jmp    c000def0 <ACPI::close(int, int, void*)+0x68>
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000df23:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000df28:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000df2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df30:	ee                   	out    dx,al
c000df31:	8d 76 00             	lea    esi,[esi+0x0]
c000df34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df39:	8d 76 00             	lea    esi,[esi+0x0]
c000df3c:	83 c4 1c             	add    esp,0x1c
c000df3f:	c3                   	ret    

c000df40 <findRSDP()>:
c000df40:	83 ec 1c             	sub    esp,0x1c
c000df43:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000df48:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df4e:	83 e0 04             	and    eax,0x4
c000df51:	84 c0                	test   al,al
c000df53:	75 07                	jne    c000df5c <findRSDP()+0x1c>
c000df55:	b8 00 00 00 00       	mov    eax,0x0
c000df5a:	eb 70                	jmp    c000dfcc <findRSDP()+0x8c>
c000df5c:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000df61:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df66:	7f 1c                	jg     c000df84 <findRSDP()+0x44>
c000df68:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000df6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df73:	83 e2 fb             	and    edx,0xfffffffb
c000df76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df7c:	b8 00 00 00 00       	mov    eax,0x0
c000df81:	eb 49                	jmp    c000dfcc <findRSDP()+0x8c>
c000df83:	90                   	nop
c000df84:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df8c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df94:	77 2e                	ja     c000dfc4 <findRSDP()+0x84>
c000df96:	83 ec 04             	sub    esp,0x4
c000df99:	6a 08                	push   0x8
c000df9b:	68 3f e6 01 c0       	push   0xc001e63f
c000dfa0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfa4:	e8 07 24 ff ff       	call   c00003b0 <memcmp>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	85 c0                	test   eax,eax
c000dfae:	0f 94 c0             	sete   al
c000dfb1:	84 c0                	test   al,al
c000dfb3:	74 07                	je     c000dfbc <findRSDP()+0x7c>
c000dfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfb9:	eb 11                	jmp    c000dfcc <findRSDP()+0x8c>
c000dfbb:	90                   	nop
c000dfbc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dfc1:	eb c9                	jmp    c000df8c <findRSDP()+0x4c>
c000dfc3:	90                   	nop
c000dfc4:	b8 00 00 00 00       	mov    eax,0x0
c000dfc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfcc:	83 c4 1c             	add    esp,0x1c
c000dfcf:	c3                   	ret    

c000dfd0 <loadACPITables(unsigned char*)>:
c000dfd0:	57                   	push   edi
c000dfd1:	56                   	push   esi
c000dfd2:	53                   	push   ebx
c000dfd3:	83 ec 60             	sub    esp,0x60
c000dfd6:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000dfdb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfe1:	83 e0 04             	and    eax,0x4
c000dfe4:	84 c0                	test   al,al
c000dfe6:	0f 84 3c 02 00 00    	je     c000e228 <loadACPITables(unsigned char*)+0x258>
c000dfec:	a0 40 33 02 c0       	mov    al,ds:0xc0023340
c000dff1:	84 c0                	test   al,al
c000dff3:	74 77                	je     c000e06c <loadACPITables(unsigned char*)+0x9c>
c000dff5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dff9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dffd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e001:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e004:	83 e8 24             	sub    eax,0x24
c000e007:	c1 e8 03             	shr    eax,0x3
c000e00a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e00e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e016:	66 90                	xchg   ax,ax
c000e018:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e01c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e020:	0f 8d b6 00 00 00    	jge    c000e0dc <loadACPITables(unsigned char*)+0x10c>
c000e026:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e02a:	83 c0 24             	add    eax,0x24
c000e02d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e031:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e035:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e039:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e03d:	c1 e0 03             	shl    eax,0x3
c000e040:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e044:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e048:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e04b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e04d:	89 c1                	mov    ecx,eax
c000e04f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e054:	8d 50 01             	lea    edx,[eax+0x1]
c000e057:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c000e05d:	89 ca                	mov    edx,ecx
c000e05f:	89 14 c5 44 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcebc],edx
c000e066:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e06a:	eb ac                	jmp    c000e018 <loadACPITables(unsigned char*)+0x48>
c000e06c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e070:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e074:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e07b:	83 e8 24             	sub    eax,0x24
c000e07e:	c1 e8 02             	shr    eax,0x2
c000e081:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e085:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e08d:	8d 76 00             	lea    esi,[esi+0x0]
c000e090:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e094:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e098:	7d 42                	jge    c000e0dc <loadACPITables(unsigned char*)+0x10c>
c000e09a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e09e:	83 c0 24             	add    eax,0x24
c000e0a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e0ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e0b1:	c1 e0 02             	shl    eax,0x2
c000e0b4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e0b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0be:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e0c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e0c6:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c000e0cc:	89 ca                	mov    edx,ecx
c000e0ce:	89 14 c5 44 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcebc],edx
c000e0d5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e0d9:	eb b5                	jmp    c000e090 <loadACPITables(unsigned char*)+0xc0>
c000e0db:	90                   	nop
c000e0dc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0e4:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e0e9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0ed:	0f 8d 39 01 00 00    	jge    c000e22c <loadACPITables(unsigned char*)+0x25c>
c000e0f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0f7:	8b 04 c5 44 31 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcebc]
c000e0fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e106:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e10e:	25 ff 0f 00 00       	and    eax,0xfff
c000e113:	89 c6                	mov    esi,eax
c000e115:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c000e11b:	83 ec 0c             	sub    esp,0xc
c000e11e:	6a 01                	push   0x1
c000e120:	e8 e0 b3 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e12c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e132:	83 ec 0c             	sub    esp,0xc
c000e135:	6a 01                	push   0x1
c000e137:	6a 01                	push   0x1
c000e139:	50                   	push   eax
c000e13a:	52                   	push   edx
c000e13b:	53                   	push   ebx
c000e13c:	e8 53 bd ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e141:	83 c4 20             	add    esp,0x20
c000e144:	09 f0                	or     eax,esi
c000e146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e14a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e14e:	c1 e0 03             	shl    eax,0x3
c000e151:	05 40 31 02 c0       	add    eax,0xc0023140
c000e156:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e15e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e162:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e16a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e16e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e172:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e176:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e17a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e17e:	89 c6                	mov    esi,eax
c000e180:	89 d7                	mov    edi,edx
c000e182:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e184:	89 c8                	mov    eax,ecx
c000e186:	89 fa                	mov    edx,edi
c000e188:	89 f3                	mov    ebx,esi
c000e18a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e18e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e19a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e19d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1a5:	05 00 10 00 00       	add    eax,0x1000
c000e1aa:	c1 e8 0c             	shr    eax,0xc
c000e1ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1bd:	25 ff 0f 00 00       	and    eax,0xfff
c000e1c2:	89 c6                	mov    esi,eax
c000e1c4:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c000e1ca:	83 ec 0c             	sub    esp,0xc
c000e1cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1d1:	e8 2f b3 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e1dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1e3:	83 ec 0c             	sub    esp,0xc
c000e1e6:	6a 01                	push   0x1
c000e1e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1ec:	50                   	push   eax
c000e1ed:	52                   	push   edx
c000e1ee:	53                   	push   ebx
c000e1ef:	e8 a0 bc ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1f4:	83 c4 20             	add    esp,0x20
c000e1f7:	09 f0                	or     eax,esi
c000e1f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e201:	83 ec 0c             	sub    esp,0xc
c000e204:	50                   	push   eax
c000e205:	e8 2b b6 ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e211:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e215:	89 14 c5 44 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcebc],edx
c000e21c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e220:	e9 bf fe ff ff       	jmp    c000e0e4 <loadACPITables(unsigned char*)+0x114>
c000e225:	8d 76 00             	lea    esi,[esi+0x0]
c000e228:	90                   	nop
c000e229:	8d 76 00             	lea    esi,[esi+0x0]
c000e22c:	83 c4 60             	add    esp,0x60
c000e22f:	5b                   	pop    ebx
c000e230:	5e                   	pop    esi
c000e231:	5f                   	pop    edi
c000e232:	c3                   	ret    
c000e233:	90                   	nop

c000e234 <findRSDT(unsigned char*)>:
c000e234:	57                   	push   edi
c000e235:	56                   	push   esi
c000e236:	53                   	push   ebx
c000e237:	83 ec 50             	sub    esp,0x50
c000e23a:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e23f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e245:	83 e0 04             	and    eax,0x4
c000e248:	84 c0                	test   al,al
c000e24a:	75 0c                	jne    c000e258 <findRSDT(unsigned char*)+0x24>
c000e24c:	b8 00 00 00 00       	mov    eax,0x0
c000e251:	e9 26 01 00 00       	jmp    c000e37c <findRSDT(unsigned char*)+0x148>
c000e256:	66 90                	xchg   ax,ax
c000e258:	89 e0                	mov    eax,esp
c000e25a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e25e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e262:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e266:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e26e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e272:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e276:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e27a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e27e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e282:	89 c6                	mov    esi,eax
c000e284:	89 d7                	mov    edi,edx
c000e286:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e288:	89 c8                	mov    eax,ecx
c000e28a:	89 fa                	mov    edx,edi
c000e28c:	89 f3                	mov    ebx,esi
c000e28e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e292:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e296:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e29a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e29e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e2a2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e2aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e2c2:	25 ff 0f 00 00       	and    eax,0xfff
c000e2c7:	89 c6                	mov    esi,eax
c000e2c9:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c000e2cf:	83 ec 0c             	sub    esp,0xc
c000e2d2:	6a 02                	push   0x2
c000e2d4:	e8 2c b2 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c000e2d9:	83 c4 10             	add    esp,0x10
c000e2dc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	6a 01                	push   0x1
c000e2eb:	6a 02                	push   0x2
c000e2ed:	50                   	push   eax
c000e2ee:	52                   	push   edx
c000e2ef:	53                   	push   ebx
c000e2f0:	e8 9f bb ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2f5:	83 c4 20             	add    esp,0x20
c000e2f8:	09 f0                	or     eax,esi
c000e2fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e302:	25 ff 0f 00 00       	and    eax,0xfff
c000e307:	89 c6                	mov    esi,eax
c000e309:	8b 1d 30 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c30
c000e30f:	83 ec 0c             	sub    esp,0xc
c000e312:	6a 02                	push   0x2
c000e314:	e8 ec b1 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e320:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e326:	83 ec 0c             	sub    esp,0xc
c000e329:	6a 01                	push   0x1
c000e32b:	6a 02                	push   0x2
c000e32d:	50                   	push   eax
c000e32e:	52                   	push   edx
c000e32f:	53                   	push   ebx
c000e330:	e8 5f bb ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e335:	83 c4 20             	add    esp,0x20
c000e338:	09 f0                	or     eax,esi
c000e33a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e33e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e343:	75 13                	jne    c000e358 <findRSDT(unsigned char*)+0x124>
c000e345:	c6 05 40 33 02 c0 00 	mov    BYTE PTR ds:0xc0023340,0x0
c000e34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e350:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e354:	eb 22                	jmp    c000e378 <findRSDT(unsigned char*)+0x144>
c000e356:	66 90                	xchg   ax,ax
c000e358:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e35d:	75 11                	jne    c000e370 <findRSDT(unsigned char*)+0x13c>
c000e35f:	c6 05 40 33 02 c0 01 	mov    BYTE PTR ds:0xc0023340,0x1
c000e366:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e36a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e36e:	eb 08                	jmp    c000e378 <findRSDT(unsigned char*)+0x144>
c000e370:	b8 00 00 00 00       	mov    eax,0x0
c000e375:	eb 05                	jmp    c000e37c <findRSDT(unsigned char*)+0x148>
c000e377:	90                   	nop
c000e378:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e37c:	83 c4 50             	add    esp,0x50
c000e37f:	5b                   	pop    ebx
c000e380:	5e                   	pop    esi
c000e381:	5f                   	pop    edi
c000e382:	c3                   	ret    
c000e383:	90                   	nop

c000e384 <findDataTable(unsigned char*, char*)>:
c000e384:	83 ec 1c             	sub    esp,0x1c
c000e387:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e38c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e392:	83 e0 04             	and    eax,0x4
c000e395:	84 c0                	test   al,al
c000e397:	75 07                	jne    c000e3a0 <findDataTable(unsigned char*, char*)+0x1c>
c000e399:	b8 00 00 00 00       	mov    eax,0x0
c000e39e:	eb 58                	jmp    c000e3f8 <findDataTable(unsigned char*, char*)+0x74>
c000e3a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3a8:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000e3ad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e3b1:	7d 3d                	jge    c000e3f0 <findDataTable(unsigned char*, char*)+0x6c>
c000e3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b7:	c1 e0 03             	shl    eax,0x3
c000e3ba:	05 40 31 02 c0       	add    eax,0xc0023140
c000e3bf:	83 ec 04             	sub    esp,0x4
c000e3c2:	6a 04                	push   0x4
c000e3c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3c8:	50                   	push   eax
c000e3c9:	e8 e2 1f ff ff       	call   c00003b0 <memcmp>
c000e3ce:	83 c4 10             	add    esp,0x10
c000e3d1:	85 c0                	test   eax,eax
c000e3d3:	0f 94 c0             	sete   al
c000e3d6:	84 c0                	test   al,al
c000e3d8:	74 0e                	je     c000e3e8 <findDataTable(unsigned char*, char*)+0x64>
c000e3da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3de:	8b 04 c5 44 31 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcebc]
c000e3e5:	eb 11                	jmp    c000e3f8 <findDataTable(unsigned char*, char*)+0x74>
c000e3e7:	90                   	nop
c000e3e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3ec:	eb ba                	jmp    c000e3a8 <findDataTable(unsigned char*, char*)+0x24>
c000e3ee:	66 90                	xchg   ax,ax
c000e3f0:	b8 00 00 00 00       	mov    eax,0x0
c000e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3f8:	83 c4 1c             	add    esp,0x1c
c000e3fb:	c3                   	ret    

c000e3fc <scanMADT()>:
c000e3fc:	53                   	push   ebx
c000e3fd:	83 ec 38             	sub    esp,0x38
c000e400:	a1 60 0b 02 c0       	mov    eax,ds:0xc0020b60
c000e405:	25 00 04 00 00       	and    eax,0x400
c000e40a:	74 14                	je     c000e420 <scanMADT()+0x24>
c000e40c:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e411:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e417:	83 e2 fb             	and    edx,0xfffffffb
c000e41a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e420:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e425:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e42b:	83 e0 04             	and    eax,0x4
c000e42e:	84 c0                	test   al,al
c000e430:	0f 84 8a 04 00 00    	je     c000e8c0 <scanMADT()+0x4c4>
c000e436:	e8 05 fb ff ff       	call   c000df40 <findRSDP()>
c000e43b:	a3 4c 33 02 c0       	mov    ds:0xc002334c,eax
c000e440:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000e445:	85 c0                	test   eax,eax
c000e447:	75 1b                	jne    c000e464 <scanMADT()+0x68>
c000e449:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e44e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e454:	83 e2 fb             	and    edx,0xfffffffb
c000e457:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e45d:	e9 66 04 00 00       	jmp    c000e8c8 <scanMADT()+0x4cc>
c000e462:	66 90                	xchg   ax,ax
c000e464:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	50                   	push   eax
c000e46d:	e8 c2 fd ff ff       	call   c000e234 <findRSDT(unsigned char*)>
c000e472:	83 c4 10             	add    esp,0x10
c000e475:	a3 48 33 02 c0       	mov    ds:0xc0023348,eax
c000e47a:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000e47f:	85 c0                	test   eax,eax
c000e481:	75 19                	jne    c000e49c <scanMADT()+0xa0>
c000e483:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e488:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e48e:	83 e2 fb             	and    edx,0xfffffffb
c000e491:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e497:	e9 2c 04 00 00       	jmp    c000e8c8 <scanMADT()+0x4cc>
c000e49c:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	50                   	push   eax
c000e4a5:	e8 26 fb ff ff       	call   c000dfd0 <loadACPITables(unsigned char*)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000e4b2:	83 ec 08             	sub    esp,0x8
c000e4b5:	68 48 e6 01 c0       	push   0xc001e648
c000e4ba:	50                   	push   eax
c000e4bb:	e8 c4 fe ff ff       	call   c000e384 <findDataTable(unsigned char*, char*)>
c000e4c0:	83 c4 10             	add    esp,0x10
c000e4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4c7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e4cc:	75 1a                	jne    c000e4e8 <scanMADT()+0xec>
c000e4ce:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000e4d3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e4d9:	83 e2 fe             	and    edx,0xfffffffe
c000e4dc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4e2:	e9 e1 03 00 00       	jmp    c000e8c8 <scanMADT()+0x4cc>
c000e4e7:	90                   	nop
c000e4e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4f7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4fb:	0f 87 c7 03 00 00    	ja     c000e8c8 <scanMADT()+0x4cc>
c000e501:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e509:	0f 87 b9 03 00 00    	ja     c000e8c8 <scanMADT()+0x4cc>
c000e50f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e513:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e517:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e51b:	8d 50 01             	lea    edx,[eax+0x1]
c000e51e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e522:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e526:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e52a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e532:	8d 50 01             	lea    edx,[eax+0x1]
c000e535:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e539:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e53d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e541:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e545:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e54a:	0f 86 74 03 00 00    	jbe    c000e8c4 <scanMADT()+0x4c8>
c000e550:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e555:	75 5d                	jne    c000e5b4 <scanMADT()+0x1b8>
c000e557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55b:	8d 50 01             	lea    edx,[eax+0x1]
c000e55e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e562:	8a 15 40 35 02 c0    	mov    dl,BYTE PTR ds:0xc0023540
c000e568:	81 e2 ff 00 00 00    	and    edx,0xff
c000e56e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e572:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e576:	88 82 80 35 02 c0    	mov    BYTE PTR [edx-0x3ffdca80],al
c000e57c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e580:	8d 42 01             	lea    eax,[edx+0x1]
c000e583:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e587:	a0 40 35 02 c0       	mov    al,ds:0xc0023540
c000e58c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e58f:	88 0d 40 35 02 c0    	mov    BYTE PTR ds:0xc0023540,cl
c000e595:	25 ff 00 00 00       	and    eax,0xff
c000e59a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e59e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e5a2:	88 90 60 35 02 c0    	mov    BYTE PTR [eax-0x3ffdcaa0],dl
c000e5a8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5ad:	e9 f6 02 00 00       	jmp    c000e8a8 <scanMADT()+0x4ac>
c000e5b2:	66 90                	xchg   ax,ax
c000e5b4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e5b9:	0f 85 29 01 00 00    	jne    c000e6e8 <scanMADT()+0x2ec>
c000e5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5ca:	8a 15 00 34 02 c0    	mov    dl,BYTE PTR ds:0xc0023400
c000e5d0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5de:	88 82 20 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcbe0],al
c000e5e4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f0:	01 d0                	add    eax,edx
c000e5f2:	83 c0 2c             	add    eax,0x2c
c000e5f5:	8a 00                	mov    al,BYTE PTR [eax]
c000e5f7:	31 d2                	xor    edx,edx
c000e5f9:	88 c2                	mov    dl,al
c000e5fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ff:	8d 48 01             	lea    ecx,[eax+0x1]
c000e602:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e606:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e60a:	25 ff 00 00 00       	and    eax,0xff
c000e60f:	c1 e0 08             	shl    eax,0x8
c000e612:	89 d1                	mov    ecx,edx
c000e614:	09 c1                	or     ecx,eax
c000e616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e61a:	8d 50 02             	lea    edx,[eax+0x2]
c000e61d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e621:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e625:	25 ff 00 00 00       	and    eax,0xff
c000e62a:	c1 e0 10             	shl    eax,0x10
c000e62d:	09 c1                	or     ecx,eax
c000e62f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e633:	8d 50 03             	lea    edx,[eax+0x3]
c000e636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e63e:	25 ff 00 00 00       	and    eax,0xff
c000e643:	c1 e0 18             	shl    eax,0x18
c000e646:	09 c1                	or     ecx,eax
c000e648:	89 ca                	mov    edx,ecx
c000e64a:	a0 00 34 02 c0       	mov    al,ds:0xc0023400
c000e64f:	25 ff 00 00 00       	and    eax,0xff
c000e654:	89 14 85 40 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcbc0],edx
c000e65b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e660:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e668:	01 d0                	add    eax,edx
c000e66a:	83 c0 2c             	add    eax,0x2c
c000e66d:	8a 00                	mov    al,BYTE PTR [eax]
c000e66f:	31 d2                	xor    edx,edx
c000e671:	88 c2                	mov    dl,al
c000e673:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e677:	8d 48 01             	lea    ecx,[eax+0x1]
c000e67a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e67e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e682:	25 ff 00 00 00       	and    eax,0xff
c000e687:	c1 e0 08             	shl    eax,0x8
c000e68a:	89 d1                	mov    ecx,edx
c000e68c:	09 c1                	or     ecx,eax
c000e68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e692:	8d 50 02             	lea    edx,[eax+0x2]
c000e695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e699:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e69d:	25 ff 00 00 00       	and    eax,0xff
c000e6a2:	c1 e0 10             	shl    eax,0x10
c000e6a5:	09 c1                	or     ecx,eax
c000e6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ab:	8d 50 03             	lea    edx,[eax+0x3]
c000e6ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e6b6:	25 ff 00 00 00       	and    eax,0xff
c000e6bb:	c1 e0 18             	shl    eax,0x18
c000e6be:	09 c1                	or     ecx,eax
c000e6c0:	89 ca                	mov    edx,ecx
c000e6c2:	a0 00 34 02 c0       	mov    al,ds:0xc0023400
c000e6c7:	25 ff 00 00 00       	and    eax,0xff
c000e6cc:	89 14 85 c0 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb40],edx
c000e6d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6d8:	a0 00 34 02 c0       	mov    al,ds:0xc0023400
c000e6dd:	40                   	inc    eax
c000e6de:	a2 00 34 02 c0       	mov    ds:0xc0023400,al
c000e6e3:	e9 c0 01 00 00       	jmp    c000e8a8 <scanMADT()+0x4ac>
c000e6e8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6ed:	0f 85 fd 00 00 00    	jne    c000e7f0 <scanMADT()+0x3f4>
c000e6f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e6fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e702:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e706:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e70a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70e:	8d 50 01             	lea    edx,[eax+0x1]
c000e711:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e715:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e719:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e71d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e721:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e725:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e729:	01 d0                	add    eax,edx
c000e72b:	83 c0 2c             	add    eax,0x2c
c000e72e:	8a 00                	mov    al,BYTE PTR [eax]
c000e730:	31 d2                	xor    edx,edx
c000e732:	88 c2                	mov    dl,al
c000e734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e738:	8d 48 01             	lea    ecx,[eax+0x1]
c000e73b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e73f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e743:	25 ff 00 00 00       	and    eax,0xff
c000e748:	c1 e0 08             	shl    eax,0x8
c000e74b:	89 d1                	mov    ecx,edx
c000e74d:	09 c1                	or     ecx,eax
c000e74f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e753:	8d 50 02             	lea    edx,[eax+0x2]
c000e756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e75a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e75e:	25 ff 00 00 00       	and    eax,0xff
c000e763:	c1 e0 10             	shl    eax,0x10
c000e766:	09 c1                	or     ecx,eax
c000e768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e76c:	8d 50 03             	lea    edx,[eax+0x3]
c000e76f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e773:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e777:	25 ff 00 00 00       	and    eax,0xff
c000e77c:	c1 e0 18             	shl    eax,0x18
c000e77f:	09 c8                	or     eax,ecx
c000e781:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e785:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e78a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e78e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e792:	01 d0                	add    eax,edx
c000e794:	83 c0 2c             	add    eax,0x2c
c000e797:	8a 00                	mov    al,BYTE PTR [eax]
c000e799:	25 ff 00 00 00       	and    eax,0xff
c000e79e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7a9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e7ad:	81 e2 ff 00 00 00    	and    edx,0xff
c000e7b3:	c1 e2 08             	shl    edx,0x8
c000e7b6:	09 d0                	or     eax,edx
c000e7b8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e7bd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7c2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7c6:	25 ff 00 00 00       	and    eax,0xff
c000e7cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7cf:	88 90 c0 fa 01 c0    	mov    BYTE PTR [eax-0x3ffe0540],dl
c000e7d5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7d9:	31 d2                	xor    edx,edx
c000e7db:	88 c2                	mov    dl,al
c000e7dd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e7e2:	66 89 84 12 e0 33 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcc20],ax
c000e7ea:	e9 b9 00 00 00       	jmp    c000e8a8 <scanMADT()+0x4ac>
c000e7ef:	90                   	nop
c000e7f0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7f5:	0f 85 a1 00 00 00    	jne    c000e89c <scanMADT()+0x4a0>
c000e7fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e806:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e80a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e80e:	25 ff 00 00 00       	and    eax,0xff
c000e813:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e817:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e81b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e81f:	01 d0                	add    eax,edx
c000e821:	83 c0 2c             	add    eax,0x2c
c000e824:	8a 00                	mov    al,BYTE PTR [eax]
c000e826:	31 d2                	xor    edx,edx
c000e828:	88 c2                	mov    dl,al
c000e82a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e82e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e831:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e835:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e839:	25 ff 00 00 00       	and    eax,0xff
c000e83e:	c1 e0 08             	shl    eax,0x8
c000e841:	09 d0                	or     eax,edx
c000e843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e847:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e84c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e850:	8d 50 01             	lea    edx,[eax+0x1]
c000e853:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e85b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e85f:	25 ff 00 00 00       	and    eax,0xff
c000e864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	c1 e0 08             	shl    eax,0x8
c000e86f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e873:	89 c1                	mov    ecx,eax
c000e875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e879:	c1 e0 18             	shl    eax,0x18
c000e87c:	89 c3                	mov    ebx,eax
c000e87e:	a1 50 33 02 c0       	mov    eax,ds:0xc0023350
c000e883:	8d 50 01             	lea    edx,[eax+0x1]
c000e886:	89 15 50 33 02 c0    	mov    DWORD PTR ds:0xc0023350,edx
c000e88c:	09 d9                	or     ecx,ebx
c000e88e:	89 ca                	mov    edx,ecx
c000e890:	89 14 85 60 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcca0],edx
c000e897:	eb 0f                	jmp    c000e8a8 <scanMADT()+0x4ac>
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e8a1:	75 05                	jne    c000e8a8 <scanMADT()+0x4ac>
c000e8a3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e8a8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e8ac:	31 d2                	xor    edx,edx
c000e8ae:	88 c2                	mov    dl,al
c000e8b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e8b4:	01 d0                	add    eax,edx
c000e8b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8ba:	e9 31 fc ff ff       	jmp    c000e4f0 <scanMADT()+0xf4>
c000e8bf:	90                   	nop
c000e8c0:	90                   	nop
c000e8c1:	eb 05                	jmp    c000e8c8 <scanMADT()+0x4cc>
c000e8c3:	90                   	nop
c000e8c4:	90                   	nop
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	83 c4 38             	add    esp,0x38
c000e8cb:	5b                   	pop    ebx
c000e8cc:	c3                   	ret    
c000e8cd:	90                   	nop
c000e8ce:	66 90                	xchg   ax,ax

c000e8d0 <ACPI::ACPI()>:
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d7:	83 ec 08             	sub    esp,0x8
c000e8da:	68 4d e6 01 c0       	push   0xc001e64d
c000e8df:	50                   	push   eax
c000e8e0:	e8 4b d4 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000e8e5:	83 c4 10             	add    esp,0x10
c000e8e8:	ba 84 e7 01 c0       	mov    edx,0xc001e784
c000e8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f1:	89 10                	mov    DWORD PTR [eax],edx
c000e8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e902:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e910:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e91a:	e8 dd fa ff ff       	call   c000e3fc <scanMADT()>
c000e91f:	90                   	nop
c000e920:	83 c4 0c             	add    esp,0xc
c000e923:	c3                   	ret    

c000e924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e924:	83 ec 2c             	sub    esp,0x2c
c000e927:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e92b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e92f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e933:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e937:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e93c:	88 d0                	mov    al,dl
c000e93e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e942:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e947:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e94f:	90                   	nop
c000e950:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e954:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e95a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e95e:	0f 8d 9c 00 00 00    	jge    c000ea00 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e964:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e96c:	83 c2 2a             	add    edx,0x2a
c000e96f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e973:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e978:	75 7a                	jne    c000e9f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e97a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e97e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e982:	83 c2 2a             	add    edx,0x2a
c000e985:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e989:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e98d:	75 65                	jne    c000e9f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e98f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e994:	74 3a                	je     c000e9d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e996:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e99a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e99e:	83 c2 2a             	add    edx,0x2a
c000e9a1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9ac:	39 c2                	cmp    edx,eax
c000e9ae:	74 10                	je     c000e9c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	68 c8 e5 01 c0       	push   0xc001e5c8
c000e9b8:	e8 ea 18 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000e9bd:	83 c4 10             	add    esp,0x10
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	68 52 e6 01 c0       	push   0xc001e652
c000e9c8:	e8 da 18 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000e9cd:	83 c4 10             	add    esp,0x10
c000e9d0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e9d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9dc:	83 c2 2a             	add    edx,0x2a
c000e9df:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e9e3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9e5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9e8:	89 01                	mov    DWORD PTR [ecx],eax
c000e9ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9ed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9f2:	66 90                	xchg   ax,ax
c000e9f4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9f8:	e9 53 ff ff ff       	jmp    c000e950 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000ea00:	90                   	nop
c000ea01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea05:	83 c4 2c             	add    esp,0x2c
c000ea08:	c2 04 00             	ret    0x4
c000ea0b:	90                   	nop

c000ea0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ea0c:	83 ec 1c             	sub    esp,0x1c
c000ea0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea13:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ea17:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea1b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ea20:	88 c8                	mov    al,cl
c000ea22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea26:	88 d0                	mov    al,dl
c000ea28:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ea2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea30:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea3d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ea41:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea49:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea53:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea63:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea69:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea6d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea74:	83 c2 2a             	add    edx,0x2a
c000ea77:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea89:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea90:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea98:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea9e:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaa5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eaab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaaf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eab5:	3d 00 02 00 00       	cmp    eax,0x200
c000eaba:	75 10                	jne    c000eacc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eabc:	83 ec 0c             	sub    esp,0xc
c000eabf:	68 61 e6 01 c0       	push   0xc001e661
c000eac4:	e8 de 17 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	90                   	nop
c000eacd:	83 c4 1c             	add    esp,0x1c
c000ead0:	c3                   	ret    
c000ead1:	90                   	nop
c000ead2:	66 90                	xchg   ax,ax

c000ead4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ead4:	b8 00 00 00 00       	mov    eax,0x0
c000ead9:	c3                   	ret    
c000eada:	66 90                	xchg   ax,ax

c000eadc <ACPI::detectPCI()>:
c000eadc:	53                   	push   ebx
c000eadd:	83 ec 28             	sub    esp,0x28
c000eae0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eae5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaea:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000eaef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eaf5:	83 e0 04             	and    eax,0x4
c000eaf8:	84 c0                	test   al,al
c000eafa:	74 2c                	je     c000eb28 <ACPI::detectPCI()+0x4c>
c000eafc:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000eb01:	83 ec 08             	sub    esp,0x8
c000eb04:	68 7e e6 01 c0       	push   0xc001e67e
c000eb09:	50                   	push   eax
c000eb0a:	e8 75 f8 ff ff       	call   c000e384 <findDataTable(unsigned char*, char*)>
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb16:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb1b:	74 0b                	je     c000eb28 <ACPI::detectPCI()+0x4c>
c000eb1d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb22:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb27:	90                   	nop
c000eb28:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eb30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb34:	8a 00                	mov    al,BYTE PTR [eax]
c000eb36:	3c 01                	cmp    al,0x1
c000eb38:	75 0e                	jne    c000eb48 <ACPI::detectPCI()+0x6c>
c000eb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb44:	eb 2a                	jmp    c000eb70 <ACPI::detectPCI()+0x94>
c000eb46:	66 90                	xchg   ax,ax
c000eb48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb4c:	8a 00                	mov    al,BYTE PTR [eax]
c000eb4e:	3c 02                	cmp    al,0x2
c000eb50:	75 1e                	jne    c000eb70 <ACPI::detectPCI()+0x94>
c000eb52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb57:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb5c:	74 12                	je     c000eb70 <ACPI::detectPCI()+0x94>
c000eb5e:	83 ec 0c             	sub    esp,0xc
c000eb61:	68 f8 e5 01 c0       	push   0xc001e5f8
c000eb66:	e8 3c 17 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb74:	83 f0 01             	xor    eax,0x1
c000eb77:	84 c0                	test   al,al
c000eb79:	74 41                	je     c000ebbc <ACPI::detectPCI()+0xe0>
c000eb7b:	e8 d0 15 ff ff       	call   c0000150 <manualPCIProbe>
c000eb80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb84:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb89:	75 0d                	jne    c000eb98 <ACPI::detectPCI()+0xbc>
c000eb8b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb90:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb95:	eb 25                	jmp    c000ebbc <ACPI::detectPCI()+0xe0>
c000eb97:	90                   	nop
c000eb98:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb9d:	75 1d                	jne    c000ebbc <ACPI::detectPCI()+0xe0>
c000eb9f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eba4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eba9:	74 11                	je     c000ebbc <ACPI::detectPCI()+0xe0>
c000ebab:	83 ec 0c             	sub    esp,0xc
c000ebae:	68 f8 e5 01 c0       	push   0xc001e5f8
c000ebb3:	e8 ef 16 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c000ebb8:	83 c4 10             	add    esp,0x10
c000ebbb:	90                   	nop
c000ebbc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ebc1:	0f 84 85 00 00 00    	je     c000ec4c <ACPI::detectPCI()+0x170>
c000ebc7:	83 ec 0c             	sub    esp,0xc
c000ebca:	68 83 e6 01 c0       	push   0xc001e683
c000ebcf:	e8 4f 8e ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ebdf:	83 ec 0c             	sub    esp,0xc
c000ebe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ebe6:	e8 de 8d ff ff       	call   c00079c9 <malloc>
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	89 c3                	mov    ebx,eax
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	53                   	push   ebx
c000ebf4:	e8 6d 9b 00 00       	call   c0018766 <PCI::PCI()>
c000ebf9:	83 c4 10             	add    esp,0x10
c000ebfc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ec00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec0b:	50                   	push   eax
c000ec0c:	e8 87 cf ff ff       	call   c000bb98 <Device::addChild(Device*)>
c000ec11:	83 c4 10             	add    esp,0x10
c000ec14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec18:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec1a:	83 c0 08             	add    eax,0x8
c000ec1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec1f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ec24:	74 0a                	je     c000ec30 <ACPI::detectPCI()+0x154>
c000ec26:	ba 01 00 00 00       	mov    edx,0x1
c000ec2b:	eb 0b                	jmp    c000ec38 <ACPI::detectPCI()+0x15c>
c000ec2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec30:	ba 02 00 00 00       	mov    edx,0x2
c000ec35:	8d 76 00             	lea    esi,[esi+0x0]
c000ec38:	6a 00                	push   0x0
c000ec3a:	6a 00                	push   0x0
c000ec3c:	52                   	push   edx
c000ec3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec41:	ff d0                	call   eax
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	e9 91 00 00 00       	jmp    c000ecdc <ACPI::detectPCI()+0x200>
c000ec4b:	90                   	nop
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 9b e6 01 c0       	push   0xc001e69b
c000ec54:	e8 ca 8d ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec63:	83 ec 0c             	sub    esp,0xc
c000ec66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec6a:	e8 5a 8d ff ff       	call   c00079c9 <malloc>
c000ec6f:	83 c4 10             	add    esp,0x10
c000ec72:	89 c3                	mov    ebx,eax
c000ec74:	83 ec 0c             	sub    esp,0xc
c000ec77:	53                   	push   ebx
c000ec78:	e8 15 a6 00 00       	call   c0019292 <IDE::IDE()>
c000ec7d:	83 c4 10             	add    esp,0x10
c000ec80:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec88:	83 ec 08             	sub    esp,0x8
c000ec8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec8f:	50                   	push   eax
c000ec90:	e8 03 cf ff ff       	call   c000bb98 <Device::addChild(Device*)>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec9c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eca6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecaa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ecb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ecc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc6:	83 c0 08             	add    eax,0x8
c000ecc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eccb:	6a 00                	push   0x0
c000eccd:	6a 00                	push   0x0
c000eccf:	6a 00                	push   0x0
c000ecd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ecd5:	ff d0                	call   eax
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	66 90                	xchg   ax,ax
c000ecdc:	90                   	nop
c000ecdd:	83 c4 28             	add    esp,0x28
c000ece0:	5b                   	pop    ebx
c000ece1:	c3                   	ret    
c000ece2:	66 90                	xchg   ax,ax

c000ece4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ece4:	83 ec 1c             	sub    esp,0x1c
c000ece7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eceb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecf2:	8b 15 48 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b48
c000ecf8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecfc:	25 ff 00 00 00       	and    eax,0xff
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	52                   	push   edx
c000ed06:	e8 af 83 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ed12:	8b 15 48 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b48
c000ed18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ed1c:	25 ff 00 00 00       	and    eax,0xff
c000ed21:	83 ec 04             	sub    esp,0x4
c000ed24:	6a 01                	push   0x1
c000ed26:	50                   	push   eax
c000ed27:	52                   	push   edx
c000ed28:	e8 a3 84 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ed2d:	83 c4 10             	add    esp,0x10
c000ed30:	90                   	nop
c000ed31:	83 c4 1c             	add    esp,0x1c
c000ed34:	c3                   	ret    
c000ed35:	90                   	nop
c000ed36:	66 90                	xchg   ax,ax

c000ed38 <ACPI::sleep()>:
c000ed38:	83 ec 0c             	sub    esp,0xc
c000ed3b:	a1 20 31 02 c0       	mov    eax,ds:0xc0023120
c000ed40:	85 c0                	test   eax,eax
c000ed42:	74 08                	je     c000ed4c <ACPI::sleep()+0x14>
c000ed44:	a1 20 31 02 c0       	mov    eax,ds:0xc0023120
c000ed49:	ff d0                	call   eax
c000ed4b:	90                   	nop
c000ed4c:	90                   	nop
c000ed4d:	83 c4 0c             	add    esp,0xc
c000ed50:	c3                   	ret    
c000ed51:	90                   	nop
c000ed52:	66 90                	xchg   ax,ax

c000ed54 <ACPI::open(int, int, void*)>:
c000ed54:	57                   	push   edi
c000ed55:	56                   	push   esi
c000ed56:	53                   	push   ebx
c000ed57:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed5d:	83 ec 0c             	sub    esp,0xc
c000ed60:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed67:	e8 70 fd ff ff       	call   c000eadc <ACPI::detectPCI()>
c000ed6c:	83 c4 10             	add    esp,0x10
c000ed6f:	83 ec 0c             	sub    esp,0xc
c000ed72:	68 20 e6 01 c0       	push   0xc001e620
c000ed77:	e8 a7 8c ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	83 ec 0c             	sub    esp,0xc
c000ed82:	68 b0 e6 01 c0       	push   0xc001e6b0
c000ed87:	e8 07 34 00 00       	call   c0012193 <Thr::loadKernelSymbolTable(char const*)>
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed97:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eda2:	83 ec 0c             	sub    esp,0xc
c000eda5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000edac:	e8 18 8c ff ff       	call   c00079c9 <malloc>
c000edb1:	83 c4 10             	add    esp,0x10
c000edb4:	89 c3                	mov    ebx,eax
c000edb6:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000edbb:	83 ec 04             	sub    esp,0x4
c000edbe:	50                   	push   eax
c000edbf:	68 ce e6 01 c0       	push   0xc001e6ce
c000edc4:	53                   	push   ebx
c000edc5:	e8 04 bf ff ff       	call   c000acce <File::File(char const*, Process*)>
c000edca:	83 c4 10             	add    esp,0x10
c000edcd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000edd4:	83 ec 08             	sub    esp,0x8
c000edd7:	6a 01                	push   0x1
c000edd9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ede0:	e8 a9 bf ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edef:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edf7:	75 17                	jne    c000ee10 <ACPI::open(int, int, void*)+0xbc>
c000edf9:	83 ec 0c             	sub    esp,0xc
c000edfc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee03:	e8 e4 bf ff ff       	call   c000adec <File::close()>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	eb 0b                	jmp    c000ee18 <ACPI::open(int, int, void*)+0xc4>
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee10:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ee18:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ee20:	74 1e                	je     c000ee40 <ACPI::open(int, int, void*)+0xec>
c000ee22:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ee29:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee2b:	83 c0 08             	add    eax,0x8
c000ee2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee30:	83 ec 0c             	sub    esp,0xc
c000ee33:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee3a:	ff d0                	call   eax
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	90                   	nop
c000ee40:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee47:	83 f0 01             	xor    eax,0x1
c000ee4a:	84 c0                	test   al,al
c000ee4c:	74 42                	je     c000ee90 <ACPI::open(int, int, void*)+0x13c>
c000ee4e:	83 ec 0c             	sub    esp,0xc
c000ee51:	68 ec e6 01 c0       	push   0xc001e6ec
c000ee56:	e8 c8 8b ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000ee5b:	83 c4 10             	add    esp,0x10
c000ee5e:	83 ec 04             	sub    esp,0x4
c000ee61:	6a 0c                	push   0xc
c000ee63:	68 07 e7 01 c0       	push   0xc001e707
c000ee68:	68 18 e7 01 c0       	push   0xc001e718
c000ee6d:	e8 20 1b 00 00       	call   c0010992 <Reg::readIntWithDefault(char*, char*, int)>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee7c:	83 ec 0c             	sub    esp,0xc
c000ee7f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee86:	e8 84 a8 ff ff       	call   c000970f <Virt::setupPageSwapping(int)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	66 90                	xchg   ax,ax
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	68 a0 d7 01 c0       	push   0xc001d7a0
c000ee98:	e8 86 8b ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eea7:	83 ec 08             	sub    esp,0x8
c000eeaa:	6a 12                	push   0x12
c000eeac:	50                   	push   eax
c000eead:	e8 fe cf ff ff       	call   c000beb0 <getDevicesOfType(DeviceType)>
c000eeb2:	83 c4 0c             	add    esp,0xc
c000eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eec2:	50                   	push   eax
c000eec3:	e8 e4 dc 00 00       	call   c001cbac <LinkedList<Device>::isEmpty()>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	83 f0 01             	xor    eax,0x1
c000eece:	84 c0                	test   al,al
c000eed0:	0f 84 46 01 00 00    	je     c000f01c <ACPI::open(int, int, void*)+0x2c8>
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eee0:	50                   	push   eax
c000eee1:	e8 e2 dc 00 00       	call   c001cbc8 <LinkedList<Device>::getFirstElement()>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eef0:	83 ec 0c             	sub    esp,0xc
c000eef3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eefa:	50                   	push   eax
c000eefb:	e8 d0 dc 00 00       	call   c001cbd0 <LinkedList<Device>::removeFirst()>
c000ef00:	83 c4 10             	add    esp,0x10
c000ef03:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ef0a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ef11:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ef18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef1c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ef22:	ba 09 00 00 00       	mov    edx,0x9
c000ef27:	fc                   	cld    
c000ef28:	89 c7                	mov    edi,eax
c000ef2a:	89 de                	mov    esi,ebx
c000ef2c:	89 d1                	mov    ecx,edx
c000ef2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ef37:	50                   	push   eax
c000ef38:	83 ec 24             	sub    esp,0x24
c000ef3b:	89 e0                	mov    eax,esp
c000ef3d:	89 c3                	mov    ebx,eax
c000ef3f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ef43:	ba 09 00 00 00       	mov    edx,0x9
c000ef48:	89 df                	mov    edi,ebx
c000ef4a:	89 c6                	mov    esi,eax
c000ef4c:	89 d1                	mov    ecx,edx
c000ef4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef50:	e8 f3 9c 00 00       	call   c0018c48 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef55:	83 c4 30             	add    esp,0x30
c000ef58:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef5f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef67:	0f 84 4b ff ff ff    	je     c000eeb8 <ACPI::open(int, int, void*)+0x164>
c000ef6d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef78:	83 ec 0c             	sub    esp,0xc
c000ef7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef82:	e8 42 8a ff ff       	call   c00079c9 <malloc>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	89 c3                	mov    ebx,eax
c000ef8c:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000ef91:	83 ec 04             	sub    esp,0x4
c000ef94:	50                   	push   eax
c000ef95:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef9c:	53                   	push   ebx
c000ef9d:	e8 2c bd ff ff       	call   c000acce <File::File(char const*, Process*)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efb6:	e8 41 c0 ff ff       	call   c000affc <File::exists()>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	84 c0                	test   al,al
c000efc0:	74 2a                	je     c000efec <ACPI::open(int, int, void*)+0x298>
c000efc2:	83 ec 08             	sub    esp,0x8
c000efc5:	6a 01                	push   0x1
c000efc7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efce:	e8 37 3c 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000efd3:	83 c4 10             	add    esp,0x10
c000efd6:	83 ec 08             	sub    esp,0x8
c000efd9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efe0:	50                   	push   eax
c000efe1:	e8 55 3e 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	8d 76 00             	lea    esi,[esi+0x0]
c000efec:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eff4:	0f 84 be fe ff ff    	je     c000eeb8 <ACPI::open(int, int, void*)+0x164>
c000effa:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f001:	8b 00                	mov    eax,DWORD PTR [eax]
c000f003:	83 c0 08             	add    eax,0x8
c000f006:	8b 00                	mov    eax,DWORD PTR [eax]
c000f008:	83 ec 0c             	sub    esp,0xc
c000f00b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f012:	ff d0                	call   eax
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	e9 9c fe ff ff       	jmp    c000eeb8 <ACPI::open(int, int, void*)+0x164>
c000f01c:	83 ec 0c             	sub    esp,0xc
c000f01f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f026:	50                   	push   eax
c000f027:	e8 7c db 00 00       	call   c001cba8 <LinkedList<Device>::~LinkedList()>
c000f02c:	83 c4 10             	add    esp,0x10
c000f02f:	8b 1d 48 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b48
c000f035:	83 ec 08             	sub    esp,0x8
c000f038:	6a 01                	push   0x1
c000f03a:	68 1f e7 01 c0       	push   0xc001e71f
c000f03f:	e8 c6 3b 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000f044:	83 c4 10             	add    esp,0x10
c000f047:	83 ec 08             	sub    esp,0x8
c000f04a:	53                   	push   ebx
c000f04b:	50                   	push   eax
c000f04c:	e8 ea 3d 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000f059:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f05f:	83 e0 04             	and    eax,0x4
c000f062:	84 c0                	test   al,al
c000f064:	0f 84 16 01 00 00    	je     c000f180 <ACPI::open(int, int, void*)+0x42c>
c000f06a:	83 ec 0c             	sub    esp,0xc
c000f06d:	68 3c e7 01 c0       	push   0xc001e73c
c000f072:	e8 ac 89 ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000f077:	83 c4 10             	add    esp,0x10
c000f07a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f085:	83 ec 0c             	sub    esp,0xc
c000f088:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f08f:	e8 35 89 ff ff       	call   c00079c9 <malloc>
c000f094:	83 c4 10             	add    esp,0x10
c000f097:	89 c3                	mov    ebx,eax
c000f099:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000f09e:	83 ec 04             	sub    esp,0x4
c000f0a1:	50                   	push   eax
c000f0a2:	68 59 e7 01 c0       	push   0xc001e759
c000f0a7:	53                   	push   ebx
c000f0a8:	e8 21 bc ff ff       	call   c000acce <File::File(char const*, Process*)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f0b7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0bf:	74 1b                	je     c000f0dc <ACPI::open(int, int, void*)+0x388>
c000f0c1:	83 ec 0c             	sub    esp,0xc
c000f0c4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0cb:	e8 2c bf ff ff       	call   c000affc <File::exists()>
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	84 c0                	test   al,al
c000f0d5:	74 05                	je     c000f0dc <ACPI::open(int, int, void*)+0x388>
c000f0d7:	b0 01                	mov    al,0x1
c000f0d9:	eb 05                	jmp    c000f0e0 <ACPI::open(int, int, void*)+0x38c>
c000f0db:	90                   	nop
c000f0dc:	b0 00                	mov    al,0x0
c000f0de:	66 90                	xchg   ax,ax
c000f0e0:	84 c0                	test   al,al
c000f0e2:	74 28                	je     c000f10c <ACPI::open(int, int, void*)+0x3b8>
c000f0e4:	83 ec 08             	sub    esp,0x8
c000f0e7:	6a 01                	push   0x1
c000f0e9:	68 59 e7 01 c0       	push   0xc001e759
c000f0ee:	e8 17 3b 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c000f0f3:	83 c4 10             	add    esp,0x10
c000f0f6:	83 ec 08             	sub    esp,0x8
c000f0f9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f100:	50                   	push   eax
c000f101:	e8 35 3d 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c000f106:	83 c4 10             	add    esp,0x10
c000f109:	8d 76 00             	lea    esi,[esi+0x0]
c000f10c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f114:	74 2a                	je     c000f140 <ACPI::open(int, int, void*)+0x3ec>
c000f116:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f11e:	74 20                	je     c000f140 <ACPI::open(int, int, void*)+0x3ec>
c000f120:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f127:	8b 00                	mov    eax,DWORD PTR [eax]
c000f129:	83 c0 08             	add    eax,0x8
c000f12c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12e:	83 ec 0c             	sub    esp,0xc
c000f131:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f138:	ff d0                	call   eax
c000f13a:	83 c4 10             	add    esp,0x10
c000f13d:	8d 76 00             	lea    esi,[esi+0x0]
c000f140:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000f145:	83 ec 08             	sub    esp,0x8
c000f148:	68 76 e7 01 c0       	push   0xc001e776
c000f14d:	50                   	push   eax
c000f14e:	e8 31 f2 ff ff       	call   c000e384 <findDataTable(unsigned char*, char*)>
c000f153:	83 c4 10             	add    esp,0x10
c000f156:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f15d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f165:	74 19                	je     c000f180 <ACPI::open(int, int, void*)+0x42c>
c000f167:	83 ec 08             	sub    esp,0x8
c000f16a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f171:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f178:	e8 67 fb ff ff       	call   c000ece4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f17d:	83 c4 10             	add    esp,0x10
c000f180:	b8 00 00 00 00       	mov    eax,0x0
c000f185:	81 c4 70 01 00 00    	add    esp,0x170
c000f18b:	5b                   	pop    ebx
c000f18c:	5e                   	pop    esi
c000f18d:	5f                   	pop    edi
c000f18e:	c3                   	ret    
c000f18f:	90                   	nop

c000f190 <CPU::close(int, int, void*)>:
c000f190:	31 c0                	xor    eax,eax
c000f192:	c3                   	ret    
c000f193:	90                   	nop

c000f194 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f194:	60                   	pusha  
c000f195:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f199:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f19d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f1a1:	9c                   	pushf  
c000f1a2:	fa                   	cli    
c000f1a3:	0f 09                	wbinvd 
c000f1a5:	0f 30                	wrmsr  
c000f1a7:	9d                   	popf   
c000f1a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1ac:	89 02                	mov    DWORD PTR [edx],eax
c000f1ae:	61                   	popa   
c000f1af:	c3                   	ret    

c000f1b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f1b0:	60                   	pusha  
c000f1b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1b5:	9c                   	pushf  
c000f1b6:	fa                   	cli    
c000f1b7:	0f 09                	wbinvd 
c000f1b9:	31 c0                	xor    eax,eax
c000f1bb:	31 d2                	xor    edx,edx
c000f1bd:	0f 32                	rdmsr  
c000f1bf:	9d                   	popf   
c000f1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1c4:	89 02                	mov    DWORD PTR [edx],eax
c000f1c6:	61                   	popa   
c000f1c7:	c3                   	ret    

c000f1c8 <CPU::AMD_K6_writeback(int, int, int)>:
c000f1c8:	56                   	push   esi
c000f1c9:	53                   	push   ebx
c000f1ca:	83 ec 10             	sub    esp,0x10
c000f1cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1d1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f1d6:	75 5d                	jne    c000f235 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1d8:	83 f8 08             	cmp    eax,0x8
c000f1db:	75 09                	jne    c000f1e6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f1dd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f1e2:	7e 13                	jle    c000f1f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1e4:	eb 30                	jmp    c000f216 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1e6:	83 f8 06             	cmp    eax,0x6
c000f1e9:	7c 4a                	jl     c000f235 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1eb:	83 f8 07             	cmp    eax,0x7
c000f1ee:	7e 07                	jle    c000f1f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1f0:	83 f8 09             	cmp    eax,0x9
c000f1f3:	74 21                	je     c000f216 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1f5:	eb 3e                	jmp    c000f235 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1f7:	89 e6                	mov    esi,esp
c000f1f9:	8b 1d 6c 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b6c
c000f1ff:	56                   	push   esi
c000f200:	c1 eb 15             	shr    ebx,0x15
c000f203:	68 82 00 00 c0       	push   0xc0000082
c000f208:	83 e3 7e             	and    ebx,0x7e
c000f20b:	e8 a0 ff ff ff       	call   c000f1b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f210:	56                   	push   esi
c000f211:	6a 00                	push   0x0
c000f213:	53                   	push   ebx
c000f214:	eb 12                	jmp    c000f228 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f216:	89 e3                	mov    ebx,esp
c000f218:	53                   	push   ebx
c000f219:	68 82 00 00 c0       	push   0xc0000082
c000f21e:	e8 8d ff ff ff       	call   c000f1b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f223:	53                   	push   ebx
c000f224:	6a 00                	push   0x0
c000f226:	6a 00                	push   0x0
c000f228:	68 82 00 00 c0       	push   0xc0000082
c000f22d:	e8 62 ff ff ff       	call   c000f194 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f232:	83 c4 18             	add    esp,0x18
c000f235:	83 c4 10             	add    esp,0x10
c000f238:	5b                   	pop    ebx
c000f239:	5e                   	pop    esi
c000f23a:	c3                   	ret    
c000f23b:	90                   	nop

c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f23c:	55                   	push   ebp
c000f23d:	57                   	push   edi
c000f23e:	56                   	push   esi
c000f23f:	53                   	push   ebx
c000f240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f244:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f248:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f24c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f250:	39 05 d0 fa 01 c0    	cmp    DWORD PTR ds:0xc001fad0,eax
c000f256:	75 23                	jne    c000f27b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f258:	a1 ac 35 02 c0       	mov    eax,ds:0xc00235ac
c000f25d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f261:	89 06                	mov    DWORD PTR [esi],eax
c000f263:	a1 a8 35 02 c0       	mov    eax,ds:0xc00235a8
c000f268:	89 07                	mov    DWORD PTR [edi],eax
c000f26a:	a1 a4 35 02 c0       	mov    eax,ds:0xc00235a4
c000f26f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f272:	a1 a0 35 02 c0       	mov    eax,ds:0xc00235a0
c000f277:	89 02                	mov    DWORD PTR [edx],eax
c000f279:	eb 3f                	jmp    c000f2ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f27b:	31 c9                	xor    ecx,ecx
c000f27d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f281:	0f a2                	cpuid  
c000f283:	89 06                	mov    DWORD PTR [esi],eax
c000f285:	89 1f                	mov    DWORD PTR [edi],ebx
c000f287:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f28b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f28e:	89 10                	mov    DWORD PTR [eax],edx
c000f290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f294:	a3 d0 fa 01 c0       	mov    ds:0xc001fad0,eax
c000f299:	8b 06                	mov    eax,DWORD PTR [esi]
c000f29b:	a3 ac 35 02 c0       	mov    ds:0xc00235ac,eax
c000f2a0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f2a2:	a3 a8 35 02 c0       	mov    ds:0xc00235a8,eax
c000f2a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f2aa:	a3 a4 35 02 c0       	mov    ds:0xc00235a4,eax
c000f2af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b5:	a3 a0 35 02 c0       	mov    ds:0xc00235a0,eax
c000f2ba:	5b                   	pop    ebx
c000f2bb:	5e                   	pop    esi
c000f2bc:	5f                   	pop    edi
c000f2bd:	5d                   	pop    ebp
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>:
c000f2c0:	83 ec 10             	sub    esp,0x10
c000f2c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c7:	50                   	push   eax
c000f2c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2cc:	50                   	push   eax
c000f2cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d1:	50                   	push   eax
c000f2d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d6:	50                   	push   eax
c000f2d7:	6a 01                	push   0x1
c000f2d9:	e8 5e ff ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2e2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2e6:	0f 95 c0             	setne  al
c000f2e9:	83 c4 24             	add    esp,0x24
c000f2ec:	c3                   	ret    
c000f2ed:	90                   	nop

c000f2ee <CPU::cpuidCheckECX(unsigned int)>:
c000f2ee:	83 ec 10             	sub    esp,0x10
c000f2f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f5:	50                   	push   eax
c000f2f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2fa:	50                   	push   eax
c000f2fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ff:	50                   	push   eax
c000f300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f304:	50                   	push   eax
c000f305:	6a 01                	push   0x1
c000f307:	e8 30 ff ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f30c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f310:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f314:	0f 95 c0             	setne  al
c000f317:	83 c4 24             	add    esp,0x24
c000f31a:	c3                   	ret    
c000f31b:	90                   	nop

c000f31c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f31c:	83 ec 10             	sub    esp,0x10
c000f31f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f323:	50                   	push   eax
c000f324:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f328:	50                   	push   eax
c000f329:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f32d:	50                   	push   eax
c000f32e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f332:	50                   	push   eax
c000f333:	6a 07                	push   0x7
c000f335:	e8 02 ff ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f33a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f33e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f342:	0f 95 c0             	setne  al
c000f345:	83 c4 24             	add    esp,0x24
c000f348:	c3                   	ret    
c000f349:	90                   	nop

c000f34a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f34a:	83 ec 10             	sub    esp,0x10
c000f34d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f351:	50                   	push   eax
c000f352:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f356:	50                   	push   eax
c000f357:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35b:	50                   	push   eax
c000f35c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f360:	50                   	push   eax
c000f361:	6a 07                	push   0x7
c000f363:	e8 d4 fe ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f368:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f36c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f370:	0f 95 c0             	setne  al
c000f373:	83 c4 24             	add    esp,0x24
c000f376:	c3                   	ret    
c000f377:	90                   	nop

c000f378 <CPU::CPU()>:
c000f378:	83 ec 0c             	sub    esp,0xc
c000f37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	68 99 e8 01 c0       	push   0xc001e899
c000f387:	50                   	push   eax
c000f388:	e8 a3 c9 ff ff       	call   c000bd30 <Device::Device(char const*)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	ba 20 e9 01 c0       	mov    edx,0xc001e920
c000f395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f399:	89 10                	mov    DWORD PTR [eax],edx
c000f39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ad:	05 78 01 00 00       	add    eax,0x178
c000f3b2:	83 ec 0c             	sub    esp,0xc
c000f3b5:	50                   	push   eax
c000f3b6:	e8 d3 7e ff ff       	call   c000728e <GDT::GDT()>
c000f3bb:	83 c4 10             	add    esp,0x10
c000f3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3c2:	05 7c 09 00 00       	add    eax,0x97c
c000f3c7:	83 ec 0c             	sub    esp,0xc
c000f3ca:	50                   	push   eax
c000f3cb:	e8 f4 80 ff ff       	call   c00074c4 <IDT::IDT()>
c000f3d0:	83 c4 10             	add    esp,0x10
c000f3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d7:	05 7c 11 00 00       	add    eax,0x117c
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	50                   	push   eax
c000f3e0:	e8 63 9a ff ff       	call   c0008e48 <TSS::TSS()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ec:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f401:	90                   	nop
c000f402:	83 c4 0c             	add    esp,0xc
c000f405:	c3                   	ret    

c000f406 <CPU::displayFeatures()>:
c000f406:	c3                   	ret    
c000f407:	90                   	nop

c000f408 <CPU::detectFeatures()>:
c000f408:	55                   	push   ebp
c000f409:	57                   	push   edi
c000f40a:	56                   	push   esi
c000f40b:	53                   	push   ebx
c000f40c:	83 ec 30             	sub    esp,0x30
c000f40f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f413:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f41d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f424:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f42a:	6a 0d                	push   0xd
c000f42c:	6a 00                	push   0x0
c000f42e:	55                   	push   ebp
c000f42f:	e8 bc 10 ff ff       	call   c00004f0 <memset>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000f43c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f443:	0f 84 d5 05 00 00    	je     c000fa1e <CPU::detectFeatures()+0x616>
c000f449:	83 ec 0c             	sub    esp,0xc
c000f44c:	89 ef                	mov    edi,ebp
c000f44e:	6a 10                	push   0x10
c000f450:	e8 6b fe ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f455:	83 e0 01             	and    eax,0x1
c000f458:	8d 14 00             	lea    edx,[eax+eax*1]
c000f45b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f461:	83 e0 fd             	and    eax,0xfffffffd
c000f464:	09 d0                	or     eax,edx
c000f466:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f46c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f473:	e8 48 fe ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f478:	83 e0 01             	and    eax,0x1
c000f47b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f482:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f488:	83 e0 fb             	and    eax,0xfffffffb
c000f48b:	09 d0                	or     eax,edx
c000f48d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f493:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f49a:	e8 21 fe ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f49f:	83 e0 01             	and    eax,0x1
c000f4a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f4a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4af:	83 e0 f7             	and    eax,0xfffffff7
c000f4b2:	09 d0                	or     eax,edx
c000f4b4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4ba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f4c1:	e8 fa fd ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f4c6:	83 e0 01             	and    eax,0x1
c000f4c9:	c1 e0 04             	shl    eax,0x4
c000f4cc:	88 c2                	mov    dl,al
c000f4ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4d4:	83 e0 ef             	and    eax,0xffffffef
c000f4d7:	09 d0                	or     eax,edx
c000f4d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4df:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4e6:	e8 d5 fd ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f4eb:	83 e0 01             	and    eax,0x1
c000f4ee:	c1 e0 05             	shl    eax,0x5
c000f4f1:	88 c2                	mov    dl,al
c000f4f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4f9:	83 e0 df             	and    eax,0xffffffdf
c000f4fc:	09 d0                	or     eax,edx
c000f4fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f504:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f50b:	e8 b0 fd ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f510:	83 e0 01             	and    eax,0x1
c000f513:	8d 14 00             	lea    edx,[eax+eax*1]
c000f516:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f51c:	83 e0 fd             	and    eax,0xfffffffd
c000f51f:	09 d0                	or     eax,edx
c000f521:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f527:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f52e:	e8 8d fd ff ff       	call   c000f2c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f533:	83 e0 01             	and    eax,0x1
c000f536:	c1 e0 06             	shl    eax,0x6
c000f539:	88 c2                	mov    dl,al
c000f53b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f541:	83 e0 bf             	and    eax,0xffffffbf
c000f544:	09 d0                	or     eax,edx
c000f546:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f54c:	58                   	pop    eax
c000f54d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f551:	50                   	push   eax
c000f552:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f556:	50                   	push   eax
c000f557:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f55b:	56                   	push   esi
c000f55c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f560:	50                   	push   eax
c000f561:	6a 00                	push   0x0
c000f563:	e8 d4 fc ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f568:	b8 04 00 00 00       	mov    eax,0x4
c000f56d:	89 c1                	mov    ecx,eax
c000f56f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f571:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f577:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f57b:	89 c1                	mov    ecx,eax
c000f57d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f57f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f585:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f589:	89 c1                	mov    ecx,eax
c000f58b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f58d:	83 c4 18             	add    esp,0x18
c000f590:	68 a8 e7 01 c0       	push   0xc001e7a8
c000f595:	55                   	push   ebp
c000f596:	e8 65 11 ff ff       	call   c0000700 <strcmp>
c000f59b:	83 c4 10             	add    esp,0x10
c000f59e:	85 c0                	test   eax,eax
c000f5a0:	75 0f                	jne    c000f5b1 <CPU::detectFeatures()+0x1a9>
c000f5a2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f5ac:	e9 22 02 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f5b1:	50                   	push   eax
c000f5b2:	50                   	push   eax
c000f5b3:	68 b5 e7 01 c0       	push   0xc001e7b5
c000f5b8:	55                   	push   ebp
c000f5b9:	e8 42 11 ff ff       	call   c0000700 <strcmp>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	74 dd                	je     c000f5a2 <CPU::detectFeatures()+0x19a>
c000f5c5:	50                   	push   eax
c000f5c6:	50                   	push   eax
c000f5c7:	68 c2 e7 01 c0       	push   0xc001e7c2
c000f5cc:	55                   	push   ebp
c000f5cd:	e8 2e 11 ff ff       	call   c0000700 <strcmp>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	85 c0                	test   eax,eax
c000f5d7:	74 2a                	je     c000f603 <CPU::detectFeatures()+0x1fb>
c000f5d9:	50                   	push   eax
c000f5da:	50                   	push   eax
c000f5db:	68 cf e7 01 c0       	push   0xc001e7cf
c000f5e0:	55                   	push   ebp
c000f5e1:	e8 1a 11 ff ff       	call   c0000700 <strcmp>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	85 c0                	test   eax,eax
c000f5eb:	74 16                	je     c000f603 <CPU::detectFeatures()+0x1fb>
c000f5ed:	50                   	push   eax
c000f5ee:	50                   	push   eax
c000f5ef:	68 dc e7 01 c0       	push   0xc001e7dc
c000f5f4:	55                   	push   ebp
c000f5f5:	e8 06 11 ff ff       	call   c0000700 <strcmp>
c000f5fa:	83 c4 10             	add    esp,0x10
c000f5fd:	85 c0                	test   eax,eax
c000f5ff:	74 48                	je     c000f649 <CPU::detectFeatures()+0x241>
c000f601:	eb 0f                	jmp    c000f612 <CPU::detectFeatures()+0x20a>
c000f603:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f60d:	e9 c1 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f612:	50                   	push   eax
c000f613:	50                   	push   eax
c000f614:	68 e9 e7 01 c0       	push   0xc001e7e9
c000f619:	55                   	push   ebp
c000f61a:	e8 e1 10 ff ff       	call   c0000700 <strcmp>
c000f61f:	83 c4 10             	add    esp,0x10
c000f622:	85 c0                	test   eax,eax
c000f624:	74 23                	je     c000f649 <CPU::detectFeatures()+0x241>
c000f626:	57                   	push   edi
c000f627:	57                   	push   edi
c000f628:	68 f6 e7 01 c0       	push   0xc001e7f6
c000f62d:	55                   	push   ebp
c000f62e:	e8 cd 10 ff ff       	call   c0000700 <strcmp>
c000f633:	83 c4 10             	add    esp,0x10
c000f636:	85 c0                	test   eax,eax
c000f638:	75 1e                	jne    c000f658 <CPU::detectFeatures()+0x250>
c000f63a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f644:	e9 8a 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f649:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f653:	e9 7b 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f658:	56                   	push   esi
c000f659:	56                   	push   esi
c000f65a:	68 03 e8 01 c0       	push   0xc001e803
c000f65f:	55                   	push   ebp
c000f660:	e8 9b 10 ff ff       	call   c0000700 <strcmp>
c000f665:	83 c4 10             	add    esp,0x10
c000f668:	85 c0                	test   eax,eax
c000f66a:	75 0f                	jne    c000f67b <CPU::detectFeatures()+0x273>
c000f66c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f676:	e9 58 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f67b:	51                   	push   ecx
c000f67c:	51                   	push   ecx
c000f67d:	68 c2 e7 01 c0       	push   0xc001e7c2
c000f682:	55                   	push   ebp
c000f683:	e8 78 10 ff ff       	call   c0000700 <strcmp>
c000f688:	83 c4 10             	add    esp,0x10
c000f68b:	85 c0                	test   eax,eax
c000f68d:	75 0f                	jne    c000f69e <CPU::detectFeatures()+0x296>
c000f68f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f699:	e9 35 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f69e:	52                   	push   edx
c000f69f:	52                   	push   edx
c000f6a0:	68 10 e8 01 c0       	push   0xc001e810
c000f6a5:	55                   	push   ebp
c000f6a6:	e8 55 10 ff ff       	call   c0000700 <strcmp>
c000f6ab:	83 c4 10             	add    esp,0x10
c000f6ae:	85 c0                	test   eax,eax
c000f6b0:	75 0f                	jne    c000f6c1 <CPU::detectFeatures()+0x2b9>
c000f6b2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f6bc:	e9 12 01 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f6c1:	50                   	push   eax
c000f6c2:	50                   	push   eax
c000f6c3:	68 1d e8 01 c0       	push   0xc001e81d
c000f6c8:	55                   	push   ebp
c000f6c9:	e8 32 10 ff ff       	call   c0000700 <strcmp>
c000f6ce:	83 c4 10             	add    esp,0x10
c000f6d1:	85 c0                	test   eax,eax
c000f6d3:	75 0f                	jne    c000f6e4 <CPU::detectFeatures()+0x2dc>
c000f6d5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f6df:	e9 ef 00 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f6e4:	50                   	push   eax
c000f6e5:	50                   	push   eax
c000f6e6:	68 2a e8 01 c0       	push   0xc001e82a
c000f6eb:	55                   	push   ebp
c000f6ec:	e8 0f 10 ff ff       	call   c0000700 <strcmp>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	85 c0                	test   eax,eax
c000f6f6:	75 0f                	jne    c000f707 <CPU::detectFeatures()+0x2ff>
c000f6f8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f702:	e9 cc 00 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f707:	50                   	push   eax
c000f708:	50                   	push   eax
c000f709:	68 37 e8 01 c0       	push   0xc001e837
c000f70e:	55                   	push   ebp
c000f70f:	e8 ec 0f ff ff       	call   c0000700 <strcmp>
c000f714:	83 c4 10             	add    esp,0x10
c000f717:	85 c0                	test   eax,eax
c000f719:	75 0f                	jne    c000f72a <CPU::detectFeatures()+0x322>
c000f71b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f725:	e9 a9 00 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f72a:	50                   	push   eax
c000f72b:	50                   	push   eax
c000f72c:	68 44 e8 01 c0       	push   0xc001e844
c000f731:	55                   	push   ebp
c000f732:	e8 c9 0f ff ff       	call   c0000700 <strcmp>
c000f737:	83 c4 10             	add    esp,0x10
c000f73a:	85 c0                	test   eax,eax
c000f73c:	75 0f                	jne    c000f74d <CPU::detectFeatures()+0x345>
c000f73e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f748:	e9 86 00 00 00       	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f74d:	50                   	push   eax
c000f74e:	50                   	push   eax
c000f74f:	68 51 e8 01 c0       	push   0xc001e851
c000f754:	55                   	push   ebp
c000f755:	e8 a6 0f ff ff       	call   c0000700 <strcmp>
c000f75a:	83 c4 10             	add    esp,0x10
c000f75d:	85 c0                	test   eax,eax
c000f75f:	75 0c                	jne    c000f76d <CPU::detectFeatures()+0x365>
c000f761:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f76b:	eb 66                	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f76d:	50                   	push   eax
c000f76e:	50                   	push   eax
c000f76f:	68 5e e8 01 c0       	push   0xc001e85e
c000f774:	55                   	push   ebp
c000f775:	e8 86 0f ff ff       	call   c0000700 <strcmp>
c000f77a:	83 c4 10             	add    esp,0x10
c000f77d:	85 c0                	test   eax,eax
c000f77f:	75 0c                	jne    c000f78d <CPU::detectFeatures()+0x385>
c000f781:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f78b:	eb 46                	jmp    c000f7d3 <CPU::detectFeatures()+0x3cb>
c000f78d:	57                   	push   edi
c000f78e:	57                   	push   edi
c000f78f:	68 6b e8 01 c0       	push   0xc001e86b
c000f794:	55                   	push   ebp
c000f795:	e8 66 0f ff ff       	call   c0000700 <strcmp>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	85 c0                	test   eax,eax
c000f79f:	74 e0                	je     c000f781 <CPU::detectFeatures()+0x379>
c000f7a1:	56                   	push   esi
c000f7a2:	56                   	push   esi
c000f7a3:	68 78 e8 01 c0       	push   0xc001e878
c000f7a8:	55                   	push   ebp
c000f7a9:	e8 52 0f ff ff       	call   c0000700 <strcmp>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	85 c0                	test   eax,eax
c000f7b3:	74 cc                	je     c000f781 <CPU::detectFeatures()+0x379>
c000f7b5:	51                   	push   ecx
c000f7b6:	51                   	push   ecx
c000f7b7:	68 85 e8 01 c0       	push   0xc001e885
c000f7bc:	55                   	push   ebp
c000f7bd:	e8 3e 0f ff ff       	call   c0000700 <strcmp>
c000f7c2:	83 c4 10             	add    esp,0x10
c000f7c5:	85 c0                	test   eax,eax
c000f7c7:	74 b8                	je     c000f781 <CPU::detectFeatures()+0x379>
c000f7c9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f7d3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f7d8:	0f 86 be 00 00 00    	jbe    c000f89c <CPU::detectFeatures()+0x494>
c000f7de:	83 ec 0c             	sub    esp,0xc
c000f7e1:	68 80 00 00 00       	push   0x80
c000f7e6:	e8 31 fb ff ff       	call   c000f31c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7eb:	83 e0 01             	and    eax,0x1
c000f7ee:	c1 e0 06             	shl    eax,0x6
c000f7f1:	88 c2                	mov    dl,al
c000f7f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7f9:	83 e0 bf             	and    eax,0xffffffbf
c000f7fc:	09 d0                	or     eax,edx
c000f7fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f804:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f80b:	e8 0c fb ff ff       	call   c000f31c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f810:	83 e0 01             	and    eax,0x1
c000f813:	c1 e0 04             	shl    eax,0x4
c000f816:	88 c2                	mov    dl,al
c000f818:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f81e:	83 e0 ef             	and    eax,0xffffffef
c000f821:	09 d0                	or     eax,edx
c000f823:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f829:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f830:	e8 e7 fa ff ff       	call   c000f31c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f835:	c1 e0 07             	shl    eax,0x7
c000f838:	88 c2                	mov    dl,al
c000f83a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f840:	83 e0 7f             	and    eax,0x7f
c000f843:	09 d0                	or     eax,edx
c000f845:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f84b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f852:	e8 f3 fa ff ff       	call   c000f34a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f857:	83 e0 01             	and    eax,0x1
c000f85a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f861:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f867:	83 e0 f7             	and    eax,0xfffffff7
c000f86a:	09 d0                	or     eax,edx
c000f86c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f872:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f879:	e8 cc fa ff ff       	call   c000f34a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f87e:	83 c4 10             	add    esp,0x10
c000f881:	83 e0 01             	and    eax,0x1
c000f884:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f88b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f891:	83 e0 fb             	and    eax,0xfffffffb
c000f894:	09 d0                	or     eax,edx
c000f896:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f89c:	83 ec 0c             	sub    esp,0xc
c000f89f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8a3:	50                   	push   eax
c000f8a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8a8:	50                   	push   eax
c000f8a9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8ad:	56                   	push   esi
c000f8ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8b2:	50                   	push   eax
c000f8b3:	6a 01                	push   0x1
c000f8b5:	e8 82 f9 ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8ba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8be:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f8c4:	88 ca                	mov    dl,cl
c000f8c6:	83 e0 f0             	and    eax,0xfffffff0
c000f8c9:	83 e2 0f             	and    edx,0xf
c000f8cc:	09 d0                	or     eax,edx
c000f8ce:	88 ca                	mov    dl,cl
c000f8d0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f8d6:	c0 ea 04             	shr    dl,0x4
c000f8d9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f8dd:	0f b6 c2             	movzx  eax,dl
c000f8e0:	83 c4 20             	add    esp,0x20
c000f8e3:	c1 e0 06             	shl    eax,0x6
c000f8e6:	89 c7                	mov    edi,eax
c000f8e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8ee:	66 25 3f c0          	and    ax,0xc03f
c000f8f2:	09 f8                	or     eax,edi
c000f8f4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8fb:	89 c8                	mov    eax,ecx
c000f8fd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f904:	c1 e8 08             	shr    eax,0x8
c000f907:	83 e5 3f             	and    ebp,0x3f
c000f90a:	83 e0 0f             	and    eax,0xf
c000f90d:	89 c7                	mov    edi,eax
c000f90f:	c1 e7 06             	shl    edi,0x6
c000f912:	09 ef                	or     edi,ebp
c000f914:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f91b:	89 fa                	mov    edx,edi
c000f91d:	83 e5 c0             	and    ebp,0xffffffc0
c000f920:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f926:	88 c2                	mov    dl,al
c000f928:	c0 ea 02             	shr    dl,0x2
c000f92b:	89 d7                	mov    edi,edx
c000f92d:	09 ef                	or     edi,ebp
c000f92f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f935:	89 fa                	mov    edx,edi
c000f937:	83 e5 cf             	and    ebp,0xffffffcf
c000f93a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f940:	89 cf                	mov    edi,ecx
c000f942:	c1 ef 0c             	shr    edi,0xc
c000f945:	83 e7 03             	and    edi,0x3
c000f948:	c1 e7 04             	shl    edi,0x4
c000f94b:	09 ef                	or     edi,ebp
c000f94d:	3c 06                	cmp    al,0x6
c000f94f:	89 fa                	mov    edx,edi
c000f951:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f957:	74 04                	je     c000f95d <CPU::detectFeatures()+0x555>
c000f959:	3c 0f                	cmp    al,0xf
c000f95b:	75 5c                	jne    c000f9b9 <CPU::detectFeatures()+0x5b1>
c000f95d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f961:	89 cf                	mov    edi,ecx
c000f963:	c1 ef 10             	shr    edi,0x10
c000f966:	c1 e7 04             	shl    edi,0x4
c000f969:	09 fa                	or     edx,edi
c000f96b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f971:	0f b6 d2             	movzx  edx,dl
c000f974:	66 81 e7 3f c0       	and    di,0xc03f
c000f979:	c1 e2 06             	shl    edx,0x6
c000f97c:	09 fa                	or     edx,edi
c000f97e:	3c 0f                	cmp    al,0xf
c000f980:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f987:	75 30                	jne    c000f9b9 <CPU::detectFeatures()+0x5b1>
c000f989:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f98f:	c1 e9 14             	shr    ecx,0x14
c000f992:	83 e0 3f             	and    eax,0x3f
c000f995:	83 c1 0f             	add    ecx,0xf
c000f998:	88 ca                	mov    dl,cl
c000f99a:	c0 e9 02             	shr    cl,0x2
c000f99d:	c1 e2 06             	shl    edx,0x6
c000f9a0:	09 d0                	or     eax,edx
c000f9a2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f9a8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f9ae:	83 e0 c0             	and    eax,0xffffffc0
c000f9b1:	09 c1                	or     ecx,eax
c000f9b3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f9b9:	83 ec 0c             	sub    esp,0xc
c000f9bc:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f9c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9c7:	50                   	push   eax
c000f9c8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f9cc:	55                   	push   ebp
c000f9cd:	56                   	push   esi
c000f9ce:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f9d2:	57                   	push   edi
c000f9d3:	68 00 00 00 80       	push   0x80000000
c000f9d8:	e8 5f f8 ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9dd:	83 c4 20             	add    esp,0x20
c000f9e0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9e8:	76 22                	jbe    c000fa0c <CPU::detectFeatures()+0x604>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9f1:	50                   	push   eax
c000f9f2:	55                   	push   ebp
c000f9f3:	56                   	push   esi
c000f9f4:	57                   	push   edi
c000f9f5:	68 01 00 00 80       	push   0x80000001
c000f9fa:	e8 3d f8 ff ff       	call   c000f23c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9ff:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fa09:	83 c4 20             	add    esp,0x20
c000fa0c:	52                   	push   edx
c000fa0d:	52                   	push   edx
c000fa0e:	68 91 e8 01 c0       	push   0xc001e891
c000fa13:	53                   	push   ebx
c000fa14:	e8 09 c3 ff ff       	call   c000bd22 <Device::setName(char const*)>
c000fa19:	83 c4 10             	add    esp,0x10
c000fa1c:	eb 67                	jmp    c000fa85 <CPU::detectFeatures()+0x67d>
c000fa1e:	50                   	push   eax
c000fa1f:	50                   	push   eax
c000fa20:	68 f6 e7 01 c0       	push   0xc001e7f6
c000fa25:	55                   	push   ebp
c000fa26:	e8 f5 0b ff ff       	call   c0000620 <strcpy>
c000fa2b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa35:	e8 a9 07 ff ff       	call   c00001e3 <is486>
c000fa3a:	83 c4 10             	add    esp,0x10
c000fa3d:	85 c0                	test   eax,eax
c000fa3f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa45:	74 1d                	je     c000fa64 <CPU::detectFeatures()+0x65c>
c000fa47:	83 c8 07             	or     eax,0x7
c000fa4a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa50:	0f 20 c0             	mov    eax,cr0
c000fa53:	83 e0 14             	and    eax,0x14
c000fa56:	83 f8 04             	cmp    eax,0x4
c000fa59:	75 0e                	jne    c000fa69 <CPU::detectFeatures()+0x661>
c000fa5b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa62:	eb 21                	jmp    c000fa85 <CPU::detectFeatures()+0x67d>
c000fa64:	83 e0 f8             	and    eax,0xfffffff8
c000fa67:	eb e1                	jmp    c000fa4a <CPU::detectFeatures()+0x642>
c000fa69:	e8 50 07 ff ff       	call   c00001be <hasLegacyFPU>
c000fa6e:	83 e0 01             	and    eax,0x1
c000fa71:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa74:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa7a:	83 e0 fd             	and    eax,0xfffffffd
c000fa7d:	09 d0                	or     eax,edx
c000fa7f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa85:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa8c:	74 0e                	je     c000fa9c <CPU::detectFeatures()+0x694>
c000fa8e:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000fa93:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa9a:	eb 20                	jmp    c000fabc <CPU::detectFeatures()+0x6b4>
c000fa9c:	e8 1d 07 ff ff       	call   c00001be <hasLegacyFPU>
c000faa1:	83 e0 01             	and    eax,0x1
c000faa4:	8d 14 00             	lea    edx,[eax+eax*1]
c000faa7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000faad:	83 e0 fd             	and    eax,0xfffffffd
c000fab0:	09 d0                	or     eax,edx
c000fab2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fab8:	a8 02                	test   al,0x2
c000faba:	75 d2                	jne    c000fa8e <CPU::detectFeatures()+0x686>
c000fabc:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fac3:	83 c4 2c             	add    esp,0x2c
c000fac6:	5b                   	pop    ebx
c000fac7:	5e                   	pop    esi
c000fac8:	5f                   	pop    edi
c000fac9:	5d                   	pop    ebp
c000faca:	c3                   	ret    
c000facb:	90                   	nop

c000facc <CPU::setupSMEP()>:
c000facc:	0f 20 e0             	mov    eax,cr4
c000facf:	0d 00 00 10 00       	or     eax,0x100000
c000fad4:	0f 22 e0             	mov    cr4,eax
c000fad7:	c3                   	ret    

c000fad8 <CPU::setupUMIP()>:
c000fad8:	0f 20 e0             	mov    eax,cr4
c000fadb:	80 cc 08             	or     ah,0x8
c000fade:	0f 22 e0             	mov    cr4,eax
c000fae1:	c3                   	ret    

c000fae2 <CPU::setupTSC()>:
c000fae2:	0f 20 e0             	mov    eax,cr4
c000fae5:	83 c8 04             	or     eax,0x4
c000fae8:	0f 22 e0             	mov    cr4,eax
c000faeb:	c3                   	ret    

c000faec <CPU::setupLargePages()>:
c000faec:	0f 20 e0             	mov    eax,cr4
c000faef:	83 c8 10             	or     eax,0x10
c000faf2:	0f 22 e0             	mov    cr4,eax
c000faf5:	c3                   	ret    

c000faf6 <CPU::setupPAT()>:
c000faf6:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c000fafb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fb02:	74 2c                	je     c000fb30 <CPU::setupPAT()+0x3a>
c000fb04:	53                   	push   ebx
c000fb05:	83 ec 10             	sub    esp,0x10
c000fb08:	68 77 02 00 00       	push   0x277
c000fb0d:	50                   	push   eax
c000fb0e:	e8 f3 74 ff ff       	call   c0007006 <Computer::rdmsr(unsigned int)>
c000fb13:	83 e2 f8             	and    edx,0xfffffff8
c000fb16:	83 ca 01             	or     edx,0x1
c000fb19:	52                   	push   edx
c000fb1a:	50                   	push   eax
c000fb1b:	68 77 02 00 00       	push   0x277
c000fb20:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c000fb26:	e8 07 75 ff ff       	call   c0007032 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fb2b:	83 c4 28             	add    esp,0x28
c000fb2e:	5b                   	pop    ebx
c000fb2f:	c3                   	ret    
c000fb30:	c3                   	ret    
c000fb31:	90                   	nop

c000fb32 <CPU::setupMTRR()>:
c000fb32:	c3                   	ret    
c000fb33:	90                   	nop

c000fb34 <CPU::setupGlobalPages()>:
c000fb34:	0f 20 e0             	mov    eax,cr4
c000fb37:	0c 80                	or     al,0x80
c000fb39:	0f 22 e0             	mov    cr4,eax
c000fb3c:	c3                   	ret    
c000fb3d:	90                   	nop

c000fb3e <CPU::allowUsermodeDataAccess()>:
c000fb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb42:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb49:	74 03                	je     c000fb4e <CPU::allowUsermodeDataAccess()+0x10>
c000fb4b:	0f 01 cb             	stac   
c000fb4e:	c3                   	ret    
c000fb4f:	90                   	nop

c000fb50 <CPU::prohibitUsermodeDataAccess()>:
c000fb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb54:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb5b:	74 03                	je     c000fb60 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb5d:	0f 01 ca             	clac   
c000fb60:	c3                   	ret    
c000fb61:	90                   	nop

c000fb62 <CPU::setupSMAP()>:
c000fb62:	0f 20 e0             	mov    eax,cr4
c000fb65:	0d 00 00 20 00       	or     eax,0x200000
c000fb6a:	0f 22 e0             	mov    cr4,eax
c000fb6d:	eb e1                	jmp    c000fb50 <CPU::prohibitUsermodeDataAccess()>
c000fb6f:	90                   	nop

c000fb70 <CPU::setupFeatures()>:
c000fb70:	53                   	push   ebx
c000fb71:	83 ec 08             	sub    esp,0x8
c000fb74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb78:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb7f:	74 18                	je     c000fb99 <CPU::setupFeatures()+0x29>
c000fb81:	83 ec 0c             	sub    esp,0xc
c000fb84:	68 9d e8 01 c0       	push   0xc001e89d
c000fb89:	e8 ca ab ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000fb8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb91:	e8 42 ff ff ff       	call   c000fad8 <CPU::setupUMIP()>
c000fb96:	83 c4 10             	add    esp,0x10
c000fb99:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fba0:	74 18                	je     c000fbba <CPU::setupFeatures()+0x4a>
c000fba2:	83 ec 0c             	sub    esp,0xc
c000fba5:	68 a7 e8 01 c0       	push   0xc001e8a7
c000fbaa:	e8 a9 ab ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000fbaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb2:	e8 2b ff ff ff       	call   c000fae2 <CPU::setupTSC()>
c000fbb7:	83 c4 10             	add    esp,0x10
c000fbba:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fbc1:	74 18                	je     c000fbdb <CPU::setupFeatures()+0x6b>
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	68 b0 e8 01 c0       	push   0xc001e8b0
c000fbcb:	e8 88 ab ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000fbd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd3:	e8 14 ff ff ff       	call   c000faec <CPU::setupLargePages()>
c000fbd8:	83 c4 10             	add    esp,0x10
c000fbdb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fbe2:	74 18                	je     c000fbfc <CPU::setupFeatures()+0x8c>
c000fbe4:	83 ec 0c             	sub    esp,0xc
c000fbe7:	68 b9 e8 01 c0       	push   0xc001e8b9
c000fbec:	e8 67 ab ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000fbf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf4:	e8 3b ff ff ff       	call   c000fb34 <CPU::setupGlobalPages()>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fc03:	74 18                	je     c000fc1d <CPU::setupFeatures()+0xad>
c000fc05:	83 ec 0c             	sub    esp,0xc
c000fc08:	68 cb e8 01 c0       	push   0xc001e8cb
c000fc0d:	e8 46 ab ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c000fc12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc15:	e8 dc fe ff ff       	call   c000faf6 <CPU::setupPAT()>
c000fc1a:	83 c4 10             	add    esp,0x10
c000fc1d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fc24:	74 11                	je     c000fc37 <CPU::setupFeatures()+0xc7>
c000fc26:	c7 44 24 10 d4 e8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e8d4
c000fc2e:	83 c4 08             	add    esp,0x8
c000fc31:	5b                   	pop    ebx
c000fc32:	e9 21 ab ff ff       	jmp    c000a758 <Dbg::kprintf(char const*, ...)>
c000fc37:	83 c4 08             	add    esp,0x8
c000fc3a:	5b                   	pop    ebx
c000fc3b:	c3                   	ret    

c000fc3c <CPU::open(int, int, void*)>:
c000fc3c:	57                   	push   edi
c000fc3d:	56                   	push   esi
c000fc3e:	53                   	push   ebx
c000fc3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc47:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc56:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc5c:	50                   	push   eax
c000fc5d:	e8 8e 76 ff ff       	call   c00072f0 <GDT::setup()>
c000fc62:	83 c4 0c             	add    esp,0xc
c000fc65:	6a 00                	push   0x0
c000fc67:	68 ef be ad de       	push   0xdeadbeef
c000fc6c:	57                   	push   edi
c000fc6d:	e8 1a 92 ff ff       	call   c0008e8c <TSS::setup(unsigned long, unsigned long)>
c000fc72:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc75:	e8 f2 91 ff ff       	call   c0008e6c <TSS::flush()>
c000fc7a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc80:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc83:	e8 b2 78 ff ff       	call   c000753a <IDT::setup()>
c000fc88:	b8 00 04 00 00       	mov    eax,0x400
c000fc8d:	0f 23 f8             	mov    db7,eax
c000fc90:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc9a:	e8 f7 80 ff ff       	call   c0007d96 <Phys::allocatePage()>
c000fc9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fca5:	89 30                	mov    DWORD PTR [eax],esi
c000fca7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fcad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fcb0:	58                   	pop    eax
c000fcb1:	5a                   	pop    edx
c000fcb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fcb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fcbc:	e8 b5 a1 ff ff       	call   c0009e76 <VAS::setCPUSpecific(unsigned long)>
c000fcc1:	c7 04 24 de e8 01 c0 	mov    DWORD PTR [esp],0xc001e8de
c000fcc8:	e8 56 7d ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000fccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcd0:	e8 33 f7 ff ff       	call   c000f408 <CPU::detectFeatures()>
c000fcd5:	c7 04 24 01 e9 01 c0 	mov    DWORD PTR [esp],0xc001e901
c000fcdc:	e8 42 7d ff ff       	call   c0007a23 <Krnl::setBootMessage(char const*)>
c000fce1:	e8 b8 56 00 00       	call   c001539e <HalInitialise()>
c000fce6:	a1 60 0b 02 c0       	mov    eax,ds:0xc0020b60
c000fceb:	83 e0 10             	and    eax,0x10
c000fcee:	83 f8 01             	cmp    eax,0x1
c000fcf1:	19 c0                	sbb    eax,eax
c000fcf3:	83 e0 46             	and    eax,0x46
c000fcf6:	83 c0 1e             	add    eax,0x1e
c000fcf9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcfc:	e8 f0 d6 ff ff       	call   c000d3f1 <setupTimer(int)>
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fd0a:	f6 05 60 0b 02 c0 20 	test   BYTE PTR ds:0xc0020b60,0x20
c000fd11:	74 0c                	je     c000fd1f <CPU::open(int, int, void*)+0xe3>
c000fd13:	83 ec 0c             	sub    esp,0xc
c000fd16:	53                   	push   ebx
c000fd17:	e8 54 fe ff ff       	call   c000fb70 <CPU::setupFeatures()>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	5b                   	pop    ebx
c000fd20:	31 c0                	xor    eax,eax
c000fd22:	5e                   	pop    esi
c000fd23:	5f                   	pop    edi
c000fd24:	c3                   	ret    
c000fd25:	90                   	nop

c000fd26 <EnvVarContainer::getEnv(char const*)>:
c000fd26:	57                   	push   edi
c000fd27:	56                   	push   esi
c000fd28:	53                   	push   ebx
c000fd29:	31 db                	xor    ebx,ebx
c000fd2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd2f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd31:	7e 2b                	jle    c000fd5e <EnvVarContainer::getEnv(char const*)+0x38>
c000fd33:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd3a:	50                   	push   eax
c000fd3b:	50                   	push   eax
c000fd3c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd3f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fd42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fd46:	e8 b5 09 ff ff       	call   c0000700 <strcmp>
c000fd4b:	83 c4 10             	add    esp,0x10
c000fd4e:	85 c0                	test   eax,eax
c000fd50:	75 09                	jne    c000fd5b <EnvVarContainer::getEnv(char const*)+0x35>
c000fd52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd55:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd59:	eb 05                	jmp    c000fd60 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd5b:	43                   	inc    ebx
c000fd5c:	eb d1                	jmp    c000fd2f <EnvVarContainer::getEnv(char const*)+0x9>
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5b                   	pop    ebx
c000fd61:	5e                   	pop    esi
c000fd62:	5f                   	pop    edi
c000fd63:	c3                   	ret    

c000fd64 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd64:	55                   	push   ebp
c000fd65:	57                   	push   edi
c000fd66:	56                   	push   esi
c000fd67:	53                   	push   ebx
c000fd68:	83 ec 28             	sub    esp,0x28
c000fd6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd73:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd77:	56                   	push   esi
c000fd78:	e8 e3 07 ff ff       	call   c0000560 <strlen>
c000fd7d:	40                   	inc    eax
c000fd7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd81:	e8 43 7c ff ff       	call   c00079c9 <malloc>
c000fd86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd8d:	e8 ce 07 ff ff       	call   c0000560 <strlen>
c000fd92:	40                   	inc    eax
c000fd93:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd96:	e8 2e 7c ff ff       	call   c00079c9 <malloc>
c000fd9b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fda2:	e8 b9 07 ff ff       	call   c0000560 <strlen>
c000fda7:	83 c4 0c             	add    esp,0xc
c000fdaa:	40                   	inc    eax
c000fdab:	50                   	push   eax
c000fdac:	6a 00                	push   0x0
c000fdae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdb2:	e8 39 07 ff ff       	call   c00004f0 <memset>
c000fdb7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdba:	e8 a1 07 ff ff       	call   c0000560 <strlen>
c000fdbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fdc3:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdcb:	89 de                	mov    esi,ebx
c000fdcd:	e8 8e 07 ff ff       	call   c0000560 <strlen>
c000fdd2:	83 c4 0c             	add    esp,0xc
c000fdd5:	40                   	inc    eax
c000fdd6:	50                   	push   eax
c000fdd7:	6a 00                	push   0x0
c000fdd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fddd:	e8 0e 07 ff ff       	call   c00004f0 <memset>
c000fde2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fde5:	e8 76 07 ff ff       	call   c0000560 <strlen>
c000fdea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdee:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdf6:	40                   	inc    eax
c000fdf7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdfa:	c1 e0 03             	shl    eax,0x3
c000fdfd:	5a                   	pop    edx
c000fdfe:	59                   	pop    ecx
c000fdff:	50                   	push   eax
c000fe00:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe03:	e8 ad 7b ff ff       	call   c00079b5 <realloc>
c000fe08:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe12:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe16:	b9 08 00 00 00       	mov    ecx,0x8
c000fe1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe1d:	83 c4 2c             	add    esp,0x2c
c000fe20:	5b                   	pop    ebx
c000fe21:	5e                   	pop    esi
c000fe22:	5f                   	pop    edi
c000fe23:	5d                   	pop    ebp
c000fe24:	c3                   	ret    
c000fe25:	90                   	nop

c000fe26 <EnvVarContainer::deleteEnv(char const*)>:
c000fe26:	c3                   	ret    
c000fe27:	90                   	nop

c000fe28 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fe28:	55                   	push   ebp
c000fe29:	57                   	push   edi
c000fe2a:	56                   	push   esi
c000fe2b:	53                   	push   ebx
c000fe2c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe32:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe39:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fe40:	68 14 01 00 00       	push   0x114
c000fe45:	e8 7f 7b ff ff       	call   c00079c9 <malloc>
c000fe4a:	83 c4 0c             	add    esp,0xc
c000fe4d:	89 c3                	mov    ebx,eax
c000fe4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe59:	50                   	push   eax
c000fe5a:	e8 6f ae ff ff       	call   c000acce <File::File(char const*, Process*)>
c000fe5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe62:	e8 95 b1 ff ff       	call   c000affc <File::exists()>
c000fe67:	83 c4 10             	add    esp,0x10
c000fe6a:	84 c0                	test   al,al
c000fe6c:	75 31                	jne    c000fe9f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe6e:	50                   	push   eax
c000fe6f:	50                   	push   eax
c000fe70:	6a 12                	push   0x12
c000fe72:	53                   	push   ebx
c000fe73:	e8 16 af ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c000fe78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe7a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe7d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe80:	e8 db 06 ff ff       	call   c0000560 <strlen>
c000fe85:	5a                   	pop    edx
c000fe86:	31 d2                	xor    edx,edx
c000fe88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe8c:	51                   	push   ecx
c000fe8d:	56                   	push   esi
c000fe8e:	52                   	push   edx
c000fe8f:	50                   	push   eax
c000fe90:	53                   	push   ebx
c000fe91:	ff d7                	call   edi
c000fe93:	83 c4 14             	add    esp,0x14
c000fe96:	53                   	push   ebx
c000fe97:	e8 50 af ff ff       	call   c000adec <File::close()>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	56                   	push   esi
c000fea0:	31 f6                	xor    esi,esi
c000fea2:	68 00 01 00 00       	push   0x100
c000fea7:	6a 00                	push   0x0
c000fea9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fead:	50                   	push   eax
c000feae:	e8 3d 06 ff ff       	call   c00004f0 <memset>
c000feb3:	5f                   	pop    edi
c000feb4:	58                   	pop    eax
c000feb5:	6a 01                	push   0x1
c000feb7:	53                   	push   ebx
c000feb8:	e8 d1 ae ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fec8:	83 ec 0c             	sub    esp,0xc
c000fecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fecd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fed1:	51                   	push   ecx
c000fed2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fed6:	52                   	push   edx
c000fed7:	6a 00                	push   0x0
c000fed9:	6a 01                	push   0x1
c000fedb:	53                   	push   ebx
c000fedc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fedf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fee3:	83 c4 20             	add    esp,0x20
c000fee6:	3c 0d                	cmp    al,0xd
c000fee8:	0f 84 09 01 00 00    	je     c000fff7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fef3:	0f 84 ef 00 00 00    	je     c000ffe8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fef9:	3c 0a                	cmp    al,0xa
c000fefb:	74 13                	je     c000ff10 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fefd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff02:	74 0c                	je     c000ff10 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff0a:	0f 8e d8 00 00 00    	jle    c000ffe8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff14:	83 ec 0c             	sub    esp,0xc
c000ff17:	8d 78 01             	lea    edi,[eax+0x1]
c000ff1a:	57                   	push   edi
c000ff1b:	e8 a9 7a ff ff       	call   c00079c9 <malloc>
c000ff20:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ff24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff28:	8d 56 04             	lea    edx,[esi+0x4]
c000ff2b:	89 14 24             	mov    DWORD PTR [esp],edx
c000ff2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff32:	e8 92 7a ff ff       	call   c00079c9 <malloc>
c000ff37:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff3b:	83 c4 0c             	add    esp,0xc
c000ff3e:	57                   	push   edi
c000ff3f:	6a 00                	push   0x0
c000ff41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff45:	e8 a6 05 ff ff       	call   c00004f0 <memset>
c000ff4a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff58:	83 c4 0c             	add    esp,0xc
c000ff5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff5f:	52                   	push   edx
c000ff60:	6a 00                	push   0x0
c000ff62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff66:	e8 85 05 ff ff       	call   c00004f0 <memset>
c000ff6b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff6f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff73:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff76:	e8 e5 05 ff ff       	call   c0000560 <strlen>
c000ff7b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff7f:	89 c1                	mov    ecx,eax
c000ff81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff86:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff89:	40                   	inc    eax
c000ff8a:	83 c4 10             	add    esp,0x10
c000ff8d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff90:	85 d2                	test   edx,edx
c000ff92:	75 0c                	jne    c000ffa0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	6a 08                	push   0x8
c000ff99:	e8 2b 7a ff ff       	call   c00079c9 <malloc>
c000ff9e:	eb 0c                	jmp    c000ffac <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ffa0:	c1 e0 03             	shl    eax,0x3
c000ffa3:	51                   	push   ecx
c000ffa4:	51                   	push   ecx
c000ffa5:	50                   	push   eax
c000ffa6:	52                   	push   edx
c000ffa7:	e8 09 7a ff ff       	call   c00079b5 <realloc>
c000ffac:	83 c4 10             	add    esp,0x10
c000ffaf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ffb2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ffb5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ffb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ffbc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ffc0:	b9 08 00 00 00       	mov    ecx,0x8
c000ffc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffc7:	31 f6                	xor    esi,esi
c000ffc9:	50                   	push   eax
c000ffca:	68 00 01 00 00       	push   0x100
c000ffcf:	6a 00                	push   0x0
c000ffd1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ffd5:	50                   	push   eax
c000ffd6:	e8 15 05 ff ff       	call   c00004f0 <memset>
c000ffdb:	83 c4 10             	add    esp,0x10
c000ffde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffe6:	eb 0f                	jmp    c000fff7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffe8:	3c 3d                	cmp    al,0x3d
c000ffea:	74 07                	je     c000fff3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffec:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fff0:	46                   	inc    esi
c000fff1:	eb 04                	jmp    c000fff7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fff3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fff7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fffc:	0f 85 c6 fe ff ff    	jne    c000fec8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010002:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010008:	5b                   	pop    ebx
c0010009:	5e                   	pop    esi
c001000a:	5f                   	pop    edi
c001000b:	5d                   	pop    ebp
c001000c:	c3                   	ret    
c001000d:	90                   	nop

c001000e <EnvVarContainer::__loadSystem()>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	68 e0 fa 01 c0       	push   0xc001fae0
c0010016:	68 44 e9 01 c0       	push   0xc001e944
c001001b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001f:	e8 04 fe ff ff       	call   c000fe28 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010024:	83 c4 1c             	add    esp,0x1c
c0010027:	c3                   	ret    

c0010028 <EnvVarContainer::__loadUser()>:
c0010028:	c3                   	ret    
c0010029:	90                   	nop

c001002a <EnvVarContainer::EnvVarContainer(Process*)>:
c001002a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010038:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001003c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001003f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010043:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001004a:	90                   	nop
c001004b:	c3                   	ret    

c001004c <EnvVarContainer::~EnvVarContainer()>:
c001004c:	83 ec 0c             	sub    esp,0xc
c001004f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010056:	85 c0                	test   eax,eax
c0010058:	74 1d                	je     c0010077 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010060:	85 c0                	test   eax,eax
c0010062:	74 13                	je     c0010077 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001006b:	83 ec 0c             	sub    esp,0xc
c001006e:	50                   	push   eax
c001006f:	e8 65 79 ff ff       	call   c00079d9 <free>
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	90                   	nop
c0010078:	83 c4 0c             	add    esp,0xc
c001007b:	c3                   	ret    

c001007c <Krnl::getEnv(Process*, char const*)>:
c001007c:	53                   	push   ebx
c001007d:	83 ec 08             	sub    esp,0x8
c0010080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010084:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010088:	39 05 30 40 02 c0    	cmp    DWORD PTR ds:0xc0024030,eax
c001008e:	74 04                	je     c0010094 <Krnl::getEnv(Process*, char const*)+0x18>
c0010090:	85 c0                	test   eax,eax
c0010092:	75 0b                	jne    c001009f <Krnl::getEnv(Process*, char const*)+0x23>
c0010094:	a1 b0 35 02 c0       	mov    eax,ds:0xc00235b0
c0010099:	85 c0                	test   eax,eax
c001009b:	75 19                	jne    c00100b6 <Krnl::getEnv(Process*, char const*)+0x3a>
c001009d:	eb 27                	jmp    c00100c6 <Krnl::getEnv(Process*, char const*)+0x4a>
c001009f:	52                   	push   edx
c00100a0:	52                   	push   edx
c00100a1:	53                   	push   ebx
c00100a2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00100a8:	e8 79 fc ff ff       	call   c000fd26 <EnvVarContainer::getEnv(char const*)>
c00100ad:	83 c4 10             	add    esp,0x10
c00100b0:	85 c0                	test   eax,eax
c00100b2:	75 28                	jne    c00100dc <Krnl::getEnv(Process*, char const*)+0x60>
c00100b4:	eb de                	jmp    c0010094 <Krnl::getEnv(Process*, char const*)+0x18>
c00100b6:	52                   	push   edx
c00100b7:	52                   	push   edx
c00100b8:	53                   	push   ebx
c00100b9:	50                   	push   eax
c00100ba:	e8 67 fc ff ff       	call   c000fd26 <EnvVarContainer::getEnv(char const*)>
c00100bf:	83 c4 10             	add    esp,0x10
c00100c2:	85 c0                	test   eax,eax
c00100c4:	75 16                	jne    c00100dc <Krnl::getEnv(Process*, char const*)+0x60>
c00100c6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00100ca:	a1 b4 35 02 c0       	mov    eax,ds:0xc00235b4
c00100cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100d3:	83 c4 08             	add    esp,0x8
c00100d6:	5b                   	pop    ebx
c00100d7:	e9 4a fc ff ff       	jmp    c000fd26 <EnvVarContainer::getEnv(char const*)>
c00100dc:	83 c4 08             	add    esp,0x8
c00100df:	5b                   	pop    ebx
c00100e0:	c3                   	ret    

c00100e1 <Krnl::setEnvSystem(char const*, char const*)>:
c00100e1:	83 ec 10             	sub    esp,0x10
c00100e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100ec:	ff 35 b4 35 02 c0    	push   DWORD PTR ds:0xc00235b4
c00100f2:	e8 6d fc ff ff       	call   c000fd64 <EnvVarContainer::setEnv(char const*, char const*)>
c00100f7:	83 c4 1c             	add    esp,0x1c
c00100fa:	c3                   	ret    

c00100fb <Krnl::setEnvUser(char const*, char const*)>:
c00100fb:	a1 b0 35 02 c0       	mov    eax,ds:0xc00235b0
c0010100:	85 c0                	test   eax,eax
c0010102:	74 15                	je     c0010119 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010104:	83 ec 10             	sub    esp,0x10
c0010107:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001010b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001010f:	50                   	push   eax
c0010110:	e8 4f fc ff ff       	call   c000fd64 <EnvVarContainer::setEnv(char const*, char const*)>
c0010115:	83 c4 1c             	add    esp,0x1c
c0010118:	c3                   	ret    
c0010119:	c3                   	ret    

c001011a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001011a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010124:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010128:	e9 37 fc ff ff       	jmp    c000fd64 <EnvVarContainer::setEnv(char const*, char const*)>

c001012d <Krnl::deleteEnvSystem(char const*)>:
c001012d:	c3                   	ret    

c001012e <Krnl::deleteEnvUser(char const*)>:
c001012e:	c3                   	ret    

c001012f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001012f:	c3                   	ret    

c0010130 <Krnl::newProcessEnv(Process*)>:
c0010130:	83 ec 28             	sub    esp,0x28
c0010133:	6a 0c                	push   0xc
c0010135:	e8 8f 78 ff ff       	call   c00079c9 <malloc>
c001013a:	5a                   	pop    edx
c001013b:	59                   	pop    ecx
c001013c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010140:	50                   	push   eax
c0010141:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010145:	e8 e0 fe ff ff       	call   c001002a <EnvVarContainer::EnvVarContainer(Process*)>
c001014a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014e:	83 c4 2c             	add    esp,0x2c
c0010151:	c3                   	ret    

c0010152 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010152:	57                   	push   edi
c0010153:	56                   	push   esi
c0010154:	53                   	push   ebx
c0010155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010159:	83 ec 0c             	sub    esp,0xc
c001015c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010162:	6a 0c                	push   0xc
c0010164:	e8 60 78 ff ff       	call   c00079c9 <malloc>
c0010169:	89 c3                	mov    ebx,eax
c001016b:	58                   	pop    eax
c001016c:	5a                   	pop    edx
c001016d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010171:	53                   	push   ebx
c0010172:	e8 b3 fe ff ff       	call   c001002a <EnvVarContainer::EnvVarContainer(Process*)>
c0010177:	8b 07                	mov    eax,DWORD PTR [edi]
c0010179:	89 03                	mov    DWORD PTR [ebx],eax
c001017b:	c1 e0 03             	shl    eax,0x3
c001017e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010181:	e8 43 78 ff ff       	call   c00079c9 <malloc>
c0010186:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010189:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001018b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001018e:	c1 e1 03             	shl    ecx,0x3
c0010191:	89 c7                	mov    edi,eax
c0010193:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010195:	83 c4 10             	add    esp,0x10
c0010198:	89 d8                	mov    eax,ebx
c001019a:	5b                   	pop    ebx
c001019b:	5e                   	pop    esi
c001019c:	5f                   	pop    edi
c001019d:	c3                   	ret    

c001019e <Krnl::loadSystemEnv()>:
c001019e:	53                   	push   ebx
c001019f:	83 ec 14             	sub    esp,0x14
c00101a2:	6a 0c                	push   0xc
c00101a4:	e8 20 78 ff ff       	call   c00079c9 <malloc>
c00101a9:	89 c3                	mov    ebx,eax
c00101ab:	58                   	pop    eax
c00101ac:	5a                   	pop    edx
c00101ad:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c00101b3:	53                   	push   ebx
c00101b4:	e8 71 fe ff ff       	call   c001002a <EnvVarContainer::EnvVarContainer(Process*)>
c00101b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101bc:	89 1d b4 35 02 c0    	mov    DWORD PTR ds:0xc00235b4,ebx
c00101c2:	e8 47 fe ff ff       	call   c001000e <EnvVarContainer::__loadSystem()>
c00101c7:	83 c4 18             	add    esp,0x18
c00101ca:	5b                   	pop    ebx
c00101cb:	c3                   	ret    

c00101cc <Krnl::loadUserEnv()>:
c00101cc:	53                   	push   ebx
c00101cd:	83 ec 14             	sub    esp,0x14
c00101d0:	6a 0c                	push   0xc
c00101d2:	e8 f2 77 ff ff       	call   c00079c9 <malloc>
c00101d7:	89 c3                	mov    ebx,eax
c00101d9:	58                   	pop    eax
c00101da:	5a                   	pop    edx
c00101db:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c00101e1:	53                   	push   ebx
c00101e2:	e8 43 fe ff ff       	call   c001002a <EnvVarContainer::EnvVarContainer(Process*)>
c00101e7:	89 1d b0 35 02 c0    	mov    DWORD PTR ds:0xc00235b0,ebx
c00101ed:	83 c4 18             	add    esp,0x18
c00101f0:	5b                   	pop    ebx
c00101f1:	c3                   	ret    

c00101f2 <Krnl::flushEnv()>:
c00101f2:	c3                   	ret    

c00101f3 <Krnl::getProcessTotalEnvCount(Process*)>:
c00101f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f7:	8b 15 b0 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b0
c00101fd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010203:	a1 b4 35 02 c0       	mov    eax,ds:0xc00235b4
c0010208:	8b 00                	mov    eax,DWORD PTR [eax]
c001020a:	03 01                	add    eax,DWORD PTR [ecx]
c001020c:	85 d2                	test   edx,edx
c001020e:	74 02                	je     c0010212 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010210:	03 02                	add    eax,DWORD PTR [edx]
c0010212:	c3                   	ret    

c0010213 <Krnl::getProcessEnvPair(Process*, int)>:
c0010213:	57                   	push   edi
c0010214:	56                   	push   esi
c0010215:	8b 35 b0 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b0
c001021b:	53                   	push   ebx
c001021c:	85 f6                	test   esi,esi
c001021e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010226:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001022c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010230:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010232:	75 16                	jne    c001024a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010234:	39 c2                	cmp    edx,eax
c0010236:	7c 16                	jl     c001024e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010238:	8b 0d b4 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235b4
c001023e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010240:	01 c6                	add    esi,eax
c0010242:	39 d6                	cmp    esi,edx
c0010244:	7e 3c                	jle    c0010282 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010246:	29 c2                	sub    edx,eax
c0010248:	eb 04                	jmp    c001024e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001024a:	39 c2                	cmp    edx,eax
c001024c:	7d 05                	jge    c0010253 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001024e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010251:	eb 20                	jmp    c0010273 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010253:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010255:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010258:	39 d1                	cmp    ecx,edx
c001025a:	7e 04                	jle    c0010260 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001025c:	29 c2                	sub    edx,eax
c001025e:	eb 10                	jmp    c0010270 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010260:	8b 35 b4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b4
c0010266:	03 0e                	add    ecx,DWORD PTR [esi]
c0010268:	39 d1                	cmp    ecx,edx
c001026a:	7e 16                	jle    c0010282 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001026c:	29 c2                	sub    edx,eax
c001026e:	29 fa                	sub    edx,edi
c0010270:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010273:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010276:	8b 02                	mov    eax,DWORD PTR [edx]
c0010278:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001027b:	89 03                	mov    DWORD PTR [ebx],eax
c001027d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010280:	eb 1d                	jmp    c001029f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010282:	83 ec 0c             	sub    esp,0xc
c0010285:	68 66 e9 01 c0       	push   0xc001e966
c001028a:	e8 18 00 00 00       	call   c00102a7 <Krnl::panic(char const*)>
c001028f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010295:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001029c:	83 c4 10             	add    esp,0x10
c001029f:	89 d8                	mov    eax,ebx
c00102a1:	5b                   	pop    ebx
c00102a2:	5e                   	pop    esi
c00102a3:	5f                   	pop    edi
c00102a4:	c2 04 00             	ret    0x4

c00102a7 <Krnl::panic(char const*)>:
c00102a7:	53                   	push   ebx
c00102a8:	83 ec 10             	sub    esp,0x10
c00102ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102af:	fa                   	cli    
c00102b0:	c6 05 c0 35 02 c0 01 	mov    BYTE PTR ds:0xc00235c0,0x1
c00102b7:	53                   	push   ebx
c00102b8:	68 80 e9 01 c0       	push   0xc001e980
c00102bd:	e8 96 a4 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00102c2:	83 c4 0c             	add    esp,0xc
c00102c5:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c00102ca:	6a 01                	push   0x1
c00102cc:	6a 0f                	push   0xf
c00102ce:	50                   	push   eax
c00102cf:	e8 78 82 ff ff       	call   c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00102d4:	5a                   	pop    edx
c00102d5:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c00102db:	51                   	push   ecx
c00102dc:	e8 63 84 ff ff       	call   c0008744 <VgaText::clearScreen()>
c00102e1:	58                   	pop    eax
c00102e2:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c00102e8:	5a                   	pop    edx
c00102e9:	68 b1 e9 01 c0       	push   0xc001e9b1
c00102ee:	51                   	push   ecx
c00102ef:	e8 90 82 ff ff       	call   c0008584 <VgaText::setTitle(char*)>
c00102f4:	83 c4 0c             	add    esp,0xc
c00102f7:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c00102fc:	6a 01                	push   0x1
c00102fe:	6a 0f                	push   0xf
c0010300:	50                   	push   eax
c0010301:	e8 46 82 ff ff       	call   c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010306:	58                   	pop    eax
c0010307:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c001030d:	5a                   	pop    edx
c001030e:	68 99 e9 01 c0       	push   0xc001e999
c0010313:	51                   	push   ecx
c0010314:	e8 1f 87 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0010319:	83 c4 0c             	add    esp,0xc
c001031c:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c0010321:	6a 0f                	push   0xf
c0010323:	6a 01                	push   0x1
c0010325:	50                   	push   eax
c0010326:	e8 21 82 ff ff       	call   c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001032b:	58                   	pop    eax
c001032c:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c0010332:	5a                   	pop    edx
c0010333:	68 a2 e9 01 c0       	push   0xc001e9a2
c0010338:	51                   	push   ecx
c0010339:	e8 fa 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c001033e:	83 c4 0c             	add    esp,0xc
c0010341:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c0010346:	6a 01                	push   0x1
c0010348:	6a 0f                	push   0xf
c001034a:	50                   	push   eax
c001034b:	e8 fc 81 ff ff       	call   c000854c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010350:	58                   	pop    eax
c0010351:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c0010357:	5a                   	pop    edx
c0010358:	68 af e9 01 c0       	push   0xc001e9af
c001035d:	51                   	push   ecx
c001035e:	e8 d5 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0010363:	58                   	pop    eax
c0010364:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c001036a:	5a                   	pop    edx
c001036b:	68 c0 e9 01 c0       	push   0xc001e9c0
c0010370:	51                   	push   ecx
c0010371:	e8 c2 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0010376:	58                   	pop    eax
c0010377:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c001037d:	5a                   	pop    edx
c001037e:	68 b2 e9 01 c0       	push   0xc001e9b2
c0010383:	51                   	push   ecx
c0010384:	e8 af 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0010389:	58                   	pop    eax
c001038a:	8b 0d 94 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b94
c0010390:	5a                   	pop    edx
c0010391:	53                   	push   ebx
c0010392:	51                   	push   ecx
c0010393:	e8 a0 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0010398:	5b                   	pop    ebx
c0010399:	58                   	pop    eax
c001039a:	a1 94 0b 02 c0       	mov    eax,ds:0xc0020b94
c001039f:	68 af e9 01 c0       	push   0xc001e9af
c00103a4:	50                   	push   eax
c00103a5:	e8 8e 86 ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	eb fe                	jmp    c00103ad <Krnl::panic(char const*)+0x106>

c00103af <Krnl::powerThread(void*)>:
c00103af:	83 ec 0c             	sub    esp,0xc
c00103b2:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00103b7:	48                   	dec    eax
c00103b8:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00103bd:	75 01                	jne    c00103c0 <Krnl::powerThread(void*)+0x11>
c00103bf:	fb                   	sti    
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	c6 05 e0 35 02 c0 00 	mov    BYTE PTR ds:0xc00235e0,0x0
c00103ca:	6a 0a                	push   0xa
c00103cc:	e8 3b 35 00 00       	call   c001390c <sleep(unsigned int)>
c00103d1:	83 05 24 36 02 c0 0a 	add    DWORD PTR ds:0xc0023624,0xa
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	eb e3                	jmp    c00103c0 <Krnl::powerThread(void*)+0x11>

c00103dd <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00103dd:	57                   	push   edi
c00103de:	b9 09 00 00 00       	mov    ecx,0x9
c00103e3:	56                   	push   esi
c00103e4:	bf 00 36 02 c0       	mov    edi,0xc0023600
c00103e9:	fc                   	cld    
c00103ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00103ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00103f0:	5e                   	pop    esi
c00103f1:	5f                   	pop    edi
c00103f2:	c3                   	ret    

c00103f3 <Krnl::userIOReceived()>:
c00103f3:	c7 05 24 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023624,0x0
c00103fd:	c3                   	ret    

c00103fe <Krnl::handlePowerButton()>:
c00103fe:	83 ec 0c             	sub    esp,0xc
c0010401:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c0010406:	83 f8 02             	cmp    eax,0x2
c0010409:	75 10                	jne    c001041b <Krnl::handlePowerButton()+0x1d>
c001040b:	83 ec 0c             	sub    esp,0xc
c001040e:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0010414:	e8 51 6c ff ff       	call   c000706a <Computer::shutdown()>
c0010419:	eb 11                	jmp    c001042c <Krnl::handlePowerButton()+0x2e>
c001041b:	48                   	dec    eax
c001041c:	75 11                	jne    c001042f <Krnl::handlePowerButton()+0x31>
c001041e:	83 ec 0c             	sub    esp,0xc
c0010421:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0010427:	e8 6e 6c ff ff       	call   c000709a <Computer::sleep()>
c001042c:	83 c4 10             	add    esp,0x10
c001042f:	83 c4 0c             	add    esp,0xc
c0010432:	c3                   	ret    

c0010433 <Krnl::handleSleepButton()>:
c0010433:	83 ec 0c             	sub    esp,0xc
c0010436:	a1 04 36 02 c0       	mov    eax,ds:0xc0023604
c001043b:	83 f8 02             	cmp    eax,0x2
c001043e:	75 10                	jne    c0010450 <Krnl::handleSleepButton()+0x1d>
c0010440:	83 ec 0c             	sub    esp,0xc
c0010443:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0010449:	e8 1c 6c ff ff       	call   c000706a <Computer::shutdown()>
c001044e:	eb 11                	jmp    c0010461 <Krnl::handleSleepButton()+0x2e>
c0010450:	48                   	dec    eax
c0010451:	75 11                	jne    c0010464 <Krnl::handleSleepButton()+0x31>
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c001045c:	e8 39 6c ff ff       	call   c000709a <Computer::sleep()>
c0010461:	83 c4 10             	add    esp,0x10
c0010464:	83 c4 0c             	add    esp,0xc
c0010467:	c3                   	ret    

c0010468 <Krnl::setupPowerManager()>:
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	c7 05 24 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023624,0x0
c0010475:	68 f0 00 00 00       	push   0xf0
c001047a:	c6 05 e0 35 02 c0 00 	mov    BYTE PTR ds:0xc00235e0,0x0
c0010481:	6a 00                	push   0x0
c0010483:	68 af 03 01 c0       	push   0xc00103af
c0010488:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c001048e:	e8 49 2f 00 00       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c0010493:	c7 05 00 36 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023600,0x2
c001049d:	c7 05 04 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023604,0x1
c00104a7:	c7 05 08 36 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023608,0x3
c00104b1:	c7 05 0c 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002360c,0x0
c00104bb:	c7 05 18 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023618,0x0
c00104c5:	c7 05 10 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023610,0x0
c00104cf:	c7 05 1c 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002361c,0x0
c00104d9:	c7 05 14 36 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023614,0x3c
c00104e3:	c7 05 20 36 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023620,0x3c
c00104ed:	83 c4 1c             	add    esp,0x1c
c00104f0:	c3                   	ret    

c00104f1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00104f1:	55                   	push   ebp
c00104f2:	57                   	push   edi
c00104f3:	56                   	push   esi
c00104f4:	53                   	push   ebx
c00104f5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00104fb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010502:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010504:	8d 6e 01             	lea    ebp,[esi+0x1]
c0010507:	80 fb 40             	cmp    bl,0x40
c001050a:	75 1b                	jne    c0010527 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001050c:	8a 16                	mov    dl,BYTE PTR [esi]
c001050e:	84 d2                	test   dl,dl
c0010510:	0f 84 f1 00 00 00    	je     c0010607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010516:	8d 46 01             	lea    eax,[esi+0x1]
c0010519:	80 fa 3a             	cmp    dl,0x3a
c001051c:	74 04                	je     c0010522 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001051e:	89 c6                	mov    esi,eax
c0010520:	eb ea                	jmp    c001050c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0010522:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010525:	89 c6                	mov    esi,eax
c0010527:	50                   	push   eax
c0010528:	6a 40                	push   0x40
c001052a:	6a 00                	push   0x0
c001052c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010530:	50                   	push   eax
c0010531:	e8 ba ff fe ff       	call   c00004f0 <memset>
c0010536:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001053d:	31 c0                	xor    eax,eax
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010544:	84 c9                	test   cl,cl
c0010546:	0f 84 bb 00 00 00    	je     c0010607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001054c:	3d c7 00 00 00       	cmp    eax,0xc7
c0010551:	0f 8f b0 00 00 00    	jg     c0010607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010557:	80 f9 0a             	cmp    cl,0xa
c001055a:	0f 85 98 00 00 00    	jne    c00105f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0010560:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0010565:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010569:	a8 df                	test   al,0xdf
c001056b:	0f 94 c1             	sete   cl
c001056e:	3c 23                	cmp    al,0x23
c0010570:	0f 94 c2             	sete   dl
c0010573:	08 d1                	or     cl,dl
c0010575:	75 4a                	jne    c00105c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010577:	8d 50 f7             	lea    edx,[eax-0x9]
c001057a:	80 fa 01             	cmp    dl,0x1
c001057d:	76 42                	jbe    c00105c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001057f:	3c 5b                	cmp    al,0x5b
c0010581:	75 42                	jne    c00105c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010583:	80 fb 40             	cmp    bl,0x40
c0010586:	75 39                	jne    c00105c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010588:	83 ec 0c             	sub    esp,0xc
c001058b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001058f:	52                   	push   edx
c0010590:	e8 cb ff fe ff       	call   c0000560 <strlen>
c0010595:	83 c4 10             	add    esp,0x10
c0010598:	83 f8 3f             	cmp    eax,0x3f
c001059b:	77 6a                	ja     c0010607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001059d:	50                   	push   eax
c001059e:	50                   	push   eax
c001059f:	8d 54 24 61          	lea    edx,[esp+0x61]
c00105a3:	52                   	push   edx
c00105a4:	8d 54 24 24          	lea    edx,[esp+0x24]
c00105a8:	52                   	push   edx
c00105a9:	e8 72 00 ff ff       	call   c0000620 <strcpy>
c00105ae:	58                   	pop    eax
c00105af:	8d 54 24 24          	lea    edx,[esp+0x24]
c00105b3:	52                   	push   edx
c00105b4:	e8 a7 ff fe ff       	call   c0000560 <strlen>
c00105b9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	31 d2                	xor    edx,edx
c00105c3:	eb 3a                	jmp    c00105ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00105c5:	80 fb 40             	cmp    bl,0x40
c00105c8:	74 06                	je     c00105d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00105ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c00105ce:	eb 20                	jmp    c00105f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00105d0:	50                   	push   eax
c00105d1:	50                   	push   eax
c00105d2:	55                   	push   ebp
c00105d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00105d7:	50                   	push   eax
c00105d8:	e8 23 01 ff ff       	call   c0000700 <strcmp>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	85 c0                	test   eax,eax
c00105e2:	75 dd                	jne    c00105c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00105e4:	eb e4                	jmp    c00105ca <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00105e6:	8d 50 01             	lea    edx,[eax+0x1]
c00105e9:	80 f9 3d             	cmp    cl,0x3d
c00105ec:	74 1d                	je     c001060b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00105ee:	89 d0                	mov    eax,edx
c00105f0:	8a 08                	mov    cl,BYTE PTR [eax]
c00105f2:	84 c9                	test   cl,cl
c00105f4:	75 f0                	jne    c00105e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00105f6:	eb 0f                	jmp    c0010607 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00105f8:	8d 50 01             	lea    edx,[eax+0x1]
c00105fb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00105ff:	47                   	inc    edi
c0010600:	89 d0                	mov    eax,edx
c0010602:	e9 3b ff ff ff       	jmp    c0010542 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010607:	31 c0                	xor    eax,eax
c0010609:	eb 33                	jmp    c001063e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001060b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001060f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010612:	50                   	push   eax
c0010613:	50                   	push   eax
c0010614:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010618:	50                   	push   eax
c0010619:	56                   	push   esi
c001061a:	e8 e1 00 ff ff       	call   c0000700 <strcmp>
c001061f:	83 c4 10             	add    esp,0x10
c0010622:	85 c0                	test   eax,eax
c0010624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010628:	75 97                	jne    c00105c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001062a:	51                   	push   ecx
c001062b:	51                   	push   ecx
c001062c:	52                   	push   edx
c001062d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010634:	e8 e7 ff fe ff       	call   c0000620 <strcpy>
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	b0 01                	mov    al,0x1
c001063e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010644:	5b                   	pop    ebx
c0010645:	5e                   	pop    esi
c0010646:	5f                   	pop    edi
c0010647:	5d                   	pop    ebp
c0010648:	c3                   	ret    

c0010649 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010649:	57                   	push   edi
c001064a:	56                   	push   esi
c001064b:	53                   	push   ebx
c001064c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010652:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010659:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010660:	53                   	push   ebx
c0010661:	e8 fa fe fe ff       	call   c0000560 <strlen>
c0010666:	89 34 24             	mov    DWORD PTR [esp],esi
c0010669:	89 c7                	mov    edi,eax
c001066b:	e8 f0 fe fe ff       	call   c0000560 <strlen>
c0010670:	83 c4 10             	add    esp,0x10
c0010673:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010677:	3d ff 00 00 00       	cmp    eax,0xff
c001067c:	0f 87 d3 00 00 00    	ja     c0010755 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010682:	57                   	push   edi
c0010683:	57                   	push   edi
c0010684:	56                   	push   esi
c0010685:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010689:	56                   	push   esi
c001068a:	e8 91 ff fe ff       	call   c0000620 <strcpy>
c001068f:	58                   	pop    eax
c0010690:	5a                   	pop    edx
c0010691:	68 df ec 01 c0       	push   0xc001ecdf
c0010696:	56                   	push   esi
c0010697:	e8 44 01 ff ff       	call   c00007e0 <strcat>
c001069c:	59                   	pop    ecx
c001069d:	5f                   	pop    edi
c001069e:	53                   	push   ebx
c001069f:	56                   	push   esi
c00106a0:	e8 3b 01 ff ff       	call   c00007e0 <strcat>
c00106a5:	58                   	pop    eax
c00106a6:	5a                   	pop    edx
c00106a7:	68 fa e9 01 c0       	push   0xc001e9fa
c00106ac:	56                   	push   esi
c00106ad:	e8 2e 01 ff ff       	call   c00007e0 <strcat>
c00106b2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00106b9:	e8 0b 73 ff ff       	call   c00079c9 <malloc>
c00106be:	83 c4 0c             	add    esp,0xc
c00106c1:	89 c3                	mov    ebx,eax
c00106c3:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c00106c9:	56                   	push   esi
c00106ca:	50                   	push   eax
c00106cb:	e8 fe a5 ff ff       	call   c000acce <File::File(char const*, Process*)>
c00106d0:	83 c4 10             	add    esp,0x10
c00106d3:	85 db                	test   ebx,ebx
c00106d5:	74 7e                	je     c0010755 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00106d7:	51                   	push   ecx
c00106d8:	51                   	push   ecx
c00106d9:	6a 01                	push   0x1
c00106db:	53                   	push   ebx
c00106dc:	e8 ad a6 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c00106e1:	83 c4 10             	add    esp,0x10
c00106e4:	85 c0                	test   eax,eax
c00106e6:	74 08                	je     c00106f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ed:	53                   	push   ebx
c00106ee:	eb 5f                	jmp    c001074f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00106f0:	52                   	push   edx
c00106f1:	8d 44 24 17          	lea    eax,[esp+0x17]
c00106f5:	50                   	push   eax
c00106f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00106fa:	50                   	push   eax
c00106fb:	53                   	push   ebx
c00106fc:	e8 39 a9 ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c0010701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010705:	83 c4 10             	add    esp,0x10
c0010708:	89 c1                	mov    ecx,eax
c001070a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001070e:	74 31                	je     c0010741 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010710:	83 ec 0c             	sub    esp,0xc
c0010713:	50                   	push   eax
c0010714:	e8 b0 72 ff ff       	call   c00079c9 <malloc>
c0010719:	89 c6                	mov    esi,eax
c001071b:	58                   	pop    eax
c001071c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001071e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010722:	52                   	push   edx
c0010723:	56                   	push   esi
c0010724:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010728:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001072c:	53                   	push   ebx
c001072d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010730:	83 c4 20             	add    esp,0x20
c0010733:	85 c0                	test   eax,eax
c0010735:	75 0a                	jne    c0010741 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001073b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001073f:	74 18                	je     c0010759 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010741:	83 ec 0c             	sub    esp,0xc
c0010744:	53                   	push   ebx
c0010745:	e8 a2 a6 ff ff       	call   c000adec <File::close()>
c001074a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001074c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001074f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010752:	83 c4 10             	add    esp,0x10
c0010755:	31 c0                	xor    eax,eax
c0010757:	eb 3b                	jmp    c0010794 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010759:	83 ec 0c             	sub    esp,0xc
c001075c:	53                   	push   ebx
c001075d:	e8 8a a6 ff ff       	call   c000adec <File::close()>
c0010762:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010767:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001076a:	83 c4 0c             	add    esp,0xc
c001076d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010774:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001077b:	56                   	push   esi
c001077c:	e8 70 fd ff ff       	call   c00104f1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010781:	89 34 24             	mov    DWORD PTR [esp],esi
c0010784:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010788:	e8 4c 72 ff ff       	call   c00079d9 <free>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010794:	81 c4 20 01 00 00    	add    esp,0x120
c001079a:	5b                   	pop    ebx
c001079b:	5e                   	pop    esi
c001079c:	5f                   	pop    edi
c001079d:	c3                   	ret    

c001079e <Reg::getLine(char*, char*, char*)>:
c001079e:	57                   	push   edi
c001079f:	56                   	push   esi
c00107a0:	53                   	push   ebx
c00107a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00107a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00107ad:	57                   	push   edi
c00107ae:	56                   	push   esi
c00107af:	53                   	push   ebx
c00107b0:	68 ff e9 01 c0       	push   0xc001e9ff
c00107b5:	e8 8f fe ff ff       	call   c0010649 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	84 c0                	test   al,al
c00107bf:	75 10                	jne    c00107d1 <Reg::getLine(char*, char*, char*)+0x33>
c00107c1:	57                   	push   edi
c00107c2:	56                   	push   esi
c00107c3:	53                   	push   ebx
c00107c4:	68 24 ea 01 c0       	push   0xc001ea24
c00107c9:	e8 7b fe ff ff       	call   c0010649 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	5b                   	pop    ebx
c00107d2:	5e                   	pop    esi
c00107d3:	5f                   	pop    edi
c00107d4:	c3                   	ret    

c00107d5 <Reg::readInt(char*, char*, int*)>:
c00107d5:	55                   	push   ebp
c00107d6:	57                   	push   edi
c00107d7:	56                   	push   esi
c00107d8:	53                   	push   ebx
c00107d9:	81 ec f0 00 00 00    	sub    esp,0xf0
c00107df:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00107e3:	57                   	push   edi
c00107e4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00107eb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00107f2:	e8 a7 ff ff ff       	call   c001079e <Reg::getLine(char*, char*, char*)>
c00107f7:	83 c4 10             	add    esp,0x10
c00107fa:	84 c0                	test   al,al
c00107fc:	0f 84 b3 00 00 00    	je     c00108b5 <Reg::readInt(char*, char*, int*)+0xe0>
c0010802:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010806:	80 fa 2b             	cmp    dl,0x2b
c0010809:	74 0c                	je     c0010817 <Reg::readInt(char*, char*, int*)+0x42>
c001080b:	80 fa 2d             	cmp    dl,0x2d
c001080e:	75 0e                	jne    c001081e <Reg::readInt(char*, char*, int*)+0x49>
c0010810:	ba 01 00 00 00       	mov    edx,0x1
c0010815:	eb 0b                	jmp    c0010822 <Reg::readInt(char*, char*, int*)+0x4d>
c0010817:	ba 01 00 00 00       	mov    edx,0x1
c001081c:	eb 02                	jmp    c0010820 <Reg::readInt(char*, char*, int*)+0x4b>
c001081e:	31 d2                	xor    edx,edx
c0010820:	31 c0                	xor    eax,eax
c0010822:	be 0a 00 00 00       	mov    esi,0xa
c0010827:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001082c:	75 20                	jne    c001084e <Reg::readInt(char*, char*, int*)+0x79>
c001082e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010832:	80 f9 78             	cmp    cl,0x78
c0010835:	75 0a                	jne    c0010841 <Reg::readInt(char*, char*, int*)+0x6c>
c0010837:	83 c2 02             	add    edx,0x2
c001083a:	be 10 00 00 00       	mov    esi,0x10
c001083f:	eb 0d                	jmp    c001084e <Reg::readInt(char*, char*, int*)+0x79>
c0010841:	80 f9 62             	cmp    cl,0x62
c0010844:	75 08                	jne    c001084e <Reg::readInt(char*, char*, int*)+0x79>
c0010846:	83 c2 02             	add    edx,0x2
c0010849:	be 02 00 00 00       	mov    esi,0x2
c001084e:	01 d7                	add    edi,edx
c0010850:	31 d2                	xor    edx,edx
c0010852:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010854:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010858:	80 fb 0d             	cmp    bl,0xd
c001085b:	0f 94 c3             	sete   bl
c001085e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010863:	0f 94 c1             	sete   cl
c0010866:	08 cb                	or     bl,cl
c0010868:	75 3a                	jne    c00108a4 <Reg::readInt(char*, char*, int*)+0xcf>
c001086a:	0f af d6             	imul   edx,esi
c001086d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010872:	83 fe 10             	cmp    esi,0x10
c0010875:	75 26                	jne    c001089d <Reg::readInt(char*, char*, int*)+0xc8>
c0010877:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001087b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001087e:	89 e9                	mov    ecx,ebp
c0010880:	80 f9 05             	cmp    cl,0x5
c0010883:	77 06                	ja     c001088b <Reg::readInt(char*, char*, int*)+0xb6>
c0010885:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010889:	eb 16                	jmp    c00108a1 <Reg::readInt(char*, char*, int*)+0xcc>
c001088b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001088f:	83 e9 61             	sub    ecx,0x61
c0010892:	80 f9 05             	cmp    cl,0x5
c0010895:	77 06                	ja     c001089d <Reg::readInt(char*, char*, int*)+0xc8>
c0010897:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001089b:	eb 04                	jmp    c00108a1 <Reg::readInt(char*, char*, int*)+0xcc>
c001089d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00108a1:	47                   	inc    edi
c00108a2:	eb ae                	jmp    c0010852 <Reg::readInt(char*, char*, int*)+0x7d>
c00108a4:	84 c0                	test   al,al
c00108a6:	74 02                	je     c00108aa <Reg::readInt(char*, char*, int*)+0xd5>
c00108a8:	f7 da                	neg    edx
c00108aa:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00108b1:	89 10                	mov    DWORD PTR [eax],edx
c00108b3:	88 d8                	mov    al,bl
c00108b5:	81 c4 ec 00 00 00    	add    esp,0xec
c00108bb:	5b                   	pop    ebx
c00108bc:	5e                   	pop    esi
c00108bd:	5f                   	pop    edi
c00108be:	5d                   	pop    ebp
c00108bf:	c3                   	ret    

c00108c0 <Reg::readString(char*, char*, char*, int)>:
c00108c0:	57                   	push   edi
c00108c1:	56                   	push   esi
c00108c2:	53                   	push   ebx
c00108c3:	81 ec d4 00 00 00    	sub    esp,0xd4
c00108c9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00108d0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00108d4:	57                   	push   edi
c00108d5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00108dc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00108e3:	e8 b6 fe ff ff       	call   c001079e <Reg::getLine(char*, char*, char*)>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	89 c6                	mov    esi,eax
c00108ed:	84 c0                	test   al,al
c00108ef:	74 44                	je     c0010935 <Reg::readString(char*, char*, char*, int)+0x75>
c00108f1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00108f8:	31 c0                	xor    eax,eax
c00108fa:	4a                   	dec    edx
c00108fb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00108fe:	84 c9                	test   cl,cl
c0010900:	74 0f                	je     c0010911 <Reg::readString(char*, char*, char*, int)+0x51>
c0010902:	39 c2                	cmp    edx,eax
c0010904:	7e 0b                	jle    c0010911 <Reg::readString(char*, char*, char*, int)+0x51>
c0010906:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010909:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001090e:	40                   	inc    eax
c001090f:	eb ea                	jmp    c00108fb <Reg::readString(char*, char*, char*, int)+0x3b>
c0010911:	83 ec 0c             	sub    esp,0xc
c0010914:	53                   	push   ebx
c0010915:	e8 46 fc fe ff       	call   c0000560 <strlen>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010922:	75 11                	jne    c0010935 <Reg::readString(char*, char*, char*, int)+0x75>
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	53                   	push   ebx
c0010928:	e8 33 fc fe ff       	call   c0000560 <strlen>
c001092d:	83 c4 10             	add    esp,0x10
c0010930:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010935:	81 c4 d0 00 00 00    	add    esp,0xd0
c001093b:	89 f0                	mov    eax,esi
c001093d:	5b                   	pop    ebx
c001093e:	5e                   	pop    esi
c001093f:	5f                   	pop    edi
c0010940:	c3                   	ret    

c0010941 <Reg::readBool(char*, char*, bool*)>:
c0010941:	83 ec 20             	sub    esp,0x20
c0010944:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010948:	50                   	push   eax
c0010949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001094d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010951:	e8 7f fe ff ff       	call   c00107d5 <Reg::readInt(char*, char*, int*)>
c0010956:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001095b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001095f:	0f 95 02             	setne  BYTE PTR [edx]
c0010962:	83 c4 2c             	add    esp,0x2c
c0010965:	c3                   	ret    

c0010966 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010966:	53                   	push   ebx
c0010967:	83 ec 1c             	sub    esp,0x1c
c001096a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001096e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010972:	50                   	push   eax
c0010973:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001097b:	e8 c1 ff ff ff       	call   c0010941 <Reg::readBool(char*, char*, bool*)>
c0010980:	83 c4 10             	add    esp,0x10
c0010983:	84 c0                	test   al,al
c0010985:	74 04                	je     c001098b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010987:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001098b:	88 d8                	mov    al,bl
c001098d:	83 c4 18             	add    esp,0x18
c0010990:	5b                   	pop    ebx
c0010991:	c3                   	ret    

c0010992 <Reg::readIntWithDefault(char*, char*, int)>:
c0010992:	53                   	push   ebx
c0010993:	83 ec 1c             	sub    esp,0x1c
c0010996:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001099a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001099e:	50                   	push   eax
c001099f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00109a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00109a7:	e8 29 fe ff ff       	call   c00107d5 <Reg::readInt(char*, char*, int*)>
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	84 c0                	test   al,al
c00109b1:	74 04                	je     c00109b7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00109b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00109b7:	89 d8                	mov    eax,ebx
c00109b9:	83 c4 18             	add    esp,0x18
c00109bc:	5b                   	pop    ebx
c00109bd:	c3                   	ret    

c00109be <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00109be:	57                   	push   edi
c00109bf:	56                   	push   esi
c00109c0:	56                   	push   esi
c00109c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00109c5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00109c9:	56                   	push   esi
c00109ca:	57                   	push   edi
c00109cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d3:	e8 e8 fe ff ff       	call   c00108c0 <Reg::readString(char*, char*, char*, int)>
c00109d8:	83 c4 10             	add    esp,0x10
c00109db:	84 c0                	test   al,al
c00109dd:	75 1a                	jne    c00109f9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00109df:	51                   	push   ecx
c00109e0:	56                   	push   esi
c00109e1:	6a 00                	push   0x0
c00109e3:	57                   	push   edi
c00109e4:	e8 07 fb fe ff       	call   c00004f0 <memset>
c00109e9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00109ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00109f9:	89 f8                	mov    eax,edi
c00109fb:	5a                   	pop    edx
c00109fc:	5e                   	pop    esi
c00109fd:	5f                   	pop    edi
c00109fe:	c3                   	ret    

c00109ff <Sys::eject(regs*)>:
c00109ff:	83 ec 0c             	sub    esp,0xc
c0010a02:	83 ca ff             	or     edx,0xffffffff
c0010a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a09:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010a0c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a11:	83 e9 41             	sub    ecx,0x41
c0010a14:	83 f9 19             	cmp    ecx,0x19
c0010a17:	77 18                	ja     c0010a31 <Sys::eject(regs*)+0x32>
c0010a19:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c0010a20:	85 c9                	test   ecx,ecx
c0010a22:	74 0d                	je     c0010a31 <Sys::eject(regs*)+0x32>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	51                   	push   ecx
c0010a28:	e8 a9 c3 ff ff       	call   c000cdd6 <LogicalDisk::eject()>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	99                   	cdq    
c0010a31:	83 c4 0c             	add    esp,0xc
c0010a34:	c3                   	ret    

c0010a35 <Sys::exit(regs*)>:
c0010a35:	83 ec 18             	sub    esp,0x18
c0010a38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010a3f:	e8 dc 34 00 00       	call   c0013f20 <terminateTask(int)>
c0010a44:	83 c8 ff             	or     eax,0xffffffff
c0010a47:	83 c4 1c             	add    esp,0x1c
c0010a4a:	89 c2                	mov    edx,eax
c0010a4c:	c3                   	ret    

c0010a4d <Sys::getCwd(regs*)>:
c0010a4d:	83 ec 10             	sub    esp,0x10
c0010a50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a54:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010a57:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a5f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010a62:	e8 69 a0 ff ff       	call   c000aad0 <Fs::getcwd(Process*, char*, int)>
c0010a67:	83 c4 1c             	add    esp,0x1c
c0010a6a:	99                   	cdq    
c0010a6b:	c3                   	ret    

c0010a6c <Sys::getPID(regs*)>:
c0010a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a76:	99                   	cdq    
c0010a77:	c3                   	ret    

c0010a78 <Sys::getRAMData(regs*)>:
c0010a78:	8b 0d 78 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020b78
c0010a7e:	69 05 74 0b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020b74,0xc8
c0010a88:	99                   	cdq    
c0010a89:	f7 f9                	idiv   ecx
c0010a8b:	c1 e0 18             	shl    eax,0x18
c0010a8e:	09 c8                	or     eax,ecx
c0010a90:	99                   	cdq    
c0010a91:	c3                   	ret    

c0010a92 <Sys::getVGAPtr(regs*)>:
c0010a92:	55                   	push   ebp
c0010a93:	57                   	push   edi
c0010a94:	56                   	push   esi
c0010a95:	53                   	push   ebx
c0010a96:	83 ec 18             	sub    esp,0x18
c0010a99:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010aa0:	e8 7b 2f 00 00       	call   c0013a20 <Thr::processFromPID(int)>
c0010aa5:	83 c4 10             	add    esp,0x10
c0010aa8:	89 c1                	mov    ecx,eax
c0010aaa:	b8 01 00 00 00       	mov    eax,0x1
c0010aaf:	85 c9                	test   ecx,ecx
c0010ab1:	74 57                	je     c0010b0a <Sys::getVGAPtr(regs*)+0x78>
c0010ab3:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010ab9:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010abd:	74 0c                	je     c0010acb <Sys::getVGAPtr(regs*)+0x39>
c0010abf:	83 ec 0c             	sub    esp,0xc
c0010ac2:	55                   	push   ebp
c0010ac3:	e8 31 7c ff ff       	call   c00086f9 <setActiveTerminal(VgaText*)>
c0010ac8:	83 c4 10             	add    esp,0x10
c0010acb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010ace:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010ad1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010ad6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ad8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010adb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ade:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010ae4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ae7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010aea:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010af0:	50                   	push   eax
c0010af1:	50                   	push   eax
c0010af2:	68 3f ea 01 c0       	push   0xc001ea3f
c0010af7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010afa:	05 a8 0f 00 00       	add    eax,0xfa8
c0010aff:	50                   	push   eax
c0010b00:	e8 1b fb fe ff       	call   c0000620 <strcpy>
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	31 c0                	xor    eax,eax
c0010b0a:	83 c4 0c             	add    esp,0xc
c0010b0d:	31 d2                	xor    edx,edx
c0010b0f:	5b                   	pop    ebx
c0010b10:	5e                   	pop    esi
c0010b11:	5f                   	pop    edi
c0010b12:	5d                   	pop    ebp
c0010b13:	c3                   	ret    

c0010b14 <Sys::loadDLL(regs*)>:
c0010b14:	56                   	push   esi
c0010b15:	53                   	push   ebx
c0010b16:	31 d2                	xor    edx,edx
c0010b18:	51                   	push   ecx
c0010b19:	b8 01 00 00 00       	mov    eax,0x1
c0010b1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b22:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010b26:	0f 84 8c 00 00 00    	je     c0010bb8 <Sys::loadDLL(regs*)+0xa4>
c0010b2c:	83 ec 0c             	sub    esp,0xc
c0010b2f:	68 14 01 00 00       	push   0x114
c0010b34:	e8 90 6e ff ff       	call   c00079c9 <malloc>
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	89 c3                	mov    ebx,eax
c0010b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b43:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010b46:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010b49:	53                   	push   ebx
c0010b4a:	e8 7f a1 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	31 d2                	xor    edx,edx
c0010b54:	b8 02 00 00 00       	mov    eax,0x2
c0010b59:	85 db                	test   ebx,ebx
c0010b5b:	74 5b                	je     c0010bb8 <Sys::loadDLL(regs*)+0xa4>
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	53                   	push   ebx
c0010b61:	e8 96 a4 ff ff       	call   c000affc <File::exists()>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	84 c0                	test   al,al
c0010b6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b6d:	75 11                	jne    c0010b80 <Sys::loadDLL(regs*)+0x6c>
c0010b6f:	83 ec 0c             	sub    esp,0xc
c0010b72:	53                   	push   ebx
c0010b73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b76:	83 c4 10             	add    esp,0x10
c0010b79:	b8 03 00 00 00       	mov    eax,0x3
c0010b7e:	eb 36                	jmp    c0010bb6 <Sys::loadDLL(regs*)+0xa2>
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	53                   	push   ebx
c0010b84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b87:	58                   	pop    eax
c0010b88:	5a                   	pop    edx
c0010b89:	6a 00                	push   0x0
c0010b8b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010b8e:	e8 77 20 00 00       	call   c0012c0a <Thr::loadDLL(char const*, bool)>
c0010b93:	83 c4 10             	add    esp,0x10
c0010b96:	89 c1                	mov    ecx,eax
c0010b98:	31 d2                	xor    edx,edx
c0010b9a:	b8 04 00 00 00       	mov    eax,0x4
c0010b9f:	85 c9                	test   ecx,ecx
c0010ba1:	74 15                	je     c0010bb8 <Sys::loadDLL(regs*)+0xa4>
c0010ba3:	53                   	push   ebx
c0010ba4:	53                   	push   ebx
c0010ba5:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0010bab:	51                   	push   ecx
c0010bac:	e8 8a 22 00 00       	call   c0012e3b <Thr::executeDLL(unsigned long, void*)>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	31 c0                	xor    eax,eax
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	59                   	pop    ecx
c0010bb9:	5b                   	pop    ebx
c0010bba:	5e                   	pop    esi
c0010bbb:	c3                   	ret    

c0010bbc <Sys::read(regs*)>:
c0010bbc:	57                   	push   edi
c0010bbd:	56                   	push   esi
c0010bbe:	53                   	push   ebx
c0010bbf:	83 ec 10             	sub    esp,0x10
c0010bc2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bc6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bc9:	83 f8 02             	cmp    eax,0x2
c0010bcc:	77 10                	ja     c0010bde <Sys::read(regs*)+0x22>
c0010bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bd6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010bdc:	eb 0e                	jmp    c0010bec <Sys::read(regs*)+0x30>
c0010bde:	83 ec 0c             	sub    esp,0xc
c0010be1:	50                   	push   eax
c0010be2:	e8 c8 87 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0010be7:	83 c4 10             	add    esp,0x10
c0010bea:	89 c1                	mov    ecx,eax
c0010bec:	83 c8 ff             	or     eax,0xffffffff
c0010bef:	85 c9                	test   ecx,ecx
c0010bf1:	89 c2                	mov    edx,eax
c0010bf3:	74 28                	je     c0010c1d <Sys::read(regs*)+0x61>
c0010bf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bfd:	31 ff                	xor    edi,edi
c0010bff:	83 ec 0c             	sub    esp,0xc
c0010c02:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010c04:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010c08:	52                   	push   edx
c0010c09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c0c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010c0f:	57                   	push   edi
c0010c10:	56                   	push   esi
c0010c11:	51                   	push   ecx
c0010c12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010c15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c19:	83 c4 20             	add    esp,0x20
c0010c1c:	99                   	cdq    
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	5b                   	pop    ebx
c0010c21:	5e                   	pop    esi
c0010c22:	5f                   	pop    edi
c0010c23:	c3                   	ret    

c0010c24 <Sys::sbrk(regs*)>:
c0010c24:	56                   	push   esi
c0010c25:	53                   	push   ebx
c0010c26:	50                   	push   eax
c0010c27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c33:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0010c36:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0010c3c:	85 db                	test   ebx,ebx
c0010c3e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0010c41:	74 02                	je     c0010c45 <Sys::sbrk(regs*)+0x21>
c0010c43:	79 06                	jns    c0010c4b <Sys::sbrk(regs*)+0x27>
c0010c45:	89 f0                	mov    eax,esi
c0010c47:	31 d2                	xor    edx,edx
c0010c49:	eb 2a                	jmp    c0010c75 <Sys::sbrk(regs*)+0x51>
c0010c4b:	83 c8 ff             	or     eax,0xffffffff
c0010c4e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0010c54:	89 c2                	mov    edx,eax
c0010c56:	77 1d                	ja     c0010c75 <Sys::sbrk(regs*)+0x51>
c0010c58:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0010c5e:	50                   	push   eax
c0010c5f:	c1 ea 0c             	shr    edx,0xc
c0010c62:	68 07 0c 00 00       	push   0xc07
c0010c67:	52                   	push   edx
c0010c68:	51                   	push   ecx
c0010c69:	e8 30 90 ff ff       	call   c0009c9e <VAS::allocatePages(int, int)>
c0010c6e:	89 f0                	mov    eax,esi
c0010c70:	31 d2                	xor    edx,edx
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	59                   	pop    ecx
c0010c76:	5b                   	pop    ebx
c0010c77:	5e                   	pop    esi
c0010c78:	c3                   	ret    

c0010c79 <Sys::setCwd(regs*)>:
c0010c79:	83 ec 14             	sub    esp,0x14
c0010c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010c80:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010c83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c88:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010c8b:	e8 0b a4 ff ff       	call   c000b09b <Fs::setcwd(Process*, char*)>
c0010c90:	83 c4 1c             	add    esp,0x1c
c0010c93:	99                   	cdq    
c0010c94:	c3                   	ret    

c0010c95 <Sys::setTime(regs*)>:
c0010c95:	55                   	push   ebp
c0010c96:	31 c9                	xor    ecx,ecx
c0010c98:	57                   	push   edi
c0010c99:	bd 0c 00 00 00       	mov    ebp,0xc
c0010c9e:	56                   	push   esi
c0010c9f:	53                   	push   ebx
c0010ca0:	31 db                	xor    ebx,ebx
c0010ca2:	83 ec 10             	sub    esp,0x10
c0010ca5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ca9:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0010cac:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010caf:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0010cb2:	89 c2                	mov    edx,eax
c0010cb4:	66 81 ef 6c 07       	sub    di,0x76c
c0010cb9:	83 e2 1f             	and    edx,0x1f
c0010cbc:	c1 e7 10             	shl    edi,0x10
c0010cbf:	42                   	inc    edx
c0010cc0:	c1 e8 05             	shr    eax,0x5
c0010cc3:	88 d1                	mov    cl,dl
c0010cc5:	31 d2                	xor    edx,edx
c0010cc7:	f7 f5                	div    ebp
c0010cc9:	89 dd                	mov    ebp,ebx
c0010ccb:	88 d5                	mov    ch,dl
c0010ccd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0010cd3:	0f b7 c1             	movzx  eax,cx
c0010cd6:	31 d2                	xor    edx,edx
c0010cd8:	09 f8                	or     eax,edi
c0010cda:	bf 3c 00 00 00       	mov    edi,0x3c
c0010cdf:	89 c1                	mov    ecx,eax
c0010ce1:	89 f0                	mov    eax,esi
c0010ce3:	f7 f7                	div    edi
c0010ce5:	c1 e2 10             	shl    edx,0x10
c0010ce8:	09 d5                	or     ebp,edx
c0010cea:	31 d2                	xor    edx,edx
c0010cec:	89 eb                	mov    ebx,ebp
c0010cee:	f7 f7                	div    edi
c0010cf0:	bf 10 0e 00 00       	mov    edi,0xe10
c0010cf5:	88 d7                	mov    bh,dl
c0010cf7:	89 f0                	mov    eax,esi
c0010cf9:	31 d2                	xor    edx,edx
c0010cfb:	f7 f7                	div    edi
c0010cfd:	bf 18 00 00 00       	mov    edi,0x18
c0010d02:	31 d2                	xor    edx,edx
c0010d04:	f7 f7                	div    edi
c0010d06:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0010d0b:	88 d3                	mov    bl,dl
c0010d0d:	53                   	push   ebx
c0010d0e:	51                   	push   ecx
c0010d0f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0010d15:	e8 92 ab ff ff       	call   c000b8ac <Clock::setTimeInDatetimeLocal(datetime_t)>
c0010d1a:	83 c4 1c             	add    esp,0x1c
c0010d1d:	83 f0 01             	xor    eax,0x1
c0010d20:	5b                   	pop    ebx
c0010d21:	0f b6 c0             	movzx  eax,al
c0010d24:	5e                   	pop    esi
c0010d25:	31 d2                	xor    edx,edx
c0010d27:	5f                   	pop    edi
c0010d28:	5d                   	pop    ebp
c0010d29:	c3                   	ret    

c0010d2a <Sys::timezone(regs*)>:
c0010d2a:	53                   	push   ebx
c0010d2b:	83 ec 08             	sub    esp,0x8
c0010d2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d32:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0010d36:	75 17                	jne    c0010d4f <Sys::timezone(regs*)+0x25>
c0010d38:	83 ec 0c             	sub    esp,0xc
c0010d3b:	68 49 ea 01 c0       	push   0xc001ea49
c0010d40:	e8 13 9a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0010d45:	83 c8 ff             	or     eax,0xffffffff
c0010d48:	83 c4 10             	add    esp,0x10
c0010d4b:	89 c2                	mov    edx,eax
c0010d4d:	eb 20                	jmp    c0010d6f <Sys::timezone(regs*)+0x45>
c0010d4f:	83 ec 0c             	sub    esp,0xc
c0010d52:	68 5e ea 01 c0       	push   0xc001ea5e
c0010d57:	e8 fc 99 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0010d5c:	58                   	pop    eax
c0010d5d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010d60:	e8 a3 a8 ff ff       	call   c000b608 <User::loadClockSettings(int)>
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	b8 01 00 00 00       	mov    eax,0x1
c0010d6d:	31 d2                	xor    edx,edx
c0010d6f:	83 c4 08             	add    esp,0x8
c0010d72:	5b                   	pop    ebx
c0010d73:	c3                   	ret    

c0010d74 <Sys::write(regs*)>:
c0010d74:	57                   	push   edi
c0010d75:	56                   	push   esi
c0010d76:	53                   	push   ebx
c0010d77:	83 ec 10             	sub    esp,0x10
c0010d7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d81:	83 f8 02             	cmp    eax,0x2
c0010d84:	77 10                	ja     c0010d96 <Sys::write(regs*)+0x22>
c0010d86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d8e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010d94:	eb 0e                	jmp    c0010da4 <Sys::write(regs*)+0x30>
c0010d96:	83 ec 0c             	sub    esp,0xc
c0010d99:	50                   	push   eax
c0010d9a:	e8 10 86 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	89 c1                	mov    ecx,eax
c0010da4:	83 c8 ff             	or     eax,0xffffffff
c0010da7:	85 c9                	test   ecx,ecx
c0010da9:	89 c2                	mov    edx,eax
c0010dab:	74 28                	je     c0010dd5 <Sys::write(regs*)+0x61>
c0010dad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010db5:	31 ff                	xor    edi,edi
c0010db7:	83 ec 0c             	sub    esp,0xc
c0010dba:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010dbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010dc0:	52                   	push   edx
c0010dc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010dc4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010dc7:	57                   	push   edi
c0010dc8:	56                   	push   esi
c0010dc9:	51                   	push   ecx
c0010dca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010dd1:	83 c4 20             	add    esp,0x20
c0010dd4:	99                   	cdq    
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	5b                   	pop    ebx
c0010dd9:	5e                   	pop    esi
c0010dda:	5f                   	pop    edi
c0010ddb:	c3                   	ret    

c0010ddc <Sys::wsbe(regs*)>:
c0010ddc:	57                   	push   edi
c0010ddd:	b9 0b 00 00 00       	mov    ecx,0xb
c0010de2:	56                   	push   esi
c0010de3:	be 9d ea 01 c0       	mov    esi,0xc001ea9d
c0010de8:	53                   	push   ebx
c0010de9:	83 ec 30             	sub    esp,0x30
c0010dec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010df0:	fc                   	cld    
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010df6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010dfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e02:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0010e08:	8b 06                	mov    eax,DWORD PTR [esi]
c0010e0a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010e0d:	57                   	push   edi
c0010e0e:	e8 4d f7 fe ff       	call   c0000560 <strlen>
c0010e13:	5a                   	pop    edx
c0010e14:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0010e18:	52                   	push   edx
c0010e19:	31 d2                	xor    edx,edx
c0010e1b:	57                   	push   edi
c0010e1c:	52                   	push   edx
c0010e1d:	50                   	push   eax
c0010e1e:	56                   	push   esi
c0010e1f:	ff d3                	call   ebx
c0010e21:	83 c4 14             	add    esp,0x14
c0010e24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010e28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010e2b:	e8 f0 30 00 00       	call   c0013f20 <terminateTask(int)>
c0010e30:	83 c4 40             	add    esp,0x40
c0010e33:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e38:	5b                   	pop    ebx
c0010e39:	31 d2                	xor    edx,edx
c0010e3b:	5e                   	pop    esi
c0010e3c:	5f                   	pop    edi
c0010e3d:	c3                   	ret    

c0010e3e <Sys::yield(regs*)>:
c0010e3e:	83 ec 0c             	sub    esp,0xc
c0010e41:	fa                   	cli    
c0010e42:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0010e48:	e8 af 27 00 00       	call   c00135fc <schedule()>
c0010e4d:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0010e52:	48                   	dec    eax
c0010e53:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0010e58:	75 01                	jne    c0010e5b <Sys::yield(regs*)+0x1d>
c0010e5a:	fb                   	sti    
c0010e5b:	31 c0                	xor    eax,eax
c0010e5d:	31 d2                	xor    edx,edx
c0010e5f:	83 c4 0c             	add    esp,0xc
c0010e62:	c3                   	ret    

c0010e63 <sysCallSeekDir(regs*)>:
c0010e63:	31 c0                	xor    eax,eax
c0010e65:	31 d2                	xor    edx,edx
c0010e67:	c3                   	ret    

c0010e68 <sysCallTellDir(regs*)>:
c0010e68:	31 c0                	xor    eax,eax
c0010e6a:	31 d2                	xor    edx,edx
c0010e6c:	c3                   	ret    

c0010e6d <sysCallVerify(regs*)>:
c0010e6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e71:	31 d2                	xor    edx,edx
c0010e73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e76:	c3                   	ret    

c0010e77 <sysCallGetArgc(regs*)>:
c0010e77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e7f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010e85:	99                   	cdq    
c0010e86:	c3                   	ret    

c0010e87 <sysCallTTYName(regs*)>:
c0010e87:	b8 01 00 00 00       	mov    eax,0x1
c0010e8c:	31 d2                	xor    edx,edx
c0010e8e:	c3                   	ret    

c0010e8f <sysFormatDisk(regs*)>:
c0010e8f:	56                   	push   esi
c0010e90:	53                   	push   ebx
c0010e91:	50                   	push   eax
c0010e92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e96:	8b 1d 34 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c34
c0010e9c:	eb 28                	jmp    c0010ec6 <sysFormatDisk(regs*)+0x37>
c0010e9e:	83 ec 0c             	sub    esp,0xc
c0010ea1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010ea4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ea7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ea9:	51                   	push   ecx
c0010eaa:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ead:	51                   	push   ecx
c0010eae:	50                   	push   eax
c0010eaf:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c0010eb6:	50                   	push   eax
c0010eb7:	53                   	push   ebx
c0010eb8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010ebb:	83 c4 20             	add    esp,0x20
c0010ebe:	83 f8 08             	cmp    eax,0x8
c0010ec1:	75 12                	jne    c0010ed5 <sysFormatDisk(regs*)+0x46>
c0010ec3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010ec6:	85 db                	test   ebx,ebx
c0010ec8:	75 d4                	jne    c0010e9e <sysFormatDisk(regs*)+0xf>
c0010eca:	59                   	pop    ecx
c0010ecb:	b8 03 00 00 00       	mov    eax,0x3
c0010ed0:	31 d2                	xor    edx,edx
c0010ed2:	5b                   	pop    ebx
c0010ed3:	5e                   	pop    esi
c0010ed4:	c3                   	ret    
c0010ed5:	85 c0                	test   eax,eax
c0010ed7:	74 1b                	je     c0010ef4 <sysFormatDisk(regs*)+0x65>
c0010ed9:	83 f8 09             	cmp    eax,0x9
c0010edc:	74 0b                	je     c0010ee9 <sysFormatDisk(regs*)+0x5a>
c0010ede:	59                   	pop    ecx
c0010edf:	b8 02 00 00 00       	mov    eax,0x2
c0010ee4:	31 d2                	xor    edx,edx
c0010ee6:	5b                   	pop    ebx
c0010ee7:	5e                   	pop    esi
c0010ee8:	c3                   	ret    
c0010ee9:	59                   	pop    ecx
c0010eea:	b8 01 00 00 00       	mov    eax,0x1
c0010eef:	31 d2                	xor    edx,edx
c0010ef1:	5b                   	pop    ebx
c0010ef2:	5e                   	pop    esi
c0010ef3:	c3                   	ret    
c0010ef4:	59                   	pop    ecx
c0010ef5:	31 c0                	xor    eax,eax
c0010ef7:	31 d2                	xor    edx,edx
c0010ef9:	5b                   	pop    ebx
c0010efa:	5e                   	pop    esi
c0010efb:	c3                   	ret    

c0010efc <sysSetDiskVolumeLabel(regs*)>:
c0010efc:	56                   	push   esi
c0010efd:	53                   	push   ebx
c0010efe:	53                   	push   ebx
c0010eff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f03:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f06:	83 f8 19             	cmp    eax,0x19
c0010f09:	77 2d                	ja     c0010f38 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010f0b:	8b 0c 85 a0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf60]
c0010f12:	85 c9                	test   ecx,ecx
c0010f14:	74 22                	je     c0010f38 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010f16:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f19:	85 db                	test   ebx,ebx
c0010f1b:	74 1b                	je     c0010f38 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010f1d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010f23:	85 d2                	test   edx,edx
c0010f25:	74 11                	je     c0010f38 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010f27:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f29:	53                   	push   ebx
c0010f2a:	50                   	push   eax
c0010f2b:	51                   	push   ecx
c0010f2c:	52                   	push   edx
c0010f2d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	99                   	cdq    
c0010f34:	59                   	pop    ecx
c0010f35:	5b                   	pop    ebx
c0010f36:	5e                   	pop    esi
c0010f37:	c3                   	ret    
c0010f38:	59                   	pop    ecx
c0010f39:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f43:	5b                   	pop    ebx
c0010f44:	5e                   	pop    esi
c0010f45:	c3                   	ret    

c0010f46 <sysGetDiskVolumeLabel(regs*)>:
c0010f46:	57                   	push   edi
c0010f47:	56                   	push   esi
c0010f48:	53                   	push   ebx
c0010f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f50:	83 fa 19             	cmp    edx,0x19
c0010f53:	77 38                	ja     c0010f8d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f55:	8b 0c 95 a0 30 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcf60]
c0010f5c:	85 c9                	test   ecx,ecx
c0010f5e:	74 2d                	je     c0010f8d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f60:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010f63:	85 db                	test   ebx,ebx
c0010f65:	74 26                	je     c0010f8d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f67:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010f6a:	85 f6                	test   esi,esi
c0010f6c:	74 1f                	je     c0010f8d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f6e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010f74:	85 c0                	test   eax,eax
c0010f76:	74 15                	je     c0010f8d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	8b 38                	mov    edi,DWORD PTR [eax]
c0010f7d:	56                   	push   esi
c0010f7e:	53                   	push   ebx
c0010f7f:	52                   	push   edx
c0010f80:	51                   	push   ecx
c0010f81:	50                   	push   eax
c0010f82:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010f85:	83 c4 20             	add    esp,0x20
c0010f88:	99                   	cdq    
c0010f89:	5b                   	pop    ebx
c0010f8a:	5e                   	pop    esi
c0010f8b:	5f                   	pop    edi
c0010f8c:	c3                   	ret    
c0010f8d:	5b                   	pop    ebx
c0010f8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f98:	5e                   	pop    esi
c0010f99:	5f                   	pop    edi
c0010f9a:	c3                   	ret    

c0010f9b <sysShutdown(regs*)>:
c0010f9b:	83 ec 0c             	sub    esp,0xc
c0010f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fa5:	85 c0                	test   eax,eax
c0010fa7:	74 18                	je     c0010fc1 <sysShutdown(regs*)+0x26>
c0010fa9:	83 f8 01             	cmp    eax,0x1
c0010fac:	74 38                	je     c0010fe6 <sysShutdown(regs*)+0x4b>
c0010fae:	83 f8 02             	cmp    eax,0x2
c0010fb1:	74 24                	je     c0010fd7 <sysShutdown(regs*)+0x3c>
c0010fb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fbd:	83 c4 0c             	add    esp,0xc
c0010fc0:	c3                   	ret    
c0010fc1:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0010fc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fc8:	6a 00                	push   0x0
c0010fca:	6a 00                	push   0x0
c0010fcc:	6a 00                	push   0x0
c0010fce:	50                   	push   eax
c0010fcf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	eb dc                	jmp    c0010fb3 <sysShutdown(regs*)+0x18>
c0010fd7:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0010fdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fde:	6a 00                	push   0x0
c0010fe0:	6a 00                	push   0x0
c0010fe2:	6a 01                	push   0x1
c0010fe4:	eb e8                	jmp    c0010fce <sysShutdown(regs*)+0x33>
c0010fe6:	a1 20 31 02 c0       	mov    eax,ds:0xc0023120
c0010feb:	85 c0                	test   eax,eax
c0010fed:	74 02                	je     c0010ff1 <sysShutdown(regs*)+0x56>
c0010fef:	ff d0                	call   eax
c0010ff1:	31 c0                	xor    eax,eax
c0010ff3:	31 d2                	xor    edx,edx
c0010ff5:	83 c4 0c             	add    esp,0xc
c0010ff8:	c3                   	ret    

c0010ff9 <sysCallRealpath(regs*)>:
c0010ff9:	83 ec 0c             	sub    esp,0xc
c0010ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011000:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011003:	85 d2                	test   edx,edx
c0011005:	74 07                	je     c001100e <sysCallRealpath(regs*)+0x15>
c0011007:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001100a:	85 c0                	test   eax,eax
c001100c:	75 0b                	jne    c0011019 <sysCallRealpath(regs*)+0x20>
c001100e:	b8 01 00 00 00       	mov    eax,0x1
c0011013:	31 d2                	xor    edx,edx
c0011015:	83 c4 0c             	add    esp,0xc
c0011018:	c3                   	ret    
c0011019:	51                   	push   ecx
c001101a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011020:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011023:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011029:	51                   	push   ecx
c001102a:	52                   	push   edx
c001102b:	50                   	push   eax
c001102c:	e8 f3 9a ff ff       	call   c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	31 c0                	xor    eax,eax
c0011036:	31 d2                	xor    edx,edx
c0011038:	83 c4 0c             	add    esp,0xc
c001103b:	c3                   	ret    

c001103c <sysCallReadDir(regs*)>:
c001103c:	53                   	push   ebx
c001103d:	83 ec 18             	sub    esp,0x18
c0011040:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011044:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011047:	83 f8 02             	cmp    eax,0x2
c001104a:	76 61                	jbe    c00110ad <sysCallReadDir(regs*)+0x71>
c001104c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011053:	77 49                	ja     c001109e <sysCallReadDir(regs*)+0x62>
c0011055:	83 ec 0c             	sub    esp,0xc
c0011058:	50                   	push   eax
c0011059:	e8 51 83 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c001105e:	83 c4 10             	add    esp,0x10
c0011061:	85 c0                	test   eax,eax
c0011063:	74 39                	je     c001109e <sysCallReadDir(regs*)+0x62>
c0011065:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001106d:	83 ec 0c             	sub    esp,0xc
c0011070:	8b 10                	mov    edx,DWORD PTR [eax]
c0011072:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011076:	51                   	push   ecx
c0011077:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001107a:	51                   	push   ecx
c001107b:	6a 00                	push   0x0
c001107d:	68 10 01 00 00       	push   0x110
c0011082:	50                   	push   eax
c0011083:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011086:	83 c4 20             	add    esp,0x20
c0011089:	85 c0                	test   eax,eax
c001108b:	74 29                	je     c00110b6 <sysCallReadDir(regs*)+0x7a>
c001108d:	83 f8 07             	cmp    eax,0x7
c0011090:	74 1b                	je     c00110ad <sysCallReadDir(regs*)+0x71>
c0011092:	b8 02 00 00 00       	mov    eax,0x2
c0011097:	31 d2                	xor    edx,edx
c0011099:	83 c4 18             	add    esp,0x18
c001109c:	5b                   	pop    ebx
c001109d:	c3                   	ret    
c001109e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110a8:	83 c4 18             	add    esp,0x18
c00110ab:	5b                   	pop    ebx
c00110ac:	c3                   	ret    
c00110ad:	b8 01 00 00 00       	mov    eax,0x1
c00110b2:	31 d2                	xor    edx,edx
c00110b4:	eb e3                	jmp    c0011099 <sysCallReadDir(regs*)+0x5d>
c00110b6:	31 c0                	xor    eax,eax
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	eb dd                	jmp    c0011099 <sysCallReadDir(regs*)+0x5d>

c00110bc <sysCallIsATTY(regs*)>:
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110c6:	83 f8 02             	cmp    eax,0x2
c00110c9:	76 07                	jbe    c00110d2 <sysCallIsATTY(regs*)+0x16>
c00110cb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110d0:	75 28                	jne    c00110fa <sysCallIsATTY(regs*)+0x3e>
c00110d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00110e0:	85 c0                	test   eax,eax
c00110e2:	74 26                	je     c001110a <sysCallIsATTY(regs*)+0x4e>
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00110e9:	50                   	push   eax
c00110ea:	ff 12                	call   DWORD PTR [edx]
c00110ec:	31 d2                	xor    edx,edx
c00110ee:	25 ff 00 00 00       	and    eax,0xff
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	83 c4 0c             	add    esp,0xc
c00110f9:	c3                   	ret    
c00110fa:	83 ec 0c             	sub    esp,0xc
c00110fd:	50                   	push   eax
c00110fe:	e8 ac 82 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	85 c0                	test   eax,eax
c0011108:	75 da                	jne    c00110e4 <sysCallIsATTY(regs*)+0x28>
c001110a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001110f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011114:	83 c4 0c             	add    esp,0xc
c0011117:	c3                   	ret    

c0011118 <sysCallSeek(regs*)>:
c0011118:	53                   	push   ebx
c0011119:	83 ec 08             	sub    esp,0x8
c001111c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011120:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011123:	8d 50 fd             	lea    edx,[eax-0x3]
c0011126:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001112c:	77 34                	ja     c0011162 <sysCallSeek(regs*)+0x4a>
c001112e:	83 ec 0c             	sub    esp,0xc
c0011131:	50                   	push   eax
c0011132:	e8 78 82 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0011137:	83 c4 0c             	add    esp,0xc
c001113a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001113d:	31 db                	xor    ebx,ebx
c001113f:	53                   	push   ebx
c0011140:	51                   	push   ecx
c0011141:	50                   	push   eax
c0011142:	e8 05 9d ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0011147:	83 c4 10             	add    esp,0x10
c001114a:	85 c0                	test   eax,eax
c001114c:	0f 95 c0             	setne  al
c001114f:	31 d2                	xor    edx,edx
c0011151:	25 ff 00 00 00       	and    eax,0xff
c0011156:	f7 d8                	neg    eax
c0011158:	83 d2 00             	adc    edx,0x0
c001115b:	83 c4 08             	add    esp,0x8
c001115e:	f7 da                	neg    edx
c0011160:	5b                   	pop    ebx
c0011161:	c3                   	ret    
c0011162:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011167:	ba ff ff ff ff       	mov    edx,0xffffffff
c001116c:	83 c4 08             	add    esp,0x8
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    

c0011171 <sysCallTell(regs*)>:
c0011171:	53                   	push   ebx
c0011172:	83 ec 08             	sub    esp,0x8
c0011175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011179:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001117c:	83 f8 02             	cmp    eax,0x2
c001117f:	76 50                	jbe    c00111d1 <sysCallTell(regs*)+0x60>
c0011181:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011186:	76 19                	jbe    c00111a1 <sysCallTell(regs*)+0x30>
c0011188:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001118b:	31 d2                	xor    edx,edx
c001118d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011193:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001119a:	31 c0                	xor    eax,eax
c001119c:	83 c4 08             	add    esp,0x8
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    
c00111a1:	83 ec 0c             	sub    esp,0xc
c00111a4:	50                   	push   eax
c00111a5:	e8 05 82 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c00111aa:	5a                   	pop    edx
c00111ab:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00111ae:	59                   	pop    ecx
c00111af:	53                   	push   ebx
c00111b0:	50                   	push   eax
c00111b1:	e8 ec 9c ff ff       	call   c000aea2 <File::tell(unsigned long long*)>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	85 c0                	test   eax,eax
c00111bb:	0f 95 c0             	setne  al
c00111be:	31 d2                	xor    edx,edx
c00111c0:	25 ff 00 00 00       	and    eax,0xff
c00111c5:	f7 d8                	neg    eax
c00111c7:	83 d2 00             	adc    edx,0x0
c00111ca:	83 c4 08             	add    esp,0x8
c00111cd:	f7 da                	neg    edx
c00111cf:	5b                   	pop    ebx
c00111d0:	c3                   	ret    
c00111d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111db:	83 c4 08             	add    esp,0x8
c00111de:	5b                   	pop    ebx
c00111df:	c3                   	ret    

c00111e0 <sysCallSize(regs*)>:
c00111e0:	53                   	push   ebx
c00111e1:	83 ec 18             	sub    esp,0x18
c00111e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111eb:	83 f8 02             	cmp    eax,0x2
c00111ee:	76 56                	jbe    c0011246 <sysCallSize(regs*)+0x66>
c00111f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111f5:	76 19                	jbe    c0011210 <sysCallSize(regs*)+0x30>
c00111f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111fa:	31 d2                	xor    edx,edx
c00111fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011202:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011209:	31 c0                	xor    eax,eax
c001120b:	83 c4 18             	add    esp,0x18
c001120e:	5b                   	pop    ebx
c001120f:	c3                   	ret    
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	50                   	push   eax
c0011214:	e8 96 81 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0011219:	83 c4 0c             	add    esp,0xc
c001121c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011220:	52                   	push   edx
c0011221:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011224:	52                   	push   edx
c0011225:	50                   	push   eax
c0011226:	e8 0f 9e ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	85 c0                	test   eax,eax
c0011230:	0f 95 c0             	setne  al
c0011233:	31 d2                	xor    edx,edx
c0011235:	25 ff 00 00 00       	and    eax,0xff
c001123a:	f7 d8                	neg    eax
c001123c:	83 d2 00             	adc    edx,0x0
c001123f:	83 c4 18             	add    esp,0x18
c0011242:	f7 da                	neg    edx
c0011244:	5b                   	pop    ebx
c0011245:	c3                   	ret    
c0011246:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001124b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011250:	83 c4 18             	add    esp,0x18
c0011253:	5b                   	pop    ebx
c0011254:	c3                   	ret    

c0011255 <sysCallSizeFromFilename(regs*)>:
c0011255:	57                   	push   edi
c0011256:	56                   	push   esi
c0011257:	53                   	push   ebx
c0011258:	83 ec 20             	sub    esp,0x20
c001125b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001125f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011262:	83 fb 02             	cmp    ebx,0x2
c0011265:	0f 86 8c 00 00 00    	jbe    c00112f7 <sysCallSizeFromFilename(regs*)+0xa2>
c001126b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011271:	76 1b                	jbe    c001128e <sysCallSizeFromFilename(regs*)+0x39>
c0011273:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011276:	31 d2                	xor    edx,edx
c0011278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001127e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011285:	83 c4 20             	add    esp,0x20
c0011288:	31 c0                	xor    eax,eax
c001128a:	5b                   	pop    ebx
c001128b:	5e                   	pop    esi
c001128c:	5f                   	pop    edi
c001128d:	c3                   	ret    
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	68 14 01 00 00       	push   0x114
c0011296:	e8 2e 67 ff ff       	call   c00079c9 <malloc>
c001129b:	83 c4 0c             	add    esp,0xc
c001129e:	89 c7                	mov    edi,eax
c00112a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112a8:	50                   	push   eax
c00112a9:	53                   	push   ebx
c00112aa:	57                   	push   edi
c00112ab:	e8 1e 9a ff ff       	call   c000acce <File::File(char const*, Process*)>
c00112b0:	83 c4 0c             	add    esp,0xc
c00112b3:	8d 44 24 23          	lea    eax,[esp+0x23]
c00112b7:	50                   	push   eax
c00112b8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00112bb:	52                   	push   edx
c00112bc:	57                   	push   edi
c00112bd:	e8 78 9d ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c00112c2:	83 c4 10             	add    esp,0x10
c00112c5:	85 ff                	test   edi,edi
c00112c7:	74 14                	je     c00112dd <sysCallSizeFromFilename(regs*)+0x88>
c00112c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112cd:	8b 17                	mov    edx,DWORD PTR [edi]
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	57                   	push   edi
c00112d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112dd:	85 c0                	test   eax,eax
c00112df:	0f 95 c0             	setne  al
c00112e2:	31 d2                	xor    edx,edx
c00112e4:	25 ff 00 00 00       	and    eax,0xff
c00112e9:	f7 d8                	neg    eax
c00112eb:	83 d2 00             	adc    edx,0x0
c00112ee:	83 c4 20             	add    esp,0x20
c00112f1:	f7 da                	neg    edx
c00112f3:	5b                   	pop    ebx
c00112f4:	5e                   	pop    esi
c00112f5:	5f                   	pop    edi
c00112f6:	c3                   	ret    
c00112f7:	83 c4 20             	add    esp,0x20
c00112fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112ff:	5b                   	pop    ebx
c0011300:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011305:	5e                   	pop    esi
c0011306:	5f                   	pop    edi
c0011307:	c3                   	ret    

c0011308 <sysCallClose(regs*)>:
c0011308:	53                   	push   ebx
c0011309:	83 ec 08             	sub    esp,0x8
c001130c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011310:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011313:	83 f8 02             	cmp    eax,0x2
c0011316:	76 41                	jbe    c0011359 <sysCallClose(regs*)+0x51>
c0011318:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001131e:	83 fa 01             	cmp    edx,0x1
c0011321:	76 2d                	jbe    c0011350 <sysCallClose(regs*)+0x48>
c0011323:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011328:	77 2f                	ja     c0011359 <sysCallClose(regs*)+0x51>
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	50                   	push   eax
c001132e:	e8 7c 80 ff ff       	call   c00093af <getFromFileDescriptor(int)>
c0011333:	89 c3                	mov    ebx,eax
c0011335:	89 04 24             	mov    DWORD PTR [esp],eax
c0011338:	e8 af 9a ff ff       	call   c000adec <File::close()>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	85 db                	test   ebx,ebx
c0011342:	74 0c                	je     c0011350 <sysCallClose(regs*)+0x48>
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011349:	53                   	push   ebx
c001134a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001134d:	83 c4 10             	add    esp,0x10
c0011350:	31 c0                	xor    eax,eax
c0011352:	31 d2                	xor    edx,edx
c0011354:	83 c4 08             	add    esp,0x8
c0011357:	5b                   	pop    ebx
c0011358:	c3                   	ret    
c0011359:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001135e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011363:	83 c4 08             	add    esp,0x8
c0011366:	5b                   	pop    ebx
c0011367:	c3                   	ret    

c0011368 <sysCallOpenDir(regs*)>:
c0011368:	56                   	push   esi
c0011369:	53                   	push   ebx
c001136a:	50                   	push   eax
c001136b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001136f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011372:	85 c0                	test   eax,eax
c0011374:	74 5b                	je     c00113d1 <sysCallOpenDir(regs*)+0x69>
c0011376:	83 ec 0c             	sub    esp,0xc
c0011379:	68 14 01 00 00       	push   0x114
c001137e:	e8 46 66 ff ff       	call   c00079c9 <malloc>
c0011383:	83 c4 0c             	add    esp,0xc
c0011386:	89 c6                	mov    esi,eax
c0011388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001138d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011390:	50                   	push   eax
c0011391:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011394:	50                   	push   eax
c0011395:	56                   	push   esi
c0011396:	e8 5d 9e ff ff       	call   c000b1f8 <Directory::Directory(char const*, Process*)>
c001139b:	83 c4 10             	add    esp,0x10
c001139e:	85 f6                	test   esi,esi
c00113a0:	74 2f                	je     c00113d1 <sysCallOpenDir(regs*)+0x69>
c00113a2:	83 ec 0c             	sub    esp,0xc
c00113a5:	56                   	push   esi
c00113a6:	e8 0d 9f ff ff       	call   c000b2b8 <Directory::open()>
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	85 c0                	test   eax,eax
c00113b0:	75 1f                	jne    c00113d1 <sysCallOpenDir(regs*)+0x69>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	56                   	push   esi
c00113b6:	e8 ff 7c ff ff       	call   c00090ba <UnixFile::getFileDescriptor()>
c00113bb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	89 02                	mov    DWORD PTR [edx],eax
c00113c3:	c1 f8 1f             	sar    eax,0x1f
c00113c6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113c9:	31 c0                	xor    eax,eax
c00113cb:	59                   	pop    ecx
c00113cc:	31 d2                	xor    edx,edx
c00113ce:	5b                   	pop    ebx
c00113cf:	5e                   	pop    esi
c00113d0:	c3                   	ret    
c00113d1:	59                   	pop    ecx
c00113d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113dc:	5b                   	pop    ebx
c00113dd:	5e                   	pop    esi
c00113de:	c3                   	ret    

c00113df <sysCallCloseDir(regs*)>:
c00113df:	53                   	push   ebx
c00113e0:	83 ec 08             	sub    esp,0x8
c00113e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113ea:	8d 50 fd             	lea    edx,[eax-0x3]
c00113ed:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00113f3:	77 2f                	ja     c0011424 <sysCallCloseDir(regs*)+0x45>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	50                   	push   eax
c00113f9:	e8 b1 7f ff ff       	call   c00093af <getFromFileDescriptor(int)>
c00113fe:	89 c3                	mov    ebx,eax
c0011400:	89 04 24             	mov    DWORD PTR [esp],eax
c0011403:	e8 0c 9f ff ff       	call   c000b314 <Directory::close()>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	85 db                	test   ebx,ebx
c001140d:	74 0c                	je     c001141b <sysCallCloseDir(regs*)+0x3c>
c001140f:	83 ec 0c             	sub    esp,0xc
c0011412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011414:	53                   	push   ebx
c0011415:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	31 c0                	xor    eax,eax
c001141d:	31 d2                	xor    edx,edx
c001141f:	83 c4 08             	add    esp,0x8
c0011422:	5b                   	pop    ebx
c0011423:	c3                   	ret    
c0011424:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011429:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142e:	83 c4 08             	add    esp,0x8
c0011431:	5b                   	pop    ebx
c0011432:	c3                   	ret    

c0011433 <sysCallMakeDir(regs*)>:
c0011433:	56                   	push   esi
c0011434:	53                   	push   ebx
c0011435:	83 ec 10             	sub    esp,0x10
c0011438:	68 14 01 00 00       	push   0x114
c001143d:	e8 87 65 ff ff       	call   c00079c9 <malloc>
c0011442:	83 c4 0c             	add    esp,0xc
c0011445:	89 c3                	mov    ebx,eax
c0011447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001144c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001144f:	56                   	push   esi
c0011450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011454:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011457:	50                   	push   eax
c0011458:	53                   	push   ebx
c0011459:	e8 9a 9d ff ff       	call   c000b1f8 <Directory::Directory(char const*, Process*)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 db                	test   ebx,ebx
c0011463:	74 32                	je     c0011497 <sysCallMakeDir(regs*)+0x64>
c0011465:	83 ec 0c             	sub    esp,0xc
c0011468:	53                   	push   ebx
c0011469:	e8 2a a0 ff ff       	call   c000b498 <Directory::create()>
c001146e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011471:	89 c6                	mov    esi,eax
c0011473:	e8 9c 9e ff ff       	call   c000b314 <Directory::close()>
c0011478:	8b 03                	mov    eax,DWORD PTR [ebx]
c001147a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001147d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011480:	83 c4 10             	add    esp,0x10
c0011483:	31 c0                	xor    eax,eax
c0011485:	59                   	pop    ecx
c0011486:	85 f6                	test   esi,esi
c0011488:	5b                   	pop    ebx
c0011489:	0f 95 c0             	setne  al
c001148c:	5e                   	pop    esi
c001148d:	31 d2                	xor    edx,edx
c001148f:	f7 d8                	neg    eax
c0011491:	83 d2 00             	adc    edx,0x0
c0011494:	f7 da                	neg    edx
c0011496:	c3                   	ret    
c0011497:	59                   	pop    ecx
c0011498:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001149d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a2:	5b                   	pop    ebx
c00114a3:	5e                   	pop    esi
c00114a4:	c3                   	ret    

c00114a5 <sysCallWait(regs*)>:
c00114a5:	83 ec 10             	sub    esp,0x10
c00114a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114ac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114af:	52                   	push   edx
c00114b0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00114b3:	51                   	push   ecx
c00114b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114b7:	50                   	push   eax
c00114b8:	e8 6b 23 00 00       	call   c0013828 <waitTask(int, int*, int)>
c00114bd:	83 c4 1c             	add    esp,0x1c
c00114c0:	99                   	cdq    
c00114c1:	c3                   	ret    

c00114c2 <sysCallNotImpl(regs*)>:
c00114c2:	83 ec 18             	sub    esp,0x18
c00114c5:	68 c9 ea 01 c0       	push   0xc001eac9
c00114ca:	e8 d8 ed ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00114cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114d9:	83 c4 1c             	add    esp,0x1c
c00114dc:	c3                   	ret    

c00114dd <sysPanic(regs*)>:
c00114dd:	83 ec 18             	sub    esp,0x18
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114e7:	50                   	push   eax
c00114e8:	e8 ba ed ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00114ed:	b8 01 00 00 00       	mov    eax,0x1
c00114f2:	31 d2                	xor    edx,edx
c00114f4:	83 c4 1c             	add    esp,0x1c
c00114f7:	c3                   	ret    

c00114f8 <sysCallRmdir(regs*)>:
c00114f8:	56                   	push   esi
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 20             	sub    esp,0x20
c00114fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011501:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011504:	68 14 01 00 00       	push   0x114
c0011509:	e8 bb 64 ff ff       	call   c00079c9 <malloc>
c001150e:	83 c4 0c             	add    esp,0xc
c0011511:	89 c3                	mov    ebx,eax
c0011513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011518:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001151b:	50                   	push   eax
c001151c:	56                   	push   esi
c001151d:	53                   	push   ebx
c001151e:	e8 ab 97 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0011523:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011526:	e8 db 99 ff ff       	call   c000af06 <File::unlink()>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	85 db                	test   ebx,ebx
c0011530:	74 14                	je     c0011546 <sysCallRmdir(regs*)+0x4e>
c0011532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011536:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	53                   	push   ebx
c001153c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001153f:	83 c4 10             	add    esp,0x10
c0011542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011546:	85 c0                	test   eax,eax
c0011548:	0f 95 c0             	setne  al
c001154b:	31 d2                	xor    edx,edx
c001154d:	25 ff 00 00 00       	and    eax,0xff
c0011552:	f7 d8                	neg    eax
c0011554:	83 d2 00             	adc    edx,0x0
c0011557:	83 c4 14             	add    esp,0x14
c001155a:	f7 da                	neg    edx
c001155c:	5b                   	pop    ebx
c001155d:	5e                   	pop    esi
c001155e:	c3                   	ret    

c001155f <sysCallUnlink(regs*)>:
c001155f:	56                   	push   esi
c0011560:	53                   	push   ebx
c0011561:	83 ec 20             	sub    esp,0x20
c0011564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011568:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001156b:	68 14 01 00 00       	push   0x114
c0011570:	e8 54 64 ff ff       	call   c00079c9 <malloc>
c0011575:	83 c4 0c             	add    esp,0xc
c0011578:	89 c3                	mov    ebx,eax
c001157a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011582:	50                   	push   eax
c0011583:	56                   	push   esi
c0011584:	53                   	push   ebx
c0011585:	e8 44 97 ff ff       	call   c000acce <File::File(char const*, Process*)>
c001158a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001158d:	e8 74 99 ff ff       	call   c000af06 <File::unlink()>
c0011592:	83 c4 10             	add    esp,0x10
c0011595:	85 db                	test   ebx,ebx
c0011597:	74 14                	je     c00115ad <sysCallUnlink(regs*)+0x4e>
c0011599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001159d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001159f:	83 ec 0c             	sub    esp,0xc
c00115a2:	53                   	push   ebx
c00115a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ad:	85 c0                	test   eax,eax
c00115af:	0f 95 c0             	setne  al
c00115b2:	31 d2                	xor    edx,edx
c00115b4:	25 ff 00 00 00       	and    eax,0xff
c00115b9:	f7 d8                	neg    eax
c00115bb:	83 d2 00             	adc    edx,0x0
c00115be:	83 c4 14             	add    esp,0x14
c00115c1:	f7 da                	neg    edx
c00115c3:	5b                   	pop    ebx
c00115c4:	5e                   	pop    esi
c00115c5:	c3                   	ret    

c00115c6 <sysCallGetArgv(regs*)>:
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115cd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00115d0:	85 c0                	test   eax,eax
c00115d2:	78 2c                	js     c0011600 <sysCallGetArgv(regs*)+0x3a>
c00115d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115da:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00115dd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00115e3:	7d 1b                	jge    c0011600 <sysCallGetArgv(regs*)+0x3a>
c00115e5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00115ec:	85 c0                	test   eax,eax
c00115ee:	74 18                	je     c0011608 <sysCallGetArgv(regs*)+0x42>
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00115f7:	50                   	push   eax
c00115f8:	e8 23 f0 fe ff       	call   c0000620 <strcpy>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	31 c0                	xor    eax,eax
c0011602:	31 d2                	xor    edx,edx
c0011604:	83 c4 0c             	add    esp,0xc
c0011607:	c3                   	ret    
c0011608:	b8 01 00 00 00       	mov    eax,0x1
c001160d:	31 d2                	xor    edx,edx
c001160f:	83 c4 0c             	add    esp,0xc
c0011612:	c3                   	ret    

c0011613 <sysCallUSleep(regs*)>:
c0011613:	83 ec 1c             	sub    esp,0x1c
c0011616:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001161a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001161d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011620:	6a 00                	push   0x0
c0011622:	6a 64                	push   0x64
c0011624:	52                   	push   edx
c0011625:	50                   	push   eax
c0011626:	e8 a5 ad 00 00       	call   c001c3d0 <__udivdi3>
c001162b:	83 c4 14             	add    esp,0x14
c001162e:	50                   	push   eax
c001162f:	e8 c8 22 00 00       	call   c00138fc <milliTenthSleep(unsigned int)>
c0011634:	31 c0                	xor    eax,eax
c0011636:	31 d2                	xor    edx,edx
c0011638:	83 c4 1c             	add    esp,0x1c
c001163b:	c3                   	ret    

c001163c <sysCallSpawn(regs*)>:
c001163c:	56                   	push   esi
c001163d:	53                   	push   ebx
c001163e:	50                   	push   eax
c001163f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011643:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011646:	85 c0                	test   eax,eax
c0011648:	75 08                	jne    c0011652 <sysCallSpawn(regs*)+0x16>
c001164a:	59                   	pop    ecx
c001164b:	31 c0                	xor    eax,eax
c001164d:	31 d2                	xor    edx,edx
c001164f:	5b                   	pop    ebx
c0011650:	5e                   	pop    esi
c0011651:	c3                   	ret    
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	68 1f 07 00 00       	push   0x71f
c001165a:	e8 6a 63 ff ff       	call   c00079c9 <malloc>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	89 c6                	mov    esi,eax
c0011664:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011667:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001166a:	85 c0                	test   eax,eax
c001166c:	75 33                	jne    c00116a1 <sysCallSpawn(regs*)+0x65>
c001166e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011673:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011676:	52                   	push   edx
c0011677:	50                   	push   eax
c0011678:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001167b:	53                   	push   ebx
c001167c:	56                   	push   esi
c001167d:	e8 5e 19 00 00       	call   c0012fe0 <Process::Process(char const*, Process*, char**)>
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001168c:	75 bc                	jne    c001164a <sysCallSpawn(regs*)+0xe>
c001168e:	83 ec 0c             	sub    esp,0xc
c0011691:	56                   	push   esi
c0011692:	e8 3d 1e 00 00       	call   c00134d4 <Process::createUserThread()>
c0011697:	8b 06                	mov    eax,DWORD PTR [esi]
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	99                   	cdq    
c001169d:	59                   	pop    ecx
c001169e:	5b                   	pop    ebx
c001169f:	5e                   	pop    esi
c00116a0:	c3                   	ret    
c00116a1:	31 c0                	xor    eax,eax
c00116a3:	eb d1                	jmp    c0011676 <sysCallSpawn(regs*)+0x3a>

c00116a5 <sysCallGetEnv(regs*)>:
c00116a5:	57                   	push   edi
c00116a6:	56                   	push   esi
c00116a7:	53                   	push   ebx
c00116a8:	83 ec 1c             	sub    esp,0x1c
c00116ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00116b7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00116ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116bd:	50                   	push   eax
c00116be:	e8 30 eb ff ff       	call   c00101f3 <Krnl::getProcessTotalEnvCount(Process*)>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	39 c7                	cmp    edi,eax
c00116c8:	7c 14                	jl     c00116de <sysCallGetEnv(regs*)+0x39>
c00116ca:	85 f6                	test   esi,esi
c00116cc:	75 0b                	jne    c00116d9 <sysCallGetEnv(regs*)+0x34>
c00116ce:	83 c4 10             	add    esp,0x10
c00116d1:	31 c0                	xor    eax,eax
c00116d3:	5b                   	pop    ebx
c00116d4:	31 d2                	xor    edx,edx
c00116d6:	5e                   	pop    esi
c00116d7:	5f                   	pop    edi
c00116d8:	c3                   	ret    
c00116d9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00116dc:	eb f0                	jmp    c00116ce <sysCallGetEnv(regs*)+0x29>
c00116de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00116e2:	52                   	push   edx
c00116e3:	57                   	push   edi
c00116e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00116ea:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00116ed:	51                   	push   ecx
c00116ee:	50                   	push   eax
c00116ef:	e8 1f eb ff ff       	call   c0010213 <Krnl::getProcessEnvPair(Process*, int)>
c00116f4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00116f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116ff:	83 c4 0c             	add    esp,0xc
c0011702:	85 db                	test   ebx,ebx
c0011704:	75 23                	jne    c0011729 <sysCallGetEnv(regs*)+0x84>
c0011706:	83 ec 0c             	sub    esp,0xc
c0011709:	50                   	push   eax
c001170a:	e8 51 ee fe ff       	call   c0000560 <strlen>
c001170f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011712:	89 c3                	mov    ebx,eax
c0011714:	e8 47 ee fe ff       	call   c0000560 <strlen>
c0011719:	31 d2                	xor    edx,edx
c001171b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	5b                   	pop    ebx
c0011726:	5e                   	pop    esi
c0011727:	5f                   	pop    edi
c0011728:	c3                   	ret    
c0011729:	83 ec 08             	sub    esp,0x8
c001172c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001172f:	50                   	push   eax
c0011730:	56                   	push   esi
c0011731:	e8 ea ee fe ff       	call   c0000620 <strcpy>
c0011736:	58                   	pop    eax
c0011737:	5a                   	pop    edx
c0011738:	68 e3 ea 01 c0       	push   0xc001eae3
c001173d:	56                   	push   esi
c001173e:	e8 9d f0 fe ff       	call   c00007e0 <strcat>
c0011743:	59                   	pop    ecx
c0011744:	5b                   	pop    ebx
c0011745:	57                   	push   edi
c0011746:	56                   	push   esi
c0011747:	e8 94 f0 fe ff       	call   c00007e0 <strcat>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	e9 7a ff ff ff       	jmp    c00116ce <sysCallGetEnv(regs*)+0x29>

c0011754 <sysSetFatAttrib(regs*)>:
c0011754:	57                   	push   edi
c0011755:	56                   	push   esi
c0011756:	53                   	push   ebx
c0011757:	83 ec 1c             	sub    esp,0x1c
c001175a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001175e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011761:	68 14 01 00 00       	push   0x114
c0011766:	e8 5e 62 ff ff       	call   c00079c9 <malloc>
c001176b:	83 c4 0c             	add    esp,0xc
c001176e:	89 c3                	mov    ebx,eax
c0011770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011775:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011778:	50                   	push   eax
c0011779:	57                   	push   edi
c001177a:	53                   	push   ebx
c001177b:	e8 4e 95 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0011780:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011783:	83 c4 0c             	add    esp,0xc
c0011786:	0f b6 d4             	movzx  edx,ah
c0011789:	25 ff 00 00 00       	and    eax,0xff
c001178e:	52                   	push   edx
c001178f:	50                   	push   eax
c0011790:	53                   	push   ebx
c0011791:	e8 0a 98 ff ff       	call   c000afa0 <File::chfatattr(unsigned char, unsigned char)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	85 db                	test   ebx,ebx
c001179b:	74 14                	je     c00117b1 <sysSetFatAttrib(regs*)+0x5d>
c001179d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	53                   	push   ebx
c00117a7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00117aa:	83 c4 10             	add    esp,0x10
c00117ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117b1:	85 c0                	test   eax,eax
c00117b3:	0f 95 c0             	setne  al
c00117b6:	31 d2                	xor    edx,edx
c00117b8:	25 ff 00 00 00       	and    eax,0xff
c00117bd:	f7 d8                	neg    eax
c00117bf:	83 d2 00             	adc    edx,0x0
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	f7 da                	neg    edx
c00117c7:	5b                   	pop    ebx
c00117c8:	5e                   	pop    esi
c00117c9:	5f                   	pop    edi
c00117ca:	c3                   	ret    

c00117cb <sysPipe(regs*)>:
c00117cb:	57                   	push   edi
c00117cc:	56                   	push   esi
c00117cd:	53                   	push   ebx
c00117ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d2:	83 ec 0c             	sub    esp,0xc
c00117d5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00117d8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00117db:	6a 20                	push   0x20
c00117dd:	e8 e7 61 ff ff       	call   c00079c9 <malloc>
c00117e2:	89 c3                	mov    ebx,eax
c00117e4:	58                   	pop    eax
c00117e5:	5a                   	pop    edx
c00117e6:	68 00 50 00 00       	push   0x5000
c00117eb:	53                   	push   ebx
c00117ec:	e8 cf 6b ff ff       	call   c00083c0 <Pipe::Pipe(int)>
c00117f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117f4:	e8 c1 78 ff ff       	call   c00090ba <UnixFile::getFileDescriptor()>
c00117f9:	89 07                	mov    DWORD PTR [edi],eax
c00117fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117fe:	e8 b7 78 ff ff       	call   c00090ba <UnixFile::getFileDescriptor()>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	89 06                	mov    DWORD PTR [esi],eax
c0011808:	31 d2                	xor    edx,edx
c001180a:	5b                   	pop    ebx
c001180b:	31 c0                	xor    eax,eax
c001180d:	5e                   	pop    esi
c001180e:	5f                   	pop    edi
c001180f:	c3                   	ret    

c0011810 <sysGetUnixTime(regs*)>:
c0011810:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0011815:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001181b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001181f:	e9 ba 9e ff ff       	jmp    c000b6de <Clock::timeInSecondsLocal()>

c0011824 <string_ends_with(char const*, char const*)>:
c0011824:	57                   	push   edi
c0011825:	56                   	push   esi
c0011826:	53                   	push   ebx
c0011827:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001182b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001182f:	83 ec 0c             	sub    esp,0xc
c0011832:	53                   	push   ebx
c0011833:	e8 28 ed fe ff       	call   c0000560 <strlen>
c0011838:	89 3c 24             	mov    DWORD PTR [esp],edi
c001183b:	89 c6                	mov    esi,eax
c001183d:	e8 1e ed fe ff       	call   c0000560 <strlen>
c0011842:	83 c4 10             	add    esp,0x10
c0011845:	39 c6                	cmp    esi,eax
c0011847:	7d 06                	jge    c001184f <string_ends_with(char const*, char const*)+0x2b>
c0011849:	5b                   	pop    ebx
c001184a:	31 c0                	xor    eax,eax
c001184c:	5e                   	pop    esi
c001184d:	5f                   	pop    edi
c001184e:	c3                   	ret    
c001184f:	83 ec 08             	sub    esp,0x8
c0011852:	29 c6                	sub    esi,eax
c0011854:	57                   	push   edi
c0011855:	01 f3                	add    ebx,esi
c0011857:	53                   	push   ebx
c0011858:	e8 a3 ee fe ff       	call   c0000700 <strcmp>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	85 c0                	test   eax,eax
c0011862:	5b                   	pop    ebx
c0011863:	0f 94 c0             	sete   al
c0011866:	5e                   	pop    esi
c0011867:	25 ff 00 00 00       	and    eax,0xff
c001186c:	5f                   	pop    edi
c001186d:	c3                   	ret    

c001186e <sysCallOpen(regs*)>:
c001186e:	56                   	push   esi
c001186f:	53                   	push   ebx
c0011870:	81 ec 04 01 00 00    	sub    esp,0x104
c0011876:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001187d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011880:	85 c9                	test   ecx,ecx
c0011882:	0f 84 b9 01 00 00    	je     c0011a41 <sysCallOpen(regs*)+0x1d3>
c0011888:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001188b:	85 c0                	test   eax,eax
c001188d:	0f 84 ae 01 00 00    	je     c0011a41 <sysCallOpen(regs*)+0x1d3>
c0011893:	52                   	push   edx
c0011894:	68 e5 ea 01 c0       	push   0xc001eae5
c0011899:	50                   	push   eax
c001189a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001189e:	56                   	push   esi
c001189f:	e8 80 92 ff ff       	call   c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)>
c00118a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00118a7:	e8 b4 ec fe ff       	call   c0000560 <strlen>
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	48                   	dec    eax
c00118b0:	74 1d                	je     c00118cf <sysCallOpen(regs*)+0x61>
c00118b2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00118b5:	eb 0f                	jmp    c00118c6 <sysCallOpen(regs*)+0x58>
c00118b7:	80 fa 3a             	cmp    dl,0x3a
c00118ba:	74 0f                	je     c00118cb <sysCallOpen(regs*)+0x5d>
c00118bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00118c0:	48                   	dec    eax
c00118c1:	74 0c                	je     c00118cf <sysCallOpen(regs*)+0x61>
c00118c3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00118c6:	80 fa 2e             	cmp    dl,0x2e
c00118c9:	75 ec                	jne    c00118b7 <sysCallOpen(regs*)+0x49>
c00118cb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00118cf:	83 ec 08             	sub    esp,0x8
c00118d2:	68 e9 ea 01 c0       	push   0xc001eae9
c00118d7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118da:	50                   	push   eax
c00118db:	e8 44 ff ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	85 c0                	test   eax,eax
c00118e5:	74 1d                	je     c0011904 <sysCallOpen(regs*)+0x96>
c00118e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118ea:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00118f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118f7:	81 c4 04 01 00 00    	add    esp,0x104
c00118fd:	31 c0                	xor    eax,eax
c00118ff:	31 d2                	xor    edx,edx
c0011901:	5b                   	pop    ebx
c0011902:	5e                   	pop    esi
c0011903:	c3                   	ret    
c0011904:	83 ec 08             	sub    esp,0x8
c0011907:	68 ee ea 01 c0       	push   0xc001eaee
c001190c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001190f:	50                   	push   eax
c0011910:	e8 0f ff ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	85 c0                	test   eax,eax
c001191a:	75 cb                	jne    c00118e7 <sysCallOpen(regs*)+0x79>
c001191c:	83 ec 08             	sub    esp,0x8
c001191f:	68 ea ea 01 c0       	push   0xc001eaea
c0011924:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011927:	50                   	push   eax
c0011928:	e8 d3 ed fe ff       	call   c0000700 <strcmp>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	85 c0                	test   eax,eax
c0011932:	74 b3                	je     c00118e7 <sysCallOpen(regs*)+0x79>
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 e9 ea 01 c0       	push   0xc001eae9
c001193c:	56                   	push   esi
c001193d:	e8 e2 fe ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	85 c0                	test   eax,eax
c0011947:	75 9e                	jne    c00118e7 <sysCallOpen(regs*)+0x79>
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	68 f3 ea 01 c0       	push   0xc001eaf3
c0011951:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011954:	50                   	push   eax
c0011955:	e8 ca fe ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	85 c0                	test   eax,eax
c001195f:	0f 85 ef 00 00 00    	jne    c0011a54 <sysCallOpen(regs*)+0x1e6>
c0011965:	83 ec 08             	sub    esp,0x8
c0011968:	68 f8 ea 01 c0       	push   0xc001eaf8
c001196d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011970:	50                   	push   eax
c0011971:	e8 ae fe ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	85 c0                	test   eax,eax
c001197b:	0f 85 d3 00 00 00    	jne    c0011a54 <sysCallOpen(regs*)+0x1e6>
c0011981:	83 ec 08             	sub    esp,0x8
c0011984:	68 f4 ea 01 c0       	push   0xc001eaf4
c0011989:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001198c:	51                   	push   ecx
c001198d:	e8 6e ed fe ff       	call   c0000700 <strcmp>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	85 c0                	test   eax,eax
c0011997:	0f 84 b7 00 00 00    	je     c0011a54 <sysCallOpen(regs*)+0x1e6>
c001199d:	83 ec 08             	sub    esp,0x8
c00119a0:	68 f3 ea 01 c0       	push   0xc001eaf3
c00119a5:	56                   	push   esi
c00119a6:	e8 79 fe ff ff       	call   c0011824 <string_ends_with(char const*, char const*)>
c00119ab:	83 c4 10             	add    esp,0x10
c00119ae:	85 c0                	test   eax,eax
c00119b0:	0f 85 9e 00 00 00    	jne    c0011a54 <sysCallOpen(regs*)+0x1e6>
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	68 14 01 00 00       	push   0x114
c00119be:	e8 06 60 ff ff       	call   c00079c9 <malloc>
c00119c3:	83 c4 0c             	add    esp,0xc
c00119c6:	89 c6                	mov    esi,eax
c00119c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d0:	50                   	push   eax
c00119d1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00119d4:	52                   	push   edx
c00119d5:	56                   	push   esi
c00119d6:	e8 f3 92 ff ff       	call   c000acce <File::File(char const*, Process*)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	85 f6                	test   esi,esi
c00119e0:	74 5f                	je     c0011a41 <sysCallOpen(regs*)+0x1d3>
c00119e2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00119e5:	89 d0                	mov    eax,edx
c00119e7:	25 ff 00 00 00       	and    eax,0xff
c00119ec:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00119ef:	89 d0                	mov    eax,edx
c00119f1:	83 e0 01             	and    eax,0x1
c00119f4:	f6 c2 02             	test   dl,0x2
c00119f7:	74 03                	je     c00119fc <sysCallOpen(regs*)+0x18e>
c00119f9:	83 c8 02             	or     eax,0x2
c00119fc:	f6 c2 04             	test   dl,0x4
c00119ff:	74 03                	je     c0011a04 <sysCallOpen(regs*)+0x196>
c0011a01:	83 c8 04             	or     eax,0x4
c0011a04:	f6 c2 08             	test   dl,0x8
c0011a07:	74 03                	je     c0011a0c <sysCallOpen(regs*)+0x19e>
c0011a09:	83 c8 0a             	or     eax,0xa
c0011a0c:	83 e2 10             	and    edx,0x10
c0011a0f:	74 03                	je     c0011a14 <sysCallOpen(regs*)+0x1a6>
c0011a11:	83 c8 12             	or     eax,0x12
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	50                   	push   eax
c0011a18:	56                   	push   esi
c0011a19:	e8 70 93 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	85 c0                	test   eax,eax
c0011a23:	75 1c                	jne    c0011a41 <sysCallOpen(regs*)+0x1d3>
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	56                   	push   esi
c0011a29:	e8 8c 76 ff ff       	call   c00090ba <UnixFile::getFileDescriptor()>
c0011a2e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	89 02                	mov    DWORD PTR [edx],eax
c0011a36:	c1 f8 1f             	sar    eax,0x1f
c0011a39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011a3c:	e9 b6 fe ff ff       	jmp    c00118f7 <sysCallOpen(regs*)+0x89>
c0011a41:	81 c4 04 01 00 00    	add    esp,0x104
c0011a47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a51:	5b                   	pop    ebx
c0011a52:	5e                   	pop    esi
c0011a53:	c3                   	ret    
c0011a54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a57:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011a5d:	e9 8e fe ff ff       	jmp    c00118f0 <sysCallOpen(regs*)+0x82>

c0011a62 <Sys::loadSyscalls()>:
c0011a62:	c7 05 40 36 02 c0 3e 0e 01 c0 	mov    DWORD PTR ds:0xc0023640,0xc0010e3e
c0011a6c:	c7 05 44 36 02 c0 35 0a 01 c0 	mov    DWORD PTR ds:0xc0023644,0xc0010a35
c0011a76:	c7 05 48 36 02 c0 24 0c 01 c0 	mov    DWORD PTR ds:0xc0023648,0xc0010c24
c0011a80:	c7 05 4c 36 02 c0 74 0d 01 c0 	mov    DWORD PTR ds:0xc002364c,0xc0010d74
c0011a8a:	c7 05 50 36 02 c0 bc 0b 01 c0 	mov    DWORD PTR ds:0xc0023650,0xc0010bbc
c0011a94:	c7 05 54 36 02 c0 6c 0a 01 c0 	mov    DWORD PTR ds:0xc0023654,0xc0010a6c
c0011a9e:	c7 05 58 36 02 c0 4d 0a 01 c0 	mov    DWORD PTR ds:0xc0023658,0xc0010a4d
c0011aa8:	c7 05 5c 36 02 c0 79 0c 01 c0 	mov    DWORD PTR ds:0xc002365c,0xc0010c79
c0011ab2:	c7 05 64 36 02 c0 08 13 01 c0 	mov    DWORD PTR ds:0xc0023664,0xc0011308
c0011abc:	c7 05 60 36 02 c0 6e 18 01 c0 	mov    DWORD PTR ds:0xc0023660,0xc001186e
c0011ac6:	c7 05 68 36 02 c0 68 13 01 c0 	mov    DWORD PTR ds:0xc0023668,0xc0011368
c0011ad0:	c7 05 6c 36 02 c0 3c 10 01 c0 	mov    DWORD PTR ds:0xc002366c,0xc001103c
c0011ada:	c7 05 70 36 02 c0 63 0e 01 c0 	mov    DWORD PTR ds:0xc0023670,0xc0010e63
c0011ae4:	c7 05 74 36 02 c0 68 0e 01 c0 	mov    DWORD PTR ds:0xc0023674,0xc0010e68
c0011aee:	c7 05 78 36 02 c0 33 14 01 c0 	mov    DWORD PTR ds:0xc0023678,0xc0011433
c0011af8:	c7 05 7c 36 02 c0 df 13 01 c0 	mov    DWORD PTR ds:0xc002367c,0xc00113df
c0011b02:	c7 05 80 36 02 c0 18 11 01 c0 	mov    DWORD PTR ds:0xc0023680,0xc0011118
c0011b0c:	c7 05 84 36 02 c0 71 11 01 c0 	mov    DWORD PTR ds:0xc0023684,0xc0011171
c0011b16:	c7 05 88 36 02 c0 e0 11 01 c0 	mov    DWORD PTR ds:0xc0023688,0xc00111e0
c0011b20:	c7 05 8c 36 02 c0 6d 0e 01 c0 	mov    DWORD PTR ds:0xc002368c,0xc0010e6d
c0011b2a:	c7 05 90 36 02 c0 a5 14 01 c0 	mov    DWORD PTR ds:0xc0023690,0xc00114a5
c0011b34:	c7 05 94 36 02 c0 c2 14 01 c0 	mov    DWORD PTR ds:0xc0023694,0xc00114c2
c0011b3e:	c7 05 98 36 02 c0 c2 14 01 c0 	mov    DWORD PTR ds:0xc0023698,0xc00114c2
c0011b48:	c7 05 9c 36 02 c0 f8 14 01 c0 	mov    DWORD PTR ds:0xc002369c,0xc00114f8
c0011b52:	c7 05 a0 36 02 c0 5f 15 01 c0 	mov    DWORD PTR ds:0xc00236a0,0xc001155f
c0011b5c:	c7 05 a4 36 02 c0 77 0e 01 c0 	mov    DWORD PTR ds:0xc00236a4,0xc0010e77
c0011b66:	c7 05 a8 36 02 c0 c6 15 01 c0 	mov    DWORD PTR ds:0xc00236a8,0xc00115c6
c0011b70:	c7 05 ac 36 02 c0 f9 0f 01 c0 	mov    DWORD PTR ds:0xc00236ac,0xc0010ff9
c0011b7a:	c7 05 b0 36 02 c0 87 0e 01 c0 	mov    DWORD PTR ds:0xc00236b0,0xc0010e87
c0011b84:	c7 05 b4 36 02 c0 bc 10 01 c0 	mov    DWORD PTR ds:0xc00236b4,0xc00110bc
c0011b8e:	c7 05 b8 36 02 c0 13 16 01 c0 	mov    DWORD PTR ds:0xc00236b8,0xc0011613
c0011b98:	c7 05 bc 36 02 c0 55 12 01 c0 	mov    DWORD PTR ds:0xc00236bc,0xc0011255
c0011ba2:	c7 05 c0 36 02 c0 3c 16 01 c0 	mov    DWORD PTR ds:0xc00236c0,0xc001163c
c0011bac:	c7 05 c4 36 02 c0 a5 16 01 c0 	mov    DWORD PTR ds:0xc00236c4,0xc00116a5
c0011bb6:	c7 05 cc 36 02 c0 8f 0e 01 c0 	mov    DWORD PTR ds:0xc00236cc,0xc0010e8f
c0011bc0:	c7 05 d0 36 02 c0 fc 0e 01 c0 	mov    DWORD PTR ds:0xc00236d0,0xc0010efc
c0011bca:	c7 05 d4 36 02 c0 46 0f 01 c0 	mov    DWORD PTR ds:0xc00236d4,0xc0010f46
c0011bd4:	c7 05 d8 36 02 c0 54 17 01 c0 	mov    DWORD PTR ds:0xc00236d8,0xc0011754
c0011bde:	c7 05 dc 36 02 c0 dd 14 01 c0 	mov    DWORD PTR ds:0xc00236dc,0xc00114dd
c0011be8:	c7 05 e0 36 02 c0 9b 0f 01 c0 	mov    DWORD PTR ds:0xc00236e0,0xc0010f9b
c0011bf2:	c7 05 e4 36 02 c0 cb 17 01 c0 	mov    DWORD PTR ds:0xc00236e4,0xc00117cb
c0011bfc:	c7 05 e8 36 02 c0 10 18 01 c0 	mov    DWORD PTR ds:0xc00236e8,0xc0011810
c0011c06:	c7 05 ec 36 02 c0 14 0b 01 c0 	mov    DWORD PTR ds:0xc00236ec,0xc0010b14
c0011c10:	c7 05 f0 36 02 c0 95 0c 01 c0 	mov    DWORD PTR ds:0xc00236f0,0xc0010c95
c0011c1a:	c7 05 f4 36 02 c0 2a 0d 01 c0 	mov    DWORD PTR ds:0xc00236f4,0xc0010d2a
c0011c24:	c7 05 f8 36 02 c0 ff 09 01 c0 	mov    DWORD PTR ds:0xc00236f8,0xc00109ff
c0011c2e:	c7 05 fc 36 02 c0 dc 0d 01 c0 	mov    DWORD PTR ds:0xc00236fc,0xc0010ddc
c0011c38:	c7 05 00 37 02 c0 78 0a 01 c0 	mov    DWORD PTR ds:0xc0023700,0xc0010a78
c0011c42:	c7 05 04 37 02 c0 92 0a 01 c0 	mov    DWORD PTR ds:0xc0023704,0xc0010a92
c0011c4c:	c3                   	ret    

c0011c4d <Sys::systemCall(regs*, void*)>:
c0011c4d:	53                   	push   ebx
c0011c4e:	83 ec 08             	sub    esp,0x8
c0011c51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c58:	83 f8 7f             	cmp    eax,0x7f
c0011c5b:	77 16                	ja     c0011c73 <Sys::systemCall(regs*, void*)+0x26>
c0011c5d:	8b 14 85 40 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc9c0]
c0011c64:	85 d2                	test   edx,edx
c0011c66:	74 0b                	je     c0011c73 <Sys::systemCall(regs*, void*)+0x26>
c0011c68:	83 ec 0c             	sub    esp,0xc
c0011c6b:	53                   	push   ebx
c0011c6c:	ff d2                	call   edx
c0011c6e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c71:	eb 0d                	jmp    c0011c80 <Sys::systemCall(regs*, void*)+0x33>
c0011c73:	52                   	push   edx
c0011c74:	52                   	push   edx
c0011c75:	50                   	push   eax
c0011c76:	68 fd ea 01 c0       	push   0xc001eafd
c0011c7b:	e8 d8 8a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c88:	31 d2                	xor    edx,edx
c0011c8a:	83 c4 08             	add    esp,0x8
c0011c8d:	5b                   	pop    ebx
c0011c8e:	c3                   	ret    

c0011c8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011c8f:	55                   	push   ebp
c0011c90:	57                   	push   edi
c0011c91:	56                   	push   esi
c0011c92:	53                   	push   ebx
c0011c93:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011c99:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011ca1:	0f 95 c2             	setne  dl
c0011ca4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011cac:	0f 94 c0             	sete   al
c0011caf:	84 c2                	test   dl,al
c0011cb1:	74 34                	je     c0011ce7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011cb3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011cbe:	74 27                	je     c0011ce7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011cc0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011cc7:	05 00 10 00 00       	add    eax,0x1000
c0011ccc:	89 c1                	mov    ecx,eax
c0011cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011cd9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011ce0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011ce7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011cee:	83 ec 0c             	sub    esp,0xc
c0011cf1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011cf7:	6a 01                	push   0x1
c0011cf9:	e8 07 78 ff ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	89 c3                	mov    ebx,eax
c0011d03:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011d09:	0f 86 25 01 00 00    	jbe    c0011e34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011d0f:	c1 ee 0c             	shr    esi,0xc
c0011d12:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011d19:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011d1d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d25:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011d2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d30:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011d37:	29 ef                	sub    edi,ebp
c0011d39:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011d3d:	0f 83 f8 00 00 00    	jae    c0011e3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011d43:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011d49:	76 05                	jbe    c0011d50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011d4b:	bf 00 10 00 00       	mov    edi,0x1000
c0011d50:	83 ec 0c             	sub    esp,0xc
c0011d53:	31 d2                	xor    edx,edx
c0011d55:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011d5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d5e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011d62:	50                   	push   eax
c0011d63:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011d67:	56                   	push   esi
c0011d68:	52                   	push   edx
c0011d69:	57                   	push   edi
c0011d6a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011d71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d74:	83 c4 20             	add    esp,0x20
c0011d77:	85 c0                	test   eax,eax
c0011d79:	75 06                	jne    c0011d81 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011d7b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011d7f:	74 13                	je     c0011d94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011d81:	83 ec 0c             	sub    esp,0xc
c0011d84:	53                   	push   ebx
c0011d85:	e8 ab 7a ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	31 c0                	xor    eax,eax
c0011d8f:	e9 7c 01 00 00       	jmp    c0011f10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011d94:	fa                   	cli    
c0011d95:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0011d9b:	e8 f6 5f ff ff       	call   c0007d96 <Phys::allocatePage()>
c0011da0:	6a 07                	push   0x7
c0011da2:	89 c7                	mov    edi,eax
c0011da4:	53                   	push   ebx
c0011da5:	50                   	push   eax
c0011da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011db4:	e8 e1 7d ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011db9:	83 c4 0c             	add    esp,0xc
c0011dbc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011dc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dc9:	6a 00                	push   0x0
c0011dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dd3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dd9:	e8 2e 7c ff ff       	call   c0009a0c <VAS::mapOtherVASIn(bool, VAS*)>
c0011dde:	58                   	pop    eax
c0011ddf:	5a                   	pop    edx
c0011de0:	68 07 0c 00 00       	push   0xc07
c0011de5:	55                   	push   ebp
c0011de6:	57                   	push   edi
c0011de7:	89 df                	mov    edi,ebx
c0011de9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011df0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011df6:	6a 00                	push   0x0
c0011df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e00:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e06:	e8 4f 81 ff ff       	call   c0009f5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011e0b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011e10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e12:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0011e17:	83 c4 20             	add    esp,0x20
c0011e1a:	48                   	dec    eax
c0011e1b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0011e20:	85 c0                	test   eax,eax
c0011e22:	75 01                	jne    c0011e25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011e24:	fb                   	sti    
c0011e25:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011e2b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011e2f:	e9 f1 fe ff ff       	jmp    c0011d25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011e34:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e3b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011e42:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e48:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e4e:	0f 86 ae 00 00 00    	jbe    c0011f02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011e54:	fa                   	cli    
c0011e55:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0011e5b:	c1 ee 0c             	shr    esi,0xc
c0011e5e:	51                   	push   ecx
c0011e5f:	31 ff                	xor    edi,edi
c0011e61:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011e68:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e6e:	6a 00                	push   0x0
c0011e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e7e:	e8 89 7b ff ff       	call   c0009a0c <VAS::mapOtherVASIn(bool, VAS*)>
c0011e83:	83 c4 10             	add    esp,0x10
c0011e86:	e8 0b 5f ff ff       	call   c0007d96 <Phys::allocatePage()>
c0011e8b:	47                   	inc    edi
c0011e8c:	6a 07                	push   0x7
c0011e8e:	53                   	push   ebx
c0011e8f:	50                   	push   eax
c0011e90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e94:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011e9d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011ea3:	e8 f2 7c ff ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ea8:	58                   	pop    eax
c0011ea9:	5a                   	pop    edx
c0011eaa:	68 07 0c 00 00       	push   0xc07
c0011eaf:	55                   	push   ebp
c0011eb0:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eba:	50                   	push   eax
c0011ebb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ec2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ec8:	6a 00                	push   0x0
c0011eca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ecf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ed2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ed8:	e8 7d 80 ff ff       	call   c0009f5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011edd:	83 c4 1c             	add    esp,0x1c
c0011ee0:	68 00 10 00 00       	push   0x1000
c0011ee5:	6a 00                	push   0x0
c0011ee7:	53                   	push   ebx
c0011ee8:	e8 03 e6 fe ff       	call   c00004f0 <memset>
c0011eed:	83 c4 10             	add    esp,0x10
c0011ef0:	39 fe                	cmp    esi,edi
c0011ef2:	77 92                	ja     c0011e86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011ef4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0011ef9:	48                   	dec    eax
c0011efa:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0011eff:	75 01                	jne    c0011f02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011f01:	fb                   	sti    
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	53                   	push   ebx
c0011f06:	e8 2a 79 ff ff       	call   c0009835 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	b0 01                	mov    al,0x1
c0011f10:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011f16:	5b                   	pop    ebx
c0011f17:	5e                   	pop    esi
c0011f18:	5f                   	pop    edi
c0011f19:	5d                   	pop    ebp
c0011f1a:	c3                   	ret    

c0011f1b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011f1b:	55                   	push   ebp
c0011f1c:	57                   	push   edi
c0011f1d:	56                   	push   esi
c0011f1e:	53                   	push   ebx
c0011f1f:	83 ec 48             	sub    esp,0x48
c0011f22:	68 14 01 00 00       	push   0x114
c0011f27:	e8 9d 5a ff ff       	call   c00079c9 <malloc>
c0011f2c:	83 c4 0c             	add    esp,0xc
c0011f2f:	89 c6                	mov    esi,eax
c0011f31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011f35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f39:	50                   	push   eax
c0011f3a:	e8 8f 8d ff ff       	call   c000acce <File::File(char const*, Process*)>
c0011f3f:	58                   	pop    eax
c0011f40:	5a                   	pop    edx
c0011f41:	6a 01                	push   0x1
c0011f43:	56                   	push   esi
c0011f44:	e8 45 8e ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	85 c0                	test   eax,eax
c0011f4e:	0f 85 47 01 00 00    	jne    c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f54:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	6a 34                	push   0x34
c0011f61:	e8 63 5a ff ff       	call   c00079c9 <malloc>
c0011f66:	89 c3                	mov    ebx,eax
c0011f68:	58                   	pop    eax
c0011f69:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f6b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011f6f:	57                   	push   edi
c0011f70:	53                   	push   ebx
c0011f71:	6a 00                	push   0x0
c0011f73:	6a 34                	push   0x34
c0011f75:	56                   	push   esi
c0011f76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f79:	83 c4 20             	add    esp,0x20
c0011f7c:	85 c0                	test   eax,eax
c0011f7e:	0f 85 17 01 00 00    	jne    c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f84:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011f8a:	0f 85 0b 01 00 00    	jne    c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f93:	85 c0                	test   eax,eax
c0011f95:	0f 84 00 01 00 00    	je     c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f9b:	31 d2                	xor    edx,edx
c0011f9d:	55                   	push   ebp
c0011f9e:	52                   	push   edx
c0011f9f:	50                   	push   eax
c0011fa0:	56                   	push   esi
c0011fa1:	e8 a6 8e ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	85 c0                	test   eax,eax
c0011fab:	0f 85 ea 00 00 00    	jne    c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011fb7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011fbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011fbf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011fc3:	0f af c2             	imul   eax,edx
c0011fc6:	50                   	push   eax
c0011fc7:	e8 fd 59 ff ff       	call   c00079c9 <malloc>
c0011fcc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011fce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011fd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011fd9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011fdd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011fe1:	0f af c2             	imul   eax,edx
c0011fe4:	99                   	cdq    
c0011fe5:	52                   	push   edx
c0011fe6:	50                   	push   eax
c0011fe7:	56                   	push   esi
c0011fe8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011feb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011fee:	83 c4 20             	add    esp,0x20
c0011ff1:	85 c0                	test   eax,eax
c0011ff3:	0f 84 a2 00 00 00    	je     c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ff9:	31 d2                	xor    edx,edx
c0011ffb:	51                   	push   ecx
c0011ffc:	52                   	push   edx
c0011ffd:	50                   	push   eax
c0011ffe:	56                   	push   esi
c0011fff:	e8 48 8e ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012004:	83 c4 10             	add    esp,0x10
c0012007:	85 c0                	test   eax,eax
c0012009:	0f 85 8c 00 00 00    	jne    c001209b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001200f:	83 ec 0c             	sub    esp,0xc
c0012012:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012016:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001201a:	31 ed                	xor    ebp,ebp
c001201c:	0f af c2             	imul   eax,edx
c001201f:	50                   	push   eax
c0012020:	e8 a4 59 ff ff       	call   c00079c9 <malloc>
c0012025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012027:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001202b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001202e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012032:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012036:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001203a:	0f af c2             	imul   eax,edx
c001203d:	99                   	cdq    
c001203e:	52                   	push   edx
c001203f:	50                   	push   eax
c0012040:	56                   	push   esi
c0012041:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012044:	83 c4 20             	add    esp,0x20
c0012047:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001204f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012053:	0f 86 80 00 00 00    	jbe    c00120d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012059:	0f b7 fd             	movzx  edi,bp
c001205c:	c1 e7 05             	shl    edi,0x5
c001205f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012063:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012066:	75 6b                	jne    c00120d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012068:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001206b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001206f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012076:	52                   	push   edx
c0012077:	31 d2                	xor    edx,edx
c0012079:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001207c:	52                   	push   edx
c001207d:	50                   	push   eax
c001207e:	56                   	push   esi
c001207f:	e8 c8 8d ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012084:	83 c4 10             	add    esp,0x10
c0012087:	85 c0                	test   eax,eax
c0012089:	74 17                	je     c00120a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001208b:	83 ec 0c             	sub    esp,0xc
c001208e:	68 11 eb 01 c0       	push   0xc001eb11
c0012093:	e8 c0 86 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	31 c0                	xor    eax,eax
c001209d:	e9 87 00 00 00       	jmp    c0012129 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00120a2:	83 ec 0c             	sub    esp,0xc
c00120a5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00120a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00120ab:	50                   	push   eax
c00120ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00120b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00120b4:	56                   	push   esi
c00120b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00120b9:	e8 d1 fb ff ff       	call   c0011c8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00120be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00120c6:	83 c4 20             	add    esp,0x20
c00120c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00120cd:	73 04                	jae    c00120d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00120cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120d3:	45                   	inc    ebp
c00120d4:	e9 76 ff ff ff       	jmp    c001204f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00120d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00120dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00120e5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00120eb:	83 ec 0c             	sub    esp,0xc
c00120ee:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00120f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120f9:	05 00 10 00 00       	add    eax,0x1000
c00120fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012105:	e8 cf 58 ff ff       	call   c00079d9 <free>
c001210a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001210d:	e8 c7 58 ff ff       	call   c00079d9 <free>
c0012112:	58                   	pop    eax
c0012113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012117:	e8 bd 58 ff ff       	call   c00079d9 <free>
c001211c:	89 34 24             	mov    DWORD PTR [esp],esi
c001211f:	e8 c8 8c ff ff       	call   c000adec <File::close()>
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	b0 01                	mov    al,0x1
c0012129:	83 c4 3c             	add    esp,0x3c
c001212c:	5b                   	pop    ebx
c001212d:	5e                   	pop    esi
c001212e:	5f                   	pop    edi
c001212f:	5d                   	pop    ebp
c0012130:	c3                   	ret    

c0012131 <Thr::runtimeReferenceHelper()>:
c0012131:	83 ec 18             	sub    esp,0x18
c0012134:	68 19 eb 01 c0       	push   0xc001eb19
c0012139:	e8 1a 86 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001213e:	fa                   	cli    
c001213f:	83 c4 10             	add    esp,0x10
c0012142:	eb fe                	jmp    c0012142 <Thr::runtimeReferenceHelper()+0x11>

c0012144 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012144:	57                   	push   edi
c0012145:	56                   	push   esi
c0012146:	53                   	push   ebx
c0012147:	31 db                	xor    ebx,ebx
c0012149:	39 1d e0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fe0,ebx
c001214f:	7e 3c                	jle    c001218d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012151:	8b 34 9d 60 3f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc0a0]
c0012158:	31 ff                	xor    edi,edi
c001215a:	39 3c 9d 60 3e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc1a0],edi
c0012161:	7e 27                	jle    c001218a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012163:	50                   	push   eax
c0012164:	50                   	push   eax
c0012165:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012169:	8b 06                	mov    eax,DWORD PTR [esi]
c001216b:	03 04 9d e0 3e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc120]
c0012172:	50                   	push   eax
c0012173:	e8 88 e5 fe ff       	call   c0000700 <strcmp>
c0012178:	83 c4 10             	add    esp,0x10
c001217b:	85 c0                	test   eax,eax
c001217d:	75 05                	jne    c0012184 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001217f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012182:	eb 0b                	jmp    c001218f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012184:	83 c6 10             	add    esi,0x10
c0012187:	47                   	inc    edi
c0012188:	eb d0                	jmp    c001215a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001218a:	43                   	inc    ebx
c001218b:	eb bc                	jmp    c0012149 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001218d:	31 c0                	xor    eax,eax
c001218f:	5b                   	pop    ebx
c0012190:	5e                   	pop    esi
c0012191:	5f                   	pop    edi
c0012192:	c3                   	ret    

c0012193 <Thr::loadKernelSymbolTable(char const*)>:
c0012193:	55                   	push   ebp
c0012194:	57                   	push   edi
c0012195:	56                   	push   esi
c0012196:	53                   	push   ebx
c0012197:	83 ec 68             	sub    esp,0x68
c001219a:	8b 35 30 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024030
c00121a0:	68 14 01 00 00       	push   0x114
c00121a5:	e8 1f 58 ff ff       	call   c00079c9 <malloc>
c00121aa:	83 c4 0c             	add    esp,0xc
c00121ad:	89 c3                	mov    ebx,eax
c00121af:	56                   	push   esi
c00121b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00121b4:	50                   	push   eax
c00121b5:	e8 14 8b ff ff       	call   c000acce <File::File(char const*, Process*)>
c00121ba:	5e                   	pop    esi
c00121bb:	5f                   	pop    edi
c00121bc:	6a 01                	push   0x1
c00121be:	53                   	push   ebx
c00121bf:	e8 ca 8b ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	85 c0                	test   eax,eax
c00121c9:	74 0a                	je     c00121d5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00121cb:	83 ec 0c             	sub    esp,0xc
c00121ce:	68 3b eb 01 c0       	push   0xc001eb3b
c00121d3:	eb 34                	jmp    c0012209 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00121d5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00121dd:	83 ec 0c             	sub    esp,0xc
c00121e0:	6a 34                	push   0x34
c00121e2:	e8 e2 57 ff ff       	call   c00079c9 <malloc>
c00121e7:	59                   	pop    ecx
c00121e8:	89 c7                	mov    edi,eax
c00121ea:	8d 74 24 34          	lea    esi,[esp+0x34]
c00121ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121f0:	56                   	push   esi
c00121f1:	57                   	push   edi
c00121f2:	6a 00                	push   0x0
c00121f4:	6a 34                	push   0x34
c00121f6:	53                   	push   ebx
c00121f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121fa:	83 c4 20             	add    esp,0x20
c00121fd:	85 c0                	test   eax,eax
c00121ff:	74 17                	je     c0012218 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	68 52 eb 01 c0       	push   0xc001eb52
c0012209:	e8 99 e0 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	31 c0                	xor    eax,eax
c0012213:	e9 31 02 00 00       	jmp    c0012449 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012218:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001221e:	75 e1                	jne    c0012201 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012220:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012223:	85 c0                	test   eax,eax
c0012225:	74 da                	je     c0012201 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012227:	52                   	push   edx
c0012228:	31 d2                	xor    edx,edx
c001222a:	52                   	push   edx
c001222b:	50                   	push   eax
c001222c:	53                   	push   ebx
c001222d:	e8 1a 8c ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	85 c0                	test   eax,eax
c0012237:	75 c8                	jne    c0012201 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012239:	83 ec 0c             	sub    esp,0xc
c001223c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012240:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012244:	31 ed                	xor    ebp,ebp
c0012246:	0f af c2             	imul   eax,edx
c0012249:	50                   	push   eax
c001224a:	e8 7a 57 ff ff       	call   c00079c9 <malloc>
c001224f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012251:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012255:	89 34 24             	mov    DWORD PTR [esp],esi
c0012258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001225c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012260:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012264:	0f af c2             	imul   eax,edx
c0012267:	99                   	cdq    
c0012268:	52                   	push   edx
c0012269:	50                   	push   eax
c001226a:	53                   	push   ebx
c001226b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001226e:	83 c4 20             	add    esp,0x20
c0012271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012279:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012281:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012289:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012291:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012295:	0f 86 aa 00 00 00    	jbe    c0012345 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001229b:	0f b7 f5             	movzx  esi,bp
c001229e:	6b f6 28             	imul   esi,esi,0x28
c00122a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00122a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00122a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122ac:	50                   	push   eax
c00122ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00122b1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00122b5:	8b 16                	mov    edx,DWORD PTR [esi]
c00122b7:	6b c0 28             	imul   eax,eax,0x28
c00122ba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00122be:	89 d0                	mov    eax,edx
c00122c0:	31 d2                	xor    edx,edx
c00122c2:	52                   	push   edx
c00122c3:	50                   	push   eax
c00122c4:	53                   	push   ebx
c00122c5:	e8 82 8b ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00122ca:	83 c4 0c             	add    esp,0xc
c00122cd:	6a 20                	push   0x20
c00122cf:	6a 00                	push   0x0
c00122d1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00122d5:	52                   	push   edx
c00122d6:	e8 15 e2 fe ff       	call   c00004f0 <memset>
c00122db:	58                   	pop    eax
c00122dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122de:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00122e2:	51                   	push   ecx
c00122e3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00122e7:	52                   	push   edx
c00122e8:	6a 00                	push   0x0
c00122ea:	6a 1f                	push   0x1f
c00122ec:	53                   	push   ebx
c00122ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122f0:	83 c4 18             	add    esp,0x18
c00122f3:	68 69 eb 01 c0       	push   0xc001eb69
c00122f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00122fc:	52                   	push   edx
c00122fd:	e8 fe e3 fe ff       	call   c0000700 <strcmp>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	85 c0                	test   eax,eax
c0012307:	75 0f                	jne    c0012318 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012309:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001230c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012318:	50                   	push   eax
c0012319:	50                   	push   eax
c001231a:	68 71 eb 01 c0       	push   0xc001eb71
c001231f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012323:	50                   	push   eax
c0012324:	e8 d7 e3 fe ff       	call   c0000700 <strcmp>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	85 c0                	test   eax,eax
c001232e:	75 0f                	jne    c001233f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012330:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012333:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012337:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001233b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001233f:	45                   	inc    ebp
c0012340:	e9 4c ff ff ff       	jmp    c0012291 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012345:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001234a:	75 10                	jne    c001235c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001234c:	83 ec 0c             	sub    esp,0xc
c001234f:	68 79 eb 01 c0       	push   0xc001eb79
c0012354:	e8 4e df ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012361:	75 10                	jne    c0012373 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012363:	83 ec 0c             	sub    esp,0xc
c0012366:	68 79 eb 01 c0       	push   0xc001eb79
c001236b:	e8 37 df ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012370:	83 c4 10             	add    esp,0x10
c0012373:	31 d2                	xor    edx,edx
c0012375:	50                   	push   eax
c0012376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237a:	52                   	push   edx
c001237b:	50                   	push   eax
c001237c:	53                   	push   ebx
c001237d:	e8 ca 8a ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012382:	5a                   	pop    edx
c0012383:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012387:	e8 3d 56 ff ff       	call   c00079c9 <malloc>
c001238c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012390:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012394:	31 c9                	xor    ecx,ecx
c0012396:	5e                   	pop    esi
c0012397:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012399:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001239d:	55                   	push   ebp
c001239e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123a2:	51                   	push   ecx
c00123a3:	52                   	push   edx
c00123a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00123ac:	53                   	push   ebx
c00123ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123b0:	83 c4 14             	add    esp,0x14
c00123b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123b7:	e8 0d 56 ff ff       	call   c00079c9 <malloc>
c00123bc:	89 c6                	mov    esi,eax
c00123be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123c3:	56                   	push   esi
c00123c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00123c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00123cc:	51                   	push   ecx
c00123cd:	52                   	push   edx
c00123ce:	53                   	push   ebx
c00123cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00123d6:	8b 15 e0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fe0
c00123dc:	83 c4 1c             	add    esp,0x1c
c00123df:	c1 e8 04             	shr    eax,0x4
c00123e2:	89 04 95 60 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc1a0],eax
c00123e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ed:	31 d2                	xor    edx,edx
c00123ef:	52                   	push   edx
c00123f0:	50                   	push   eax
c00123f1:	53                   	push   ebx
c00123f2:	e8 55 8a ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00123f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123f9:	31 d2                	xor    edx,edx
c00123fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123fe:	56                   	push   esi
c00123ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012403:	52                   	push   edx
c0012404:	50                   	push   eax
c0012405:	53                   	push   ebx
c0012406:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012409:	83 c4 14             	add    esp,0x14
c001240c:	53                   	push   ebx
c001240d:	e8 da 89 ff ff       	call   c000adec <File::close()>
c0012412:	5d                   	pop    ebp
c0012413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012417:	e8 bd 55 ff ff       	call   c00079d9 <free>
c001241c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001241f:	e8 b5 55 ff ff       	call   c00079d9 <free>
c0012424:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c0012429:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001242d:	8d 50 01             	lea    edx,[eax+0x1]
c0012430:	89 0c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ecx
c0012437:	89 34 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],esi
c001243e:	89 15 e0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe0,edx
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	b0 01                	mov    al,0x1
c0012449:	83 c4 5c             	add    esp,0x5c
c001244c:	5b                   	pop    ebx
c001244d:	5e                   	pop    esi
c001244e:	5f                   	pop    edi
c001244f:	5d                   	pop    ebp
c0012450:	c3                   	ret    

c0012451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012451:	55                   	push   ebp
c0012452:	57                   	push   edi
c0012453:	56                   	push   esi
c0012454:	53                   	push   ebx
c0012455:	81 ec 68 03 00 00    	sub    esp,0x368
c001245b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012462:	8b 1d 30 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024030
c0012468:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001246c:	68 14 01 00 00       	push   0x114
c0012471:	e8 53 55 ff ff       	call   c00079c9 <malloc>
c0012476:	83 c4 0c             	add    esp,0xc
c0012479:	89 c5                	mov    ebp,eax
c001247b:	53                   	push   ebx
c001247c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012483:	50                   	push   eax
c0012484:	e8 45 88 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0012489:	5e                   	pop    esi
c001248a:	5f                   	pop    edi
c001248b:	6a 01                	push   0x1
c001248d:	55                   	push   ebp
c001248e:	e8 fb 88 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 85 a7 06 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001249e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00124a6:	83 ec 0c             	sub    esp,0xc
c00124a9:	6a 34                	push   0x34
c00124ab:	e8 19 55 ff ff       	call   c00079c9 <malloc>
c00124b0:	5b                   	pop    ebx
c00124b1:	89 c7                	mov    edi,eax
c00124b3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00124b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124ba:	53                   	push   ebx
c00124bb:	57                   	push   edi
c00124bc:	6a 00                	push   0x0
c00124be:	6a 34                	push   0x34
c00124c0:	55                   	push   ebp
c00124c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124c4:	83 c4 20             	add    esp,0x20
c00124c7:	85 c0                	test   eax,eax
c00124c9:	0f 85 76 06 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00124d5:	0f 85 6a 06 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124db:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00124de:	85 c0                	test   eax,eax
c00124e0:	0f 84 5f 06 00 00    	je     c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124e6:	31 d2                	xor    edx,edx
c00124e8:	51                   	push   ecx
c00124e9:	52                   	push   edx
c00124ea:	50                   	push   eax
c00124eb:	55                   	push   ebp
c00124ec:	e8 5b 89 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	85 c0                	test   eax,eax
c00124f6:	0f 85 49 06 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124fc:	83 ec 0c             	sub    esp,0xc
c00124ff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012502:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012506:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001250a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001250e:	0f af c2             	imul   eax,edx
c0012511:	50                   	push   eax
c0012512:	e8 b2 54 ff ff       	call   c00079c9 <malloc>
c0012517:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001251a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001251e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012521:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012525:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012529:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001252d:	0f af c2             	imul   eax,edx
c0012530:	99                   	cdq    
c0012531:	52                   	push   edx
c0012532:	50                   	push   eax
c0012533:	55                   	push   ebp
c0012534:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012537:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001253a:	83 c4 20             	add    esp,0x20
c001253d:	85 c0                	test   eax,eax
c001253f:	0f 84 00 06 00 00    	je     c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012545:	52                   	push   edx
c0012546:	31 d2                	xor    edx,edx
c0012548:	52                   	push   edx
c0012549:	50                   	push   eax
c001254a:	55                   	push   ebp
c001254b:	e8 fc 88 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	85 c0                	test   eax,eax
c0012555:	0f 85 ea 05 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012562:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012566:	31 f6                	xor    esi,esi
c0012568:	0f af c2             	imul   eax,edx
c001256b:	50                   	push   eax
c001256c:	e8 58 54 ff ff       	call   c00079c9 <malloc>
c0012571:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012574:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012578:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001257b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012583:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012587:	0f af c2             	imul   eax,edx
c001258a:	99                   	cdq    
c001258b:	52                   	push   edx
c001258c:	50                   	push   eax
c001258d:	55                   	push   ebp
c001258e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012591:	83 c4 20             	add    esp,0x20
c0012594:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012598:	0f 86 8a 00 00 00    	jbe    c0012628 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001259e:	0f b7 de             	movzx  ebx,si
c00125a1:	c1 e3 05             	shl    ebx,0x5
c00125a4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00125a8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00125ab:	75 75                	jne    c0012622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00125ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00125b0:	31 d2                	xor    edx,edx
c00125b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00125b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125bd:	50                   	push   eax
c00125be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00125c1:	52                   	push   edx
c00125c2:	50                   	push   eax
c00125c3:	55                   	push   ebp
c00125c4:	e8 83 88 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	85 c0                	test   eax,eax
c00125ce:	0f 85 71 05 00 00    	jne    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125d4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00125db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125de:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00125e2:	31 d2                	xor    edx,edx
c00125e4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00125e8:	83 ec 0c             	sub    esp,0xc
c00125eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00125f6:	50                   	push   eax
c00125f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125ff:	52                   	push   edx
c0012600:	50                   	push   eax
c0012601:	55                   	push   ebp
c0012602:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012605:	83 c4 1c             	add    esp,0x1c
c0012608:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001260b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001260e:	50                   	push   eax
c001260f:	6a 00                	push   0x0
c0012611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012615:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012619:	50                   	push   eax
c001261a:	e8 d1 de fe ff       	call   c00004f0 <memset>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	46                   	inc    esi
c0012623:	e9 6c ff ff ff       	jmp    c0012594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012628:	53                   	push   ebx
c0012629:	31 db                	xor    ebx,ebx
c001262b:	68 00 01 00 00       	push   0x100
c0012630:	6a 00                	push   0x0
c0012632:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012636:	50                   	push   eax
c0012637:	e8 b4 de fe ff       	call   c00004f0 <memset>
c001263c:	83 c4 0c             	add    esp,0xc
c001263f:	68 00 01 00 00       	push   0x100
c0012644:	6a 00                	push   0x0
c0012646:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001264d:	50                   	push   eax
c001264e:	e8 9d de fe ff       	call   c00004f0 <memset>
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001265e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012666:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001266e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012676:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001267e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012682:	0f 86 30 01 00 00    	jbe    c00127b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012688:	0f b7 f3             	movzx  esi,bx
c001268b:	6b f6 28             	imul   esi,esi,0x28
c001268e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012692:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012699:	52                   	push   edx
c001269a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001269e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00126a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00126a4:	6b d2 28             	imul   edx,edx,0x28
c00126a7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00126ab:	31 d2                	xor    edx,edx
c00126ad:	52                   	push   edx
c00126ae:	50                   	push   eax
c00126af:	55                   	push   ebp
c00126b0:	e8 97 87 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00126b5:	83 c4 0c             	add    esp,0xc
c00126b8:	6a 20                	push   0x20
c00126ba:	6a 00                	push   0x0
c00126bc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00126c3:	51                   	push   ecx
c00126c4:	e8 27 de fe ff       	call   c00004f0 <memset>
c00126c9:	59                   	pop    ecx
c00126ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00126d1:	52                   	push   edx
c00126d2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00126d9:	51                   	push   ecx
c00126da:	6a 00                	push   0x0
c00126dc:	6a 1f                	push   0x1f
c00126de:	55                   	push   ebp
c00126df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126e2:	83 c4 1c             	add    esp,0x1c
c00126e5:	6a 09                	push   0x9
c00126e7:	68 93 eb 01 c0       	push   0xc001eb93
c00126ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00126f3:	51                   	push   ecx
c00126f4:	e8 b7 dc fe ff       	call   c00003b0 <memcmp>
c00126f9:	83 c4 10             	add    esp,0x10
c00126fc:	85 c0                	test   eax,eax
c00126fe:	75 21                	jne    c0012721 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012708:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001270c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012710:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012713:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001271a:	89 d0                	mov    eax,edx
c001271c:	40                   	inc    eax
c001271d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012721:	50                   	push   eax
c0012722:	6a 09                	push   0x9
c0012724:	68 9d eb 01 c0       	push   0xc001eb9d
c0012729:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012730:	50                   	push   eax
c0012731:	e8 7a dc fe ff       	call   c00003b0 <memcmp>
c0012736:	83 c4 10             	add    esp,0x10
c0012739:	85 c0                	test   eax,eax
c001273b:	75 21                	jne    c001275e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001273d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012741:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012745:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012749:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001274d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012750:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012757:	89 d0                	mov    eax,edx
c0012759:	40                   	inc    eax
c001275a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001275e:	50                   	push   eax
c001275f:	50                   	push   eax
c0012760:	68 69 eb 01 c0       	push   0xc001eb69
c0012765:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001276c:	50                   	push   eax
c001276d:	e8 8e df fe ff       	call   c0000700 <strcmp>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	85 c0                	test   eax,eax
c0012777:	75 0f                	jne    c0012788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012779:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001277c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012784:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012788:	50                   	push   eax
c0012789:	50                   	push   eax
c001278a:	68 71 eb 01 c0       	push   0xc001eb71
c001278f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012796:	50                   	push   eax
c0012797:	e8 64 df fe ff       	call   c0000700 <strcmp>
c001279c:	83 c4 10             	add    esp,0x10
c001279f:	85 c0                	test   eax,eax
c00127a1:	75 0f                	jne    c00127b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00127a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00127aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00127b2:	43                   	inc    ebx
c00127b3:	e9 c6 fe ff ff       	jmp    c001267e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00127b8:	31 d2                	xor    edx,edx
c00127ba:	50                   	push   eax
c00127bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127bf:	52                   	push   edx
c00127c0:	50                   	push   eax
c00127c1:	55                   	push   ebp
c00127c2:	e8 85 86 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c00127c7:	58                   	pop    eax
c00127c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127cc:	e8 f8 51 ff ff       	call   c00079c9 <malloc>
c00127d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00127d8:	31 d2                	xor    edx,edx
c00127da:	58                   	pop    eax
c00127db:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00127df:	53                   	push   ebx
c00127e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127e8:	52                   	push   edx
c00127e9:	50                   	push   eax
c00127ea:	55                   	push   ebp
c00127eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127ee:	83 c4 14             	add    esp,0x14
c00127f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127f5:	e8 cf 51 ff ff       	call   c00079c9 <malloc>
c00127fa:	31 d2                	xor    edx,edx
c00127fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012800:	83 c4 0c             	add    esp,0xc
c0012803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012807:	52                   	push   edx
c0012808:	50                   	push   eax
c0012809:	55                   	push   ebp
c001280a:	e8 3d 86 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c001280f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012812:	31 d2                	xor    edx,edx
c0012814:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012817:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001281b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281f:	52                   	push   edx
c0012820:	50                   	push   eax
c0012821:	55                   	push   ebp
c0012822:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012825:	83 c4 20             	add    esp,0x20
c0012828:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012830:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012834:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012838:	0f 84 0b 03 00 00    	je     c0012b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001283e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012845:	31 d2                	xor    edx,edx
c0012847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001284b:	c1 e8 03             	shr    eax,0x3
c001284e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012852:	51                   	push   ecx
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001285b:	52                   	push   edx
c001285c:	50                   	push   eax
c001285d:	55                   	push   ebp
c001285e:	e8 e9 85 ff ff       	call   c000ae4c <File::seek(unsigned long long)>
c0012863:	5b                   	pop    ebx
c0012864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012868:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001286f:	e8 55 51 ff ff       	call   c00079c9 <malloc>
c0012874:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012877:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001287b:	31 d2                	xor    edx,edx
c001287d:	5e                   	pop    esi
c001287e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012882:	50                   	push   eax
c0012883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001288b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012892:	52                   	push   edx
c0012893:	50                   	push   eax
c0012894:	55                   	push   ebp
c0012895:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012898:	83 c4 20             	add    esp,0x20
c001289b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00128a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00128a7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00128ab:	0f 8d 7c 02 00 00    	jge    c0012b2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00128b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128b9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00128be:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00128c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00128c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128c9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00128cd:	89 d8                	mov    eax,ebx
c00128cf:	c1 e8 08             	shr    eax,0x8
c00128d2:	89 c6                	mov    esi,eax
c00128d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00128d8:	c1 e6 04             	shl    esi,0x4
c00128db:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00128df:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00128e2:	85 d2                	test   edx,edx
c00128e4:	0f 85 bf 00 00 00    	jne    c00129a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00128ea:	83 ec 0c             	sub    esp,0xc
c00128ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128f1:	03 06                	add    eax,DWORD PTR [esi]
c00128f3:	50                   	push   eax
c00128f4:	e8 4b f8 ff ff       	call   c0012144 <Thr::getAddressOfKernelSymbol(char const*)>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	89 c2                	mov    edx,eax
c00128fe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012903:	85 c0                	test   eax,eax
c0012905:	0f 85 9e 00 00 00    	jne    c00129a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001290b:	83 ec 0c             	sub    esp,0xc
c001290e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012912:	03 06                	add    eax,DWORD PTR [esi]
c0012914:	50                   	push   eax
c0012915:	e8 96 41 ff ff       	call   c0006ab0 <Krnl::resolveCompatibilitySymbol(char*)>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	89 c2                	mov    edx,eax
c001291f:	85 c0                	test   eax,eax
c0012921:	0f 85 82 00 00 00    	jne    c00129a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012927:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001292b:	50                   	push   eax
c001292c:	50                   	push   eax
c001292d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012931:	03 06                	add    eax,DWORD PTR [esi]
c0012933:	50                   	push   eax
c0012934:	68 a7 eb 01 c0       	push   0xc001eba7
c0012939:	e8 1a 7e ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001293e:	58                   	pop    eax
c001293f:	5a                   	pop    edx
c0012940:	68 c1 eb 01 c0       	push   0xc001ebc1
c0012945:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001294c:	50                   	push   eax
c001294d:	e8 ce dc fe ff       	call   c0000620 <strcpy>
c0012952:	59                   	pop    ecx
c0012953:	58                   	pop    eax
c0012954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012958:	03 06                	add    eax,DWORD PTR [esi]
c001295a:	50                   	push   eax
c001295b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012962:	50                   	push   eax
c0012963:	e8 78 de fe ff       	call   c00007e0 <strcat>
c0012968:	58                   	pop    eax
c0012969:	5a                   	pop    edx
c001296a:	68 57 ec 01 c0       	push   0xc001ec57
c001296f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012976:	50                   	push   eax
c0012977:	e8 64 de fe ff       	call   c00007e0 <strcat>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012984:	0f 84 5d 01 00 00    	je     c0012ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001298a:	83 ec 0c             	sub    esp,0xc
c001298d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012994:	50                   	push   eax
c0012995:	e8 0d d9 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001299a:	83 c4 10             	add    esp,0x10
c001299d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00129a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00129a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00129a9:	80 fb 01             	cmp    bl,0x1
c00129ac:	0f 85 88 00 00 00    	jne    c0012a3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00129b2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00129b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00129bd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00129c1:	01 ce                	add    esi,ecx
c00129c3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00129c9:	0f 94 c0             	sete   al
c00129cc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00129d2:	0f 94 c3             	sete   bl
c00129d5:	09 c3                	or     ebx,eax
c00129d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00129d9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00129de:	74 41                	je     c0012a21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00129e0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00129e3:	84 db                	test   bl,bl
c00129e5:	75 15                	jne    c00129fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00129e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129eb:	66 83 f8 0c          	cmp    ax,0xc
c00129ef:	76 05                	jbe    c00129f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00129f1:	b8 0c 00 00 00       	mov    eax,0xc
c00129f6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00129fa:	76 37                	jbe    c0012a33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00129fc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012a00:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012a05:	0f 84 dc 00 00 00    	je     c0012ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	68 d8 eb 01 c0       	push   0xc001ebd8
c0012a13:	e8 8f d8 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012a1f:	eb 12                	jmp    c0012a33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012a21:	01 c1                	add    ecx,eax
c0012a23:	84 db                	test   bl,bl
c0012a25:	75 0c                	jne    c0012a33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012a27:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012a2b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012a2f:	77 02                	ja     c0012a33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012a31:	01 d1                	add    ecx,edx
c0012a33:	89 0e                	mov    DWORD PTR [esi],ecx
c0012a35:	e9 ea 00 00 00       	jmp    c0012b24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012a3a:	80 fb 02             	cmp    bl,0x2
c0012a3d:	75 7c                	jne    c0012abb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012a3f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012a46:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012a4a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012a4e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012a54:	74 20                	je     c0012a76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012a56:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012a5c:	74 18                	je     c0012a76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012a5e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012a62:	b9 0a 00 00 00       	mov    ecx,0xa
c0012a67:	66 83 f8 0e          	cmp    ax,0xe
c0012a6b:	77 03                	ja     c0012a70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012a6d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012a70:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012a74:	76 1f                	jbe    c0012a95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012a76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012a7a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012a7f:	74 66                	je     c0012ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012a81:	83 ec 0c             	sub    esp,0xc
c0012a84:	68 f4 eb 01 c0       	push   0xc001ebf4
c0012a89:	e8 19 d8 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012a95:	8b 06                	mov    eax,DWORD PTR [esi]
c0012a97:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012a9c:	74 13                	je     c0012ab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012a9e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012aa2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012aa9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012aad:	01 c8                	add    eax,ecx
c0012aaf:	eb 04                	jmp    c0012ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012ab1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012ab5:	01 c2                	add    edx,eax
c0012ab7:	89 16                	mov    DWORD PTR [esi],edx
c0012ab9:	eb 69                	jmp    c0012b24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012abb:	0f b6 db             	movzx  ebx,bl
c0012abe:	50                   	push   eax
c0012abf:	50                   	push   eax
c0012ac0:	53                   	push   ebx
c0012ac1:	68 10 ec 01 c0       	push   0xc001ec10
c0012ac6:	e8 8d 7c ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ad3:	74 12                	je     c0012ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ad5:	83 ec 0c             	sub    esp,0xc
c0012ad8:	68 1b ec 01 c0       	push   0xc001ec1b
c0012add:	e8 c5 d7 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012ae2:	83 c4 10             	add    esp,0x10
c0012ae5:	eb 3d                	jmp    c0012b24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ae7:	83 ec 0c             	sub    esp,0xc
c0012aea:	55                   	push   ebp
c0012aeb:	e8 fc 82 ff ff       	call   c000adec <File::close()>
c0012af0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012af3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012af6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012af9:	59                   	pop    ecx
c0012afa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afe:	e8 d6 4e ff ff       	call   c00079d9 <free>
c0012b03:	5b                   	pop    ebx
c0012b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b08:	e8 cc 4e ff ff       	call   c00079d9 <free>
c0012b0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b10:	e8 c4 4e ff ff       	call   c00079d9 <free>
c0012b15:	5e                   	pop    esi
c0012b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b1a:	e8 ba 4e ff ff       	call   c00079d9 <free>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	eb 21                	jmp    c0012b45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012b24:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012b28:	e9 76 fd ff ff       	jmp    c00128a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b34:	e8 a0 4e ff ff       	call   c00079d9 <free>
c0012b39:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	e9 eb fc ff ff       	jmp    c0012830 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012b45:	31 c0                	xor    eax,eax
c0012b47:	eb 33                	jmp    c0012b7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012b49:	83 ec 0c             	sub    esp,0xc
c0012b4c:	55                   	push   ebp
c0012b4d:	e8 9a 82 ff ff       	call   c000adec <File::close()>
c0012b52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012b5b:	58                   	pop    eax
c0012b5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b60:	e8 74 4e ff ff       	call   c00079d9 <free>
c0012b65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b68:	e8 6c 4e ff ff       	call   c00079d9 <free>
c0012b6d:	5a                   	pop    edx
c0012b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b72:	e8 62 4e ff ff       	call   c00079d9 <free>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	b0 01                	mov    al,0x1
c0012b7c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012b82:	5b                   	pop    ebx
c0012b83:	5e                   	pop    esi
c0012b84:	5f                   	pop    edi
c0012b85:	5d                   	pop    ebp
c0012b86:	c3                   	ret    

c0012b87 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012b87:	56                   	push   esi
c0012b88:	31 d2                	xor    edx,edx
c0012b8a:	53                   	push   ebx
c0012b8b:	8b 1d 40 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023840
c0012b91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b95:	39 d3                	cmp    ebx,edx
c0012b97:	7e 1b                	jle    c0012bb4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012b99:	8b 04 95 60 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5a0]
c0012ba0:	39 c8                	cmp    eax,ecx
c0012ba2:	77 0d                	ja     c0012bb1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012ba4:	8b 34 95 60 38 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc7a0]
c0012bab:	01 c6                	add    esi,eax
c0012bad:	39 ce                	cmp    esi,ecx
c0012baf:	77 05                	ja     c0012bb6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012bb1:	42                   	inc    edx
c0012bb2:	eb e1                	jmp    c0012b95 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012bb4:	31 c0                	xor    eax,eax
c0012bb6:	5b                   	pop    ebx
c0012bb7:	5e                   	pop    esi
c0012bb8:	c3                   	ret    

c0012bb9 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012bb9:	53                   	push   ebx
c0012bba:	31 c0                	xor    eax,eax
c0012bbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012bc0:	8b 1d 40 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023840
c0012bc6:	39 c3                	cmp    ebx,eax
c0012bc8:	7e 22                	jle    c0012bec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012bca:	8b 14 85 60 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5a0]
c0012bd1:	39 ca                	cmp    edx,ecx
c0012bd3:	77 14                	ja     c0012be9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012bd5:	03 14 85 60 38 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc7a0]
c0012bdc:	39 ca                	cmp    edx,ecx
c0012bde:	76 09                	jbe    c0012be9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012be0:	8b 04 85 60 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3a0]
c0012be7:	eb 05                	jmp    c0012bee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012be9:	40                   	inc    eax
c0012bea:	eb da                	jmp    c0012bc6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012bec:	31 c0                	xor    eax,eax
c0012bee:	5b                   	pop    ebx
c0012bef:	c3                   	ret    

c0012bf0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012bf0:	53                   	push   ebx
c0012bf1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012bf5:	53                   	push   ebx
c0012bf6:	e8 8c ff ff ff       	call   c0012b87 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012bfb:	5a                   	pop    edx
c0012bfc:	31 d2                	xor    edx,edx
c0012bfe:	85 c0                	test   eax,eax
c0012c00:	74 04                	je     c0012c06 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012c02:	89 da                	mov    edx,ebx
c0012c04:	29 c2                	sub    edx,eax
c0012c06:	89 d0                	mov    eax,edx
c0012c08:	5b                   	pop    ebx
c0012c09:	c3                   	ret    

c0012c0a <Thr::loadDLL(char const*, bool)>:
c0012c0a:	55                   	push   ebp
c0012c0b:	57                   	push   edi
c0012c0c:	56                   	push   esi
c0012c0d:	53                   	push   ebx
c0012c0e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012c14:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012c1b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012c22:	56                   	push   esi
c0012c23:	68 33 ec 01 c0       	push   0xc001ec33
c0012c28:	e8 2b 7b ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0012c2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c34:	e8 90 4d ff ff       	call   c00079c9 <malloc>
c0012c39:	83 c4 0c             	add    esp,0xc
c0012c3c:	89 c3                	mov    ebx,eax
c0012c3e:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0012c44:	56                   	push   esi
c0012c45:	50                   	push   eax
c0012c46:	e8 83 80 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	85 db                	test   ebx,ebx
c0012c50:	75 3c                	jne    c0012c8e <Thr::loadDLL(char const*, bool)+0x84>
c0012c52:	89 f8                	mov    eax,edi
c0012c54:	84 c0                	test   al,al
c0012c56:	0f 84 d2 01 00 00    	je     c0012e2e <Thr::loadDLL(char const*, bool)+0x224>
c0012c5c:	55                   	push   ebp
c0012c5d:	55                   	push   ebp
c0012c5e:	68 44 ec 01 c0       	push   0xc001ec44
c0012c63:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012c67:	55                   	push   ebp
c0012c68:	e8 b3 d9 fe ff       	call   c0000620 <strcpy>
c0012c6d:	58                   	pop    eax
c0012c6e:	5a                   	pop    edx
c0012c6f:	56                   	push   esi
c0012c70:	55                   	push   ebp
c0012c71:	e8 6a db fe ff       	call   c00007e0 <strcat>
c0012c76:	59                   	pop    ecx
c0012c77:	58                   	pop    eax
c0012c78:	68 57 ec 01 c0       	push   0xc001ec57
c0012c7d:	55                   	push   ebp
c0012c7e:	e8 5d db fe ff       	call   c00007e0 <strcat>
c0012c83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c86:	e8 1c d6 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012c8b:	83 c4 10             	add    esp,0x10
c0012c8e:	51                   	push   ecx
c0012c8f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012c93:	50                   	push   eax
c0012c94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c98:	50                   	push   eax
c0012c99:	53                   	push   ebx
c0012c9a:	e8 9b 83 ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	85 db                	test   ebx,ebx
c0012ca4:	74 0c                	je     c0012cb2 <Thr::loadDLL(char const*, bool)+0xa8>
c0012ca6:	83 ec 0c             	sub    esp,0xc
c0012ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cab:	53                   	push   ebx
c0012cac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012cb7:	75 0a                	jne    c0012cc3 <Thr::loadDLL(char const*, bool)+0xb9>
c0012cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cbd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012cc1:	75 3c                	jne    c0012cff <Thr::loadDLL(char const*, bool)+0xf5>
c0012cc3:	89 f8                	mov    eax,edi
c0012cc5:	84 c0                	test   al,al
c0012cc7:	0f 84 49 01 00 00    	je     c0012e16 <Thr::loadDLL(char const*, bool)+0x20c>
c0012ccd:	51                   	push   ecx
c0012cce:	51                   	push   ecx
c0012ccf:	68 44 ec 01 c0       	push   0xc001ec44
c0012cd4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012cd8:	53                   	push   ebx
c0012cd9:	e8 42 d9 fe ff       	call   c0000620 <strcpy>
c0012cde:	5d                   	pop    ebp
c0012cdf:	58                   	pop    eax
c0012ce0:	56                   	push   esi
c0012ce1:	53                   	push   ebx
c0012ce2:	e8 f9 da fe ff       	call   c00007e0 <strcat>
c0012ce7:	58                   	pop    eax
c0012ce8:	5a                   	pop    edx
c0012ce9:	68 57 ec 01 c0       	push   0xc001ec57
c0012cee:	53                   	push   ebx
c0012cef:	e8 ec da fe ff       	call   c00007e0 <strcat>
c0012cf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cf7:	e8 ab d5 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	52                   	push   edx
c0012d00:	6a 03                	push   0x3
c0012d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012d0a:	05 ff 0f 00 00       	add    eax,0xfff
c0012d0f:	83 d2 00             	adc    edx,0x0
c0012d12:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012d16:	50                   	push   eax
c0012d17:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c0012d1d:	e8 7c 6f ff ff       	call   c0009c9e <VAS::allocatePages(int, int)>
c0012d22:	59                   	pop    ecx
c0012d23:	89 c3                	mov    ebx,eax
c0012d25:	5d                   	pop    ebp
c0012d26:	50                   	push   eax
c0012d27:	68 3e da 01 c0       	push   0xc001da3e
c0012d2c:	e8 27 7a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0012d31:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d34:	e8 27 d8 fe ff       	call   c0000560 <strlen>
c0012d39:	8b 2d 40 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023840
c0012d3f:	40                   	inc    eax
c0012d40:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d43:	e8 81 4c ff ff       	call   c00079c9 <malloc>
c0012d48:	89 04 ad 60 3c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc3a0],eax
c0012d4f:	58                   	pop    eax
c0012d50:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012d55:	5a                   	pop    edx
c0012d56:	56                   	push   esi
c0012d57:	ff 34 85 60 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3a0]
c0012d5e:	e8 bd d8 fe ff       	call   c0000620 <strcpy>
c0012d63:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012d68:	8d 50 01             	lea    edx,[eax+0x1]
c0012d6b:	89 1c 85 60 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5a0],ebx
c0012d72:	89 15 40 38 02 c0    	mov    DWORD PTR ds:0xc0023840,edx
c0012d78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d7c:	83 c4 0c             	add    esp,0xc
c0012d7f:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c0012d86:	6a 01                	push   0x1
c0012d88:	53                   	push   ebx
c0012d89:	56                   	push   esi
c0012d8a:	e8 c2 f6 ff ff       	call   c0012451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012d8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d9b:	0f 85 89 00 00 00    	jne    c0012e2a <Thr::loadDLL(char const*, bool)+0x220>
c0012da1:	89 f8                	mov    eax,edi
c0012da3:	84 c0                	test   al,al
c0012da5:	74 73                	je     c0012e1a <Thr::loadDLL(char const*, bool)+0x210>
c0012da7:	83 ec 0c             	sub    esp,0xc
c0012daa:	68 59 ec 01 c0       	push   0xc001ec59
c0012daf:	e8 f3 d4 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012db4:	83 c4 10             	add    esp,0x10
c0012db7:	eb 61                	jmp    c0012e1a <Thr::loadDLL(char const*, bool)+0x210>
c0012db9:	50                   	push   eax
c0012dba:	50                   	push   eax
c0012dbb:	89 e8                	mov    eax,ebp
c0012dbd:	c1 e0 0c             	shl    eax,0xc
c0012dc0:	01 d8                	add    eax,ebx
c0012dc2:	50                   	push   eax
c0012dc3:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c0012dc9:	e8 48 6a ff ff       	call   c0009816 <VAS::getPageTableEntry(unsigned long)>
c0012dce:	83 c4 10             	add    esp,0x10
c0012dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd3:	a8 60                	test   al,0x60
c0012dd5:	75 11                	jne    c0012de8 <Thr::loadDLL(char const*, bool)+0x1de>
c0012dd7:	83 ec 0c             	sub    esp,0xc
c0012dda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ddf:	50                   	push   eax
c0012de0:	e8 4f 4f ff ff       	call   c0007d34 <Phys::freePage(unsigned long)>
c0012de5:	83 c4 10             	add    esp,0x10
c0012de8:	45                   	inc    ebp
c0012de9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ded:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012df1:	05 ff 0f 00 00       	add    eax,0xfff
c0012df6:	bf 00 00 00 00       	mov    edi,0x0
c0012dfb:	83 d2 00             	adc    edx,0x0
c0012dfe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e02:	c1 ea 0c             	shr    edx,0xc
c0012e05:	39 c5                	cmp    ebp,eax
c0012e07:	89 d1                	mov    ecx,edx
c0012e09:	89 f8                	mov    eax,edi
c0012e0b:	19 c8                	sbb    eax,ecx
c0012e0d:	72 aa                	jb     c0012db9 <Thr::loadDLL(char const*, bool)+0x1af>
c0012e0f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e14:	75 18                	jne    c0012e2e <Thr::loadDLL(char const*, bool)+0x224>
c0012e16:	31 db                	xor    ebx,ebx
c0012e18:	eb 14                	jmp    c0012e2e <Thr::loadDLL(char const*, bool)+0x224>
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	68 78 ec 01 c0       	push   0xc001ec78
c0012e22:	e8 80 d4 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	31 ed                	xor    ebp,ebp
c0012e2c:	eb bb                	jmp    c0012de9 <Thr::loadDLL(char const*, bool)+0x1df>
c0012e2e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012e34:	89 d8                	mov    eax,ebx
c0012e36:	5b                   	pop    ebx
c0012e37:	5e                   	pop    esi
c0012e38:	5f                   	pop    edi
c0012e39:	5d                   	pop    ebp
c0012e3a:	c3                   	ret    

c0012e3b <Thr::executeDLL(unsigned long, void*)>:
c0012e3b:	56                   	push   esi
c0012e3c:	53                   	push   ebx
c0012e3d:	52                   	push   edx
c0012e3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e46:	85 db                	test   ebx,ebx
c0012e48:	75 10                	jne    c0012e5a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	68 94 ec 01 c0       	push   0xc001ec94
c0012e52:	e8 50 d4 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	50                   	push   eax
c0012e5b:	50                   	push   eax
c0012e5c:	53                   	push   ebx
c0012e5d:	68 be ec 01 c0       	push   0xc001ecbe
c0012e62:	e8 f1 78 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0012e67:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012e6b:	89 d8                	mov    eax,ebx
c0012e6d:	83 c4 14             	add    esp,0x14
c0012e70:	5b                   	pop    ebx
c0012e71:	5e                   	pop    esi
c0012e72:	ff e0                	jmp    eax

c0012e74 <userModeEntryPoint(void*)>:
c0012e74:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0012e79:	48                   	dec    eax
c0012e7a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0012e7f:	75 03                	jne    c0012e84 <userModeEntryPoint(void*)+0x10>
c0012e81:	fb                   	sti    
c0012e82:	66 90                	xchg   ax,ax
c0012e84:	fb                   	sti    
c0012e85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e8d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012e93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e97:	e9 c3 d3 fe ff       	jmp    c000025f <goToUsermode>

c0012e9c <changeTSS>:
c0012e9c:	83 ec 14             	sub    esp,0x14
c0012e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012ea7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012eac:	c1 e2 15             	shl    edx,0x15
c0012eaf:	29 d0                	sub    eax,edx
c0012eb1:	50                   	push   eax
c0012eb2:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0012eb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ebd:	05 7c 11 00 00       	add    eax,0x117c
c0012ec2:	50                   	push   eax
c0012ec3:	e8 90 5f ff ff       	call   c0008e58 <TSS::setESP(unsigned long)>
c0012ec8:	83 c4 1c             	add    esp,0x1c
c0012ecb:	c3                   	ret    

c0012ecc <switchToThread(ThreadControlBlock*)>:
c0012ecc:	57                   	push   edi
c0012ecd:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0012ed2:	56                   	push   esi
c0012ed3:	85 c0                	test   eax,eax
c0012ed5:	53                   	push   ebx
c0012ed6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eda:	0f 85 90 00 00 00    	jne    c0012f70 <switchToThread(ThreadControlBlock*)+0xa4>
c0012ee0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012ee3:	80 fa ff             	cmp    dl,0xff
c0012ee6:	0f 84 80 00 00 00    	je     c0012f6c <switchToThread(ThreadControlBlock*)+0xa0>
c0012eec:	81 e2 ff 00 00 00    	and    edx,0xff
c0012ef2:	b8 00 04 00 00       	mov    eax,0x400
c0012ef7:	29 d0                	sub    eax,edx
c0012ef9:	d1 f8                	sar    eax,1
c0012efb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012efe:	66 90                	xchg   ax,ax
c0012f00:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012f03:	e8 7b 24 00 00       	call   c0015383 <HalQueryPerformanceCounter()>
c0012f08:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c0012f0d:	89 15 4c 40 02 c0    	mov    DWORD PTR ds:0xc002404c,edx
c0012f13:	89 c6                	mov    esi,eax
c0012f15:	89 d7                	mov    edi,edx
c0012f17:	2b 35 38 40 02 c0    	sub    esi,DWORD PTR ds:0xc0024038
c0012f1d:	a3 38 40 02 c0       	mov    ds:0xc0024038,eax
c0012f22:	1b 3d 3c 40 02 c0    	sbb    edi,DWORD PTR ds:0xc002403c
c0012f28:	89 35 40 40 02 c0    	mov    DWORD PTR ds:0xc0024040,esi
c0012f2e:	89 3d 44 40 02 c0    	mov    DWORD PTR ds:0xc0024044,edi
c0012f34:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012f3a:	89 15 3c 40 02 c0    	mov    DWORD PTR ds:0xc002403c,edx
c0012f40:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012f43:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012f46:	01 c6                	add    esi,eax
c0012f48:	11 d7                	adc    edi,edx
c0012f4a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012f4d:	83 ec 0c             	sub    esp,0xc
c0012f50:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012f53:	53                   	push   ebx
c0012f54:	e8 3e d3 fe ff       	call   c0000297 <switchToThreadASM>
c0012f59:	0f 20 c0             	mov    eax,cr0
c0012f5c:	83 c8 08             	or     eax,0x8
c0012f5f:	0f 22 c0             	mov    cr0,eax
c0012f62:	83 c4 10             	add    esp,0x10
c0012f65:	5b                   	pop    ebx
c0012f66:	5e                   	pop    esi
c0012f67:	5f                   	pop    edi
c0012f68:	c3                   	ret    
c0012f69:	8d 76 00             	lea    esi,[esi+0x0]
c0012f6c:	31 c0                	xor    eax,eax
c0012f6e:	eb 90                	jmp    c0012f00 <switchToThread(ThreadControlBlock*)+0x34>
c0012f70:	5b                   	pop    ebx
c0012f71:	c7 05 00 40 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x1
c0012f7b:	5e                   	pop    esi
c0012f7c:	5f                   	pop    edi
c0012f7d:	c3                   	ret    
c0012f7e:	66 90                	xchg   ax,ax

c0012f80 <Process::addArgs(char**)>:
c0012f80:	57                   	push   edi
c0012f81:	56                   	push   esi
c0012f82:	53                   	push   ebx
c0012f83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012f8b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012f95:	85 ff                	test   edi,edi
c0012f97:	74 43                	je     c0012fdc <Process::addArgs(char**)+0x5c>
c0012f99:	8b 07                	mov    eax,DWORD PTR [edi]
c0012f9b:	85 c0                	test   eax,eax
c0012f9d:	74 3d                	je     c0012fdc <Process::addArgs(char**)+0x5c>
c0012f9f:	31 db                	xor    ebx,ebx
c0012fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	50                   	push   eax
c0012fa8:	e8 b3 d5 fe ff       	call   c0000560 <strlen>
c0012fad:	40                   	inc    eax
c0012fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fb1:	e8 13 4a ff ff       	call   c00079c9 <malloc>
c0012fb6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012fbd:	5a                   	pop    edx
c0012fbe:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012fc1:	59                   	pop    ecx
c0012fc2:	43                   	inc    ebx
c0012fc3:	52                   	push   edx
c0012fc4:	50                   	push   eax
c0012fc5:	e8 56 d6 fe ff       	call   c0000620 <strcpy>
c0012fca:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012fd0:	83 c4 10             	add    esp,0x10
c0012fd3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012fd6:	85 c0                	test   eax,eax
c0012fd8:	75 ca                	jne    c0012fa4 <Process::addArgs(char**)+0x24>
c0012fda:	66 90                	xchg   ax,ax
c0012fdc:	5b                   	pop    ebx
c0012fdd:	5e                   	pop    esi
c0012fde:	5f                   	pop    edi
c0012fdf:	c3                   	ret    

c0012fe0 <Process::Process(char const*, Process*, char**)>:
c0012fe0:	56                   	push   esi
c0012fe1:	53                   	push   ebx
c0012fe2:	83 ec 14             	sub    esp,0x14
c0012fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fe9:	05 0c 02 00 00       	add    eax,0x20c
c0012fee:	bb 07 00 00 00       	mov    ebx,0x7
c0012ff3:	89 c6                	mov    esi,eax
c0012ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ff8:	85 db                	test   ebx,ebx
c0012ffa:	78 14                	js     c0013010 <Process::Process(char const*, Process*, char**)+0x30>
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	56                   	push   esi
c0013000:	e8 d7 9c 00 00       	call   c001ccdc <ThreadControlBlock::ThreadControlBlock()>
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	83 c6 5f             	add    esi,0x5f
c001300b:	4b                   	dec    ebx
c001300c:	eb ea                	jmp    c0012ff8 <Process::Process(char const*, Process*, char**)+0x18>
c001300e:	66 90                	xchg   ax,ax
c0013010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013014:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001301b:	83 ec 0c             	sub    esp,0xc
c001301e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013022:	e8 09 d1 ff ff       	call   c0010130 <Krnl::newProcessEnv(Process*)>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	89 c2                	mov    edx,eax
c001302c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013030:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001303a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013043:	a1 30 fb 01 c0       	mov    eax,ds:0xc001fb30
c0013048:	8d 50 01             	lea    edx,[eax+0x1]
c001304b:	89 15 30 fb 01 c0    	mov    DWORD PTR ds:0xc001fb30,edx
c0013051:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013055:	89 02                	mov    DWORD PTR [edx],eax
c0013057:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001305f:	83 ec 0c             	sub    esp,0xc
c0013062:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013066:	e8 5e 49 ff ff       	call   c00079c9 <malloc>
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	89 c3                	mov    ebx,eax
c0013070:	83 ec 08             	sub    esp,0x8
c0013073:	6a 00                	push   0x0
c0013075:	53                   	push   ebx
c0013076:	e8 cd 6f ff ff       	call   c000a048 <VAS::VAS(bool)>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013082:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001308c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001309a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001309e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00130a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00130ae:	85 c0                	test   eax,eax
c00130b0:	74 42                	je     c00130f4 <Process::Process(char const*, Process*, char**)+0x114>
c00130b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130b6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00130bc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00130c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130c6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00130cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00130d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130e0:	05 0c 01 00 00       	add    eax,0x10c
c00130e5:	83 ec 08             	sub    esp,0x8
c00130e8:	52                   	push   edx
c00130e9:	50                   	push   eax
c00130ea:	e8 31 d5 fe ff       	call   c0000620 <strcpy>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	eb 64                	jmp    c0013158 <Process::Process(char const*, Process*, char**)+0x178>
c00130f4:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013103:	e8 c1 48 ff ff       	call   c00079c9 <malloc>
c0013108:	83 c4 10             	add    esp,0x10
c001310b:	89 c3                	mov    ebx,eax
c001310d:	83 ec 08             	sub    esp,0x8
c0013110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013114:	53                   	push   ebx
c0013115:	e8 e2 5a ff ff       	call   c0008bfc <VgaText::VgaText(char const*)>
c001311a:	83 c4 10             	add    esp,0x10
c001311d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013121:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001312b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013131:	83 ec 0c             	sub    esp,0xc
c0013134:	50                   	push   eax
c0013135:	e8 62 53 ff ff       	call   c000849c <addToTerminalCycle(VgaText*)>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013141:	05 0c 01 00 00       	add    eax,0x10c
c0013146:	83 ec 08             	sub    esp,0x8
c0013149:	68 dd ec 01 c0       	push   0xc001ecdd
c001314e:	50                   	push   eax
c001314f:	e8 cc d4 fe ff       	call   c0000620 <strcpy>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	90                   	nop
c0013158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001315c:	83 c0 0c             	add    eax,0xc
c001315f:	83 ec 08             	sub    esp,0x8
c0013162:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013166:	50                   	push   eax
c0013167:	e8 b4 d4 fe ff       	call   c0000620 <strcpy>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	83 ec 08             	sub    esp,0x8
c0013172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001317a:	e8 01 fe ff ff       	call   c0012f80 <Process::addArgs(char**)>
c001317f:	83 c4 10             	add    esp,0x10
c0013182:	83 ec 08             	sub    esp,0x8
c0013185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001318d:	e8 89 ed ff ff       	call   c0011f1b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013199:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001319d:	83 f0 01             	xor    eax,0x1
c00131a0:	88 c2                	mov    dl,al
c00131a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00131ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00131b0:	25 ff 00 00 00       	and    eax,0xff
c00131b5:	83 ec 08             	sub    esp,0x8
c00131b8:	50                   	push   eax
c00131b9:	68 34 ed 01 c0       	push   0xc001ed34
c00131be:	e8 95 75 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	90                   	nop
c00131c7:	83 c4 14             	add    esp,0x14
c00131ca:	5b                   	pop    ebx
c00131cb:	5e                   	pop    esi
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop
c00131ce:	66 90                	xchg   ax,ax

c00131d0 <Process::Process(bool, char const*, Process*, char**)>:
c00131d0:	56                   	push   esi
c00131d1:	53                   	push   ebx
c00131d2:	83 ec 24             	sub    esp,0x24
c00131d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131d9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00131dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131e1:	05 0c 02 00 00       	add    eax,0x20c
c00131e6:	bb 07 00 00 00       	mov    ebx,0x7
c00131eb:	89 c6                	mov    esi,eax
c00131ed:	8d 76 00             	lea    esi,[esi+0x0]
c00131f0:	85 db                	test   ebx,ebx
c00131f2:	78 14                	js     c0013208 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	56                   	push   esi
c00131f8:	e8 df 9a 00 00       	call   c001ccdc <ThreadControlBlock::ThreadControlBlock()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	83 c6 5f             	add    esi,0x5f
c0013203:	4b                   	dec    ebx
c0013204:	eb ea                	jmp    c00131f0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013206:	66 90                	xchg   ax,ax
c0013208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001320c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013213:	83 ec 0c             	sub    esp,0xc
c0013216:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001321a:	e8 11 cf ff ff       	call   c0010130 <Krnl::newProcessEnv(Process*)>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	89 c2                	mov    edx,eax
c0013224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013228:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001322e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013232:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001323b:	a1 30 fb 01 c0       	mov    eax,ds:0xc001fb30
c0013240:	8d 50 01             	lea    edx,[eax+0x1]
c0013243:	89 15 30 fb 01 c0    	mov    DWORD PTR ds:0xc001fb30,edx
c0013249:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001324d:	89 02                	mov    DWORD PTR [edx],eax
c001324f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013257:	83 ec 0c             	sub    esp,0xc
c001325a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001325e:	e8 66 47 ff ff       	call   c00079c9 <malloc>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	89 c3                	mov    ebx,eax
c0013268:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001326c:	25 ff 00 00 00       	and    eax,0xff
c0013271:	83 ec 08             	sub    esp,0x8
c0013274:	50                   	push   eax
c0013275:	53                   	push   ebx
c0013276:	e8 cd 6d ff ff       	call   c000a048 <VAS::VAS(bool)>
c001327b:	83 c4 10             	add    esp,0x10
c001327e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013282:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013288:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001328c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001329a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001329e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00132a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132ae:	85 c0                	test   eax,eax
c00132b0:	74 42                	je     c00132f4 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00132b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132b6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132bc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132c6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132e0:	05 0c 01 00 00       	add    eax,0x10c
c00132e5:	83 ec 08             	sub    esp,0x8
c00132e8:	52                   	push   edx
c00132e9:	50                   	push   eax
c00132ea:	e8 31 d3 fe ff       	call   c0000620 <strcpy>
c00132ef:	83 c4 10             	add    esp,0x10
c00132f2:	eb 64                	jmp    c0013358 <Process::Process(bool, char const*, Process*, char**)+0x188>
c00132f4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013303:	e8 c1 46 ff ff       	call   c00079c9 <malloc>
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	89 c3                	mov    ebx,eax
c001330d:	83 ec 08             	sub    esp,0x8
c0013310:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013314:	53                   	push   ebx
c0013315:	e8 e2 58 ff ff       	call   c0008bfc <VgaText::VgaText(char const*)>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013321:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001332b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013331:	83 ec 0c             	sub    esp,0xc
c0013334:	50                   	push   eax
c0013335:	e8 62 51 ff ff       	call   c000849c <addToTerminalCycle(VgaText*)>
c001333a:	83 c4 10             	add    esp,0x10
c001333d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013341:	05 0c 01 00 00       	add    eax,0x10c
c0013346:	83 ec 08             	sub    esp,0x8
c0013349:	68 dd ec 01 c0       	push   0xc001ecdd
c001334e:	50                   	push   eax
c001334f:	e8 cc d2 fe ff       	call   c0000620 <strcpy>
c0013354:	83 c4 10             	add    esp,0x10
c0013357:	90                   	nop
c0013358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001335c:	83 c0 0c             	add    eax,0xc
c001335f:	83 ec 08             	sub    esp,0x8
c0013362:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013366:	50                   	push   eax
c0013367:	e8 b4 d2 fe ff       	call   c0000620 <strcpy>
c001336c:	83 c4 10             	add    esp,0x10
c001336f:	83 ec 08             	sub    esp,0x8
c0013372:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013376:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001337a:	e8 01 fc ff ff       	call   c0012f80 <Process::addArgs(char**)>
c001337f:	83 c4 10             	add    esp,0x10
c0013382:	90                   	nop
c0013383:	83 c4 24             	add    esp,0x24
c0013386:	5b                   	pop    ebx
c0013387:	5e                   	pop    esi
c0013388:	c3                   	ret    
c0013389:	8d 76 00             	lea    esi,[esi+0x0]

c001338c <taskStartupFunction>:
c001338c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013391:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013394:	c3                   	ret    
c0013395:	90                   	nop
c0013396:	66 90                	xchg   ax,ax

c0013398 <Semaphore::Semaphore(int)>:
c0013398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001339c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00133a0:	89 10                	mov    DWORD PTR [eax],edx
c00133a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133a6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00133ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00133b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00133c3:	90                   	nop
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop
c00133c6:	66 90                	xchg   ax,ax

c00133c8 <Mutex::Mutex()>:
c00133c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133cc:	6a 01                	push   0x1
c00133ce:	50                   	push   eax
c00133cf:	e8 c4 ff ff ff       	call   c0013398 <Semaphore::Semaphore(int)>
c00133d4:	83 c4 08             	add    esp,0x8
c00133d7:	90                   	nop
c00133d8:	c3                   	ret    
c00133d9:	90                   	nop
c00133da:	66 90                	xchg   ax,ax

c00133dc <Process::createThread(void (*)(void*), void*, int)>:
c00133dc:	57                   	push   edi
c00133dd:	31 c9                	xor    ecx,ecx
c00133df:	56                   	push   esi
c00133e0:	53                   	push   ebx
c00133e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133e5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00133ec:	89 f2                	mov    edx,esi
c00133ee:	66 90                	xchg   ax,ax
c00133f0:	31 c0                	xor    eax,eax
c00133f2:	66 89 d0             	mov    ax,dx
c00133f5:	83 e2 01             	and    edx,0x1
c00133f8:	74 12                	je     c001340c <Process::createThread(void (*)(void*), void*, int)+0x30>
c00133fa:	d1 f8                	sar    eax,1
c00133fc:	41                   	inc    ecx
c00133fd:	89 c2                	mov    edx,eax
c00133ff:	83 f9 10             	cmp    ecx,0x10
c0013402:	75 ec                	jne    c00133f0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013404:	31 db                	xor    ebx,ebx
c0013406:	89 d8                	mov    eax,ebx
c0013408:	5b                   	pop    ebx
c0013409:	5e                   	pop    esi
c001340a:	5f                   	pop    edi
c001340b:	c3                   	ret    
c001340c:	b8 01 00 00 00       	mov    eax,0x1
c0013411:	d3 e0                	shl    eax,cl
c0013413:	09 c6                	or     esi,eax
c0013415:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013418:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001341f:	01 c0                	add    eax,eax
c0013421:	01 c8                	add    eax,ecx
c0013423:	8d 04 80             	lea    eax,[eax+eax*4]
c0013426:	01 d8                	add    eax,ebx
c0013428:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001342f:	75 0b                	jne    c001343c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013431:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001343b:	90                   	nop
c001343c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013442:	83 ec 08             	sub    esp,0x8
c0013445:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013448:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001344b:	01 c0                	add    eax,eax
c001344d:	01 c8                	add    eax,ecx
c001344f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013452:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013455:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001345b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013461:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013465:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001346b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013471:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013478:	89 ca                	mov    edx,ecx
c001347a:	f7 da                	neg    edx
c001347c:	c1 e2 15             	shl    edx,0x15
c001347f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013485:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001348b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001348f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013499:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001349f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00134a3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00134a9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00134b3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00134bd:	53                   	push   ebx
c00134be:	68 24 40 02 c0       	push   0xc0024024
c00134c3:	e8 b4 95 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	89 d8                	mov    eax,ebx
c00134cd:	5b                   	pop    ebx
c00134ce:	5e                   	pop    esi
c00134cf:	5f                   	pop    edi
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop
c00134d2:	66 90                	xchg   ax,ax

c00134d4 <Process::createUserThread()>:
c00134d4:	83 ec 0c             	sub    esp,0xc
c00134d7:	68 80 00 00 00       	push   0x80
c00134dc:	6a 00                	push   0x0
c00134de:	68 74 2e 01 c0       	push   0xc0012e74
c00134e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e7:	50                   	push   eax
c00134e8:	e8 ef fe ff ff       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c00134ed:	83 c4 1c             	add    esp,0x1c
c00134f0:	c3                   	ret    
c00134f1:	8d 76 00             	lea    esi,[esi+0x0]

c00134f4 <setupMultitasking(void (*)())>:
c00134f4:	56                   	push   esi
c00134f5:	53                   	push   ebx
c00134f6:	53                   	push   ebx
c00134f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134fb:	eb 13                	jmp    c0013510 <setupMultitasking(void (*)())+0x1c>
c00134fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	68 24 40 02 c0       	push   0xc0024024
c0013508:	e8 b7 94 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	68 24 40 02 c0       	push   0xc0024024
c0013518:	e8 83 94 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	84 c0                	test   al,al
c0013522:	74 dc                	je     c0013500 <setupMultitasking(void (*)())+0xc>
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	68 1f 07 00 00       	push   0x71f
c001352c:	e8 98 44 ff ff       	call   c00079c9 <malloc>
c0013531:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013538:	89 c3                	mov    ebx,eax
c001353a:	6a 00                	push   0x0
c001353c:	68 e1 ec 01 c0       	push   0xc001ece1
c0013541:	6a 01                	push   0x1
c0013543:	50                   	push   eax
c0013544:	e8 87 fc ff ff       	call   c00131d0 <Process::Process(bool, char const*, Process*, char**)>
c0013549:	83 c4 14             	add    esp,0x14
c001354c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013552:	89 1d 30 40 02 c0    	mov    DWORD PTR ds:0xc0024030,ebx
c0013558:	50                   	push   eax
c0013559:	e8 9b 51 ff ff       	call   c00086f9 <setActiveTerminal(VgaText*)>
c001355e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013566:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013570:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013576:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013579:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013583:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013589:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001358f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013599:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00135a3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00135ad:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00135b3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00135b9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00135c3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00135c9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00135d3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00135d9:	5a                   	pop    edx
c00135da:	59                   	pop    ecx
c00135db:	68 dd ec 01 c0       	push   0xc001ecdd
c00135e0:	50                   	push   eax
c00135e1:	e8 3a d0 fe ff       	call   c0000620 <strcpy>
c00135e6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00135ed:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00135f1:	83 c4 14             	add    esp,0x14
c00135f4:	5b                   	pop    ebx
c00135f5:	5e                   	pop    esi
c00135f6:	e9 8e cc fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00135fb:	90                   	nop

c00135fc <schedule()>:
c00135fc:	8b 15 04 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024004
c0013602:	85 d2                	test   edx,edx
c0013604:	74 0e                	je     c0013614 <schedule()+0x18>
c0013606:	c7 05 00 40 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x1
c0013610:	c3                   	ret    
c0013611:	8d 76 00             	lea    esi,[esi+0x0]
c0013614:	53                   	push   ebx
c0013615:	83 ec 14             	sub    esp,0x14
c0013618:	68 24 40 02 c0       	push   0xc0024024
c001361d:	e8 7e 93 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	84 c0                	test   al,al
c0013627:	75 3b                	jne    c0013664 <schedule()+0x68>
c0013629:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001362e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013631:	4a                   	dec    edx
c0013632:	74 38                	je     c001366c <schedule()+0x70>
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	68 24 40 02 c0       	push   0xc0024024
c001363c:	e8 7b 93 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013641:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013648:	89 c3                	mov    ebx,eax
c001364a:	e8 75 93 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001364f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013659:	e8 6e f8 ff ff       	call   c0012ecc <switchToThread(ThreadControlBlock*)>
c001365e:	83 c4 10             	add    esp,0x10
c0013661:	8d 76 00             	lea    esi,[esi+0x0]
c0013664:	83 c4 08             	add    esp,0x8
c0013667:	5b                   	pop    ebx
c0013668:	c3                   	ret    
c0013669:	8d 76 00             	lea    esi,[esi+0x0]
c001366c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013673:	83 ec 08             	sub    esp,0x8
c0013676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001367b:	50                   	push   eax
c001367c:	68 24 40 02 c0       	push   0xc0024024
c0013681:	e8 f6 93 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	eb a9                	jmp    c0013634 <schedule()+0x38>
c001368b:	90                   	nop

c001368c <Semaphore::tryAcquire()>:
c001368c:	53                   	push   ebx
c001368d:	83 ec 08             	sub    esp,0x8
c0013690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013694:	fa                   	cli    
c0013695:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001369a:	8d 50 01             	lea    edx,[eax+0x1]
c001369d:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c00136a3:	8b 15 04 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024004
c00136a9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00136ac:	89 1d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ebx
c00136b2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00136b5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00136b7:	7c 33                	jl     c00136ec <Semaphore::tryAcquire()+0x60>
c00136b9:	89 15 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,edx
c00136bf:	85 d2                	test   edx,edx
c00136c1:	75 0d                	jne    c00136d0 <Semaphore::tryAcquire()+0x44>
c00136c3:	8b 15 00 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024000
c00136c9:	85 d2                	test   edx,edx
c00136cb:	75 6b                	jne    c0013738 <Semaphore::tryAcquire()+0xac>
c00136cd:	8d 76 00             	lea    esi,[esi+0x0]
c00136d0:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00136d5:	85 c0                	test   eax,eax
c00136d7:	74 0b                	je     c00136e4 <Semaphore::tryAcquire()+0x58>
c00136d9:	8d 76 00             	lea    esi,[esi+0x0]
c00136dc:	31 c0                	xor    eax,eax
c00136de:	83 c4 08             	add    esp,0x8
c00136e1:	5b                   	pop    ebx
c00136e2:	c3                   	ret    
c00136e3:	90                   	nop
c00136e4:	fb                   	sti    
c00136e5:	83 c4 08             	add    esp,0x8
c00136e8:	5b                   	pop    ebx
c00136e9:	c3                   	ret    
c00136ea:	66 90                	xchg   ax,ax
c00136ec:	43                   	inc    ebx
c00136ed:	89 15 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,edx
c00136f3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00136f6:	85 d2                	test   edx,edx
c00136f8:	75 22                	jne    c001371c <Semaphore::tryAcquire()+0x90>
c00136fa:	8b 0d 00 40 02 c0    	mov    ecx,DWORD PTR ds:0xc0024000
c0013700:	85 c9                	test   ecx,ecx
c0013702:	74 18                	je     c001371c <Semaphore::tryAcquire()+0x90>
c0013704:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c001370e:	e8 e9 fe ff ff       	call   c00135fc <schedule()>
c0013713:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013718:	48                   	dec    eax
c0013719:	8d 76 00             	lea    esi,[esi+0x0]
c001371c:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013721:	85 c0                	test   eax,eax
c0013723:	75 0b                	jne    c0013730 <Semaphore::tryAcquire()+0xa4>
c0013725:	fb                   	sti    
c0013726:	b0 01                	mov    al,0x1
c0013728:	83 c4 08             	add    esp,0x8
c001372b:	5b                   	pop    ebx
c001372c:	c3                   	ret    
c001372d:	8d 76 00             	lea    esi,[esi+0x0]
c0013730:	b0 01                	mov    al,0x1
c0013732:	83 c4 08             	add    esp,0x8
c0013735:	5b                   	pop    ebx
c0013736:	c3                   	ret    
c0013737:	90                   	nop
c0013738:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013742:	e8 b5 fe ff ff       	call   c00135fc <schedule()>
c0013747:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001374c:	48                   	dec    eax
c001374d:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013752:	85 c0                	test   eax,eax
c0013754:	75 86                	jne    c00136dc <Semaphore::tryAcquire()+0x50>
c0013756:	eb 8c                	jmp    c00136e4 <Semaphore::tryAcquire()+0x58>

c0013758 <Semaphore::assertLocked(char const*)>:
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001375f:	fa                   	cli    
c0013760:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013766:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c001376b:	8d 48 01             	lea    ecx,[eax+0x1]
c001376e:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0013774:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013776:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013779:	7c 29                	jl     c00137a4 <Semaphore::assertLocked(char const*)+0x4c>
c001377b:	90                   	nop
c001377c:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013781:	85 c0                	test   eax,eax
c0013783:	75 0b                	jne    c0013790 <Semaphore::assertLocked(char const*)+0x38>
c0013785:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c001378a:	85 c0                	test   eax,eax
c001378c:	75 2e                	jne    c00137bc <Semaphore::assertLocked(char const*)+0x64>
c001378e:	66 90                	xchg   ax,ax
c0013790:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013795:	48                   	dec    eax
c0013796:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001379b:	75 03                	jne    c00137a0 <Semaphore::assertLocked(char const*)+0x48>
c001379d:	fb                   	sti    
c001379e:	66 90                	xchg   ax,ax
c00137a0:	83 c4 0c             	add    esp,0xc
c00137a3:	c3                   	ret    
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00137ab:	52                   	push   edx
c00137ac:	e8 f6 ca ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00137b1:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c00137b6:	83 c4 10             	add    esp,0x10
c00137b9:	48                   	dec    eax
c00137ba:	eb c0                	jmp    c001377c <Semaphore::assertLocked(char const*)+0x24>
c00137bc:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c00137c6:	e8 31 fe ff ff       	call   c00135fc <schedule()>
c00137cb:	eb c3                	jmp    c0013790 <Semaphore::assertLocked(char const*)+0x38>
c00137cd:	8d 76 00             	lea    esi,[esi+0x0]

c00137d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00137d0:	83 ec 0c             	sub    esp,0xc
c00137d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00137df:	e8 18 fe ff ff       	call   c00135fc <schedule()>
c00137e4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00137e9:	48                   	dec    eax
c00137ea:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00137ef:	75 03                	jne    c00137f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00137f1:	fb                   	sti    
c00137f2:	66 90                	xchg   ax,ax
c00137f4:	83 c4 0c             	add    esp,0xc
c00137f7:	c3                   	ret    

c00137f8 <blockTask(TaskState)>:
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	fa                   	cli    
c00137fc:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013802:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001380b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001380e:	e8 e9 fd ff ff       	call   c00135fc <schedule()>
c0013813:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013818:	48                   	dec    eax
c0013819:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001381e:	75 04                	jne    c0013824 <blockTask(TaskState)+0x2c>
c0013820:	fb                   	sti    
c0013821:	8d 76 00             	lea    esi,[esi+0x0]
c0013824:	83 c4 0c             	add    esp,0xc
c0013827:	c3                   	ret    

c0013828 <waitTask(int, int*, int)>:
c0013828:	83 ec 18             	sub    esp,0x18
c001382b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013834:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013837:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001383b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013840:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013843:	6a 07                	push   0x7
c0013845:	e8 ae ff ff ff       	call   c00137f8 <blockTask(TaskState)>
c001384a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384f:	83 c4 10             	add    esp,0x10
c0013852:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013855:	85 d2                	test   edx,edx
c0013857:	74 0b                	je     c0013864 <waitTask(int, int*, int)+0x3c>
c0013859:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001385c:	89 02                	mov    DWORD PTR [edx],eax
c001385e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013863:	90                   	nop
c0013864:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013867:	83 c4 0c             	add    esp,0xc
c001386a:	c3                   	ret    
c001386b:	90                   	nop

c001386c <milliTenthSleepUntil(unsigned int)>:
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013873:	39 05 0c 31 02 c0    	cmp    DWORD PTR ds:0xc002310c,eax
c0013879:	76 05                	jbe    c0013880 <milliTenthSleepUntil(unsigned int)+0x14>
c001387b:	90                   	nop
c001387c:	83 c4 0c             	add    esp,0xc
c001387f:	c3                   	ret    
c0013880:	fa                   	cli    
c0013881:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013887:	83 ec 08             	sub    esp,0x8
c001388a:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0013890:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013896:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013899:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001389f:	52                   	push   edx
c00138a0:	68 18 40 02 c0       	push   0xc0024018
c00138a5:	e8 d2 91 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138aa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00138b1:	e8 42 ff ff ff       	call   c00137f8 <blockTask(TaskState)>
c00138b6:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	48                   	dec    eax
c00138bf:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c00138c4:	85 c0                	test   eax,eax
c00138c6:	75 0c                	jne    c00138d4 <milliTenthSleepUntil(unsigned int)+0x68>
c00138c8:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c00138cd:	85 c0                	test   eax,eax
c00138cf:	75 17                	jne    c00138e8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00138d9:	48                   	dec    eax
c00138da:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00138df:	75 9b                	jne    c001387c <milliTenthSleepUntil(unsigned int)+0x10>
c00138e1:	fb                   	sti    
c00138e2:	83 c4 0c             	add    esp,0xc
c00138e5:	c3                   	ret    
c00138e6:	66 90                	xchg   ax,ax
c00138e8:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c00138f2:	e8 05 fd ff ff       	call   c00135fc <schedule()>
c00138f7:	eb db                	jmp    c00138d4 <milliTenthSleepUntil(unsigned int)+0x68>
c00138f9:	8d 76 00             	lea    esi,[esi+0x0]

c00138fc <milliTenthSleep(unsigned int)>:
c00138fc:	a1 0c 31 02 c0       	mov    eax,ds:0xc002310c
c0013901:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013905:	e9 62 ff ff ff       	jmp    c001386c <milliTenthSleepUntil(unsigned int)>
c001390a:	66 90                	xchg   ax,ax

c001390c <sleep(unsigned int)>:
c001390c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013910:	8d 04 80             	lea    eax,[eax+eax*4]
c0013913:	8d 04 80             	lea    eax,[eax+eax*4]
c0013916:	8d 04 80             	lea    eax,[eax+eax*4]
c0013919:	8d 04 80             	lea    eax,[eax+eax*4]
c001391c:	c1 e0 04             	shl    eax,0x4
c001391f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013923:	eb d7                	jmp    c00138fc <milliTenthSleep(unsigned int)>
c0013925:	90                   	nop
c0013926:	66 90                	xchg   ax,ax

c0013928 <Semaphore::acquire()>:
c0013928:	83 ec 0c             	sub    esp,0xc
c001392b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001392f:	fa                   	cli    
c0013930:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013935:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001393b:	8d 48 01             	lea    ecx,[eax+0x1]
c001393e:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0013944:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013947:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013949:	7d 2d                	jge    c0013978 <Semaphore::acquire()+0x50>
c001394b:	41                   	inc    ecx
c001394c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001394f:	90                   	nop
c0013950:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013955:	85 c0                	test   eax,eax
c0013957:	75 0b                	jne    c0013964 <Semaphore::acquire()+0x3c>
c0013959:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c001395e:	85 c0                	test   eax,eax
c0013960:	75 62                	jne    c00139c4 <Semaphore::acquire()+0x9c>
c0013962:	66 90                	xchg   ax,ax
c0013964:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013969:	48                   	dec    eax
c001396a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001396f:	75 03                	jne    c0013974 <Semaphore::acquire()+0x4c>
c0013971:	fb                   	sti    
c0013972:	66 90                	xchg   ax,ax
c0013974:	83 c4 0c             	add    esp,0xc
c0013977:	c3                   	ret    
c0013978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001397d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013984:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013987:	85 c9                	test   ecx,ecx
c0013989:	74 4d                	je     c00139d8 <Semaphore::acquire()+0xb0>
c001398b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001398e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013994:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013997:	90                   	nop
c0013998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001399d:	83 ec 0c             	sub    esp,0xc
c00139a0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00139a3:	68 5c ed 01 c0       	push   0xc001ed5c
c00139a8:	e8 ab 6d ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00139ad:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00139b4:	e8 3f fe ff ff       	call   c00137f8 <blockTask(TaskState)>
c00139b9:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	48                   	dec    eax
c00139c2:	eb 8c                	jmp    c0013950 <Semaphore::acquire()+0x28>
c00139c4:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c00139ce:	e8 29 fc ff ff       	call   c00135fc <schedule()>
c00139d3:	eb 8f                	jmp    c0013964 <Semaphore::acquire()+0x3c>
c00139d5:	8d 76 00             	lea    esi,[esi+0x0]
c00139d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00139e0:	eb b6                	jmp    c0013998 <Semaphore::acquire()+0x70>
c00139e2:	66 90                	xchg   ax,ax

c00139e4 <taskReturned>:
c00139e4:	83 ec 18             	sub    esp,0x18
c00139e7:	68 7c ed 01 c0       	push   0xc001ed7c
c00139ec:	e8 b6 c8 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	6a 02                	push   0x2
c00139f9:	e8 fa fd ff ff       	call   c00137f8 <blockTask(TaskState)>
c00139fe:	fa                   	cli    
c00139ff:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013a05:	e8 f2 fb ff ff       	call   c00135fc <schedule()>
c0013a0a:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	48                   	dec    eax
c0013a13:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013a18:	85 c0                	test   eax,eax
c0013a1a:	75 d8                	jne    c00139f4 <taskReturned+0x10>
c0013a1c:	fb                   	sti    
c0013a1d:	eb d5                	jmp    c00139f4 <taskReturned+0x10>
c0013a1f:	90                   	nop

c0013a20 <Thr::processFromPID(int)>:
c0013a20:	57                   	push   edi
c0013a21:	56                   	push   esi
c0013a22:	53                   	push   ebx
c0013a23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a27:	fa                   	cli    
c0013a28:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	68 24 40 02 c0       	push   0xc0024024
c0013a36:	e8 81 8f 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	89 c7                	mov    edi,eax
c0013a40:	eb 16                	jmp    c0013a58 <Thr::processFromPID(int)+0x38>
c0013a42:	66 90                	xchg   ax,ax
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	68 24 40 02 c0       	push   0xc0024024
c0013a4c:	e8 6b 8f 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	39 f8                	cmp    eax,edi
c0013a56:	74 4c                	je     c0013aa4 <Thr::processFromPID(int)+0x84>
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	68 24 40 02 c0       	push   0xc0024024
c0013a60:	e8 57 8f 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a65:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013a6c:	89 c3                	mov    ebx,eax
c0013a6e:	e8 51 8f 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a73:	58                   	pop    eax
c0013a74:	5a                   	pop    edx
c0013a75:	53                   	push   ebx
c0013a76:	68 24 40 02 c0       	push   0xc0024024
c0013a7b:	e8 fc 8f 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	39 30                	cmp    DWORD PTR [eax],esi
c0013a88:	75 ba                	jne    c0013a44 <Thr::processFromPID(int)+0x24>
c0013a8a:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013a8f:	48                   	dec    eax
c0013a90:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013a95:	74 09                	je     c0013aa0 <Thr::processFromPID(int)+0x80>
c0013a97:	90                   	nop
c0013a98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a9b:	5b                   	pop    ebx
c0013a9c:	5e                   	pop    esi
c0013a9d:	5f                   	pop    edi
c0013a9e:	c3                   	ret    
c0013a9f:	90                   	nop
c0013aa0:	fb                   	sti    
c0013aa1:	eb f5                	jmp    c0013a98 <Thr::processFromPID(int)+0x78>
c0013aa3:	90                   	nop
c0013aa4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013aa9:	48                   	dec    eax
c0013aaa:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013aaf:	75 07                	jne    c0013ab8 <Thr::processFromPID(int)+0x98>
c0013ab1:	fb                   	sti    
c0013ab2:	5b                   	pop    ebx
c0013ab3:	5e                   	pop    esi
c0013ab4:	5f                   	pop    edi
c0013ab5:	c3                   	ret    
c0013ab6:	66 90                	xchg   ax,ax
c0013ab8:	5b                   	pop    ebx
c0013ab9:	31 c0                	xor    eax,eax
c0013abb:	5e                   	pop    esi
c0013abc:	5f                   	pop    edi
c0013abd:	c3                   	ret    
c0013abe:	66 90                	xchg   ax,ax

c0013ac0 <unblockTask(ThreadControlBlock*)>:
c0013ac0:	53                   	push   ebx
c0013ac1:	83 ec 08             	sub    esp,0x8
c0013ac4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ac8:	fa                   	cli    
c0013ac9:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013acf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013ad2:	85 c0                	test   eax,eax
c0013ad4:	74 66                	je     c0013b3c <unblockTask(ThreadControlBlock*)+0x7c>
c0013ad6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013ad9:	48                   	dec    eax
c0013ada:	74 38                	je     c0013b14 <unblockTask(ThreadControlBlock*)+0x54>
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	68 24 40 02 c0       	push   0xc0024024
c0013ae4:	e8 d3 8e 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	85 c0                	test   eax,eax
c0013aee:	75 1c                	jne    c0013b0c <unblockTask(ThreadControlBlock*)+0x4c>
c0013af0:	eb 5e                	jmp    c0013b50 <unblockTask(ThreadControlBlock*)+0x90>
c0013af2:	66 90                	xchg   ax,ax
c0013af4:	83 ec 08             	sub    esp,0x8
c0013af7:	50                   	push   eax
c0013af8:	68 24 40 02 c0       	push   0xc0024024
c0013afd:	e8 6a 92 00 00       	call   c001cd6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	85 c0                	test   eax,eax
c0013b07:	74 47                	je     c0013b50 <unblockTask(ThreadControlBlock*)+0x90>
c0013b09:	8d 76 00             	lea    esi,[esi+0x0]
c0013b0c:	39 c3                	cmp    ebx,eax
c0013b0e:	75 e4                	jne    c0013af4 <unblockTask(ThreadControlBlock*)+0x34>
c0013b10:	eb 12                	jmp    c0013b24 <unblockTask(ThreadControlBlock*)+0x64>
c0013b12:	66 90                	xchg   ax,ax
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	68 ff ec 01 c0       	push   0xc001ecff
c0013b1c:	e8 37 6c ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013b29:	48                   	dec    eax
c0013b2a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013b2f:	75 03                	jne    c0013b34 <unblockTask(ThreadControlBlock*)+0x74>
c0013b31:	fb                   	sti    
c0013b32:	66 90                	xchg   ax,ax
c0013b34:	83 c4 08             	add    esp,0x8
c0013b37:	5b                   	pop    ebx
c0013b38:	c3                   	ret    
c0013b39:	8d 76 00             	lea    esi,[esi+0x0]
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	68 e8 ec 01 c0       	push   0xc001ece8
c0013b44:	e8 0f 6c ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0013b49:	83 c4 10             	add    esp,0x10
c0013b4c:	eb d6                	jmp    c0013b24 <unblockTask(ThreadControlBlock*)+0x64>
c0013b4e:	66 90                	xchg   ax,ax
c0013b50:	83 ec 08             	sub    esp,0x8
c0013b53:	53                   	push   ebx
c0013b54:	68 24 40 02 c0       	push   0xc0024024
c0013b59:	e8 1e 8f 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	eb c1                	jmp    c0013b24 <unblockTask(ThreadControlBlock*)+0x64>
c0013b63:	90                   	nop

c0013b64 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013b64:	55                   	push   ebp
c0013b65:	57                   	push   edi
c0013b66:	56                   	push   esi
c0013b67:	53                   	push   ebx
c0013b68:	83 ec 1c             	sub    esp,0x1c
c0013b6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013b6f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b72:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013b78:	85 ed                	test   ebp,ebp
c0013b7a:	7e 24                	jle    c0013ba0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013b7c:	31 f6                	xor    esi,esi
c0013b7e:	66 90                	xchg   ax,ax
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013b8a:	46                   	inc    esi
c0013b8b:	57                   	push   edi
c0013b8c:	e8 48 3e ff ff       	call   c00079d9 <free>
c0013b91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013b9d:	7f e1                	jg     c0013b80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013b9f:	90                   	nop
c0013ba0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013baa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013baf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013bb2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013bb5:	d3 c0                	rol    eax,cl
c0013bb7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013bbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013bc1:	89 f7                	mov    edi,esi
c0013bc3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013bcb:	0f 85 77 01 00 00    	jne    c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013bd1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013bd7:	85 ed                	test   ebp,ebp
c0013bd9:	74 1d                	je     c0013bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013bdb:	83 ec 0c             	sub    esp,0xc
c0013bde:	55                   	push   ebp
c0013bdf:	e8 68 c4 ff ff       	call   c001004c <EnvVarContainer::~EnvVarContainer()>
c0013be4:	59                   	pop    ecx
c0013be5:	5e                   	pop    esi
c0013be6:	6a 0c                	push   0xc
c0013be8:	55                   	push   ebp
c0013be9:	e8 74 6a ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c0013bee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	89 f7                	mov    edi,esi
c0013bf6:	66 90                	xchg   ax,ax
c0013bf8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013bfe:	85 c0                	test   eax,eax
c0013c00:	0f 84 b6 00 00 00    	je     c0013cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013c06:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013c09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013c0d:	31 c9                	xor    ecx,ecx
c0013c0f:	eb 17                	jmp    c0013c28 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013c11:	8d 76 00             	lea    esi,[esi+0x0]
c0013c14:	41                   	inc    ecx
c0013c15:	83 f9 10             	cmp    ecx,0x10
c0013c18:	0f 84 9e 00 00 00    	je     c0013cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013c1e:	66 90                	xchg   ax,ax
c0013c20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013c26:	66 90                	xchg   ax,ax
c0013c28:	31 d2                	xor    edx,edx
c0013c2a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013c31:	d3 fa                	sar    edx,cl
c0013c33:	83 e2 01             	and    edx,0x1
c0013c36:	74 dc                	je     c0013c14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c38:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013c3b:	01 d2                	add    edx,edx
c0013c3d:	01 ca                	add    edx,ecx
c0013c3f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013c42:	01 d0                	add    eax,edx
c0013c44:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013c4a:	83 fd 07             	cmp    ebp,0x7
c0013c4d:	75 c5                	jne    c0013c14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c4f:	05 40 02 00 00       	add    eax,0x240
c0013c54:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013c57:	83 fd ff             	cmp    ebp,0xffffffff
c0013c5a:	0f 8c f0 00 00 00    	jl     c0013d50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013c60:	0f 84 ae 01 00 00    	je     c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013c66:	85 ed                	test   ebp,ebp
c0013c68:	0f 84 92 01 00 00    	je     c0013e00 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013c6e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013c70:	75 a2                	jne    c0013c14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c72:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013c78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013c7c:	01 d0                	add    eax,edx
c0013c7e:	66 90                	xchg   ax,ax
c0013c80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013c8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013c96:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013c9d:	50                   	push   eax
c0013c9e:	e8 1d fe ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ca9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cad:	89 f7                	mov    edi,esi
c0013caf:	41                   	inc    ecx
c0013cb0:	83 f9 10             	cmp    ecx,0x10
c0013cb3:	0f 85 67 ff ff ff    	jne    c0013c20 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cbc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013cc2:	85 c0                	test   eax,eax
c0013cc4:	74 62                	je     c0013d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013cc6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ccc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013cd2:	74 54                	je     c0013d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 24 40 02 c0       	push   0xc0024024
c0013cdc:	e8 db 8c 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce1:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013ce8:	89 c7                	mov    edi,eax
c0013cea:	e8 b1 8c 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	84 c0                	test   al,al
c0013cf4:	0f 84 ce 00 00 00    	je     c0013dc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013cfa:	66 90                	xchg   ax,ax
c0013cfc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013d05:	85 d2                	test   edx,edx
c0013d07:	74 0f                	je     c0013d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013d09:	83 ec 0c             	sub    esp,0xc
c0013d0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d0e:	52                   	push   edx
c0013d0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d12:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013d22:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013d25:	8d 76 00             	lea    esi,[esi+0x0]
c0013d28:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013d2e:	85 db                	test   ebx,ebx
c0013d30:	74 16                	je     c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d32:	83 ec 0c             	sub    esp,0xc
c0013d35:	53                   	push   ebx
c0013d36:	e8 fb 5c ff ff       	call   c0009a36 <VAS::~VAS()>
c0013d3b:	58                   	pop    eax
c0013d3c:	5a                   	pop    edx
c0013d3d:	6a 14                	push   0x14
c0013d3f:	53                   	push   ebx
c0013d40:	e8 1d 69 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c0013d45:	83 c4 10             	add    esp,0x10
c0013d48:	83 c4 1c             	add    esp,0x1c
c0013d4b:	5b                   	pop    ebx
c0013d4c:	5e                   	pop    esi
c0013d4d:	5f                   	pop    edi
c0013d4e:	5d                   	pop    ebp
c0013d4f:	c3                   	ret    
c0013d50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	68 b0 ed 01 c0       	push   0xc001edb0
c0013d5c:	e8 46 c5 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0013d61:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	89 f7                	mov    edi,esi
c0013d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d6d:	e9 a2 fe ff ff       	jmp    c0013c14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013d72:	66 90                	xchg   ax,ax
c0013d74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013d7a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013d80:	75 1e                	jne    c0013da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	68 18 ee 01 c0       	push   0xc001ee18
c0013d8a:	e8 c9 69 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0013d8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013d96:	e8 5d fa ff ff       	call   c00137f8 <blockTask(TaskState)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	66 90                	xchg   ax,ax
c0013da0:	83 ec 08             	sub    esp,0x8
c0013da3:	56                   	push   esi
c0013da4:	68 24 40 02 c0       	push   0xc0024024
c0013da9:	e8 ce 8c 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013dae:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013db5:	e8 02 8c 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	39 f8                	cmp    eax,edi
c0013dbf:	0f 84 37 ff ff ff    	je     c0013cfc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	68 24 40 02 c0       	push   0xc0024024
c0013dd0:	e8 e7 8b 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013dd5:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013ddc:	89 c6                	mov    esi,eax
c0013dde:	e8 e1 8b 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013de3:	83 c4 10             	add    esp,0x10
c0013de6:	39 f3                	cmp    ebx,esi
c0013de8:	74 b6                	je     c0013da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013dea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013ded:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013df0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013df6:	75 a8                	jne    c0013da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013df8:	e9 77 ff ff ff       	jmp    c0013d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0013e00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	68 e4 ed 01 c0       	push   0xc001ede4
c0013e0c:	e9 4b ff ff ff       	jmp    c0013d5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013e11:	8d 76 00             	lea    esi,[esi+0x0]
c0013e14:	8b 36                	mov    esi,DWORD PTR [esi]
c0013e16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e1a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013e1d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e20:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013e26:	01 d7                	add    edi,edx
c0013e28:	89 f8                	mov    eax,edi
c0013e2a:	e9 51 fe ff ff       	jmp    c0013c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013e2f:	90                   	nop

c0013e30 <cleanerTaskFunction(void*)>:
c0013e30:	53                   	push   ebx
c0013e31:	83 ec 08             	sub    esp,0x8
c0013e34:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013e39:	48                   	dec    eax
c0013e3a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013e3f:	75 03                	jne    c0013e44 <cleanerTaskFunction(void*)+0x14>
c0013e41:	fb                   	sti    
c0013e42:	66 90                	xchg   ax,ax
c0013e44:	fa                   	cli    
c0013e45:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013e4a:	80 3d ec 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fec,0x0
c0013e51:	8d 50 01             	lea    edx,[eax+0x1]
c0013e54:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c0013e5a:	0f 84 ac 00 00 00    	je     c0013f0c <cleanerTaskFunction(void*)+0xdc>
c0013e60:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013e65:	85 c0                	test   eax,eax
c0013e67:	75 03                	jne    c0013e6c <cleanerTaskFunction(void*)+0x3c>
c0013e69:	fb                   	sti    
c0013e6a:	66 90                	xchg   ax,ax
c0013e6c:	c6 05 ec 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fec,0x0
c0013e73:	fa                   	cli    
c0013e74:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013e7a:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0013e80:	fa                   	cli    
c0013e81:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013e87:	eb 2b                	jmp    c0013eb4 <cleanerTaskFunction(void*)+0x84>
c0013e89:	8d 76 00             	lea    esi,[esi+0x0]
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	68 0c 40 02 c0       	push   0xc002400c
c0013e94:	e8 23 8b 00 00       	call   c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e99:	c7 04 24 0c 40 02 c0 	mov    DWORD PTR [esp],0xc002400c
c0013ea0:	89 c3                	mov    ebx,eax
c0013ea2:	e8 1d 8b 00 00       	call   c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ea7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eaa:	e8 b5 fc ff ff       	call   c0013b64 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	66 90                	xchg   ax,ax
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	68 0c 40 02 c0       	push   0xc002400c
c0013ebc:	e8 df 8a 00 00       	call   c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	84 c0                	test   al,al
c0013ec6:	74 c4                	je     c0013e8c <cleanerTaskFunction(void*)+0x5c>
c0013ec8:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013ecd:	48                   	dec    eax
c0013ece:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013ed3:	75 03                	jne    c0013ed8 <cleanerTaskFunction(void*)+0xa8>
c0013ed5:	fb                   	sti    
c0013ed6:	66 90                	xchg   ax,ax
c0013ed8:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013edd:	48                   	dec    eax
c0013ede:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013ee3:	0f 85 4b ff ff ff    	jne    c0013e34 <cleanerTaskFunction(void*)+0x4>
c0013ee9:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0013eee:	85 c0                	test   eax,eax
c0013ef0:	0f 84 3e ff ff ff    	je     c0013e34 <cleanerTaskFunction(void*)+0x4>
c0013ef6:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013f00:	e8 f7 f6 ff ff       	call   c00135fc <schedule()>
c0013f05:	e9 2a ff ff ff       	jmp    c0013e34 <cleanerTaskFunction(void*)+0x4>
c0013f0a:	66 90                	xchg   ax,ax
c0013f0c:	83 ec 0c             	sub    esp,0xc
c0013f0f:	6a 02                	push   0x2
c0013f11:	e8 ba f8 ff ff       	call   c00137d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	e9 4e ff ff ff       	jmp    c0013e6c <cleanerTaskFunction(void*)+0x3c>
c0013f1e:	66 90                	xchg   ax,ax

c0013f20 <terminateTask(int)>:
c0013f20:	83 ec 14             	sub    esp,0x14
c0013f23:	fa                   	cli    
c0013f24:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013f2a:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0013f30:	fa                   	cli    
c0013f31:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013f37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f40:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f48:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013f4b:	50                   	push   eax
c0013f4c:	68 0c 40 02 c0       	push   0xc002400c
c0013f51:	e8 26 8b 00 00       	call   c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013f65:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013f6a:	85 c0                	test   eax,eax
c0013f6c:	74 5e                	je     c0013fcc <terminateTask(int)+0xac>
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	c6 05 ec 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fec,0x1
c0013f78:	50                   	push   eax
c0013f79:	e8 42 fb ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	8d 76 00             	lea    esi,[esi+0x0]
c0013f84:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013f89:	48                   	dec    eax
c0013f8a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013f8f:	75 03                	jne    c0013f94 <terminateTask(int)+0x74>
c0013f91:	fb                   	sti    
c0013f92:	66 90                	xchg   ax,ax
c0013f94:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013f99:	48                   	dec    eax
c0013f9a:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013f9f:	75 0b                	jne    c0013fac <terminateTask(int)+0x8c>
c0013fa1:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c0013fa8:	75 36                	jne    c0013fe0 <terminateTask(int)+0xc0>
c0013faa:	66 90                	xchg   ax,ax
c0013fac:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013fb1:	48                   	dec    eax
c0013fb2:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013fb7:	75 03                	jne    c0013fbc <terminateTask(int)+0x9c>
c0013fb9:	fb                   	sti    
c0013fba:	66 90                	xchg   ax,ax
c0013fbc:	fa                   	cli    
c0013fbd:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013fc3:	90                   	nop
c0013fc4:	e8 33 f6 ff ff       	call   c00135fc <schedule()>
c0013fc9:	eb e1                	jmp    c0013fac <terminateTask(int)+0x8c>
c0013fcb:	90                   	nop
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	68 16 ed 01 c0       	push   0xc001ed16
c0013fd4:	e8 7f 67 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0013fd9:	83 c4 10             	add    esp,0x10
c0013fdc:	eb a6                	jmp    c0013f84 <terminateTask(int)+0x64>
c0013fde:	66 90                	xchg   ax,ax
c0013fe0:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013fea:	eb d8                	jmp    c0013fc4 <terminateTask(int)+0xa4>

c0013fec <Thr::terminateFromIRQ(int)>:
c0013fec:	83 ec 18             	sub    esp,0x18
c0013fef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ff3:	50                   	push   eax
c0013ff4:	e8 27 ff ff ff       	call   c0013f20 <terminateTask(int)>
c0013ff9:	90                   	nop
c0013ffa:	66 90                	xchg   ax,ax

c0013ffc <Semaphore::release()>:
c0013ffc:	83 ec 0c             	sub    esp,0xc
c0013fff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014003:	fa                   	cli    
c0014004:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0014009:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001400f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014012:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0014018:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001401b:	85 c9                	test   ecx,ecx
c001401d:	74 41                	je     c0014060 <Semaphore::release()+0x64>
c001401f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014028:	51                   	push   ecx
c0014029:	e8 92 fa ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c001402e:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	48                   	dec    eax
c0014037:	90                   	nop
c0014038:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c001403d:	85 c0                	test   eax,eax
c001403f:	75 0b                	jne    c001404c <Semaphore::release()+0x50>
c0014041:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0014046:	85 c0                	test   eax,eax
c0014048:	75 1e                	jne    c0014068 <Semaphore::release()+0x6c>
c001404a:	66 90                	xchg   ax,ax
c001404c:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014051:	48                   	dec    eax
c0014052:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014057:	75 03                	jne    c001405c <Semaphore::release()+0x60>
c0014059:	fb                   	sti    
c001405a:	66 90                	xchg   ax,ax
c001405c:	83 c4 0c             	add    esp,0xc
c001405f:	c3                   	ret    
c0014060:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014063:	eb d3                	jmp    c0014038 <Semaphore::release()+0x3c>
c0014065:	8d 76 00             	lea    esi,[esi+0x0]
c0014068:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0014072:	e8 85 f5 ff ff       	call   c00135fc <schedule()>
c0014077:	eb d3                	jmp    c001404c <Semaphore::release()+0x50>
c0014079:	8d 76 00             	lea    esi,[esi+0x0]

c001407c <__static_initialization_and_destruction_0(int, int)>:
c001407c:	83 ec 0c             	sub    esp,0xc
c001407f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014084:	0f 85 8e 00 00 00    	jne    c0014118 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001408a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014092:	0f 85 80 00 00 00    	jne    c0014118 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	68 24 40 02 c0       	push   0xc0024024
c00140a0:	e8 83 8c 00 00       	call   c001cd28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	83 ec 04             	sub    esp,0x4
c00140ab:	68 d0 f8 01 c0       	push   0xc001f8d0
c00140b0:	68 24 40 02 c0       	push   0xc0024024
c00140b5:	68 d8 cc 01 c0       	push   0xc001ccd8
c00140ba:	e8 53 65 ff ff       	call   c000a612 <__cxa_atexit>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	83 ec 0c             	sub    esp,0xc
c00140c5:	68 18 40 02 c0       	push   0xc0024018
c00140ca:	e8 59 8c 00 00       	call   c001cd28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	83 ec 04             	sub    esp,0x4
c00140d5:	68 d0 f8 01 c0       	push   0xc001f8d0
c00140da:	68 18 40 02 c0       	push   0xc0024018
c00140df:	68 d8 cc 01 c0       	push   0xc001ccd8
c00140e4:	e8 29 65 ff ff       	call   c000a612 <__cxa_atexit>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	68 0c 40 02 c0       	push   0xc002400c
c00140f4:	e8 2f 8c 00 00       	call   c001cd28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00140f9:	83 c4 10             	add    esp,0x10
c00140fc:	83 ec 04             	sub    esp,0x4
c00140ff:	68 d0 f8 01 c0       	push   0xc001f8d0
c0014104:	68 0c 40 02 c0       	push   0xc002400c
c0014109:	68 d8 cc 01 c0       	push   0xc001ccd8
c001410e:	e8 ff 64 ff ff       	call   c000a612 <__cxa_atexit>
c0014113:	83 c4 10             	add    esp,0x10
c0014116:	66 90                	xchg   ax,ax
c0014118:	90                   	nop
c0014119:	83 c4 0c             	add    esp,0xc
c001411c:	c3                   	ret    
c001411d:	8d 76 00             	lea    esi,[esi+0x0]

c0014120 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	83 ec 08             	sub    esp,0x8
c0014126:	68 ff ff 00 00       	push   0xffff
c001412b:	6a 01                	push   0x1
c001412d:	e8 4a ff ff ff       	call   c001407c <__static_initialization_and_destruction_0(int, int)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	83 c4 0c             	add    esp,0xc
c0014138:	c3                   	ret    

c0014139 <Vm::inbv(unsigned short)>:
c0014139:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001413d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014142:	75 06                	jne    c001414a <Vm::inbv(unsigned short)+0x11>
c0014144:	a0 6c 40 02 c0       	mov    al,ds:0xc002406c
c0014149:	c3                   	ret    
c001414a:	ec                   	in     al,dx
c001414b:	c3                   	ret    

c001414c <Vm::outbv(unsigned short, unsigned char)>:
c001414c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014154:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014159:	75 25                	jne    c0014180 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001415b:	8b 0d 6c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002406c
c0014161:	8d 51 01             	lea    edx,[ecx+0x1]
c0014164:	88 81 80 40 02 c0    	mov    BYTE PTR [ecx-0x3ffdbf80],al
c001416a:	89 15 6c 40 02 c0    	mov    DWORD PTR ds:0xc002406c,edx
c0014170:	83 fa 20             	cmp    edx,0x20
c0014173:	75 0c                	jne    c0014181 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014175:	c7 05 6c 40 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x1f
c001417f:	c3                   	ret    
c0014180:	ee                   	out    dx,al
c0014181:	c3                   	ret    

c0014182 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014182:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014187:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001418c:	c1 e0 04             	shl    eax,0x4
c001418f:	01 d0                	add    eax,edx
c0014191:	c3                   	ret    

c0014192 <Vm::getSegment(unsigned int)>:
c0014192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014196:	c1 e8 10             	shr    eax,0x10
c0014199:	c3                   	ret    

c001419a <Vm::getOffset(unsigned int)>:
c001419a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001419e:	c3                   	ret    

c001419f <Vm::mainloop2()>:
c001419f:	83 ec 18             	sub    esp,0x18
c00141a2:	fa                   	cli    
c00141a3:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00141a9:	6a 02                	push   0x2
c00141ab:	c6 05 65 40 02 c0 01 	mov    BYTE PTR ds:0xc0024065,0x1
c00141b2:	e8 19 f6 ff ff       	call   c00137d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00141b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141bc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00141c0:	52                   	push   edx
c00141c1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00141c5:	52                   	push   edx
c00141c6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00141ca:	52                   	push   edx
c00141cb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00141cf:	50                   	push   eax
c00141d0:	e8 5a c0 fe ff       	call   c000022f <goToVM86>
c00141d5:	83 c4 2c             	add    esp,0x2c
c00141d8:	c3                   	ret    

c00141d9 <Vm::mainVm8086Loop(void*)>:
c00141d9:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00141de:	48                   	dec    eax
c00141df:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00141e4:	75 01                	jne    c00141e7 <Vm::mainVm8086Loop(void*)+0xe>
c00141e6:	fb                   	sti    
c00141e7:	eb b6                	jmp    c001419f <Vm::mainloop2()>

c00141e9 <Vm::mainloop3(unsigned long)>:
c00141e9:	83 ec 18             	sub    esp,0x18
c00141ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141f0:	fa                   	cli    
c00141f1:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00141f7:	6a 02                	push   0x2
c00141f9:	c6 05 64 40 02 c0 01 	mov    BYTE PTR ds:0xc0024064,0x1
c0014200:	a3 60 40 02 c0       	mov    ds:0xc0024060,eax
c0014205:	e8 c6 f5 ff ff       	call   c00137d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001420a:	83 c4 1c             	add    esp,0x1c
c001420d:	eb 90                	jmp    c001419f <Vm::mainloop2()>

c001420f <Vm::initialise8086()>:
c001420f:	83 ec 0c             	sub    esp,0xc
c0014212:	68 80 00 00 00       	push   0x80
c0014217:	6a 00                	push   0x0
c0014219:	68 d9 41 01 c0       	push   0xc00141d9
c001421e:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0014224:	e8 b3 f1 ff ff       	call   c00133dc <Process::createThread(void (*)(void*), void*, int)>
c0014229:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014230:	a3 68 40 02 c0       	mov    ds:0xc0024068,eax
c0014235:	68 00 01 00 00       	push   0x100
c001423a:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001423f:	6a 00                	push   0x0
c0014241:	6a 00                	push   0x0
c0014243:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014249:	e8 46 5c ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001424e:	83 c4 2c             	add    esp,0x2c
c0014251:	c3                   	ret    

c0014252 <Vm::finish8086()>:
c0014252:	53                   	push   ebx
c0014253:	83 ec 08             	sub    esp,0x8
c0014256:	fa                   	cli    
c0014257:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001425d:	80 3d 64 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024064,0x0
c0014264:	75 15                	jne    c001427b <Vm::finish8086()+0x29>
c0014266:	e8 91 f3 ff ff       	call   c00135fc <schedule()>
c001426b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014270:	48                   	dec    eax
c0014271:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014276:	75 de                	jne    c0014256 <Vm::finish8086()+0x4>
c0014278:	fb                   	sti    
c0014279:	eb db                	jmp    c0014256 <Vm::finish8086()+0x4>
c001427b:	83 ec 0c             	sub    esp,0xc
c001427e:	8b 1d 60 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024060
c0014284:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c001428a:	c6 05 64 40 02 c0 00 	mov    BYTE PTR ds:0xc0024064,0x0
c0014291:	e8 2a f8 ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c0014296:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	8d 50 ff             	lea    edx,[eax-0x1]
c00142a1:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c00142a7:	85 d2                	test   edx,edx
c00142a9:	75 01                	jne    c00142ac <Vm::finish8086()+0x5a>
c00142ab:	fb                   	sti    
c00142ac:	89 d8                	mov    eax,ebx
c00142ae:	83 c4 08             	add    esp,0x8
c00142b1:	5b                   	pop    ebx
c00142b2:	c3                   	ret    

c00142b3 <Vm::getOutput8086(unsigned char*)>:
c00142b3:	57                   	push   edi
c00142b4:	8b 0d 6c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002406c
c00142ba:	56                   	push   esi
c00142bb:	be 80 40 02 c0       	mov    esi,0xc0024080
c00142c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142c6:	a1 6c 40 02 c0       	mov    eax,ds:0xc002406c
c00142cb:	5e                   	pop    esi
c00142cc:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c00142d6:	5f                   	pop    edi
c00142d7:	c3                   	ret    

c00142d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00142d8:	55                   	push   ebp
c00142d9:	57                   	push   edi
c00142da:	56                   	push   esi
c00142db:	53                   	push   ebx
c00142dc:	83 ec 0c             	sub    esp,0xc
c00142df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00142e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00142eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00142ef:	fa                   	cli    
c00142f0:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00142f6:	80 3d 65 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024065,0x0
c00142fd:	75 15                	jne    c0014314 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00142ff:	e8 f8 f2 ff ff       	call   c00135fc <schedule()>
c0014304:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014309:	48                   	dec    eax
c001430a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001430f:	75 de                	jne    c00142ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014311:	fb                   	sti    
c0014312:	eb db                	jmp    c00142ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014314:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c0014319:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c0014323:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014327:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001432b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001432f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014333:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014337:	0f b7 ff             	movzx  edi,di
c001433a:	0f b7 f6             	movzx  esi,si
c001433d:	50                   	push   eax
c001433e:	6a 20                	push   0x20
c0014340:	6a 00                	push   0x0
c0014342:	68 80 40 02 c0       	push   0xc0024080
c0014347:	e8 a4 c1 fe ff       	call   c00004f0 <memset>
c001434c:	5a                   	pop    edx
c001434d:	59                   	pop    ecx
c001434e:	57                   	push   edi
c001434f:	56                   	push   esi
c0014350:	e8 2d fe ff ff       	call   c0014182 <Vm::realToLinear(unsigned short, unsigned short)>
c0014355:	83 c4 10             	add    esp,0x10
c0014358:	89 c7                	mov    edi,eax
c001435a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001435e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014362:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014364:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014369:	c6 05 65 40 02 c0 00 	mov    BYTE PTR ds:0xc0024065,0x0
c0014370:	48                   	dec    eax
c0014371:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014376:	75 01                	jne    c0014379 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014378:	fb                   	sti    
c0014379:	83 ec 0c             	sub    esp,0xc
c001437c:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c0014382:	e8 39 f7 ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c0014387:	83 c4 1c             	add    esp,0x1c
c001438a:	b0 01                	mov    al,0x1
c001438c:	5b                   	pop    ebx
c001438d:	5e                   	pop    esi
c001438e:	5f                   	pop    edi
c001438f:	5d                   	pop    ebp
c0014390:	c3                   	ret    

c0014391 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014391:	55                   	push   ebp
c0014392:	57                   	push   edi
c0014393:	56                   	push   esi
c0014394:	53                   	push   ebx
c0014395:	83 ec 2c             	sub    esp,0x2c
c0014398:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001439c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00143a0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00143a4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00143a8:	fa                   	cli    
c00143a9:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00143af:	0f b6 35 65 40 02 c0 	movzx  esi,BYTE PTR ds:0xc0024065
c00143b6:	89 f0                	mov    eax,esi
c00143b8:	84 c0                	test   al,al
c00143ba:	75 1d                	jne    c00143d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00143bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00143c0:	e8 37 f2 ff ff       	call   c00135fc <schedule()>
c00143c5:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00143ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143ce:	48                   	dec    eax
c00143cf:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00143d4:	75 d2                	jne    c00143a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00143d6:	fb                   	sti    
c00143d7:	eb cf                	jmp    c00143a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00143d9:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c00143de:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c00143e8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00143ec:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00143f0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00143f4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00143f8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00143fc:	50                   	push   eax
c00143fd:	6a 20                	push   0x20
c00143ff:	6a 00                	push   0x0
c0014401:	68 80 40 02 c0       	push   0xc0024080
c0014406:	e8 e5 c0 fe ff       	call   c00004f0 <memset>
c001440b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014412:	e8 b2 35 ff ff       	call   c00079c9 <malloc>
c0014417:	83 c4 0c             	add    esp,0xc
c001441a:	89 c3                	mov    ebx,eax
c001441c:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0014422:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014426:	50                   	push   eax
c0014427:	e8 a2 68 ff ff       	call   c000acce <File::File(char const*, Process*)>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	85 db                	test   ebx,ebx
c0014431:	75 0a                	jne    c001443d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014433:	83 ec 0c             	sub    esp,0xc
c0014436:	68 40 ee 01 c0       	push   0xc001ee40
c001443b:	eb 3e                	jmp    c001447b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001443d:	50                   	push   eax
c001443e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014442:	50                   	push   eax
c0014443:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014447:	50                   	push   eax
c0014448:	53                   	push   ebx
c0014449:	e8 ec 6b ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014456:	74 0a                	je     c0014462 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	68 54 ee 01 c0       	push   0xc001ee54
c0014460:	eb 19                	jmp    c001447b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014462:	51                   	push   ecx
c0014463:	51                   	push   ecx
c0014464:	6a 01                	push   0x1
c0014466:	53                   	push   ebx
c0014467:	e8 22 69 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c001446c:	83 c4 10             	add    esp,0x10
c001446f:	85 c0                	test   eax,eax
c0014471:	74 24                	je     c0014497 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014473:	83 ec 0c             	sub    esp,0xc
c0014476:	68 6d ee 01 c0       	push   0xc001ee6d
c001447b:	e8 27 be ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0014480:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014485:	83 c4 10             	add    esp,0x10
c0014488:	48                   	dec    eax
c0014489:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001448e:	85 c0                	test   eax,eax
c0014490:	75 01                	jne    c0014493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014492:	fb                   	sti    
c0014493:	31 f6                	xor    esi,esi
c0014495:	eb 58                	jmp    c00144ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014497:	0f b7 ed             	movzx  ebp,bp
c001449a:	50                   	push   eax
c001449b:	0f b7 ff             	movzx  edi,di
c001449e:	50                   	push   eax
c001449f:	55                   	push   ebp
c00144a0:	57                   	push   edi
c00144a1:	e8 dc fc ff ff       	call   c0014182 <Vm::realToLinear(unsigned short, unsigned short)>
c00144a6:	5a                   	pop    edx
c00144a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00144a9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00144ad:	51                   	push   ecx
c00144ae:	50                   	push   eax
c00144af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00144b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00144b7:	53                   	push   ebx
c00144b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00144bb:	83 c4 14             	add    esp,0x14
c00144be:	53                   	push   ebx
c00144bf:	e8 28 69 ff ff       	call   c000adec <File::close()>
c00144c4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00144c9:	83 c4 10             	add    esp,0x10
c00144cc:	48                   	dec    eax
c00144cd:	c6 05 65 40 02 c0 00 	mov    BYTE PTR ds:0xc0024065,0x0
c00144d4:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00144d9:	85 c0                	test   eax,eax
c00144db:	75 01                	jne    c00144de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00144dd:	fb                   	sti    
c00144de:	83 ec 0c             	sub    esp,0xc
c00144e1:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c00144e7:	e8 d4 f5 ff ff       	call   c0013ac0 <unblockTask(ThreadControlBlock*)>
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	83 c4 2c             	add    esp,0x2c
c00144f2:	89 f0                	mov    eax,esi
c00144f4:	5b                   	pop    ebx
c00144f5:	5e                   	pop    esi
c00144f6:	5f                   	pop    edi
c00144f7:	5d                   	pop    ebp
c00144f8:	c3                   	ret    

c00144f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00144f9:	57                   	push   edi
c00144fa:	56                   	push   esi
c00144fb:	53                   	push   ebx
c00144fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014504:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014508:	83 e8 06             	sub    eax,0x6
c001450b:	0f b7 c0             	movzx  eax,ax
c001450e:	50                   	push   eax
c001450f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014514:	50                   	push   eax
c0014515:	e8 68 fc ff ff       	call   c0014182 <Vm::realToLinear(unsigned short, unsigned short)>
c001451a:	5a                   	pop    edx
c001451b:	5e                   	pop    esi
c001451c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001451f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014522:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014528:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001452b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001452e:	83 c2 02             	add    edx,0x2
c0014531:	66 89 10             	mov    WORD PTR [eax],dx
c0014534:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014537:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001453b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001453e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014542:	89 d6                	mov    esi,edx
c0014544:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001454a:	66 81 e6 ff fd       	and    si,0xfdff
c001454f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014553:	74 07                	je     c001455c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014555:	89 d6                	mov    esi,edx
c0014557:	66 81 ce 00 02       	or     si,0x200
c001455c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014565:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014569:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014571:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014574:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001457c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001457f:	5b                   	pop    ebx
c0014580:	5e                   	pop    esi
c0014581:	5f                   	pop    edi
c0014582:	c3                   	ret    

c0014583 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014583:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014588:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001458d:	c1 e0 04             	shl    eax,0x4
c0014590:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014593:	c3                   	ret    

c0014594 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014594:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014599:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001459e:	c1 e0 04             	shl    eax,0x4
c00145a1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00145a5:	c3                   	ret    

c00145a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00145a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145b0:	c1 e0 04             	shl    eax,0x4
c00145b3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00145b6:	c3                   	ret    

c00145b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00145b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145c1:	c1 e0 04             	shl    eax,0x4
c00145c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145c8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00145cb:	c3                   	ret    

c00145cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00145cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145d6:	c1 e0 04             	shl    eax,0x4
c00145d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145dd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00145e1:	c3                   	ret    

c00145e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00145e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145ec:	c1 e0 04             	shl    eax,0x4
c00145ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145f3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00145f6:	c3                   	ret    

c00145f7 <Vm::faultHandler(regs*)>:
c00145f7:	55                   	push   ebp
c00145f8:	57                   	push   edi
c00145f9:	56                   	push   esi
c00145fa:	53                   	push   ebx
c00145fb:	83 ec 1c             	sub    esp,0x1c
c00145fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014602:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014605:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014609:	0f b7 f8             	movzx  edi,ax
c001460c:	52                   	push   edx
c001460d:	0f b7 c0             	movzx  eax,ax
c0014610:	50                   	push   eax
c0014611:	e8 6c fb ff ff       	call   c0014182 <Vm::realToLinear(unsigned short, unsigned short)>
c0014616:	5a                   	pop    edx
c0014617:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001461a:	59                   	pop    ecx
c001461b:	89 c1                	mov    ecx,eax
c001461d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014620:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014624:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001462d:	0f b7 c5             	movzx  eax,bp
c0014630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014634:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014638:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001463c:	e8 41 fb ff ff       	call   c0014182 <Vm::realToLinear(unsigned short, unsigned short)>
c0014641:	5e                   	pop    esi
c0014642:	be 06 00 00 00       	mov    esi,0x6
c0014647:	5a                   	pop    edx
c0014648:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001464d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014652:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014655:	80 fa 9d             	cmp    dl,0x9d
c0014658:	0f 84 2c 02 00 00    	je     c001488a <Vm::faultHandler(regs*)+0x293>
c001465e:	0f 87 91 00 00 00    	ja     c00146f5 <Vm::faultHandler(regs*)+0xfe>
c0014664:	80 fa 66             	cmp    dl,0x66
c0014667:	0f 84 98 01 00 00    	je     c0014805 <Vm::faultHandler(regs*)+0x20e>
c001466d:	77 47                	ja     c00146b6 <Vm::faultHandler(regs*)+0xbf>
c001466f:	80 fa 36             	cmp    dl,0x36
c0014672:	0f 84 80 01 00 00    	je     c00147f8 <Vm::faultHandler(regs*)+0x201>
c0014678:	77 1a                	ja     c0014694 <Vm::faultHandler(regs*)+0x9d>
c001467a:	80 fa 26             	cmp    dl,0x26
c001467d:	0f 84 4e 01 00 00    	je     c00147d1 <Vm::faultHandler(regs*)+0x1da>
c0014683:	80 fa 2e             	cmp    dl,0x2e
c0014686:	0f 85 e2 05 00 00    	jne    c0014c6e <Vm::faultHandler(regs*)+0x677>
c001468c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001468f:	31 f6                	xor    esi,esi
c0014691:	41                   	inc    ecx
c0014692:	eb be                	jmp    c0014652 <Vm::faultHandler(regs*)+0x5b>
c0014694:	80 fa 64             	cmp    dl,0x64
c0014697:	0f 84 41 01 00 00    	je     c00147de <Vm::faultHandler(regs*)+0x1e7>
c001469d:	0f 87 48 01 00 00    	ja     c00147eb <Vm::faultHandler(regs*)+0x1f4>
c00146a3:	80 fa 3e             	cmp    dl,0x3e
c00146a6:	0f 85 c2 05 00 00    	jne    c0014c6e <Vm::faultHandler(regs*)+0x677>
c00146ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146af:	be 01 00 00 00       	mov    esi,0x1
c00146b4:	eb db                	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c00146b6:	80 fa 6d             	cmp    dl,0x6d
c00146b9:	0f 84 ec 02 00 00    	je     c00149ab <Vm::faultHandler(regs*)+0x3b4>
c00146bf:	77 17                	ja     c00146d8 <Vm::faultHandler(regs*)+0xe1>
c00146c1:	80 fa 67             	cmp    dl,0x67
c00146c4:	0f 84 48 01 00 00    	je     c0014812 <Vm::faultHandler(regs*)+0x21b>
c00146ca:	80 fa 6c             	cmp    dl,0x6c
c00146cd:	0f 84 69 02 00 00    	je     c001493c <Vm::faultHandler(regs*)+0x345>
c00146d3:	e9 96 05 00 00       	jmp    c0014c6e <Vm::faultHandler(regs*)+0x677>
c00146d8:	80 fa 6f             	cmp    dl,0x6f
c00146db:	0f 84 f4 03 00 00    	je     c0014ad5 <Vm::faultHandler(regs*)+0x4de>
c00146e1:	0f 82 59 03 00 00    	jb     c0014a40 <Vm::faultHandler(regs*)+0x449>
c00146e7:	80 fa 9c             	cmp    dl,0x9c
c00146ea:	0f 84 2f 01 00 00    	je     c001481f <Vm::faultHandler(regs*)+0x228>
c00146f0:	e9 79 05 00 00       	jmp    c0014c6e <Vm::faultHandler(regs*)+0x677>
c00146f5:	80 fa ec             	cmp    dl,0xec
c00146f8:	0f 84 14 05 00 00    	je     c0014c12 <Vm::faultHandler(regs*)+0x61b>
c00146fe:	77 7b                	ja     c001477b <Vm::faultHandler(regs*)+0x184>
c0014700:	80 fa e4             	cmp    dl,0xe4
c0014703:	0f 84 93 04 00 00    	je     c0014b9c <Vm::faultHandler(regs*)+0x5a5>
c0014709:	77 53                	ja     c001475e <Vm::faultHandler(regs*)+0x167>
c001470b:	80 fa cd             	cmp    dl,0xcd
c001470e:	0f 84 d9 01 00 00    	je     c00148ed <Vm::faultHandler(regs*)+0x2f6>
c0014714:	80 fa cf             	cmp    dl,0xcf
c0014717:	0f 85 51 05 00 00    	jne    c0014c6e <Vm::faultHandler(regs*)+0x677>
c001471d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014720:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014723:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014727:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001472a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001472e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014734:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014737:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001473b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014741:	66 c1 e8 09          	shr    ax,0x9
c0014745:	83 e0 01             	and    eax,0x1
c0014748:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001474b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001474e:	83 c0 06             	add    eax,0x6
c0014751:	25 ff ff 00 00       	and    eax,0xffff
c0014756:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014759:	e9 0c 05 00 00       	jmp    c0014c6a <Vm::faultHandler(regs*)+0x673>
c001475e:	80 fa e6             	cmp    dl,0xe6
c0014761:	0f 84 7f 04 00 00    	je     c0014be6 <Vm::faultHandler(regs*)+0x5ef>
c0014767:	0f 82 4b 04 00 00    	jb     c0014bb8 <Vm::faultHandler(regs*)+0x5c1>
c001476d:	80 fa e7             	cmp    dl,0xe7
c0014770:	0f 84 87 04 00 00    	je     c0014bfd <Vm::faultHandler(regs*)+0x606>
c0014776:	e9 f3 04 00 00       	jmp    c0014c6e <Vm::faultHandler(regs*)+0x677>
c001477b:	80 fa ef             	cmp    dl,0xef
c001477e:	0f 84 d1 04 00 00    	je     c0014c55 <Vm::faultHandler(regs*)+0x65e>
c0014784:	77 28                	ja     c00147ae <Vm::faultHandler(regs*)+0x1b7>
c0014786:	80 fa ed             	cmp    dl,0xed
c0014789:	0f 84 9f 04 00 00    	je     c0014c2e <Vm::faultHandler(regs*)+0x637>
c001478f:	80 fa ee             	cmp    dl,0xee
c0014792:	0f 85 d6 04 00 00    	jne    c0014c6e <Vm::faultHandler(regs*)+0x677>
c0014798:	50                   	push   eax
c0014799:	50                   	push   eax
c001479a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001479e:	50                   	push   eax
c001479f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00147a3:	50                   	push   eax
c00147a4:	e8 a3 f9 ff ff       	call   c001414c <Vm::outbv(unsigned short, unsigned char)>
c00147a9:	e9 9f 04 00 00       	jmp    c0014c4d <Vm::faultHandler(regs*)+0x656>
c00147ae:	80 fa fa             	cmp    dl,0xfa
c00147b1:	0f 84 69 01 00 00    	je     c0014920 <Vm::faultHandler(regs*)+0x329>
c00147b7:	80 fa fb             	cmp    dl,0xfb
c00147ba:	0f 84 6e 01 00 00    	je     c001492e <Vm::faultHandler(regs*)+0x337>
c00147c0:	80 fa f3             	cmp    dl,0xf3
c00147c3:	0f 85 a5 04 00 00    	jne    c0014c6e <Vm::faultHandler(regs*)+0x677>
c00147c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147cc:	e9 c0 fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c00147d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147d4:	be 02 00 00 00       	mov    esi,0x2
c00147d9:	e9 b3 fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c00147de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147e1:	be 03 00 00 00       	mov    esi,0x3
c00147e6:	e9 a6 fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c00147eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147ee:	be 04 00 00 00       	mov    esi,0x4
c00147f3:	e9 99 fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c00147f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147fb:	be 05 00 00 00       	mov    esi,0x5
c0014800:	e9 8c fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c0014805:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014808:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001480d:	e9 7f fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c0014812:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014815:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001481a:	e9 72 fe ff ff       	jmp    c0014691 <Vm::faultHandler(regs*)+0x9a>
c001481f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014822:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014826:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001482b:	74 30                	je     c001485d <Vm::faultHandler(regs*)+0x266>
c001482d:	83 e9 04             	sub    ecx,0x4
c0014830:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014836:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001483c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001483f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014842:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014848:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001484c:	0f 84 15 04 00 00    	je     c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014852:	80 ce 02             	or     dh,0x2
c0014855:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014858:	e9 0a 04 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c001485d:	83 e9 02             	sub    ecx,0x2
c0014860:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014866:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014869:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001486d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014873:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014877:	74 05                	je     c001487e <Vm::faultHandler(regs*)+0x287>
c0014879:	80 ce 02             	or     dh,0x2
c001487c:	eb 03                	jmp    c0014881 <Vm::faultHandler(regs*)+0x28a>
c001487e:	80 e6 fd             	and    dh,0xfd
c0014881:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014885:	e9 dd 03 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c001488a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001488f:	74 2a                	je     c00148bb <Vm::faultHandler(regs*)+0x2c4>
c0014891:	8b 10                	mov    edx,DWORD PTR [eax]
c0014893:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014899:	81 ca 00 02 02 00    	or     edx,0x20200
c001489f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00148a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148aa:	c1 e8 09             	shr    eax,0x9
c00148ad:	83 e0 01             	and    eax,0x1
c00148b0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148b3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148b6:	83 c0 04             	add    eax,0x4
c00148b9:	eb 25                	jmp    c00148e0 <Vm::faultHandler(regs*)+0x2e9>
c00148bb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148be:	81 ca 00 02 02 00    	or     edx,0x20200
c00148c4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148c7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00148ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148d0:	66 c1 e8 09          	shr    ax,0x9
c00148d4:	83 e0 01             	and    eax,0x1
c00148d7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148dd:	83 c0 02             	add    eax,0x2
c00148e0:	25 ff ff 00 00       	and    eax,0xffff
c00148e5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148e8:	e9 7a 03 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c00148ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148f1:	3c ee                	cmp    al,0xee
c00148f3:	75 10                	jne    c0014905 <Vm::faultHandler(regs*)+0x30e>
c00148f5:	83 ec 0c             	sub    esp,0xc
c00148f8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148fb:	e8 e9 f8 ff ff       	call   c00141e9 <Vm::mainloop3(unsigned long)>
c0014900:	e9 4b 03 00 00       	jmp    c0014c50 <Vm::faultHandler(regs*)+0x659>
c0014905:	83 ec 0c             	sub    esp,0xc
c0014908:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001490c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014910:	51                   	push   ecx
c0014911:	50                   	push   eax
c0014912:	53                   	push   ebx
c0014913:	e8 e1 fb ff ff       	call   c00144f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014918:	83 c4 20             	add    esp,0x20
c001491b:	e9 4a 03 00 00       	jmp    c0014c6a <Vm::faultHandler(regs*)+0x673>
c0014920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014925:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014929:	e9 39 03 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c001492e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014933:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014937:	e9 2b 03 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c001493c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001493f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014944:	74 2b                	je     c0014971 <Vm::faultHandler(regs*)+0x37a>
c0014946:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001494d:	76 22                	jbe    c0014971 <Vm::faultHandler(regs*)+0x37a>
c001494f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014953:	50                   	push   eax
c0014954:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014958:	50                   	push   eax
c0014959:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001495d:	50                   	push   eax
c001495e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014962:	50                   	push   eax
c0014963:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014967:	50                   	push   eax
c0014968:	6a 6c                	push   0x6c
c001496a:	6a 6c                	push   0x6c
c001496c:	e9 b9 01 00 00       	jmp    c0014b2a <Vm::faultHandler(regs*)+0x533>
c0014971:	83 ec 0c             	sub    esp,0xc
c0014974:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014978:	0f b7 f6             	movzx  esi,si
c001497b:	50                   	push   eax
c001497c:	e8 b8 f7 ff ff       	call   c0014139 <Vm::inbv(unsigned short)>
c0014981:	83 c4 0c             	add    esp,0xc
c0014984:	0f b6 c0             	movzx  eax,al
c0014987:	50                   	push   eax
c0014988:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001498c:	50                   	push   eax
c001498d:	56                   	push   esi
c001498e:	e8 24 fc ff ff       	call   c00145b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014993:	83 c4 10             	add    esp,0x10
c0014996:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014999:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001499d:	74 03                	je     c00149a2 <Vm::faultHandler(regs*)+0x3ab>
c001499f:	48                   	dec    eax
c00149a0:	eb 01                	jmp    c00149a3 <Vm::faultHandler(regs*)+0x3ac>
c00149a2:	40                   	inc    eax
c00149a3:	0f b7 c0             	movzx  eax,ax
c00149a6:	e9 8d 00 00 00       	jmp    c0014a38 <Vm::faultHandler(regs*)+0x441>
c00149ab:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00149ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00149b1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00149b6:	74 29                	je     c00149e1 <Vm::faultHandler(regs*)+0x3ea>
c00149b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00149bd:	76 22                	jbe    c00149e1 <Vm::faultHandler(regs*)+0x3ea>
c00149bf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00149c3:	50                   	push   eax
c00149c4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00149c8:	50                   	push   eax
c00149c9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00149cd:	50                   	push   eax
c00149ce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00149d2:	50                   	push   eax
c00149d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00149d7:	50                   	push   eax
c00149d8:	6a 6d                	push   0x6d
c00149da:	6a 6d                	push   0x6d
c00149dc:	e9 49 01 00 00       	jmp    c0014b2a <Vm::faultHandler(regs*)+0x533>
c00149e1:	0f b7 c8             	movzx  ecx,ax
c00149e4:	0f b7 f6             	movzx  esi,si
c00149e7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149ea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149ef:	74 20                	je     c0014a11 <Vm::faultHandler(regs*)+0x41a>
c00149f1:	ed                   	in     eax,dx
c00149f2:	55                   	push   ebp
c00149f3:	50                   	push   eax
c00149f4:	51                   	push   ecx
c00149f5:	56                   	push   esi
c00149f6:	e8 e7 fb ff ff       	call   c00145e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00149fb:	83 c4 10             	add    esp,0x10
c00149fe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a01:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014a05:	74 05                	je     c0014a0c <Vm::faultHandler(regs*)+0x415>
c0014a07:	83 e8 04             	sub    eax,0x4
c0014a0a:	eb 27                	jmp    c0014a33 <Vm::faultHandler(regs*)+0x43c>
c0014a0c:	83 c0 04             	add    eax,0x4
c0014a0f:	eb 22                	jmp    c0014a33 <Vm::faultHandler(regs*)+0x43c>
c0014a11:	66 ed                	in     ax,dx
c0014a13:	0f b7 c0             	movzx  eax,ax
c0014a16:	57                   	push   edi
c0014a17:	50                   	push   eax
c0014a18:	51                   	push   ecx
c0014a19:	56                   	push   esi
c0014a1a:	e8 ad fb ff ff       	call   c00145cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014a1f:	83 c4 10             	add    esp,0x10
c0014a22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014a29:	74 05                	je     c0014a30 <Vm::faultHandler(regs*)+0x439>
c0014a2b:	83 e8 02             	sub    eax,0x2
c0014a2e:	eb 03                	jmp    c0014a33 <Vm::faultHandler(regs*)+0x43c>
c0014a30:	83 c0 02             	add    eax,0x2
c0014a33:	25 ff ff 00 00       	and    eax,0xffff
c0014a38:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014a3b:	e9 27 02 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014a40:	8d 46 ff             	lea    eax,[esi-0x1]
c0014a43:	3c 05                	cmp    al,0x5
c0014a45:	77 24                	ja     c0014a6b <Vm::faultHandler(regs*)+0x474>
c0014a47:	0f b6 c0             	movzx  eax,al
c0014a4a:	ff 24 85 e0 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1120]
c0014a51:	0f b7 fd             	movzx  edi,bp
c0014a54:	eb 15                	jmp    c0014a6b <Vm::faultHandler(regs*)+0x474>
c0014a56:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014a5a:	eb 0f                	jmp    c0014a6b <Vm::faultHandler(regs*)+0x474>
c0014a5c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014a60:	eb 09                	jmp    c0014a6b <Vm::faultHandler(regs*)+0x474>
c0014a62:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014a66:	eb 03                	jmp    c0014a6b <Vm::faultHandler(regs*)+0x474>
c0014a68:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014a6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014a73:	74 29                	je     c0014a9e <Vm::faultHandler(regs*)+0x4a7>
c0014a75:	3d ff ff 00 00       	cmp    eax,0xffff
c0014a7a:	76 22                	jbe    c0014a9e <Vm::faultHandler(regs*)+0x4a7>
c0014a7c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014a80:	50                   	push   eax
c0014a81:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014a85:	50                   	push   eax
c0014a86:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a8a:	50                   	push   eax
c0014a8b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a8f:	50                   	push   eax
c0014a90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a94:	50                   	push   eax
c0014a95:	6a 6e                	push   0x6e
c0014a97:	6a 6e                	push   0x6e
c0014a99:	e9 8c 00 00 00       	jmp    c0014b2a <Vm::faultHandler(regs*)+0x533>
c0014a9e:	0f b7 c0             	movzx  eax,ax
c0014aa1:	52                   	push   edx
c0014aa2:	52                   	push   edx
c0014aa3:	50                   	push   eax
c0014aa4:	57                   	push   edi
c0014aa5:	e8 d9 fa ff ff       	call   c0014583 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014aaa:	59                   	pop    ecx
c0014aab:	0f b6 c0             	movzx  eax,al
c0014aae:	5e                   	pop    esi
c0014aaf:	50                   	push   eax
c0014ab0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ab4:	50                   	push   eax
c0014ab5:	e8 92 f6 ff ff       	call   c001414c <Vm::outbv(unsigned short, unsigned char)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ac0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ac4:	74 03                	je     c0014ac9 <Vm::faultHandler(regs*)+0x4d2>
c0014ac6:	48                   	dec    eax
c0014ac7:	eb 01                	jmp    c0014aca <Vm::faultHandler(regs*)+0x4d3>
c0014ac9:	40                   	inc    eax
c0014aca:	0f b7 c0             	movzx  eax,ax
c0014acd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014ad0:	e9 92 01 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014ad5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014ad8:	3c 05                	cmp    al,0x5
c0014ada:	77 1f                	ja     c0014afb <Vm::faultHandler(regs*)+0x504>
c0014adc:	0f b6 c0             	movzx  eax,al
c0014adf:	ff 24 85 f8 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1108]
c0014ae6:	89 ef                	mov    edi,ebp
c0014ae8:	eb 11                	jmp    c0014afb <Vm::faultHandler(regs*)+0x504>
c0014aea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014aed:	eb 0c                	jmp    c0014afb <Vm::faultHandler(regs*)+0x504>
c0014aef:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014af2:	eb 07                	jmp    c0014afb <Vm::faultHandler(regs*)+0x504>
c0014af4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014af7:	eb 02                	jmp    c0014afb <Vm::faultHandler(regs*)+0x504>
c0014af9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014afb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014afe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b03:	74 37                	je     c0014b3c <Vm::faultHandler(regs*)+0x545>
c0014b05:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014b0b:	76 2f                	jbe    c0014b3c <Vm::faultHandler(regs*)+0x545>
c0014b0d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b11:	50                   	push   eax
c0014b12:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b16:	50                   	push   eax
c0014b17:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b1b:	50                   	push   eax
c0014b1c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b20:	50                   	push   eax
c0014b21:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b25:	50                   	push   eax
c0014b26:	6a 6f                	push   0x6f
c0014b28:	6a 6f                	push   0x6f
c0014b2a:	68 86 ee 01 c0       	push   0xc001ee86
c0014b2f:	e8 24 5c ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014b34:	83 c4 20             	add    esp,0x20
c0014b37:	e9 86 01 00 00       	jmp    c0014cc2 <Vm::faultHandler(regs*)+0x6cb>
c0014b3c:	0f b7 d7             	movzx  edx,di
c0014b3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014b42:	0f b7 c6             	movzx  eax,si
c0014b45:	81 e1 00 04 00 00    	and    ecx,0x400
c0014b4b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014b4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b53:	74 1d                	je     c0014b72 <Vm::faultHandler(regs*)+0x57b>
c0014b55:	55                   	push   ebp
c0014b56:	55                   	push   ebp
c0014b57:	50                   	push   eax
c0014b58:	52                   	push   edx
c0014b59:	e8 48 fa ff ff       	call   c00145a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	89 fa                	mov    edx,edi
c0014b63:	ef                   	out    dx,eax
c0014b64:	85 c9                	test   ecx,ecx
c0014b66:	74 05                	je     c0014b6d <Vm::faultHandler(regs*)+0x576>
c0014b68:	83 ee 04             	sub    esi,0x4
c0014b6b:	eb 21                	jmp    c0014b8e <Vm::faultHandler(regs*)+0x597>
c0014b6d:	83 c6 04             	add    esi,0x4
c0014b70:	eb 1c                	jmp    c0014b8e <Vm::faultHandler(regs*)+0x597>
c0014b72:	55                   	push   ebp
c0014b73:	55                   	push   ebp
c0014b74:	50                   	push   eax
c0014b75:	52                   	push   edx
c0014b76:	e8 19 fa ff ff       	call   c0014594 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014b7b:	83 c4 10             	add    esp,0x10
c0014b7e:	89 fa                	mov    edx,edi
c0014b80:	66 ef                	out    dx,ax
c0014b82:	85 c9                	test   ecx,ecx
c0014b84:	74 05                	je     c0014b8b <Vm::faultHandler(regs*)+0x594>
c0014b86:	83 ee 02             	sub    esi,0x2
c0014b89:	eb 03                	jmp    c0014b8e <Vm::faultHandler(regs*)+0x597>
c0014b8b:	83 c6 02             	add    esi,0x2
c0014b8e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014b94:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014b97:	e9 cb 00 00 00       	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014b9c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ba3:	83 ec 0c             	sub    esp,0xc
c0014ba6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014baa:	50                   	push   eax
c0014bab:	e8 89 f5 ff ff       	call   c0014139 <Vm::inbv(unsigned short)>
c0014bb0:	0f b6 c0             	movzx  eax,al
c0014bb3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014bb6:	eb 3f                	jmp    c0014bf7 <Vm::faultHandler(regs*)+0x600>
c0014bb8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bbd:	74 07                	je     c0014bc6 <Vm::faultHandler(regs*)+0x5cf>
c0014bbf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014bc3:	ed                   	in     eax,dx
c0014bc4:	eb 14                	jmp    c0014bda <Vm::faultHandler(regs*)+0x5e3>
c0014bc6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014bc9:	66 31 f6             	xor    si,si
c0014bcc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014bcf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014bd3:	66 ed                	in     ax,dx
c0014bd5:	0f b7 c0             	movzx  eax,ax
c0014bd8:	09 f0                	or     eax,esi
c0014bda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014bdd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014be1:	e9 84 00 00 00       	jmp    c0014c6a <Vm::faultHandler(regs*)+0x673>
c0014be6:	52                   	push   edx
c0014be7:	52                   	push   edx
c0014be8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014bec:	50                   	push   eax
c0014bed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bf1:	50                   	push   eax
c0014bf2:	e8 55 f5 ff ff       	call   c001414c <Vm::outbv(unsigned short, unsigned char)>
c0014bf7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014bfb:	eb 53                	jmp    c0014c50 <Vm::faultHandler(regs*)+0x659>
c0014bfd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014c00:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014c04:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c09:	74 03                	je     c0014c0e <Vm::faultHandler(regs*)+0x617>
c0014c0b:	ef                   	out    dx,eax
c0014c0c:	eb cf                	jmp    c0014bdd <Vm::faultHandler(regs*)+0x5e6>
c0014c0e:	66 ef                	out    dx,ax
c0014c10:	eb cb                	jmp    c0014bdd <Vm::faultHandler(regs*)+0x5e6>
c0014c12:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c20:	50                   	push   eax
c0014c21:	e8 13 f5 ff ff       	call   c0014139 <Vm::inbv(unsigned short)>
c0014c26:	0f b6 c0             	movzx  eax,al
c0014c29:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014c2c:	eb 1f                	jmp    c0014c4d <Vm::faultHandler(regs*)+0x656>
c0014c2e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c31:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c36:	74 03                	je     c0014c3b <Vm::faultHandler(regs*)+0x644>
c0014c38:	ed                   	in     eax,dx
c0014c39:	eb 0d                	jmp    c0014c48 <Vm::faultHandler(regs*)+0x651>
c0014c3b:	66 ed                	in     ax,dx
c0014c3d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014c40:	0f b7 c0             	movzx  eax,ax
c0014c43:	66 31 d2             	xor    dx,dx
c0014c46:	09 d0                	or     eax,edx
c0014c48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014c4b:	eb 1a                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014c4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c50:	83 c4 10             	add    esp,0x10
c0014c53:	eb 15                	jmp    c0014c6a <Vm::faultHandler(regs*)+0x673>
c0014c55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014c58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c60:	74 03                	je     c0014c65 <Vm::faultHandler(regs*)+0x66e>
c0014c62:	ef                   	out    dx,eax
c0014c63:	eb 02                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x670>
c0014c65:	66 ef                	out    dx,ax
c0014c67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c6a:	b0 01                	mov    al,0x1
c0014c6c:	eb 56                	jmp    c0014cc4 <Vm::faultHandler(regs*)+0x6cd>
c0014c6e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c72:	50                   	push   eax
c0014c73:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c77:	50                   	push   eax
c0014c78:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c7c:	50                   	push   eax
c0014c7d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c81:	50                   	push   eax
c0014c82:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c86:	50                   	push   eax
c0014c87:	52                   	push   edx
c0014c88:	52                   	push   edx
c0014c89:	68 b3 ee 01 c0       	push   0xc001eeb3
c0014c8e:	e8 c5 5a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014c93:	83 c4 20             	add    esp,0x20
c0014c96:	83 ec 0c             	sub    esp,0xc
c0014c99:	6a 60                	push   0x60
c0014c9b:	e8 99 f4 ff ff       	call   c0014139 <Vm::inbv(unsigned short)>
c0014ca0:	83 c4 10             	add    esp,0x10
c0014ca3:	3c 1c                	cmp    al,0x1c
c0014ca5:	74 04                	je     c0014cab <Vm::faultHandler(regs*)+0x6b4>
c0014ca7:	3c 5a                	cmp    al,0x5a
c0014ca9:	75 eb                	jne    c0014c96 <Vm::faultHandler(regs*)+0x69f>
c0014cab:	3c 5a                	cmp    al,0x5a
c0014cad:	74 04                	je     c0014cb3 <Vm::faultHandler(regs*)+0x6bc>
c0014caf:	3c 1c                	cmp    al,0x1c
c0014cb1:	75 0f                	jne    c0014cc2 <Vm::faultHandler(regs*)+0x6cb>
c0014cb3:	83 ec 0c             	sub    esp,0xc
c0014cb6:	6a 60                	push   0x60
c0014cb8:	e8 7c f4 ff ff       	call   c0014139 <Vm::inbv(unsigned short)>
c0014cbd:	83 c4 10             	add    esp,0x10
c0014cc0:	eb e9                	jmp    c0014cab <Vm::faultHandler(regs*)+0x6b4>
c0014cc2:	31 c0                	xor    eax,eax
c0014cc4:	83 c4 1c             	add    esp,0x1c
c0014cc7:	5b                   	pop    ebx
c0014cc8:	5e                   	pop    esi
c0014cc9:	5f                   	pop    edi
c0014cca:	5d                   	pop    ebp
c0014ccb:	c3                   	ret    

c0014ccc <noCopro(unsigned long)>:
c0014ccc:	c3                   	ret    

c0014ccd <nmiHandler(regs*, void*)>:
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0014cd5:	83 ec 0c             	sub    esp,0xc
c0014cd8:	50                   	push   eax
c0014cd9:	e8 10 25 ff ff       	call   c00071ee <Computer::handleNMI()>
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	90                   	nop
c0014ce2:	83 c4 0c             	add    esp,0xc
c0014ce5:	c3                   	ret    

c0014ce6 <doubleFault(regs*, void*)>:
c0014ce6:	55                   	push   ebp
c0014ce7:	89 e5                	mov    ebp,esp
c0014ce9:	83 ec 08             	sub    esp,0x8
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	68 10 ef 01 c0       	push   0xc001ef10
c0014cf4:	e8 ae b5 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	90                   	nop
c0014cfd:	c9                   	leave  
c0014cfe:	c3                   	ret    

c0014cff <displayDebugInfo(regs*)>:
c0014cff:	83 ec 1c             	sub    esp,0x1c
c0014d02:	0f 20 c0             	mov    eax,cr0
c0014d05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d09:	0f 20 d0             	mov    eax,cr2
c0014d0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d10:	0f 20 d8             	mov    eax,cr3
c0014d13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d17:	0f 20 e0             	mov    eax,cr4
c0014d1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d21:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014d24:	83 ec 08             	sub    esp,0x8
c0014d27:	50                   	push   eax
c0014d28:	68 2c ef 01 c0       	push   0xc001ef2c
c0014d2d:	e8 26 5a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014d32:	83 c4 10             	add    esp,0x10
c0014d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d3c:	83 ec 08             	sub    esp,0x8
c0014d3f:	50                   	push   eax
c0014d40:	68 1d ef 01 c0       	push   0xc001ef1d
c0014d45:	e8 0e 5a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d51:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d54:	83 ec 08             	sub    esp,0x8
c0014d57:	50                   	push   eax
c0014d58:	68 28 ef 01 c0       	push   0xc001ef28
c0014d5d:	e8 f6 59 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6c:	83 ec 08             	sub    esp,0x8
c0014d6f:	50                   	push   eax
c0014d70:	68 37 ef 01 c0       	push   0xc001ef37
c0014d75:	e8 de 59 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d81:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014d84:	83 ec 08             	sub    esp,0x8
c0014d87:	50                   	push   eax
c0014d88:	68 42 ef 01 c0       	push   0xc001ef42
c0014d8d:	e8 c6 59 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	83 ec 08             	sub    esp,0x8
c0014d98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d9c:	68 4d ef 01 c0       	push   0xc001ef4d
c0014da1:	e8 b2 59 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	83 ec 08             	sub    esp,0x8
c0014dac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014db0:	68 58 ef 01 c0       	push   0xc001ef58
c0014db5:	e8 9e 59 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014dc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dc8:	83 ec 0c             	sub    esp,0xc
c0014dcb:	50                   	push   eax
c0014dcc:	e8 28 39 ff ff       	call   c00086f9 <setActiveTerminal(VgaText*)>
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014dd9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ddf:	83 ec 08             	sub    esp,0x8
c0014de2:	68 63 ef 01 c0       	push   0xc001ef63
c0014de7:	50                   	push   eax
c0014de8:	e8 4b 3c ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014df5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dfb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014e00:	8b 12                	mov    edx,DWORD PTR [edx]
c0014e02:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014e05:	83 c2 0c             	add    edx,0xc
c0014e08:	83 ec 08             	sub    esp,0x8
c0014e0b:	52                   	push   edx
c0014e0c:	50                   	push   eax
c0014e0d:	e8 26 3c ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014e1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e20:	83 ec 08             	sub    esp,0x8
c0014e23:	68 6c ef 01 c0       	push   0xc001ef6c
c0014e28:	50                   	push   eax
c0014e29:	e8 0a 3c ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014e2e:	83 c4 10             	add    esp,0x10
c0014e31:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014e36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e40:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014e43:	83 ec 08             	sub    esp,0x8
c0014e46:	52                   	push   edx
c0014e47:	50                   	push   eax
c0014e48:	e8 a5 3b ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014e4d:	83 c4 10             	add    esp,0x10
c0014e50:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014e55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e5b:	83 ec 08             	sub    esp,0x8
c0014e5e:	68 74 ef 01 c0       	push   0xc001ef74
c0014e63:	50                   	push   eax
c0014e64:	e8 cf 3b ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014e69:	83 c4 10             	add    esp,0x10
c0014e6c:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014e71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e7b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014e7e:	83 ec 08             	sub    esp,0x8
c0014e81:	52                   	push   edx
c0014e82:	50                   	push   eax
c0014e83:	e8 6a 3b ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014e90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e96:	83 ec 08             	sub    esp,0x8
c0014e99:	68 7c ef 01 c0       	push   0xc001ef7c
c0014e9e:	50                   	push   eax
c0014e9f:	e8 94 3b ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014ea4:	83 c4 10             	add    esp,0x10
c0014ea7:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014eac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014eb2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014eb6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014eb9:	83 ec 08             	sub    esp,0x8
c0014ebc:	52                   	push   edx
c0014ebd:	50                   	push   eax
c0014ebe:	e8 2f 3b ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014ecb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ed1:	83 ec 08             	sub    esp,0x8
c0014ed4:	68 84 ef 01 c0       	push   0xc001ef84
c0014ed9:	50                   	push   eax
c0014eda:	e8 59 3b ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014edf:	83 c4 10             	add    esp,0x10
c0014ee2:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014ee7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014eed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ef1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ef4:	83 ec 08             	sub    esp,0x8
c0014ef7:	52                   	push   edx
c0014ef8:	50                   	push   eax
c0014ef9:	e8 f4 3a ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f0c:	83 ec 08             	sub    esp,0x8
c0014f0f:	68 8c ef 01 c0       	push   0xc001ef8c
c0014f14:	50                   	push   eax
c0014f15:	e8 1e 3b ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f2c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014f2f:	83 ec 08             	sub    esp,0x8
c0014f32:	52                   	push   edx
c0014f33:	50                   	push   eax
c0014f34:	e8 b9 3a ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f47:	83 ec 08             	sub    esp,0x8
c0014f4a:	68 94 ef 01 c0       	push   0xc001ef94
c0014f4f:	50                   	push   eax
c0014f50:	e8 e3 3a ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f67:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014f6a:	83 ec 08             	sub    esp,0x8
c0014f6d:	52                   	push   edx
c0014f6e:	50                   	push   eax
c0014f6f:	e8 7e 3a ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f82:	83 ec 08             	sub    esp,0x8
c0014f85:	68 9c ef 01 c0       	push   0xc001ef9c
c0014f8a:	50                   	push   eax
c0014f8b:	e8 a8 3a ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014f98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f9e:	83 ec 08             	sub    esp,0x8
c0014fa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fa5:	50                   	push   eax
c0014fa6:	e8 47 3a ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014fab:	83 c4 10             	add    esp,0x10
c0014fae:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014fb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fb9:	83 ec 08             	sub    esp,0x8
c0014fbc:	68 a5 ef 01 c0       	push   0xc001efa5
c0014fc1:	50                   	push   eax
c0014fc2:	e8 71 3a ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014fcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fd5:	83 ec 08             	sub    esp,0x8
c0014fd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fdc:	50                   	push   eax
c0014fdd:	e8 10 3a ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0014fe2:	83 c4 10             	add    esp,0x10
c0014fe5:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0014fea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff0:	83 ec 08             	sub    esp,0x8
c0014ff3:	68 ad ef 01 c0       	push   0xc001efad
c0014ff8:	50                   	push   eax
c0014ff9:	e8 3a 3a ff ff       	call   c0008a38 <VgaText::puts(char const*)>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015006:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001500c:	83 ec 08             	sub    esp,0x8
c001500f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015013:	50                   	push   eax
c0015014:	e8 d9 39 ff ff       	call   c00089f2 <VgaText::putx(unsigned int)>
c0015019:	83 c4 10             	add    esp,0x10
c001501c:	fa                   	cli    
c001501d:	f4                   	hlt    
c001501e:	eb fe                	jmp    c001501e <displayDebugInfo(regs*)+0x31f>

c0015020 <displayProgramFault(char const*)>:
c0015020:	83 ec 0c             	sub    esp,0xc
c0015023:	83 ec 0c             	sub    esp,0xc
c0015026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001502a:	e8 29 57 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015037:	8b 00                	mov    eax,DWORD PTR [eax]
c0015039:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001503c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015042:	85 c0                	test   eax,eax
c0015044:	74 21                	je     c0015067 <displayProgramFault(char const*)+0x47>
c0015046:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001504b:	8b 00                	mov    eax,DWORD PTR [eax]
c001504d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015050:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015056:	6a 04                	push   0x4
c0015058:	6a 0f                	push   0xf
c001505a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001505e:	50                   	push   eax
c001505f:	e8 46 3a ff ff       	call   c0008aaa <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	90                   	nop
c0015068:	83 c4 0c             	add    esp,0xc
c001506b:	c3                   	ret    

c001506c <gpFault(regs*, void*)>:
c001506c:	83 ec 1c             	sub    esp,0x1c
c001506f:	c7 05 b0 40 02 c0 f7 45 01 c0 	mov    DWORD PTR ds:0xc00240b0,0xc00145f7
c0015079:	a1 b0 40 02 c0       	mov    eax,ds:0xc00240b0
c001507e:	85 c0                	test   eax,eax
c0015080:	74 1c                	je     c001509e <gpFault(regs*, void*)+0x32>
c0015082:	a1 b0 40 02 c0       	mov    eax,ds:0xc00240b0
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001508e:	ff d0                	call   eax
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015097:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001509c:	75 2e                	jne    c00150cc <gpFault(regs*, void*)+0x60>
c001509e:	83 ec 0c             	sub    esp,0xc
c00150a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a5:	e8 55 fc ff ff       	call   c0014cff <displayDebugInfo(regs*)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	83 ec 0c             	sub    esp,0xc
c00150b0:	68 b5 ef 01 c0       	push   0xc001efb5
c00150b5:	e8 66 ff ff ff       	call   c0015020 <displayProgramFault(char const*)>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	83 ec 0c             	sub    esp,0xc
c00150c0:	6a 00                	push   0x0
c00150c2:	e8 25 ef ff ff       	call   c0013fec <Thr::terminateFromIRQ(int)>
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	eb 01                	jmp    c00150cd <gpFault(regs*, void*)+0x61>
c00150cc:	90                   	nop
c00150cd:	83 c4 1c             	add    esp,0x1c
c00150d0:	c3                   	ret    

c00150d1 <pgFault(regs*, void*)>:
c00150d1:	83 ec 1c             	sub    esp,0x1c
c00150d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150d8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150db:	0f 20 d0             	mov    eax,cr2
c00150de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00150e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150e6:	83 ec 04             	sub    esp,0x4
c00150e9:	52                   	push   edx
c00150ea:	50                   	push   eax
c00150eb:	68 20 f0 01 c0       	push   0xc001f020
c00150f0:	e8 63 56 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00150fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015102:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015108:	0f 20 d2             	mov    edx,cr2
c001510b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001510f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015113:	83 ec 08             	sub    esp,0x8
c0015116:	52                   	push   edx
c0015117:	50                   	push   eax
c0015118:	e8 6d 52 ff ff       	call   c000a38a <VAS::tryLoadBackOffDisk(unsigned long)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	84 c0                	test   al,al
c0015122:	75 2e                	jne    c0015152 <pgFault(regs*, void*)+0x81>
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001512b:	e8 cf fb ff ff       	call   c0014cff <displayDebugInfo(regs*)>
c0015130:	83 c4 10             	add    esp,0x10
c0015133:	83 ec 0c             	sub    esp,0xc
c0015136:	68 ce ef 01 c0       	push   0xc001efce
c001513b:	e8 e0 fe ff ff       	call   c0015020 <displayProgramFault(char const*)>
c0015140:	83 c4 10             	add    esp,0x10
c0015143:	83 ec 0c             	sub    esp,0xc
c0015146:	6a 00                	push   0x0
c0015148:	e8 9f ee ff ff       	call   c0013fec <Thr::terminateFromIRQ(int)>
c001514d:	83 c4 10             	add    esp,0x10
c0015150:	eb 01                	jmp    c0015153 <pgFault(regs*, void*)+0x82>
c0015152:	90                   	nop
c0015153:	83 c4 1c             	add    esp,0x1c
c0015156:	c3                   	ret    

c0015157 <otherISRHandler(regs*, void*)>:
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	83 ec 0c             	sub    esp,0xc
c001515d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015161:	e8 99 fb ff ff       	call   c0014cff <displayDebugInfo(regs*)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	83 ec 0c             	sub    esp,0xc
c001516c:	68 48 f0 01 c0       	push   0xc001f048
c0015171:	e8 aa fe ff ff       	call   c0015020 <displayProgramFault(char const*)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	83 ec 0c             	sub    esp,0xc
c001517c:	6a 00                	push   0x0
c001517e:	e8 69 ee ff ff       	call   c0013fec <Thr::terminateFromIRQ(int)>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	90                   	nop
c0015187:	83 c4 0c             	add    esp,0xc
c001518a:	c3                   	ret    

c001518b <opcodeFault(regs*, void*)>:
c001518b:	55                   	push   ebp
c001518c:	89 e5                	mov    ebp,esp
c001518e:	83 ec 08             	sub    esp,0x8
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015197:	83 ec 08             	sub    esp,0x8
c001519a:	50                   	push   eax
c001519b:	68 d9 ef 01 c0       	push   0xc001efd9
c00151a0:	e8 b3 55 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00151a5:	83 c4 10             	add    esp,0x10
c00151a8:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c00151ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151b3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00151b9:	84 c0                	test   al,al
c00151bb:	74 21                	je     c00151de <opcodeFault(regs*, void*)+0x53>
c00151bd:	83 ec 0c             	sub    esp,0xc
c00151c0:	68 70 f0 01 c0       	push   0xc001f070
c00151c5:	e8 8e 55 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d3:	8d 50 19             	lea    edx,[eax+0x19]
c00151d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151dc:	eb 2b                	jmp    c0015209 <opcodeFault(regs*, void*)+0x7e>
c00151de:	83 ec 0c             	sub    esp,0xc
c00151e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151e4:	e8 16 fb ff ff       	call   c0014cff <displayDebugInfo(regs*)>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	68 e7 ef 01 c0       	push   0xc001efe7
c00151f4:	e8 27 fe ff ff       	call   c0015020 <displayProgramFault(char const*)>
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	83 ec 0c             	sub    esp,0xc
c00151ff:	6a 00                	push   0x0
c0015201:	e8 e6 ed ff ff       	call   c0013fec <Thr::terminateFromIRQ(int)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	c9                   	leave  
c001520a:	c3                   	ret    

c001520b <i386SaveCoprocessor(void*)>:
c001520b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001520f:	83 c0 3f             	add    eax,0x3f
c0015212:	83 e0 c0             	and    eax,0xffffffc0
c0015215:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015219:	ff 25 ac 40 02 c0    	jmp    DWORD PTR ds:0xc00240ac

c001521f <i386LoadCoprocessor(void*)>:
c001521f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015223:	83 c0 3f             	add    eax,0x3f
c0015226:	83 e0 c0             	and    eax,0xffffffc0
c0015229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001522d:	ff 25 a8 40 02 c0    	jmp    DWORD PTR ds:0xc00240a8

c0015233 <x87EmulHandler(regs*, void*)>:
c0015233:	53                   	push   ebx
c0015234:	83 ec 08             	sub    esp,0x8
c0015237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015240:	74 10                	je     c0015252 <x87EmulHandler(regs*, void*)+0x1f>
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	68 f4 ef 01 c0       	push   0xc001eff4
c001524a:	e8 58 b0 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	0f 20 c0             	mov    eax,cr0
c0015255:	a8 08                	test   al,0x8
c0015257:	74 59                	je     c00152b2 <x87EmulHandler(regs*, void*)+0x7f>
c0015259:	0f 06                	clts   
c001525b:	a1 a4 40 02 c0       	mov    eax,ds:0xc00240a4
c0015260:	85 c0                	test   eax,eax
c0015262:	74 0e                	je     c0015272 <x87EmulHandler(regs*, void*)+0x3f>
c0015264:	83 ec 0c             	sub    esp,0xc
c0015267:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001526a:	e8 9c ff ff ff       	call   c001520b <i386SaveCoprocessor(void*)>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015278:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001527c:	75 12                	jne    c0015290 <x87EmulHandler(regs*, void*)+0x5d>
c001527e:	83 ec 0c             	sub    esp,0xc
c0015281:	68 40 02 00 00       	push   0x240
c0015286:	e8 3e 27 ff ff       	call   c00079c9 <malloc>
c001528b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001528e:	eb 10                	jmp    c00152a0 <x87EmulHandler(regs*, void*)+0x6d>
c0015290:	83 ec 0c             	sub    esp,0xc
c0015293:	a1 a4 40 02 c0       	mov    eax,ds:0xc00240a4
c0015298:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001529b:	e8 7f ff ff ff       	call   c001521f <i386LoadCoprocessor(void*)>
c00152a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	a3 a4 40 02 c0       	mov    ds:0xc00240a4,eax
c00152ad:	83 c4 08             	add    esp,0x8
c00152b0:	5b                   	pop    ebx
c00152b1:	c3                   	ret    
c00152b2:	83 ec 0c             	sub    esp,0xc
c00152b5:	68 08 f0 01 c0       	push   0xc001f008
c00152ba:	e8 99 54 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c00152bf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152c7:	83 c4 18             	add    esp,0x18
c00152ca:	5b                   	pop    ebx
c00152cb:	e9 1c ed ff ff       	jmp    c0013fec <Thr::terminateFromIRQ(int)>

c00152d0 <HalInitialiseCoprocessor()>:
c00152d0:	83 ec 10             	sub    esp,0x10
c00152d3:	c7 05 a4 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240a4,0x0
c00152dd:	6a 00                	push   0x0
c00152df:	68 33 52 01 c0       	push   0xc0015233
c00152e4:	6a 07                	push   0x7
c00152e6:	e8 e1 6d ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152eb:	e8 e0 6a 00 00       	call   c001bdd0 <avxDetect>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	85 c0                	test   eax,eax
c00152f5:	74 1c                	je     c0015313 <HalInitialiseCoprocessor()+0x43>
c00152f7:	c7 05 ac 40 02 c0 fa bd 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001bdfa
c0015301:	c7 05 a8 40 02 c0 0b be 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001be0b
c001530b:	83 c4 0c             	add    esp,0xc
c001530e:	e9 09 6b 00 00       	jmp    c001be1c <avxInit>
c0015313:	e8 38 6d 00 00       	call   c001c050 <absolutelyNoChanceInHell>
c0015318:	85 c0                	test   eax,eax
c001531a:	74 1c                	je     c0015338 <HalInitialiseCoprocessor()+0x68>
c001531c:	c7 05 ac 40 02 c0 68 c0 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001c068
c0015326:	c7 05 a8 40 02 c0 70 c0 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001c070
c0015330:	83 c4 0c             	add    esp,0xc
c0015333:	e9 40 6d 00 00       	jmp    c001c078 <sseInit>
c0015338:	e8 59 6d 00 00       	call   c001c096 <x87Detect>
c001533d:	85 c0                	test   eax,eax
c001533f:	74 1c                	je     c001535d <HalInitialiseCoprocessor()+0x8d>
c0015341:	c7 05 ac 40 02 c0 b1 c0 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001c0b1
c001534b:	c7 05 a8 40 02 c0 b8 c0 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001c0b8
c0015355:	83 c4 0c             	add    esp,0xc
c0015358:	e9 62 6d 00 00       	jmp    c001c0bf <x87Init>
c001535d:	c7 05 ac 40 02 c0 cc 4c 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc0014ccc
c0015367:	c7 05 a8 40 02 c0 cc 4c 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc0014ccc
c0015371:	0f 20 c0             	mov    eax,cr0
c0015374:	83 c8 04             	or     eax,0x4
c0015377:	0f 22 c0             	mov    cr0,eax
c001537a:	83 c4 0c             	add    esp,0xc
c001537d:	c3                   	ret    

c001537e <HalPanic(char const*)>:
c001537e:	e9 24 af ff ff       	jmp    c00102a7 <Krnl::panic(char const*)>

c0015383 <HalQueryPerformanceCounter()>:
c0015383:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0015388:	31 d2                	xor    edx,edx
c001538a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015390:	31 c0                	xor    eax,eax
c0015392:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015399:	74 02                	je     c001539d <HalQueryPerformanceCounter()+0x1a>
c001539b:	0f 31                	rdtsc  
c001539d:	c3                   	ret    

c001539e <HalInitialise()>:
c001539e:	53                   	push   ebx
c001539f:	83 ec 08             	sub    esp,0x8
c00153a2:	e8 58 6f ff ff       	call   c000c2ff <setupINTS()>
c00153a7:	80 3d 00 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023400,0x0
c00153ae:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c00153b3:	75 07                	jne    c00153bc <HalInitialise()+0x1e>
c00153b5:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00153bc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00153c2:	83 e0 01             	and    eax,0x1
c00153c5:	a2 a0 40 02 c0       	mov    ds:0xc00240a0,al
c00153ca:	e8 a9 02 00 00       	call   c0015678 <picOpen()>
c00153cf:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c00153d6:	74 0a                	je     c00153e2 <HalInitialise()+0x44>
c00153d8:	e8 e3 01 00 00       	call   c00155c0 <picDisable()>
c00153dd:	e8 5e 63 00 00       	call   c001b740 <apicOpen()>
c00153e2:	bb 0f 00 00 00       	mov    ebx,0xf
c00153e7:	50                   	push   eax
c00153e8:	6a 00                	push   0x0
c00153ea:	68 57 51 01 c0       	push   0xc0015157
c00153ef:	6a 00                	push   0x0
c00153f1:	e8 d6 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153f6:	83 c4 0c             	add    esp,0xc
c00153f9:	6a 00                	push   0x0
c00153fb:	68 57 51 01 c0       	push   0xc0015157
c0015400:	6a 01                	push   0x1
c0015402:	e8 c5 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015407:	83 c4 0c             	add    esp,0xc
c001540a:	6a 00                	push   0x0
c001540c:	68 cd 4c 01 c0       	push   0xc0014ccd
c0015411:	6a 02                	push   0x2
c0015413:	e8 b4 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015418:	83 c4 0c             	add    esp,0xc
c001541b:	6a 00                	push   0x0
c001541d:	68 57 51 01 c0       	push   0xc0015157
c0015422:	6a 03                	push   0x3
c0015424:	e8 a3 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015429:	83 c4 0c             	add    esp,0xc
c001542c:	6a 00                	push   0x0
c001542e:	68 57 51 01 c0       	push   0xc0015157
c0015433:	6a 04                	push   0x4
c0015435:	e8 92 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001543a:	83 c4 0c             	add    esp,0xc
c001543d:	6a 00                	push   0x0
c001543f:	68 57 51 01 c0       	push   0xc0015157
c0015444:	6a 05                	push   0x5
c0015446:	e8 81 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001544b:	83 c4 0c             	add    esp,0xc
c001544e:	6a 00                	push   0x0
c0015450:	68 8b 51 01 c0       	push   0xc001518b
c0015455:	6a 06                	push   0x6
c0015457:	e8 70 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001545c:	83 c4 0c             	add    esp,0xc
c001545f:	6a 00                	push   0x0
c0015461:	68 e6 4c 01 c0       	push   0xc0014ce6
c0015466:	6a 08                	push   0x8
c0015468:	e8 5f 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001546d:	83 c4 0c             	add    esp,0xc
c0015470:	6a 00                	push   0x0
c0015472:	68 57 51 01 c0       	push   0xc0015157
c0015477:	6a 09                	push   0x9
c0015479:	e8 4e 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001547e:	83 c4 0c             	add    esp,0xc
c0015481:	6a 00                	push   0x0
c0015483:	68 57 51 01 c0       	push   0xc0015157
c0015488:	6a 0a                	push   0xa
c001548a:	e8 3d 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001548f:	83 c4 0c             	add    esp,0xc
c0015492:	6a 00                	push   0x0
c0015494:	68 57 51 01 c0       	push   0xc0015157
c0015499:	6a 0b                	push   0xb
c001549b:	e8 2c 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154a0:	83 c4 0c             	add    esp,0xc
c00154a3:	6a 00                	push   0x0
c00154a5:	68 6c 50 01 c0       	push   0xc001506c
c00154aa:	6a 0d                	push   0xd
c00154ac:	e8 1b 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154b1:	83 c4 0c             	add    esp,0xc
c00154b4:	6a 00                	push   0x0
c00154b6:	68 d1 50 01 c0       	push   0xc00150d1
c00154bb:	6a 0e                	push   0xe
c00154bd:	e8 0a 6c ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154c2:	83 c4 10             	add    esp,0x10
c00154c5:	50                   	push   eax
c00154c6:	6a 00                	push   0x0
c00154c8:	68 57 51 01 c0       	push   0xc0015157
c00154cd:	53                   	push   ebx
c00154ce:	43                   	inc    ebx
c00154cf:	e8 f8 6b ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	83 fb 1e             	cmp    ebx,0x1e
c00154da:	75 e9                	jne    c00154c5 <HalInitialise()+0x127>
c00154dc:	50                   	push   eax
c00154dd:	6a 00                	push   0x0
c00154df:	68 4d 1c 01 c0       	push   0xc0011c4d
c00154e4:	6a 60                	push   0x60
c00154e6:	e8 e1 6b ff ff       	call   c000c0cc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154eb:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c00154f0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00154fa:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015501:	e8 c3 24 ff ff       	call   c00079c9 <malloc>
c0015506:	89 04 24             	mov    DWORD PTR [esp],eax
c0015509:	89 c3                	mov    ebx,eax
c001550b:	e8 30 09 00 00       	call   c0015e40 <RTC::RTC()>
c0015510:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001551a:	5a                   	pop    edx
c001551b:	59                   	pop    ecx
c001551c:	53                   	push   ebx
c001551d:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015523:	e8 70 66 ff ff       	call   c000bb98 <Device::addChild(Device*)>
c0015528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001552a:	6a 00                	push   0x0
c001552c:	6a 00                	push   0x0
c001552e:	6a 00                	push   0x0
c0015530:	53                   	push   ebx
c0015531:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015534:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0015539:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001553f:	83 c4 28             	add    esp,0x28
c0015542:	5b                   	pop    ebx
c0015543:	c3                   	ret    

c0015544 <HalMakeBeep(int)>:
c0015544:	53                   	push   ebx
c0015545:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015549:	85 db                	test   ebx,ebx
c001554b:	75 07                	jne    c0015554 <HalMakeBeep(int)+0x10>
c001554d:	e4 61                	in     al,0x61
c001554f:	83 e0 fc             	and    eax,0xfffffffc
c0015552:	eb 26                	jmp    c001557a <HalMakeBeep(int)+0x36>
c0015554:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015559:	99                   	cdq    
c001555a:	f7 fb                	idiv   ebx
c001555c:	89 c1                	mov    ecx,eax
c001555e:	b0 b6                	mov    al,0xb6
c0015560:	e6 43                	out    0x43,al
c0015562:	88 c8                	mov    al,cl
c0015564:	e6 42                	out    0x42,al
c0015566:	89 c8                	mov    eax,ecx
c0015568:	c1 e8 08             	shr    eax,0x8
c001556b:	e6 42                	out    0x42,al
c001556d:	e4 61                	in     al,0x61
c001556f:	88 c2                	mov    dl,al
c0015571:	83 ca 03             	or     edx,0x3
c0015574:	38 c2                	cmp    dl,al
c0015576:	74 04                	je     c001557c <HalMakeBeep(int)+0x38>
c0015578:	88 d0                	mov    al,dl
c001557a:	e6 61                	out    0x61,al
c001557c:	5b                   	pop    ebx
c001557d:	c3                   	ret    

c001557e <HalGetRand()>:
c001557e:	31 c0                	xor    eax,eax
c0015580:	c3                   	ret    

c0015581 <HalEndOfInterrupt(int)>:
c0015581:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0015588:	74 23                	je     c00155ad <HalEndOfInterrupt(int)+0x2c>
c001558a:	83 ec 14             	sub    esp,0x14
c001558d:	6a 1b                	push   0x1b
c001558f:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015595:	e8 6c 1a ff ff       	call   c0007006 <Computer::rdmsr(unsigned int)>
c001559a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001559f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00155a9:	83 c4 1c             	add    esp,0x1c
c00155ac:	c3                   	ret    
c00155ad:	e9 56 02 00 00       	jmp    c0015808 <picEOI(int)>

c00155b2 <HalRestart()>:
c00155b2:	c3                   	ret    

c00155b3 <HalShutdown()>:
c00155b3:	c3                   	ret    

c00155b4 <HalSleep()>:
c00155b4:	c3                   	ret    
c00155b5:	66 90                	xchg   ax,ax
c00155b7:	90                   	nop

c00155b8 <picIoWait()>:
c00155b8:	eb 00                	jmp    c00155ba <picIoWait()+0x2>
c00155ba:	eb 00                	jmp    c00155bc <picIoWait()+0x4>
c00155bc:	90                   	nop
c00155bd:	c3                   	ret    
c00155be:	66 90                	xchg   ax,ax

c00155c0 <picDisable()>:
c00155c0:	83 ec 10             	sub    esp,0x10
c00155c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00155ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00155cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00155d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00155d8:	ee                   	out    dx,al
c00155d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00155e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00155e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00155e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00155ee:	ee                   	out    dx,al
c00155ef:	90                   	nop
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	c3                   	ret    

c00155f4 <picGetIRQReg(int)>:
c00155f4:	83 ec 10             	sub    esp,0x10
c00155f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00155fb:	25 ff 00 00 00       	and    eax,0xff
c0015600:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015607:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001560b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001560f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015614:	ee                   	out    dx,al
c0015615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015619:	25 ff 00 00 00       	and    eax,0xff
c001561e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015625:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015629:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001562d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015632:	ee                   	out    dx,al
c0015633:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001563a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001563f:	89 c2                	mov    edx,eax
c0015641:	ec                   	in     al,dx
c0015642:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015646:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001564a:	25 ff 00 00 00       	and    eax,0xff
c001564f:	c1 e0 08             	shl    eax,0x8
c0015652:	89 c1                	mov    ecx,eax
c0015654:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001565b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015660:	89 c2                	mov    edx,eax
c0015662:	ec                   	in     al,dx
c0015663:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015667:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001566b:	25 ff 00 00 00       	and    eax,0xff
c0015670:	09 c8                	or     eax,ecx
c0015672:	83 c4 10             	add    esp,0x10
c0015675:	c3                   	ret    
c0015676:	66 90                	xchg   ax,ax

c0015678 <picOpen()>:
c0015678:	83 ec 50             	sub    esp,0x50
c001567b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015682:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015687:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001568b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001568f:	ee                   	out    dx,al
c0015690:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015697:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001569c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00156a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00156a4:	ee                   	out    dx,al
c00156a5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00156ad:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00156b5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00156bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156c0:	89 c2                	mov    edx,eax
c00156c2:	ec                   	in     al,dx
c00156c3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00156c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00156cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00156cf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00156d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156da:	89 c2                	mov    edx,eax
c00156dc:	ec                   	in     al,dx
c00156dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00156e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00156e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00156e9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00156f0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00156f5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00156f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156fd:	ee                   	out    dx,al
c00156fe:	e8 b5 fe ff ff       	call   c00155b8 <picIoWait()>
c0015703:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001570a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001570f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015713:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015717:	ee                   	out    dx,al
c0015718:	e8 9b fe ff ff       	call   c00155b8 <picIoWait()>
c001571d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015721:	25 ff 00 00 00       	and    eax,0xff
c0015726:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001572d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015731:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015735:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015739:	ee                   	out    dx,al
c001573a:	e8 79 fe ff ff       	call   c00155b8 <picIoWait()>
c001573f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015743:	25 ff 00 00 00       	and    eax,0xff
c0015748:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001574f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015753:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015757:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001575b:	ee                   	out    dx,al
c001575c:	e8 57 fe ff ff       	call   c00155b8 <picIoWait()>
c0015761:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015768:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001576d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015771:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015775:	ee                   	out    dx,al
c0015776:	e8 3d fe ff ff       	call   c00155b8 <picIoWait()>
c001577b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015782:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015787:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001578b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001578f:	ee                   	out    dx,al
c0015790:	e8 23 fe ff ff       	call   c00155b8 <picIoWait()>
c0015795:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001579c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00157a1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00157a5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00157a9:	ee                   	out    dx,al
c00157aa:	e8 09 fe ff ff       	call   c00155b8 <picIoWait()>
c00157af:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00157b6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00157bb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00157bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00157c3:	ee                   	out    dx,al
c00157c4:	e8 ef fd ff ff       	call   c00155b8 <picIoWait()>
c00157c9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c00157cd:	25 ff 00 00 00       	and    eax,0xff
c00157d2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00157d9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00157dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00157e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00157e5:	ee                   	out    dx,al
c00157e6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00157ea:	25 ff 00 00 00       	and    eax,0xff
c00157ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00157f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00157fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00157fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015802:	ee                   	out    dx,al
c0015803:	90                   	nop
c0015804:	83 c4 50             	add    esp,0x50
c0015807:	c3                   	ret    

c0015808 <picEOI(int)>:
c0015808:	83 ec 10             	sub    esp,0x10
c001580b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015810:	75 22                	jne    c0015834 <picEOI(int)+0x2c>
c0015812:	6a 0b                	push   0xb
c0015814:	e8 db fd ff ff       	call   c00155f4 <picGetIRQReg(int)>
c0015819:	83 c4 04             	add    esp,0x4
c001581c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015821:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015826:	25 ff ff 00 00       	and    eax,0xffff
c001582b:	25 80 00 00 00       	and    eax,0x80
c0015830:	74 72                	je     c00158a4 <picEOI(int)+0x9c>
c0015832:	66 90                	xchg   ax,ax
c0015834:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015839:	75 31                	jne    c001586c <picEOI(int)+0x64>
c001583b:	6a 0b                	push   0xb
c001583d:	e8 b2 fd ff ff       	call   c00155f4 <picGetIRQReg(int)>
c0015842:	83 c4 04             	add    esp,0x4
c0015845:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001584e:	66 85 c0             	test   ax,ax
c0015851:	78 19                	js     c001586c <picEOI(int)+0x64>
c0015853:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001585a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001585f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015863:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015868:	ee                   	out    dx,al
c0015869:	eb 3d                	jmp    c00158a8 <picEOI(int)+0xa0>
c001586b:	90                   	nop
c001586c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015871:	7e 19                	jle    c001588c <picEOI(int)+0x84>
c0015873:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001587a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001587f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015883:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015888:	ee                   	out    dx,al
c0015889:	8d 76 00             	lea    esi,[esi+0x0]
c001588c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015893:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015898:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001589c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00158a1:	ee                   	out    dx,al
c00158a2:	eb 04                	jmp    c00158a8 <picEOI(int)+0xa0>
c00158a4:	90                   	nop
c00158a5:	8d 76 00             	lea    esi,[esi+0x0]
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	c3                   	ret    

c00158ac <RTC::open(int, int, void*)>:
c00158ac:	31 c0                	xor    eax,eax
c00158ae:	c3                   	ret    
c00158af:	90                   	nop

c00158b0 <RTC::close(int, int, void*)>:
c00158b0:	31 c0                	xor    eax,eax
c00158b2:	c3                   	ret    
c00158b3:	90                   	nop

c00158b4 <RTC::timeInSecondsUTC()>:
c00158b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00158be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158c4:	c3                   	ret    
c00158c5:	90                   	nop

c00158c6 <RTC::timeInDatetimeUTC()>:
c00158c6:	53                   	push   ebx
c00158c7:	83 ec 14             	sub    esp,0x14
c00158ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00158ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00158d4:	50                   	push   eax
c00158d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00158d8:	83 c4 0c             	add    esp,0xc
c00158db:	52                   	push   edx
c00158dc:	50                   	push   eax
c00158dd:	53                   	push   ebx
c00158de:	e8 29 60 ff ff       	call   c000b90c <secondsToDatetime(unsigned long long)>
c00158e3:	89 d8                	mov    eax,ebx
c00158e5:	83 c4 14             	add    esp,0x14
c00158e8:	5b                   	pop    ebx
c00158e9:	c2 04 00             	ret    0x4

c00158ec <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00158ec:	56                   	push   esi
c00158ed:	53                   	push   ebx
c00158ee:	83 ec 14             	sub    esp,0x14
c00158f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158f7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00158fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00158fe:	52                   	push   edx
c00158ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015907:	50                   	push   eax
c0015908:	e8 ff 5f ff ff       	call   c000b90c <secondsToDatetime(unsigned long long)>
c001590d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015911:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015915:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015919:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001591d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015921:	89 f0                	mov    eax,esi
c0015923:	83 c4 20             	add    esp,0x20
c0015926:	5b                   	pop    ebx
c0015927:	5e                   	pop    esi
c0015928:	ff e0                	jmp    eax

c001592a <RTC::~RTC()>:
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c0015932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015936:	89 10                	mov    DWORD PTR [eax],edx
c0015938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	50                   	push   eax
c0015940:	e8 4b 5d ff ff       	call   c000b690 <Clock::~Clock()>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	90                   	nop
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	c3                   	ret    
c001594d:	90                   	nop

c001594e <RTC::~RTC()>:
c001594e:	83 ec 0c             	sub    esp,0xc
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015958:	e8 cd ff ff ff       	call   c001592a <RTC::~RTC()>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	83 ec 08             	sub    esp,0x8
c0015963:	68 60 01 00 00       	push   0x160
c0015968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596c:	e8 f1 4c ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	83 c4 0c             	add    esp,0xc
c0015977:	c3                   	ret    

c0015978 <RTC::get_update_in_progress_flag()>:
c0015978:	83 ec 14             	sub    esp,0x14
c001597b:	6a 0a                	push   0xa
c001597d:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015983:	e8 32 17 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015988:	83 c4 1c             	add    esp,0x1c
c001598b:	c0 e8 07             	shr    al,0x7
c001598e:	c3                   	ret    
c001598f:	90                   	nop

c0015990 <RTC::completeRTCRefresh()>:
c0015990:	55                   	push   ebp
c0015991:	57                   	push   edi
c0015992:	56                   	push   esi
c0015993:	53                   	push   ebx
c0015994:	83 ec 2c             	sub    esp,0x2c
c0015997:	8b 1d 0c 31 02 c0    	mov    ebx,DWORD PTR ds:0xc002310c
c001599d:	83 ec 0c             	sub    esp,0xc
c00159a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00159a4:	e8 cf ff ff ff       	call   c0015978 <RTC::get_update_in_progress_flag()>
c00159a9:	83 c4 10             	add    esp,0x10
c00159ac:	84 c0                	test   al,al
c00159ae:	74 0e                	je     c00159be <RTC::completeRTCRefresh()+0x2e>
c00159b0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00159b6:	3b 05 0c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002310c
c00159bc:	73 df                	jae    c001599d <RTC::completeRTCRefresh()+0xd>
c00159be:	55                   	push   ebp
c00159bf:	55                   	push   ebp
c00159c0:	6a 00                	push   0x0
c00159c2:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c00159c8:	e8 ed 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c00159cd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00159d1:	58                   	pop    eax
c00159d2:	5a                   	pop    edx
c00159d3:	6a 02                	push   0x2
c00159d5:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c00159db:	e8 da 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c00159e0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00159e4:	59                   	pop    ecx
c00159e5:	5b                   	pop    ebx
c00159e6:	6a 04                	push   0x4
c00159e8:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c00159ee:	e8 c7 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c00159f3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00159f7:	5e                   	pop    esi
c00159f8:	5f                   	pop    edi
c00159f9:	6a 07                	push   0x7
c00159fb:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a01:	e8 b4 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a06:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015a0a:	5d                   	pop    ebp
c0015a0b:	58                   	pop    eax
c0015a0c:	6a 08                	push   0x8
c0015a0e:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a14:	e8 a1 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a19:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015a1d:	58                   	pop    eax
c0015a1e:	5a                   	pop    edx
c0015a1f:	6a 09                	push   0x9
c0015a21:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a27:	e8 8e 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	0f b6 e8             	movzx  ebp,al
c0015a32:	8b 1d 0c 31 02 c0    	mov    ebx,DWORD PTR ds:0xc002310c
c0015a38:	83 ec 0c             	sub    esp,0xc
c0015a3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015a3f:	e8 34 ff ff ff       	call   c0015978 <RTC::get_update_in_progress_flag()>
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	84 c0                	test   al,al
c0015a49:	74 0e                	je     c0015a59 <RTC::completeRTCRefresh()+0xc9>
c0015a4b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015a51:	3b 05 0c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002310c
c0015a57:	73 df                	jae    c0015a38 <RTC::completeRTCRefresh()+0xa8>
c0015a59:	50                   	push   eax
c0015a5a:	50                   	push   eax
c0015a5b:	6a 00                	push   0x0
c0015a5d:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a63:	e8 52 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a68:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015a6c:	58                   	pop    eax
c0015a6d:	5a                   	pop    edx
c0015a6e:	6a 02                	push   0x2
c0015a70:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a76:	e8 3f 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a7b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015a7f:	59                   	pop    ecx
c0015a80:	5b                   	pop    ebx
c0015a81:	6a 04                	push   0x4
c0015a83:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a89:	e8 2c 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a8e:	5e                   	pop    esi
c0015a8f:	88 c3                	mov    bl,al
c0015a91:	5f                   	pop    edi
c0015a92:	6a 07                	push   0x7
c0015a94:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015a9a:	e8 1b 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015a9f:	89 c6                	mov    esi,eax
c0015aa1:	58                   	pop    eax
c0015aa2:	5a                   	pop    edx
c0015aa3:	6a 08                	push   0x8
c0015aa5:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015aab:	e8 0a 16 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015ab0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015ab4:	59                   	pop    ecx
c0015ab5:	5f                   	pop    edi
c0015ab6:	6a 09                	push   0x9
c0015ab8:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015abe:	e8 f7 15 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015ac3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015ac7:	0f b6 f8             	movzx  edi,al
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015ad1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ad5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015ad9:	89 f1                	mov    ecx,esi
c0015adb:	0f 94 c0             	sete   al
c0015ade:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015ae2:	0f 94 c2             	sete   dl
c0015ae5:	21 d0                	and    eax,edx
c0015ae7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015aeb:	0f 94 c2             	sete   dl
c0015aee:	21 c2                	and    edx,eax
c0015af0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015af4:	0f 94 c0             	sete   al
c0015af7:	21 d0                	and    eax,edx
c0015af9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015afd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015b01:	0f 94 c1             	sete   cl
c0015b04:	84 c8                	test   al,cl
c0015b06:	75 29                	jne    c0015b31 <RTC::completeRTCRefresh()+0x1a1>
c0015b08:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015b0c:	89 fd                	mov    ebp,edi
c0015b0e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015b12:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015b16:	89 f0                	mov    eax,esi
c0015b18:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015b1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015b20:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015b24:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015b28:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b2c:	e9 01 ff ff ff       	jmp    c0015a32 <RTC::completeRTCRefresh()+0xa2>
c0015b31:	39 fd                	cmp    ebp,edi
c0015b33:	75 d3                	jne    c0015b08 <RTC::completeRTCRefresh()+0x178>
c0015b35:	55                   	push   ebp
c0015b36:	55                   	push   ebp
c0015b37:	6a 0b                	push   0xb
c0015b39:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015b3f:	e8 76 15 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	89 c5                	mov    ebp,eax
c0015b49:	a8 04                	test   al,0x4
c0015b4b:	75 78                	jne    c0015bc5 <RTC::completeRTCRefresh()+0x235>
c0015b4d:	b1 0a                	mov    cl,0xa
c0015b4f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015b53:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015b57:	83 e2 0f             	and    edx,0xf
c0015b5a:	c0 e8 04             	shr    al,0x4
c0015b5d:	c1 ef 04             	shr    edi,0x4
c0015b60:	f6 e1                	mul    cl
c0015b62:	6b ff 0a             	imul   edi,edi,0xa
c0015b65:	01 d0                	add    eax,edx
c0015b67:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015b6b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015b6f:	83 e2 0f             	and    edx,0xf
c0015b72:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015b76:	c0 e8 04             	shr    al,0x4
c0015b79:	f6 e1                	mul    cl
c0015b7b:	01 d0                	add    eax,edx
c0015b7d:	88 da                	mov    dl,bl
c0015b7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015b83:	83 e2 0f             	and    edx,0xf
c0015b86:	88 d8                	mov    al,bl
c0015b88:	83 e3 80             	and    ebx,0xffffff80
c0015b8b:	c0 e8 04             	shr    al,0x4
c0015b8e:	83 e0 07             	and    eax,0x7
c0015b91:	f6 e1                	mul    cl
c0015b93:	01 d0                	add    eax,edx
c0015b95:	89 f2                	mov    edx,esi
c0015b97:	09 c3                	or     ebx,eax
c0015b99:	83 e2 0f             	and    edx,0xf
c0015b9c:	89 f0                	mov    eax,esi
c0015b9e:	c0 e8 04             	shr    al,0x4
c0015ba1:	f6 e1                	mul    cl
c0015ba3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ba6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015baa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015bae:	83 e2 0f             	and    edx,0xf
c0015bb1:	c0 e8 04             	shr    al,0x4
c0015bb4:	f6 e1                	mul    cl
c0015bb6:	01 d0                	add    eax,edx
c0015bb8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bc0:	83 e0 0f             	and    eax,0xf
c0015bc3:	01 c7                	add    edi,eax
c0015bc5:	83 e5 02             	and    ebp,0x2
c0015bc8:	75 14                	jne    c0015bde <RTC::completeRTCRefresh()+0x24e>
c0015bca:	84 db                	test   bl,bl
c0015bcc:	79 10                	jns    c0015bde <RTC::completeRTCRefresh()+0x24e>
c0015bce:	83 e3 7f             	and    ebx,0x7f
c0015bd1:	b9 18 00 00 00       	mov    ecx,0x18
c0015bd6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015bd9:	99                   	cdq    
c0015bda:	f7 f9                	idiv   ecx
c0015bdc:	88 d3                	mov    bl,dl
c0015bde:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015be4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015bea:	77 06                	ja     c0015bf2 <RTC::completeRTCRefresh()+0x262>
c0015bec:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015bf2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015bf7:	31 d2                	xor    edx,edx
c0015bf9:	c1 e1 10             	shl    ecx,0x10
c0015bfc:	89 d7                	mov    edi,edx
c0015bfe:	c1 e5 10             	shl    ebp,0x10
c0015c01:	31 c0                	xor    eax,eax
c0015c03:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015c09:	09 cf                	or     edi,ecx
c0015c0b:	89 fa                	mov    edx,edi
c0015c0d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015c11:	88 da                	mov    dl,bl
c0015c13:	89 f3                	mov    ebx,esi
c0015c15:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015c19:	88 d8                	mov    al,bl
c0015c1b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015c1f:	0f b7 c8             	movzx  ecx,ax
c0015c22:	09 e9                	or     ecx,ebp
c0015c24:	89 c8                	mov    eax,ecx
c0015c26:	51                   	push   ecx
c0015c27:	51                   	push   ecx
c0015c28:	52                   	push   edx
c0015c29:	50                   	push   eax
c0015c2a:	e8 50 5b ff ff       	call   c000b77f <datetimeToSeconds(datetime_t)>
c0015c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015c33:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015c39:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015c3f:	83 c4 3c             	add    esp,0x3c
c0015c42:	5b                   	pop    ebx
c0015c43:	5e                   	pop    esi
c0015c44:	5f                   	pop    edi
c0015c45:	5d                   	pop    ebp
c0015c46:	c3                   	ret    
c0015c47:	90                   	nop

c0015c48 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015c48:	55                   	push   ebp
c0015c49:	57                   	push   edi
c0015c4a:	56                   	push   esi
c0015c4b:	53                   	push   ebx
c0015c4c:	83 ec 30             	sub    esp,0x30
c0015c4f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015c53:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015c57:	6a 00                	push   0x0
c0015c59:	6a 00                	push   0x0
c0015c5b:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015c61:	e8 6a 15 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c66:	83 c4 0c             	add    esp,0xc
c0015c69:	6a 00                	push   0x0
c0015c6b:	6a 02                	push   0x2
c0015c6d:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015c73:	e8 58 15 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c78:	31 d2                	xor    edx,edx
c0015c7a:	89 f9                	mov    ecx,edi
c0015c7c:	89 f8                	mov    eax,edi
c0015c7e:	c1 e9 10             	shr    ecx,0x10
c0015c81:	0f b6 c4             	movzx  eax,ah
c0015c84:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015c88:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015c8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c90:	b9 64 00 00 00       	mov    ecx,0x64
c0015c95:	89 f0                	mov    eax,esi
c0015c97:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015c9b:	89 f0                	mov    eax,esi
c0015c9d:	0f b6 c4             	movzx  eax,ah
c0015ca0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ca4:	89 f0                	mov    eax,esi
c0015ca6:	c1 e8 10             	shr    eax,0x10
c0015ca9:	66 f7 f1             	div    cx
c0015cac:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015cb1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015cb6:	59                   	pop    ecx
c0015cb7:	5b                   	pop    ebx
c0015cb8:	89 fb                	mov    ebx,edi
c0015cba:	6a 0b                	push   0xb
c0015cbc:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015cc2:	e8 f3 13 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015cc7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015cd3:	75 74                	jne    c0015d49 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015cd5:	b2 0a                	mov    dl,0xa
c0015cd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015cdb:	0f b6 c1             	movzx  eax,cl
c0015cde:	f6 f2                	div    dl
c0015ce0:	88 c3                	mov    bl,al
c0015ce2:	88 e0                	mov    al,ah
c0015ce4:	c1 e3 04             	shl    ebx,0x4
c0015ce7:	09 c3                	or     ebx,eax
c0015ce9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cee:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015cf2:	f6 f2                	div    dl
c0015cf4:	88 c1                	mov    cl,al
c0015cf6:	88 e0                	mov    al,ah
c0015cf8:	c1 e1 04             	shl    ecx,0x4
c0015cfb:	09 c1                	or     ecx,eax
c0015cfd:	89 f8                	mov    eax,edi
c0015cff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015d03:	0f b6 c0             	movzx  eax,al
c0015d06:	f6 f2                	div    dl
c0015d08:	88 c3                	mov    bl,al
c0015d0a:	88 e0                	mov    al,ah
c0015d0c:	c1 e3 04             	shl    ebx,0x4
c0015d0f:	09 c3                	or     ebx,eax
c0015d11:	89 f0                	mov    eax,esi
c0015d13:	0f b6 c0             	movzx  eax,al
c0015d16:	f6 f2                	div    dl
c0015d18:	88 c1                	mov    cl,al
c0015d1a:	88 e0                	mov    al,ah
c0015d1c:	c1 e1 04             	shl    ecx,0x4
c0015d1f:	09 c1                	or     ecx,eax
c0015d21:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015d26:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015d2a:	f6 f2                	div    dl
c0015d2c:	88 c1                	mov    cl,al
c0015d2e:	88 e0                	mov    al,ah
c0015d30:	c1 e1 04             	shl    ecx,0x4
c0015d33:	09 c1                	or     ecx,eax
c0015d35:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015d3a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015d3e:	f6 f2                	div    dl
c0015d40:	89 c5                	mov    ebp,eax
c0015d42:	88 e0                	mov    al,ah
c0015d44:	c1 e5 04             	shl    ebp,0x4
c0015d47:	09 c5                	or     ebp,eax
c0015d49:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015d4e:	75 17                	jne    c0015d67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d50:	80 fb 0b             	cmp    bl,0xb
c0015d53:	76 0c                	jbe    c0015d61 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015d55:	80 eb 0c             	sub    bl,0xc
c0015d58:	75 02                	jne    c0015d5c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015d5a:	b3 0c                	mov    bl,0xc
c0015d5c:	83 cb 80             	or     ebx,0xffffff80
c0015d5f:	eb 06                	jmp    c0015d67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d61:	84 db                	test   bl,bl
c0015d63:	75 02                	jne    c0015d67 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d65:	b3 0c                	mov    bl,0xc
c0015d67:	0f b6 db             	movzx  ebx,bl
c0015d6a:	50                   	push   eax
c0015d6b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015d70:	50                   	push   eax
c0015d71:	6a 00                	push   0x0
c0015d73:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015d79:	e8 52 14 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d7e:	83 c4 0c             	add    esp,0xc
c0015d81:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015d86:	50                   	push   eax
c0015d87:	6a 02                	push   0x2
c0015d89:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015d8f:	e8 3c 14 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d94:	83 c4 0c             	add    esp,0xc
c0015d97:	53                   	push   ebx
c0015d98:	6a 04                	push   0x4
c0015d9a:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015da0:	e8 2b 14 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015da5:	83 c4 0c             	add    esp,0xc
c0015da8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015dad:	50                   	push   eax
c0015dae:	6a 07                	push   0x7
c0015db0:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015db6:	e8 15 14 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015dbb:	83 c4 0c             	add    esp,0xc
c0015dbe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015dc3:	50                   	push   eax
c0015dc4:	6a 08                	push   0x8
c0015dc6:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015dcc:	e8 ff 13 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	89 e8                	mov    eax,ebp
c0015dd6:	0f b6 e8             	movzx  ebp,al
c0015dd9:	55                   	push   ebp
c0015dda:	6a 09                	push   0x9
c0015ddc:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015de2:	e8 e9 13 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015de7:	5a                   	pop    edx
c0015de8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015dec:	e8 9f fb ff ff       	call   c0015990 <RTC::completeRTCRefresh()>
c0015df1:	83 c4 3c             	add    esp,0x3c
c0015df4:	b0 01                	mov    al,0x1
c0015df6:	5b                   	pop    ebx
c0015df7:	5e                   	pop    esi
c0015df8:	5f                   	pop    edi
c0015df9:	5d                   	pop    ebp
c0015dfa:	c3                   	ret    

c0015dfb <rtcIRQHandler(regs*, void*)>:
c0015dfb:	53                   	push   ebx
c0015dfc:	83 ec 10             	sub    esp,0x10
c0015dff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015e03:	6a 0c                	push   0xc
c0015e05:	ff 35 48 0b 02 c0    	push   DWORD PTR ds:0xc0020b48
c0015e0b:	e8 aa 12 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015e10:	83 c4 10             	add    esp,0x10
c0015e13:	84 c0                	test   al,al
c0015e15:	79 24                	jns    c0015e3b <rtcIRQHandler(regs*, void*)+0x40>
c0015e17:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015e1e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015e25:	66 ff 05 b4 40 02 c0 	inc    WORD PTR ds:0xc00240b4
c0015e2c:	75 0d                	jne    c0015e3b <rtcIRQHandler(regs*, void*)+0x40>
c0015e2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015e32:	83 c4 08             	add    esp,0x8
c0015e35:	5b                   	pop    ebx
c0015e36:	e9 55 fb ff ff       	jmp    c0015990 <RTC::completeRTCRefresh()>
c0015e3b:	83 c4 08             	add    esp,0x8
c0015e3e:	5b                   	pop    ebx
c0015e3f:	c3                   	ret    

c0015e40 <RTC::RTC()>:
c0015e40:	83 ec 1c             	sub    esp,0x1c
c0015e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e47:	83 ec 08             	sub    esp,0x8
c0015e4a:	68 93 f0 01 c0       	push   0xc001f093
c0015e4f:	50                   	push   eax
c0015e50:	e8 05 58 ff ff       	call   c000b65a <Clock::Clock(char const*)>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c0015e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e61:	89 10                	mov    DWORD PTR [eax],edx
c0015e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e67:	83 ec 0c             	sub    esp,0xc
c0015e6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e6e:	6a 01                	push   0x1
c0015e70:	68 fb 5d 01 c0       	push   0xc0015dfb
c0015e75:	6a 08                	push   0x8
c0015e77:	50                   	push   eax
c0015e78:	e8 c7 5c ff ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015e7d:	83 c4 20             	add    esp,0x20
c0015e80:	89 c2                	mov    edx,eax
c0015e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e86:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015e8c:	fa                   	cli    
c0015e8d:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0015e92:	40                   	inc    eax
c0015e93:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0015e98:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0015e9d:	83 ec 08             	sub    esp,0x8
c0015ea0:	6a 0b                	push   0xb
c0015ea2:	50                   	push   eax
c0015ea3:	e8 12 12 ff ff       	call   c00070ba <Computer::readCMOS(unsigned char)>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015eaf:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c0015eb4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015eb8:	83 ca 10             	or     edx,0x10
c0015ebb:	81 e2 ff 00 00 00    	and    edx,0xff
c0015ec1:	83 ec 04             	sub    esp,0x4
c0015ec4:	52                   	push   edx
c0015ec5:	6a 0b                	push   0xb
c0015ec7:	50                   	push   eax
c0015ec8:	e8 03 13 ff ff       	call   c00071d0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ed7:	e8 b4 fa ff ff       	call   c0015990 <RTC::completeRTCRefresh()>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0015ee4:	48                   	dec    eax
c0015ee5:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0015eea:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0015eef:	85 c0                	test   eax,eax
c0015ef1:	75 01                	jne    c0015ef4 <RTC::RTC()+0xb4>
c0015ef3:	fb                   	sti    
c0015ef4:	90                   	nop
c0015ef5:	83 c4 1c             	add    esp,0x1c
c0015ef8:	c3                   	ret    
c0015ef9:	66 90                	xchg   ax,ax
c0015efb:	90                   	nop

c0015efc <HalConsoleScroll(int, int)>:
c0015efc:	83 ec 10             	sub    esp,0x10
c0015eff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015f07:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015f0f:	90                   	nop
c0015f10:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015f15:	0f 8f e1 00 00 00    	jg     c0015ffc <HalConsoleScroll(int, int)+0x100>
c0015f1b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015f23:	90                   	nop
c0015f24:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015f2c:	0f 8f be 00 00 00    	jg     c0015ff0 <HalConsoleScroll(int, int)+0xf4>
c0015f32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f36:	89 d0                	mov    eax,edx
c0015f38:	c1 e0 02             	shl    eax,0x2
c0015f3b:	01 d0                	add    eax,edx
c0015f3d:	c1 e0 05             	shl    eax,0x5
c0015f40:	89 c2                	mov    edx,eax
c0015f42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f46:	01 d0                	add    eax,edx
c0015f48:	89 c2                	mov    edx,eax
c0015f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015f51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f55:	89 d0                	mov    eax,edx
c0015f57:	c1 e0 02             	shl    eax,0x2
c0015f5a:	01 d0                	add    eax,edx
c0015f5c:	c1 e0 05             	shl    eax,0x5
c0015f5f:	89 c2                	mov    edx,eax
c0015f61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f65:	01 d0                	add    eax,edx
c0015f67:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f71:	01 c2                	add    edx,eax
c0015f73:	8a 01                	mov    al,BYTE PTR [ecx]
c0015f75:	88 02                	mov    BYTE PTR [edx],al
c0015f77:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015f7c:	75 66                	jne    c0015fe4 <HalConsoleScroll(int, int)+0xe8>
c0015f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f82:	83 e0 01             	and    eax,0x1
c0015f85:	74 39                	je     c0015fc0 <HalConsoleScroll(int, int)+0xc4>
c0015f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f8b:	83 e0 0f             	and    eax,0xf
c0015f8e:	88 c2                	mov    dl,al
c0015f90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f94:	c1 e0 04             	shl    eax,0x4
c0015f97:	88 d1                	mov    cl,dl
c0015f99:	09 c1                	or     ecx,eax
c0015f9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f9f:	89 d0                	mov    eax,edx
c0015fa1:	c1 e0 02             	shl    eax,0x2
c0015fa4:	01 d0                	add    eax,edx
c0015fa6:	c1 e0 05             	shl    eax,0x5
c0015fa9:	89 c2                	mov    edx,eax
c0015fab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015faf:	01 d0                	add    eax,edx
c0015fb1:	89 c2                	mov    edx,eax
c0015fb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fb7:	01 d0                	add    eax,edx
c0015fb9:	88 ca                	mov    dl,cl
c0015fbb:	88 10                	mov    BYTE PTR [eax],dl
c0015fbd:	eb 25                	jmp    c0015fe4 <HalConsoleScroll(int, int)+0xe8>
c0015fbf:	90                   	nop
c0015fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fc4:	89 d0                	mov    eax,edx
c0015fc6:	c1 e0 02             	shl    eax,0x2
c0015fc9:	01 d0                	add    eax,edx
c0015fcb:	c1 e0 05             	shl    eax,0x5
c0015fce:	89 c2                	mov    edx,eax
c0015fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fd4:	01 d0                	add    eax,edx
c0015fd6:	89 c2                	mov    edx,eax
c0015fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fdc:	01 d0                	add    eax,edx
c0015fde:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015fe8:	e9 37 ff ff ff       	jmp    c0015f24 <HalConsoleScroll(int, int)+0x28>
c0015fed:	8d 76 00             	lea    esi,[esi+0x0]
c0015ff0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015ff4:	e9 17 ff ff ff       	jmp    c0015f10 <HalConsoleScroll(int, int)+0x14>
c0015ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ffc:	90                   	nop
c0015ffd:	83 c4 10             	add    esp,0x10
c0016000:	c3                   	ret    
c0016001:	8d 76 00             	lea    esi,[esi+0x0]

c0016004 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016004:	83 ec 14             	sub    esp,0x14
c0016007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001600b:	88 04 24             	mov    BYTE PTR [esp],al
c001600e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016011:	25 ff 00 00 00       	and    eax,0xff
c0016016:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001601a:	89 d1                	mov    ecx,edx
c001601c:	83 e1 0f             	and    ecx,0xf
c001601f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016023:	c1 e2 04             	shl    edx,0x4
c0016026:	81 e2 ff 00 00 00    	and    edx,0xff
c001602c:	09 ca                	or     edx,ecx
c001602e:	c1 e2 08             	shl    edx,0x8
c0016031:	09 d0                	or     eax,edx
c0016033:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016038:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016040:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016044:	89 d0                	mov    eax,edx
c0016046:	c1 e0 02             	shl    eax,0x2
c0016049:	01 d0                	add    eax,edx
c001604b:	c1 e0 04             	shl    eax,0x4
c001604e:	89 c2                	mov    edx,eax
c0016050:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016054:	01 d0                	add    eax,edx
c0016056:	01 c0                	add    eax,eax
c0016058:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001605c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016060:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016065:	66 89 02             	mov    WORD PTR [edx],ax
c0016068:	90                   	nop
c0016069:	83 c4 14             	add    esp,0x14
c001606c:	c3                   	ret    
c001606d:	8d 76 00             	lea    esi,[esi+0x0]

c0016070 <HalConsoleCursorUpdate(int, int)>:
c0016070:	83 ec 20             	sub    esp,0x20
c0016073:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016077:	89 c2                	mov    edx,eax
c0016079:	89 d0                	mov    eax,edx
c001607b:	c1 e0 02             	shl    eax,0x2
c001607e:	01 d0                	add    eax,edx
c0016080:	c1 e0 04             	shl    eax,0x4
c0016083:	89 c2                	mov    edx,eax
c0016085:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016089:	01 d0                	add    eax,edx
c001608b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016090:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016097:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001609c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00160a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160a4:	ee                   	out    dx,al
c00160a5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00160aa:	25 ff 00 00 00       	and    eax,0xff
c00160af:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00160b6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00160ba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00160be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160c2:	ee                   	out    dx,al
c00160c3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00160ca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00160cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00160d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00160d7:	ee                   	out    dx,al
c00160d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00160dd:	66 c1 e8 08          	shr    ax,0x8
c00160e1:	25 ff 00 00 00       	and    eax,0xff
c00160e6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00160ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00160f1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00160f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00160f9:	ee                   	out    dx,al
c00160fa:	90                   	nop
c00160fb:	83 c4 20             	add    esp,0x20
c00160fe:	c3                   	ret    
c00160ff:	90                   	nop

c0016100 <FAT::getName()>:
c0016100:	b8 e4 f0 01 c0       	mov    eax,0xc001f0e4
c0016105:	c3                   	ret    
c0016106:	66 90                	xchg   ax,ax

c0016108 <FAT::tell(void*, unsigned long long*)>:
c0016108:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001610d:	75 09                	jne    c0016118 <FAT::tell(void*, unsigned long long*)+0x10>
c001610f:	b8 04 00 00 00       	mov    eax,0x4
c0016114:	c3                   	ret    
c0016115:	8d 76 00             	lea    esi,[esi+0x0]
c0016118:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001611d:	75 09                	jne    c0016128 <FAT::tell(void*, unsigned long long*)+0x20>
c001611f:	b8 04 00 00 00       	mov    eax,0x4
c0016124:	c3                   	ret    
c0016125:	8d 76 00             	lea    esi,[esi+0x0]
c0016128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001612c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001612f:	ba 00 00 00 00       	mov    edx,0x0
c0016134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016138:	89 01                	mov    DWORD PTR [ecx],eax
c001613a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001613d:	b8 00 00 00 00       	mov    eax,0x0
c0016142:	c3                   	ret    
c0016143:	90                   	nop

c0016144 <FAT::stat(void*, unsigned long long*)>:
c0016144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016149:	75 09                	jne    c0016154 <FAT::stat(void*, unsigned long long*)+0x10>
c001614b:	b8 04 00 00 00       	mov    eax,0x4
c0016150:	c3                   	ret    
c0016151:	8d 76 00             	lea    esi,[esi+0x0]
c0016154:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016159:	75 09                	jne    c0016164 <FAT::stat(void*, unsigned long long*)+0x20>
c001615b:	b8 04 00 00 00       	mov    eax,0x4
c0016160:	c3                   	ret    
c0016161:	8d 76 00             	lea    esi,[esi+0x0]
c0016164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016168:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001616b:	ba 00 00 00 00       	mov    edx,0x0
c0016170:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016174:	89 01                	mov    DWORD PTR [ecx],eax
c0016176:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016179:	b8 00 00 00 00       	mov    eax,0x0
c001617e:	c3                   	ret    
c001617f:	90                   	nop

c0016180 <FAT::~FAT()>:
c0016180:	83 ec 0c             	sub    esp,0xc
c0016183:	ba 30 f1 01 c0       	mov    edx,0xc001f130
c0016188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618c:	89 10                	mov    DWORD PTR [eax],edx
c001618e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016192:	83 ec 0c             	sub    esp,0xc
c0016195:	50                   	push   eax
c0016196:	e8 03 49 ff ff       	call   c000aa9e <Filesystem::~Filesystem()>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	90                   	nop
c001619f:	83 c4 0c             	add    esp,0xc
c00161a2:	c3                   	ret    
c00161a3:	90                   	nop

c00161a4 <FAT::~FAT()>:
c00161a4:	83 ec 0c             	sub    esp,0xc
c00161a7:	83 ec 0c             	sub    esp,0xc
c00161aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ae:	e8 cd ff ff ff       	call   c0016180 <FAT::~FAT()>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	83 ec 08             	sub    esp,0x8
c00161b9:	6a 08                	push   0x8
c00161bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161bf:	e8 9e 44 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c00161c4:	83 c4 10             	add    esp,0x10
c00161c7:	83 c4 0c             	add    esp,0xc
c00161ca:	c3                   	ret    
c00161cb:	90                   	nop

c00161cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00161cc:	83 ec 1c             	sub    esp,0x1c
c00161cf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00161d6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00161db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161df:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00161e6:	83 f8 ff             	cmp    eax,0xffffffff
c00161e9:	75 35                	jne    c0016220 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00161eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00161ef:	88 c2                	mov    dl,al
c00161f1:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00161f6:	01 d0                	add    eax,edx
c00161f8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00161fc:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c0016202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016206:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c001620d:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016212:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016216:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c001621d:	eb 19                	jmp    c0016238 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001621f:	90                   	nop
c0016220:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016224:	88 c2                	mov    dl,al
c0016226:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001622a:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c0016231:	01 d0                	add    eax,edx
c0016233:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016237:	90                   	nop
c0016238:	83 ec 04             	sub    esp,0x4
c001623b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001623f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016243:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016247:	50                   	push   eax
c0016248:	e8 27 ec fe ff       	call   c0004e74 <f_getlabel>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016254:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016259:	75 09                	jne    c0016264 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001625b:	b8 00 00 00 00       	mov    eax,0x0
c0016260:	eb 0a                	jmp    c001626c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016262:	66 90                	xchg   ax,ax
c0016264:	b8 01 00 00 00       	mov    eax,0x1
c0016269:	8d 76 00             	lea    esi,[esi+0x0]
c001626c:	83 c4 1c             	add    esp,0x1c
c001626f:	c3                   	ret    

c0016270 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016270:	57                   	push   edi
c0016271:	83 ec 58             	sub    esp,0x58
c0016274:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001627c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016280:	b8 00 00 00 00       	mov    eax,0x0
c0016285:	b9 0f 00 00 00       	mov    ecx,0xf
c001628a:	fc                   	cld    
c001628b:	89 d7                	mov    edi,edx
c001628d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001628f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016293:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c001629a:	83 f8 ff             	cmp    eax,0xffffffff
c001629d:	75 35                	jne    c00162d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001629f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00162a3:	88 c2                	mov    dl,al
c00162a5:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00162aa:	01 d0                	add    eax,edx
c00162ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00162b0:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c00162b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00162ba:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c00162c1:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00162c6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00162ca:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c00162d1:	eb 19                	jmp    c00162ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00162d3:	90                   	nop
c00162d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00162d8:	88 c2                	mov    dl,al
c00162da:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00162de:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00162e5:	01 d0                	add    eax,edx
c00162e7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00162eb:	90                   	nop
c00162ec:	83 ec 08             	sub    esp,0x8
c00162ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00162f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162f7:	50                   	push   eax
c00162f8:	e8 e3 a4 fe ff       	call   c00007e0 <strcat>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	83 ec 0c             	sub    esp,0xc
c0016303:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016307:	50                   	push   eax
c0016308:	e8 b8 ec fe ff       	call   c0004fc5 <f_setlabel>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016314:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016319:	75 09                	jne    c0016324 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001631b:	b8 00 00 00 00       	mov    eax,0x0
c0016320:	eb 0a                	jmp    c001632c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016322:	66 90                	xchg   ax,ax
c0016324:	b8 01 00 00 00       	mov    eax,0x1
c0016329:	8d 76 00             	lea    esi,[esi+0x0]
c001632c:	83 c4 58             	add    esp,0x58
c001632f:	5f                   	pop    edi
c0016330:	c3                   	ret    
c0016331:	90                   	nop
c0016332:	66 90                	xchg   ax,ax

c0016334 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016334:	83 ec 2c             	sub    esp,0x2c
c0016337:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001633f:	83 ec 08             	sub    esp,0x8
c0016342:	68 08 f1 01 c0       	push   0xc001f108
c0016347:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001634b:	e8 b0 a3 fe ff       	call   c0000700 <strcmp>
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	85 c0                	test   eax,eax
c0016355:	0f 94 c0             	sete   al
c0016358:	84 c0                	test   al,al
c001635a:	74 10                	je     c001636c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001635c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016364:	e9 b3 00 00 00       	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016369:	8d 76 00             	lea    esi,[esi+0x0]
c001636c:	83 ec 08             	sub    esp,0x8
c001636f:	68 fa f0 01 c0       	push   0xc001f0fa
c0016374:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016378:	e8 83 a3 fe ff       	call   c0000700 <strcmp>
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	85 c0                	test   eax,eax
c0016382:	0f 94 c0             	sete   al
c0016385:	84 c0                	test   al,al
c0016387:	74 0f                	je     c0016398 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016389:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016391:	e9 86 00 00 00       	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016396:	66 90                	xchg   ax,ax
c0016398:	83 ec 08             	sub    esp,0x8
c001639b:	68 00 f1 01 c0       	push   0xc001f100
c00163a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163a4:	e8 57 a3 fe ff       	call   c0000700 <strcmp>
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	85 c0                	test   eax,eax
c00163ae:	0f 94 c0             	sete   al
c00163b1:	84 c0                	test   al,al
c00163b3:	74 0b                	je     c00163c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00163b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00163bd:	eb 5d                	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163bf:	90                   	nop
c00163c0:	83 ec 08             	sub    esp,0x8
c00163c3:	68 bc d1 01 c0       	push   0xc001d1bc
c00163c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163cc:	e8 2f a3 fe ff       	call   c0000700 <strcmp>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	85 c0                	test   eax,eax
c00163d6:	0f 94 c0             	sete   al
c00163d9:	84 c0                	test   al,al
c00163db:	74 0b                	je     c00163e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00163dd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00163e5:	eb 35                	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163e7:	90                   	nop
c00163e8:	83 ec 08             	sub    esp,0x8
c00163eb:	68 06 f1 01 c0       	push   0xc001f106
c00163f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163f4:	e8 07 a3 fe ff       	call   c0000700 <strcmp>
c00163f9:	83 c4 10             	add    esp,0x10
c00163fc:	85 c0                	test   eax,eax
c00163fe:	0f 94 c0             	sete   al
c0016401:	84 c0                	test   al,al
c0016403:	74 0b                	je     c0016410 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016405:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001640d:	eb 0d                	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001640f:	90                   	nop
c0016410:	b8 08 00 00 00       	mov    eax,0x8
c0016415:	e9 ea 00 00 00       	jmp    c0016504 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001641a:	66 90                	xchg   ax,ax
c001641c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016423:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016428:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001642c:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c0016433:	83 f8 ff             	cmp    eax,0xffffffff
c0016436:	75 34                	jne    c001646c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016438:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001643c:	88 c2                	mov    dl,al
c001643e:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016443:	01 d0                	add    eax,edx
c0016445:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016449:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c001644f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016453:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c001645a:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001645f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016463:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c001646a:	eb 18                	jmp    c0016484 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001646c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016470:	88 c2                	mov    dl,al
c0016472:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016476:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c001647d:	01 d0                	add    eax,edx
c001647f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016483:	90                   	nop
c0016484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016488:	88 04 24             	mov    BYTE PTR [esp],al
c001648b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001648f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016493:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001649b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00164a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00164a8:	83 ec 0c             	sub    esp,0xc
c00164ab:	68 00 20 00 00       	push   0x2000
c00164b0:	e8 14 15 ff ff       	call   c00079c9 <malloc>
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164bc:	68 00 20 00 00       	push   0x2000
c00164c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00164c9:	50                   	push   eax
c00164ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00164ce:	50                   	push   eax
c00164cf:	e8 e1 ed fe ff       	call   c00052b5 <f_mkfs>
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00164e0:	75 0a                	jne    c00164ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00164e2:	b8 00 00 00 00       	mov    eax,0x0
c00164e7:	eb 1b                	jmp    c0016504 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00164e9:	8d 76 00             	lea    esi,[esi+0x0]
c00164ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00164f1:	75 09                	jne    c00164fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00164f3:	b8 09 00 00 00       	mov    eax,0x9
c00164f8:	eb 0a                	jmp    c0016504 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00164fa:	66 90                	xchg   ax,ax
c00164fc:	b8 01 00 00 00       	mov    eax,0x1
c0016501:	8d 76 00             	lea    esi,[esi+0x0]
c0016504:	83 c4 2c             	add    esp,0x2c
c0016507:	c3                   	ret    

c0016508 <FAT::tryMount(LogicalDisk*, int)>:
c0016508:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001650e:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016513:	83 f8 14             	cmp    eax,0x14
c0016516:	75 18                	jne    c0016530 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	68 0c f1 01 c0       	push   0xc001f10c
c0016520:	e8 82 9d ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	b0 00                	mov    al,0x0
c001652a:	e9 e9 01 00 00       	jmp    c0016718 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001652f:	90                   	nop
c0016530:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016537:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001653d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016543:	3d 00 02 00 00       	cmp    eax,0x200
c0016548:	74 0a                	je     c0016554 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001654a:	b0 00                	mov    al,0x0
c001654c:	e9 c7 01 00 00       	jmp    c0016718 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016551:	8d 76 00             	lea    esi,[esi+0x0]
c0016554:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001655c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016563:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c001656a:	83 f8 ff             	cmp    eax,0xffffffff
c001656d:	74 09                	je     c0016578 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001656f:	b0 01                	mov    al,0x1
c0016571:	e9 a2 01 00 00       	jmp    c0016718 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016576:	66 90                	xchg   ax,ax
c0016578:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016582:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001658a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016591:	88 c2                	mov    dl,al
c0016593:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016598:	01 d0                	add    eax,edx
c001659a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00165a1:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c00165a7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00165ae:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c00165b5:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00165ba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00165c1:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	68 34 02 00 00       	push   0x234
c00165d0:	e8 f4 13 ff ff       	call   c00079c9 <malloc>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00165df:	83 ec 04             	sub    esp,0x4
c00165e2:	6a 00                	push   0x0
c00165e4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165eb:	50                   	push   eax
c00165ec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165f3:	e8 e3 d4 fe ff       	call   c0003adb <f_mount>
c00165f8:	83 c4 10             	add    esp,0x10
c00165fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016602:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001660a:	74 1c                	je     c0016628 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016616:	e8 ce 13 ff ff       	call   c00079e9 <rfree>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	b0 00                	mov    al,0x0
c0016620:	e9 f3 00 00 00       	jmp    c0016718 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016625:	8d 76 00             	lea    esi,[esi+0x0]
c0016628:	83 ec 04             	sub    esp,0x4
c001662b:	68 00 01 00 00       	push   0x100
c0016630:	6a 00                	push   0x0
c0016632:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016639:	50                   	push   eax
c001663a:	e8 b1 9e fe ff       	call   c00004f0 <memset>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	83 ec 08             	sub    esp,0x8
c0016645:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001664c:	50                   	push   eax
c001664d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016654:	50                   	push   eax
c0016655:	e8 86 a1 fe ff       	call   c00007e0 <strcat>
c001665a:	83 c4 10             	add    esp,0x10
c001665d:	83 ec 08             	sub    esp,0x8
c0016660:	68 1a f1 01 c0       	push   0xc001f11a
c0016665:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001666c:	50                   	push   eax
c001666d:	e8 6e a1 fe ff       	call   c00007e0 <strcat>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	83 ec 04             	sub    esp,0x4
c0016678:	6a 01                	push   0x1
c001667a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016681:	50                   	push   eax
c0016682:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016686:	50                   	push   eax
c0016687:	e8 b1 d4 fe ff       	call   c0003b3d <f_open>
c001668c:	83 c4 10             	add    esp,0x10
c001668f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016696:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001669d:	85 c0                	test   eax,eax
c001669f:	74 0b                	je     c00166ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00166a1:	78 31                	js     c00166d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00166a3:	83 e8 04             	sub    eax,0x4
c00166a6:	83 f8 01             	cmp    eax,0x1
c00166a9:	77 29                	ja     c00166d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00166ab:	90                   	nop
c00166ac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00166bb:	50                   	push   eax
c00166bc:	e8 2f dc fe ff       	call   c00042f0 <f_close>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	90                   	nop
c00166c5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00166cd:	74 41                	je     c0016710 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00166cf:	eb 33                	jmp    c0016704 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00166d1:	8d 76 00             	lea    esi,[esi+0x0]
c00166d4:	83 ec 0c             	sub    esp,0xc
c00166d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00166de:	e8 06 13 ff ff       	call   c00079e9 <rfree>
c00166e3:	83 c4 10             	add    esp,0x10
c00166e6:	83 ec 04             	sub    esp,0x4
c00166e9:	6a 00                	push   0x0
c00166eb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00166f2:	50                   	push   eax
c00166f3:	6a 00                	push   0x0
c00166f5:	e8 e1 d3 fe ff       	call   c0003adb <f_mount>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	b0 00                	mov    al,0x0
c00166ff:	eb 17                	jmp    c0016718 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016709:	40                   	inc    eax
c001670a:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c001670f:	90                   	nop
c0016710:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016717:	90                   	nop
c0016718:	81 c4 4c 03 00 00    	add    esp,0x34c
c001671e:	c3                   	ret    
c001671f:	90                   	nop

c0016720 <FAT::allocateSwapfile(char const*, int)>:
c0016720:	55                   	push   ebp
c0016721:	57                   	push   edi
c0016722:	56                   	push   esi
c0016723:	53                   	push   ebx
c0016724:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001672a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016735:	83 ec 0c             	sub    esp,0xc
c0016738:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001673f:	e8 85 12 ff ff       	call   c00079c9 <malloc>
c0016744:	83 c4 10             	add    esp,0x10
c0016747:	89 c7                	mov    edi,eax
c0016749:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001674e:	83 ec 04             	sub    esp,0x4
c0016751:	50                   	push   eax
c0016752:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016759:	57                   	push   edi
c001675a:	e8 6f 45 ff ff       	call   c000acce <File::File(char const*, Process*)>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016769:	83 ec 04             	sub    esp,0x4
c001676c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016770:	50                   	push   eax
c0016771:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016775:	50                   	push   eax
c0016776:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001677d:	e8 b8 48 ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001678c:	c1 e0 14             	shl    eax,0x14
c001678f:	89 c7                	mov    edi,eax
c0016791:	89 c5                	mov    ebp,eax
c0016793:	c1 fd 1f             	sar    ebp,0x1f
c0016796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001679e:	89 f9                	mov    ecx,edi
c00167a0:	31 c1                	xor    ecx,eax
c00167a2:	89 cb                	mov    ebx,ecx
c00167a4:	89 e9                	mov    ecx,ebp
c00167a6:	31 d1                	xor    ecx,edx
c00167a8:	89 ce                	mov    esi,ecx
c00167aa:	89 f0                	mov    eax,esi
c00167ac:	09 d8                	or     eax,ebx
c00167ae:	0f 84 9c 00 00 00    	je     c0016850 <FAT::allocateSwapfile(char const*, int)+0x130>
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167be:	e8 43 47 ff ff       	call   c000af06 <File::unlink()>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	83 ec 08             	sub    esp,0x8
c00167c9:	6a 12                	push   0x12
c00167cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167d2:	e8 b7 45 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00167e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00167e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00167ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00167f5:	c1 e0 14             	shl    eax,0x14
c00167f8:	83 ec 04             	sub    esp,0x4
c00167fb:	6a 01                	push   0x1
c00167fd:	50                   	push   eax
c00167fe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016805:	e8 4b e9 fe ff       	call   c0005155 <f_expand>
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016814:	8b 00                	mov    eax,DWORD PTR [eax]
c0016816:	83 c0 10             	add    eax,0x10
c0016819:	8b 00                	mov    eax,DWORD PTR [eax]
c001681b:	83 ec 0c             	sub    esp,0xc
c001681e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016822:	52                   	push   edx
c0016823:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016827:	52                   	push   edx
c0016828:	6a 00                	push   0x0
c001682a:	68 00 04 00 00       	push   0x400
c001682f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016836:	ff d0                	call   eax
c0016838:	83 c4 20             	add    esp,0x20
c001683b:	83 ec 0c             	sub    esp,0xc
c001683e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016845:	e8 a2 45 ff ff       	call   c000adec <File::close()>
c001684a:	83 c4 10             	add    esp,0x10
c001684d:	8d 76 00             	lea    esi,[esi+0x0]
c0016850:	83 ec 08             	sub    esp,0x8
c0016853:	6a 01                	push   0x1
c0016855:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001685c:	e8 2d 45 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001686b:	8b 00                	mov    eax,DWORD PTR [eax]
c001686d:	83 c0 0c             	add    eax,0xc
c0016870:	8b 00                	mov    eax,DWORD PTR [eax]
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016879:	52                   	push   edx
c001687a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001687e:	52                   	push   edx
c001687f:	6a 00                	push   0x0
c0016881:	6a 04                	push   0x4
c0016883:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001688a:	ff d0                	call   eax
c001688c:	83 c4 20             	add    esp,0x20
c001688f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016896:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001689c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00168a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00168aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00168ad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00168b4:	83 ec 0c             	sub    esp,0xc
c00168b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00168be:	e8 29 45 ff ff       	call   c000adec <File::close()>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00168cd:	ba 00 00 00 00       	mov    edx,0x0
c00168d2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00168d8:	5b                   	pop    ebx
c00168d9:	5e                   	pop    esi
c00168da:	5f                   	pop    edi
c00168db:	5d                   	pop    ebp
c00168dc:	c3                   	ret    
c00168dd:	90                   	nop
c00168de:	66 90                	xchg   ax,ax

c00168e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00168e0:	57                   	push   edi
c00168e1:	56                   	push   esi
c00168e2:	53                   	push   ebx
c00168e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00168e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00168f1:	74 0d                	je     c0016900 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00168f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00168fb:	75 0f                	jne    c001690c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	b8 04 00 00 00       	mov    eax,0x4
c0016905:	e9 36 01 00 00       	jmp    c0016a40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001690a:	66 90                	xchg   ax,ax
c001690c:	83 ec 08             	sub    esp,0x8
c001690f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016916:	50                   	push   eax
c0016917:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001691e:	e8 90 dc fe ff       	call   c00045b3 <f_readdir>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001692d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001693e:	83 c0 16             	add    eax,0x16
c0016941:	50                   	push   eax
c0016942:	e8 19 9c fe ff       	call   c0000560 <strlen>
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	ba 00 00 00 00       	mov    edx,0x0
c001694f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016953:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016957:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001695e:	25 ff 00 00 00       	and    eax,0xff
c0016963:	83 e0 10             	and    eax,0x10
c0016966:	74 08                	je     c0016970 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016968:	b8 02 00 00 00       	mov    eax,0x2
c001696d:	eb 09                	jmp    c0016978 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001696f:	90                   	nop
c0016970:	b8 01 00 00 00       	mov    eax,0x1
c0016975:	8d 76 00             	lea    esi,[esi+0x0]
c0016978:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001697c:	83 ec 08             	sub    esp,0x8
c001697f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016986:	83 c0 16             	add    eax,0x16
c0016989:	50                   	push   eax
c001698a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001698e:	83 c0 10             	add    eax,0x10
c0016991:	50                   	push   eax
c0016992:	e8 89 9c fe ff       	call   c0000620 <strcpy>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00169a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00169a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00169b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00169ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00169c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00169c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00169cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00169d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00169dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00169e4:	89 c6                	mov    esi,eax
c00169e6:	89 d7                	mov    edi,edx
c00169e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169ea:	89 c8                	mov    eax,ecx
c00169ec:	89 fa                	mov    edx,edi
c00169ee:	89 f3                	mov    ebx,esi
c00169f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00169f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00169fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016a05:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016a0c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016a12:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016a19:	84 c0                	test   al,al
c0016a1b:	75 07                	jne    c0016a24 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016a1d:	b8 07 00 00 00       	mov    eax,0x7
c0016a22:	eb 1c                	jmp    c0016a40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016a24:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016a2b:	85 c0                	test   eax,eax
c0016a2d:	75 09                	jne    c0016a38 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016a2f:	b8 00 00 00 00       	mov    eax,0x0
c0016a34:	eb 0a                	jmp    c0016a40 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016a36:	66 90                	xchg   ax,ax
c0016a38:	b8 01 00 00 00       	mov    eax,0x1
c0016a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a40:	81 c4 50 02 00 00    	add    esp,0x250
c0016a46:	5b                   	pop    ebx
c0016a47:	5e                   	pop    esi
c0016a48:	5f                   	pop    edi
c0016a49:	c3                   	ret    
c0016a4a:	66 90                	xchg   ax,ax

c0016a4c <FAT::read(void*, unsigned long, void*, int*)>:
c0016a4c:	83 ec 1c             	sub    esp,0x1c
c0016a4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a54:	74 0a                	je     c0016a60 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016a56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016a5b:	75 0b                	jne    c0016a68 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a60:	b8 04 00 00 00       	mov    eax,0x4
c0016a65:	eb 41                	jmp    c0016aa8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016a67:	90                   	nop
c0016a68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a6c:	50                   	push   eax
c0016a6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016a75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a79:	e8 8a d3 fe ff       	call   c0003e08 <f_read>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a89:	89 c2                	mov    edx,eax
c0016a8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a8f:	89 10                	mov    DWORD PTR [eax],edx
c0016a91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a95:	85 c0                	test   eax,eax
c0016a97:	75 07                	jne    c0016aa0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016a99:	b8 00 00 00 00       	mov    eax,0x0
c0016a9e:	eb 08                	jmp    c0016aa8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016aa0:	b8 01 00 00 00       	mov    eax,0x1
c0016aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa8:	83 c4 1c             	add    esp,0x1c
c0016aab:	c3                   	ret    

c0016aac <FAT::write(void*, unsigned long, void*, int*)>:
c0016aac:	83 ec 1c             	sub    esp,0x1c
c0016aaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ab4:	74 0a                	je     c0016ac0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016ab6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016abb:	75 0b                	jne    c0016ac8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	b8 04 00 00 00       	mov    eax,0x4
c0016ac5:	eb 41                	jmp    c0016b08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ac7:	90                   	nop
c0016ac8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016acc:	50                   	push   eax
c0016acd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ad1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ad5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ad9:	e8 29 d5 fe ff       	call   c0004007 <f_write>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ae9:	89 c2                	mov    edx,eax
c0016aeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aef:	89 10                	mov    DWORD PTR [eax],edx
c0016af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af5:	85 c0                	test   eax,eax
c0016af7:	75 07                	jne    c0016b00 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016af9:	b8 00 00 00 00       	mov    eax,0x0
c0016afe:	eb 08                	jmp    c0016b08 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016b00:	b8 01 00 00 00       	mov    eax,0x1
c0016b05:	8d 76 00             	lea    esi,[esi+0x0]
c0016b08:	83 c4 1c             	add    esp,0x1c
c0016b0b:	c3                   	ret    

c0016b0c <FAT::close(void*)>:
c0016b0c:	83 ec 1c             	sub    esp,0x1c
c0016b0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b14:	75 0a                	jne    c0016b20 <FAT::close(void*)+0x14>
c0016b16:	b8 04 00 00 00       	mov    eax,0x4
c0016b1b:	eb 3f                	jmp    c0016b5c <FAT::close(void*)+0x50>
c0016b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b20:	83 ec 0c             	sub    esp,0xc
c0016b23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b27:	e8 c4 d7 fe ff       	call   c00042f0 <f_close>
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b33:	83 ec 0c             	sub    esp,0xc
c0016b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b3a:	e8 9a 0e ff ff       	call   c00079d9 <free>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b46:	85 c0                	test   eax,eax
c0016b48:	75 0a                	jne    c0016b54 <FAT::close(void*)+0x48>
c0016b4a:	b8 00 00 00 00       	mov    eax,0x0
c0016b4f:	eb 0b                	jmp    c0016b5c <FAT::close(void*)+0x50>
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]
c0016b54:	b8 01 00 00 00       	mov    eax,0x1
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	83 c4 1c             	add    esp,0x1c
c0016b5f:	c3                   	ret    

c0016b60 <FAT::closeDir(void*)>:
c0016b60:	83 ec 1c             	sub    esp,0x1c
c0016b63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b68:	75 0a                	jne    c0016b74 <FAT::closeDir(void*)+0x14>
c0016b6a:	b8 04 00 00 00       	mov    eax,0x4
c0016b6f:	eb 3f                	jmp    c0016bb0 <FAT::closeDir(void*)+0x50>
c0016b71:	8d 76 00             	lea    esi,[esi+0x0]
c0016b74:	83 ec 0c             	sub    esp,0xc
c0016b77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b7b:	e8 11 da fe ff       	call   c0004591 <f_closedir>
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b8e:	e8 46 0e ff ff       	call   c00079d9 <free>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b9a:	85 c0                	test   eax,eax
c0016b9c:	75 0a                	jne    c0016ba8 <FAT::closeDir(void*)+0x48>
c0016b9e:	b8 00 00 00 00       	mov    eax,0x0
c0016ba3:	eb 0b                	jmp    c0016bb0 <FAT::closeDir(void*)+0x50>
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba8:	b8 01 00 00 00       	mov    eax,0x1
c0016bad:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb0:	83 c4 1c             	add    esp,0x1c
c0016bb3:	c3                   	ret    

c0016bb4 <FAT::seek(void*, unsigned long long)>:
c0016bb4:	83 ec 2c             	sub    esp,0x2c
c0016bb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016bc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016bcc:	75 0a                	jne    c0016bd8 <FAT::seek(void*, unsigned long long)+0x24>
c0016bce:	b8 04 00 00 00       	mov    eax,0x4
c0016bd3:	eb 33                	jmp    c0016c08 <FAT::seek(void*, unsigned long long)+0x54>
c0016bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bdc:	83 ec 08             	sub    esp,0x8
c0016bdf:	50                   	push   eax
c0016be0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016be4:	e8 36 d7 fe ff       	call   c000431f <f_lseek>
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf4:	85 c0                	test   eax,eax
c0016bf6:	75 08                	jne    c0016c00 <FAT::seek(void*, unsigned long long)+0x4c>
c0016bf8:	b8 00 00 00 00       	mov    eax,0x0
c0016bfd:	eb 09                	jmp    c0016c08 <FAT::seek(void*, unsigned long long)+0x54>
c0016bff:	90                   	nop
c0016c00:	b8 01 00 00 00       	mov    eax,0x1
c0016c05:	8d 76 00             	lea    esi,[esi+0x0]
c0016c08:	83 c4 2c             	add    esp,0x2c
c0016c0b:	c3                   	ret    

c0016c0c <fatWrapperReadDisk>:
c0016c0c:	53                   	push   ebx
c0016c0d:	83 ec 18             	sub    esp,0x18
c0016c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c1c:	25 ff 00 00 00       	and    eax,0xff
c0016c21:	8b 0c 85 a0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf60]
c0016c28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c30:	ba 00 00 00 00       	mov    edx,0x0
c0016c35:	83 ec 0c             	sub    esp,0xc
c0016c38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c3c:	53                   	push   ebx
c0016c3d:	52                   	push   edx
c0016c3e:	50                   	push   eax
c0016c3f:	51                   	push   ecx
c0016c40:	e8 fb 61 ff ff       	call   c000ce40 <LogicalDisk::read(unsigned long long, int, void*)>
c0016c45:	83 c4 20             	add    esp,0x20
c0016c48:	83 c4 18             	add    esp,0x18
c0016c4b:	5b                   	pop    ebx
c0016c4c:	c3                   	ret    
c0016c4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c50 <fatWrapperWriteDisk>:
c0016c50:	53                   	push   ebx
c0016c51:	83 ec 18             	sub    esp,0x18
c0016c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c60:	25 ff 00 00 00       	and    eax,0xff
c0016c65:	8b 0c 85 a0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf60]
c0016c6c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c74:	ba 00 00 00 00       	mov    edx,0x0
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c80:	53                   	push   ebx
c0016c81:	52                   	push   edx
c0016c82:	50                   	push   eax
c0016c83:	51                   	push   ecx
c0016c84:	e8 23 62 ff ff       	call   c000ceac <LogicalDisk::write(unsigned long long, int, void*)>
c0016c89:	83 c4 20             	add    esp,0x20
c0016c8c:	83 c4 18             	add    esp,0x18
c0016c8f:	5b                   	pop    ebx
c0016c90:	c3                   	ret    
c0016c91:	8d 76 00             	lea    esi,[esi+0x0]

c0016c94 <fatWrapperIoctl>:
c0016c94:	53                   	push   ebx
c0016c95:	83 ec 28             	sub    esp,0x28
c0016c98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ca0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016ca4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016ca8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016cad:	75 35                	jne    c0016ce4 <fatWrapperIoctl+0x50>
c0016caf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016cb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cbb:	25 ff 00 00 00       	and    eax,0xff
c0016cc0:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c0016cc7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016ccd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cd3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016cd7:	66 89 02             	mov    WORD PTR [edx],ax
c0016cda:	b8 00 00 00 00       	mov    eax,0x0
c0016cdf:	e9 c4 00 00 00       	jmp    c0016da8 <fatWrapperIoctl+0x114>
c0016ce4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ce9:	75 75                	jne    c0016d60 <fatWrapperIoctl+0xcc>
c0016ceb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016cef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cf3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cf7:	25 ff 00 00 00       	and    eax,0xff
c0016cfc:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c0016d03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016d09:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016d0f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016d15:	89 c8                	mov    eax,ecx
c0016d17:	89 da                	mov    edx,ebx
c0016d19:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016d1d:	c1 e0 0a             	shl    eax,0xa
c0016d20:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016d24:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016d2a:	8b 0c 8d a0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf60]
c0016d31:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016d37:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016d3d:	89 cb                	mov    ebx,ecx
c0016d3f:	c1 fb 1f             	sar    ebx,0x1f
c0016d42:	53                   	push   ebx
c0016d43:	51                   	push   ecx
c0016d44:	52                   	push   edx
c0016d45:	50                   	push   eax
c0016d46:	e8 85 56 00 00       	call   c001c3d0 <__udivdi3>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	89 c2                	mov    edx,eax
c0016d50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d54:	89 10                	mov    DWORD PTR [eax],edx
c0016d56:	b8 00 00 00 00       	mov    eax,0x0
c0016d5b:	eb 4b                	jmp    c0016da8 <fatWrapperIoctl+0x114>
c0016d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d60:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016d65:	75 09                	jne    c0016d70 <fatWrapperIoctl+0xdc>
c0016d67:	b8 00 00 00 00       	mov    eax,0x0
c0016d6c:	eb 3a                	jmp    c0016da8 <fatWrapperIoctl+0x114>
c0016d6e:	66 90                	xchg   ax,ax
c0016d70:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016d75:	75 19                	jne    c0016d90 <fatWrapperIoctl+0xfc>
c0016d77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d83:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016d89:	b8 00 00 00 00       	mov    eax,0x0
c0016d8e:	eb 18                	jmp    c0016da8 <fatWrapperIoctl+0x114>
c0016d90:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016d95:	75 09                	jne    c0016da0 <fatWrapperIoctl+0x10c>
c0016d97:	b8 00 00 00 00       	mov    eax,0x0
c0016d9c:	eb 0a                	jmp    c0016da8 <fatWrapperIoctl+0x114>
c0016d9e:	66 90                	xchg   ax,ax
c0016da0:	b8 04 00 00 00       	mov    eax,0x4
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]
c0016da8:	83 c4 28             	add    esp,0x28
c0016dab:	5b                   	pop    ebx
c0016dac:	c3                   	ret    
c0016dad:	90                   	nop
c0016dae:	66 90                	xchg   ax,ax

c0016db0 <FAT::FAT()>:
c0016db0:	83 ec 1c             	sub    esp,0x1c
c0016db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db7:	83 ec 0c             	sub    esp,0xc
c0016dba:	50                   	push   eax
c0016dbb:	e8 ba 3c ff ff       	call   c000aa7a <Filesystem::Filesystem()>
c0016dc0:	83 c4 10             	add    esp,0x10
c0016dc3:	ba 30 f1 01 c0       	mov    edx,0xc001f130
c0016dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dcc:	89 10                	mov    DWORD PTR [eax],edx
c0016dce:	c7 05 c0 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240c0,0x0
c0016dd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016de0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016de5:	7f 15                	jg     c0016dfc <FAT::FAT()+0x4c>
c0016de7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016deb:	c7 04 85 e0 40 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbf20],0xffffffff
c0016df6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016dfa:	eb e4                	jmp    c0016de0 <FAT::FAT()+0x30>
c0016dfc:	90                   	nop
c0016dfd:	83 c4 1c             	add    esp,0x1c
c0016e00:	c3                   	ret    
c0016e01:	90                   	nop
c0016e02:	66 90                	xchg   ax,ax

c0016e04 <FAT::fixFilepath(char*)>:
c0016e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e08:	8a 00                	mov    al,BYTE PTR [eax]
c0016e0a:	3c 40                	cmp    al,0x40
c0016e0c:	7e 2e                	jle    c0016e3c <FAT::fixFilepath(char*)+0x38>
c0016e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e12:	8a 00                	mov    al,BYTE PTR [eax]
c0016e14:	83 e8 41             	sub    eax,0x41
c0016e17:	88 c2                	mov    dl,al
c0016e19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e1d:	88 10                	mov    BYTE PTR [eax],dl
c0016e1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e23:	8a 00                	mov    al,BYTE PTR [eax]
c0016e25:	0f be c0             	movsx  eax,al
c0016e28:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c0016e2f:	83 c0 30             	add    eax,0x30
c0016e32:	88 c2                	mov    dl,al
c0016e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e38:	88 10                	mov    BYTE PTR [eax],dl
c0016e3a:	66 90                	xchg   ax,ax
c0016e3c:	90                   	nop
c0016e3d:	c3                   	ret    
c0016e3e:	66 90                	xchg   ax,ax

c0016e40 <FAT::open(char const*, void**, FileOpenMode)>:
c0016e40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e4e:	74 0c                	je     c0016e5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016e50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e58:	75 0e                	jne    c0016e68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016e5a:	66 90                	xchg   ax,ax
c0016e5c:	b8 04 00 00 00       	mov    eax,0x4
c0016e61:	e9 0a 01 00 00       	jmp    c0016f70 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e66:	66 90                	xchg   ax,ax
c0016e68:	83 ec 08             	sub    esp,0x8
c0016e6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e76:	50                   	push   eax
c0016e77:	e8 a4 97 fe ff       	call   c0000620 <strcpy>
c0016e7c:	83 c4 10             	add    esp,0x10
c0016e7f:	83 ec 08             	sub    esp,0x8
c0016e82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e86:	50                   	push   eax
c0016e87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e8e:	e8 71 ff ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016e9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ea5:	83 e0 01             	and    eax,0x1
c0016ea8:	74 0a                	je     c0016eb4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016eaa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016eb2:	66 90                	xchg   ax,ax
c0016eb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ebb:	83 e0 04             	and    eax,0x4
c0016ebe:	74 10                	je     c0016ed0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016ec0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016ec8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016ed0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ed7:	83 e0 02             	and    eax,0x2
c0016eda:	74 08                	je     c0016ee4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016edc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016ee4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016eeb:	83 e0 08             	and    eax,0x8
c0016eee:	74 08                	je     c0016ef8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016ef0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016ef8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016eff:	83 e0 10             	and    eax,0x10
c0016f02:	74 08                	je     c0016f0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016f04:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	68 28 02 00 00       	push   0x228
c0016f14:	e8 b0 0a ff ff       	call   c00079c9 <malloc>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	89 c2                	mov    edx,eax
c0016f1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f25:	89 10                	mov    DWORD PTR [eax],edx
c0016f27:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016f2e:	31 d2                	xor    edx,edx
c0016f30:	88 c2                	mov    dl,al
c0016f32:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f39:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f3b:	83 ec 04             	sub    esp,0x4
c0016f3e:	52                   	push   edx
c0016f3f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016f43:	52                   	push   edx
c0016f44:	50                   	push   eax
c0016f45:	e8 f3 cb fe ff       	call   c0003b3d <f_open>
c0016f4a:	83 c4 10             	add    esp,0x10
c0016f4d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016f54:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016f5c:	74 0a                	je     c0016f68 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016f5e:	b8 01 00 00 00       	mov    eax,0x1
c0016f63:	eb 0b                	jmp    c0016f70 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016f65:	8d 76 00             	lea    esi,[esi+0x0]
c0016f68:	b8 00 00 00 00       	mov    eax,0x0
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f76:	c3                   	ret    
c0016f77:	90                   	nop

c0016f78 <FAT::openDir(char const*, void**)>:
c0016f78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016f86:	74 0c                	je     c0016f94 <FAT::openDir(char const*, void**)+0x1c>
c0016f88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016f90:	75 0e                	jne    c0016fa0 <FAT::openDir(char const*, void**)+0x28>
c0016f92:	66 90                	xchg   ax,ax
c0016f94:	b8 04 00 00 00       	mov    eax,0x4
c0016f99:	e9 82 00 00 00       	jmp    c0017020 <FAT::openDir(char const*, void**)+0xa8>
c0016f9e:	66 90                	xchg   ax,ax
c0016fa0:	83 ec 08             	sub    esp,0x8
c0016fa3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fae:	50                   	push   eax
c0016faf:	e8 6c 96 fe ff       	call   c0000620 <strcpy>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	83 ec 08             	sub    esp,0x8
c0016fba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016fbe:	50                   	push   eax
c0016fbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fc6:	e8 39 fe ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	6a 30                	push   0x30
c0016fd3:	e8 f1 09 ff ff       	call   c00079c9 <malloc>
c0016fd8:	83 c4 10             	add    esp,0x10
c0016fdb:	89 c2                	mov    edx,eax
c0016fdd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016fe4:	89 10                	mov    DWORD PTR [eax],edx
c0016fe6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016fed:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fef:	83 ec 08             	sub    esp,0x8
c0016ff2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016ff6:	52                   	push   edx
c0016ff7:	50                   	push   eax
c0016ff8:	e8 c9 d4 fe ff       	call   c00044c6 <f_opendir>
c0016ffd:	83 c4 10             	add    esp,0x10
c0017000:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017007:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001700f:	74 07                	je     c0017018 <FAT::openDir(char const*, void**)+0xa0>
c0017011:	b8 01 00 00 00       	mov    eax,0x1
c0017016:	eb 08                	jmp    c0017020 <FAT::openDir(char const*, void**)+0xa8>
c0017018:	b8 00 00 00 00       	mov    eax,0x0
c001701d:	8d 76 00             	lea    esi,[esi+0x0]
c0017020:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017026:	c3                   	ret    
c0017027:	90                   	nop

c0017028 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017028:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001702e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017036:	75 0c                	jne    c0017044 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017038:	b8 04 00 00 00       	mov    eax,0x4
c001703d:	e9 d6 00 00 00       	jmp    c0017118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017042:	66 90                	xchg   ax,ax
c0017044:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001704c:	75 0a                	jne    c0017058 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001704e:	b8 04 00 00 00       	mov    eax,0x4
c0017053:	e9 c0 00 00 00       	jmp    c0017118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017058:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017060:	75 0a                	jne    c001706c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017062:	b8 04 00 00 00       	mov    eax,0x4
c0017067:	e9 ac 00 00 00       	jmp    c0017118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001706c:	83 ec 08             	sub    esp,0x8
c001706f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017076:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001707d:	50                   	push   eax
c001707e:	e8 9d 95 fe ff       	call   c0000620 <strcpy>
c0017083:	83 c4 10             	add    esp,0x10
c0017086:	83 ec 08             	sub    esp,0x8
c0017089:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017090:	50                   	push   eax
c0017091:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017098:	e8 67 fd ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c001709d:	83 c4 10             	add    esp,0x10
c00170a0:	83 ec 08             	sub    esp,0x8
c00170a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a7:	50                   	push   eax
c00170a8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00170af:	50                   	push   eax
c00170b0:	e8 90 d5 fe ff       	call   c0004645 <f_stat>
c00170b5:	83 c4 10             	add    esp,0x10
c00170b8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00170bf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00170c6:	85 c0                	test   eax,eax
c00170c8:	74 0a                	je     c00170d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00170ca:	83 f8 04             	cmp    eax,0x4
c00170cd:	74 39                	je     c0017108 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00170cf:	eb 3f                	jmp    c0017110 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00170d1:	8d 76 00             	lea    esi,[esi+0x0]
c00170d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170d8:	25 ff 00 00 00       	and    eax,0xff
c00170dd:	83 e0 10             	and    eax,0x10
c00170e0:	0f 95 c2             	setne  dl
c00170e3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00170ea:	88 10                	mov    BYTE PTR [eax],dl
c00170ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f0:	ba 00 00 00 00       	mov    edx,0x0
c00170f5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00170fc:	89 01                	mov    DWORD PTR [ecx],eax
c00170fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017101:	b8 00 00 00 00       	mov    eax,0x0
c0017106:	eb 10                	jmp    c0017118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017108:	b8 02 00 00 00       	mov    eax,0x2
c001710d:	eb 09                	jmp    c0017118 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001710f:	90                   	nop
c0017110:	b8 01 00 00 00       	mov    eax,0x1
c0017115:	8d 76 00             	lea    esi,[esi+0x0]
c0017118:	81 c4 2c 02 00 00    	add    esp,0x22c
c001711e:	c3                   	ret    
c001711f:	90                   	nop

c0017120 <FAT::unlink(char const*)>:
c0017120:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017126:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001712e:	75 08                	jne    c0017138 <FAT::unlink(char const*)+0x18>
c0017130:	b8 04 00 00 00       	mov    eax,0x4
c0017135:	eb 61                	jmp    c0017198 <FAT::unlink(char const*)+0x78>
c0017137:	90                   	nop
c0017138:	83 ec 08             	sub    esp,0x8
c001713b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017146:	50                   	push   eax
c0017147:	e8 d4 94 fe ff       	call   c0000620 <strcpy>
c001714c:	83 c4 10             	add    esp,0x10
c001714f:	83 ec 08             	sub    esp,0x8
c0017152:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017156:	50                   	push   eax
c0017157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001715e:	e8 a1 fc ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	83 ec 0c             	sub    esp,0xc
c0017169:	8d 44 24 18          	lea    eax,[esp+0x18]
c001716d:	50                   	push   eax
c001716e:	e8 37 d7 fe ff       	call   c00048aa <f_unlink>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001717d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017184:	85 c0                	test   eax,eax
c0017186:	75 08                	jne    c0017190 <FAT::unlink(char const*)+0x70>
c0017188:	b8 00 00 00 00       	mov    eax,0x0
c001718d:	eb 09                	jmp    c0017198 <FAT::unlink(char const*)+0x78>
c001718f:	90                   	nop
c0017190:	b8 01 00 00 00       	mov    eax,0x1
c0017195:	8d 76 00             	lea    esi,[esi+0x0]
c0017198:	81 c4 1c 01 00 00    	add    esp,0x11c
c001719e:	c3                   	ret    
c001719f:	90                   	nop

c00171a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00171a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00171a6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00171ad:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00171b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00171b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00171bc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00171c4:	75 0a                	jne    c00171d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00171c6:	b8 04 00 00 00       	mov    eax,0x4
c00171cb:	e9 54 01 00 00       	jmp    c0017324 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00171d0:	83 ec 08             	sub    esp,0x8
c00171d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00171da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171de:	50                   	push   eax
c00171df:	e8 3c 94 fe ff       	call   c0000620 <strcpy>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	83 ec 08             	sub    esp,0x8
c00171ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c00171ee:	50                   	push   eax
c00171ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00171f6:	e8 09 fc ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017206:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001720e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017212:	25 ff 00 00 00       	and    eax,0xff
c0017217:	83 e0 01             	and    eax,0x1
c001721a:	74 08                	je     c0017224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001721c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017224:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017228:	25 ff 00 00 00       	and    eax,0xff
c001722d:	83 e0 02             	and    eax,0x2
c0017230:	74 0a                	je     c001723c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017232:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001723a:	66 90                	xchg   ax,ax
c001723c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017240:	25 ff 00 00 00       	and    eax,0xff
c0017245:	83 e0 04             	and    eax,0x4
c0017248:	74 0a                	je     c0017254 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001724a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017252:	66 90                	xchg   ax,ax
c0017254:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017258:	25 ff 00 00 00       	and    eax,0xff
c001725d:	83 e0 08             	and    eax,0x8
c0017260:	74 0a                	je     c001726c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017262:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001726a:	66 90                	xchg   ax,ax
c001726c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017270:	25 ff 00 00 00       	and    eax,0xff
c0017275:	83 e0 01             	and    eax,0x1
c0017278:	74 0a                	je     c0017284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001727a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017282:	66 90                	xchg   ax,ax
c0017284:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017288:	25 ff 00 00 00       	and    eax,0xff
c001728d:	83 e0 02             	and    eax,0x2
c0017290:	74 0a                	je     c001729c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017292:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001729a:	66 90                	xchg   ax,ax
c001729c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172a0:	25 ff 00 00 00       	and    eax,0xff
c00172a5:	83 e0 04             	and    eax,0x4
c00172a8:	74 0a                	je     c00172b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00172aa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00172b2:	66 90                	xchg   ax,ax
c00172b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172b8:	25 ff 00 00 00       	and    eax,0xff
c00172bd:	83 e0 08             	and    eax,0x8
c00172c0:	74 0a                	je     c00172cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00172c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00172ca:	66 90                	xchg   ax,ax
c00172cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00172d3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00172da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00172e1:	31 d2                	xor    edx,edx
c00172e3:	88 c2                	mov    dl,al
c00172e5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00172ec:	25 ff 00 00 00       	and    eax,0xff
c00172f1:	83 ec 04             	sub    esp,0x4
c00172f4:	52                   	push   edx
c00172f5:	50                   	push   eax
c00172f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00172fa:	50                   	push   eax
c00172fb:	e8 1d da fe ff       	call   c0004d1d <f_chmod>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001730a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017311:	85 c0                	test   eax,eax
c0017313:	75 07                	jne    c001731c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017315:	b8 00 00 00 00       	mov    eax,0x0
c001731a:	eb 08                	jmp    c0017324 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001731c:	b8 01 00 00 00       	mov    eax,0x1
c0017321:	8d 76 00             	lea    esi,[esi+0x0]
c0017324:	81 c4 2c 01 00 00    	add    esp,0x12c
c001732a:	c3                   	ret    
c001732b:	90                   	nop

c001732c <FAT::rename(char const*, char const*)>:
c001732c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017332:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001733a:	74 0c                	je     c0017348 <FAT::rename(char const*, char const*)+0x1c>
c001733c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017344:	75 0e                	jne    c0017354 <FAT::rename(char const*, char const*)+0x28>
c0017346:	66 90                	xchg   ax,ax
c0017348:	b8 04 00 00 00       	mov    eax,0x4
c001734d:	e9 9e 00 00 00       	jmp    c00173f0 <FAT::rename(char const*, char const*)+0xc4>
c0017352:	66 90                	xchg   ax,ax
c0017354:	83 ec 08             	sub    esp,0x8
c0017357:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001735e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017365:	50                   	push   eax
c0017366:	e8 b5 92 fe ff       	call   c0000620 <strcpy>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	83 ec 08             	sub    esp,0x8
c0017371:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017378:	50                   	push   eax
c0017379:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017380:	e8 7f fa ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c0017385:	83 c4 10             	add    esp,0x10
c0017388:	83 ec 08             	sub    esp,0x8
c001738b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017392:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017396:	50                   	push   eax
c0017397:	e8 84 92 fe ff       	call   c0000620 <strcpy>
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	83 ec 08             	sub    esp,0x8
c00173a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173a6:	50                   	push   eax
c00173a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00173ae:	e8 51 fa ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	83 ec 08             	sub    esp,0x8
c00173b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173bd:	50                   	push   eax
c00173be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00173c5:	50                   	push   eax
c00173c6:	e8 9c d7 fe ff       	call   c0004b67 <f_rename>
c00173cb:	83 c4 10             	add    esp,0x10
c00173ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00173d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00173dc:	85 c0                	test   eax,eax
c00173de:	75 08                	jne    c00173e8 <FAT::rename(char const*, char const*)+0xbc>
c00173e0:	b8 00 00 00 00       	mov    eax,0x0
c00173e5:	eb 09                	jmp    c00173f0 <FAT::rename(char const*, char const*)+0xc4>
c00173e7:	90                   	nop
c00173e8:	b8 01 00 00 00       	mov    eax,0x1
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00173f6:	c3                   	ret    
c00173f7:	90                   	nop

c00173f8 <FAT::mkdir(char const*)>:
c00173f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017406:	75 08                	jne    c0017410 <FAT::mkdir(char const*)+0x18>
c0017408:	b8 04 00 00 00       	mov    eax,0x4
c001740d:	eb 61                	jmp    c0017470 <FAT::mkdir(char const*)+0x78>
c001740f:	90                   	nop
c0017410:	83 ec 08             	sub    esp,0x8
c0017413:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001741a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001741e:	50                   	push   eax
c001741f:	e8 fc 91 fe ff       	call   c0000620 <strcpy>
c0017424:	83 c4 10             	add    esp,0x10
c0017427:	83 ec 08             	sub    esp,0x8
c001742a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001742e:	50                   	push   eax
c001742f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017436:	e8 c9 f9 ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c001743b:	83 c4 10             	add    esp,0x10
c001743e:	83 ec 0c             	sub    esp,0xc
c0017441:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017445:	50                   	push   eax
c0017446:	e8 81 d5 fe ff       	call   c00049cc <f_mkdir>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017455:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001745c:	85 c0                	test   eax,eax
c001745e:	75 08                	jne    c0017468 <FAT::mkdir(char const*)+0x70>
c0017460:	b8 00 00 00 00       	mov    eax,0x0
c0017465:	eb 09                	jmp    c0017470 <FAT::mkdir(char const*)+0x78>
c0017467:	90                   	nop
c0017468:	b8 01 00 00 00       	mov    eax,0x1
c001746d:	8d 76 00             	lea    esi,[esi+0x0]
c0017470:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <FAT::exists(char const*)>:
c0017478:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001747e:	83 ec 08             	sub    esp,0x8
c0017481:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017488:	8d 44 24 10          	lea    eax,[esp+0x10]
c001748c:	50                   	push   eax
c001748d:	e8 8e 91 fe ff       	call   c0000620 <strcpy>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	83 ec 08             	sub    esp,0x8
c0017498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001749c:	50                   	push   eax
c001749d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174a4:	e8 5b f9 ff ff       	call   c0016e04 <FAT::fixFilepath(char*)>
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	83 ec 08             	sub    esp,0x8
c00174af:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00174b6:	50                   	push   eax
c00174b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00174bb:	50                   	push   eax
c00174bc:	e8 84 d1 fe ff       	call   c0004645 <f_stat>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00174cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00174d2:	85 c0                	test   eax,eax
c00174d4:	75 06                	jne    c00174dc <FAT::exists(char const*)+0x64>
c00174d6:	b0 01                	mov    al,0x1
c00174d8:	eb 06                	jmp    c00174e0 <FAT::exists(char const*)+0x68>
c00174da:	66 90                	xchg   ax,ax
c00174dc:	b0 00                	mov    al,0x0
c00174de:	66 90                	xchg   ax,ax
c00174e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174e6:	c3                   	ret    
c00174e7:	90                   	nop

c00174e8 <isoReadDiscSectorHelper>:
c00174e8:	83 ec 2c             	sub    esp,0x2c
c00174eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00174f3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00174f8:	83 e8 41             	sub    eax,0x41
c00174fb:	8b 0c 85 a0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf60]
c0017502:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017506:	ba 00 00 00 00       	mov    edx,0x0
c001750b:	83 ec 0c             	sub    esp,0xc
c001750e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017512:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017516:	52                   	push   edx
c0017517:	50                   	push   eax
c0017518:	51                   	push   ecx
c0017519:	e8 22 59 ff ff       	call   c000ce40 <LogicalDisk::read(unsigned long long, int, void*)>
c001751e:	83 c4 20             	add    esp,0x20
c0017521:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017525:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001752a:	74 0c                	je     c0017538 <isoReadDiscSectorHelper+0x50>
c001752c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017530:	c1 e0 0b             	shl    eax,0xb
c0017533:	eb 0b                	jmp    c0017540 <isoReadDiscSectorHelper+0x58>
c0017535:	8d 76 00             	lea    esi,[esi+0x0]
c0017538:	b8 00 00 00 00       	mov    eax,0x0
c001753d:	8d 76 00             	lea    esi,[esi+0x0]
c0017540:	83 c4 2c             	add    esp,0x2c
c0017543:	c3                   	ret    

c0017544 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017544:	b8 08 00 00 00       	mov    eax,0x8
c0017549:	c3                   	ret    

c001754a <ISO9660::seek(void*, unsigned long long)>:
c001754a:	53                   	push   ebx
c001754b:	b8 04 00 00 00       	mov    eax,0x4
c0017550:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017554:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017558:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001755c:	85 d2                	test   edx,edx
c001755e:	74 17                	je     c0017577 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0017560:	89 c8                	mov    eax,ecx
c0017562:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0017565:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0017568:	b8 01 00 00 00       	mov    eax,0x1
c001756d:	73 08                	jae    c0017577 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001756f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0017572:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0017575:	31 c0                	xor    eax,eax
c0017577:	5b                   	pop    ebx
c0017578:	c3                   	ret    
c0017579:	90                   	nop

c001757a <ISO9660::tell(void*, unsigned long long*)>:
c001757a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001757e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017582:	85 d2                	test   edx,edx
c0017584:	74 12                	je     c0017598 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0017586:	85 c0                	test   eax,eax
c0017588:	74 0e                	je     c0017598 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001758a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001758d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0017590:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0017593:	89 10                	mov    DWORD PTR [eax],edx
c0017595:	31 c0                	xor    eax,eax
c0017597:	c3                   	ret    
c0017598:	b8 04 00 00 00       	mov    eax,0x4
c001759d:	c3                   	ret    

c001759e <ISO9660::getName()>:
c001759e:	b8 90 f1 01 c0       	mov    eax,0xc001f190
c00175a3:	c3                   	ret    

c00175a4 <ISO9660::stat(void*, unsigned long long*)>:
c00175a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00175a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ac:	85 d2                	test   edx,edx
c00175ae:	74 12                	je     c00175c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00175b0:	85 c0                	test   eax,eax
c00175b2:	74 0e                	je     c00175c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00175b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00175b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00175ba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00175bd:	89 10                	mov    DWORD PTR [eax],edx
c00175bf:	31 c0                	xor    eax,eax
c00175c1:	c3                   	ret    
c00175c2:	b8 04 00 00 00       	mov    eax,0x4
c00175c7:	c3                   	ret    

c00175c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00175c8:	b8 01 00 00 00       	mov    eax,0x1
c00175cd:	c3                   	ret    

c00175ce <ISO9660::unlink(char const*)>:
c00175ce:	b8 01 00 00 00       	mov    eax,0x1
c00175d3:	c3                   	ret    

c00175d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00175d4:	b8 01 00 00 00       	mov    eax,0x1
c00175d9:	c3                   	ret    

c00175da <ISO9660::rename(char const*, char const*)>:
c00175da:	b8 01 00 00 00       	mov    eax,0x1
c00175df:	c3                   	ret    

c00175e0 <ISO9660::mkdir(char const*)>:
c00175e0:	b8 01 00 00 00       	mov    eax,0x1
c00175e5:	c3                   	ret    

c00175e6 <ISO9660::close(void*)>:
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	b8 04 00 00 00       	mov    eax,0x4
c00175ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00175f2:	85 d2                	test   edx,edx
c00175f4:	74 0e                	je     c0017604 <ISO9660::close(void*)+0x1e>
c00175f6:	83 ec 0c             	sub    esp,0xc
c00175f9:	52                   	push   edx
c00175fa:	e8 da 03 ff ff       	call   c00079d9 <free>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	31 c0                	xor    eax,eax
c0017604:	83 c4 0c             	add    esp,0xc
c0017607:	c3                   	ret    

c0017608 <ISO9660::closeDir(void*)>:
c0017608:	83 ec 0c             	sub    esp,0xc
c001760b:	b8 04 00 00 00       	mov    eax,0x4
c0017610:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017614:	85 d2                	test   edx,edx
c0017616:	74 0e                	je     c0017626 <ISO9660::closeDir(void*)+0x1e>
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	52                   	push   edx
c001761c:	e8 b8 03 ff ff       	call   c00079d9 <free>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	31 c0                	xor    eax,eax
c0017626:	83 c4 0c             	add    esp,0xc
c0017629:	c3                   	ret    

c001762a <ISO9660::~ISO9660()>:
c001762a:	83 ec 0c             	sub    esp,0xc
c001762d:	ba 08 f2 01 c0       	mov    edx,0xc001f208
c0017632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017636:	89 10                	mov    DWORD PTR [eax],edx
c0017638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	50                   	push   eax
c0017640:	e8 59 34 ff ff       	call   c000aa9e <Filesystem::~Filesystem()>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	90                   	nop
c0017649:	83 c4 0c             	add    esp,0xc
c001764c:	c3                   	ret    
c001764d:	90                   	nop

c001764e <ISO9660::~ISO9660()>:
c001764e:	83 ec 0c             	sub    esp,0xc
c0017651:	83 ec 0c             	sub    esp,0xc
c0017654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017658:	e8 cd ff ff ff       	call   c001762a <ISO9660::~ISO9660()>
c001765d:	83 c4 10             	add    esp,0x10
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	6a 08                	push   0x8
c0017665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017669:	e8 f4 2f ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	83 c4 0c             	add    esp,0xc
c0017674:	c3                   	ret    

c0017675 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0017675:	55                   	push   ebp
c0017676:	31 c9                	xor    ecx,ecx
c0017678:	57                   	push   edi
c0017679:	56                   	push   esi
c001767a:	53                   	push   ebx
c001767b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001767f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017683:	89 eb                	mov    ebx,ebp
c0017685:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0017689:	39 ce                	cmp    esi,ecx
c001768b:	7e 17                	jle    c00176a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001768d:	31 d2                	xor    edx,edx
c001768f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0017693:	7d 13                	jge    c00176a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0017695:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017699:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001769c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001769f:	75 0d                	jne    c00176ae <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00176a1:	42                   	inc    edx
c00176a2:	eb eb                	jmp    c001768f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00176a4:	31 c0                	xor    eax,eax
c00176a6:	eb 0a                	jmp    c00176b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00176a8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00176ac:	eb 04                	jmp    c00176b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00176ae:	41                   	inc    ecx
c00176af:	43                   	inc    ebx
c00176b0:	eb d7                	jmp    c0017689 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00176b2:	5b                   	pop    ebx
c00176b3:	5e                   	pop    esi
c00176b4:	5f                   	pop    edi
c00176b5:	5d                   	pop    ebp
c00176b6:	c3                   	ret    

c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00176b7:	57                   	push   edi
c00176b8:	56                   	push   esi
c00176b9:	53                   	push   ebx
c00176ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00176be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176c6:	39 35 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,esi
c00176cc:	75 08                	jne    c00176d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00176ce:	38 1d 34 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb34,bl
c00176d4:	74 59                	je     c001772f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	31 d2                	xor    edx,edx
c00176db:	68 e0 41 02 c0       	push   0xc00241e0
c00176e0:	0f be c3             	movsx  eax,bl
c00176e3:	6a 01                	push   0x1
c00176e5:	52                   	push   edx
c00176e6:	56                   	push   esi
c00176e7:	ff 34 85 9c 2f 02 c0 	push   DWORD PTR [eax*4-0x3ffdd064]
c00176ee:	e8 4d 57 ff ff       	call   c000ce40 <LogicalDisk::read(unsigned long long, int, void*)>
c00176f3:	83 c4 20             	add    esp,0x20
c00176f6:	85 c0                	test   eax,eax
c00176f8:	75 0e                	jne    c0017708 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00176fa:	89 35 c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,esi
c0017700:	88 1d 34 fb 01 c0    	mov    BYTE PTR ds:0xc001fb34,bl
c0017706:	eb 27                	jmp    c001772f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017708:	83 ec 0c             	sub    esp,0xc
c001770b:	68 ab f1 01 c0       	push   0xc001f1ab
c0017710:	e8 43 30 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0017715:	83 c4 0c             	add    esp,0xc
c0017718:	68 00 08 00 00       	push   0x800
c001771d:	6a 00                	push   0x0
c001771f:	57                   	push   edi
c0017720:	e8 cb 8d fe ff       	call   c00004f0 <memset>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	b8 01 00 00 00       	mov    eax,0x1
c001772d:	eb 0e                	jmp    c001773d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c001772f:	be e0 41 02 c0       	mov    esi,0xc00241e0
c0017734:	b9 00 08 00 00       	mov    ecx,0x800
c0017739:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001773b:	31 c0                	xor    eax,eax
c001773d:	5b                   	pop    ebx
c001773e:	5e                   	pop    esi
c001773f:	5f                   	pop    edi
c0017740:	c3                   	ret    
c0017741:	90                   	nop

c0017742 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017742:	81 ec 10 08 00 00    	sub    esp,0x810
c0017748:	c7 05 c0 41 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00241c0,0xdeadbeef
c0017752:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017759:	83 c0 41             	add    eax,0x41
c001775c:	0f be c0             	movsx  eax,al
c001775f:	50                   	push   eax
c0017760:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017764:	50                   	push   eax
c0017765:	6a 10                	push   0x10
c0017767:	e8 4b ff ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001776c:	83 c4 10             	add    esp,0x10
c001776f:	31 d2                	xor    edx,edx
c0017771:	85 c0                	test   eax,eax
c0017773:	75 24                	jne    c0017799 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017775:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001777a:	75 1d                	jne    c0017799 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001777c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017781:	75 16                	jne    c0017799 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017783:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017788:	75 0f                	jne    c0017799 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001778a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001778f:	75 08                	jne    c0017799 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0017791:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017796:	0f 94 c2             	sete   dl
c0017799:	88 d0                	mov    al,dl
c001779b:	81 c4 0c 08 00 00    	add    esp,0x80c
c00177a1:	c3                   	ret    

c00177a2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00177a2:	55                   	push   ebp
c00177a3:	57                   	push   edi
c00177a4:	56                   	push   esi
c00177a5:	53                   	push   ebx
c00177a6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00177ac:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00177b3:	85 ed                	test   ebp,ebp
c00177b5:	0f 84 da 01 00 00    	je     c0017995 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00177bb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00177c3:	0f 84 cc 01 00 00    	je     c0017995 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00177c9:	b8 01 00 00 00       	mov    eax,0x1
c00177ce:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00177d2:	0f 85 c2 01 00 00    	jne    c001799a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00177d8:	31 d2                	xor    edx,edx
c00177da:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00177e1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00177e4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00177e7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00177ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00177ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00177f1:	01 c8                	add    eax,ecx
c00177f3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00177f6:	11 da                	adc    edx,ebx
c00177f8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00177fc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017800:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017804:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017808:	19 d7                	sbb    edi,edx
c001780a:	72 11                	jb     c001781d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001780c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001780f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0017813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001781b:	eb 0c                	jmp    c0017829 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001781d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0017821:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017825:	29 ce                	sub    esi,ecx
c0017827:	19 df                	sbb    edi,ebx
c0017829:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001782c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001782f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0017833:	c1 e0 0b             	shl    eax,0xb
c0017836:	01 c8                	add    eax,ecx
c0017838:	11 da                	adc    edx,ebx
c001783a:	89 04 24             	mov    DWORD PTR [esp],eax
c001783d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017841:	51                   	push   ecx
c0017842:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017846:	50                   	push   eax
c0017847:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001784b:	53                   	push   ebx
c001784c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017854:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017858:	50                   	push   eax
c0017859:	e8 59 fe ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001785e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017861:	b8 00 08 00 00       	mov    eax,0x800
c0017866:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001786c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0017870:	29 d0                	sub    eax,edx
c0017872:	83 c4 10             	add    esp,0x10
c0017875:	89 f9                	mov    ecx,edi
c0017877:	39 c6                	cmp    esi,eax
c0017879:	83 d9 00             	sbb    ecx,0x0
c001787c:	7d 1b                	jge    c0017899 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001787e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017883:	75 12                	jne    c0017897 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0017885:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001788c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0017892:	e9 fa 00 00 00       	jmp    c0017991 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0017897:	89 f0                	mov    eax,esi
c0017899:	01 d3                	add    ebx,edx
c001789b:	31 d2                	xor    edx,edx
c001789d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00178a1:	39 c2                	cmp    edx,eax
c00178a3:	7d 14                	jge    c00178b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00178a5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00178ac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00178b0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00178b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00178b6:	42                   	inc    edx
c00178b7:	eb e8                	jmp    c00178a1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00178b9:	89 c2                	mov    edx,eax
c00178bb:	85 c0                	test   eax,eax
c00178bd:	79 02                	jns    c00178c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00178bf:	31 d2                	xor    edx,edx
c00178c1:	01 c2                	add    edx,eax
c00178c3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178c6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00178cd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00178d1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00178d5:	99                   	cdq    
c00178d6:	01 c1                	add    ecx,eax
c00178d8:	11 d3                	adc    ebx,edx
c00178da:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00178de:	29 c6                	sub    esi,eax
c00178e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00178e4:	19 d7                	sbb    edi,edx
c00178e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00178e9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00178ed:	b8 ff 07 00 00       	mov    eax,0x7ff
c00178f2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00178f5:	b8 00 00 00 00       	mov    eax,0x0
c00178fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00178fe:	7d 43                	jge    c0017943 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0017900:	52                   	push   edx
c0017901:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017905:	50                   	push   eax
c0017906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001790a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001790e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017912:	0f ac d0 0b          	shrd   eax,edx,0xb
c0017916:	50                   	push   eax
c0017917:	e8 9b fd ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001791c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0017924:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0017929:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0017931:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0017939:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001793e:	83 c4 10             	add    esp,0x10
c0017941:	eb aa                	jmp    c00178ed <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0017943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017947:	0b 04 24             	or     eax,DWORD PTR [esp]
c001794a:	74 2a                	je     c0017976 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001794c:	50                   	push   eax
c001794d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017951:	50                   	push   eax
c0017952:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017956:	56                   	push   esi
c0017957:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001795b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001795f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0017963:	51                   	push   ecx
c0017964:	e8 4e fd ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017969:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001796d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001797d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017981:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017985:	89 18                	mov    DWORD PTR [eax],ebx
c0017987:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001798b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001798e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017991:	31 c0                	xor    eax,eax
c0017993:	eb 05                	jmp    c001799a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0017995:	b8 04 00 00 00       	mov    eax,0x4
c001799a:	81 c4 2c 08 00 00    	add    esp,0x82c
c00179a0:	5b                   	pop    ebx
c00179a1:	5e                   	pop    esi
c00179a2:	5f                   	pop    edi
c00179a3:	5d                   	pop    ebp
c00179a4:	c3                   	ret    
c00179a5:	90                   	nop

c00179a6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00179a6:	55                   	push   ebp
c00179a7:	57                   	push   edi
c00179a8:	56                   	push   esi
c00179a9:	53                   	push   ebx
c00179aa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00179b0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00179b7:	85 ed                	test   ebp,ebp
c00179b9:	0f 84 4f 02 00 00    	je     c0017c0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c00179bf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00179c7:	0f 84 41 02 00 00    	je     c0017c0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c00179cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00179d0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00179d3:	75 0a                	jne    c00179df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00179d5:	b8 07 00 00 00       	mov    eax,0x7
c00179da:	e9 34 02 00 00       	jmp    c0017c13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c00179df:	50                   	push   eax
c00179e0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00179e4:	50                   	push   eax
c00179e5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00179ec:	53                   	push   ebx
c00179ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00179f0:	c1 e0 0b             	shl    eax,0xb
c00179f3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00179f6:	c1 e8 0b             	shr    eax,0xb
c00179f9:	50                   	push   eax
c00179fa:	e8 b8 fc ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00179ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	89 c1                	mov    ecx,eax
c0017a07:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017a0a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017a10:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0017a13:	84 db                	test   bl,bl
c0017a15:	0f 85 8b 00 00 00    	jne    c0017aa6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0017a1b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0017a21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0017a24:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0017a2a:	29 c6                	sub    esi,eax
c0017a2c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0017a30:	89 f3                	mov    ebx,esi
c0017a32:	89 f1                	mov    ecx,esi
c0017a34:	c1 fb 1f             	sar    ebx,0x1f
c0017a37:	01 f0                	add    eax,esi
c0017a39:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0017a3c:	11 da                	adc    edx,ebx
c0017a3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017a45:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0017a48:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017a4b:	89 d8                	mov    eax,ebx
c0017a4d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0017a51:	ba 00 00 00 00       	mov    edx,0x0
c0017a56:	19 f8                	sbb    eax,edi
c0017a58:	b8 00 00 00 00       	mov    eax,0x0
c0017a5d:	73 08                	jae    c0017a67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0017a5f:	89 f0                	mov    eax,esi
c0017a61:	89 fa                	mov    edx,edi
c0017a63:	29 c8                	sub    eax,ecx
c0017a65:	19 da                	sbb    edx,ebx
c0017a67:	89 d7                	mov    edi,edx
c0017a69:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017a6c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017a6f:	09 c7                	or     edi,eax
c0017a71:	0f 84 5e ff ff ff    	je     c00179d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0017a77:	57                   	push   edi
c0017a78:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0017a7c:	50                   	push   eax
c0017a7d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0017a84:	53                   	push   ebx
c0017a85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017a88:	c1 e0 0b             	shl    eax,0xb
c0017a8b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017a8f:	c1 e8 0b             	shr    eax,0xb
c0017a92:	50                   	push   eax
c0017a93:	e8 1f fc ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017a98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	25 ff 07 00 00       	and    eax,0x7ff
c0017aa3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0017aa6:	31 ff                	xor    edi,edi
c0017aa8:	56                   	push   esi
c0017aa9:	6a 28                	push   0x28
c0017aab:	6a 00                	push   0x0
c0017aad:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ab1:	50                   	push   eax
c0017ab2:	e8 39 8a fe ff       	call   c00004f0 <memset>
c0017ab7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017aba:	25 ff 07 00 00       	and    eax,0x7ff
c0017abf:	89 c6                	mov    esi,eax
c0017ac1:	83 c6 21             	add    esi,0x21
c0017ac4:	83 d7 00             	adc    edi,0x0
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	31 c9                	xor    ecx,ecx
c0017acc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0017ad3:	83 f9 28             	cmp    ecx,0x28
c0017ad6:	88 04 24             	mov    BYTE PTR [esp],al
c0017ad9:	0f 94 c2             	sete   dl
c0017adc:	88 d0                	mov    al,dl
c0017ade:	ba ff 07 00 00       	mov    edx,0x7ff
c0017ae3:	39 f2                	cmp    edx,esi
c0017ae5:	ba 00 00 00 00       	mov    edx,0x0
c0017aea:	19 fa                	sbb    edx,edi
c0017aec:	0f 92 c2             	setb   dl
c0017aef:	09 c2                	or     edx,eax
c0017af1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0017af5:	0f 94 c0             	sete   al
c0017af8:	08 d0                	or     al,dl
c0017afa:	75 16                	jne    c0017b12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017afc:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0017b00:	74 10                	je     c0017b12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0017b02:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017b05:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0017b09:	41                   	inc    ecx
c0017b0a:	83 c6 01             	add    esi,0x1
c0017b0d:	83 d7 00             	adc    edi,0x0
c0017b10:	eb ba                	jmp    c0017acc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0017b12:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0017b19:	83 ec 0c             	sub    esp,0xc
c0017b1c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0017b20:	56                   	push   esi
c0017b21:	e8 3a 8a fe ff       	call   c0000560 <strlen>
c0017b26:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0017b2d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017b31:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017b39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017b3c:	5a                   	pop    edx
c0017b3d:	25 ff 07 00 00       	and    eax,0x7ff
c0017b42:	59                   	pop    ecx
c0017b43:	01 f8                	add    eax,edi
c0017b45:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0017b4c:	0f 95 c0             	setne  al
c0017b4f:	0f b6 c0             	movzx  eax,al
c0017b52:	40                   	inc    eax
c0017b53:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0017b57:	56                   	push   esi
c0017b58:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017b5c:	50                   	push   eax
c0017b5d:	e8 be 8a fe ff       	call   c0000620 <strcpy>
c0017b62:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	84 c0                	test   al,al
c0017b6b:	75 21                	jne    c0017b8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0017b6d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0017b75:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017b7d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017b85:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0017b8c:	eb 28                	jmp    c0017bb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0017b8e:	fe c8                	dec    al
c0017b90:	75 24                	jne    c0017bb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0017b92:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0017b9a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ba2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0017baa:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0017bb1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0017bb6:	8d 74 24 40          	lea    esi,[esp+0x40]
c0017bba:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0017bc1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0017bc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bca:	0f b6 f3             	movzx  esi,bl
c0017bcd:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0017bd4:	31 db                	xor    ebx,ebx
c0017bd6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017bdc:	89 df                	mov    edi,ebx
c0017bde:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0017be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be4:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0017be7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017bea:	39 c6                	cmp    esi,eax
c0017bec:	19 d7                	sbb    edi,edx
c0017bee:	72 10                	jb     c0017c00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0017bf0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0017bf7:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0017bfe:	eb 0a                	jmp    c0017c0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0017c00:	29 f0                	sub    eax,esi
c0017c02:	19 da                	sbb    edx,ebx
c0017c04:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0017c07:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0017c0a:	31 c0                	xor    eax,eax
c0017c0c:	eb 05                	jmp    c0017c13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0017c0e:	b8 04 00 00 00       	mov    eax,0x4
c0017c13:	81 c4 5c 09 00 00    	add    esp,0x95c
c0017c19:	5b                   	pop    ebx
c0017c1a:	5e                   	pop    esi
c0017c1b:	5f                   	pop    edi
c0017c1c:	5d                   	pop    ebp
c0017c1d:	c3                   	ret    

c0017c1e <readRoot(unsigned int*, unsigned int*, char)>:
c0017c1e:	57                   	push   edi
c0017c1f:	56                   	push   esi
c0017c20:	81 ec 38 08 00 00    	sub    esp,0x838
c0017c26:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0017c2e:	50                   	push   eax
c0017c2f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017c33:	50                   	push   eax
c0017c34:	6a 10                	push   0x10
c0017c36:	e8 7c fa ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017c3b:	83 c4 10             	add    esp,0x10
c0017c3e:	85 c0                	test   eax,eax
c0017c40:	74 14                	je     c0017c56 <readRoot(unsigned int*, unsigned int*, char)+0x38>
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	68 c6 f1 01 c0       	push   0xc001f1c6
c0017c4a:	e8 09 2b ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	31 c0                	xor    eax,eax
c0017c54:	eb 2e                	jmp    c0017c84 <readRoot(unsigned int*, unsigned int*, char)+0x66>
c0017c56:	8d b4 24 cc 00 00 00 	lea    esi,[esp+0xcc]
c0017c5d:	8d 7c 24 0e          	lea    edi,[esp+0xe]
c0017c61:	b9 22 00 00 00       	mov    ecx,0x22
c0017c66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c68:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
c0017c6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c73:	89 10                	mov    DWORD PTR [eax],edx
c0017c75:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0017c7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c80:	89 10                	mov    DWORD PTR [eax],edx
c0017c82:	b0 01                	mov    al,0x1
c0017c84:	81 c4 34 08 00 00    	add    esp,0x834
c0017c8a:	5e                   	pop    esi
c0017c8b:	5f                   	pop    edi
c0017c8c:	c3                   	ret    

c0017c8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0017c8d:	55                   	push   ebp
c0017c8e:	57                   	push   edi
c0017c8f:	56                   	push   esi
c0017c90:	53                   	push   ebx
c0017c91:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c97:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0017c9e:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017ca5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ca9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0017cad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017cb1:	31 c0                	xor    eax,eax
c0017cb3:	85 db                	test   ebx,ebx
c0017cb5:	0f 84 b0 01 00 00    	je     c0017e6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0017cbb:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0017cbe:	0f 84 a7 01 00 00    	je     c0017e6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0017cc4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0017cc8:	75 03                	jne    c0017ccd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0017cca:	83 c3 02             	add    ebx,0x2
c0017ccd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0017cd0:	75 03                	jne    c0017cd5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x48>
c0017cd2:	43                   	inc    ebx
c0017cd3:	eb f8                	jmp    c0017ccd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0017cd5:	52                   	push   edx
c0017cd6:	68 00 01 00 00       	push   0x100
c0017cdb:	6a 00                	push   0x0
c0017cdd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017ce1:	50                   	push   eax
c0017ce2:	e8 09 88 fe ff       	call   c00004f0 <memset>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	31 d2                	xor    edx,edx
c0017cec:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0017cef:	84 c0                	test   al,al
c0017cf1:	74 21                	je     c0017d14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x87>
c0017cf3:	3c 2f                	cmp    al,0x2f
c0017cf5:	75 0b                	jne    c0017d02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x75>
c0017cf7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0017cfb:	bd 01 00 00 00       	mov    ebp,0x1
c0017d00:	eb 14                	jmp    c0017d16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x89>
c0017d02:	8d 48 9f             	lea    ecx,[eax-0x61]
c0017d05:	80 f9 19             	cmp    cl,0x19
c0017d08:	77 03                	ja     c0017d0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x80>
c0017d0a:	83 e8 20             	sub    eax,0x20
c0017d0d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0017d11:	42                   	inc    edx
c0017d12:	eb d8                	jmp    c0017cec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x5f>
c0017d14:	31 ed                	xor    ebp,ebp
c0017d16:	83 ec 0c             	sub    esp,0xc
c0017d19:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0017d20:	e8 a4 fc fe ff       	call   c00079c9 <malloc>
c0017d25:	89 c6                	mov    esi,eax
c0017d27:	89 c2                	mov    edx,eax
c0017d29:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0017d30:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0017d36:	c1 ef 0b             	shr    edi,0xb
c0017d39:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0017d40:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0017d4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d50:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0017d57:	74 29                	je     c0017d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xf5>
c0017d59:	50                   	push   eax
c0017d5a:	57                   	push   edi
c0017d5b:	52                   	push   edx
c0017d5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0017d60:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0017d67:	e8 4b f9 ff ff       	call   c00176b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017d6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d70:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0017d77:	81 c2 00 08 00 00    	add    edx,0x800
c0017d7d:	83 c4 10             	add    esp,0x10
c0017d80:	eb ca                	jmp    c0017d4c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xbf>
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017d89:	57                   	push   edi
c0017d8a:	e8 d1 87 fe ff       	call   c0000560 <strlen>
c0017d8f:	50                   	push   eax
c0017d90:	57                   	push   edi
c0017d91:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0017d98:	56                   	push   esi
c0017d99:	e8 d7 f8 ff ff       	call   c0017675 <__memmem(unsigned char*, int, unsigned char*, int)>
c0017d9e:	83 c4 20             	add    esp,0x20
c0017da1:	85 c0                	test   eax,eax
c0017da3:	75 13                	jne    c0017db8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x12b>
c0017da5:	83 ec 0c             	sub    esp,0xc
c0017da8:	56                   	push   esi
c0017da9:	e8 2b fc fe ff       	call   c00079d9 <free>
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	31 c0                	xor    eax,eax
c0017db3:	e9 b3 00 00 00       	jmp    c0017e6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0017db8:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0017dbc:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0017dc0:	c1 e7 08             	shl    edi,0x8
c0017dc3:	c1 e2 10             	shl    edx,0x10
c0017dc6:	09 d7                	or     edi,edx
c0017dc8:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0017dcc:	09 d7                	or     edi,edx
c0017dce:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0017dd2:	c1 e2 18             	shl    edx,0x18
c0017dd5:	09 d7                	or     edi,edx
c0017dd7:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0017ddb:	89 d1                	mov    ecx,edx
c0017ddd:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0017de1:	c1 e1 08             	shl    ecx,0x8
c0017de4:	c1 e2 10             	shl    edx,0x10
c0017de7:	09 ca                	or     edx,ecx
c0017de9:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0017ded:	09 ca                	or     edx,ecx
c0017def:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017df3:	c1 e1 18             	shl    ecx,0x18
c0017df6:	09 ca                	or     edx,ecx
c0017df8:	89 e9                	mov    ecx,ebp
c0017dfa:	84 c9                	test   cl,cl
c0017dfc:	74 3c                	je     c0017e3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1ad>
c0017dfe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017e02:	83 ec 0c             	sub    esp,0xc
c0017e05:	56                   	push   esi
c0017e06:	e8 ce fb fe ff       	call   c00079d9 <free>
c0017e0b:	83 c4 0c             	add    esp,0xc
c0017e0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017e15:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017e1a:	50                   	push   eax
c0017e1b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017e22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017e29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e2d:	52                   	push   edx
c0017e2e:	57                   	push   edi
c0017e2f:	53                   	push   ebx
c0017e30:	e8 58 fe ff ff       	call   c0017c8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017e35:	83 c4 20             	add    esp,0x20
c0017e38:	eb 31                	jmp    c0017e6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0017e3a:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0017e3d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017e44:	d0 e8                	shr    al,1
c0017e46:	89 3b                	mov    DWORD PTR [ebx],edi
c0017e48:	83 e0 01             	and    eax,0x1
c0017e4b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017e52:	83 ec 0c             	sub    esp,0xc
c0017e55:	89 13                	mov    DWORD PTR [ebx],edx
c0017e57:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0017e5e:	89 03                	mov    DWORD PTR [ebx],eax
c0017e60:	56                   	push   esi
c0017e61:	e8 73 fb fe ff       	call   c00079d9 <free>
c0017e66:	83 c4 10             	add    esp,0x10
c0017e69:	b0 01                	mov    al,0x1
c0017e6b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e71:	5b                   	pop    ebx
c0017e72:	5e                   	pop    esi
c0017e73:	5f                   	pop    edi
c0017e74:	5d                   	pop    ebp
c0017e75:	c3                   	ret    

c0017e76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017e76:	55                   	push   ebp
c0017e77:	57                   	push   edi
c0017e78:	56                   	push   esi
c0017e79:	53                   	push   ebx
c0017e7a:	83 ec 20             	sub    esp,0x20
c0017e7d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0017e81:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017e85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e8d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e95:	c7 45 00 ff ff ff ff 	mov    DWORD PTR [ebp+0x0],0xffffffff
c0017e9c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0017ea1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0017ea7:	57                   	push   edi
c0017ea8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017eac:	50                   	push   eax
c0017ead:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017eb1:	50                   	push   eax
c0017eb2:	e8 67 fd ff ff       	call   c0017c1e <readRoot(unsigned int*, unsigned int*, char)>
c0017eb7:	83 c4 10             	add    esp,0x10
c0017eba:	88 c3                	mov    bl,al
c0017ebc:	84 c0                	test   al,al
c0017ebe:	75 12                	jne    c0017ed2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x5c>
c0017ec0:	83 ec 0c             	sub    esp,0xc
c0017ec3:	68 d6 f1 01 c0       	push   0xc001f1d6
c0017ec8:	e8 8b 28 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	eb 4b                	jmp    c0017f1d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0017ed2:	83 ec 0c             	sub    esp,0xc
c0017ed5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017ed9:	e8 82 86 fe ff       	call   c0000560 <strlen>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	83 f8 03             	cmp    eax,0x3
c0017ee4:	77 19                	ja     c0017eff <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x89>
c0017ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017eed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ef1:	89 06                	mov    DWORD PTR [esi],eax
c0017ef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ef7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017efd:	eb 1e                	jmp    c0017f1d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0017eff:	50                   	push   eax
c0017f00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017f04:	57                   	push   edi
c0017f05:	56                   	push   esi
c0017f06:	55                   	push   ebp
c0017f07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017f13:	e8 75 fd ff ff       	call   c0017c8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017f18:	83 c4 20             	add    esp,0x20
c0017f1b:	88 c3                	mov    bl,al
c0017f1d:	83 c4 1c             	add    esp,0x1c
c0017f20:	88 d8                	mov    al,bl
c0017f22:	5b                   	pop    ebx
c0017f23:	5e                   	pop    esi
c0017f24:	5f                   	pop    edi
c0017f25:	5d                   	pop    ebp
c0017f26:	c3                   	ret    
c0017f27:	90                   	nop

c0017f28 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017f28:	57                   	push   edi
c0017f29:	56                   	push   esi
c0017f2a:	53                   	push   ebx
c0017f2b:	83 ec 10             	sub    esp,0x10
c0017f2e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017f32:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017f36:	85 ff                	test   edi,edi
c0017f38:	0f 84 9f 00 00 00    	je     c0017fdd <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c0017f3e:	85 f6                	test   esi,esi
c0017f40:	0f 84 97 00 00 00    	je     c0017fdd <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c0017f46:	b8 03 00 00 00       	mov    eax,0x3
c0017f4b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017f50:	0f 85 8c 00 00 00    	jne    c0017fe2 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c0017f56:	83 ec 0c             	sub    esp,0xc
c0017f59:	6a 1c                	push   0x1c
c0017f5b:	e8 69 fa fe ff       	call   c00079c9 <malloc>
c0017f60:	89 07                	mov    DWORD PTR [edi],eax
c0017f62:	89 c3                	mov    ebx,eax
c0017f64:	58                   	pop    eax
c0017f65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f69:	50                   	push   eax
c0017f6a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017f6d:	50                   	push   eax
c0017f6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f72:	50                   	push   eax
c0017f73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f77:	50                   	push   eax
c0017f78:	56                   	push   esi
c0017f79:	e8 f8 fe ff ff       	call   c0017e76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017f7e:	83 c4 20             	add    esp,0x20
c0017f81:	84 c0                	test   al,al
c0017f83:	74 07                	je     c0017f8c <ISO9660::open(char const*, void**, FileOpenMode)+0x64>
c0017f85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f8a:	74 1b                	je     c0017fa7 <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	68 e9 f1 01 c0       	push   0xc001f1e9
c0017f94:	e8 bf 27 ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0017f99:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	b8 01 00 00 00       	mov    eax,0x1
c0017fa5:	eb 3b                	jmp    c0017fe2 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c0017fa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fab:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017faf:	89 03                	mov    DWORD PTR [ebx],eax
c0017fb1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017fc3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017fca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017fcd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0017fd4:	8a 06                	mov    al,BYTE PTR [esi]
c0017fd6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017fd9:	31 c0                	xor    eax,eax
c0017fdb:	eb 05                	jmp    c0017fe2 <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c0017fdd:	b8 04 00 00 00       	mov    eax,0x4
c0017fe2:	83 c4 10             	add    esp,0x10
c0017fe5:	5b                   	pop    ebx
c0017fe6:	5e                   	pop    esi
c0017fe7:	5f                   	pop    edi
c0017fe8:	c3                   	ret    
c0017fe9:	90                   	nop

c0017fea <ISO9660::exists(char const*)>:
c0017fea:	83 ec 28             	sub    esp,0x28
c0017fed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ff1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0017ff5:	52                   	push   edx
c0017ff6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0017ff9:	52                   	push   edx
c0017ffa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017ffe:	52                   	push   edx
c0017fff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018003:	52                   	push   edx
c0018004:	50                   	push   eax
c0018005:	e8 6c fe ff ff       	call   c0017e76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001800a:	83 c4 3c             	add    esp,0x3c
c001800d:	c3                   	ret    

c001800e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001800e:	56                   	push   esi
c001800f:	53                   	push   ebx
c0018010:	83 ec 14             	sub    esp,0x14
c0018013:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018017:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001801b:	85 db                	test   ebx,ebx
c001801d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018021:	0f 94 c2             	sete   dl
c0018024:	85 f6                	test   esi,esi
c0018026:	0f 94 c0             	sete   al
c0018029:	08 c2                	or     dl,al
c001802b:	75 68                	jne    c0018095 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001802d:	85 c9                	test   ecx,ecx
c001802f:	74 64                	je     c0018095 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0018031:	83 ec 0c             	sub    esp,0xc
c0018034:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018037:	8d 44 24 18          	lea    eax,[esp+0x18]
c001803b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018041:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018048:	50                   	push   eax
c0018049:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001804c:	50                   	push   eax
c001804d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018051:	50                   	push   eax
c0018052:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018056:	50                   	push   eax
c0018057:	51                   	push   ecx
c0018058:	e8 19 fe ff ff       	call   c0017e76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001805d:	83 c4 20             	add    esp,0x20
c0018060:	ba 01 00 00 00       	mov    edx,0x1
c0018065:	84 c0                	test   al,al
c0018067:	74 31                	je     c001809a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018069:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001806d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018074:	89 03                	mov    DWORD PTR [ebx],eax
c0018076:	ba 00 00 00 00       	mov    edx,0x0
c001807b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001807f:	85 c0                	test   eax,eax
c0018081:	0f 95 06             	setne  BYTE PTR [esi]
c0018084:	74 14                	je     c001809a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018086:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001808c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018093:	eb 05                	jmp    c001809a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0018095:	ba 04 00 00 00       	mov    edx,0x4
c001809a:	83 c4 14             	add    esp,0x14
c001809d:	89 d0                	mov    eax,edx
c001809f:	5b                   	pop    ebx
c00180a0:	5e                   	pop    esi
c00180a1:	c3                   	ret    

c00180a2 <ISO9660::openDir(char const*, void**)>:
c00180a2:	57                   	push   edi
c00180a3:	56                   	push   esi
c00180a4:	53                   	push   ebx
c00180a5:	83 ec 10             	sub    esp,0x10
c00180a8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00180ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00180b0:	85 ff                	test   edi,edi
c00180b2:	74 7b                	je     c001812f <ISO9660::openDir(char const*, void**)+0x8d>
c00180b4:	85 f6                	test   esi,esi
c00180b6:	74 77                	je     c001812f <ISO9660::openDir(char const*, void**)+0x8d>
c00180b8:	83 ec 0c             	sub    esp,0xc
c00180bb:	6a 1c                	push   0x1c
c00180bd:	e8 07 f9 fe ff       	call   c00079c9 <malloc>
c00180c2:	89 07                	mov    DWORD PTR [edi],eax
c00180c4:	89 c3                	mov    ebx,eax
c00180c6:	58                   	pop    eax
c00180c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180cb:	50                   	push   eax
c00180cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00180cf:	50                   	push   eax
c00180d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00180d4:	50                   	push   eax
c00180d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00180d9:	50                   	push   eax
c00180da:	56                   	push   esi
c00180db:	e8 96 fd ff ff       	call   c0017e76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00180e0:	83 c4 20             	add    esp,0x20
c00180e3:	84 c0                	test   al,al
c00180e5:	74 07                	je     c00180ee <ISO9660::openDir(char const*, void**)+0x4c>
c00180e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180ec:	75 0b                	jne    c00180f9 <ISO9660::openDir(char const*, void**)+0x57>
c00180ee:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00180f2:	b8 01 00 00 00       	mov    eax,0x1
c00180f7:	eb 3b                	jmp    c0018134 <ISO9660::openDir(char const*, void**)+0x92>
c00180f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180fd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0018101:	89 03                	mov    DWORD PTR [ebx],eax
c0018103:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001810a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001810e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0018115:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001811c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001811f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0018126:	8a 06                	mov    al,BYTE PTR [esi]
c0018128:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001812b:	31 c0                	xor    eax,eax
c001812d:	eb 05                	jmp    c0018134 <ISO9660::openDir(char const*, void**)+0x92>
c001812f:	b8 04 00 00 00       	mov    eax,0x4
c0018134:	83 c4 10             	add    esp,0x10
c0018137:	5b                   	pop    ebx
c0018138:	5e                   	pop    esi
c0018139:	5f                   	pop    edi
c001813a:	c3                   	ret    
c001813b:	90                   	nop

c001813c <ISO9660::ISO9660()>:
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018143:	83 ec 0c             	sub    esp,0xc
c0018146:	50                   	push   eax
c0018147:	e8 2e 29 ff ff       	call   c000aa7a <Filesystem::Filesystem()>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	ba 08 f2 01 c0       	mov    edx,0xc001f208
c0018154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018158:	89 10                	mov    DWORD PTR [eax],edx
c001815a:	90                   	nop
c001815b:	83 c4 0c             	add    esp,0xc
c001815e:	c3                   	ret    
c001815f:	90                   	nop

c0018160 <SoundCard::beginPlayback()>:
c0018160:	c7 44 24 04 68 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f268
c0018168:	e9 3a 81 ff ff       	jmp    c00102a7 <Krnl::panic(char const*)>
c001816d:	90                   	nop

c001816e <SoundCard::stopPlayback()>:
c001816e:	c7 44 24 04 68 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f268
c0018176:	e9 2c 81 ff ff       	jmp    c00102a7 <Krnl::panic(char const*)>
c001817b:	90                   	nop

c001817c <SoundCard::SoundCard(char const*)>:
c001817c:	83 ec 1c             	sub    esp,0x1c
c001817f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018183:	83 ec 08             	sub    esp,0x8
c0018186:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001818a:	50                   	push   eax
c001818b:	e8 a0 3b ff ff       	call   c000bd30 <Device::Device(char const*)>
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	ba b4 f2 01 c0       	mov    edx,0xc001f2b4
c0018198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819c:	89 10                	mov    DWORD PTR [eax],edx
c001819e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181a2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00181a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ad:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00181b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181bb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00181c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00181d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00181e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00181e9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00181ee:	7f 19                	jg     c0018209 <SoundCard::SoundCard(char const*)+0x8d>
c00181f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00181f8:	83 c2 54             	add    edx,0x54
c00181fb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018203:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018207:	eb e0                	jmp    c00181e9 <SoundCard::SoundCard(char const*)+0x6d>
c0018209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018214:	90                   	nop
c0018215:	83 c4 1c             	add    esp,0x1c
c0018218:	c3                   	ret    
c0018219:	90                   	nop

c001821a <SoundCard::~SoundCard()>:
c001821a:	83 ec 0c             	sub    esp,0xc
c001821d:	ba b4 f2 01 c0       	mov    edx,0xc001f2b4
c0018222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018226:	89 10                	mov    DWORD PTR [eax],edx
c0018228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	50                   	push   eax
c0018230:	e8 65 38 ff ff       	call   c000ba9a <Device::~Device()>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	90                   	nop
c0018239:	83 c4 0c             	add    esp,0xc
c001823c:	c3                   	ret    
c001823d:	90                   	nop

c001823e <SoundCard::~SoundCard()>:
c001823e:	83 ec 0c             	sub    esp,0xc
c0018241:	83 ec 0c             	sub    esp,0xc
c0018244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018248:	e8 cd ff ff ff       	call   c001821a <SoundCard::~SoundCard()>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	83 ec 08             	sub    esp,0x8
c0018253:	68 e8 01 00 00       	push   0x1e8
c0018258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001825c:	e8 01 24 ff ff       	call   c000a662 <operator delete(void*, unsigned long)>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	83 c4 0c             	add    esp,0xc
c0018267:	c3                   	ret    

c0018268 <SoundCard::configureRates(int, int, int)>:
c0018268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001826c:	31 c0                	xor    eax,eax
c001826e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018275:	75 20                	jne    c0018297 <SoundCard::configureRates(int, int, int)+0x2f>
c0018277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001827b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018281:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018285:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001828b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018295:	b0 01                	mov    al,0x1
c0018297:	c3                   	ret    

c0018298 <SoundCard::getSamples16(int, short*)>:
c0018298:	55                   	push   ebp
c0018299:	57                   	push   edi
c001829a:	31 ff                	xor    edi,edi
c001829c:	56                   	push   esi
c001829d:	53                   	push   ebx
c001829e:	31 db                	xor    ebx,ebx
c00182a0:	83 ec 10             	sub    esp,0x10
c00182a3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00182a7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00182ab:	8d 04 36             	lea    eax,[esi+esi*1]
c00182ae:	50                   	push   eax
c00182af:	6a 00                	push   0x0
c00182b1:	55                   	push   ebp
c00182b2:	e8 39 82 fe ff       	call   c00004f0 <memset>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182be:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00182c5:	85 c0                	test   eax,eax
c00182c7:	74 1b                	je     c00182e4 <SoundCard::getSamples16(int, short*)+0x4c>
c00182c9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00182cd:	75 15                	jne    c00182e4 <SoundCard::getSamples16(int, short*)+0x4c>
c00182cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00182d3:	55                   	push   ebp
c00182d4:	56                   	push   esi
c00182d5:	50                   	push   eax
c00182d6:	e8 ed 02 00 00       	call   c00185c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	39 c7                	cmp    edi,eax
c00182e0:	7d 02                	jge    c00182e4 <SoundCard::getSamples16(int, short*)+0x4c>
c00182e2:	89 c7                	mov    edi,eax
c00182e4:	43                   	inc    ebx
c00182e5:	83 fb 20             	cmp    ebx,0x20
c00182e8:	75 d0                	jne    c00182ba <SoundCard::getSamples16(int, short*)+0x22>
c00182ea:	83 c4 0c             	add    esp,0xc
c00182ed:	89 f8                	mov    eax,edi
c00182ef:	5b                   	pop    ebx
c00182f0:	5e                   	pop    esi
c00182f1:	5f                   	pop    edi
c00182f2:	5d                   	pop    ebp
c00182f3:	c3                   	ret    

c00182f4 <SoundCard::getSamples32(int, int*)>:
c00182f4:	55                   	push   ebp
c00182f5:	57                   	push   edi
c00182f6:	31 ff                	xor    edi,edi
c00182f8:	56                   	push   esi
c00182f9:	31 f6                	xor    esi,esi
c00182fb:	53                   	push   ebx
c00182fc:	83 ec 10             	sub    esp,0x10
c00182ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018303:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018307:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001830b:	c1 e0 02             	shl    eax,0x2
c001830e:	50                   	push   eax
c001830f:	6a 00                	push   0x0
c0018311:	55                   	push   ebp
c0018312:	e8 d9 81 fe ff       	call   c00004f0 <memset>
c0018317:	83 c4 10             	add    esp,0x10
c001831a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018321:	85 c0                	test   eax,eax
c0018323:	74 1b                	je     c0018340 <SoundCard::getSamples32(int, int*)+0x4c>
c0018325:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018329:	75 15                	jne    c0018340 <SoundCard::getSamples32(int, int*)+0x4c>
c001832b:	53                   	push   ebx
c001832c:	55                   	push   ebp
c001832d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018331:	50                   	push   eax
c0018332:	e8 55 03 00 00       	call   c001868c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	39 c6                	cmp    esi,eax
c001833c:	7d 02                	jge    c0018340 <SoundCard::getSamples32(int, int*)+0x4c>
c001833e:	89 c6                	mov    esi,eax
c0018340:	47                   	inc    edi
c0018341:	83 ff 20             	cmp    edi,0x20
c0018344:	75 d4                	jne    c001831a <SoundCard::getSamples32(int, int*)+0x26>
c0018346:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001834c:	85 f6                	test   esi,esi
c001834e:	75 0f                	jne    c001835f <SoundCard::getSamples32(int, int*)+0x6b>
c0018350:	84 c0                	test   al,al
c0018352:	74 1b                	je     c001836f <SoundCard::getSamples32(int, int*)+0x7b>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018359:	53                   	push   ebx
c001835a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001835d:	eb 0d                	jmp    c001836c <SoundCard::getSamples32(int, int*)+0x78>
c001835f:	84 c0                	test   al,al
c0018361:	75 0c                	jne    c001836f <SoundCard::getSamples32(int, int*)+0x7b>
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018368:	53                   	push   ebx
c0018369:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	83 c4 0c             	add    esp,0xc
c0018372:	89 f0                	mov    eax,esi
c0018374:	5b                   	pop    ebx
c0018375:	5e                   	pop    esi
c0018376:	5f                   	pop    edi
c0018377:	5d                   	pop    ebp
c0018378:	c3                   	ret    
c0018379:	90                   	nop

c001837a <SoundCard::addChannel(SoundPort*)>:
c001837a:	83 ec 0c             	sub    esp,0xc
c001837d:	31 c0                	xor    eax,eax
c001837f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018383:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001838b:	74 1b                	je     c00183a8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001838d:	40                   	inc    eax
c001838e:	83 f8 20             	cmp    eax,0x20
c0018391:	75 f0                	jne    c0018383 <SoundCard::addChannel(SoundPort*)+0x9>
c0018393:	83 ec 0c             	sub    esp,0xc
c0018396:	68 8d f2 01 c0       	push   0xc001f28d
c001839b:	e8 07 7f ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	83 c8 ff             	or     eax,0xffffffff
c00183a6:	eb 0b                	jmp    c00183b3 <SoundCard::addChannel(SoundPort*)+0x39>
c00183a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183ac:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00183b3:	83 c4 0c             	add    esp,0xc
c00183b6:	c3                   	ret    
c00183b7:	90                   	nop

c00183b8 <SoundCard::removeChannel(int)>:
c00183b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183c0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00183cb:	c3                   	ret    

c00183cc <SoundPort::SoundPort(int, int, int, int)>:
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183d3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00183da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183de:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00183e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183ea:	89 10                	mov    DWORD PTR [eax],edx
c00183ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00183f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018402:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018407:	75 13                	jne    c001841c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001840d:	8b 00                	mov    eax,DWORD PTR [eax]
c001840f:	05 a0 0f 00 00       	add    eax,0xfa0
c0018414:	01 c0                	add    eax,eax
c0018416:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001841a:	66 90                	xchg   ax,ax
c001841c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018420:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018424:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001842b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018436:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018439:	c1 e0 02             	shl    eax,0x2
c001843c:	83 ec 0c             	sub    esp,0xc
c001843f:	50                   	push   eax
c0018440:	e8 84 f5 fe ff       	call   c00079c9 <malloc>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	89 c2                	mov    edx,eax
c001844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018451:	90                   	nop
c0018452:	83 c4 0c             	add    esp,0xc
c0018455:	c3                   	ret    
c0018456:	66 90                	xchg   ax,ax

c0018458 <SoundPort::~SoundPort()>:
c0018458:	83 ec 0c             	sub    esp,0xc
c001845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001845f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018462:	85 c0                	test   eax,eax
c0018464:	74 1e                	je     c0018484 <SoundPort::~SoundPort()+0x2c>
c0018466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001846d:	83 ec 0c             	sub    esp,0xc
c0018470:	50                   	push   eax
c0018471:	e8 63 f5 fe ff       	call   c00079d9 <free>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001847d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018484:	90                   	nop
c0018485:	83 c4 0c             	add    esp,0xc
c0018488:	c3                   	ret    
c0018489:	90                   	nop
c001848a:	66 90                	xchg   ax,ax

c001848c <SoundPort::unpause()>:
c001848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018490:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018494:	c3                   	ret    
c0018495:	90                   	nop
c0018496:	66 90                	xchg   ax,ax

c0018498 <SoundPort::pause()>:
c0018498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001849c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00184a0:	c3                   	ret    
c00184a1:	90                   	nop
c00184a2:	66 90                	xchg   ax,ax

c00184a4 <SoundPort::getBufferUsed()>:
c00184a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00184ab:	c3                   	ret    

c00184ac <SoundPort::getBufferSize()>:
c00184ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00184b3:	c3                   	ret    

c00184b4 <SoundPort::buffer16(short*, int)>:
c00184b4:	55                   	push   ebp
c00184b5:	57                   	push   edi
c00184b6:	56                   	push   esi
c00184b7:	53                   	push   ebx
c00184b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184bc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00184c0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00184c3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00184c6:	74 68                	je     c0018530 <SoundPort::buffer16(short*, int)+0x7c>
c00184c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184cc:	85 c9                	test   ecx,ecx
c00184ce:	7e 60                	jle    c0018530 <SoundPort::buffer16(short*, int)+0x7c>
c00184d0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00184d4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00184d7:	c1 e1 0f             	shl    ecx,0xf
c00184da:	8d 70 01             	lea    esi,[eax+0x1]
c00184dd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00184e0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00184e3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00184e6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00184e9:	74 4d                	je     c0018538 <SoundPort::buffer16(short*, int)+0x84>
c00184eb:	31 f6                	xor    esi,esi
c00184ed:	eb 21                	jmp    c0018510 <SoundPort::buffer16(short*, int)+0x5c>
c00184ef:	90                   	nop
c00184f0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00184f5:	8d 79 01             	lea    edi,[ecx+0x1]
c00184f8:	c1 e3 0f             	shl    ebx,0xf
c00184fb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00184fe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018501:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018504:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018507:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001850a:	74 1c                	je     c0018528 <SoundPort::buffer16(short*, int)+0x74>
c001850c:	89 c6                	mov    esi,eax
c001850e:	66 90                	xchg   ax,ax
c0018510:	8d 46 01             	lea    eax,[esi+0x1]
c0018513:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018517:	75 d7                	jne    c00184f0 <SoundPort::buffer16(short*, int)+0x3c>
c0018519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001851d:	8d 76 00             	lea    esi,[esi+0x0]
c0018520:	5b                   	pop    ebx
c0018521:	5e                   	pop    esi
c0018522:	5f                   	pop    edi
c0018523:	5d                   	pop    ebp
c0018524:	c3                   	ret    
c0018525:	8d 76 00             	lea    esi,[esi+0x0]
c0018528:	5b                   	pop    ebx
c0018529:	8d 46 02             	lea    eax,[esi+0x2]
c001852c:	5e                   	pop    esi
c001852d:	5f                   	pop    edi
c001852e:	5d                   	pop    ebp
c001852f:	c3                   	ret    
c0018530:	5b                   	pop    ebx
c0018531:	31 c0                	xor    eax,eax
c0018533:	5e                   	pop    esi
c0018534:	5f                   	pop    edi
c0018535:	5d                   	pop    ebp
c0018536:	c3                   	ret    
c0018537:	90                   	nop
c0018538:	b8 01 00 00 00       	mov    eax,0x1
c001853d:	eb e1                	jmp    c0018520 <SoundPort::buffer16(short*, int)+0x6c>
c001853f:	90                   	nop

c0018540 <SoundPort::buffer32(int*, int)>:
c0018540:	55                   	push   ebp
c0018541:	57                   	push   edi
c0018542:	56                   	push   esi
c0018543:	53                   	push   ebx
c0018544:	51                   	push   ecx
c0018545:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001854d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018550:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018554:	89 04 24             	mov    DWORD PTR [esp],eax
c0018557:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001855a:	74 5c                	je     c00185b8 <SoundPort::buffer32(int*, int)+0x78>
c001855c:	85 c0                	test   eax,eax
c001855e:	7e 58                	jle    c00185b8 <SoundPort::buffer32(int*, int)+0x78>
c0018560:	8d 71 01             	lea    esi,[ecx+0x1]
c0018563:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018566:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018569:	8b 37                	mov    esi,DWORD PTR [edi]
c001856b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001856e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018571:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018574:	74 4a                	je     c00185c0 <SoundPort::buffer32(int*, int)+0x80>
c0018576:	31 f6                	xor    esi,esi
c0018578:	eb 1e                	jmp    c0018598 <SoundPort::buffer32(int*, int)+0x58>
c001857a:	66 90                	xchg   ax,ax
c001857c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001857f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018582:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018585:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018588:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001858c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001858f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018592:	74 18                	je     c00185ac <SoundPort::buffer32(int*, int)+0x6c>
c0018594:	89 de                	mov    esi,ebx
c0018596:	66 90                	xchg   ax,ax
c0018598:	8d 5e 01             	lea    ebx,[esi+0x1]
c001859b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001859e:	75 dc                	jne    c001857c <SoundPort::buffer32(int*, int)+0x3c>
c00185a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00185a3:	90                   	nop
c00185a4:	5a                   	pop    edx
c00185a5:	5b                   	pop    ebx
c00185a6:	5e                   	pop    esi
c00185a7:	5f                   	pop    edi
c00185a8:	5d                   	pop    ebp
c00185a9:	c3                   	ret    
c00185aa:	66 90                	xchg   ax,ax
c00185ac:	5a                   	pop    edx
c00185ad:	8d 46 02             	lea    eax,[esi+0x2]
c00185b0:	5b                   	pop    ebx
c00185b1:	5e                   	pop    esi
c00185b2:	5f                   	pop    edi
c00185b3:	5d                   	pop    ebp
c00185b4:	c3                   	ret    
c00185b5:	8d 76 00             	lea    esi,[esi+0x0]
c00185b8:	5a                   	pop    edx
c00185b9:	31 c0                	xor    eax,eax
c00185bb:	5b                   	pop    ebx
c00185bc:	5e                   	pop    esi
c00185bd:	5f                   	pop    edi
c00185be:	5d                   	pop    ebp
c00185bf:	c3                   	ret    
c00185c0:	b8 01 00 00 00       	mov    eax,0x1
c00185c5:	eb dd                	jmp    c00185a4 <SoundPort::buffer32(int*, int)+0x64>
c00185c7:	90                   	nop

c00185c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00185c8:	57                   	push   edi
c00185c9:	56                   	push   esi
c00185ca:	53                   	push   ebx
c00185cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00185cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00185d3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00185d9:	39 03                	cmp    DWORD PTR [ebx],eax
c00185db:	74 13                	je     c00185f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	68 e0 f2 01 c0       	push   0xc001f2e0
c00185e5:	e8 bd 7c ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00185f6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00185f9:	74 11                	je     c001860c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00185fb:	83 ec 0c             	sub    esp,0xc
c00185fe:	68 1f f3 01 c0       	push   0xc001f31f
c0018603:	e8 9f 7c ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0018608:	83 c4 10             	add    esp,0x10
c001860b:	90                   	nop
c001860c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0018612:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018615:	74 11                	je     c0018628 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 1f f3 01 c0       	push   0xc001f31f
c001861f:	e8 83 7c ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	90                   	nop
c0018628:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001862b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001862f:	7e 07                	jle    c0018638 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018631:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018635:	8d 76 00             	lea    esi,[esi+0x0]
c0018638:	85 f6                	test   esi,esi
c001863a:	7e 2c                	jle    c0018668 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001863c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018640:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018643:	31 c9                	xor    ecx,ecx
c0018645:	01 d7                	add    edi,edx
c0018647:	90                   	nop
c0018648:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001864b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001864e:	85 c0                	test   eax,eax
c0018650:	79 06                	jns    c0018658 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018652:	05 ff 7f 00 00       	add    eax,0x7fff
c0018657:	90                   	nop
c0018658:	c1 f8 0f             	sar    eax,0xf
c001865b:	83 c1 04             	add    ecx,0x4
c001865e:	66 01 02             	add    WORD PTR [edx],ax
c0018661:	83 c2 02             	add    edx,0x2
c0018664:	39 d7                	cmp    edi,edx
c0018666:	75 e0                	jne    c0018648 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018668:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001866b:	50                   	push   eax
c001866c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001866f:	29 f0                	sub    eax,esi
c0018671:	c1 e0 02             	shl    eax,0x2
c0018674:	50                   	push   eax
c0018675:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018678:	50                   	push   eax
c0018679:	52                   	push   edx
c001867a:	e8 81 7d fe ff       	call   c0000400 <memmove>
c001867f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	89 f0                	mov    eax,esi
c0018687:	5b                   	pop    ebx
c0018688:	5e                   	pop    esi
c0018689:	5f                   	pop    edi
c001868a:	c3                   	ret    
c001868b:	90                   	nop

c001868c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001868c:	57                   	push   edi
c001868d:	56                   	push   esi
c001868e:	53                   	push   ebx
c001868f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018693:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018697:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001869b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00186a1:	39 06                	cmp    DWORD PTR [esi],eax
c00186a3:	74 13                	je     c00186b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00186a5:	83 ec 0c             	sub    esp,0xc
c00186a8:	68 00 f3 01 c0       	push   0xc001f300
c00186ad:	e8 f5 7b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00186be:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00186c1:	74 11                	je     c00186d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00186c3:	83 ec 0c             	sub    esp,0xc
c00186c6:	68 3b f3 01 c0       	push   0xc001f33b
c00186cb:	e8 d7 7b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	90                   	nop
c00186d4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00186da:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00186dd:	74 11                	je     c00186f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00186df:	83 ec 0c             	sub    esp,0xc
c00186e2:	68 3b f3 01 c0       	push   0xc001f33b
c00186e7:	e8 bb 7b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	90                   	nop
c00186f0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00186f3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00186f7:	7e 07                	jle    c0018700 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00186f9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00186fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018700:	85 ff                	test   edi,edi
c0018702:	7e 1c                	jle    c0018720 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018704:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001870b:	31 c0                	xor    eax,eax
c001870d:	8d 76 00             	lea    esi,[esi+0x0]
c0018710:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018713:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018716:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018719:	83 c0 04             	add    eax,0x4
c001871c:	39 c1                	cmp    ecx,eax
c001871e:	75 f0                	jne    c0018710 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018720:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018723:	50                   	push   eax
c0018724:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018727:	29 f8                	sub    eax,edi
c0018729:	c1 e0 02             	shl    eax,0x2
c001872c:	50                   	push   eax
c001872d:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018730:	50                   	push   eax
c0018731:	52                   	push   edx
c0018732:	e8 c9 7c fe ff       	call   c0000400 <memmove>
c0018737:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	89 f8                	mov    eax,edi
c001873f:	5b                   	pop    ebx
c0018740:	5e                   	pop    esi
c0018741:	5f                   	pop    edi
c0018742:	c3                   	ret    
c0018743:	90                   	nop

c0018744 <PCI::open(int, int, void*)>:
c0018744:	83 ec 18             	sub    esp,0x18
c0018747:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001874b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001874f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018755:	8b 10                	mov    edx,DWORD PTR [eax]
c0018757:	50                   	push   eax
c0018758:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001875b:	31 c0                	xor    eax,eax
c001875d:	83 c4 1c             	add    esp,0x1c
c0018760:	c3                   	ret    
c0018761:	90                   	nop

c0018762 <PCI::close(int, int, void*)>:
c0018762:	31 c0                	xor    eax,eax
c0018764:	c3                   	ret    
c0018765:	90                   	nop

c0018766 <PCI::PCI()>:
c0018766:	83 ec 0c             	sub    esp,0xc
c0018769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001876d:	83 ec 08             	sub    esp,0x8
c0018770:	68 57 f3 01 c0       	push   0xc001f357
c0018775:	50                   	push   eax
c0018776:	e8 71 2d ff ff       	call   c000b4ec <Bus::Bus(char const*)>
c001877b:	83 c4 10             	add    esp,0x10
c001877e:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0018783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018787:	89 10                	mov    DWORD PTR [eax],edx
c0018789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001878d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001879b:	a3 e0 49 02 c0       	mov    ds:0xc00249e0,eax
c00187a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00187aa:	31 d2                	xor    edx,edx
c00187ac:	88 c2                	mov    dl,al
c00187ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00187b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00187c3:	31 d2                	xor    edx,edx
c00187c5:	88 c2                	mov    dl,al
c00187c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187cb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00187d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00187da:	8d 50 01             	lea    edx,[eax+0x1]
c00187dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187e1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00187e7:	31 d2                	xor    edx,edx
c00187e9:	88 c2                	mov    dl,al
c00187eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ef:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00187f3:	83 c9 c0             	or     ecx,0xffffffc0
c00187f6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00187fa:	90                   	nop
c00187fb:	83 c4 0c             	add    esp,0xc
c00187fe:	c3                   	ret    
c00187ff:	90                   	nop

c0018800 <PCI::readBAR8(unsigned int, int)>:
c0018800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018808:	f6 c2 01             	test   dl,0x1
c001880b:	74 07                	je     c0018814 <PCI::readBAR8(unsigned int, int)+0x14>
c001880d:	83 e2 fc             	and    edx,0xfffffffc
c0018810:	01 c2                	add    edx,eax
c0018812:	ec                   	in     al,dx
c0018813:	c3                   	ret    
c0018814:	83 e2 f0             	and    edx,0xfffffff0
c0018817:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001881a:	c3                   	ret    
c001881b:	90                   	nop

c001881c <PCI::readBAR16(unsigned int, int)>:
c001881c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018824:	f6 c2 01             	test   dl,0x1
c0018827:	74 08                	je     c0018831 <PCI::readBAR16(unsigned int, int)+0x15>
c0018829:	83 e2 fc             	and    edx,0xfffffffc
c001882c:	01 c2                	add    edx,eax
c001882e:	66 ed                	in     ax,dx
c0018830:	c3                   	ret    
c0018831:	83 e2 f0             	and    edx,0xfffffff0
c0018834:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018838:	c3                   	ret    
c0018839:	90                   	nop

c001883a <PCI::readBAR32(unsigned int, int)>:
c001883a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001883e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018842:	f6 c2 01             	test   dl,0x1
c0018845:	74 07                	je     c001884e <PCI::readBAR32(unsigned int, int)+0x14>
c0018847:	83 e2 fc             	and    edx,0xfffffffc
c001884a:	01 c2                	add    edx,eax
c001884c:	ed                   	in     eax,dx
c001884d:	c3                   	ret    
c001884e:	83 e2 f0             	and    edx,0xfffffff0
c0018851:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018854:	c3                   	ret    
c0018855:	90                   	nop

c0018856 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001885a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001885e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018862:	f6 c2 01             	test   dl,0x1
c0018865:	74 07                	je     c001886e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018867:	83 e2 fc             	and    edx,0xfffffffc
c001886a:	01 ca                	add    edx,ecx
c001886c:	ee                   	out    dx,al
c001886d:	c3                   	ret    
c001886e:	83 e2 f0             	and    edx,0xfffffff0
c0018871:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018874:	c3                   	ret    
c0018875:	90                   	nop

c0018876 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001887a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001887e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018882:	f6 c2 01             	test   dl,0x1
c0018885:	74 08                	je     c001888f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018887:	83 e2 fc             	and    edx,0xfffffffc
c001888a:	01 ca                	add    edx,ecx
c001888c:	66 ef                	out    dx,ax
c001888e:	c3                   	ret    
c001888f:	83 e2 f0             	and    edx,0xfffffff0
c0018892:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018896:	c3                   	ret    
c0018897:	90                   	nop

c0018898 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001889c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00188a4:	f6 c2 01             	test   dl,0x1
c00188a7:	74 07                	je     c00188b0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00188a9:	83 e2 fc             	and    edx,0xfffffffc
c00188ac:	01 ca                	add    edx,ecx
c00188ae:	ef                   	out    dx,eax
c00188af:	c3                   	ret    
c00188b0:	83 e2 f0             	and    edx,0xfffffff0
c00188b3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00188b6:	c3                   	ret    
c00188b7:	90                   	nop

c00188b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188b8:	55                   	push   ebp
c00188b9:	57                   	push   edi
c00188ba:	56                   	push   esi
c00188bb:	53                   	push   ebx
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00188c3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00188c7:	89 f0                	mov    eax,esi
c00188c9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00188cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188d1:	3c 07                	cmp    al,0x7
c00188d3:	76 10                	jbe    c00188e5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00188d5:	83 ec 0c             	sub    esp,0xc
c00188d8:	68 5f f3 01 c0       	push   0xc001f35f
c00188dd:	e8 c5 79 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00188e2:	83 c4 10             	add    esp,0x10
c00188e5:	80 fb 0f             	cmp    bl,0xf
c00188e8:	76 10                	jbe    c00188fa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00188ea:	83 ec 0c             	sub    esp,0xc
c00188ed:	68 8f f3 01 c0       	push   0xc001f38f
c00188f2:	e8 b0 79 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	8d 04 36             	lea    eax,[esi+esi*1]
c00188fd:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018902:	83 c8 f0             	or     eax,0xfffffff0
c0018905:	ee                   	out    dx,al
c0018906:	ba fa 0c 00 00       	mov    edx,0xcfa
c001890b:	89 e8                	mov    eax,ebp
c001890d:	ee                   	out    dx,al
c001890e:	83 c4 0c             	add    esp,0xc
c0018911:	89 d8                	mov    eax,ebx
c0018913:	66 81 e7 fc 00       	and    di,0xfc
c0018918:	5b                   	pop    ebx
c0018919:	c1 e0 08             	shl    eax,0x8
c001891c:	5e                   	pop    esi
c001891d:	09 f8                	or     eax,edi
c001891f:	5f                   	pop    edi
c0018920:	66 0d 00 c0          	or     ax,0xc000
c0018924:	5d                   	pop    ebp
c0018925:	c3                   	ret    

c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018926:	57                   	push   edi
c0018927:	56                   	push   esi
c0018928:	53                   	push   ebx
c0018929:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001892d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018931:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018937:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001893b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001893f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018943:	83 ff 01             	cmp    edi,0x1
c0018946:	75 3e                	jne    c0018986 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018948:	89 de                	mov    esi,ebx
c001894a:	0f b6 c0             	movzx  eax,al
c001894d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018953:	c1 e0 10             	shl    eax,0x10
c0018956:	0f b6 c9             	movzx  ecx,cl
c0018959:	09 f0                	or     eax,esi
c001895b:	c1 e1 08             	shl    ecx,0x8
c001895e:	0f b6 d2             	movzx  edx,dl
c0018961:	09 c8                	or     eax,ecx
c0018963:	c1 e2 0b             	shl    edx,0xb
c0018966:	09 d0                	or     eax,edx
c0018968:	ba f8 0c 00 00       	mov    edx,0xcf8
c001896d:	0d 00 00 00 80       	or     eax,0x80000000
c0018972:	ef                   	out    dx,eax
c0018973:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018978:	ed                   	in     eax,dx
c0018979:	83 e3 02             	and    ebx,0x2
c001897c:	0f b6 cb             	movzx  ecx,bl
c001897f:	c1 e1 03             	shl    ecx,0x3
c0018982:	d3 e8                	shr    eax,cl
c0018984:	eb 43                	jmp    c00189c9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018986:	83 ff 02             	cmp    edi,0x2
c0018989:	75 2c                	jne    c00189b7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001898b:	83 ec 0c             	sub    esp,0xc
c001898e:	0f b6 c9             	movzx  ecx,cl
c0018991:	0f b6 d2             	movzx  edx,dl
c0018994:	0f b6 fb             	movzx  edi,bl
c0018997:	0f b6 c0             	movzx  eax,al
c001899a:	57                   	push   edi
c001899b:	51                   	push   ecx
c001899c:	52                   	push   edx
c001899d:	50                   	push   eax
c001899e:	56                   	push   esi
c001899f:	e8 14 ff ff ff       	call   c00188b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189a4:	89 c2                	mov    edx,eax
c00189a6:	ed                   	in     eax,dx
c00189a7:	83 e3 02             	and    ebx,0x2
c00189aa:	83 c4 20             	add    esp,0x20
c00189ad:	0f b6 cb             	movzx  ecx,bl
c00189b0:	c1 e1 03             	shl    ecx,0x3
c00189b3:	d3 e8                	shr    eax,cl
c00189b5:	eb 12                	jmp    c00189c9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00189b7:	83 ec 0c             	sub    esp,0xc
c00189ba:	68 bf f3 01 c0       	push   0xc001f3bf
c00189bf:	e8 e3 78 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c00189c4:	83 c4 10             	add    esp,0x10
c00189c7:	31 c0                	xor    eax,eax
c00189c9:	5b                   	pop    ebx
c00189ca:	5e                   	pop    esi
c00189cb:	5f                   	pop    edi
c00189cc:	c3                   	ret    
c00189cd:	90                   	nop

c00189ce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00189ce:	83 ec 18             	sub    esp,0x18
c00189d1:	6a 00                	push   0x0
c00189d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00189d8:	50                   	push   eax
c00189d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00189de:	50                   	push   eax
c00189df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00189e4:	50                   	push   eax
c00189e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00189e9:	e8 38 ff ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189ee:	83 c4 2c             	add    esp,0x2c
c00189f1:	c3                   	ret    

c00189f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00189f2:	83 ec 18             	sub    esp,0x18
c00189f5:	6a 0e                	push   0xe
c00189f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00189fc:	50                   	push   eax
c00189fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a02:	50                   	push   eax
c0018a03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a08:	50                   	push   eax
c0018a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a0d:	e8 14 ff ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a12:	83 c4 2c             	add    esp,0x2c
c0018a15:	0f b6 c0             	movzx  eax,al
c0018a18:	c3                   	ret    
c0018a19:	90                   	nop

c0018a1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018a1a:	55                   	push   ebp
c0018a1b:	57                   	push   edi
c0018a1c:	56                   	push   esi
c0018a1d:	53                   	push   ebx
c0018a1e:	83 ec 18             	sub    esp,0x18
c0018a21:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018a26:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018a2b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018a30:	6a 0a                	push   0xa
c0018a32:	56                   	push   esi
c0018a33:	55                   	push   ebp
c0018a34:	57                   	push   edi
c0018a35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a39:	e8 e8 fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a3e:	83 c4 14             	add    esp,0x14
c0018a41:	89 c3                	mov    ebx,eax
c0018a43:	6a 0a                	push   0xa
c0018a45:	0f b6 db             	movzx  ebx,bl
c0018a48:	56                   	push   esi
c0018a49:	55                   	push   ebp
c0018a4a:	57                   	push   edi
c0018a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a4f:	e8 d2 fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a54:	83 c4 2c             	add    esp,0x2c
c0018a57:	25 00 ff 00 00       	and    eax,0xff00
c0018a5c:	09 d8                	or     eax,ebx
c0018a5e:	5b                   	pop    ebx
c0018a5f:	5e                   	pop    esi
c0018a60:	5f                   	pop    edi
c0018a61:	5d                   	pop    ebp
c0018a62:	c3                   	ret    
c0018a63:	90                   	nop

c0018a64 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018a64:	83 ec 18             	sub    esp,0x18
c0018a67:	6a 08                	push   0x8
c0018a69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a6e:	50                   	push   eax
c0018a6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a74:	50                   	push   eax
c0018a75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a7a:	50                   	push   eax
c0018a7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a7f:	e8 a2 fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a84:	83 c4 2c             	add    esp,0x2c
c0018a87:	0f b6 c4             	movzx  eax,ah
c0018a8a:	c3                   	ret    
c0018a8b:	90                   	nop

c0018a8c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018a8c:	83 ec 18             	sub    esp,0x18
c0018a8f:	6a 08                	push   0x8
c0018a91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a96:	50                   	push   eax
c0018a97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018a9c:	50                   	push   eax
c0018a9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018aa2:	50                   	push   eax
c0018aa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aa7:	e8 7a fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018aac:	83 c4 2c             	add    esp,0x2c
c0018aaf:	c3                   	ret    

c0018ab0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018ab0:	83 ec 18             	sub    esp,0x18
c0018ab3:	6a 3c                	push   0x3c
c0018ab5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018aba:	50                   	push   eax
c0018abb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ac0:	50                   	push   eax
c0018ac1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ac6:	50                   	push   eax
c0018ac7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018acb:	e8 56 fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ad0:	83 c4 2c             	add    esp,0x2c
c0018ad3:	c3                   	ret    

c0018ad4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018ad4:	83 ec 18             	sub    esp,0x18
c0018ad7:	6a 18                	push   0x18
c0018ad9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ade:	50                   	push   eax
c0018adf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018ae4:	50                   	push   eax
c0018ae5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018aea:	50                   	push   eax
c0018aeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aef:	e8 32 fe ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018af4:	83 c4 2c             	add    esp,0x2c
c0018af7:	0f b6 c4             	movzx  eax,ah
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018afc:	55                   	push   ebp
c0018afd:	57                   	push   edi
c0018afe:	56                   	push   esi
c0018aff:	53                   	push   ebx
c0018b00:	83 ec 28             	sub    esp,0x28
c0018b03:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018b07:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018b0c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018b11:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018b16:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018b1d:	8d 43 12             	lea    eax,[ebx+0x12]
c0018b20:	83 c3 10             	add    ebx,0x10
c0018b23:	0f b6 c0             	movzx  eax,al
c0018b26:	0f b6 db             	movzx  ebx,bl
c0018b29:	50                   	push   eax
c0018b2a:	51                   	push   ecx
c0018b2b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018b2f:	57                   	push   edi
c0018b30:	55                   	push   ebp
c0018b31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b35:	e8 ec fd ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b3a:	83 c4 14             	add    esp,0x14
c0018b3d:	89 c6                	mov    esi,eax
c0018b3f:	53                   	push   ebx
c0018b40:	c1 e6 10             	shl    esi,0x10
c0018b43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b47:	51                   	push   ecx
c0018b48:	57                   	push   edi
c0018b49:	55                   	push   ebp
c0018b4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b4e:	e8 d3 fd ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b53:	83 c4 3c             	add    esp,0x3c
c0018b56:	0f b7 c0             	movzx  eax,ax
c0018b59:	5b                   	pop    ebx
c0018b5a:	09 f0                	or     eax,esi
c0018b5c:	5e                   	pop    esi
c0018b5d:	5f                   	pop    edi
c0018b5e:	5d                   	pop    ebp
c0018b5f:	c3                   	ret    

c0018b60 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018b60:	55                   	push   ebp
c0018b61:	57                   	push   edi
c0018b62:	56                   	push   esi
c0018b63:	53                   	push   ebx
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018b6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018b6f:	89 f5                	mov    ebp,esi
c0018b71:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018b77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018b83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018b87:	83 f9 01             	cmp    ecx,0x1
c0018b8a:	75 5d                	jne    c0018be9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018b8c:	0f b6 c8             	movzx  ecx,al
c0018b8f:	0f b6 d2             	movzx  edx,dl
c0018b92:	c1 e1 10             	shl    ecx,0x10
c0018b95:	c1 e2 0b             	shl    edx,0xb
c0018b98:	89 f0                	mov    eax,esi
c0018b9a:	25 fc 00 00 00       	and    eax,0xfc
c0018b9f:	09 c1                	or     ecx,eax
c0018ba1:	89 e8                	mov    eax,ebp
c0018ba3:	0f b6 c0             	movzx  eax,al
c0018ba6:	c1 e0 08             	shl    eax,0x8
c0018ba9:	09 c1                	or     ecx,eax
c0018bab:	09 d1                	or     ecx,edx
c0018bad:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018bb2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018bb8:	89 c8                	mov    eax,ecx
c0018bba:	ef                   	out    dx,eax
c0018bbb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018bc0:	ed                   	in     eax,dx
c0018bc1:	0f b7 db             	movzx  ebx,bx
c0018bc4:	83 e6 02             	and    esi,0x2
c0018bc7:	74 0a                	je     c0018bd3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018bc9:	0f b7 d0             	movzx  edx,ax
c0018bcc:	c1 e3 10             	shl    ebx,0x10
c0018bcf:	09 d3                	or     ebx,edx
c0018bd1:	eb 05                	jmp    c0018bd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018bd3:	66 31 c0             	xor    ax,ax
c0018bd6:	09 c3                	or     ebx,eax
c0018bd8:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018bdd:	89 c8                	mov    eax,ecx
c0018bdf:	ef                   	out    dx,eax
c0018be0:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018be5:	89 d8                	mov    eax,ebx
c0018be7:	eb 41                	jmp    c0018c2a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018be9:	83 f9 02             	cmp    ecx,0x2
c0018bec:	75 45                	jne    c0018c33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018bee:	83 ec 0c             	sub    esp,0xc
c0018bf1:	0f b6 d2             	movzx  edx,dl
c0018bf4:	89 f1                	mov    ecx,esi
c0018bf6:	0f b6 c0             	movzx  eax,al
c0018bf9:	0f b6 f1             	movzx  esi,cl
c0018bfc:	89 e9                	mov    ecx,ebp
c0018bfe:	56                   	push   esi
c0018bff:	0f b6 c9             	movzx  ecx,cl
c0018c02:	51                   	push   ecx
c0018c03:	52                   	push   edx
c0018c04:	50                   	push   eax
c0018c05:	57                   	push   edi
c0018c06:	e8 ad fc ff ff       	call   c00188b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018c0b:	89 c2                	mov    edx,eax
c0018c0d:	ed                   	in     eax,dx
c0018c0e:	83 c4 20             	add    esp,0x20
c0018c11:	0f b7 db             	movzx  ebx,bx
c0018c14:	f6 c2 02             	test   dl,0x2
c0018c17:	74 0c                	je     c0018c25 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018c19:	0f b7 c8             	movzx  ecx,ax
c0018c1c:	89 d8                	mov    eax,ebx
c0018c1e:	c1 e0 10             	shl    eax,0x10
c0018c21:	09 c8                	or     eax,ecx
c0018c23:	eb 05                	jmp    c0018c2a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018c25:	66 31 c0             	xor    ax,ax
c0018c28:	09 d8                	or     eax,ebx
c0018c2a:	ef                   	out    dx,eax
c0018c2b:	83 c4 0c             	add    esp,0xc
c0018c2e:	5b                   	pop    ebx
c0018c2f:	5e                   	pop    esi
c0018c30:	5f                   	pop    edi
c0018c31:	5d                   	pop    ebp
c0018c32:	c3                   	ret    
c0018c33:	c7 44 24 20 bf f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f3bf
c0018c3b:	83 c4 0c             	add    esp,0xc
c0018c3e:	5b                   	pop    ebx
c0018c3f:	5e                   	pop    esi
c0018c40:	5f                   	pop    edi
c0018c41:	5d                   	pop    ebp
c0018c42:	e9 60 76 ff ff       	jmp    c00102a7 <Krnl::panic(char const*)>
c0018c47:	90                   	nop

c0018c48 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018c48:	55                   	push   ebp
c0018c49:	57                   	push   edi
c0018c4a:	56                   	push   esi
c0018c4b:	53                   	push   ebx
c0018c4c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018c52:	80 3d ec 49 02 c0 00 	cmp    BYTE PTR ds:0xc00249ec,0x0
c0018c59:	0f 85 84 00 00 00    	jne    c0018ce3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018c5f:	83 ec 0c             	sub    esp,0xc
c0018c62:	68 14 01 00 00       	push   0x114
c0018c67:	e8 5d ed fe ff       	call   c00079c9 <malloc>
c0018c6c:	83 c4 0c             	add    esp,0xc
c0018c6f:	89 c3                	mov    ebx,eax
c0018c71:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0018c77:	68 c5 f3 01 c0       	push   0xc001f3c5
c0018c7c:	50                   	push   eax
c0018c7d:	e8 4c 20 ff ff       	call   c000acce <File::File(char const*, Process*)>
c0018c82:	5a                   	pop    edx
c0018c83:	59                   	pop    ecx
c0018c84:	6a 01                	push   0x1
c0018c86:	53                   	push   ebx
c0018c87:	e8 02 21 ff ff       	call   c000ad8e <File::open(FileOpenMode)>
c0018c8c:	83 c4 0c             	add    esp,0xc
c0018c8f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018c93:	50                   	push   eax
c0018c94:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c98:	50                   	push   eax
c0018c99:	53                   	push   ebx
c0018c9a:	e8 9b 23 ff ff       	call   c000b03a <File::stat(unsigned long long*, bool*)>
c0018c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ca3:	40                   	inc    eax
c0018ca4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ca7:	e8 1d ed fe ff       	call   c00079c9 <malloc>
c0018cac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cb0:	a3 e8 49 02 c0       	mov    ds:0xc00249e8,eax
c0018cb5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018cb9:	5e                   	pop    esi
c0018cba:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018cbc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018cc0:	51                   	push   ecx
c0018cc1:	50                   	push   eax
c0018cc2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018cc6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018cca:	53                   	push   ebx
c0018ccb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cce:	83 c4 14             	add    esp,0x14
c0018cd1:	53                   	push   ebx
c0018cd2:	e8 15 21 ff ff       	call   c000adec <File::close()>
c0018cd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	a3 e4 49 02 c0       	mov    ds:0xc00249e4,eax
c0018ce3:	a1 e4 49 02 c0       	mov    eax,ds:0xc00249e4
c0018ce8:	8b 15 e8 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249e8
c0018cee:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cf1:	31 ff                	xor    edi,edi
c0018cf3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018cfb:	31 f6                	xor    esi,esi
c0018cfd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018d02:	31 db                	xor    ebx,ebx
c0018d04:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018d0c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018d11:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018d18:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018d1c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018d23:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018d27:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018d2a:	0f 8e 6b 01 00 00    	jle    c0018e9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018d30:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018d33:	d4 40                	aam    0x40
c0018d35:	d5 39                	aad    0x39
c0018d37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d3b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018d3f:	d4 40                	aam    0x40
c0018d41:	d5 39                	aad    0x39
c0018d43:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018d47:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018d4b:	d4 40                	aam    0x40
c0018d4d:	d5 39                	aad    0x39
c0018d4f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018d53:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018d57:	d4 40                	aam    0x40
c0018d59:	d5 39                	aad    0x39
c0018d5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d5f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018d63:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018d67:	3c 56                	cmp    al,0x56
c0018d69:	74 45                	je     c0018db0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018d6b:	d4 40                	aam    0x40
c0018d6d:	d5 39                	aad    0x39
c0018d6f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018d72:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018d76:	0f b6 c9             	movzx  ecx,cl
c0018d79:	c1 e1 04             	shl    ecx,0x4
c0018d7c:	d4 40                	aam    0x40
c0018d7e:	d5 39                	aad    0x39
c0018d80:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018d83:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018d87:	0f b6 db             	movzx  ebx,bl
c0018d8a:	09 cb                	or     ebx,ecx
c0018d8c:	c1 e3 04             	shl    ebx,0x4
c0018d8f:	d4 40                	aam    0x40
c0018d91:	d5 39                	aad    0x39
c0018d93:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018d96:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018d9a:	0f b6 c9             	movzx  ecx,cl
c0018d9d:	09 cb                	or     ebx,ecx
c0018d9f:	c1 e3 04             	shl    ebx,0x4
c0018da2:	89 d9                	mov    ecx,ebx
c0018da4:	d4 40                	aam    0x40
c0018da6:	d5 39                	aad    0x39
c0018da8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018dab:	0f b6 db             	movzx  ebx,bl
c0018dae:	09 cb                	or     ebx,ecx
c0018db0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018db4:	80 f9 44             	cmp    cl,0x44
c0018db7:	74 47                	je     c0018e00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018db9:	88 c8                	mov    al,cl
c0018dbb:	d4 40                	aam    0x40
c0018dbd:	d5 39                	aad    0x39
c0018dbf:	83 e8 30             	sub    eax,0x30
c0018dc2:	0f b6 e8             	movzx  ebp,al
c0018dc5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018dc9:	c1 e5 04             	shl    ebp,0x4
c0018dcc:	d4 40                	aam    0x40
c0018dce:	d5 39                	aad    0x39
c0018dd0:	83 e8 30             	sub    eax,0x30
c0018dd3:	0f b6 f0             	movzx  esi,al
c0018dd6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018dda:	09 ee                	or     esi,ebp
c0018ddc:	c1 e6 04             	shl    esi,0x4
c0018ddf:	d4 40                	aam    0x40
c0018de1:	d5 39                	aad    0x39
c0018de3:	83 e8 30             	sub    eax,0x30
c0018de6:	0f b6 e8             	movzx  ebp,al
c0018de9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ded:	09 ee                	or     esi,ebp
c0018def:	c1 e6 04             	shl    esi,0x4
c0018df2:	89 f5                	mov    ebp,esi
c0018df4:	d4 40                	aam    0x40
c0018df6:	d5 39                	aad    0x39
c0018df8:	83 e8 30             	sub    eax,0x30
c0018dfb:	0f b6 f0             	movzx  esi,al
c0018dfe:	09 ee                	or     esi,ebp
c0018e00:	83 c7 10             	add    edi,0x10
c0018e03:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018e07:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018e0a:	3c 0a                	cmp    al,0xa
c0018e0c:	74 09                	je     c0018e17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018e0e:	45                   	inc    ebp
c0018e0f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018e12:	75 16                	jne    c0018e2a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018e14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018e17:	3c 0a                	cmp    al,0xa
c0018e19:	0f 94 c0             	sete   al
c0018e1c:	0f b6 c0             	movzx  eax,al
c0018e1f:	01 c7                	add    edi,eax
c0018e21:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018e26:	75 0c                	jne    c0018e34 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018e28:	eb 15                	jmp    c0018e3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018e2a:	47                   	inc    edi
c0018e2b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018e2e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018e32:	eb d3                	jmp    c0018e07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018e34:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018e39:	0f 85 e8 fe ff ff    	jne    c0018d27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018e3f:	80 f9 44             	cmp    cl,0x44
c0018e42:	74 0b                	je     c0018e4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018e44:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018e49:	0f 85 d8 fe ff ff    	jne    c0018d27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018e4f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018e53:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018e57:	c1 e1 04             	shl    ecx,0x4
c0018e5a:	83 e8 30             	sub    eax,0x30
c0018e5d:	09 c8                	or     eax,ecx
c0018e5f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018e63:	0f 85 be fe ff ff    	jne    c0018d27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018e69:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018e6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e71:	c1 e1 04             	shl    ecx,0x4
c0018e74:	83 e8 30             	sub    eax,0x30
c0018e77:	09 c8                	or     eax,ecx
c0018e79:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018e7d:	0f 85 a4 fe ff ff    	jne    c0018d27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018e83:	50                   	push   eax
c0018e84:	50                   	push   eax
c0018e85:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e89:	50                   	push   eax
c0018e8a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018e91:	e8 8a 77 fe ff       	call   c0000620 <strcpy>
c0018e96:	83 c4 10             	add    esp,0x10
c0018e99:	eb 15                	jmp    c0018eb0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018e9b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018ea2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ead:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018eb0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018eb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ebd:	5b                   	pop    ebx
c0018ebe:	5e                   	pop    esi
c0018ebf:	5f                   	pop    edi
c0018ec0:	5d                   	pop    ebp
c0018ec1:	c3                   	ret    

c0018ec2 <PCI::checkBus(unsigned char)>:
c0018ec2:	56                   	push   esi
c0018ec3:	53                   	push   ebx
c0018ec4:	31 f6                	xor    esi,esi
c0018ec6:	51                   	push   ecx
c0018ec7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018ecb:	0f b6 c3             	movzx  eax,bl
c0018ece:	52                   	push   edx
c0018ecf:	56                   	push   esi
c0018ed0:	46                   	inc    esi
c0018ed1:	50                   	push   eax
c0018ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ed6:	e8 f3 02 00 00       	call   c00191ce <PCI::checkDevice(unsigned char, unsigned char)>
c0018edb:	83 c4 10             	add    esp,0x10
c0018ede:	83 fe 20             	cmp    esi,0x20
c0018ee1:	75 e8                	jne    c0018ecb <PCI::checkBus(unsigned char)+0x9>
c0018ee3:	58                   	pop    eax
c0018ee4:	5b                   	pop    ebx
c0018ee5:	5e                   	pop    esi
c0018ee6:	c3                   	ret    
c0018ee7:	90                   	nop

c0018ee8 <PCI::foundDevice(PCIDeviceInfo)>:
c0018ee8:	55                   	push   ebp
c0018ee9:	57                   	push   edi
c0018eea:	56                   	push   esi
c0018eeb:	53                   	push   ebx
c0018eec:	83 ec 1c             	sub    esp,0x1c
c0018eef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018ef3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018ef9:	0f 84 52 01 00 00    	je     c0019051 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018eff:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018f03:	66 81 f9 06 04       	cmp    cx,0x406
c0018f08:	75 2c                	jne    c0018f36 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018f0a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018f0f:	50                   	push   eax
c0018f10:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018f15:	50                   	push   eax
c0018f16:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018f1b:	50                   	push   eax
c0018f1c:	56                   	push   esi
c0018f1d:	e8 b2 fb ff ff       	call   c0018ad4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018f22:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018f26:	0f b6 c0             	movzx  eax,al
c0018f29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018f2d:	83 c4 2c             	add    esp,0x2c
c0018f30:	5b                   	pop    ebx
c0018f31:	5e                   	pop    esi
c0018f32:	5f                   	pop    edi
c0018f33:	5d                   	pop    ebp
c0018f34:	eb 8c                	jmp    c0018ec2 <PCI::checkBus(unsigned char)>
c0018f36:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018f3a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018f40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f44:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018f48:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018f4c:	88 d3                	mov    bl,dl
c0018f4e:	85 c0                	test   eax,eax
c0018f50:	74 33                	je     c0018f85 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018f52:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018f55:	85 d2                	test   edx,edx
c0018f57:	74 28                	je     c0018f81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018f59:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018f5f:	31 ef                	xor    edi,ebp
c0018f61:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018f67:	75 18                	jne    c0018f81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018f69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018f6d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018f73:	75 0c                	jne    c0018f81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018f75:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018f7b:	0f 84 d0 00 00 00    	je     c0019051 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f83:	eb c9                	jmp    c0018f4e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018f85:	66 81 f9 01 06       	cmp    cx,0x601
c0018f8a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018f8e:	75 19                	jne    c0018fa9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018f90:	83 ec 0c             	sub    esp,0xc
c0018f93:	68 64 01 00 00       	push   0x164
c0018f98:	e8 2c ea fe ff       	call   c00079c9 <malloc>
c0018f9d:	89 c5                	mov    ebp,eax
c0018f9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fa2:	e8 47 0e 00 00       	call   c0019dee <SATABus::SATABus()>
c0018fa7:	eb 1e                	jmp    c0018fc7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018fa9:	66 81 f9 01 01       	cmp    cx,0x101
c0018fae:	75 60                	jne    c0019010 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	68 70 02 00 00       	push   0x270
c0018fb8:	e8 0c ea fe ff       	call   c00079c9 <malloc>
c0018fbd:	89 c5                	mov    ebp,eax
c0018fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fc2:	e8 cb 02 00 00       	call   c0019292 <IDE::IDE()>
c0018fc7:	58                   	pop    eax
c0018fc8:	5a                   	pop    edx
c0018fc9:	55                   	push   ebp
c0018fca:	56                   	push   esi
c0018fcb:	e8 c8 2b ff ff       	call   c000bb98 <Device::addChild(Device*)>
c0018fd0:	83 ec 1c             	sub    esp,0x1c
c0018fd3:	b9 09 00 00 00       	mov    ecx,0x9
c0018fd8:	fc                   	cld    
c0018fd9:	89 e7                	mov    edi,esp
c0018fdb:	89 de                	mov    esi,ebx
c0018fdd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fdf:	55                   	push   ebp
c0018fe0:	e8 f9 2a ff ff       	call   c000bade <Device::preOpenPCI(PCIDeviceInfo)>
c0018fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fe8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018fec:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018ff4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018ffc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0019004:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019007:	83 c4 4c             	add    esp,0x4c
c001900a:	5b                   	pop    ebx
c001900b:	5e                   	pop    esi
c001900c:	5f                   	pop    edi
c001900d:	5d                   	pop    ebp
c001900e:	ff e0                	jmp    eax
c0019010:	83 ec 0c             	sub    esp,0xc
c0019013:	68 58 01 00 00       	push   0x158
c0019018:	e8 ac e9 fe ff       	call   c00079c9 <malloc>
c001901d:	89 c5                	mov    ebp,eax
c001901f:	58                   	pop    eax
c0019020:	5a                   	pop    edx
c0019021:	68 de f3 01 c0       	push   0xc001f3de
c0019026:	55                   	push   ebp
c0019027:	e8 0a 2e ff ff       	call   c000be36 <DriverlessDevice::DriverlessDevice(char const*)>
c001902c:	59                   	pop    ecx
c001902d:	5f                   	pop    edi
c001902e:	55                   	push   ebp
c001902f:	56                   	push   esi
c0019030:	e8 63 2b ff ff       	call   c000bb98 <Device::addChild(Device*)>
c0019035:	b9 09 00 00 00       	mov    ecx,0x9
c001903a:	fc                   	cld    
c001903b:	89 df                	mov    edi,ebx
c001903d:	89 de                	mov    esi,ebx
c001903f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019041:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019045:	83 c4 2c             	add    esp,0x2c
c0019048:	5b                   	pop    ebx
c0019049:	5e                   	pop    esi
c001904a:	5f                   	pop    edi
c001904b:	5d                   	pop    ebp
c001904c:	e9 8d 2a ff ff       	jmp    c000bade <Device::preOpenPCI(PCIDeviceInfo)>
c0019051:	83 c4 1c             	add    esp,0x1c
c0019054:	5b                   	pop    ebx
c0019055:	5e                   	pop    esi
c0019056:	5f                   	pop    edi
c0019057:	5d                   	pop    ebp
c0019058:	c3                   	ret    
c0019059:	90                   	nop

c001905a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001905a:	55                   	push   ebp
c001905b:	57                   	push   edi
c001905c:	56                   	push   esi
c001905d:	53                   	push   ebx
c001905e:	83 ec 68             	sub    esp,0x68
c0019061:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019065:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001906c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019070:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019077:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001907c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019080:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019087:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001908c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019090:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019095:	6a 0c                	push   0xc
c0019097:	57                   	push   edi
c0019098:	53                   	push   ebx
c0019099:	56                   	push   esi
c001909a:	55                   	push   ebp
c001909b:	e8 86 f8 ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00190a0:	83 c4 20             	add    esp,0x20
c00190a3:	57                   	push   edi
c00190a4:	53                   	push   ebx
c00190a5:	56                   	push   esi
c00190a6:	55                   	push   ebp
c00190a7:	e8 6e f9 ff ff       	call   c0018a1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00190ac:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00190b1:	57                   	push   edi
c00190b2:	53                   	push   ebx
c00190b3:	56                   	push   esi
c00190b4:	55                   	push   ebp
c00190b5:	e8 f6 f9 ff ff       	call   c0018ab0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00190ba:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00190be:	83 c4 14             	add    esp,0x14
c00190c1:	6a 3c                	push   0x3c
c00190c3:	57                   	push   edi
c00190c4:	53                   	push   ebx
c00190c5:	56                   	push   esi
c00190c6:	55                   	push   ebp
c00190c7:	e8 5a f8 ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00190cc:	0f b6 c4             	movzx  eax,ah
c00190cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00190d3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00190d7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00190db:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c00190e0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00190e6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00190ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00190f0:	83 c4 20             	add    esp,0x20
c00190f3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00190f8:	74 30                	je     c001912a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00190fa:	31 c0                	xor    eax,eax
c00190fc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019100:	7e 28                	jle    c001912a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019102:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001910a:	39 cb                	cmp    ebx,ecx
c001910c:	75 19                	jne    c0019127 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001910e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0019116:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001911a:	75 0b                	jne    c0019127 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001911c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019123:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019127:	40                   	inc    eax
c0019128:	eb d2                	jmp    c00190fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001912a:	31 d2                	xor    edx,edx
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	57                   	push   edi
c0019130:	53                   	push   ebx
c0019131:	56                   	push   esi
c0019132:	52                   	push   edx
c0019133:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019137:	55                   	push   ebp
c0019138:	e8 bf f9 ff ff       	call   c0018afc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001913d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019141:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019145:	42                   	inc    edx
c0019146:	83 c4 20             	add    esp,0x20
c0019149:	83 fa 06             	cmp    edx,0x6
c001914c:	75 de                	jne    c001912c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001914e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019153:	83 ec 0c             	sub    esp,0xc
c0019156:	86 e0                	xchg   al,ah
c0019158:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001915d:	6a 02                	push   0x2
c001915f:	57                   	push   edi
c0019160:	53                   	push   ebx
c0019161:	56                   	push   esi
c0019162:	55                   	push   ebp
c0019163:	e8 be f7 ff ff       	call   c0018926 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019168:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001916d:	83 c4 20             	add    esp,0x20
c0019170:	57                   	push   edi
c0019171:	53                   	push   ebx
c0019172:	56                   	push   esi
c0019173:	55                   	push   ebp
c0019174:	e8 eb f8 ff ff       	call   c0018a64 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0019179:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001917d:	57                   	push   edi
c001917e:	53                   	push   ebx
c001917f:	56                   	push   esi
c0019180:	55                   	push   ebp
c0019181:	e8 48 f8 ff ff       	call   c00189ce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019186:	b9 09 00 00 00       	mov    ecx,0x9
c001918b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0019190:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0019194:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0019198:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001919c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00191a0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00191a4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00191a8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00191ac:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00191b0:	83 ec 0c             	sub    esp,0xc
c00191b3:	fc                   	cld    
c00191b4:	89 e7                	mov    edi,esp
c00191b6:	8d 74 24 58          	lea    esi,[esp+0x58]
c00191ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00191bc:	55                   	push   ebp
c00191bd:	e8 26 fd ff ff       	call   c0018ee8 <PCI::foundDevice(PCIDeviceInfo)>
c00191c2:	81 c4 8c 00 00 00    	add    esp,0x8c
c00191c8:	5b                   	pop    ebx
c00191c9:	5e                   	pop    esi
c00191ca:	5f                   	pop    edi
c00191cb:	5d                   	pop    ebp
c00191cc:	c3                   	ret    
c00191cd:	90                   	nop

c00191ce <PCI::checkDevice(unsigned char, unsigned char)>:
c00191ce:	55                   	push   ebp
c00191cf:	57                   	push   edi
c00191d0:	56                   	push   esi
c00191d1:	53                   	push   ebx
c00191d2:	83 ec 0c             	sub    esp,0xc
c00191d5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00191d9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00191de:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00191e3:	6a 00                	push   0x0
c00191e5:	56                   	push   esi
c00191e6:	57                   	push   edi
c00191e7:	55                   	push   ebp
c00191e8:	e8 e1 f7 ff ff       	call   c00189ce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00191ed:	6a 00                	push   0x0
c00191ef:	56                   	push   esi
c00191f0:	57                   	push   edi
c00191f1:	55                   	push   ebp
c00191f2:	e8 63 fe ff ff       	call   c001905a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00191f7:	83 c4 20             	add    esp,0x20
c00191fa:	6a 00                	push   0x0
c00191fc:	56                   	push   esi
c00191fd:	57                   	push   edi
c00191fe:	55                   	push   ebp
c00191ff:	e8 ee f7 ff ff       	call   c00189f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019204:	83 c4 10             	add    esp,0x10
c0019207:	84 c0                	test   al,al
c0019209:	79 27                	jns    c0019232 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001920b:	bb 01 00 00 00       	mov    ebx,0x1
c0019210:	53                   	push   ebx
c0019211:	56                   	push   esi
c0019212:	57                   	push   edi
c0019213:	55                   	push   ebp
c0019214:	e8 b5 f7 ff ff       	call   c00189ce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	66 40                	inc    ax
c001921e:	74 0c                	je     c001922c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019220:	53                   	push   ebx
c0019221:	56                   	push   esi
c0019222:	57                   	push   edi
c0019223:	55                   	push   ebp
c0019224:	e8 31 fe ff ff       	call   c001905a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	43                   	inc    ebx
c001922d:	83 fb 08             	cmp    ebx,0x8
c0019230:	75 de                	jne    c0019210 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019232:	83 c4 0c             	add    esp,0xc
c0019235:	5b                   	pop    ebx
c0019236:	5e                   	pop    esi
c0019237:	5f                   	pop    edi
c0019238:	5d                   	pop    ebp
c0019239:	c3                   	ret    

c001923a <PCI::detect()>:
c001923a:	56                   	push   esi
c001923b:	53                   	push   ebx
c001923c:	53                   	push   ebx
c001923d:	31 db                	xor    ebx,ebx
c001923f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019243:	6a 00                	push   0x0
c0019245:	6a 00                	push   0x0
c0019247:	6a 00                	push   0x0
c0019249:	56                   	push   esi
c001924a:	e8 a3 f7 ff ff       	call   c00189f2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001924f:	83 c4 10             	add    esp,0x10
c0019252:	a8 80                	test   al,0x80
c0019254:	75 21                	jne    c0019277 <PCI::detect()+0x3d>
c0019256:	51                   	push   ecx
c0019257:	51                   	push   ecx
c0019258:	6a 00                	push   0x0
c001925a:	56                   	push   esi
c001925b:	e8 62 fc ff ff       	call   c0018ec2 <PCI::checkBus(unsigned char)>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	eb 24                	jmp    c0019289 <PCI::detect()+0x4f>
c0019265:	52                   	push   edx
c0019266:	52                   	push   edx
c0019267:	53                   	push   ebx
c0019268:	43                   	inc    ebx
c0019269:	56                   	push   esi
c001926a:	e8 53 fc ff ff       	call   c0018ec2 <PCI::checkBus(unsigned char)>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	83 fb 08             	cmp    ebx,0x8
c0019275:	74 12                	je     c0019289 <PCI::detect()+0x4f>
c0019277:	53                   	push   ebx
c0019278:	6a 00                	push   0x0
c001927a:	6a 00                	push   0x0
c001927c:	56                   	push   esi
c001927d:	e8 4c f7 ff ff       	call   c00189ce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019282:	83 c4 10             	add    esp,0x10
c0019285:	66 40                	inc    ax
c0019287:	74 dc                	je     c0019265 <PCI::detect()+0x2b>
c0019289:	58                   	pop    eax
c001928a:	5b                   	pop    ebx
c001928b:	5e                   	pop    esi
c001928c:	c3                   	ret    
c001928d:	90                   	nop

c001928e <IDE::close(int, int, void*)>:
c001928e:	83 c8 ff             	or     eax,0xffffffff
c0019291:	c3                   	ret    

c0019292 <IDE::IDE()>:
c0019292:	83 ec 0c             	sub    esp,0xc
c0019295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019299:	83 ec 08             	sub    esp,0x8
c001929c:	68 24 f4 01 c0       	push   0xc001f424
c00192a1:	50                   	push   eax
c00192a2:	e8 35 2c ff ff       	call   c000bedc <HardDiskController::HardDiskController(char const*)>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c00192af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b3:	89 10                	mov    DWORD PTR [eax],edx
c00192b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00192c0:	90                   	nop
c00192c1:	83 c4 0c             	add    esp,0xc
c00192c4:	c3                   	ret    
c00192c5:	90                   	nop

c00192c6 <IDE::prepareInterrupt(unsigned char)>:
c00192c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00192cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192cf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00192d7:	c3                   	ret    

c00192d8 <selectDrive(unsigned char, unsigned char)>:
c00192d8:	c3                   	ret    
c00192d9:	90                   	nop

c00192da <IDE::getBase(unsigned char)>:
c00192da:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00192df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00192eb:	c3                   	ret    

c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00192ec:	55                   	push   ebp
c00192ed:	57                   	push   edi
c00192ee:	56                   	push   esi
c00192ef:	53                   	push   ebx
c00192f0:	83 ec 1c             	sub    esp,0x1c
c00192f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00192f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00192fb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00192fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019302:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019306:	80 f9 03             	cmp    cl,0x3
c0019309:	77 51                	ja     c001935c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001930b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001930f:	0f b6 f2             	movzx  esi,dl
c0019312:	0f b6 db             	movzx  ebx,bl
c0019315:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019318:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001931c:	83 ca 80             	or     edx,0xffffff80
c001931f:	0f b6 d2             	movzx  edx,dl
c0019322:	52                   	push   edx
c0019323:	6a 0c                	push   0xc
c0019325:	56                   	push   esi
c0019326:	57                   	push   edi
c0019327:	e8 c0 ff ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001932c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019335:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019339:	ee                   	out    dx,al
c001933a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001933f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019343:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019347:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001934b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019353:	83 c4 2c             	add    esp,0x2c
c0019356:	5b                   	pop    ebx
c0019357:	5e                   	pop    esi
c0019358:	5f                   	pop    edi
c0019359:	5d                   	pop    ebp
c001935a:	eb 90                	jmp    c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001935c:	80 fb 07             	cmp    bl,0x7
c001935f:	77 12                	ja     c0019373 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019361:	0f b6 d2             	movzx  edx,dl
c0019364:	0f b6 db             	movzx  ebx,bl
c0019367:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001936f:	89 da                	mov    edx,ebx
c0019371:	eb 2f                	jmp    c00193a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019373:	80 fb 0d             	cmp    bl,0xd
c0019376:	77 13                	ja     c001938b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019378:	0f b6 d2             	movzx  edx,dl
c001937b:	0f b6 db             	movzx  ebx,bl
c001937e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019385:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019389:	eb 17                	jmp    c00193a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001938b:	80 fb 15             	cmp    bl,0x15
c001938e:	77 13                	ja     c00193a3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019390:	0f b6 d2             	movzx  edx,dl
c0019393:	0f b6 db             	movzx  ebx,bl
c0019396:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001939e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00193a2:	ee                   	out    dx,al
c00193a3:	83 c4 1c             	add    esp,0x1c
c00193a6:	5b                   	pop    ebx
c00193a7:	5e                   	pop    esi
c00193a8:	5f                   	pop    edi
c00193a9:	5d                   	pop    ebp
c00193aa:	c3                   	ret    
c00193ab:	90                   	nop

c00193ac <IDE::read(unsigned char, unsigned char)>:
c00193ac:	55                   	push   ebp
c00193ad:	57                   	push   edi
c00193ae:	56                   	push   esi
c00193af:	53                   	push   ebx
c00193b0:	83 ec 1c             	sub    esp,0x1c
c00193b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00193b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00193bb:	8d 43 f8             	lea    eax,[ebx-0x8]
c00193be:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00193c2:	3c 03                	cmp    al,0x3
c00193c4:	77 43                	ja     c0019409 <IDE::read(unsigned char, unsigned char)+0x5d>
c00193c6:	0f b6 f2             	movzx  esi,dl
c00193c9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00193cc:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00193d0:	83 c8 80             	or     eax,0xffffff80
c00193d3:	0f b6 c0             	movzx  eax,al
c00193d6:	50                   	push   eax
c00193d7:	6a 0c                	push   0xc
c00193d9:	56                   	push   esi
c00193da:	57                   	push   edi
c00193db:	e8 0c ff ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00193e0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00193e5:	0f b6 c3             	movzx  eax,bl
c00193e8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00193ec:	ec                   	in     al,dx
c00193ed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00193f1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00193f6:	52                   	push   edx
c00193f7:	6a 0c                	push   0xc
c00193f9:	56                   	push   esi
c00193fa:	57                   	push   edi
c00193fb:	e8 ec fe ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019400:	83 c4 20             	add    esp,0x20
c0019403:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019407:	eb 49                	jmp    c0019452 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019409:	80 fb 07             	cmp    bl,0x7
c001940c:	77 12                	ja     c0019420 <IDE::read(unsigned char, unsigned char)+0x74>
c001940e:	0f b6 d2             	movzx  edx,dl
c0019411:	0f b6 c3             	movzx  eax,bl
c0019414:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001941c:	89 c2                	mov    edx,eax
c001941e:	eb 31                	jmp    c0019451 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019420:	80 fb 0d             	cmp    bl,0xd
c0019423:	77 13                	ja     c0019438 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019425:	0f b6 d2             	movzx  edx,dl
c0019428:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001942f:	0f b6 d3             	movzx  edx,bl
c0019432:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019436:	eb 19                	jmp    c0019451 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019438:	31 c0                	xor    eax,eax
c001943a:	80 fb 15             	cmp    bl,0x15
c001943d:	77 13                	ja     c0019452 <IDE::read(unsigned char, unsigned char)+0xa6>
c001943f:	0f b6 d2             	movzx  edx,dl
c0019442:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001944a:	0f b6 d3             	movzx  edx,bl
c001944d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019451:	ec                   	in     al,dx
c0019452:	83 c4 1c             	add    esp,0x1c
c0019455:	5b                   	pop    ebx
c0019456:	5e                   	pop    esi
c0019457:	5f                   	pop    edi
c0019458:	5d                   	pop    ebp
c0019459:	c3                   	ret    

c001945a <IDE::waitInterrupt(unsigned char)>:
c001945a:	57                   	push   edi
c001945b:	56                   	push   esi
c001945c:	31 f6                	xor    esi,esi
c001945e:	53                   	push   ebx
c001945f:	83 ec 10             	sub    esp,0x10
c0019462:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019466:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001946a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001946e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019473:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001947a:	84 db                	test   bl,bl
c001947c:	75 33                	jne    c00194b1 <IDE::waitInterrupt(unsigned char)+0x57>
c001947e:	52                   	push   edx
c001947f:	6a 0c                	push   0xc
c0019481:	50                   	push   eax
c0019482:	57                   	push   edi
c0019483:	e8 24 ff ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	a8 01                	test   al,0x1
c001948d:	75 2a                	jne    c00194b9 <IDE::waitInterrupt(unsigned char)+0x5f>
c001948f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019495:	75 12                	jne    c00194a9 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019497:	83 fe 32             	cmp    esi,0x32
c001949a:	7e 0d                	jle    c00194a9 <IDE::waitInterrupt(unsigned char)+0x4f>
c001949c:	83 ec 0c             	sub    esp,0xc
c001949f:	6a 64                	push   0x64
c00194a1:	e8 56 a4 ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	83 fe 3c             	cmp    esi,0x3c
c00194ac:	74 0b                	je     c00194b9 <IDE::waitInterrupt(unsigned char)+0x5f>
c00194ae:	46                   	inc    esi
c00194af:	eb bd                	jmp    c001946e <IDE::waitInterrupt(unsigned char)+0x14>
c00194b1:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	88 d8                	mov    al,bl
c00194be:	5b                   	pop    ebx
c00194bf:	5e                   	pop    esi
c00194c0:	5f                   	pop    edi
c00194c1:	c3                   	ret    

c00194c2 <ideChannel0IRQHandler(regs*, void*)>:
c00194c2:	83 ec 10             	sub    esp,0x10
c00194c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194c9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00194d0:	6a 07                	push   0x7
c00194d2:	6a 00                	push   0x0
c00194d4:	50                   	push   eax
c00194d5:	e8 d2 fe ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c00194da:	83 c4 1c             	add    esp,0x1c
c00194dd:	c3                   	ret    

c00194de <ideChannel1IRQHandler(regs*, void*)>:
c00194de:	83 ec 10             	sub    esp,0x10
c00194e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194e5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00194ec:	6a 07                	push   0x7
c00194ee:	6a 01                	push   0x1
c00194f0:	50                   	push   eax
c00194f1:	e8 b6 fe ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c00194f6:	83 c4 1c             	add    esp,0x1c
c00194f9:	c3                   	ret    

c00194fa <IDE::enableIRQs(unsigned char, bool)>:
c00194fa:	57                   	push   edi
c00194fb:	56                   	push   esi
c00194fc:	be 04 00 00 00       	mov    esi,0x4
c0019501:	53                   	push   ebx
c0019502:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001950b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019510:	0f 94 c0             	sete   al
c0019513:	01 c0                	add    eax,eax
c0019515:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001951c:	0f b6 c0             	movzx  eax,al
c001951f:	50                   	push   eax
c0019520:	6a 0c                	push   0xc
c0019522:	57                   	push   edi
c0019523:	53                   	push   ebx
c0019524:	e8 c3 fd ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019529:	83 c4 10             	add    esp,0x10
c001952c:	50                   	push   eax
c001952d:	6a 0c                	push   0xc
c001952f:	57                   	push   edi
c0019530:	53                   	push   ebx
c0019531:	e8 76 fe ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	4e                   	dec    esi
c001953a:	75 f0                	jne    c001952c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001953c:	5b                   	pop    ebx
c001953d:	5e                   	pop    esi
c001953e:	5f                   	pop    edi
c001953f:	c3                   	ret    

c0019540 <IDE::open(int, int, void*)>:
c0019540:	55                   	push   ebp
c0019541:	57                   	push   edi
c0019542:	56                   	push   esi
c0019543:	53                   	push   ebx
c0019544:	83 ec 1c             	sub    esp,0x1c
c0019547:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001954b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019554:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001955d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019564:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001956b:	0f 85 b0 02 00 00    	jne    c0019821 <IDE::open(int, int, void*)+0x2e1>
c0019571:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019577:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001957b:	83 e0 7f             	and    eax,0x7f
c001957e:	3c 05                	cmp    al,0x5
c0019580:	74 04                	je     c0019586 <IDE::open(int, int, void*)+0x46>
c0019582:	3c 0f                	cmp    al,0xf
c0019584:	75 32                	jne    c00195b8 <IDE::open(int, int, void*)+0x78>
c0019586:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001958c:	83 e0 fc             	and    eax,0xfffffffc
c001958f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019596:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001959c:	83 e0 fc             	and    eax,0xfffffffc
c001959f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195a6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00195ac:	83 e0 fc             	and    eax,0xfffffffc
c00195af:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195b6:	eb 14                	jmp    c00195cc <IDE::open(int, int, void*)+0x8c>
c00195b8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00195c2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00195cc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00195d3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00195da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195de:	89 c6                	mov    esi,eax
c00195e0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00195e5:	c1 e6 10             	shl    esi,0x10
c00195e8:	89 e8                	mov    eax,ebp
c00195ea:	89 fa                	mov    edx,edi
c00195ec:	c1 e0 0b             	shl    eax,0xb
c00195ef:	09 f0                	or     eax,esi
c00195f1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00195f8:	c1 e6 08             	shl    esi,0x8
c00195fb:	09 c6                	or     esi,eax
c00195fd:	89 f0                	mov    eax,esi
c00195ff:	0d 08 00 00 80       	or     eax,0x80000008
c0019604:	ef                   	out    dx,eax
c0019605:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001960a:	89 ca                	mov    edx,ecx
c001960c:	ed                   	in     eax,dx
c001960d:	c1 e8 10             	shr    eax,0x10
c0019610:	3d ff ff 00 00       	cmp    eax,0xffff
c0019615:	0f 84 f5 00 00 00    	je     c0019710 <IDE::open(int, int, void*)+0x1d0>
c001961b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019621:	89 fa                	mov    edx,edi
c0019623:	89 f0                	mov    eax,esi
c0019625:	ef                   	out    dx,eax
c0019626:	b0 fe                	mov    al,0xfe
c0019628:	89 ca                	mov    edx,ecx
c001962a:	ee                   	out    dx,al
c001962b:	89 f0                	mov    eax,esi
c001962d:	89 fa                	mov    edx,edi
c001962f:	ef                   	out    dx,eax
c0019630:	89 ca                	mov    edx,ecx
c0019632:	ed                   	in     eax,dx
c0019633:	3c fe                	cmp    al,0xfe
c0019635:	0f 85 a9 00 00 00    	jne    c00196e4 <IDE::open(int, int, void*)+0x1a4>
c001963b:	8b 15 48 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b48
c0019641:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019648:	74 33                	je     c001967d <IDE::open(int, int, void*)+0x13d>
c001964a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019650:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019654:	40                   	inc    eax
c0019655:	83 ec 0c             	sub    esp,0xc
c0019658:	0f b6 c0             	movzx  eax,al
c001965b:	50                   	push   eax
c001965c:	55                   	push   ebp
c001965d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019661:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019667:	51                   	push   ecx
c0019668:	e8 b7 52 ff ff       	call   c000e924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001966d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019672:	83 c4 1c             	add    esp,0x1c
c0019675:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001967b:	eb 0a                	jmp    c0019687 <IDE::open(int, int, void*)+0x147>
c001967d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019687:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001968e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019695:	c1 e1 10             	shl    ecx,0x10
c0019698:	c1 e0 08             	shl    eax,0x8
c001969b:	bf f8 0c 00 00       	mov    edi,0xcf8
c00196a0:	09 c1                	or     ecx,eax
c00196a2:	89 fa                	mov    edx,edi
c00196a4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00196ab:	c1 e0 0b             	shl    eax,0xb
c00196ae:	09 c1                	or     ecx,eax
c00196b0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00196b6:	89 c8                	mov    eax,ecx
c00196b8:	ef                   	out    dx,eax
c00196b9:	be fc 0c 00 00       	mov    esi,0xcfc
c00196be:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00196c4:	89 f2                	mov    edx,esi
c00196c6:	ee                   	out    dx,al
c00196c7:	89 c8                	mov    eax,ecx
c00196c9:	89 fa                	mov    edx,edi
c00196cb:	ef                   	out    dx,eax
c00196cc:	89 f2                	mov    edx,esi
c00196ce:	ed                   	in     eax,dx
c00196cf:	0f b6 c0             	movzx  eax,al
c00196d2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00196d8:	74 46                	je     c0019720 <IDE::open(int, int, void*)+0x1e0>
c00196da:	83 ec 0c             	sub    esp,0xc
c00196dd:	68 3c f4 01 c0       	push   0xc001f43c
c00196e2:	eb 34                	jmp    c0019718 <IDE::open(int, int, void*)+0x1d8>
c00196e4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00196ed:	75 17                	jne    c0019706 <IDE::open(int, int, void*)+0x1c6>
c00196ef:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00196f4:	74 07                	je     c00196fd <IDE::open(int, int, void*)+0x1bd>
c00196f6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00196fb:	75 09                	jne    c0019706 <IDE::open(int, int, void*)+0x1c6>
c00196fd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019704:	eb 1a                	jmp    c0019720 <IDE::open(int, int, void*)+0x1e0>
c0019706:	83 ec 0c             	sub    esp,0xc
c0019709:	68 44 f4 01 c0       	push   0xc001f444
c001970e:	eb 08                	jmp    c0019718 <IDE::open(int, int, void*)+0x1d8>
c0019710:	83 ec 0c             	sub    esp,0xc
c0019713:	68 75 f4 01 c0       	push   0xc001f475
c0019718:	e8 8a 6b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001971d:	83 c4 10             	add    esp,0x10
c0019720:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019727:	79 1a                	jns    c0019743 <IDE::open(int, int, void*)+0x203>
c0019729:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001972f:	83 e0 fc             	and    eax,0xfffffffc
c0019732:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019739:	83 c0 08             	add    eax,0x8
c001973c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019743:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019749:	89 c2                	mov    edx,eax
c001974b:	83 e2 0f             	and    edx,0xf
c001974e:	66 83 fa 08          	cmp    dx,0x8
c0019752:	75 0a                	jne    c001975e <IDE::open(int, int, void*)+0x21e>
c0019754:	83 e8 02             	sub    eax,0x2
c0019757:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001975e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019764:	89 c2                	mov    edx,eax
c0019766:	83 e2 0f             	and    edx,0xf
c0019769:	66 83 fa 08          	cmp    dx,0x8
c001976d:	75 0a                	jne    c0019779 <IDE::open(int, int, void*)+0x239>
c001976f:	83 e8 02             	sub    eax,0x2
c0019772:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019779:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019780:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019787:	89 d0                	mov    eax,edx
c0019789:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001978c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019790:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019794:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019797:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001979c:	0f b6 c9             	movzx  ecx,cl
c001979f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00197a6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00197a9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00197ad:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00197b1:	8d 50 02             	lea    edx,[eax+0x2]
c00197b4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00197b9:	0f b6 d2             	movzx  edx,dl
c00197bc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00197c2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197c5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00197c9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00197cd:	8d 48 03             	lea    ecx,[eax+0x3]
c00197d0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00197d5:	0f b6 c9             	movzx  ecx,cl
c00197d8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00197de:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00197e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00197e5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00197e9:	8d 50 04             	lea    edx,[eax+0x4]
c00197ec:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00197f2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00197f7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00197fe:	66 85 f6             	test   si,si
c0019801:	74 5b                	je     c001985e <IDE::open(int, int, void*)+0x31e>
c0019803:	0f b6 d2             	movzx  edx,dl
c0019806:	83 c0 05             	add    eax,0x5
c0019809:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001980c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019810:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019814:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001981a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001981f:	eb 3d                	jmp    c001985e <IDE::open(int, int, void*)+0x31e>
c0019821:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019827:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001982e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019835:	66 05 06 02          	add    ax,0x206
c0019839:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019840:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019847:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001984e:	66 05 06 02          	add    ax,0x206
c0019852:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019859:	e9 e5 fe ff ff       	jmp    c0019743 <IDE::open(int, int, void*)+0x203>
c001985e:	50                   	push   eax
c001985f:	50                   	push   eax
c0019860:	6a 00                	push   0x0
c0019862:	53                   	push   ebx
c0019863:	e8 5e fa ff ff       	call   c00192c6 <IDE::prepareInterrupt(unsigned char)>
c0019868:	5a                   	pop    edx
c0019869:	59                   	pop    ecx
c001986a:	6a 01                	push   0x1
c001986c:	53                   	push   ebx
c001986d:	e8 54 fa ff ff       	call   c00192c6 <IDE::prepareInterrupt(unsigned char)>
c0019872:	83 c4 0c             	add    esp,0xc
c0019875:	6a 00                	push   0x0
c0019877:	6a 00                	push   0x0
c0019879:	53                   	push   ebx
c001987a:	e8 7b fc ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c001987f:	83 c4 0c             	add    esp,0xc
c0019882:	6a 00                	push   0x0
c0019884:	6a 01                	push   0x1
c0019886:	53                   	push   ebx
c0019887:	e8 6e fc ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c001988c:	83 c4 10             	add    esp,0x10
c001988f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019896:	74 34                	je     c00198cc <IDE::open(int, int, void*)+0x38c>
c0019898:	83 ec 0c             	sub    esp,0xc
c001989b:	53                   	push   ebx
c001989c:	6a 01                	push   0x1
c001989e:	68 c2 94 01 c0       	push   0xc00194c2
c00198a3:	6a 0e                	push   0xe
c00198a5:	53                   	push   ebx
c00198a6:	e8 99 22 ff ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00198ab:	83 c4 14             	add    esp,0x14
c00198ae:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00198b4:	53                   	push   ebx
c00198b5:	6a 01                	push   0x1
c00198b7:	68 de 94 01 c0       	push   0xc00194de
c00198bc:	6a 0f                	push   0xf
c00198be:	53                   	push   ebx
c00198bf:	e8 80 22 ff ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00198c4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00198ca:	eb 38                	jmp    c0019904 <IDE::open(int, int, void*)+0x3c4>
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00198d9:	53                   	push   ebx
c00198da:	6a 00                	push   0x0
c00198dc:	68 c2 94 01 c0       	push   0xc00194c2
c00198e1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00198e7:	53                   	push   ebx
c00198e8:	e8 57 22 ff ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00198ed:	83 c4 14             	add    esp,0x14
c00198f0:	53                   	push   ebx
c00198f1:	6a 00                	push   0x0
c00198f3:	68 de 94 01 c0       	push   0xc00194de
c00198f8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00198fe:	53                   	push   ebx
c00198ff:	e8 40 22 ff ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019904:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019906:	83 c4 20             	add    esp,0x20
c0019909:	83 ec 0c             	sub    esp,0xc
c001990c:	53                   	push   ebx
c001990d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019910:	83 c4 0c             	add    esp,0xc
c0019913:	6a 07                	push   0x7
c0019915:	6a 00                	push   0x0
c0019917:	53                   	push   ebx
c0019918:	e8 8f fa ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001991d:	83 c4 0c             	add    esp,0xc
c0019920:	6a 07                	push   0x7
c0019922:	6a 01                	push   0x1
c0019924:	53                   	push   ebx
c0019925:	e8 82 fa ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001992a:	83 c4 0c             	add    esp,0xc
c001992d:	6a 01                	push   0x1
c001992f:	6a 00                	push   0x0
c0019931:	53                   	push   ebx
c0019932:	e8 c3 fb ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c0019937:	83 c4 0c             	add    esp,0xc
c001993a:	6a 01                	push   0x1
c001993c:	6a 01                	push   0x1
c001993e:	53                   	push   ebx
c001993f:	e8 b6 fb ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c0019944:	83 c4 2c             	add    esp,0x2c
c0019947:	31 c0                	xor    eax,eax
c0019949:	5b                   	pop    ebx
c001994a:	5e                   	pop    esi
c001994b:	5f                   	pop    edi
c001994c:	5d                   	pop    ebp
c001994d:	c3                   	ret    

c001994e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001994e:	55                   	push   ebp
c001994f:	57                   	push   edi
c0019950:	56                   	push   esi
c0019951:	53                   	push   ebx
c0019952:	83 ec 1c             	sub    esp,0x1c
c0019955:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019959:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001995d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019960:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019964:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019968:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001996c:	80 fa 03             	cmp    dl,0x3
c001996f:	77 5d                	ja     c00199ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019971:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019975:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019979:	0f b6 db             	movzx  ebx,bl
c001997c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001997f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019983:	83 ca 80             	or     edx,0xffffff80
c0019986:	0f b6 d2             	movzx  edx,dl
c0019989:	52                   	push   edx
c001998a:	6a 0c                	push   0xc
c001998c:	53                   	push   ebx
c001998d:	56                   	push   esi
c001998e:	e8 59 f9 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019993:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019998:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001999c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00199a0:	0f b6 c0             	movzx  eax,al
c00199a3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00199a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00199a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00199ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00199b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00199b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00199ba:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00199c2:	83 c4 2c             	add    esp,0x2c
c00199c5:	5b                   	pop    ebx
c00199c6:	5e                   	pop    esi
c00199c7:	5f                   	pop    edi
c00199c8:	5d                   	pop    ebp
c00199c9:	e9 1e f9 ff ff       	jmp    c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199ce:	3c 07                	cmp    al,0x7
c00199d0:	77 10                	ja     c00199e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00199d2:	0f b6 db             	movzx  ebx,bl
c00199d5:	0f b6 d0             	movzx  edx,al
c00199d8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00199e0:	eb 2d                	jmp    c0019a0f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00199e2:	3c 0d                	cmp    al,0xd
c00199e4:	77 13                	ja     c00199f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00199e6:	0f b6 db             	movzx  ebx,bl
c00199e9:	0f b6 c0             	movzx  eax,al
c00199ec:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00199f3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00199f7:	eb 16                	jmp    c0019a0f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00199f9:	3c 15                	cmp    al,0x15
c00199fb:	77 14                	ja     c0019a11 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00199fd:	0f b6 db             	movzx  ebx,bl
c0019a00:	0f b6 c0             	movzx  eax,al
c0019a03:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019a0b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019a0f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019a11:	83 c4 1c             	add    esp,0x1c
c0019a14:	5b                   	pop    ebx
c0019a15:	5e                   	pop    esi
c0019a16:	5f                   	pop    edi
c0019a17:	5d                   	pop    ebp
c0019a18:	c3                   	ret    
c0019a19:	90                   	nop

c0019a1a <IDE::detect()>:
c0019a1a:	55                   	push   ebp
c0019a1b:	57                   	push   edi
c0019a1c:	56                   	push   esi
c0019a1d:	53                   	push   ebx
c0019a1e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019a24:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019a2b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019a32:	0f 85 97 02 00 00    	jne    c0019ccf <IDE::detect()+0x2b5>
c0019a38:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019a3f:	31 f6                	xor    esi,esi
c0019a41:	31 ed                	xor    ebp,ebp
c0019a43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a4b:	89 e8                	mov    eax,ebp
c0019a4d:	c1 e0 06             	shl    eax,0x6
c0019a50:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019a58:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a60:	c1 e0 04             	shl    eax,0x4
c0019a63:	83 c8 a0             	or     eax,0xffffffa0
c0019a66:	0f b6 c0             	movzx  eax,al
c0019a69:	50                   	push   eax
c0019a6a:	6a 06                	push   0x6
c0019a6c:	56                   	push   esi
c0019a6d:	53                   	push   ebx
c0019a6e:	e8 79 f8 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a73:	83 c4 0c             	add    esp,0xc
c0019a76:	6a 0c                	push   0xc
c0019a78:	56                   	push   esi
c0019a79:	53                   	push   ebx
c0019a7a:	e8 2d f9 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019a7f:	83 c4 0c             	add    esp,0xc
c0019a82:	6a 0c                	push   0xc
c0019a84:	56                   	push   esi
c0019a85:	53                   	push   ebx
c0019a86:	e8 21 f9 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019a8b:	83 c4 0c             	add    esp,0xc
c0019a8e:	6a 0c                	push   0xc
c0019a90:	56                   	push   esi
c0019a91:	53                   	push   ebx
c0019a92:	e8 15 f9 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019a97:	83 c4 0c             	add    esp,0xc
c0019a9a:	6a 0c                	push   0xc
c0019a9c:	56                   	push   esi
c0019a9d:	53                   	push   ebx
c0019a9e:	e8 09 f9 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019aa3:	68 ec 00 00 00       	push   0xec
c0019aa8:	6a 07                	push   0x7
c0019aaa:	56                   	push   esi
c0019aab:	53                   	push   ebx
c0019aac:	e8 3b f8 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ab1:	83 c4 1c             	add    esp,0x1c
c0019ab4:	6a 0c                	push   0xc
c0019ab6:	56                   	push   esi
c0019ab7:	53                   	push   ebx
c0019ab8:	e8 ef f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019abd:	83 c4 0c             	add    esp,0xc
c0019ac0:	6a 0c                	push   0xc
c0019ac2:	56                   	push   esi
c0019ac3:	53                   	push   ebx
c0019ac4:	e8 e3 f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019ac9:	83 c4 0c             	add    esp,0xc
c0019acc:	6a 0c                	push   0xc
c0019ace:	56                   	push   esi
c0019acf:	53                   	push   ebx
c0019ad0:	e8 d7 f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019ad5:	83 c4 0c             	add    esp,0xc
c0019ad8:	6a 0c                	push   0xc
c0019ada:	56                   	push   esi
c0019adb:	53                   	push   ebx
c0019adc:	e8 cb f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019ae1:	83 c4 0c             	add    esp,0xc
c0019ae4:	6a 0c                	push   0xc
c0019ae6:	56                   	push   esi
c0019ae7:	53                   	push   ebx
c0019ae8:	e8 bf f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	84 c0                	test   al,al
c0019af2:	0f 84 5f 01 00 00    	je     c0019c57 <IDE::detect()+0x23d>
c0019af8:	31 ff                	xor    edi,edi
c0019afa:	50                   	push   eax
c0019afb:	6a 0c                	push   0xc
c0019afd:	56                   	push   esi
c0019afe:	53                   	push   ebx
c0019aff:	e8 a8 f8 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019b04:	83 c4 10             	add    esp,0x10
c0019b07:	a8 01                	test   al,0x1
c0019b09:	0f 85 69 01 00 00    	jne    c0019c78 <IDE::detect()+0x25e>
c0019b0f:	84 c0                	test   al,al
c0019b11:	78 04                	js     c0019b17 <IDE::detect()+0xfd>
c0019b13:	a8 08                	test   al,0x8
c0019b15:	75 23                	jne    c0019b3a <IDE::detect()+0x120>
c0019b17:	47                   	inc    edi
c0019b18:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019b1e:	7e da                	jle    c0019afa <IDE::detect()+0xe0>
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	6a 32                	push   0x32
c0019b25:	e8 d2 9d ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c0019b2a:	83 c4 10             	add    esp,0x10
c0019b2d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019b33:	75 c5                	jne    c0019afa <IDE::detect()+0xe0>
c0019b35:	e9 3e 01 00 00       	jmp    c0019c78 <IDE::detect()+0x25e>
c0019b3a:	31 c9                	xor    ecx,ecx
c0019b3c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019b40:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019b44:	83 ec 0c             	sub    esp,0xc
c0019b47:	68 80 00 00 00       	push   0x80
c0019b4c:	57                   	push   edi
c0019b4d:	6a 00                	push   0x0
c0019b4f:	56                   	push   esi
c0019b50:	53                   	push   ebx
c0019b51:	e8 f8 fd ff ff       	call   c001994e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019b56:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019b5b:	89 e8                	mov    eax,ebp
c0019b5d:	89 d1                	mov    ecx,edx
c0019b5f:	c1 e0 06             	shl    eax,0x6
c0019b62:	01 d8                	add    eax,ebx
c0019b64:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019b6b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019b72:	89 f2                	mov    edx,esi
c0019b74:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019b7a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019b7e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019b84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b88:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019b8f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019b97:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019b9e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019ba6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019bac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019bb3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019bb9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019bbd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019bc1:	83 c4 20             	add    esp,0x20
c0019bc4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019bc7:	83 c0 02             	add    eax,0x2
c0019bca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019bd0:	83 c7 02             	add    edi,0x2
c0019bd3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019bd6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019bdc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019be0:	75 e2                	jne    c0019bc4 <IDE::detect()+0x1aa>
c0019be2:	89 e8                	mov    eax,ebp
c0019be4:	c1 e0 06             	shl    eax,0x6
c0019be7:	01 d8                	add    eax,ebx
c0019be9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019bef:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019bf6:	66 c1 ea 09          	shr    dx,0x9
c0019bfa:	83 e2 01             	and    edx,0x1
c0019bfd:	84 c9                	test   cl,cl
c0019bff:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019c05:	75 22                	jne    c0019c29 <IDE::detect()+0x20f>
c0019c07:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019c0e:	74 46                	je     c0019c56 <IDE::detect()+0x23c>
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	68 7c 01 00 00       	push   0x17c
c0019c18:	e8 ac dd fe ff       	call   c00079c9 <malloc>
c0019c1d:	89 c7                	mov    edi,eax
c0019c1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c22:	e8 11 05 00 00       	call   c001a138 <ATA::ATA()>
c0019c27:	eb 17                	jmp    c0019c40 <IDE::detect()+0x226>
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	68 84 01 00 00       	push   0x184
c0019c31:	e8 93 dd fe ff       	call   c00079c9 <malloc>
c0019c36:	89 c7                	mov    edi,eax
c0019c38:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c3b:	e8 f0 0a 00 00       	call   c001a730 <ATAPI::ATAPI()>
c0019c40:	5a                   	pop    edx
c0019c41:	59                   	pop    ecx
c0019c42:	57                   	push   edi
c0019c43:	53                   	push   ebx
c0019c44:	e8 4f 1f ff ff       	call   c000bb98 <Device::addChild(Device*)>
c0019c49:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c4b:	53                   	push   ebx
c0019c4c:	55                   	push   ebp
c0019c4d:	6a 00                	push   0x0
c0019c4f:	57                   	push   edi
c0019c50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c53:	83 c4 20             	add    esp,0x20
c0019c56:	45                   	inc    ebp
c0019c57:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019c5c:	74 0d                	je     c0019c6b <IDE::detect()+0x251>
c0019c5e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019c66:	e9 e0 fd ff ff       	jmp    c0019a4b <IDE::detect()+0x31>
c0019c6b:	4e                   	dec    esi
c0019c6c:	74 61                	je     c0019ccf <IDE::detect()+0x2b5>
c0019c6e:	be 01 00 00 00       	mov    esi,0x1
c0019c73:	e9 cb fd ff ff       	jmp    c0019a43 <IDE::detect()+0x29>
c0019c78:	50                   	push   eax
c0019c79:	6a 04                	push   0x4
c0019c7b:	56                   	push   esi
c0019c7c:	53                   	push   ebx
c0019c7d:	e8 2a f7 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019c82:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019c86:	83 c4 0c             	add    esp,0xc
c0019c89:	6a 05                	push   0x5
c0019c8b:	56                   	push   esi
c0019c8c:	53                   	push   ebx
c0019c8d:	e8 1a f7 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019c92:	83 c4 10             	add    esp,0x10
c0019c95:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019c99:	80 fa 14             	cmp    dl,0x14
c0019c9c:	75 04                	jne    c0019ca2 <IDE::detect()+0x288>
c0019c9e:	3c eb                	cmp    al,0xeb
c0019ca0:	eb 07                	jmp    c0019ca9 <IDE::detect()+0x28f>
c0019ca2:	3c 96                	cmp    al,0x96
c0019ca4:	75 b1                	jne    c0019c57 <IDE::detect()+0x23d>
c0019ca6:	80 fa 69             	cmp    dl,0x69
c0019ca9:	75 ac                	jne    c0019c57 <IDE::detect()+0x23d>
c0019cab:	68 a1 00 00 00       	push   0xa1
c0019cb0:	6a 07                	push   0x7
c0019cb2:	56                   	push   esi
c0019cb3:	53                   	push   ebx
c0019cb4:	e8 33 f6 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cb9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019cc0:	e8 37 9c ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	b1 01                	mov    cl,0x1
c0019cca:	e9 6d fe ff ff       	jmp    c0019b3c <IDE::detect()+0x122>
c0019ccf:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cd5:	5b                   	pop    ebx
c0019cd6:	5e                   	pop    esi
c0019cd7:	5f                   	pop    edi
c0019cd8:	5d                   	pop    ebp
c0019cd9:	c3                   	ret    

c0019cda <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019cda:	55                   	push   ebp
c0019cdb:	57                   	push   edi
c0019cdc:	56                   	push   esi
c0019cdd:	53                   	push   ebx
c0019cde:	83 ec 1c             	sub    esp,0x1c
c0019ce1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ce5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ce9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ced:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019cf1:	88 c3                	mov    bl,al
c0019cf3:	84 c0                	test   al,al
c0019cf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cf9:	0f 84 81 00 00 00    	je     c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	68 9f f4 01 c0       	push   0xc001f49f
c0019d07:	e8 4c 0a ff ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d13:	3c 01                	cmp    al,0x1
c0019d15:	74 63                	je     c0019d7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019d17:	3c 02                	cmp    al,0x2
c0019d19:	75 53                	jne    c0019d6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019d1b:	01 f6                	add    esi,esi
c0019d1d:	09 ee                	or     esi,ebp
c0019d1f:	50                   	push   eax
c0019d20:	89 f0                	mov    eax,esi
c0019d22:	6a 01                	push   0x1
c0019d24:	0f b6 f0             	movzx  esi,al
c0019d27:	c1 e6 06             	shl    esi,0x6
c0019d2a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019d32:	50                   	push   eax
c0019d33:	57                   	push   edi
c0019d34:	e8 73 f6 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019d39:	83 c4 10             	add    esp,0x10
c0019d3c:	a8 01                	test   al,0x1
c0019d3e:	74 02                	je     c0019d42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019d40:	b3 07                	mov    bl,0x7
c0019d42:	a8 02                	test   al,0x2
c0019d44:	74 02                	je     c0019d48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019d46:	b3 03                	mov    bl,0x3
c0019d48:	a8 04                	test   al,0x4
c0019d4a:	74 02                	je     c0019d4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019d4c:	b3 14                	mov    bl,0x14
c0019d4e:	a8 08                	test   al,0x8
c0019d50:	74 02                	je     c0019d54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019d52:	b3 03                	mov    bl,0x3
c0019d54:	a8 10                	test   al,0x10
c0019d56:	74 02                	je     c0019d5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019d58:	b3 15                	mov    bl,0x15
c0019d5a:	a8 20                	test   al,0x20
c0019d5c:	74 02                	je     c0019d60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019d5e:	b3 03                	mov    bl,0x3
c0019d60:	a8 40                	test   al,0x40
c0019d62:	74 02                	je     c0019d66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019d64:	b3 16                	mov    bl,0x16
c0019d66:	84 c0                	test   al,al
c0019d68:	79 16                	jns    c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019d6a:	b3 0d                	mov    bl,0xd
c0019d6c:	eb 12                	jmp    c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019d6e:	3c 03                	cmp    al,0x3
c0019d70:	74 0c                	je     c0019d7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019d72:	3c 04                	cmp    al,0x4
c0019d74:	75 0a                	jne    c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019d76:	b3 08                	mov    bl,0x8
c0019d78:	eb 06                	jmp    c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019d7a:	b3 13                	mov    bl,0x13
c0019d7c:	eb 02                	jmp    c0019d80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019d7e:	b3 17                	mov    bl,0x17
c0019d80:	83 c4 1c             	add    esp,0x1c
c0019d83:	88 d8                	mov    al,bl
c0019d85:	5b                   	pop    ebx
c0019d86:	5e                   	pop    esi
c0019d87:	5f                   	pop    edi
c0019d88:	5d                   	pop    ebp
c0019d89:	c3                   	ret    

c0019d8a <IDE::polling(unsigned char, unsigned int)>:
c0019d8a:	55                   	push   ebp
c0019d8b:	bd 04 00 00 00       	mov    ebp,0x4
c0019d90:	57                   	push   edi
c0019d91:	56                   	push   esi
c0019d92:	53                   	push   ebx
c0019d93:	83 ec 0c             	sub    esp,0xc
c0019d96:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d9a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019d9e:	0f b6 f3             	movzx  esi,bl
c0019da1:	52                   	push   edx
c0019da2:	6a 0c                	push   0xc
c0019da4:	56                   	push   esi
c0019da5:	57                   	push   edi
c0019da6:	e8 01 f6 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	4d                   	dec    ebp
c0019daf:	75 ed                	jne    c0019d9e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019db1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019db6:	50                   	push   eax
c0019db7:	6a 0c                	push   0xc
c0019db9:	56                   	push   esi
c0019dba:	57                   	push   edi
c0019dbb:	e8 ec f5 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	a8 01                	test   al,0x1
c0019dc5:	75 17                	jne    c0019dde <IDE::polling(unsigned char, unsigned int)+0x54>
c0019dc7:	a8 20                	test   al,0x20
c0019dc9:	75 0f                	jne    c0019dda <IDE::polling(unsigned char, unsigned int)+0x50>
c0019dcb:	4b                   	dec    ebx
c0019dcc:	74 10                	je     c0019dde <IDE::polling(unsigned char, unsigned int)+0x54>
c0019dce:	84 c0                	test   al,al
c0019dd0:	78 e4                	js     c0019db6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019dd2:	a8 08                	test   al,0x8
c0019dd4:	74 e0                	je     c0019db6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019dd6:	31 c0                	xor    eax,eax
c0019dd8:	eb 06                	jmp    c0019de0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019dda:	b0 01                	mov    al,0x1
c0019ddc:	eb 02                	jmp    c0019de0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019dde:	b0 02                	mov    al,0x2
c0019de0:	83 c4 0c             	add    esp,0xc
c0019de3:	5b                   	pop    ebx
c0019de4:	5e                   	pop    esi
c0019de5:	5f                   	pop    edi
c0019de6:	5d                   	pop    ebp
c0019de7:	c3                   	ret    

c0019de8 <SATABus::close(int, int, void*)>:
c0019de8:	31 c0                	xor    eax,eax
c0019dea:	c3                   	ret    
c0019deb:	90                   	nop

c0019dec <SATABus::detect()>:
c0019dec:	c3                   	ret    
c0019ded:	90                   	nop

c0019dee <SATABus::SATABus()>:
c0019dee:	83 ec 0c             	sub    esp,0xc
c0019df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df5:	83 ec 08             	sub    esp,0x8
c0019df8:	68 d8 f4 01 c0       	push   0xc001f4d8
c0019dfd:	50                   	push   eax
c0019dfe:	e8 d9 20 ff ff       	call   c000bedc <HardDiskController::HardDiskController(char const*)>
c0019e03:	83 c4 10             	add    esp,0x10
c0019e06:	ba 04 f5 01 c0       	mov    edx,0xc001f504
c0019e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e0f:	89 10                	mov    DWORD PTR [eax],edx
c0019e11:	83 ec 0c             	sub    esp,0xc
c0019e14:	6a 50                	push   0x50
c0019e16:	e8 39 e0 fe ff       	call   c0007e54 <Phys::allocateContiguousPages(int)>
c0019e1b:	83 c4 10             	add    esp,0x10
c0019e1e:	89 c2                	mov    edx,eax
c0019e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e24:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019e2a:	83 ec 0c             	sub    esp,0xc
c0019e2d:	6a 50                	push   0x50
c0019e2f:	e8 d1 f6 fe ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	89 c2                	mov    edx,eax
c0019e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e3d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019e43:	a1 30 0c 02 c0       	mov    eax,ds:0xc0020c30
c0019e48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e4c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019e52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e56:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	6a 03                	push   0x3
c0019e61:	6a 50                	push   0x50
c0019e63:	51                   	push   ecx
c0019e64:	52                   	push   edx
c0019e65:	50                   	push   eax
c0019e66:	e8 29 00 ff ff       	call   c0009e94 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019e6b:	83 c4 20             	add    esp,0x20
c0019e6e:	90                   	nop
c0019e6f:	83 c4 0c             	add    esp,0xc
c0019e72:	c3                   	ret    
c0019e73:	90                   	nop

c0019e74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019e74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e78:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019e7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019e7e:	09 c2                	or     edx,eax
c0019e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019e8a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e8c:	31 c0                	xor    eax,eax
c0019e8e:	c1 e9 08             	shr    ecx,0x8
c0019e91:	83 e1 0f             	and    ecx,0xf
c0019e94:	39 c8                	cmp    eax,ecx
c0019e96:	74 0a                	je     c0019ea2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019e98:	f6 c2 01             	test   dl,0x1
c0019e9b:	74 08                	je     c0019ea5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019e9d:	d1 ea                	shr    edx,1
c0019e9f:	40                   	inc    eax
c0019ea0:	eb f2                	jmp    c0019e94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019ea2:	83 c8 ff             	or     eax,0xffffffff
c0019ea5:	c3                   	ret    

c0019ea6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019ea6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019eaa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ead:	89 c2                	mov    edx,eax
c0019eaf:	c1 ea 08             	shr    edx,0x8
c0019eb2:	83 e2 0f             	and    edx,0xf
c0019eb5:	fe ca                	dec    dl
c0019eb7:	75 31                	jne    c0019eea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019eb9:	83 e0 0f             	and    eax,0xf
c0019ebc:	3c 03                	cmp    al,0x3
c0019ebe:	75 2a                	jne    c0019eea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ec0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ec3:	b8 02 00 00 00       	mov    eax,0x2
c0019ec8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019ece:	74 1c                	je     c0019eec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ed0:	b8 04 00 00 00       	mov    eax,0x4
c0019ed5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019edb:	74 0f                	je     c0019eec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019edd:	31 c0                	xor    eax,eax
c0019edf:	83 fa 03             	cmp    edx,0x3
c0019ee2:	0f 94 c0             	sete   al
c0019ee5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019ee9:	c3                   	ret    
c0019eea:	31 c0                	xor    eax,eax
c0019eec:	c3                   	ret    
c0019eed:	90                   	nop

c0019eee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ef2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ef5:	0f ba e2 0f          	bt     edx,0xf
c0019ef9:	72 f7                	jb     c0019ef2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019efb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019efe:	83 ca 10             	or     edx,0x10
c0019f01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019f04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f07:	83 ca 01             	or     edx,0x1
c0019f0a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019f0d:	c3                   	ret    

c0019f0e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019f0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f15:	83 e2 fe             	and    edx,0xfffffffe
c0019f18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019f1b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f1e:	83 e2 ef             	and    edx,0xffffffef
c0019f21:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019f24:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f27:	0f ba e2 0e          	bt     edx,0xe
c0019f2b:	72 f7                	jb     c0019f24 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019f2d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019f30:	0f ba e2 0f          	bt     edx,0xf
c0019f34:	72 ee                	jb     c0019f24 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019f38:	55                   	push   ebp
c0019f39:	57                   	push   edi
c0019f3a:	56                   	push   esi
c0019f3b:	53                   	push   ebx
c0019f3c:	83 ec 1c             	sub    esp,0x1c
c0019f3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019f43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019f47:	53                   	push   ebx
c0019f48:	56                   	push   esi
c0019f49:	e8 c0 ff ff ff       	call   c0019f0e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019f4e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019f52:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	c1 e5 0a             	shl    ebp,0xa
c0019f5e:	01 e8                	add    eax,ebp
c0019f60:	89 03                	mov    DWORD PTR [ebx],eax
c0019f62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f64:	68 00 04 00 00       	push   0x400
c0019f69:	6a 00                	push   0x0
c0019f6b:	50                   	push   eax
c0019f6c:	e8 7f 65 fe ff       	call   c00004f0 <memset>
c0019f71:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019f77:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019f7b:	01 e8                	add    eax,ebp
c0019f7d:	83 c4 1c             	add    esp,0x1c
c0019f80:	89 03                	mov    DWORD PTR [ebx],eax
c0019f82:	c1 e2 08             	shl    edx,0x8
c0019f85:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019f8c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019f92:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019f98:	01 f8                	add    eax,edi
c0019f9a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019f9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019fa0:	68 00 01 00 00       	push   0x100
c0019fa5:	6a 00                	push   0x0
c0019fa7:	50                   	push   eax
c0019fa8:	e8 43 65 fe ff       	call   c00004f0 <memset>
c0019fad:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019fb3:	01 fa                	add    edx,edi
c0019fb5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fb9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019fbc:	c1 e7 0d             	shl    edi,0xd
c0019fbf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019fc6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019fcc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fd6:	31 ff                	xor    edi,edi
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019fe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fe5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019feb:	83 c5 20             	add    ebp,0x20
c0019fee:	01 f8                	add    eax,edi
c0019ff0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019ff3:	52                   	push   edx
c0019ff4:	68 00 01 00 00       	push   0x100
c0019ff9:	6a 00                	push   0x0
c0019ffb:	50                   	push   eax
c0019ffc:	e8 ef 64 fe ff       	call   c00004f0 <memset>
c001a001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001a00e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001a015:	01 f8                	add    eax,edi
c001a017:	81 c7 00 01 00 00    	add    edi,0x100
c001a01d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a020:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001a026:	75 b3                	jne    c0019fdb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001a028:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001a02f:	50                   	push   eax
c001a030:	50                   	push   eax
c001a031:	53                   	push   ebx
c001a032:	56                   	push   esi
c001a033:	e8 b6 fe ff ff       	call   c0019eee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001a038:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001a03f:	83 c4 2c             	add    esp,0x2c
c001a042:	5b                   	pop    ebx
c001a043:	5e                   	pop    esi
c001a044:	5f                   	pop    edi
c001a045:	5d                   	pop    ebp
c001a046:	c3                   	ret    
c001a047:	90                   	nop

c001a048 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001a048:	55                   	push   ebp
c001a049:	57                   	push   edi
c001a04a:	56                   	push   esi
c001a04b:	53                   	push   ebx
c001a04c:	31 db                	xor    ebx,ebx
c001a04e:	83 ec 0c             	sub    esp,0xc
c001a051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a055:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a059:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001a05c:	f7 c7 01 00 00 00    	test   edi,0x1
c001a062:	74 7a                	je     c001a0de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a064:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a068:	89 d8                	mov    eax,ebx
c001a06a:	c1 e0 07             	shl    eax,0x7
c001a06d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001a074:	55                   	push   ebp
c001a075:	56                   	push   esi
c001a076:	e8 2b fe ff ff       	call   c0019ea6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001a07b:	5a                   	pop    edx
c001a07c:	83 f8 01             	cmp    eax,0x1
c001a07f:	59                   	pop    ecx
c001a080:	75 21                	jne    c001a0a3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001a082:	50                   	push   eax
c001a083:	53                   	push   ebx
c001a084:	55                   	push   ebp
c001a085:	56                   	push   esi
c001a086:	e8 ad fe ff ff       	call   c0019f38 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a08b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001a092:	e8 32 d9 fe ff       	call   c00079c9 <malloc>
c001a097:	89 c5                	mov    ebp,eax
c001a099:	89 04 24             	mov    DWORD PTR [esp],eax
c001a09c:	e8 43 0d 00 00       	call   c001ade4 <SATA::SATA()>
c001a0a1:	eb 24                	jmp    c001a0c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001a0a3:	83 f8 04             	cmp    eax,0x4
c001a0a6:	75 36                	jne    c001a0de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001a0a8:	51                   	push   ecx
c001a0a9:	53                   	push   ebx
c001a0aa:	55                   	push   ebp
c001a0ab:	56                   	push   esi
c001a0ac:	e8 87 fe ff ff       	call   c0019f38 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001a0b1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001a0b8:	e8 0c d9 fe ff       	call   c00079c9 <malloc>
c001a0bd:	89 c5                	mov    ebp,eax
c001a0bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0c2:	e8 71 11 00 00       	call   c001b238 <SATAPI::SATAPI()>
c001a0c7:	58                   	pop    eax
c001a0c8:	5a                   	pop    edx
c001a0c9:	55                   	push   ebp
c001a0ca:	56                   	push   esi
c001a0cb:	e8 c8 1a ff ff       	call   c000bb98 <Device::addChild(Device*)>
c001a0d0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0d3:	56                   	push   esi
c001a0d4:	6a 00                	push   0x0
c001a0d6:	53                   	push   ebx
c001a0d7:	55                   	push   ebp
c001a0d8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a0db:	83 c4 20             	add    esp,0x20
c001a0de:	d1 ef                	shr    edi,1
c001a0e0:	43                   	inc    ebx
c001a0e1:	83 fb 20             	cmp    ebx,0x20
c001a0e4:	0f 85 72 ff ff ff    	jne    c001a05c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001a0ea:	83 c4 0c             	add    esp,0xc
c001a0ed:	5b                   	pop    ebx
c001a0ee:	5e                   	pop    esi
c001a0ef:	5f                   	pop    edi
c001a0f0:	5d                   	pop    ebp
c001a0f1:	c3                   	ret    

c001a0f2 <SATABus::open(int, int, void*)>:
c001a0f2:	83 ec 14             	sub    esp,0x14
c001a0f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a0f9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001a0ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001a105:	52                   	push   edx
c001a106:	50                   	push   eax
c001a107:	e8 3c ff ff ff       	call   c001a048 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001a10c:	31 c0                	xor    eax,eax
c001a10e:	83 c4 1c             	add    esp,0x1c
c001a111:	c3                   	ret    

c001a112 <ATA::close(int, int, void*)>:
c001a112:	83 ec 0c             	sub    esp,0xc
c001a115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a119:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a11f:	85 c0                	test   eax,eax
c001a121:	74 0c                	je     c001a12f <ATA::close(int, int, void*)+0x1d>
c001a123:	83 ec 0c             	sub    esp,0xc
c001a126:	8b 10                	mov    edx,DWORD PTR [eax]
c001a128:	50                   	push   eax
c001a129:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	31 c0                	xor    eax,eax
c001a131:	83 c4 0c             	add    esp,0xc
c001a134:	c3                   	ret    
c001a135:	90                   	nop

c001a136 <ATA::powerSaving(PowerSavingLevel)>:
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <ATA::ATA()>:
c001a138:	83 ec 0c             	sub    esp,0xc
c001a13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a13f:	83 ec 04             	sub    esp,0x4
c001a142:	68 00 02 00 00       	push   0x200
c001a147:	68 d1 f5 01 c0       	push   0xc001f5d1
c001a14c:	50                   	push   eax
c001a14d:	e8 14 1e ff ff       	call   c000bf66 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	ba 44 f5 01 c0       	mov    edx,0xc001f544
c001a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15e:	89 10                	mov    DWORD PTR [eax],edx
c001a160:	90                   	nop
c001a161:	83 c4 0c             	add    esp,0xc
c001a164:	c3                   	ret    
c001a165:	90                   	nop

c001a166 <ATA::flush(bool)>:
c001a166:	53                   	push   ebx
c001a167:	83 ec 08             	sub    esp,0x8
c001a16a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001a16f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a173:	19 c0                	sbb    eax,eax
c001a175:	83 e0 fd             	and    eax,0xfffffffd
c001a178:	05 ea 00 00 00       	add    eax,0xea
c001a17d:	50                   	push   eax
c001a17e:	6a 07                	push   0x7
c001a180:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a187:	50                   	push   eax
c001a188:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18e:	e8 59 f1 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a193:	83 c4 0c             	add    esp,0xc
c001a196:	6a 00                	push   0x0
c001a198:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a19f:	50                   	push   eax
c001a1a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a6:	e8 df fb ff ff       	call   c0019d8a <IDE::polling(unsigned char, unsigned int)>
c001a1ab:	83 c4 18             	add    esp,0x18
c001a1ae:	5b                   	pop    ebx
c001a1af:	c3                   	ret    

c001a1b0 <ATA::readyForCommand()>:
c001a1b0:	56                   	push   esi
c001a1b1:	53                   	push   ebx
c001a1b2:	53                   	push   ebx
c001a1b3:	31 db                	xor    ebx,ebx
c001a1b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1b9:	51                   	push   ecx
c001a1ba:	6a 0c                	push   0xc
c001a1bc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a1c3:	50                   	push   eax
c001a1c4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a1ca:	e8 dd f1 ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	a8 88                	test   al,0x88
c001a1d4:	74 1f                	je     c001a1f5 <ATA::readyForCommand()+0x45>
c001a1d6:	43                   	inc    ebx
c001a1d7:	83 fb 63             	cmp    ebx,0x63
c001a1da:	7e dd                	jle    c001a1b9 <ATA::readyForCommand()+0x9>
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	6a 0a                	push   0xa
c001a1e1:	e8 16 97 ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a1ef:	75 c8                	jne    c001a1b9 <ATA::readyForCommand()+0x9>
c001a1f1:	31 c0                	xor    eax,eax
c001a1f3:	eb 02                	jmp    c001a1f7 <ATA::readyForCommand()+0x47>
c001a1f5:	b0 01                	mov    al,0x1
c001a1f7:	5a                   	pop    edx
c001a1f8:	5b                   	pop    ebx
c001a1f9:	5e                   	pop    esi
c001a1fa:	c3                   	ret    
c001a1fb:	90                   	nop

c001a1fc <ATA::access(unsigned long long, int, void*, bool)>:
c001a1fc:	55                   	push   ebp
c001a1fd:	57                   	push   edi
c001a1fe:	56                   	push   esi
c001a1ff:	53                   	push   ebx
c001a200:	83 ec 2c             	sub    esp,0x2c
c001a203:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a207:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a20b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a20f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a213:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a217:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a21b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a21f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a225:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a229:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a22f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a233:	c1 e0 06             	shl    eax,0x6
c001a236:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a23e:	74 5d                	je     c001a29d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a240:	89 fa                	mov    edx,edi
c001a242:	89 f0                	mov    eax,esi
c001a244:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a248:	c1 ea 1c             	shr    edx,0x1c
c001a24b:	89 d1                	mov    ecx,edx
c001a24d:	09 c1                	or     ecx,eax
c001a24f:	74 25                	je     c001a276 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a251:	31 ed                	xor    ebp,ebp
c001a253:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a25a:	89 fa                	mov    edx,edi
c001a25c:	89 f0                	mov    eax,esi
c001a25e:	0f ad d0             	shrd   eax,edx,cl
c001a261:	d3 ea                	shr    edx,cl
c001a263:	f6 c1 20             	test   cl,0x20
c001a266:	74 02                	je     c001a26a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a268:	89 d0                	mov    eax,edx
c001a26a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a26e:	45                   	inc    ebp
c001a26f:	83 fd 06             	cmp    ebp,0x6
c001a272:	75 df                	jne    c001a253 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a274:	eb 76                	jmp    c001a2ec <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a276:	89 f0                	mov    eax,esi
c001a278:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a27d:	89 fa                	mov    edx,edi
c001a27f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a286:	0f ac d0 10          	shrd   eax,edx,0x10
c001a28a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a28f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a293:	c1 ee 18             	shr    esi,0x18
c001a296:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a29b:	eb 56                	jmp    c001a2f3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a29d:	6a 00                	push   0x0
c001a29f:	6a 3f                	push   0x3f
c001a2a1:	57                   	push   edi
c001a2a2:	56                   	push   esi
c001a2a3:	e8 28 22 00 00       	call   c001c4d0 <__umoddi3>
c001a2a8:	83 c4 10             	add    esp,0x10
c001a2ab:	40                   	inc    eax
c001a2ac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a2b0:	6a 00                	push   0x0
c001a2b2:	68 f0 03 00 00       	push   0x3f0
c001a2b7:	57                   	push   edi
c001a2b8:	56                   	push   esi
c001a2b9:	e8 12 21 00 00       	call   c001c3d0 <__udivdi3>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a2c6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a2cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a2d2:	6a 00                	push   0x0
c001a2d4:	6a 3f                	push   0x3f
c001a2d6:	57                   	push   edi
c001a2d7:	56                   	push   esi
c001a2d8:	e8 f3 20 00 00       	call   c001c3d0 <__udivdi3>
c001a2dd:	83 c4 10             	add    esp,0x10
c001a2e0:	89 c6                	mov    esi,eax
c001a2e2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a2e7:	83 e6 0f             	and    esi,0xf
c001a2ea:	eb 07                	jmp    c001a2f3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a2ec:	31 f6                	xor    esi,esi
c001a2ee:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a2f3:	bf 01 00 00 00       	mov    edi,0x1
c001a2f8:	50                   	push   eax
c001a2f9:	6a 00                	push   0x0
c001a2fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a302:	50                   	push   eax
c001a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a307:	e8 ee f1 ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c001a30c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a30f:	e8 9c fe ff ff       	call   c001a1b0 <ATA::readyForCommand()>
c001a314:	83 c4 10             	add    esp,0x10
c001a317:	84 c0                	test   al,al
c001a319:	0f 84 4e 02 00 00    	je     c001a56d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a31f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a325:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a32b:	c1 e0 04             	shl    eax,0x4
c001a32e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a335:	09 c6                	or     esi,eax
c001a337:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a33c:	75 05                	jne    c001a343 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a33e:	83 ce a0             	or     esi,0xffffffa0
c001a341:	eb 03                	jmp    c001a346 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a343:	83 ce e0             	or     esi,0xffffffe0
c001a346:	89 f0                	mov    eax,esi
c001a348:	0f b6 f0             	movzx  esi,al
c001a34b:	56                   	push   esi
c001a34c:	6a 06                	push   0x6
c001a34e:	51                   	push   ecx
c001a34f:	52                   	push   edx
c001a350:	e8 97 ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	6a 00                	push   0x0
c001a35a:	6a 01                	push   0x1
c001a35c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a363:	50                   	push   eax
c001a364:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a36a:	e8 7d ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a377:	75 6e                	jne    c001a3e7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a379:	6a 00                	push   0x0
c001a37b:	6a 08                	push   0x8
c001a37d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a384:	50                   	push   eax
c001a385:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a38b:	e8 5c ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a390:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a395:	50                   	push   eax
c001a396:	6a 09                	push   0x9
c001a398:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a39f:	50                   	push   eax
c001a3a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3a6:	e8 41 ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3ab:	83 c4 20             	add    esp,0x20
c001a3ae:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a3b3:	50                   	push   eax
c001a3b4:	6a 0a                	push   0xa
c001a3b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3bd:	50                   	push   eax
c001a3be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3c4:	e8 23 ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3c9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a3ce:	50                   	push   eax
c001a3cf:	6a 0b                	push   0xb
c001a3d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3d8:	50                   	push   eax
c001a3d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3df:	e8 08 ef ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3e4:	83 c4 20             	add    esp,0x20
c001a3e7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a3ec:	50                   	push   eax
c001a3ed:	6a 02                	push   0x2
c001a3ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3f6:	50                   	push   eax
c001a3f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3fd:	e8 ea ee ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a402:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a407:	50                   	push   eax
c001a408:	6a 03                	push   0x3
c001a40a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a411:	50                   	push   eax
c001a412:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a418:	e8 cf ee ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a41d:	83 c4 20             	add    esp,0x20
c001a420:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a425:	50                   	push   eax
c001a426:	6a 04                	push   0x4
c001a428:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a42f:	50                   	push   eax
c001a430:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a436:	e8 b1 ee ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a43b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a440:	50                   	push   eax
c001a441:	6a 05                	push   0x5
c001a443:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a44a:	50                   	push   eax
c001a44b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a451:	e8 96 ee ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a456:	83 c4 20             	add    esp,0x20
c001a459:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a45e:	0f 94 c0             	sete   al
c001a461:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a466:	74 09                	je     c001a471 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a468:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a46f:	eb 07                	jmp    c001a478 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a471:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a478:	0f b6 c0             	movzx  eax,al
c001a47b:	50                   	push   eax
c001a47c:	6a 07                	push   0x7
c001a47e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a485:	50                   	push   eax
c001a486:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a48c:	e8 5b ee ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a491:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	85 f6                	test   esi,esi
c001a49a:	0f 84 ae 00 00 00    	je     c001a54e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a4a0:	50                   	push   eax
c001a4a1:	6a 01                	push   0x1
c001a4a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4aa:	50                   	push   eax
c001a4ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4b1:	e8 d4 f8 ff ff       	call   c0019d8a <IDE::polling(unsigned char, unsigned int)>
c001a4b6:	83 c4 10             	add    esp,0x10
c001a4b9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a4bf:	84 c0                	test   al,al
c001a4c1:	74 20                	je     c001a4e3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a4c3:	0f b6 f8             	movzx  edi,al
c001a4c6:	0f b6 d2             	movzx  edx,dl
c001a4c9:	57                   	push   edi
c001a4ca:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a4d1:	50                   	push   eax
c001a4d2:	52                   	push   edx
c001a4d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4d9:	e8 fc f7 ff ff       	call   c0019cda <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a4de:	e9 87 00 00 00       	jmp    c001a56a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a4e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a4e8:	74 33                	je     c001a51d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a4ea:	31 ed                	xor    ebp,ebp
c001a4ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a4f0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a4f4:	50                   	push   eax
c001a4f5:	50                   	push   eax
c001a4f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4fd:	50                   	push   eax
c001a4fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a504:	e8 d1 ed ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001a509:	89 c2                	mov    edx,eax
c001a50b:	89 f8                	mov    eax,edi
c001a50d:	66 ef                	out    dx,ax
c001a50f:	45                   	inc    ebp
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a519:	75 d1                	jne    c001a4ec <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a51b:	eb 23                	jmp    c001a540 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a51d:	0f b6 d2             	movzx  edx,dl
c001a520:	51                   	push   ecx
c001a521:	51                   	push   ecx
c001a522:	52                   	push   edx
c001a523:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a529:	e8 ac ed ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001a52e:	b9 00 01 00 00       	mov    ecx,0x100
c001a533:	89 c2                	mov    edx,eax
c001a535:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a539:	fc                   	cld    
c001a53a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a548:	4e                   	dec    esi
c001a549:	e9 4a ff ff ff       	jmp    c001a498 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a54e:	31 ff                	xor    edi,edi
c001a550:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a555:	74 16                	je     c001a56d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a557:	50                   	push   eax
c001a558:	50                   	push   eax
c001a559:	31 c0                	xor    eax,eax
c001a55b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a560:	0f 94 c0             	sete   al
c001a563:	50                   	push   eax
c001a564:	53                   	push   ebx
c001a565:	e8 fc fb ff ff       	call   c001a166 <ATA::flush(bool)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	83 c4 2c             	add    esp,0x2c
c001a570:	89 f8                	mov    eax,edi
c001a572:	5b                   	pop    ebx
c001a573:	5e                   	pop    esi
c001a574:	5f                   	pop    edi
c001a575:	5d                   	pop    ebp
c001a576:	c3                   	ret    
c001a577:	90                   	nop

c001a578 <ATA::read(unsigned long long, int, void*)>:
c001a578:	57                   	push   edi
c001a579:	b8 04 00 00 00       	mov    eax,0x4
c001a57e:	56                   	push   esi
c001a57f:	53                   	push   ebx
c001a580:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a584:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a588:	8d 7a ff             	lea    edi,[edx-0x1]
c001a58b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a58f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a593:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a599:	77 25                	ja     c001a5c0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a59b:	b8 06 00 00 00       	mov    eax,0x6
c001a5a0:	85 f6                	test   esi,esi
c001a5a2:	74 1c                	je     c001a5c0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a5a4:	50                   	push   eax
c001a5a5:	50                   	push   eax
c001a5a6:	6a 00                	push   0x0
c001a5a8:	56                   	push   esi
c001a5a9:	52                   	push   edx
c001a5aa:	53                   	push   ebx
c001a5ab:	51                   	push   ecx
c001a5ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5b0:	e8 47 fc ff ff       	call   c001a1fc <ATA::access(unsigned long long, int, void*, bool)>
c001a5b5:	83 c4 20             	add    esp,0x20
c001a5b8:	85 c0                	test   eax,eax
c001a5ba:	0f 95 c0             	setne  al
c001a5bd:	0f b6 c0             	movzx  eax,al
c001a5c0:	5b                   	pop    ebx
c001a5c1:	5e                   	pop    esi
c001a5c2:	5f                   	pop    edi
c001a5c3:	c3                   	ret    

c001a5c4 <ATA::write(unsigned long long, int, void*)>:
c001a5c4:	57                   	push   edi
c001a5c5:	b8 04 00 00 00       	mov    eax,0x4
c001a5ca:	56                   	push   esi
c001a5cb:	53                   	push   ebx
c001a5cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a5d4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a5d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a5df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a5e5:	77 25                	ja     c001a60c <ATA::write(unsigned long long, int, void*)+0x48>
c001a5e7:	b8 06 00 00 00       	mov    eax,0x6
c001a5ec:	85 f6                	test   esi,esi
c001a5ee:	74 1c                	je     c001a60c <ATA::write(unsigned long long, int, void*)+0x48>
c001a5f0:	50                   	push   eax
c001a5f1:	50                   	push   eax
c001a5f2:	6a 01                	push   0x1
c001a5f4:	56                   	push   esi
c001a5f5:	52                   	push   edx
c001a5f6:	53                   	push   ebx
c001a5f7:	51                   	push   ecx
c001a5f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5fc:	e8 fb fb ff ff       	call   c001a1fc <ATA::access(unsigned long long, int, void*, bool)>
c001a601:	83 c4 20             	add    esp,0x20
c001a604:	85 c0                	test   eax,eax
c001a606:	0f 95 c0             	setne  al
c001a609:	0f b6 c0             	movzx  eax,al
c001a60c:	5b                   	pop    ebx
c001a60d:	5e                   	pop    esi
c001a60e:	5f                   	pop    edi
c001a60f:	c3                   	ret    

c001a610 <ATA::detectCHS()>:
c001a610:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a614:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a61a:	c1 e0 06             	shl    eax,0x6
c001a61d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a623:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a62d:	c7 44 24 04 28 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f528
c001a635:	e9 6d 5c ff ff       	jmp    c00102a7 <Krnl::panic(char const*)>

c001a63a <ATA::open(int, int, void*)>:
c001a63a:	53                   	push   ebx
c001a63b:	83 ec 08             	sub    esp,0x8
c001a63e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a646:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a64a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a650:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a656:	c1 e0 06             	shl    eax,0x6
c001a659:	01 d0                	add    eax,edx
c001a65b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a662:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a668:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a66f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a679:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a67f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a686:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a68d:	75 0c                	jne    c001a69b <ATA::open(int, int, void*)+0x61>
c001a68f:	83 ec 0c             	sub    esp,0xc
c001a692:	53                   	push   ebx
c001a693:	e8 78 ff ff ff       	call   c001a610 <ATA::detectCHS()>
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a6a1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a6a7:	c1 e0 06             	shl    eax,0x6
c001a6aa:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a6b1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a6bb:	d1 e8                	shr    eax,1
c001a6bd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a6c3:	6a 04                	push   0x4
c001a6c5:	6a 0c                	push   0xc
c001a6c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a6ce:	50                   	push   eax
c001a6cf:	52                   	push   edx
c001a6d0:	e8 17 ec ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6d5:	90                   	nop
c001a6d6:	90                   	nop
c001a6d7:	6a 00                	push   0x0
c001a6d9:	6a 0c                	push   0xc
c001a6db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a6e2:	50                   	push   eax
c001a6e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a6e9:	e8 fe eb ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6ee:	83 c4 14             	add    esp,0x14
c001a6f1:	53                   	push   ebx
c001a6f2:	e8 d7 18 ff ff       	call   c000bfce <PhysicalDisk::startCache()>
c001a6f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6fa:	e8 47 29 ff ff       	call   c000d046 <createPartitionsForDisk(PhysicalDisk*)>
c001a6ff:	31 c0                	xor    eax,eax
c001a701:	83 c4 18             	add    esp,0x18
c001a704:	5b                   	pop    ebx
c001a705:	c3                   	ret    

c001a706 <ATAPI::write(unsigned long long, int, void*)>:
c001a706:	b8 03 00 00 00       	mov    eax,0x3
c001a70b:	c3                   	ret    

c001a70c <ATAPI::close(int, int, void*)>:
c001a70c:	83 ec 0c             	sub    esp,0xc
c001a70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a713:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a719:	85 c0                	test   eax,eax
c001a71b:	74 0c                	je     c001a729 <ATAPI::close(int, int, void*)+0x1d>
c001a71d:	83 ec 0c             	sub    esp,0xc
c001a720:	8b 10                	mov    edx,DWORD PTR [eax]
c001a722:	50                   	push   eax
c001a723:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	31 c0                	xor    eax,eax
c001a72b:	83 c4 0c             	add    esp,0xc
c001a72e:	c3                   	ret    
c001a72f:	90                   	nop

c001a730 <ATAPI::ATAPI()>:
c001a730:	83 ec 0c             	sub    esp,0xc
c001a733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a737:	83 ec 04             	sub    esp,0x4
c001a73a:	68 00 08 00 00       	push   0x800
c001a73f:	68 95 f6 01 c0       	push   0xc001f695
c001a744:	50                   	push   eax
c001a745:	e8 1c 18 ff ff       	call   c000bf66 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001a752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a756:	89 10                	mov    DWORD PTR [eax],edx
c001a758:	90                   	nop
c001a759:	83 c4 0c             	add    esp,0xc
c001a75c:	c3                   	ret    
c001a75d:	90                   	nop

c001a75e <ATAPI::readyForCommand()>:
c001a75e:	56                   	push   esi
c001a75f:	53                   	push   ebx
c001a760:	53                   	push   ebx
c001a761:	31 db                	xor    ebx,ebx
c001a763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a767:	51                   	push   ecx
c001a768:	6a 0c                	push   0xc
c001a76a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a771:	50                   	push   eax
c001a772:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a778:	e8 2f ec ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	a8 88                	test   al,0x88
c001a782:	74 25                	je     c001a7a9 <ATAPI::readyForCommand()+0x4b>
c001a784:	43                   	inc    ebx
c001a785:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a78b:	7e da                	jle    c001a767 <ATAPI::readyForCommand()+0x9>
c001a78d:	83 ec 0c             	sub    esp,0xc
c001a790:	68 5e 01 00 00       	push   0x15e
c001a795:	e8 62 91 ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c001a79a:	83 c4 10             	add    esp,0x10
c001a79d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a7a3:	75 c2                	jne    c001a767 <ATAPI::readyForCommand()+0x9>
c001a7a5:	31 c0                	xor    eax,eax
c001a7a7:	eb 02                	jmp    c001a7ab <ATAPI::readyForCommand()+0x4d>
c001a7a9:	b0 01                	mov    al,0x1
c001a7ab:	5a                   	pop    edx
c001a7ac:	5b                   	pop    ebx
c001a7ad:	5e                   	pop    esi
c001a7ae:	c3                   	ret    
c001a7af:	90                   	nop

c001a7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a7b0:	55                   	push   ebp
c001a7b1:	57                   	push   edi
c001a7b2:	56                   	push   esi
c001a7b3:	53                   	push   ebx
c001a7b4:	83 ec 20             	sub    esp,0x20
c001a7b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7bb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a7bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a7c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a7c7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a7cb:	6a 01                	push   0x1
c001a7cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7d4:	50                   	push   eax
c001a7d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7db:	e8 1a ed ff ff       	call   c00194fa <IDE::enableIRQs(unsigned char, bool)>
c001a7e0:	5e                   	pop    esi
c001a7e1:	58                   	pop    eax
c001a7e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7e9:	50                   	push   eax
c001a7ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7f0:	e8 d1 ea ff ff       	call   c00192c6 <IDE::prepareInterrupt(unsigned char)>
c001a7f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7f8:	e8 61 ff ff ff       	call   c001a75e <ATAPI::readyForCommand()>
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	84 c0                	test   al,al
c001a802:	75 0a                	jne    c001a80e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a804:	bb 01 00 00 00       	mov    ebx,0x1
c001a809:	e9 57 02 00 00       	jmp    c001aa65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a80e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a814:	c1 e0 04             	shl    eax,0x4
c001a817:	0f b6 c0             	movzx  eax,al
c001a81a:	50                   	push   eax
c001a81b:	6a 06                	push   0x6
c001a81d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a824:	50                   	push   eax
c001a825:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a82b:	e8 bc ea ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a830:	6a 00                	push   0x0
c001a832:	6a 01                	push   0x1
c001a834:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a83b:	50                   	push   eax
c001a83c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a842:	e8 a5 ea ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a847:	83 c4 20             	add    esp,0x20
c001a84a:	0f b6 c3             	movzx  eax,bl
c001a84d:	0f b6 df             	movzx  ebx,bh
c001a850:	50                   	push   eax
c001a851:	6a 04                	push   0x4
c001a853:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a85a:	50                   	push   eax
c001a85b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a861:	e8 86 ea ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a866:	53                   	push   ebx
c001a867:	6a 05                	push   0x5
c001a869:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a870:	50                   	push   eax
c001a871:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a877:	e8 70 ea ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a87c:	83 c4 20             	add    esp,0x20
c001a87f:	68 a0 00 00 00       	push   0xa0
c001a884:	6a 07                	push   0x7
c001a886:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a88d:	50                   	push   eax
c001a88e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a894:	e8 53 ea ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a899:	83 c4 0c             	add    esp,0xc
c001a89c:	6a 01                	push   0x1
c001a89e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8a5:	50                   	push   eax
c001a8a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8ac:	e8 d9 f4 ff ff       	call   c0019d8a <IDE::polling(unsigned char, unsigned int)>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a8ba:	84 c0                	test   al,al
c001a8bc:	74 23                	je     c001a8e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a8be:	0f b6 d8             	movzx  ebx,al
c001a8c1:	0f b6 d2             	movzx  edx,dl
c001a8c4:	53                   	push   ebx
c001a8c5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a8cc:	50                   	push   eax
c001a8cd:	52                   	push   edx
c001a8ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8d4:	e8 01 f4 ff ff       	call   c0019cda <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	e9 84 01 00 00       	jmp    c001aa65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8e1:	0f b6 d2             	movzx  edx,dl
c001a8e4:	53                   	push   ebx
c001a8e5:	53                   	push   ebx
c001a8e6:	52                   	push   edx
c001a8e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8ed:	e8 e8 e9 ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001a8f2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a8f6:	b9 06 00 00 00       	mov    ecx,0x6
c001a8fb:	89 c2                	mov    edx,eax
c001a8fd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a900:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a904:	83 c4 10             	add    esp,0x10
c001a907:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a90d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a914:	85 db                	test   ebx,ebx
c001a916:	0f 84 ec 00 00 00    	je     c001aa08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a91c:	51                   	push   ecx
c001a91d:	51                   	push   ecx
c001a91e:	52                   	push   edx
c001a91f:	50                   	push   eax
c001a920:	e8 35 eb ff ff       	call   c001945a <IDE::waitInterrupt(unsigned char)>
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	84 c0                	test   al,al
c001a92a:	0f 84 d4 fe ff ff    	je     c001a804 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a930:	56                   	push   esi
c001a931:	56                   	push   esi
c001a932:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a939:	50                   	push   eax
c001a93a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a940:	e8 81 e9 ff ff       	call   c00192c6 <IDE::prepareInterrupt(unsigned char)>
c001a945:	83 c4 0c             	add    esp,0xc
c001a948:	6a 04                	push   0x4
c001a94a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a951:	50                   	push   eax
c001a952:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a958:	e8 4f ea ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001a95d:	83 c4 0c             	add    esp,0xc
c001a960:	89 c6                	mov    esi,eax
c001a962:	6a 05                	push   0x5
c001a964:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a96b:	50                   	push   eax
c001a96c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a972:	e8 35 ea ff ff       	call   c00193ac <IDE::read(unsigned char, unsigned char)>
c001a977:	89 f1                	mov    ecx,esi
c001a979:	0f b6 c0             	movzx  eax,al
c001a97c:	0f b6 f1             	movzx  esi,cl
c001a97f:	c1 e0 08             	shl    eax,0x8
c001a982:	09 c6                	or     esi,eax
c001a984:	d1 fe                	sar    esi,1
c001a986:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a992:	74 41                	je     c001a9d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a994:	31 c9                	xor    ecx,ecx
c001a996:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a99c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9a3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a9a7:	75 0a                	jne    c001a9b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a9a9:	01 c9                	add    ecx,ecx
c001a9ab:	01 cd                	add    ebp,ecx
c001a9ad:	4b                   	dec    ebx
c001a9ae:	e9 54 ff ff ff       	jmp    c001a907 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a9b3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a9b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a9bc:	51                   	push   ecx
c001a9bd:	51                   	push   ecx
c001a9be:	52                   	push   edx
c001a9bf:	50                   	push   eax
c001a9c0:	e8 15 e9 ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001a9c5:	89 c2                	mov    edx,eax
c001a9c7:	89 f0                	mov    eax,esi
c001a9c9:	66 ef                	out    dx,ax
c001a9cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	41                   	inc    ecx
c001a9d3:	eb c1                	jmp    c001a996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a9d5:	31 f6                	xor    esi,esi
c001a9d7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a9dd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9e4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a9e8:	75 06                	jne    c001a9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a9ea:	01 f6                	add    esi,esi
c001a9ec:	01 f5                	add    ebp,esi
c001a9ee:	eb bd                	jmp    c001a9ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a9f0:	51                   	push   ecx
c001a9f1:	51                   	push   ecx
c001a9f2:	52                   	push   edx
c001a9f3:	50                   	push   eax
c001a9f4:	e8 e1 e8 ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001a9f9:	89 c2                	mov    edx,eax
c001a9fb:	66 ed                	in     ax,dx
c001a9fd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	46                   	inc    esi
c001aa06:	eb cf                	jmp    c001a9d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aa08:	51                   	push   ecx
c001aa09:	51                   	push   ecx
c001aa0a:	52                   	push   edx
c001aa0b:	50                   	push   eax
c001aa0c:	e8 49 ea ff ff       	call   c001945a <IDE::waitInterrupt(unsigned char)>
c001aa11:	83 c4 10             	add    esp,0x10
c001aa14:	84 c0                	test   al,al
c001aa16:	0f 84 e8 fd ff ff    	je     c001a804 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aa1c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aa21:	52                   	push   edx
c001aa22:	52                   	push   edx
c001aa23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa2a:	50                   	push   eax
c001aa2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa31:	e8 90 e8 ff ff       	call   c00192c6 <IDE::prepareInterrupt(unsigned char)>
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	50                   	push   eax
c001aa3a:	50                   	push   eax
c001aa3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa42:	50                   	push   eax
c001aa43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa49:	e8 8c e8 ff ff       	call   c00192da <IDE::getBase(unsigned char)>
c001aa4e:	8d 50 07             	lea    edx,[eax+0x7]
c001aa51:	ec                   	in     al,dx
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	a8 88                	test   al,0x88
c001aa57:	74 0a                	je     c001aa63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001aa59:	4b                   	dec    ebx
c001aa5a:	75 dd                	jne    c001aa39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001aa5c:	bb 02 00 00 00       	mov    ebx,0x2
c001aa61:	eb 02                	jmp    c001aa65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001aa63:	31 db                	xor    ebx,ebx
c001aa65:	83 c4 1c             	add    esp,0x1c
c001aa68:	89 d8                	mov    eax,ebx
c001aa6a:	5b                   	pop    ebx
c001aa6b:	5e                   	pop    esi
c001aa6c:	5f                   	pop    edi
c001aa6d:	5d                   	pop    ebp
c001aa6e:	c3                   	ret    
c001aa6f:	90                   	nop

c001aa70 <ATAPI::diskRemoved()>:
c001aa70:	53                   	push   ebx
c001aa71:	83 ec 14             	sub    esp,0x14
c001aa74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa78:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa7f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001aa85:	e8 3c 23 ff ff       	call   c000cdc6 <LogicalDisk::unmount()>
c001aa8a:	58                   	pop    eax
c001aa8b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001aa91:	e8 76 2c ff ff       	call   c000d70c <VCache::writeWriteBuffer()>
c001aa96:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001aa9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aaa0:	83 c4 18             	add    esp,0x18
c001aaa3:	5b                   	pop    ebx
c001aaa4:	e9 53 2c ff ff       	jmp    c000d6fc <VCache::invalidateReadBuffer()>
c001aaa9:	90                   	nop

c001aaaa <ATAPI::eject()>:
c001aaaa:	57                   	push   edi
c001aaab:	b9 03 00 00 00       	mov    ecx,0x3
c001aab0:	53                   	push   ebx
c001aab1:	83 ec 14             	sub    esp,0x14
c001aab4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aab8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aabc:	fc                   	cld    
c001aabd:	31 c0                	xor    eax,eax
c001aabf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aac1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001aac6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001aacb:	50                   	push   eax
c001aacc:	50                   	push   eax
c001aacd:	6a 00                	push   0x0
c001aacf:	6a 00                	push   0x0
c001aad1:	6a 00                	push   0x0
c001aad3:	6a 02                	push   0x2
c001aad5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aad9:	50                   	push   eax
c001aada:	53                   	push   ebx
c001aadb:	e8 d0 fc ff ff       	call   c001a7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aae0:	83 c4 14             	add    esp,0x14
c001aae3:	53                   	push   ebx
c001aae4:	e8 87 ff ff ff       	call   c001aa70 <ATAPI::diskRemoved()>
c001aae9:	83 c4 24             	add    esp,0x24
c001aaec:	31 c0                	xor    eax,eax
c001aaee:	5b                   	pop    ebx
c001aaef:	5f                   	pop    edi
c001aaf0:	c3                   	ret    
c001aaf1:	90                   	nop

c001aaf2 <ATAPI::diskInserted()>:
c001aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001aafd:	c3                   	ret    

c001aafe <ATAPI::detectMedia()>:
c001aafe:	56                   	push   esi
c001aaff:	53                   	push   ebx
c001ab00:	83 ec 28             	sub    esp,0x28
c001ab03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ab07:	6a 0c                	push   0xc
c001ab09:	6a 00                	push   0x0
c001ab0b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ab0f:	56                   	push   esi
c001ab10:	e8 db 59 fe ff       	call   c00004f0 <memset>
c001ab15:	58                   	pop    eax
c001ab16:	5a                   	pop    edx
c001ab17:	6a 00                	push   0x0
c001ab19:	6a 00                	push   0x0
c001ab1b:	6a 00                	push   0x0
c001ab1d:	6a 00                	push   0x0
c001ab1f:	56                   	push   esi
c001ab20:	53                   	push   ebx
c001ab21:	e8 8a fc ff ff       	call   c001a7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab26:	83 c4 1c             	add    esp,0x1c
c001ab29:	6a 0c                	push   0xc
c001ab2b:	6a 00                	push   0x0
c001ab2d:	56                   	push   esi
c001ab2e:	e8 bd 59 fe ff       	call   c00004f0 <memset>
c001ab33:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ab38:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ab3d:	59                   	pop    ecx
c001ab3e:	58                   	pop    eax
c001ab3f:	6a 01                	push   0x1
c001ab41:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ab45:	50                   	push   eax
c001ab46:	6a 00                	push   0x0
c001ab48:	6a 12                	push   0x12
c001ab4a:	56                   	push   esi
c001ab4b:	53                   	push   ebx
c001ab4c:	e8 5f fc ff ff       	call   c001a7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ab55:	83 c4 20             	add    esp,0x20
c001ab58:	83 e0 7f             	and    eax,0x7f
c001ab5b:	3c 70                	cmp    al,0x70
c001ab5d:	74 15                	je     c001ab74 <ATAPI::detectMedia()+0x76>
c001ab5f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab66:	75 0c                	jne    c001ab74 <ATAPI::detectMedia()+0x76>
c001ab68:	83 ec 0c             	sub    esp,0xc
c001ab6b:	53                   	push   ebx
c001ab6c:	e8 81 ff ff ff       	call   c001aaf2 <ATAPI::diskInserted()>
c001ab71:	83 c4 10             	add    esp,0x10
c001ab74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ab78:	83 e0 0f             	and    eax,0xf
c001ab7b:	3c 02                	cmp    al,0x2
c001ab7d:	75 1b                	jne    c001ab9a <ATAPI::detectMedia()+0x9c>
c001ab7f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ab84:	75 2d                	jne    c001abb3 <ATAPI::detectMedia()+0xb5>
c001ab86:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab8d:	74 24                	je     c001abb3 <ATAPI::detectMedia()+0xb5>
c001ab8f:	83 ec 0c             	sub    esp,0xc
c001ab92:	53                   	push   ebx
c001ab93:	e8 d8 fe ff ff       	call   c001aa70 <ATAPI::diskRemoved()>
c001ab98:	eb 16                	jmp    c001abb0 <ATAPI::detectMedia()+0xb2>
c001ab9a:	84 c0                	test   al,al
c001ab9c:	75 15                	jne    c001abb3 <ATAPI::detectMedia()+0xb5>
c001ab9e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aba5:	75 0c                	jne    c001abb3 <ATAPI::detectMedia()+0xb5>
c001aba7:	83 ec 0c             	sub    esp,0xc
c001abaa:	53                   	push   ebx
c001abab:	e8 42 ff ff ff       	call   c001aaf2 <ATAPI::diskInserted()>
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	83 c4 24             	add    esp,0x24
c001abb6:	5b                   	pop    ebx
c001abb7:	5e                   	pop    esi
c001abb8:	c3                   	ret    
c001abb9:	90                   	nop

c001abba <ATAPI::open(int, int, void*)>:
c001abba:	56                   	push   esi
c001abbb:	53                   	push   ebx
c001abbc:	50                   	push   eax
c001abbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001abc9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abcf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001abd5:	c1 e0 06             	shl    eax,0x6
c001abd8:	01 d0                	add    eax,edx
c001abda:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001abe1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001abe7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001abee:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001abf8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abfe:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ac05:	6a 04                	push   0x4
c001ac07:	6a 0c                	push   0xc
c001ac09:	51                   	push   ecx
c001ac0a:	52                   	push   edx
c001ac0b:	e8 dc e6 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac10:	90                   	nop
c001ac11:	90                   	nop
c001ac12:	6a 00                	push   0x0
c001ac14:	6a 0c                	push   0xc
c001ac16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ac1d:	50                   	push   eax
c001ac1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ac24:	e8 c3 e6 ff ff       	call   c00192ec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac29:	83 c4 14             	add    esp,0x14
c001ac2c:	68 74 01 00 00       	push   0x174
c001ac31:	e8 93 cd fe ff       	call   c00079c9 <malloc>
c001ac36:	83 c4 0c             	add    esp,0xc
c001ac39:	89 c6                	mov    esi,eax
c001ac3b:	6a 00                	push   0x0
c001ac3d:	68 ff ff ff 7f       	push   0x7fffffff
c001ac42:	6a 00                	push   0x0
c001ac44:	6a 00                	push   0x0
c001ac46:	53                   	push   ebx
c001ac47:	68 87 f6 01 c0       	push   0xc001f687
c001ac4c:	50                   	push   eax
c001ac4d:	e8 c0 1f ff ff       	call   c000cc12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ac52:	83 c4 14             	add    esp,0x14
c001ac55:	56                   	push   esi
c001ac56:	e8 6d 20 ff ff       	call   c000ccc8 <LogicalDisk::assignDriveLetter()>
c001ac5b:	5a                   	pop    edx
c001ac5c:	0f be c0             	movsx  eax,al
c001ac5f:	59                   	pop    ecx
c001ac60:	50                   	push   eax
c001ac61:	68 74 f5 01 c0       	push   0xc001f574
c001ac66:	e8 ed fa fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001ac6b:	58                   	pop    eax
c001ac6c:	5a                   	pop    edx
c001ac6d:	56                   	push   esi
c001ac6e:	53                   	push   ebx
c001ac6f:	e8 24 0f ff ff       	call   c000bb98 <Device::addChild(Device*)>
c001ac74:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ac7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac7d:	e8 4c 13 ff ff       	call   c000bfce <PhysicalDisk::startCache()>
c001ac82:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ac89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac8c:	e8 6d fe ff ff       	call   c001aafe <ATAPI::detectMedia()>
c001ac91:	83 c4 14             	add    esp,0x14
c001ac94:	31 c0                	xor    eax,eax
c001ac96:	5b                   	pop    ebx
c001ac97:	5e                   	pop    esi
c001ac98:	c3                   	ret    
c001ac99:	90                   	nop

c001ac9a <ATAPI::read(unsigned long long, int, void*)>:
c001ac9a:	55                   	push   ebp
c001ac9b:	57                   	push   edi
c001ac9c:	56                   	push   esi
c001ac9d:	53                   	push   ebx
c001ac9e:	83 ec 1c             	sub    esp,0x1c
c001aca1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aca5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aca9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001acad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001acb4:	74 3c                	je     c001acf2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001acb6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001acba:	b9 03 00 00 00       	mov    ecx,0x3
c001acbf:	fc                   	cld    
c001acc0:	31 c0                	xor    eax,eax
c001acc2:	0f ce                	bswap  esi
c001acc4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001acc6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001accb:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001accf:	89 e8                	mov    eax,ebp
c001acd1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001acd5:	50                   	push   eax
c001acd6:	50                   	push   eax
c001acd7:	55                   	push   ebp
c001acd8:	c1 e5 0b             	shl    ebp,0xb
c001acdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001acdf:	6a 00                	push   0x0
c001ace1:	55                   	push   ebp
c001ace2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ace6:	50                   	push   eax
c001ace7:	53                   	push   ebx
c001ace8:	e8 c3 fa ff ff       	call   c001a7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aced:	83 c4 20             	add    esp,0x20
c001acf0:	eb 1a                	jmp    c001ad0c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001acf2:	83 ec 0c             	sub    esp,0xc
c001acf5:	53                   	push   ebx
c001acf6:	e8 03 fe ff ff       	call   c001aafe <ATAPI::detectMedia()>
c001acfb:	83 c4 10             	add    esp,0x10
c001acfe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad05:	75 af                	jne    c001acb6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ad07:	b8 02 00 00 00       	mov    eax,0x2
c001ad0c:	83 c4 1c             	add    esp,0x1c
c001ad0f:	5b                   	pop    ebx
c001ad10:	5e                   	pop    esi
c001ad11:	5f                   	pop    edi
c001ad12:	5d                   	pop    ebp
c001ad13:	c3                   	ret    

c001ad14 <SATA::close(int, int, void*)>:
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ad21:	85 c0                	test   eax,eax
c001ad23:	74 0c                	je     c001ad31 <SATA::close(int, int, void*)+0x1d>
c001ad25:	83 ec 0c             	sub    esp,0xc
c001ad28:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad2a:	50                   	push   eax
c001ad2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ad2e:	83 c4 10             	add    esp,0x10
c001ad31:	31 c0                	xor    eax,eax
c001ad33:	83 c4 0c             	add    esp,0xc
c001ad36:	c3                   	ret    
c001ad37:	90                   	nop

c001ad38 <SATA::powerSaving(PowerSavingLevel)>:
c001ad38:	c3                   	ret    
c001ad39:	90                   	nop

c001ad3a <SATA::open(int, int, void*)>:
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	50                   	push   eax
c001ad3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad45:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ad4f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad55:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad63:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad6d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad73:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ad7a:	e8 17 d0 fe ff       	call   c0007d96 <Phys::allocatePage()>
c001ad7f:	89 c6                	mov    esi,eax
c001ad81:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ad87:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad8d:	e8 04 d0 fe ff       	call   c0007d96 <Phys::allocatePage()>
c001ad92:	39 c6                	cmp    esi,eax
c001ad94:	74 10                	je     c001ada6 <SATA::open(int, int, void*)+0x6c>
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	68 bc f5 01 c0       	push   0xc001f5bc
c001ad9e:	e8 04 55 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	83 ec 0c             	sub    esp,0xc
c001ada9:	6a 02                	push   0x2
c001adab:	e8 55 e7 fe ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c001adb0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001adb6:	6a 03                	push   0x3
c001adb8:	50                   	push   eax
c001adb9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001adbf:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c001adc5:	e8 d0 ed fe ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c001adca:	83 c4 14             	add    esp,0x14
c001adcd:	53                   	push   ebx
c001adce:	e8 fb 11 ff ff       	call   c000bfce <PhysicalDisk::startCache()>
c001add3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001add6:	e8 6b 22 ff ff       	call   c000d046 <createPartitionsForDisk(PhysicalDisk*)>
c001addb:	83 c4 14             	add    esp,0x14
c001adde:	31 c0                	xor    eax,eax
c001ade0:	5b                   	pop    ebx
c001ade1:	5e                   	pop    esi
c001ade2:	c3                   	ret    
c001ade3:	90                   	nop

c001ade4 <SATA::SATA()>:
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adeb:	83 ec 04             	sub    esp,0x4
c001adee:	68 00 02 00 00       	push   0x200
c001adf3:	68 d0 f5 01 c0       	push   0xc001f5d0
c001adf8:	50                   	push   eax
c001adf9:	e8 68 11 ff ff       	call   c000bf66 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001ae06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0a:	89 10                	mov    DWORD PTR [eax],edx
c001ae0c:	90                   	nop
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop

c001ae12 <SATA::access(unsigned long long, int, void*, bool)>:
c001ae12:	55                   	push   ebp
c001ae13:	57                   	push   edi
c001ae14:	56                   	push   esi
c001ae15:	53                   	push   ebx
c001ae16:	83 ec 2c             	sub    esp,0x2c
c001ae19:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ae1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ae21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae25:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ae29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae2d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ae32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae36:	7e 10                	jle    c001ae48 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ae38:	83 ec 0c             	sub    esp,0xc
c001ae3b:	68 e0 f5 01 c0       	push   0xc001f5e0
c001ae40:	e8 62 54 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001ae45:	83 c4 10             	add    esp,0x10
c001ae48:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ae4e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ae54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ae5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae5e:	89 d0                	mov    eax,edx
c001ae60:	c1 e0 07             	shl    eax,0x7
c001ae63:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ae67:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ae71:	51                   	push   ecx
c001ae72:	8d 42 02             	lea    eax,[edx+0x2]
c001ae75:	51                   	push   ecx
c001ae76:	c1 e0 07             	shl    eax,0x7
c001ae79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ae7d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ae81:	50                   	push   eax
c001ae82:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ae88:	e8 e7 ef ff ff       	call   c0019e74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ae8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ae99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae9d:	0f 84 4f 01 00 00    	je     c001aff2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001aea3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aea7:	c1 e0 09             	shl    eax,0x9
c001aeaa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aeaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb3:	74 0e                	je     c001aec3 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001aeb5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001aebb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001aebf:	89 c1                	mov    ecx,eax
c001aec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aec7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001aecd:	8d 42 02             	lea    eax,[edx+0x2]
c001aed0:	c1 e0 07             	shl    eax,0x7
c001aed3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aed7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aed9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aedf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aee5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aee9:	c1 e1 05             	shl    ecx,0x5
c001aeec:	01 c8                	add    eax,ecx
c001aeee:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001aef2:	83 e1 01             	and    ecx,0x1
c001aef5:	89 ce                	mov    esi,ecx
c001aef7:	8a 08                	mov    cl,BYTE PTR [eax]
c001aef9:	c1 e6 06             	shl    esi,0x6
c001aefc:	83 e1 bf             	and    ecx,0xffffffbf
c001aeff:	09 f1                	or     ecx,esi
c001af01:	88 08                	mov    BYTE PTR [eax],cl
c001af03:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af05:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001af0b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001af11:	89 08                	mov    DWORD PTR [eax],ecx
c001af13:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001af19:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001af1f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001af25:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001af28:	50                   	push   eax
c001af29:	68 90 00 00 00       	push   0x90
c001af2e:	6a 00                	push   0x0
c001af30:	56                   	push   esi
c001af31:	e8 ba 55 fe ff       	call   c00004f0 <memset>
c001af36:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001af3c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001af40:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001af46:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001af4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af4e:	83 c4 10             	add    esp,0x10
c001af51:	48                   	dec    eax
c001af52:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af57:	89 c1                	mov    ecx,eax
c001af59:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001af5f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af64:	09 c8                	or     eax,ecx
c001af66:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001af6c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001af6f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001af76:	66 25 00 7f          	and    ax,0x7f00
c001af7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af7e:	66 0d 27 80          	or     ax,0x8027
c001af82:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001af87:	66 89 06             	mov    WORD PTR [esi],ax
c001af8a:	19 c0                	sbb    eax,eax
c001af8c:	83 e0 f0             	and    eax,0xfffffff0
c001af8f:	83 c0 35             	add    eax,0x35
c001af92:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001af95:	89 e8                	mov    eax,ebp
c001af97:	c1 e8 10             	shr    eax,0x10
c001af9a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001af9d:	89 e8                	mov    eax,ebp
c001af9f:	c1 e8 18             	shr    eax,0x18
c001afa2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001afa5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001afa9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001afac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afb0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001afb3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afb7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001afbb:	89 d6                	mov    esi,edx
c001afbd:	31 c0                	xor    eax,eax
c001afbf:	c1 e6 07             	shl    esi,0x7
c001afc2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001afc6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001afcc:	80 e1 88             	and    cl,0x88
c001afcf:	74 0a                	je     c001afdb <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001afd1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afd6:	74 0a                	je     c001afe2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001afd8:	40                   	inc    eax
c001afd9:	eb eb                	jmp    c001afc6 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001afdb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afe0:	75 17                	jne    c001aff9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001afe2:	83 ec 0c             	sub    esp,0xc
c001afe5:	68 19 f6 01 c0       	push   0xc001f619
c001afea:	e8 69 f7 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001afef:	83 c4 10             	add    esp,0x10
c001aff2:	b8 01 00 00 00       	mov    eax,0x1
c001aff7:	eb 5d                	jmp    c001b056 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001aff9:	b8 01 00 00 00       	mov    eax,0x1
c001affe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b002:	c1 e2 07             	shl    edx,0x7
c001b005:	d3 e0                	shl    eax,cl
c001b007:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b00b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b011:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b017:	85 c8                	test   eax,ecx
c001b019:	74 16                	je     c001b031 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b01b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b021:	0f ba e1 1e          	bt     ecx,0x1e
c001b025:	73 ea                	jae    c001b011 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b027:	83 ec 0c             	sub    esp,0xc
c001b02a:	68 27 f6 01 c0       	push   0xc001f627
c001b02f:	eb b9                	jmp    c001afea <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b031:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b037:	0f ba e0 1e          	bt     eax,0x1e
c001b03b:	72 b5                	jb     c001aff2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b03d:	31 c0                	xor    eax,eax
c001b03f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b044:	75 10                	jne    c001b056 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b046:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b04c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b050:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b054:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b056:	83 c4 2c             	add    esp,0x2c
c001b059:	5b                   	pop    ebx
c001b05a:	5e                   	pop    esi
c001b05b:	5f                   	pop    edi
c001b05c:	5d                   	pop    ebp
c001b05d:	c3                   	ret    

c001b05e <SATA::read(unsigned long long, int, void*)>:
c001b05e:	57                   	push   edi
c001b05f:	b8 04 00 00 00       	mov    eax,0x4
c001b064:	56                   	push   esi
c001b065:	53                   	push   ebx
c001b066:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b06a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b06e:	8d 7a ff             	lea    edi,[edx-0x1]
c001b071:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b075:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b079:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b07f:	77 25                	ja     c001b0a6 <SATA::read(unsigned long long, int, void*)+0x48>
c001b081:	b8 06 00 00 00       	mov    eax,0x6
c001b086:	85 f6                	test   esi,esi
c001b088:	74 1c                	je     c001b0a6 <SATA::read(unsigned long long, int, void*)+0x48>
c001b08a:	50                   	push   eax
c001b08b:	50                   	push   eax
c001b08c:	6a 00                	push   0x0
c001b08e:	56                   	push   esi
c001b08f:	52                   	push   edx
c001b090:	53                   	push   ebx
c001b091:	51                   	push   ecx
c001b092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b096:	e8 77 fd ff ff       	call   c001ae12 <SATA::access(unsigned long long, int, void*, bool)>
c001b09b:	83 c4 20             	add    esp,0x20
c001b09e:	85 c0                	test   eax,eax
c001b0a0:	0f 95 c0             	setne  al
c001b0a3:	0f b6 c0             	movzx  eax,al
c001b0a6:	5b                   	pop    ebx
c001b0a7:	5e                   	pop    esi
c001b0a8:	5f                   	pop    edi
c001b0a9:	c3                   	ret    

c001b0aa <SATA::write(unsigned long long, int, void*)>:
c001b0aa:	55                   	push   ebp
c001b0ab:	b8 04 00 00 00       	mov    eax,0x4
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	83 ec 0c             	sub    esp,0xc
c001b0b6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b0be:	8d 73 ff             	lea    esi,[ebx-0x1]
c001b0c1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b0c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b0c9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b0cf:	77 3d                	ja     c001b10e <SATA::write(unsigned long long, int, void*)+0x64>
c001b0d1:	b8 06 00 00 00       	mov    eax,0x6
c001b0d6:	85 ed                	test   ebp,ebp
c001b0d8:	74 34                	je     c001b10e <SATA::write(unsigned long long, int, void*)+0x64>
c001b0da:	c1 e3 09             	shl    ebx,0x9
c001b0dd:	01 eb                	add    ebx,ebp
c001b0df:	89 d6                	mov    esi,edx
c001b0e1:	89 cf                	mov    edi,ecx
c001b0e3:	83 c6 01             	add    esi,0x1
c001b0e6:	83 d7 00             	adc    edi,0x0
c001b0e9:	50                   	push   eax
c001b0ea:	50                   	push   eax
c001b0eb:	6a 01                	push   0x1
c001b0ed:	55                   	push   ebp
c001b0ee:	81 c5 00 02 00 00    	add    ebp,0x200
c001b0f4:	6a 01                	push   0x1
c001b0f6:	51                   	push   ecx
c001b0f7:	52                   	push   edx
c001b0f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0fc:	e8 11 fd ff ff       	call   c001ae12 <SATA::access(unsigned long long, int, void*, bool)>
c001b101:	83 c4 20             	add    esp,0x20
c001b104:	89 f2                	mov    edx,esi
c001b106:	89 f9                	mov    ecx,edi
c001b108:	39 dd                	cmp    ebp,ebx
c001b10a:	75 d3                	jne    c001b0df <SATA::write(unsigned long long, int, void*)+0x35>
c001b10c:	31 c0                	xor    eax,eax
c001b10e:	83 c4 0c             	add    esp,0xc
c001b111:	5b                   	pop    ebx
c001b112:	5e                   	pop    esi
c001b113:	5f                   	pop    edi
c001b114:	5d                   	pop    ebp
c001b115:	c3                   	ret    

c001b116 <SATAPI::write(unsigned long long, int, void*)>:
c001b116:	b8 03 00 00 00       	mov    eax,0x3
c001b11b:	c3                   	ret    

c001b11c <SATAPI::close(int, int, void*)>:
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b123:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b129:	85 c0                	test   eax,eax
c001b12b:	74 0c                	je     c001b139 <SATAPI::close(int, int, void*)+0x1d>
c001b12d:	83 ec 0c             	sub    esp,0xc
c001b130:	8b 10                	mov    edx,DWORD PTR [eax]
c001b132:	50                   	push   eax
c001b133:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b136:	83 c4 10             	add    esp,0x10
c001b139:	31 c0                	xor    eax,eax
c001b13b:	83 c4 0c             	add    esp,0xc
c001b13e:	c3                   	ret    
c001b13f:	90                   	nop

c001b140 <SATAPI::open(int, int, void*)>:
c001b140:	56                   	push   esi
c001b141:	53                   	push   ebx
c001b142:	51                   	push   ecx
c001b143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b14b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b155:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b15b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b165:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b169:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b173:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b179:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b180:	e8 11 cc fe ff       	call   c0007d96 <Phys::allocatePage()>
c001b185:	89 c6                	mov    esi,eax
c001b187:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b18d:	81 c6 00 10 00 00    	add    esi,0x1000
c001b193:	e8 fe cb fe ff       	call   c0007d96 <Phys::allocatePage()>
c001b198:	39 c6                	cmp    esi,eax
c001b19a:	74 10                	je     c001b1ac <SATAPI::open(int, int, void*)+0x6c>
c001b19c:	83 ec 0c             	sub    esp,0xc
c001b19f:	68 70 f6 01 c0       	push   0xc001f670
c001b1a4:	e8 fe 50 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001b1a9:	83 c4 10             	add    esp,0x10
c001b1ac:	83 ec 0c             	sub    esp,0xc
c001b1af:	6a 02                	push   0x2
c001b1b1:	e8 4f e3 fe ff       	call   c0009505 <Virt::allocateKernelVirtualPages(int)>
c001b1b6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b1bc:	6a 03                	push   0x3
c001b1be:	50                   	push   eax
c001b1bf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b1c5:	ff 35 30 0c 02 c0    	push   DWORD PTR ds:0xc0020c30
c001b1cb:	e8 ca e9 fe ff       	call   c0009b9a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b1d0:	83 c4 14             	add    esp,0x14
c001b1d3:	68 74 01 00 00       	push   0x174
c001b1d8:	e8 ec c7 fe ff       	call   c00079c9 <malloc>
c001b1dd:	83 c4 0c             	add    esp,0xc
c001b1e0:	89 c6                	mov    esi,eax
c001b1e2:	6a 00                	push   0x0
c001b1e4:	68 ff ff ff 7f       	push   0x7fffffff
c001b1e9:	6a 00                	push   0x0
c001b1eb:	6a 00                	push   0x0
c001b1ed:	53                   	push   ebx
c001b1ee:	68 86 f6 01 c0       	push   0xc001f686
c001b1f3:	50                   	push   eax
c001b1f4:	e8 19 1a ff ff       	call   c000cc12 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b1f9:	83 c4 14             	add    esp,0x14
c001b1fc:	56                   	push   esi
c001b1fd:	e8 c6 1a ff ff       	call   c000ccc8 <LogicalDisk::assignDriveLetter()>
c001b202:	5a                   	pop    edx
c001b203:	0f be c0             	movsx  eax,al
c001b206:	59                   	pop    ecx
c001b207:	50                   	push   eax
c001b208:	68 74 f5 01 c0       	push   0xc001f574
c001b20d:	e8 46 f5 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b212:	58                   	pop    eax
c001b213:	5a                   	pop    edx
c001b214:	56                   	push   esi
c001b215:	53                   	push   ebx
c001b216:	e8 7d 09 ff ff       	call   c000bb98 <Device::addChild(Device*)>
c001b21b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b221:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b224:	e8 a5 0d ff ff       	call   c000bfce <PhysicalDisk::startCache()>
c001b229:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b230:	31 c0                	xor    eax,eax
c001b232:	83 c4 14             	add    esp,0x14
c001b235:	5b                   	pop    ebx
c001b236:	5e                   	pop    esi
c001b237:	c3                   	ret    

c001b238 <SATAPI::SATAPI()>:
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23f:	83 ec 04             	sub    esp,0x4
c001b242:	68 00 08 00 00       	push   0x800
c001b247:	68 94 f6 01 c0       	push   0xc001f694
c001b24c:	50                   	push   eax
c001b24d:	e8 14 0d ff ff       	call   c000bf66 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c001b25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25e:	89 10                	mov    DWORD PTR [eax],edx
c001b260:	90                   	nop
c001b261:	83 c4 0c             	add    esp,0xc
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <SATAPI::diskRemoved()>:
c001b266:	c3                   	ret    
c001b267:	90                   	nop

c001b268 <SATAPI::diskInserted()>:
c001b268:	83 ec 18             	sub    esp,0x18
c001b26b:	68 a0 f6 01 c0       	push   0xc001f6a0
c001b270:	e8 e3 f4 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b279:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b280:	83 c4 1c             	add    esp,0x1c
c001b283:	c3                   	ret    

c001b284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b284:	55                   	push   ebp
c001b285:	57                   	push   edi
c001b286:	56                   	push   esi
c001b287:	53                   	push   ebx
c001b288:	83 ec 38             	sub    esp,0x38
c001b28b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b28f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b293:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b297:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b29b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b29f:	68 b8 f6 01 c0       	push   0xc001f6b8
c001b2a4:	e8 af f4 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b2a9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b2af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b2b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b2b9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b2bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b2c3:	c1 e0 07             	shl    eax,0x7
c001b2c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b2ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b2ce:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b2d8:	58                   	pop    eax
c001b2d9:	5a                   	pop    edx
c001b2da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2de:	8d 58 02             	lea    ebx,[eax+0x2]
c001b2e1:	c1 e3 07             	shl    ebx,0x7
c001b2e4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b2e8:	53                   	push   ebx
c001b2e9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b2ef:	e8 80 eb ff ff       	call   c0019e74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b2f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2f8:	83 c4 10             	add    esp,0x10
c001b2fb:	b8 01 00 00 00       	mov    eax,0x1
c001b300:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b305:	0f 84 4c 02 00 00    	je     c001b557 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b30b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b311:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b313:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b319:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b31f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b323:	c1 e1 05             	shl    ecx,0x5
c001b326:	01 c8                	add    eax,ecx
c001b328:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b32a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b330:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b336:	89 08                	mov    DWORD PTR [eax],ecx
c001b338:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b33e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b344:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b34a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b34d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b350:	50                   	push   eax
c001b351:	68 90 00 00 00       	push   0x90
c001b356:	6a 00                	push   0x0
c001b358:	53                   	push   ebx
c001b359:	e8 92 51 fe ff       	call   c00004f0 <memset>
c001b35e:	b9 0c 00 00 00       	mov    ecx,0xc
c001b363:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b367:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b369:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b36f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b373:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b379:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b37d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b381:	48                   	dec    eax
c001b382:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b387:	89 c1                	mov    ecx,eax
c001b389:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b38f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b394:	09 c8                	or     eax,ecx
c001b396:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b39c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b39f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b3a6:	66 25 00 7f          	and    ax,0x7f00
c001b3aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3ae:	66 0d 27 80          	or     ax,0x8027
c001b3b2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b3b6:	66 89 03             	mov    WORD PTR [ebx],ax
c001b3b9:	89 d0                	mov    eax,edx
c001b3bb:	c1 ea 18             	shr    edx,0x18
c001b3be:	c1 e8 10             	shr    eax,0x10
c001b3c1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b3c4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b3c7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b3cb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b3ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3d2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b3d5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b3e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3e4:	31 c0                	xor    eax,eax
c001b3e6:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b3ec:	80 e1 88             	and    cl,0x88
c001b3ef:	74 0a                	je     c001b3fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b3f1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b3f6:	74 0a                	je     c001b402 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b3f8:	40                   	inc    eax
c001b3f9:	eb eb                	jmp    c001b3e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b3fb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b400:	75 16                	jne    c001b418 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	68 d2 f6 01 c0       	push   0xc001f6d2
c001b40a:	e8 49 f3 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b40f:	5f                   	pop    edi
c001b410:	5d                   	pop    ebp
c001b411:	68 e7 f6 01 c0       	push   0xc001f6e7
c001b416:	eb 4f                	jmp    c001b467 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b418:	be 01 00 00 00       	mov    esi,0x1
c001b41d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b421:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b425:	d3 e6                	shl    esi,cl
c001b427:	c1 e7 07             	shl    edi,0x7
c001b42a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b430:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b435:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b439:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b43f:	85 c6                	test   esi,eax
c001b441:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b447:	0f 84 cb 00 00 00    	je     c001b518 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b44d:	0f ba e0 1e          	bt     eax,0x1e
c001b451:	73 2c                	jae    c001b47f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b453:	83 ec 0c             	sub    esp,0xc
c001b456:	68 f9 f6 01 c0       	push   0xc001f6f9
c001b45b:	e8 f8 f2 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	68 0c f7 01 c0       	push   0xc001f70c
c001b467:	ff 35 94 0b 02 c0    	push   DWORD PTR ds:0xc0020b94
c001b46d:	e8 c6 d5 fe ff       	call   c0008a38 <VgaText::puts(char const*)>
c001b472:	83 c4 10             	add    esp,0x10
c001b475:	b8 01 00 00 00       	mov    eax,0x1
c001b47a:	e9 d8 00 00 00       	jmp    c001b557 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b47f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b485:	83 f8 0d             	cmp    eax,0xd
c001b488:	77 0a                	ja     c001b494 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b48a:	83 ec 0c             	sub    esp,0xc
c001b48d:	68 c8 00 00 00       	push   0xc8
c001b492:	eb 28                	jmp    c001b4bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b494:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b49a:	83 f8 0d             	cmp    eax,0xd
c001b49d:	77 0a                	ja     c001b4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b49f:	83 ec 0c             	sub    esp,0xc
c001b4a2:	68 58 02 00 00       	push   0x258
c001b4a7:	eb 13                	jmp    c001b4bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b4a9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b4af:	83 f8 06             	cmp    eax,0x6
c001b4b2:	77 10                	ja     c001b4c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b4b4:	83 ec 0c             	sub    esp,0xc
c001b4b7:	68 dc 05 00 00       	push   0x5dc
c001b4bc:	e8 3b 84 ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c001b4c1:	83 c4 10             	add    esp,0x10
c001b4c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b4c8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b4cb:	75 06                	jne    c001b4d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b4cd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b4d1:	74 15                	je     c001b4e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b4d3:	83 fb 06             	cmp    ebx,0x6
c001b4d6:	77 10                	ja     c001b4e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b4d8:	83 ec 0c             	sub    esp,0xc
c001b4db:	68 c4 09 00 00       	push   0x9c4
c001b4e0:	e8 17 84 ff ff       	call   c00138fc <milliTenthSleep(unsigned int)>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	43                   	inc    ebx
c001b4e9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b4ef:	0f 85 44 ff ff ff    	jne    c001b439 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b4f5:	51                   	push   ecx
c001b4f6:	51                   	push   ecx
c001b4f7:	68 1d f7 01 c0       	push   0xc001f71d
c001b4fc:	ff 35 94 0b 02 c0    	push   DWORD PTR ds:0xc0020b94
c001b502:	e8 31 d5 fe ff       	call   c0008a38 <VgaText::puts(char const*)>
c001b507:	c7 04 24 2d f7 01 c0 	mov    DWORD PTR [esp],0xc001f72d
c001b50e:	e8 45 f2 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b513:	e9 5a ff ff ff       	jmp    c001b472 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b518:	0f ba e0 1e          	bt     eax,0x1e
c001b51c:	73 19                	jae    c001b537 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	68 41 f7 01 c0       	push   0xc001f741
c001b526:	e8 2d f2 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b52b:	58                   	pop    eax
c001b52c:	5a                   	pop    edx
c001b52d:	68 56 f7 01 c0       	push   0xc001f756
c001b532:	e9 30 ff ff ff       	jmp    c001b467 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b537:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b53c:	74 17                	je     c001b555 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b53e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b543:	74 10                	je     c001b555 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b545:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b54b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b54f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b553:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b555:	31 c0                	xor    eax,eax
c001b557:	83 c4 2c             	add    esp,0x2c
c001b55a:	5b                   	pop    ebx
c001b55b:	5e                   	pop    esi
c001b55c:	5f                   	pop    edi
c001b55d:	5d                   	pop    ebp
c001b55e:	c3                   	ret    
c001b55f:	90                   	nop

c001b560 <SATAPI::eject()>:
c001b560:	57                   	push   edi
c001b561:	b9 03 00 00 00       	mov    ecx,0x3
c001b566:	83 ec 18             	sub    esp,0x18
c001b569:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b56d:	fc                   	cld    
c001b56e:	31 c0                	xor    eax,eax
c001b570:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b572:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b577:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b57c:	50                   	push   eax
c001b57d:	6a 00                	push   0x0
c001b57f:	6a 00                	push   0x0
c001b581:	6a 00                	push   0x0
c001b583:	6a 00                	push   0x0
c001b585:	6a 02                	push   0x2
c001b587:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b58b:	50                   	push   eax
c001b58c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b590:	e8 ef fc ff ff       	call   c001b284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b595:	31 c0                	xor    eax,eax
c001b597:	83 c4 38             	add    esp,0x38
c001b59a:	5f                   	pop    edi
c001b59b:	c3                   	ret    

c001b59c <SATAPI::read(unsigned long long, int, void*)>:
c001b59c:	57                   	push   edi
c001b59d:	56                   	push   esi
c001b59e:	53                   	push   ebx
c001b59f:	83 ec 3c             	sub    esp,0x3c
c001b5a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b5a6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b5aa:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b5ae:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b5b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b5ba:	68 69 f7 01 c0       	push   0xc001f769
c001b5bf:	e8 94 f1 fe ff       	call   c000a758 <Dbg::kprintf(char const*, ...)>
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	83 fe 04             	cmp    esi,0x4
c001b5ca:	7e 10                	jle    c001b5dc <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	68 7a f7 01 c0       	push   0xc001f77a
c001b5d4:	e8 ce 4c ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b5e2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b5e8:	51                   	push   ecx
c001b5e9:	50                   	push   eax
c001b5ea:	83 c0 02             	add    eax,0x2
c001b5ed:	c1 e0 07             	shl    eax,0x7
c001b5f0:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b5f6:	50                   	push   eax
c001b5f7:	52                   	push   edx
c001b5f8:	e8 3b e9 ff ff       	call   c0019f38 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b5fd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b601:	b9 03 00 00 00       	mov    ecx,0x3
c001b606:	fc                   	cld    
c001b607:	31 c0                	xor    eax,eax
c001b609:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b60b:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b610:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b615:	83 c4 0c             	add    esp,0xc
c001b618:	6a 00                	push   0x0
c001b61a:	6a 00                	push   0x0
c001b61c:	6a 00                	push   0x0
c001b61e:	6a 00                	push   0x0
c001b620:	6a 02                	push   0x2
c001b622:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b626:	50                   	push   eax
c001b627:	53                   	push   ebx
c001b628:	e8 57 fc ff ff       	call   c001b284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b62d:	83 c4 20             	add    esp,0x20
c001b630:	85 c0                	test   eax,eax
c001b632:	74 1f                	je     c001b653 <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b638:	50                   	push   eax
c001b639:	50                   	push   eax
c001b63a:	68 a4 f7 01 c0       	push   0xc001f7a4
c001b63f:	ff 35 94 0b 02 c0    	push   DWORD PTR ds:0xc0020b94
c001b645:	e8 ee d3 fe ff       	call   c0008a38 <VgaText::puts(char const*)>
c001b64a:	58                   	pop    eax
c001b64b:	5a                   	pop    edx
c001b64c:	68 ac f7 01 c0       	push   0xc001f7ac
c001b651:	eb 61                	jmp    c001b6b4 <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b653:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b657:	b9 03 00 00 00       	mov    ecx,0x3
c001b65c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b65e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b662:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b667:	0f c8                	bswap  eax
c001b669:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b66d:	89 f0                	mov    eax,esi
c001b66f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b673:	57                   	push   edi
c001b674:	56                   	push   esi
c001b675:	c1 e6 0b             	shl    esi,0xb
c001b678:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b67c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b684:	56                   	push   esi
c001b685:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b689:	50                   	push   eax
c001b68a:	53                   	push   ebx
c001b68b:	e8 f4 fb ff ff       	call   c001b284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b690:	83 c4 20             	add    esp,0x20
c001b693:	85 c0                	test   eax,eax
c001b695:	74 2f                	je     c001b6c6 <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b697:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b69b:	50                   	push   eax
c001b69c:	50                   	push   eax
c001b69d:	68 b6 f7 01 c0       	push   0xc001f7b6
c001b6a2:	ff 35 94 0b 02 c0    	push   DWORD PTR ds:0xc0020b94
c001b6a8:	e8 8b d3 fe ff       	call   c0008a38 <VgaText::puts(char const*)>
c001b6ad:	5a                   	pop    edx
c001b6ae:	59                   	pop    ecx
c001b6af:	68 be f7 01 c0       	push   0xc001f7be
c001b6b4:	ff 35 94 0b 02 c0    	push   DWORD PTR ds:0xc0020b94
c001b6ba:	e8 79 d3 fe ff       	call   c0008a38 <VgaText::puts(char const*)>
c001b6bf:	83 c4 10             	add    esp,0x10
c001b6c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6c6:	83 c4 30             	add    esp,0x30
c001b6c9:	5b                   	pop    ebx
c001b6ca:	5e                   	pop    esi
c001b6cb:	5f                   	pop    edi
c001b6cc:	c3                   	ret    
c001b6cd:	90                   	nop

c001b6ce <SATAPI::detectMedia()>:
c001b6ce:	c3                   	ret    
c001b6cf:	90                   	nop

c001b6d0 <IOAPIC::close(int, int, void*)>:
c001b6d0:	b8 00 00 00 00       	mov    eax,0x0
c001b6d5:	c3                   	ret    

c001b6d6 <apicGetBase()>:
c001b6d6:	55                   	push   ebp
c001b6d7:	89 e5                	mov    ebp,esp
c001b6d9:	83 ec 18             	sub    esp,0x18
c001b6dc:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c001b6e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b6e7:	83 e0 08             	and    eax,0x8
c001b6ea:	84 c0                	test   al,al
c001b6ec:	75 07                	jne    c001b6f5 <apicGetBase()+0x1f>
c001b6ee:	b8 00 00 00 00       	mov    eax,0x0
c001b6f3:	eb 21                	jmp    c001b716 <apicGetBase()+0x40>
c001b6f5:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c001b6fa:	83 ec 08             	sub    esp,0x8
c001b6fd:	6a 1b                	push   0x1b
c001b6ff:	50                   	push   eax
c001b700:	e8 01 b9 fe ff       	call   c0007006 <Computer::rdmsr(unsigned int)>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b70b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b70e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b711:	25 00 00 ff ff       	and    eax,0xffff0000
c001b716:	c9                   	leave  
c001b717:	c3                   	ret    

c001b718 <IOAPIC::IOAPIC()>:
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71f:	83 ec 08             	sub    esp,0x8
c001b722:	68 00 f8 01 c0       	push   0xc001f800
c001b727:	50                   	push   eax
c001b728:	e8 03 06 ff ff       	call   c000bd30 <Device::Device(char const*)>
c001b72d:	83 c4 10             	add    esp,0x10
c001b730:	ba 10 f8 01 c0       	mov    edx,0xc001f810
c001b735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b739:	89 10                	mov    DWORD PTR [eax],edx
c001b73b:	90                   	nop
c001b73c:	83 c4 0c             	add    esp,0xc
c001b73f:	c3                   	ret    

c001b740 <apicOpen()>:
c001b740:	55                   	push   ebp
c001b741:	89 e5                	mov    ebp,esp
c001b743:	53                   	push   ebx
c001b744:	83 ec 34             	sub    esp,0x34
c001b747:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c001b74c:	83 f0 01             	xor    eax,0x1
c001b74f:	84 c0                	test   al,al
c001b751:	0f 84 9d 00 00 00    	je     c001b7f4 <apicOpen()+0xb4>
c001b757:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b75b:	a0 00 34 02 c0       	mov    al,ds:0xc0023400
c001b760:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b763:	0f 83 84 00 00 00    	jae    c001b7ed <apicOpen()+0xad>
c001b769:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b776:	e8 4e c2 fe ff       	call   c00079c9 <malloc>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	89 c3                	mov    ebx,eax
c001b780:	83 ec 0c             	sub    esp,0xc
c001b783:	53                   	push   ebx
c001b784:	e8 8f ff ff ff       	call   c001b718 <IOAPIC::IOAPIC()>
c001b789:	83 c4 10             	add    esp,0x10
c001b78c:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b78f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b792:	25 ff 00 00 00       	and    eax,0xff
c001b797:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b79a:	89 14 85 20 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb5e0],edx
c001b7a1:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c001b7a6:	40                   	inc    eax
c001b7a7:	a3 00 4a 02 c0       	mov    ds:0xc0024a00,eax
c001b7ac:	a1 48 0b 02 c0       	mov    eax,ds:0xc0020b48
c001b7b1:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b7b7:	83 ec 08             	sub    esp,0x8
c001b7ba:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b7bd:	50                   	push   eax
c001b7be:	e8 d5 03 ff ff       	call   c000bb98 <Device::addChild(Device*)>
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7cb:	83 c0 08             	add    eax,0x8
c001b7ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7d0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b7d3:	25 ff 00 00 00       	and    eax,0xff
c001b7d8:	6a 00                	push   0x0
c001b7da:	6a 00                	push   0x0
c001b7dc:	50                   	push   eax
c001b7dd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b7e0:	ff d2                	call   edx
c001b7e2:	83 c4 10             	add    esp,0x10
c001b7e5:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b7e8:	e9 6e ff ff ff       	jmp    c001b75b <apicOpen()+0x1b>
c001b7ed:	c6 05 40 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a40,0x1
c001b7f4:	e8 dd fe ff ff       	call   c001b6d6 <apicGetBase()>
c001b7f9:	05 f0 00 00 00       	add    eax,0xf0
c001b7fe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b801:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b804:	8b 00                	mov    eax,DWORD PTR [eax]
c001b806:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b809:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b810:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b817:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b81a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b81d:	89 10                	mov    DWORD PTR [eax],edx
c001b81f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b826:	a1 50 33 02 c0       	mov    eax,ds:0xc0023350
c001b82b:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b82e:	7d 70                	jge    c001b8a0 <apicOpen()+0x160>
c001b830:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b833:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c001b83a:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b83d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b840:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c001b847:	c1 e8 08             	shr    eax,0x8
c001b84a:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b84e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b851:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c001b858:	c1 e8 18             	shr    eax,0x18
c001b85b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b85e:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b862:	75 37                	jne    c001b89b <apicOpen()+0x15b>
c001b864:	e8 6d fe ff ff       	call   c001b6d6 <apicGetBase()>
c001b869:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b86d:	75 07                	jne    c001b876 <apicOpen()+0x136>
c001b86f:	ba 60 03 00 00       	mov    edx,0x360
c001b874:	eb 05                	jmp    c001b87b <apicOpen()+0x13b>
c001b876:	ba 50 03 00 00       	mov    edx,0x350
c001b87b:	01 d0                	add    eax,edx
c001b87d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b880:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b883:	8b 00                	mov    eax,DWORD PTR [eax]
c001b885:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b888:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b88f:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b893:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b896:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b899:	89 10                	mov    DWORD PTR [eax],edx
c001b89b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b89e:	eb 86                	jmp    c001b826 <apicOpen()+0xe6>
c001b8a0:	90                   	nop
c001b8a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8a4:	c9                   	leave  
c001b8a5:	c3                   	ret    

c001b8a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b8a6:	55                   	push   ebp
c001b8a7:	89 e5                	mov    ebp,esp
c001b8a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b8ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b8b2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b8b5:	72 1d                	jb     c001b8d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b8ba:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b8c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b8c3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b8c9:	01 d0                	add    eax,edx
c001b8cb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b8ce:	73 04                	jae    c001b8d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b8d0:	b0 01                	mov    al,0x1
c001b8d2:	eb 02                	jmp    c001b8d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b8d4:	b0 00                	mov    al,0x0
c001b8d6:	5d                   	pop    ebp
c001b8d7:	c3                   	ret    

c001b8d8 <IOAPIC::read(int)>:
c001b8d8:	55                   	push   ebp
c001b8d9:	89 e5                	mov    ebp,esp
c001b8db:	83 ec 10             	sub    esp,0x10
c001b8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b8e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b8ed:	31 d2                	xor    edx,edx
c001b8ef:	88 c2                	mov    dl,al
c001b8f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b8f4:	89 10                	mov    DWORD PTR [eax],edx
c001b8f6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b8f9:	83 c0 10             	add    eax,0x10
c001b8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8fe:	c9                   	leave  
c001b8ff:	c3                   	ret    

c001b900 <IOAPIC::open(int, int, void*)>:
c001b900:	55                   	push   ebp
c001b901:	89 e5                	mov    ebp,esp
c001b903:	57                   	push   edi
c001b904:	56                   	push   esi
c001b905:	53                   	push   ebx
c001b906:	83 ec 04             	sub    esp,0x4
c001b909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b90c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b90f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b918:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b91e:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c001b925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b928:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b931:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b937:	8b 14 85 c0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb40]
c001b93e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b941:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b94a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b953:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b959:	89 c6                	mov    esi,eax
c001b95b:	81 e6 ff 00 00 00    	and    esi,0xff
c001b961:	89 d0                	mov    eax,edx
c001b963:	ba 00 00 00 00       	mov    edx,0x0
c001b968:	89 c7                	mov    edi,eax
c001b96a:	83 e7 ff             	and    edi,0xffffffff
c001b96d:	89 f9                	mov    ecx,edi
c001b96f:	89 d0                	mov    eax,edx
c001b971:	25 ff 00 00 00       	and    eax,0xff
c001b976:	89 c3                	mov    ebx,eax
c001b978:	89 c8                	mov    eax,ecx
c001b97a:	89 da                	mov    edx,ebx
c001b97c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b97f:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b982:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b986:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b98a:	83 e0 00             	and    eax,0x0
c001b98d:	09 d0                	or     eax,edx
c001b98f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b996:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b99c:	8d 50 01             	lea    edx,[eax+0x1]
c001b99f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b9a2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b9a8:	31 d2                	xor    edx,edx
c001b9aa:	88 c2                	mov    dl,al
c001b9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9af:	83 c2 08             	add    edx,0x8
c001b9b2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b9b6:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b9bc:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b9c2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b9c6:	6a 01                	push   0x1
c001b9c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b9cb:	e8 08 ff ff ff       	call   c001b8d8 <IOAPIC::read(int)>
c001b9d0:	83 c4 08             	add    esp,0x8
c001b9d3:	c1 f8 10             	sar    eax,0x10
c001b9d6:	25 ff 00 00 00       	and    eax,0xff
c001b9db:	8d 50 01             	lea    edx,[eax+0x1]
c001b9de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9e1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b9e7:	b8 00 00 00 00       	mov    eax,0x0
c001b9ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b9ef:	5b                   	pop    ebx
c001b9f0:	5e                   	pop    esi
c001b9f1:	5f                   	pop    edi
c001b9f2:	5d                   	pop    ebp
c001b9f3:	c3                   	ret    

c001b9f4 <IOAPIC::write(int, int)>:
c001b9f4:	55                   	push   ebp
c001b9f5:	89 e5                	mov    ebp,esp
c001b9f7:	83 ec 10             	sub    esp,0x10
c001b9fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b9fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba03:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ba06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ba09:	31 d2                	xor    edx,edx
c001ba0b:	88 c2                	mov    dl,al
c001ba0d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ba10:	89 10                	mov    DWORD PTR [eax],edx
c001ba12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ba15:	8d 50 10             	lea    edx,[eax+0x10]
c001ba18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ba1b:	89 02                	mov    DWORD PTR [edx],eax
c001ba1d:	90                   	nop
c001ba1e:	c9                   	leave  
c001ba1f:	c3                   	ret    

c001ba20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ba20:	55                   	push   ebp
c001ba21:	89 e5                	mov    ebp,esp
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 2c             	sub    esp,0x2c
c001ba27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ba2a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ba2d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ba30:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ba33:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ba36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ba39:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ba3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ba3f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ba42:	88 d8                	mov    al,bl
c001ba44:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ba47:	88 c8                	mov    al,cl
c001ba49:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ba4c:	88 d0                	mov    al,dl
c001ba4e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ba51:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ba54:	25 ff 00 00 00       	and    eax,0xff
c001ba59:	83 c0 08             	add    eax,0x8
c001ba5c:	01 c0                	add    eax,eax
c001ba5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ba61:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ba64:	25 ff 00 00 00       	and    eax,0xff
c001ba69:	83 c0 08             	add    eax,0x8
c001ba6c:	01 c0                	add    eax,eax
c001ba6e:	40                   	inc    eax
c001ba6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ba72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ba75:	50                   	push   eax
c001ba76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ba79:	e8 5a fe ff ff       	call   c001b8d8 <IOAPIC::read(int)>
c001ba7e:	83 c4 08             	add    esp,0x8
c001ba81:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba84:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ba8b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ba8e:	c1 e0 18             	shl    eax,0x18
c001ba91:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ba94:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ba97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ba9a:	52                   	push   edx
c001ba9b:	50                   	push   eax
c001ba9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ba9f:	e8 50 ff ff ff       	call   c001b9f4 <IOAPIC::write(int, int)>
c001baa4:	83 c4 0c             	add    esp,0xc
c001baa7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001baaa:	50                   	push   eax
c001baab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001baae:	e8 25 fe ff ff       	call   c001b8d8 <IOAPIC::read(int)>
c001bab3:	83 c4 08             	add    esp,0x8
c001bab6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bab9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bac0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bac7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bace:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bad2:	74 09                	je     c001badd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001bad4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001badb:	eb 07                	jmp    c001bae4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001badd:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bae4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bae8:	74 09                	je     c001baf3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001baea:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001baf1:	eb 07                	jmp    c001bafa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001baf3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bafa:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bb01:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001bb04:	25 ff 00 00 00       	and    eax,0xff
c001bb09:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bb0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001bb0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bb12:	52                   	push   edx
c001bb13:	50                   	push   eax
c001bb14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bb17:	e8 d8 fe ff ff       	call   c001b9f4 <IOAPIC::write(int, int)>
c001bb1c:	83 c4 0c             	add    esp,0xc
c001bb1f:	90                   	nop
c001bb20:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bb23:	c9                   	leave  
c001bb24:	c3                   	ret    
c001bb25:	66 90                	xchg   ax,ax
c001bb27:	90                   	nop

c001bb28 <APICTimer::close(int, int, void*)>:
c001bb28:	b8 00 00 00 00       	mov    eax,0x0
c001bb2d:	c3                   	ret    
c001bb2e:	66 90                	xchg   ax,ax

c001bb30 <apicTimerHandler(regs*, void*)>:
c001bb30:	83 ec 0c             	sub    esp,0xc
c001bb33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bb39:	b8 10 27 00 00       	mov    eax,0x2710
c001bb3e:	ba 00 00 00 00       	mov    edx,0x0
c001bb43:	f7 f1                	div    ecx
c001bb45:	83 ec 0c             	sub    esp,0xc
c001bb48:	50                   	push   eax
c001bb49:	e8 de 18 ff ff       	call   c000d42c <timerHandler(unsigned int)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	90                   	nop
c001bb52:	83 c4 0c             	add    esp,0xc
c001bb55:	c3                   	ret    
c001bb56:	66 90                	xchg   ax,ax

c001bb58 <APICTimer::open(int, int, void*)>:
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb61:	83 c0 24             	add    eax,0x24
c001bb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb66:	83 ec 08             	sub    esp,0x8
c001bb69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb71:	ff d0                	call   eax
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb8c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001bb92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb96:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	51                   	push   ecx
c001bba0:	6a 01                	push   0x1
c001bba2:	68 30 bb 01 c0       	push   0xc001bb30
c001bba7:	52                   	push   edx
c001bba8:	50                   	push   eax
c001bba9:	e8 96 ff fe ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bbae:	83 c4 20             	add    esp,0x20
c001bbb1:	89 c2                	mov    edx,eax
c001bbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bbbd:	b8 00 00 00 00       	mov    eax,0x0
c001bbc2:	83 c4 0c             	add    esp,0xc
c001bbc5:	c3                   	ret    
c001bbc6:	66 90                	xchg   ax,ax

c001bbc8 <APICTimer::write(int)>:
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	83 ec 0c             	sub    esp,0xc
c001bbce:	68 34 f8 01 c0       	push   0xc001f834
c001bbd3:	e8 cf 46 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbe3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bbe9:	90                   	nop
c001bbea:	83 c4 0c             	add    esp,0xc
c001bbed:	c3                   	ret    
c001bbee:	66 90                	xchg   ax,ax

c001bbf0 <APICTimer::APICTimer()>:
c001bbf0:	83 ec 0c             	sub    esp,0xc
c001bbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf7:	83 ec 08             	sub    esp,0x8
c001bbfa:	68 44 f8 01 c0       	push   0xc001f844
c001bbff:	50                   	push   eax
c001bc00:	e8 5b 17 ff ff       	call   c000d360 <Timer::Timer(char const*)>
c001bc05:	83 c4 10             	add    esp,0x10
c001bc08:	ba 58 f8 01 c0       	mov    edx,0xc001f858
c001bc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc11:	89 10                	mov    DWORD PTR [eax],edx
c001bc13:	90                   	nop
c001bc14:	83 c4 0c             	add    esp,0xc
c001bc17:	c3                   	ret    

c001bc18 <PIT::write(int)>:
c001bc18:	83 ec 10             	sub    esp,0x10
c001bc1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bc29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc2d:	a3 44 4a 02 c0       	mov    ds:0xc0024a44,eax
c001bc32:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001bc37:	99                   	cdq    
c001bc38:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001bc3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc40:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001bc47:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001bc4c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bc50:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bc55:	ee                   	out    dx,al
c001bc56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc5a:	25 ff 00 00 00       	and    eax,0xff
c001bc5f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001bc66:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bc6a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bc6e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bc73:	ee                   	out    dx,al
c001bc74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc78:	c1 f8 08             	sar    eax,0x8
c001bc7b:	25 ff 00 00 00       	and    eax,0xff
c001bc80:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bc87:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bc8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bc8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bc94:	ee                   	out    dx,al
c001bc95:	90                   	nop
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	c3                   	ret    
c001bc9a:	66 90                	xchg   ax,ax

c001bc9c <pitHandler(regs*, void*)>:
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	8b 0d 44 4a 02 c0    	mov    ecx,DWORD PTR ds:0xc0024a44
c001bca5:	b8 10 27 00 00       	mov    eax,0x2710
c001bcaa:	99                   	cdq    
c001bcab:	f7 f9                	idiv   ecx
c001bcad:	83 ec 0c             	sub    esp,0xc
c001bcb0:	50                   	push   eax
c001bcb1:	e8 76 17 ff ff       	call   c000d42c <timerHandler(unsigned int)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	90                   	nop
c001bcba:	83 c4 0c             	add    esp,0xc
c001bcbd:	c3                   	ret    
c001bcbe:	66 90                	xchg   ax,ax

c001bcc0 <PIT::open(int, int, void*)>:
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcc9:	83 c0 24             	add    eax,0x24
c001bccc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcce:	83 ec 08             	sub    esp,0x8
c001bcd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bcd9:	ff d0                	call   eax
c001bcdb:	83 c4 10             	add    esp,0x10
c001bcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce2:	83 ec 0c             	sub    esp,0xc
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 01                	push   0x1
c001bce9:	68 9c bc 01 c0       	push   0xc001bc9c
c001bcee:	6a 00                	push   0x0
c001bcf0:	50                   	push   eax
c001bcf1:	e8 4e fe fe ff       	call   c000bb44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bcf6:	83 c4 20             	add    esp,0x20
c001bcf9:	89 c2                	mov    edx,eax
c001bcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bd05:	b8 00 00 00 00       	mov    eax,0x0
c001bd0a:	83 c4 0c             	add    esp,0xc
c001bd0d:	c3                   	ret    
c001bd0e:	66 90                	xchg   ax,ax

c001bd10 <PIT::close(int, int, void*)>:
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd17:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd25:	6a 01                	push   0x1
c001bd27:	68 9c bc 01 c0       	push   0xc001bc9c
c001bd2c:	6a 00                	push   0x0
c001bd2e:	50                   	push   eax
c001bd2f:	e8 46 fe fe ff       	call   c000bb7a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	b8 00 00 00 00       	mov    eax,0x0
c001bd3c:	83 c4 0c             	add    esp,0xc
c001bd3f:	c3                   	ret    

c001bd40 <PIT::PIT()>:
c001bd40:	83 ec 0c             	sub    esp,0xc
c001bd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd47:	83 ec 08             	sub    esp,0x8
c001bd4a:	68 80 f8 01 c0       	push   0xc001f880
c001bd4f:	50                   	push   eax
c001bd50:	e8 0b 16 ff ff       	call   c000d360 <Timer::Timer(char const*)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	ba a8 f8 01 c0       	mov    edx,0xc001f8a8
c001bd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd61:	89 10                	mov    DWORD PTR [eax],edx
c001bd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd6d:	31 d2                	xor    edx,edx
c001bd6f:	88 c2                	mov    dl,al
c001bd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd75:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd86:	31 d2                	xor    edx,edx
c001bd88:	88 c2                	mov    dl,al
c001bd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd9d:	8d 50 01             	lea    edx,[eax+0x1]
c001bda0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bda4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bdaa:	31 d2                	xor    edx,edx
c001bdac:	88 c2                	mov    dl,al
c001bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdb2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bdb6:	83 e1 3f             	and    ecx,0x3f
c001bdb9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bdbd:	90                   	nop
c001bdbe:	83 c4 0c             	add    esp,0xc
c001bdc1:	c3                   	ret    
c001bdc2:	66 90                	xchg   ax,ax
c001bdc4:	66 90                	xchg   ax,ax
c001bdc6:	66 90                	xchg   ax,ax
c001bdc8:	66 90                	xchg   ax,ax
c001bdca:	66 90                	xchg   ax,ax
c001bdcc:	66 90                	xchg   ax,ax
c001bdce:	66 90                	xchg   ax,ax

c001bdd0 <avxDetect>:
c001bdd0:	b8 01 00 00 00       	mov    eax,0x1
c001bdd5:	0f a2                	cpuid  
c001bdd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bddd:	74 15                	je     c001bdf4 <avxDetect.noAVX>
c001bddf:	b8 01 00 00 00       	mov    eax,0x1
c001bde4:	0f a2                	cpuid  
c001bde6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bdec:	74 06                	je     c001bdf4 <avxDetect.noAVX>
c001bdee:	b8 01 00 00 00       	mov    eax,0x1
c001bdf3:	c3                   	ret    

c001bdf4 <avxDetect.noAVX>:
c001bdf4:	b8 00 00 00 00       	mov    eax,0x0
c001bdf9:	c3                   	ret    

c001bdfa <avxSave>:
c001bdfa:	53                   	push   ebx
c001bdfb:	52                   	push   edx
c001bdfc:	31 c0                	xor    eax,eax
c001bdfe:	48                   	dec    eax
c001bdff:	89 c2                	mov    edx,eax
c001be01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001be05:	0f ae 23             	xsave  [ebx]
c001be08:	5a                   	pop    edx
c001be09:	5b                   	pop    ebx
c001be0a:	c3                   	ret    

c001be0b <avxLoad>:
c001be0b:	53                   	push   ebx
c001be0c:	52                   	push   edx
c001be0d:	31 c0                	xor    eax,eax
c001be0f:	48                   	dec    eax
c001be10:	89 c2                	mov    edx,eax
c001be12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001be16:	0f ae 2b             	xrstor [ebx]
c001be19:	5a                   	pop    edx
c001be1a:	5b                   	pop    ebx
c001be1b:	c3                   	ret    

c001be1c <avxInit>:
c001be1c:	e8 57 02 00 00       	call   c001c078 <sseInit>
c001be21:	50                   	push   eax
c001be22:	51                   	push   ecx
c001be23:	0f 20 e0             	mov    eax,cr4
c001be26:	0d 00 00 04 00       	or     eax,0x40000
c001be2b:	0f 22 e0             	mov    cr4,eax
c001be2e:	31 c9                	xor    ecx,ecx
c001be30:	0f 01 d0             	xgetbv 
c001be33:	0d 07 00 00 00       	or     eax,0x7
c001be38:	0f 01 d1             	xsetbv 
c001be3b:	59                   	pop    ecx
c001be3c:	58                   	pop    eax
c001be3d:	c3                   	ret    

c001be3e <avxClose>:
c001be3e:	c3                   	ret    

c001be3f <wouldSheSayYes>:
c001be3f:	c3                   	ret    
c001be40:	49                   	dec    ecx
c001be41:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001be45:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001be49:	75 20                	jne    c001be6b <isr0+0xb>
c001be4b:	4e                   	dec    esi
c001be4c:	79 61                	jns    c001beaf <isr7+0x3>
c001be4e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001be53:	66 90                	xchg   ax,ax
c001be55:	66 90                	xchg   ax,ax
c001be57:	66 90                	xchg   ax,ax
c001be59:	66 90                	xchg   ax,ax
c001be5b:	66 90                	xchg   ax,ax
c001be5d:	66 90                	xchg   ax,ax
c001be5f:	90                   	nop

c001be60 <isr0>:
c001be60:	fa                   	cli    
c001be61:	68 00 00 00 00       	push   0x0
c001be66:	68 00 00 00 00       	push   0x0
c001be6b:	e9 44 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001be70 <isr1>:
c001be70:	fa                   	cli    
c001be71:	6a 00                	push   0x0
c001be73:	6a 01                	push   0x1
c001be75:	e9 3a 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001be7a <isr2>:
c001be7a:	fa                   	cli    
c001be7b:	6a 00                	push   0x0
c001be7d:	6a 02                	push   0x2
c001be7f:	e9 30 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001be84 <isr3>:
c001be84:	fa                   	cli    
c001be85:	6a 00                	push   0x0
c001be87:	6a 03                	push   0x3
c001be89:	e9 26 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001be8e <isr4>:
c001be8e:	fa                   	cli    
c001be8f:	6a 00                	push   0x0
c001be91:	6a 04                	push   0x4
c001be93:	e9 1c 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001be98 <isr5>:
c001be98:	fa                   	cli    
c001be99:	6a 00                	push   0x0
c001be9b:	6a 05                	push   0x5
c001be9d:	e9 12 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001bea2 <isr6>:
c001bea2:	fa                   	cli    
c001bea3:	6a 00                	push   0x0
c001bea5:	6a 06                	push   0x6
c001bea7:	e9 08 01 00 00       	jmp    c001bfb4 <int_common_stub>

c001beac <isr7>:
c001beac:	fa                   	cli    
c001bead:	6a 00                	push   0x0
c001beaf:	6a 07                	push   0x7
c001beb1:	e9 fe 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001beb6 <isr8>:
c001beb6:	fa                   	cli    
c001beb7:	6a 08                	push   0x8
c001beb9:	e9 f6 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bebe <isr9>:
c001bebe:	fa                   	cli    
c001bebf:	6a 00                	push   0x0
c001bec1:	6a 09                	push   0x9
c001bec3:	e9 ec 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bec8 <isr10>:
c001bec8:	fa                   	cli    
c001bec9:	6a 0a                	push   0xa
c001becb:	e9 e4 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bed0 <isr11>:
c001bed0:	fa                   	cli    
c001bed1:	6a 0b                	push   0xb
c001bed3:	e9 dc 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bed8 <isr12>:
c001bed8:	fa                   	cli    
c001bed9:	6a 0c                	push   0xc
c001bedb:	e9 d4 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bee0 <isr13>:
c001bee0:	fa                   	cli    
c001bee1:	6a 0d                	push   0xd
c001bee3:	e9 cc 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bee8 <isr14>:
c001bee8:	fa                   	cli    
c001bee9:	6a 0e                	push   0xe
c001beeb:	e9 c4 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bef0 <isr15>:
c001bef0:	fa                   	cli    
c001bef1:	6a 00                	push   0x0
c001bef3:	6a 0f                	push   0xf
c001bef5:	e9 ba 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001befa <isr16>:
c001befa:	fa                   	cli    
c001befb:	6a 00                	push   0x0
c001befd:	6a 10                	push   0x10
c001beff:	e9 b0 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf04 <isr17>:
c001bf04:	fa                   	cli    
c001bf05:	6a 00                	push   0x0
c001bf07:	6a 11                	push   0x11
c001bf09:	e9 a6 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf0e <isr18>:
c001bf0e:	fa                   	cli    
c001bf0f:	6a 00                	push   0x0
c001bf11:	6a 12                	push   0x12
c001bf13:	e9 9c 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf18 <irq3>:
c001bf18:	fa                   	cli    
c001bf19:	6a 00                	push   0x0
c001bf1b:	6a 23                	push   0x23
c001bf1d:	e9 92 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf22 <irq4>:
c001bf22:	fa                   	cli    
c001bf23:	6a 00                	push   0x0
c001bf25:	6a 24                	push   0x24
c001bf27:	e9 88 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf2c <irq5>:
c001bf2c:	fa                   	cli    
c001bf2d:	6a 00                	push   0x0
c001bf2f:	6a 25                	push   0x25
c001bf31:	e9 7e 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf36 <irq6>:
c001bf36:	fa                   	cli    
c001bf37:	6a 00                	push   0x0
c001bf39:	6a 26                	push   0x26
c001bf3b:	e9 74 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf40 <irq7>:
c001bf40:	fa                   	cli    
c001bf41:	6a 00                	push   0x0
c001bf43:	6a 27                	push   0x27
c001bf45:	e9 6a 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf4a <irq8>:
c001bf4a:	fa                   	cli    
c001bf4b:	6a 00                	push   0x0
c001bf4d:	6a 28                	push   0x28
c001bf4f:	e9 60 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf54 <irq9>:
c001bf54:	fa                   	cli    
c001bf55:	6a 00                	push   0x0
c001bf57:	6a 29                	push   0x29
c001bf59:	e9 56 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf5e <irq10>:
c001bf5e:	fa                   	cli    
c001bf5f:	6a 00                	push   0x0
c001bf61:	6a 2a                	push   0x2a
c001bf63:	e9 4c 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf68 <irq11>:
c001bf68:	fa                   	cli    
c001bf69:	6a 00                	push   0x0
c001bf6b:	6a 2b                	push   0x2b
c001bf6d:	e9 42 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf72 <irq12>:
c001bf72:	fa                   	cli    
c001bf73:	6a 00                	push   0x0
c001bf75:	6a 2c                	push   0x2c
c001bf77:	e9 38 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf7c <irq13>:
c001bf7c:	fa                   	cli    
c001bf7d:	6a 00                	push   0x0
c001bf7f:	6a 2d                	push   0x2d
c001bf81:	e9 2e 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf86 <irq14>:
c001bf86:	fa                   	cli    
c001bf87:	6a 00                	push   0x0
c001bf89:	6a 2e                	push   0x2e
c001bf8b:	e9 24 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf90 <irq15>:
c001bf90:	fa                   	cli    
c001bf91:	6a 00                	push   0x0
c001bf93:	6a 2f                	push   0x2f
c001bf95:	e9 1a 00 00 00       	jmp    c001bfb4 <int_common_stub>

c001bf9a <irq1>:
c001bf9a:	fa                   	cli    
c001bf9b:	6a 00                	push   0x0
c001bf9d:	6a 21                	push   0x21
c001bf9f:	eb 13                	jmp    c001bfb4 <int_common_stub>

c001bfa1 <irq2>:
c001bfa1:	fa                   	cli    
c001bfa2:	6a 00                	push   0x0
c001bfa4:	6a 22                	push   0x22
c001bfa6:	eb 0c                	jmp    c001bfb4 <int_common_stub>

c001bfa8 <isr96>:
c001bfa8:	6a 00                	push   0x0
c001bfaa:	6a 60                	push   0x60
c001bfac:	fb                   	sti    
c001bfad:	eb 05                	jmp    c001bfb4 <int_common_stub>

c001bfaf <irq0>:
c001bfaf:	fa                   	cli    
c001bfb0:	6a 00                	push   0x0
c001bfb2:	6a 20                	push   0x20

c001bfb4 <int_common_stub>:
c001bfb4:	60                   	pusha  
c001bfb5:	1e                   	push   ds
c001bfb6:	06                   	push   es
c001bfb7:	0f a0                	push   fs
c001bfb9:	0f a8                	push   gs
c001bfbb:	66 b8 10 00          	mov    ax,0x10
c001bfbf:	66 8e d8             	mov    ds,ax
c001bfc2:	66 8e c0             	mov    es,ax
c001bfc5:	66 8e e0             	mov    fs,ax
c001bfc8:	66 8e e8             	mov    gs,ax
c001bfcb:	54                   	push   esp
c001bfcc:	fc                   	cld    
c001bfcd:	e8 72 00 ff ff       	call   c000c044 <int_handler>
c001bfd2:	81 c4 04 00 00 00    	add    esp,0x4
c001bfd8:	0f a9                	pop    gs
c001bfda:	0f a1                	pop    fs
c001bfdc:	07                   	pop    es
c001bfdd:	1f                   	pop    ds
c001bfde:	61                   	popa   
c001bfdf:	81 c4 08 00 00 00    	add    esp,0x8
c001bfe5:	cf                   	iret   

c001bfe6 <irq16>:
c001bfe6:	fa                   	cli    
c001bfe7:	6a 00                	push   0x0
c001bfe9:	6a 30                	push   0x30
c001bfeb:	e9 c4 ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001bff0 <irq17>:
c001bff0:	fa                   	cli    
c001bff1:	6a 00                	push   0x0
c001bff3:	6a 31                	push   0x31
c001bff5:	e9 ba ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001bffa <irq18>:
c001bffa:	fa                   	cli    
c001bffb:	6a 00                	push   0x0
c001bffd:	6a 32                	push   0x32
c001bfff:	e9 b0 ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001c004 <irq19>:
c001c004:	fa                   	cli    
c001c005:	6a 00                	push   0x0
c001c007:	6a 33                	push   0x33
c001c009:	e9 a6 ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001c00e <irq20>:
c001c00e:	fa                   	cli    
c001c00f:	6a 00                	push   0x0
c001c011:	6a 34                	push   0x34
c001c013:	e9 9c ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001c018 <irq21>:
c001c018:	fa                   	cli    
c001c019:	6a 00                	push   0x0
c001c01b:	6a 35                	push   0x35
c001c01d:	e9 92 ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001c022 <irq22>:
c001c022:	fa                   	cli    
c001c023:	6a 00                	push   0x0
c001c025:	6a 36                	push   0x36
c001c027:	e9 88 ff ff ff       	jmp    c001bfb4 <int_common_stub>

c001c02c <irq23>:
c001c02c:	fa                   	cli    
c001c02d:	6a 00                	push   0x0
c001c02f:	6a 37                	push   0x37
c001c031:	e9 7e ff ff ff       	jmp    c001bfb4 <int_common_stub>
c001c036:	66 90                	xchg   ax,ax
c001c038:	66 90                	xchg   ax,ax
c001c03a:	66 90                	xchg   ax,ax
c001c03c:	66 90                	xchg   ax,ax
c001c03e:	66 90                	xchg   ax,ax

c001c040 <i386GetRDRAND>:
c001c040:	b9 64 00 00 00       	mov    ecx,0x64

c001c045 <retry>:
c001c045:	0f c7 f0             	rdrand eax
c001c048:	72 05                	jb     c001c04f <retry.done>
c001c04a:	e2 f9                	loop   c001c045 <retry>

c001c04c <retry.fail>:
c001c04c:	31 c0                	xor    eax,eax
c001c04e:	c3                   	ret    

c001c04f <retry.done>:
c001c04f:	c3                   	ret    

c001c050 <absolutelyNoChanceInHell>:
c001c050:	b8 01 00 00 00       	mov    eax,0x1
c001c055:	0f a2                	cpuid  
c001c057:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c05d:	74 06                	je     c001c065 <sseDetect.noSSE>
c001c05f:	b8 01 00 00 00       	mov    eax,0x1
c001c064:	c3                   	ret    

c001c065 <sseDetect.noSSE>:
c001c065:	31 c0                	xor    eax,eax
c001c067:	c3                   	ret    

c001c068 <sseSave>:
c001c068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c06c:	0f ae 00             	fxsave [eax]
c001c06f:	c3                   	ret    

c001c070 <sseLoad>:
c001c070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c074:	0f ae 08             	fxrstor [eax]
c001c077:	c3                   	ret    

c001c078 <sseInit>:
c001c078:	e8 42 00 00 00       	call   c001c0bf <x87Init>
c001c07d:	0f 20 e0             	mov    eax,cr4
c001c080:	66 0d 00 06          	or     ax,0x600
c001c084:	0f 22 e0             	mov    cr4,eax
c001c087:	c3                   	ret    

c001c088 <sseClose>:
c001c088:	c3                   	ret    
c001c089:	66 90                	xchg   ax,ax
c001c08b:	66 90                	xchg   ax,ax
c001c08d:	66 90                	xchg   ax,ax
c001c08f:	90                   	nop

c001c090 <value_37F>:
c001c090:	7f 03                	jg     c001c095 <value_37A+0x1>

c001c092 <value_37E>:
c001c092:	7e 03                	jle    c001c097 <x87Detect+0x1>

c001c094 <value_37A>:
c001c094:	7a 03                	jp     c001c099 <x87Detect+0x3>

c001c096 <x87Detect>:
c001c096:	b8 01 00 00 00       	mov    eax,0x1
c001c09b:	0f a2                	cpuid  
c001c09d:	f7 c2 01 00 00 00    	test   edx,0x1
c001c0a3:	74 06                	je     c001c0ab <x87Detect.nox87>
c001c0a5:	b8 01 00 00 00       	mov    eax,0x1
c001c0aa:	c3                   	ret    

c001c0ab <x87Detect.nox87>:
c001c0ab:	b8 00 00 00 00       	mov    eax,0x0
c001c0b0:	c3                   	ret    

c001c0b1 <x87Save>:
c001c0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0b5:	dd 30                	fnsave [eax]
c001c0b7:	c3                   	ret    

c001c0b8 <x87Load>:
c001c0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0bc:	dd 20                	frstor [eax]
c001c0be:	c3                   	ret    

c001c0bf <x87Init>:
c001c0bf:	0f 20 c0             	mov    eax,cr0
c001c0c2:	66 25 fb ff          	and    ax,0xfffb
c001c0c6:	66 0d 22 00          	or     ax,0x22
c001c0ca:	0f 22 c0             	mov    cr0,eax
c001c0cd:	db e3                	fninit 
c001c0cf:	0f 06                	clts   
c001c0d1:	d9 2d 94 c0 01 c0    	fldcw  WORD PTR ds:0xc001c094
c001c0d7:	c3                   	ret    

c001c0d8 <x87Close>:
c001c0d8:	c3                   	ret    
c001c0d9:	66 90                	xchg   ax,ax
c001c0db:	90                   	nop

c001c0dc <__do_global_ctors_aux>:
c001c0dc:	a1 8c d0 01 c0       	mov    eax,ds:0xc001d08c
c001c0e1:	83 f8 ff             	cmp    eax,0xffffffff
c001c0e4:	74 1a                	je     c001c100 <__do_global_ctors_aux+0x24>
c001c0e6:	55                   	push   ebp
c001c0e7:	89 e5                	mov    ebp,esp
c001c0e9:	53                   	push   ebx
c001c0ea:	52                   	push   edx
c001c0eb:	bb 8c d0 01 c0       	mov    ebx,0xc001d08c
c001c0f0:	ff d0                	call   eax
c001c0f2:	83 eb 04             	sub    ebx,0x4
c001c0f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0f7:	83 f8 ff             	cmp    eax,0xffffffff
c001c0fa:	75 f4                	jne    c001c0f0 <__do_global_ctors_aux+0x14>
c001c0fc:	58                   	pop    eax
c001c0fd:	5b                   	pop    ebx
c001c0fe:	5d                   	pop    ebp
c001c0ff:	c3                   	ret    
c001c100:	c3                   	ret    
c001c101:	66 90                	xchg   ax,ax
c001c103:	90                   	nop

c001c104 <__divdi3>:
c001c104:	55                   	push   ebp
c001c105:	57                   	push   edi
c001c106:	56                   	push   esi
c001c107:	53                   	push   ebx
c001c108:	83 ec 1c             	sub    esp,0x1c
c001c10b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c10f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c113:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c116:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c11a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c11e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c122:	85 db                	test   ebx,ebx
c001c124:	0f 88 8e 00 00 00    	js     c001c1b8 <__divdi3+0xb4>
c001c12a:	89 dd                	mov    ebp,ebx
c001c12c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c134:	89 d3                	mov    ebx,edx
c001c136:	85 d2                	test   edx,edx
c001c138:	79 0d                	jns    c001c147 <__divdi3+0x43>
c001c13a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c13e:	f7 d8                	neg    eax
c001c140:	83 d2 00             	adc    edx,0x0
c001c143:	f7 da                	neg    edx
c001c145:	89 d3                	mov    ebx,edx
c001c147:	89 c7                	mov    edi,eax
c001c149:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c14c:	85 db                	test   ebx,ebx
c001c14e:	75 48                	jne    c001c198 <__divdi3+0x94>
c001c150:	39 ef                	cmp    edi,ebp
c001c152:	76 24                	jbe    c001c178 <__divdi3+0x74>
c001c154:	89 ea                	mov    edx,ebp
c001c156:	f7 f7                	div    edi
c001c158:	89 c1                	mov    ecx,eax
c001c15a:	31 f6                	xor    esi,esi
c001c15c:	89 c8                	mov    eax,ecx
c001c15e:	89 f2                	mov    edx,esi
c001c160:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c164:	85 c9                	test   ecx,ecx
c001c166:	74 07                	je     c001c16f <__divdi3+0x6b>
c001c168:	f7 d8                	neg    eax
c001c16a:	83 d2 00             	adc    edx,0x0
c001c16d:	f7 da                	neg    edx
c001c16f:	83 c4 1c             	add    esp,0x1c
c001c172:	5b                   	pop    ebx
c001c173:	5e                   	pop    esi
c001c174:	5f                   	pop    edi
c001c175:	5d                   	pop    ebp
c001c176:	c3                   	ret    
c001c177:	90                   	nop
c001c178:	85 ff                	test   edi,edi
c001c17a:	75 0b                	jne    c001c187 <__divdi3+0x83>
c001c17c:	b8 01 00 00 00       	mov    eax,0x1
c001c181:	31 d2                	xor    edx,edx
c001c183:	f7 f3                	div    ebx
c001c185:	89 c7                	mov    edi,eax
c001c187:	31 d2                	xor    edx,edx
c001c189:	89 e8                	mov    eax,ebp
c001c18b:	f7 f7                	div    edi
c001c18d:	89 c6                	mov    esi,eax
c001c18f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c192:	f7 f7                	div    edi
c001c194:	89 c1                	mov    ecx,eax
c001c196:	eb c4                	jmp    c001c15c <__divdi3+0x58>
c001c198:	39 eb                	cmp    ebx,ebp
c001c19a:	77 3c                	ja     c001c1d8 <__divdi3+0xd4>
c001c19c:	0f bd f3             	bsr    esi,ebx
c001c19f:	83 f6 1f             	xor    esi,0x1f
c001c1a2:	75 40                	jne    c001c1e4 <__divdi3+0xe0>
c001c1a4:	39 eb                	cmp    ebx,ebp
c001c1a6:	72 09                	jb     c001c1b1 <__divdi3+0xad>
c001c1a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c1ab:	0f 87 97 00 00 00    	ja     c001c248 <__divdi3+0x144>
c001c1b1:	b9 01 00 00 00       	mov    ecx,0x1
c001c1b6:	eb a4                	jmp    c001c15c <__divdi3+0x58>
c001c1b8:	f7 d9                	neg    ecx
c001c1ba:	83 d3 00             	adc    ebx,0x0
c001c1bd:	f7 db                	neg    ebx
c001c1bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c1c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c1c6:	89 dd                	mov    ebp,ebx
c001c1c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c1d0:	e9 5f ff ff ff       	jmp    c001c134 <__divdi3+0x30>
c001c1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d8:	31 f6                	xor    esi,esi
c001c1da:	31 c9                	xor    ecx,ecx
c001c1dc:	e9 7b ff ff ff       	jmp    c001c15c <__divdi3+0x58>
c001c1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e4:	b8 20 00 00 00       	mov    eax,0x20
c001c1e9:	29 f0                	sub    eax,esi
c001c1eb:	89 f1                	mov    ecx,esi
c001c1ed:	d3 e3                	shl    ebx,cl
c001c1ef:	89 fa                	mov    edx,edi
c001c1f1:	88 c1                	mov    cl,al
c001c1f3:	d3 ea                	shr    edx,cl
c001c1f5:	09 da                	or     edx,ebx
c001c1f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c1fb:	89 f1                	mov    ecx,esi
c001c1fd:	d3 e7                	shl    edi,cl
c001c1ff:	89 eb                	mov    ebx,ebp
c001c201:	88 c1                	mov    cl,al
c001c203:	d3 eb                	shr    ebx,cl
c001c205:	89 f1                	mov    ecx,esi
c001c207:	d3 e5                	shl    ebp,cl
c001c209:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c20c:	88 c1                	mov    cl,al
c001c20e:	d3 ea                	shr    edx,cl
c001c210:	09 d5                	or     ebp,edx
c001c212:	89 e8                	mov    eax,ebp
c001c214:	89 da                	mov    edx,ebx
c001c216:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c21a:	89 d3                	mov    ebx,edx
c001c21c:	89 c5                	mov    ebp,eax
c001c21e:	f7 e7                	mul    edi
c001c220:	39 d3                	cmp    ebx,edx
c001c222:	72 18                	jb     c001c23c <__divdi3+0x138>
c001c224:	74 0a                	je     c001c230 <__divdi3+0x12c>
c001c226:	89 e9                	mov    ecx,ebp
c001c228:	31 f6                	xor    esi,esi
c001c22a:	e9 2d ff ff ff       	jmp    c001c15c <__divdi3+0x58>
c001c22f:	90                   	nop
c001c230:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c233:	89 f1                	mov    ecx,esi
c001c235:	d3 e7                	shl    edi,cl
c001c237:	39 c7                	cmp    edi,eax
c001c239:	73 eb                	jae    c001c226 <__divdi3+0x122>
c001c23b:	90                   	nop
c001c23c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c23f:	31 f6                	xor    esi,esi
c001c241:	e9 16 ff ff ff       	jmp    c001c15c <__divdi3+0x58>
c001c246:	66 90                	xchg   ax,ax
c001c248:	31 c9                	xor    ecx,ecx
c001c24a:	e9 0d ff ff ff       	jmp    c001c15c <__divdi3+0x58>
c001c24f:	90                   	nop

c001c250 <__moddi3>:
c001c250:	55                   	push   ebp
c001c251:	57                   	push   edi
c001c252:	56                   	push   esi
c001c253:	53                   	push   ebx
c001c254:	83 ec 2c             	sub    esp,0x2c
c001c257:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c25b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c25f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c263:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c267:	85 db                	test   ebx,ebx
c001c269:	0f 88 85 00 00 00    	js     c001c2f4 <__moddi3+0xa4>
c001c26f:	89 de                	mov    esi,ebx
c001c271:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c279:	89 d7                	mov    edi,edx
c001c27b:	85 d2                	test   edx,edx
c001c27d:	79 09                	jns    c001c288 <__moddi3+0x38>
c001c27f:	f7 d8                	neg    eax
c001c281:	83 d2 00             	adc    edx,0x0
c001c284:	f7 da                	neg    edx
c001c286:	89 d7                	mov    edi,edx
c001c288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c28c:	89 cd                	mov    ebp,ecx
c001c28e:	85 ff                	test   edi,edi
c001c290:	75 52                	jne    c001c2e4 <__moddi3+0x94>
c001c292:	89 c3                	mov    ebx,eax
c001c294:	39 f0                	cmp    eax,esi
c001c296:	76 24                	jbe    c001c2bc <__moddi3+0x6c>
c001c298:	89 c8                	mov    eax,ecx
c001c29a:	89 f2                	mov    edx,esi
c001c29c:	f7 f3                	div    ebx
c001c29e:	89 d6                	mov    esi,edx
c001c2a0:	89 f0                	mov    eax,esi
c001c2a2:	31 d2                	xor    edx,edx
c001c2a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c2a8:	85 c9                	test   ecx,ecx
c001c2aa:	74 07                	je     c001c2b3 <__moddi3+0x63>
c001c2ac:	f7 d8                	neg    eax
c001c2ae:	83 d2 00             	adc    edx,0x0
c001c2b1:	f7 da                	neg    edx
c001c2b3:	83 c4 2c             	add    esp,0x2c
c001c2b6:	5b                   	pop    ebx
c001c2b7:	5e                   	pop    esi
c001c2b8:	5f                   	pop    edi
c001c2b9:	5d                   	pop    ebp
c001c2ba:	c3                   	ret    
c001c2bb:	90                   	nop
c001c2bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2c0:	85 db                	test   ebx,ebx
c001c2c2:	75 0d                	jne    c001c2d1 <__moddi3+0x81>
c001c2c4:	b8 01 00 00 00       	mov    eax,0x1
c001c2c9:	31 d2                	xor    edx,edx
c001c2cb:	f7 f7                	div    edi
c001c2cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2d1:	89 f0                	mov    eax,esi
c001c2d3:	31 d2                	xor    edx,edx
c001c2d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c2d9:	f7 f7                	div    edi
c001c2db:	89 e8                	mov    eax,ebp
c001c2dd:	f7 f7                	div    edi
c001c2df:	89 d6                	mov    esi,edx
c001c2e1:	eb bd                	jmp    c001c2a0 <__moddi3+0x50>
c001c2e3:	90                   	nop
c001c2e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c2e8:	39 f7                	cmp    edi,esi
c001c2ea:	76 20                	jbe    c001c30c <__moddi3+0xbc>
c001c2ec:	89 c8                	mov    eax,ecx
c001c2ee:	89 f2                	mov    edx,esi
c001c2f0:	eb b2                	jmp    c001c2a4 <__moddi3+0x54>
c001c2f2:	66 90                	xchg   ax,ax
c001c2f4:	f7 d9                	neg    ecx
c001c2f6:	83 d3 00             	adc    ebx,0x0
c001c2f9:	f7 db                	neg    ebx
c001c2fb:	89 de                	mov    esi,ebx
c001c2fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c305:	e9 6f ff ff ff       	jmp    c001c279 <__moddi3+0x29>
c001c30a:	66 90                	xchg   ax,ax
c001c30c:	0f bd c7             	bsr    eax,edi
c001c30f:	83 f0 1f             	xor    eax,0x1f
c001c312:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c316:	75 24                	jne    c001c33c <__moddi3+0xec>
c001c318:	39 f7                	cmp    edi,esi
c001c31a:	72 06                	jb     c001c322 <__moddi3+0xd2>
c001c31c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c320:	77 0c                	ja     c001c32e <__moddi3+0xde>
c001c322:	89 e9                	mov    ecx,ebp
c001c324:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c328:	19 fe                	sbb    esi,edi
c001c32a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c32e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c332:	89 f2                	mov    edx,esi
c001c334:	e9 6b ff ff ff       	jmp    c001c2a4 <__moddi3+0x54>
c001c339:	8d 76 00             	lea    esi,[esi+0x0]
c001c33c:	b8 20 00 00 00       	mov    eax,0x20
c001c341:	89 c2                	mov    edx,eax
c001c343:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c347:	29 da                	sub    edx,ebx
c001c349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c34d:	88 d9                	mov    cl,bl
c001c34f:	d3 e7                	shl    edi,cl
c001c351:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c355:	88 d1                	mov    cl,dl
c001c357:	d3 e8                	shr    eax,cl
c001c359:	09 c7                	or     edi,eax
c001c35b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c35f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c363:	89 d8                	mov    eax,ebx
c001c365:	88 d9                	mov    cl,bl
c001c367:	d3 e7                	shl    edi,cl
c001c369:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c36d:	89 f3                	mov    ebx,esi
c001c36f:	88 d1                	mov    cl,dl
c001c371:	d3 eb                	shr    ebx,cl
c001c373:	89 c7                	mov    edi,eax
c001c375:	88 c1                	mov    cl,al
c001c377:	d3 e6                	shl    esi,cl
c001c379:	89 e8                	mov    eax,ebp
c001c37b:	88 d1                	mov    cl,dl
c001c37d:	d3 e8                	shr    eax,cl
c001c37f:	09 f0                	or     eax,esi
c001c381:	89 f9                	mov    ecx,edi
c001c383:	d3 e5                	shl    ebp,cl
c001c385:	89 da                	mov    edx,ebx
c001c387:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c38b:	89 d3                	mov    ebx,edx
c001c38d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c391:	89 c6                	mov    esi,eax
c001c393:	89 d1                	mov    ecx,edx
c001c395:	39 d3                	cmp    ebx,edx
c001c397:	72 27                	jb     c001c3c0 <__moddi3+0x170>
c001c399:	74 21                	je     c001c3bc <__moddi3+0x16c>
c001c39b:	29 f5                	sub    ebp,esi
c001c39d:	19 cb                	sbb    ebx,ecx
c001c39f:	89 de                	mov    esi,ebx
c001c3a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c3a5:	d3 e6                	shl    esi,cl
c001c3a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c3ab:	89 f9                	mov    ecx,edi
c001c3ad:	d3 ed                	shr    ebp,cl
c001c3af:	09 ee                	or     esi,ebp
c001c3b1:	89 f0                	mov    eax,esi
c001c3b3:	d3 eb                	shr    ebx,cl
c001c3b5:	89 da                	mov    edx,ebx
c001c3b7:	e9 e8 fe ff ff       	jmp    c001c2a4 <__moddi3+0x54>
c001c3bc:	39 c5                	cmp    ebp,eax
c001c3be:	73 db                	jae    c001c39b <__moddi3+0x14b>
c001c3c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c3c8:	89 d1                	mov    ecx,edx
c001c3ca:	89 c6                	mov    esi,eax
c001c3cc:	eb cd                	jmp    c001c39b <__moddi3+0x14b>
c001c3ce:	66 90                	xchg   ax,ax

c001c3d0 <__udivdi3>:
c001c3d0:	55                   	push   ebp
c001c3d1:	57                   	push   edi
c001c3d2:	56                   	push   esi
c001c3d3:	53                   	push   ebx
c001c3d4:	83 ec 1c             	sub    esp,0x1c
c001c3d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c3db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c3df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c3e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c3e7:	85 d2                	test   edx,edx
c001c3e9:	75 41                	jne    c001c42c <__udivdi3+0x5c>
c001c3eb:	39 f7                	cmp    edi,esi
c001c3ed:	76 15                	jbe    c001c404 <__udivdi3+0x34>
c001c3ef:	89 e8                	mov    eax,ebp
c001c3f1:	89 f2                	mov    edx,esi
c001c3f3:	f7 f7                	div    edi
c001c3f5:	31 db                	xor    ebx,ebx
c001c3f7:	89 da                	mov    edx,ebx
c001c3f9:	83 c4 1c             	add    esp,0x1c
c001c3fc:	5b                   	pop    ebx
c001c3fd:	5e                   	pop    esi
c001c3fe:	5f                   	pop    edi
c001c3ff:	5d                   	pop    ebp
c001c400:	c3                   	ret    
c001c401:	8d 76 00             	lea    esi,[esi+0x0]
c001c404:	89 f9                	mov    ecx,edi
c001c406:	85 ff                	test   edi,edi
c001c408:	75 0b                	jne    c001c415 <__udivdi3+0x45>
c001c40a:	b8 01 00 00 00       	mov    eax,0x1
c001c40f:	31 d2                	xor    edx,edx
c001c411:	f7 f7                	div    edi
c001c413:	89 c1                	mov    ecx,eax
c001c415:	31 d2                	xor    edx,edx
c001c417:	89 f0                	mov    eax,esi
c001c419:	f7 f1                	div    ecx
c001c41b:	89 c3                	mov    ebx,eax
c001c41d:	89 e8                	mov    eax,ebp
c001c41f:	f7 f1                	div    ecx
c001c421:	89 da                	mov    edx,ebx
c001c423:	83 c4 1c             	add    esp,0x1c
c001c426:	5b                   	pop    ebx
c001c427:	5e                   	pop    esi
c001c428:	5f                   	pop    edi
c001c429:	5d                   	pop    ebp
c001c42a:	c3                   	ret    
c001c42b:	90                   	nop
c001c42c:	39 f2                	cmp    edx,esi
c001c42e:	77 1c                	ja     c001c44c <__udivdi3+0x7c>
c001c430:	0f bd da             	bsr    ebx,edx
c001c433:	83 f3 1f             	xor    ebx,0x1f
c001c436:	75 24                	jne    c001c45c <__udivdi3+0x8c>
c001c438:	39 f2                	cmp    edx,esi
c001c43a:	72 08                	jb     c001c444 <__udivdi3+0x74>
c001c43c:	39 ef                	cmp    edi,ebp
c001c43e:	0f 87 84 00 00 00    	ja     c001c4c8 <__udivdi3+0xf8>
c001c444:	b8 01 00 00 00       	mov    eax,0x1
c001c449:	eb ac                	jmp    c001c3f7 <__udivdi3+0x27>
c001c44b:	90                   	nop
c001c44c:	31 db                	xor    ebx,ebx
c001c44e:	31 c0                	xor    eax,eax
c001c450:	89 da                	mov    edx,ebx
c001c452:	83 c4 1c             	add    esp,0x1c
c001c455:	5b                   	pop    ebx
c001c456:	5e                   	pop    esi
c001c457:	5f                   	pop    edi
c001c458:	5d                   	pop    ebp
c001c459:	c3                   	ret    
c001c45a:	66 90                	xchg   ax,ax
c001c45c:	b8 20 00 00 00       	mov    eax,0x20
c001c461:	29 d8                	sub    eax,ebx
c001c463:	88 d9                	mov    cl,bl
c001c465:	d3 e2                	shl    edx,cl
c001c467:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c46b:	89 fa                	mov    edx,edi
c001c46d:	88 c1                	mov    cl,al
c001c46f:	d3 ea                	shr    edx,cl
c001c471:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c475:	09 d1                	or     ecx,edx
c001c477:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c47b:	88 d9                	mov    cl,bl
c001c47d:	d3 e7                	shl    edi,cl
c001c47f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c483:	89 f7                	mov    edi,esi
c001c485:	88 c1                	mov    cl,al
c001c487:	d3 ef                	shr    edi,cl
c001c489:	88 d9                	mov    cl,bl
c001c48b:	d3 e6                	shl    esi,cl
c001c48d:	89 ea                	mov    edx,ebp
c001c48f:	88 c1                	mov    cl,al
c001c491:	d3 ea                	shr    edx,cl
c001c493:	09 d6                	or     esi,edx
c001c495:	89 f0                	mov    eax,esi
c001c497:	89 fa                	mov    edx,edi
c001c499:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c49d:	89 d7                	mov    edi,edx
c001c49f:	89 c6                	mov    esi,eax
c001c4a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c4a5:	39 d7                	cmp    edi,edx
c001c4a7:	72 13                	jb     c001c4bc <__udivdi3+0xec>
c001c4a9:	74 09                	je     c001c4b4 <__udivdi3+0xe4>
c001c4ab:	89 f0                	mov    eax,esi
c001c4ad:	31 db                	xor    ebx,ebx
c001c4af:	e9 43 ff ff ff       	jmp    c001c3f7 <__udivdi3+0x27>
c001c4b4:	88 d9                	mov    cl,bl
c001c4b6:	d3 e5                	shl    ebp,cl
c001c4b8:	39 c5                	cmp    ebp,eax
c001c4ba:	73 ef                	jae    c001c4ab <__udivdi3+0xdb>
c001c4bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c4bf:	31 db                	xor    ebx,ebx
c001c4c1:	e9 31 ff ff ff       	jmp    c001c3f7 <__udivdi3+0x27>
c001c4c6:	66 90                	xchg   ax,ax
c001c4c8:	31 c0                	xor    eax,eax
c001c4ca:	e9 28 ff ff ff       	jmp    c001c3f7 <__udivdi3+0x27>
c001c4cf:	90                   	nop

c001c4d0 <__umoddi3>:
c001c4d0:	55                   	push   ebp
c001c4d1:	57                   	push   edi
c001c4d2:	56                   	push   esi
c001c4d3:	53                   	push   ebx
c001c4d4:	83 ec 1c             	sub    esp,0x1c
c001c4d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c4e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c4e7:	89 da                	mov    edx,ebx
c001c4e9:	85 c0                	test   eax,eax
c001c4eb:	75 37                	jne    c001c524 <__umoddi3+0x54>
c001c4ed:	39 df                	cmp    edi,ebx
c001c4ef:	76 13                	jbe    c001c504 <__umoddi3+0x34>
c001c4f1:	89 f0                	mov    eax,esi
c001c4f3:	f7 f7                	div    edi
c001c4f5:	89 d0                	mov    eax,edx
c001c4f7:	31 d2                	xor    edx,edx
c001c4f9:	83 c4 1c             	add    esp,0x1c
c001c4fc:	5b                   	pop    ebx
c001c4fd:	5e                   	pop    esi
c001c4fe:	5f                   	pop    edi
c001c4ff:	5d                   	pop    ebp
c001c500:	c3                   	ret    
c001c501:	8d 76 00             	lea    esi,[esi+0x0]
c001c504:	89 fd                	mov    ebp,edi
c001c506:	85 ff                	test   edi,edi
c001c508:	75 0b                	jne    c001c515 <__umoddi3+0x45>
c001c50a:	b8 01 00 00 00       	mov    eax,0x1
c001c50f:	31 d2                	xor    edx,edx
c001c511:	f7 f7                	div    edi
c001c513:	89 c5                	mov    ebp,eax
c001c515:	89 d8                	mov    eax,ebx
c001c517:	31 d2                	xor    edx,edx
c001c519:	f7 f5                	div    ebp
c001c51b:	89 f0                	mov    eax,esi
c001c51d:	f7 f5                	div    ebp
c001c51f:	89 d0                	mov    eax,edx
c001c521:	eb d4                	jmp    c001c4f7 <__umoddi3+0x27>
c001c523:	90                   	nop
c001c524:	89 f1                	mov    ecx,esi
c001c526:	39 d8                	cmp    eax,ebx
c001c528:	76 0a                	jbe    c001c534 <__umoddi3+0x64>
c001c52a:	89 f0                	mov    eax,esi
c001c52c:	83 c4 1c             	add    esp,0x1c
c001c52f:	5b                   	pop    ebx
c001c530:	5e                   	pop    esi
c001c531:	5f                   	pop    edi
c001c532:	5d                   	pop    ebp
c001c533:	c3                   	ret    
c001c534:	0f bd e8             	bsr    ebp,eax
c001c537:	83 f5 1f             	xor    ebp,0x1f
c001c53a:	75 1c                	jne    c001c558 <__umoddi3+0x88>
c001c53c:	39 d8                	cmp    eax,ebx
c001c53e:	72 04                	jb     c001c544 <__umoddi3+0x74>
c001c540:	39 f7                	cmp    edi,esi
c001c542:	77 08                	ja     c001c54c <__umoddi3+0x7c>
c001c544:	89 da                	mov    edx,ebx
c001c546:	29 fe                	sub    esi,edi
c001c548:	19 c2                	sbb    edx,eax
c001c54a:	89 f1                	mov    ecx,esi
c001c54c:	89 c8                	mov    eax,ecx
c001c54e:	83 c4 1c             	add    esp,0x1c
c001c551:	5b                   	pop    ebx
c001c552:	5e                   	pop    esi
c001c553:	5f                   	pop    edi
c001c554:	5d                   	pop    ebp
c001c555:	c3                   	ret    
c001c556:	66 90                	xchg   ax,ax
c001c558:	ba 20 00 00 00       	mov    edx,0x20
c001c55d:	29 ea                	sub    edx,ebp
c001c55f:	89 e9                	mov    ecx,ebp
c001c561:	d3 e0                	shl    eax,cl
c001c563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c567:	89 f8                	mov    eax,edi
c001c569:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c56d:	88 d1                	mov    cl,dl
c001c56f:	d3 e8                	shr    eax,cl
c001c571:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c575:	09 c1                	or     ecx,eax
c001c577:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c57b:	89 e9                	mov    ecx,ebp
c001c57d:	d3 e7                	shl    edi,cl
c001c57f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c583:	89 d8                	mov    eax,ebx
c001c585:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c589:	88 d1                	mov    cl,dl
c001c58b:	d3 e8                	shr    eax,cl
c001c58d:	89 c7                	mov    edi,eax
c001c58f:	89 e9                	mov    ecx,ebp
c001c591:	d3 e3                	shl    ebx,cl
c001c593:	89 f0                	mov    eax,esi
c001c595:	88 d1                	mov    cl,dl
c001c597:	d3 e8                	shr    eax,cl
c001c599:	09 d8                	or     eax,ebx
c001c59b:	89 e9                	mov    ecx,ebp
c001c59d:	d3 e6                	shl    esi,cl
c001c59f:	89 f3                	mov    ebx,esi
c001c5a1:	89 fa                	mov    edx,edi
c001c5a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c5a7:	89 d1                	mov    ecx,edx
c001c5a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c5ad:	89 c6                	mov    esi,eax
c001c5af:	89 d7                	mov    edi,edx
c001c5b1:	39 d1                	cmp    ecx,edx
c001c5b3:	72 27                	jb     c001c5dc <__umoddi3+0x10c>
c001c5b5:	74 21                	je     c001c5d8 <__umoddi3+0x108>
c001c5b7:	89 ca                	mov    edx,ecx
c001c5b9:	29 f3                	sub    ebx,esi
c001c5bb:	19 fa                	sbb    edx,edi
c001c5bd:	89 d0                	mov    eax,edx
c001c5bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c5c3:	d3 e0                	shl    eax,cl
c001c5c5:	89 e9                	mov    ecx,ebp
c001c5c7:	d3 eb                	shr    ebx,cl
c001c5c9:	09 d8                	or     eax,ebx
c001c5cb:	d3 ea                	shr    edx,cl
c001c5cd:	83 c4 1c             	add    esp,0x1c
c001c5d0:	5b                   	pop    ebx
c001c5d1:	5e                   	pop    esi
c001c5d2:	5f                   	pop    edi
c001c5d3:	5d                   	pop    ebp
c001c5d4:	c3                   	ret    
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	39 c3                	cmp    ebx,eax
c001c5da:	73 db                	jae    c001c5b7 <__umoddi3+0xe7>
c001c5dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c5e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c5e4:	89 d7                	mov    edi,edx
c001c5e6:	89 c6                	mov    esi,eax
c001c5e8:	eb cd                	jmp    c001c5b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c5ea <_init>:
c001c5ea:	55                   	push   ebp
c001c5eb:	89 e5                	mov    ebp,esp
c001c5ed:	e8 26 3b fe ff       	call   c0000118 <frame_dummy>
c001c5f2:	e8 e5 fa ff ff       	call   c001c0dc <__do_global_ctors_aux>
c001c5f7:	5d                   	pop    ebp
c001c5f8:	c3                   	ret    

Disassembly of section .fini:

c001c5f9 <_fini>:
c001c5f9:	55                   	push   ebp
c001c5fa:	89 e5                	mov    ebp,esp
c001c5fc:	e8 a7 3a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c601:	5d                   	pop    ebp
c001c602:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c604 <Computer::~Computer()>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	ba 00 d9 01 c0       	mov    edx,0xc001d900
c001c60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c610:	89 10                	mov    DWORD PTR [eax],edx
c001c612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c616:	83 ec 0c             	sub    esp,0xc
c001c619:	50                   	push   eax
c001c61a:	e8 7b f4 fe ff       	call   c000ba9a <Device::~Device()>
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	90                   	nop
c001c623:	83 c4 0c             	add    esp,0xc
c001c626:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c628 <Computer::~Computer()>:
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	83 ec 0c             	sub    esp,0xc
c001c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c632:	e8 cd ff ff ff       	call   c001c604 <Computer::~Computer()>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	83 ec 08             	sub    esp,0x8
c001c63d:	68 70 01 00 00       	push   0x170
c001c642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c646:	e8 17 e0 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	83 c4 0c             	add    esp,0xc
c001c651:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c652 <idleCommon()>:
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	fa                   	cli    
c001c656:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001c65c:	e8 9b 6f ff ff       	call   c00135fc <schedule()>
c001c661:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001c666:	48                   	dec    eax
c001c667:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001c66c:	75 01                	jne    c001c66f <idleCommon()+0x1d>
c001c66e:	fb                   	sti    
c001c66f:	83 c4 0c             	add    esp,0xc
c001c672:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c674 <LinkedList<UnixFile>::~LinkedList()>:
c001c674:	90                   	nop
c001c675:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c676 <LinkedList<UnixFile>::LinkedList()>:
c001c676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c67a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c684:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c68b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c68f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6b6:	90                   	nop
c001c6b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c6b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6c0:	75 10                	jne    c001c6d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c6c2:	83 ec 0c             	sub    esp,0xc
c001c6c5:	68 54 db 01 c0       	push   0xc001db54
c001c6ca:	e8 d8 3b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d8:	85 c0                	test   eax,eax
c001c6da:	74 34                	je     c001c710 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e3:	85 c0                	test   eax,eax
c001c6e5:	74 29                	je     c001c710 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c707:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c70e:	eb 65                	jmp    c001c775 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c714:	8b 00                	mov    eax,DWORD PTR [eax]
c001c716:	85 c0                	test   eax,eax
c001c718:	75 4b                	jne    c001c765 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c721:	85 c0                	test   eax,eax
c001c723:	75 40                	jne    c001c765 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c729:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c72d:	89 10                	mov    DWORD PTR [eax],edx
c001c72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c733:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c74f:	85 c0                	test   eax,eax
c001c751:	74 22                	je     c001c775 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c753:	83 ec 0c             	sub    esp,0xc
c001c756:	68 76 db 01 c0       	push   0xc001db76
c001c75b:	e8 47 3b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c760:	83 c4 10             	add    esp,0x10
c001c763:	eb 10                	jmp    c001c775 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c765:	83 ec 0c             	sub    esp,0xc
c001c768:	68 80 db 01 c0       	push   0xc001db80
c001c76d:	e8 35 3b ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c772:	83 c4 10             	add    esp,0x10
c001c775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c779:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c77c:	8d 50 01             	lea    edx,[eax+0x1]
c001c77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c783:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c786:	90                   	nop
c001c787:	83 c4 0c             	add    esp,0xc
c001c78a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c78c <LinkedList<UnixFile>::getFirstElement()>:
c001c78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c790:	8b 00                	mov    eax,DWORD PTR [eax]
c001c792:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c794 <LinkedList<UnixFile>::removeFirst()>:
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c79d:	85 c0                	test   eax,eax
c001c79f:	75 12                	jne    c001c7b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	68 8c db 01 c0       	push   0xc001db8c
c001c7a9:	e8 f9 3a ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	eb 7e                	jmp    c001c831 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7bd:	85 c0                	test   eax,eax
c001c7bf:	74 10                	je     c001c7d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c7c1:	83 ec 0c             	sub    esp,0xc
c001c7c4:	68 d7 db 01 c0       	push   0xc001dbd7
c001c7c9:	e8 d9 3a ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c7ce:	83 c4 10             	add    esp,0x10
c001c7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7da:	85 c0                	test   eax,eax
c001c7dc:	75 33                	jne    c001c811 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7fa:	83 f8 01             	cmp    eax,0x1
c001c7fd:	74 21                	je     c001c820 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c7ff:	83 ec 0c             	sub    esp,0xc
c001c802:	68 b0 db 01 c0       	push   0xc001dbb0
c001c807:	e8 9b 3a ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	eb 0f                	jmp    c001c820 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c815:	8b 00                	mov    eax,DWORD PTR [eax]
c001c817:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81e:	89 10                	mov    DWORD PTR [eax],edx
c001c820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c824:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c827:	8d 50 ff             	lea    edx,[eax-0x1]
c001c82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c831:	83 c4 0c             	add    esp,0xc
c001c834:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c836 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c83a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c83d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c83e <DriverlessDevice::~DriverlessDevice()>:
c001c83e:	ba 1c e2 01 c0       	mov    edx,0xc001e21c
c001c843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c847:	89 10                	mov    DWORD PTR [eax],edx
c001c849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c84d:	50                   	push   eax
c001c84e:	e8 47 f2 fe ff       	call   c000ba9a <Device::~Device()>
c001c853:	83 c4 04             	add    esp,0x4
c001c856:	90                   	nop
c001c857:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c858 <DriverlessDevice::~DriverlessDevice()>:
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	83 ec 0c             	sub    esp,0xc
c001c85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c862:	e8 d7 ff ff ff       	call   c001c83e <DriverlessDevice::~DriverlessDevice()>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	83 ec 08             	sub    esp,0x8
c001c86d:	68 58 01 00 00       	push   0x158
c001c872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c876:	e8 e7 dd fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	83 c4 0c             	add    esp,0xc
c001c881:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c882 <LinkedList<Device>::addElement(Device*)>:
c001c882:	83 ec 0c             	sub    esp,0xc
c001c885:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c88a:	75 10                	jne    c001c89c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c88c:	83 ec 0c             	sub    esp,0xc
c001c88f:	68 54 db 01 c0       	push   0xc001db54
c001c894:	e8 0e 3a ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c899:	83 c4 10             	add    esp,0x10
c001c89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8a2:	85 c0                	test   eax,eax
c001c8a4:	74 3a                	je     c001c8e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ad:	85 c0                	test   eax,eax
c001c8af:	74 2f                	je     c001c8e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c8de:	eb 68                	jmp    c001c948 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8e6:	85 c0                	test   eax,eax
c001c8e8:	75 4e                	jne    c001c938 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f1:	85 c0                	test   eax,eax
c001c8f3:	75 43                	jne    c001c938 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8fd:	89 10                	mov    DWORD PTR [eax],edx
c001c8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c907:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c911:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c922:	85 c0                	test   eax,eax
c001c924:	74 22                	je     c001c948 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	68 76 db 01 c0       	push   0xc001db76
c001c92e:	e8 74 39 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c933:	83 c4 10             	add    esp,0x10
c001c936:	eb 10                	jmp    c001c948 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	68 80 db 01 c0       	push   0xc001db80
c001c940:	e8 62 39 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c94f:	8d 50 01             	lea    edx,[eax+0x1]
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c959:	90                   	nop
c001c95a:	83 c4 0c             	add    esp,0xc
c001c95d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c95e <LinkedList<Device>::LinkedList()>:
c001c95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c962:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c96c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c977:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c982:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c99e:	90                   	nop
c001c99f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c9a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9a6:	85 c0                	test   eax,eax
c001c9a8:	75 0e                	jne    c001c9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	75 03                	jne    c001c9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c9b5:	b0 01                	mov    al,0x1
c001c9b7:	c3                   	ret    
c001c9b8:	b0 00                	mov    al,0x0
c001c9ba:	90                   	nop
c001c9bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c9bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c9c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9cd:	85 c0                	test   eax,eax
c001c9cf:	75 17                	jne    c001c9e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c9d1:	83 ec 0c             	sub    esp,0xc
c001c9d4:	68 8c db 01 c0       	push   0xc001db8c
c001c9d9:	e8 c9 38 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001c9de:	83 c4 10             	add    esp,0x10
c001c9e1:	e9 92 00 00 00       	jmp    c001ca78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c9e6:	66 90                	xchg   ax,ax
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c9f2:	85 c0                	test   eax,eax
c001c9f4:	0f 95 c0             	setne  al
c001c9f7:	84 c0                	test   al,al
c001c9f9:	74 11                	je     c001ca0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c9fb:	83 ec 0c             	sub    esp,0xc
c001c9fe:	68 d7 db 01 c0       	push   0xc001dbd7
c001ca03:	e8 9f 38 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	90                   	nop
c001ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 94 c0             	sete   al
c001ca1a:	84 c0                	test   al,al
c001ca1c:	74 36                	je     c001ca54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001ca1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca3a:	83 f8 01             	cmp    eax,0x1
c001ca3d:	74 25                	je     c001ca64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001ca3f:	83 ec 0c             	sub    esp,0xc
c001ca42:	68 b0 db 01 c0       	push   0xc001dbb0
c001ca47:	e8 5b 38 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001ca4c:	83 c4 10             	add    esp,0x10
c001ca4f:	eb 13                	jmp    c001ca64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001ca51:	8d 76 00             	lea    esi,[esi+0x0]
c001ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca5a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ca5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca61:	89 10                	mov    DWORD PTR [eax],edx
c001ca63:	90                   	nop
c001ca64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca6b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca75:	8d 76 00             	lea    esi,[esi+0x0]
c001ca78:	83 c4 0c             	add    esp,0xc
c001ca7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ca7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ca84:	75 12                	jne    c001ca98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	68 54 db 01 c0       	push   0xc001db54
c001ca8e:	e8 14 38 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	66 90                	xchg   ax,ax
c001ca98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca9e:	85 c0                	test   eax,eax
c001caa0:	74 36                	je     c001cad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001caa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001caa9:	85 c0                	test   eax,eax
c001caab:	74 2b                	je     c001cad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001caad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cab8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001cabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cac3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cacd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cad4:	eb 6a                	jmp    c001cb40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cad6:	66 90                	xchg   ax,ax
c001cad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cadc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cade:	85 c0                	test   eax,eax
c001cae0:	75 4e                	jne    c001cb30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cae9:	85 c0                	test   eax,eax
c001caeb:	75 43                	jne    c001cb30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001caed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caf5:	89 10                	mov    DWORD PTR [eax],edx
c001caf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001caff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb17:	85 c0                	test   eax,eax
c001cb19:	74 25                	je     c001cb40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cb1b:	83 ec 0c             	sub    esp,0xc
c001cb1e:	68 76 db 01 c0       	push   0xc001db76
c001cb23:	e8 7f 37 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	eb 13                	jmp    c001cb40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	68 80 db 01 c0       	push   0xc001db80
c001cb38:	e8 6a 37 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001cb3d:	83 c4 10             	add    esp,0x10
c001cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb47:	8d 50 01             	lea    edx,[eax+0x1]
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cb51:	90                   	nop
c001cb52:	83 c4 0c             	add    esp,0xc
c001cb55:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001cb58 <ACPI::~ACPI()>:
c001cb58:	83 ec 0c             	sub    esp,0xc
c001cb5b:	ba 84 e7 01 c0       	mov    edx,0xc001e784
c001cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb64:	89 10                	mov    DWORD PTR [eax],edx
c001cb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb6a:	83 ec 0c             	sub    esp,0xc
c001cb6d:	50                   	push   eax
c001cb6e:	e8 27 ef fe ff       	call   c000ba9a <Device::~Device()>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	90                   	nop
c001cb77:	83 c4 0c             	add    esp,0xc
c001cb7a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001cb7c <ACPI::~ACPI()>:
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	83 ec 0c             	sub    esp,0xc
c001cb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb86:	e8 cd ff ff ff       	call   c001cb58 <ACPI::~ACPI()>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	83 ec 08             	sub    esp,0x8
c001cb91:	68 64 12 00 00       	push   0x1264
c001cb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb9a:	e8 c3 da fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	83 c4 0c             	add    esp,0xc
c001cba5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001cba8 <LinkedList<Device>::~LinkedList()>:
c001cba8:	90                   	nop
c001cba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001cbac <LinkedList<Device>::isEmpty()>:
c001cbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbb2:	85 c0                	test   eax,eax
c001cbb4:	75 0e                	jne    c001cbc4 <LinkedList<Device>::isEmpty()+0x18>
c001cbb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbbd:	85 c0                	test   eax,eax
c001cbbf:	75 03                	jne    c001cbc4 <LinkedList<Device>::isEmpty()+0x18>
c001cbc1:	b0 01                	mov    al,0x1
c001cbc3:	c3                   	ret    
c001cbc4:	b0 00                	mov    al,0x0
c001cbc6:	90                   	nop
c001cbc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001cbc8 <LinkedList<Device>::getFirstElement()>:
c001cbc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001cbd0 <LinkedList<Device>::removeFirst()>:
c001cbd0:	83 ec 0c             	sub    esp,0xc
c001cbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd7:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	75 17                	jne    c001cbf4 <LinkedList<Device>::removeFirst()+0x24>
c001cbdd:	83 ec 0c             	sub    esp,0xc
c001cbe0:	68 8c db 01 c0       	push   0xc001db8c
c001cbe5:	e8 bd 36 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001cbea:	83 c4 10             	add    esp,0x10
c001cbed:	e9 92 00 00 00       	jmp    c001cc84 <LinkedList<Device>::removeFirst()+0xb4>
c001cbf2:	66 90                	xchg   ax,ax
c001cbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbfb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001cc01:	85 c0                	test   eax,eax
c001cc03:	74 13                	je     c001cc18 <LinkedList<Device>::removeFirst()+0x48>
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	68 d7 db 01 c0       	push   0xc001dbd7
c001cc0d:	e8 95 36 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001cc12:	83 c4 10             	add    esp,0x10
c001cc15:	8d 76 00             	lea    esi,[esi+0x0]
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc1e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001cc24:	85 c0                	test   eax,eax
c001cc26:	75 34                	jne    c001cc5c <LinkedList<Device>::removeFirst()+0x8c>
c001cc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc44:	83 f8 01             	cmp    eax,0x1
c001cc47:	74 27                	je     c001cc70 <LinkedList<Device>::removeFirst()+0xa0>
c001cc49:	83 ec 0c             	sub    esp,0xc
c001cc4c:	68 b0 db 01 c0       	push   0xc001dbb0
c001cc51:	e8 51 36 ff ff       	call   c00102a7 <Krnl::panic(char const*)>
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	eb 15                	jmp    c001cc70 <LinkedList<Device>::removeFirst()+0xa0>
c001cc5b:	90                   	nop
c001cc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc60:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc62:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	89 10                	mov    DWORD PTR [eax],edx
c001cc6e:	66 90                	xchg   ax,ax
c001cc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc77:	8d 50 ff             	lea    edx,[eax-0x1]
c001cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc81:	8d 76 00             	lea    esi,[esi+0x0]
c001cc84:	83 c4 0c             	add    esp,0xc
c001cc87:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cc88 <CPU::~CPU()>:
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	ba 20 e9 01 c0       	mov    edx,0xc001e920
c001cc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc94:	89 10                	mov    DWORD PTR [eax],edx
c001cc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	50                   	push   eax
c001cc9e:	e8 f7 ed fe ff       	call   c000ba9a <Device::~Device()>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	90                   	nop
c001cca7:	83 c4 0c             	add    esp,0xc
c001ccaa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ccac <CPU::~CPU()>:
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	83 ec 0c             	sub    esp,0xc
c001ccb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb6:	e8 cd ff ff ff       	call   c001cc88 <CPU::~CPU()>
c001ccbb:	83 c4 10             	add    esp,0x10
c001ccbe:	83 ec 08             	sub    esp,0x8
c001ccc1:	68 94 11 00 00       	push   0x1194
c001ccc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccca:	e8 93 d9 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	83 c4 0c             	add    esp,0xc
c001ccd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ccd8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ccd8:	90                   	nop
c001ccd9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ccdc <ThreadControlBlock::ThreadControlBlock()>:
c001ccdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cce0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cce7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cceb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ccf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ccfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd01:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cd08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd0c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cd13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd17:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cd1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd1f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cd23:	90                   	nop
c001cd24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cd28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cd68:	90                   	nop
c001cd69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cd6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cd6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cd73:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cd74 <PCI::~PCI()>:
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c001cd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd80:	89 10                	mov    DWORD PTR [eax],edx
c001cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	50                   	push   eax
c001cd8a:	e8 95 e7 fe ff       	call   c000b524 <Bus::~Bus()>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	90                   	nop
c001cd93:	83 c4 0c             	add    esp,0xc
c001cd96:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cd98 <PCI::~PCI()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	83 ec 0c             	sub    esp,0xc
c001cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda2:	e8 cd ff ff ff       	call   c001cd74 <PCI::~PCI()>
c001cda7:	83 c4 10             	add    esp,0x10
c001cdaa:	83 ec 08             	sub    esp,0x8
c001cdad:	68 5c 01 00 00       	push   0x15c
c001cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb6:	e8 a7 d8 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cdc2 <IDE::~IDE()>:
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c001cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdce:	89 10                	mov    DWORD PTR [eax],edx
c001cdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	50                   	push   eax
c001cdd8:	e8 37 f1 fe ff       	call   c000bf14 <HardDiskController::~HardDiskController()>
c001cddd:	83 c4 10             	add    esp,0x10
c001cde0:	90                   	nop
c001cde1:	83 c4 0c             	add    esp,0xc
c001cde4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cde6 <IDE::~IDE()>:
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	83 ec 0c             	sub    esp,0xc
c001cdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf0:	e8 cd ff ff ff       	call   c001cdc2 <IDE::~IDE()>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	83 ec 08             	sub    esp,0x8
c001cdfb:	68 70 02 00 00       	push   0x270
c001ce00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce04:	e8 59 d8 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	83 c4 0c             	add    esp,0xc
c001ce0f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ce10 <SATABus::~SATABus()>:
c001ce10:	83 ec 0c             	sub    esp,0xc
c001ce13:	ba 04 f5 01 c0       	mov    edx,0xc001f504
c001ce18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1c:	89 10                	mov    DWORD PTR [eax],edx
c001ce1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce22:	83 ec 0c             	sub    esp,0xc
c001ce25:	50                   	push   eax
c001ce26:	e8 e9 f0 fe ff       	call   c000bf14 <HardDiskController::~HardDiskController()>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	90                   	nop
c001ce2f:	83 c4 0c             	add    esp,0xc
c001ce32:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ce34 <SATABus::~SATABus()>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	83 ec 0c             	sub    esp,0xc
c001ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce3e:	e8 cd ff ff ff       	call   c001ce10 <SATABus::~SATABus()>
c001ce43:	83 c4 10             	add    esp,0x10
c001ce46:	83 ec 08             	sub    esp,0x8
c001ce49:	68 64 01 00 00       	push   0x164
c001ce4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce52:	e8 0b d8 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001ce57:	83 c4 10             	add    esp,0x10
c001ce5a:	83 c4 0c             	add    esp,0xc
c001ce5d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ce5e <ATA::~ATA()>:
c001ce5e:	83 ec 0c             	sub    esp,0xc
c001ce61:	ba 44 f5 01 c0       	mov    edx,0xc001f544
c001ce66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6a:	89 10                	mov    DWORD PTR [eax],edx
c001ce6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	50                   	push   eax
c001ce74:	e8 7d f1 fe ff       	call   c000bff6 <PhysicalDisk::~PhysicalDisk()>
c001ce79:	83 c4 10             	add    esp,0x10
c001ce7c:	90                   	nop
c001ce7d:	83 c4 0c             	add    esp,0xc
c001ce80:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ce82 <ATA::~ATA()>:
c001ce82:	83 ec 0c             	sub    esp,0xc
c001ce85:	83 ec 0c             	sub    esp,0xc
c001ce88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce8c:	e8 cd ff ff ff       	call   c001ce5e <ATA::~ATA()>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	83 ec 08             	sub    esp,0x8
c001ce97:	68 7c 01 00 00       	push   0x17c
c001ce9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea0:	e8 bd d7 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cea5:	83 c4 10             	add    esp,0x10
c001cea8:	83 c4 0c             	add    esp,0xc
c001ceab:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ceac <ATAPI::~ATAPI()>:
c001ceac:	83 ec 0c             	sub    esp,0xc
c001ceaf:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001ceb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb8:	89 10                	mov    DWORD PTR [eax],edx
c001ceba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cebe:	83 ec 0c             	sub    esp,0xc
c001cec1:	50                   	push   eax
c001cec2:	e8 2f f1 fe ff       	call   c000bff6 <PhysicalDisk::~PhysicalDisk()>
c001cec7:	83 c4 10             	add    esp,0x10
c001ceca:	90                   	nop
c001cecb:	83 c4 0c             	add    esp,0xc
c001cece:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ced0 <ATAPI::~ATAPI()>:
c001ced0:	83 ec 0c             	sub    esp,0xc
c001ced3:	83 ec 0c             	sub    esp,0xc
c001ced6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceda:	e8 cd ff ff ff       	call   c001ceac <ATAPI::~ATAPI()>
c001cedf:	83 c4 10             	add    esp,0x10
c001cee2:	83 ec 08             	sub    esp,0x8
c001cee5:	68 84 01 00 00       	push   0x184
c001ceea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceee:	e8 6f d7 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cef3:	83 c4 10             	add    esp,0x10
c001cef6:	83 c4 0c             	add    esp,0xc
c001cef9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cefa <SATA::~SATA()>:
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001cf02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf06:	89 10                	mov    DWORD PTR [eax],edx
c001cf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	50                   	push   eax
c001cf10:	e8 e1 f0 fe ff       	call   c000bff6 <PhysicalDisk::~PhysicalDisk()>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	90                   	nop
c001cf19:	83 c4 0c             	add    esp,0xc
c001cf1c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cf1e <SATA::~SATA()>:
c001cf1e:	83 ec 0c             	sub    esp,0xc
c001cf21:	83 ec 0c             	sub    esp,0xc
c001cf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf28:	e8 cd ff ff ff       	call   c001cefa <SATA::~SATA()>
c001cf2d:	83 c4 10             	add    esp,0x10
c001cf30:	83 ec 08             	sub    esp,0x8
c001cf33:	68 7c 01 00 00       	push   0x17c
c001cf38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3c:	e8 21 d7 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	83 c4 0c             	add    esp,0xc
c001cf47:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cf48 <SATAPI::~SATAPI()>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c001cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf54:	89 10                	mov    DWORD PTR [eax],edx
c001cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5a:	83 ec 0c             	sub    esp,0xc
c001cf5d:	50                   	push   eax
c001cf5e:	e8 93 f0 fe ff       	call   c000bff6 <PhysicalDisk::~PhysicalDisk()>
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	90                   	nop
c001cf67:	83 c4 0c             	add    esp,0xc
c001cf6a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cf6c <SATAPI::~SATAPI()>:
c001cf6c:	83 ec 0c             	sub    esp,0xc
c001cf6f:	83 ec 0c             	sub    esp,0xc
c001cf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf76:	e8 cd ff ff ff       	call   c001cf48 <SATAPI::~SATAPI()>
c001cf7b:	83 c4 10             	add    esp,0x10
c001cf7e:	83 ec 08             	sub    esp,0x8
c001cf81:	68 84 01 00 00       	push   0x184
c001cf86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf8a:	e8 d3 d6 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	83 c4 0c             	add    esp,0xc
c001cf95:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cf96 <IOAPIC::~IOAPIC()>:
c001cf96:	83 ec 0c             	sub    esp,0xc
c001cf99:	ba 10 f8 01 c0       	mov    edx,0xc001f810
c001cf9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa2:	89 10                	mov    DWORD PTR [eax],edx
c001cfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa8:	83 ec 0c             	sub    esp,0xc
c001cfab:	50                   	push   eax
c001cfac:	e8 e9 ea fe ff       	call   c000ba9a <Device::~Device()>
c001cfb1:	83 c4 10             	add    esp,0x10
c001cfb4:	90                   	nop
c001cfb5:	83 c4 0c             	add    esp,0xc
c001cfb8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cfba <IOAPIC::~IOAPIC()>:
c001cfba:	83 ec 0c             	sub    esp,0xc
c001cfbd:	83 ec 0c             	sub    esp,0xc
c001cfc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc4:	e8 cd ff ff ff       	call   c001cf96 <IOAPIC::~IOAPIC()>
c001cfc9:	83 c4 10             	add    esp,0x10
c001cfcc:	83 ec 08             	sub    esp,0x8
c001cfcf:	68 68 01 00 00       	push   0x168
c001cfd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd8:	e8 85 d6 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	83 c4 0c             	add    esp,0xc
c001cfe3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cfe4 <APICTimer::~APICTimer()>:
c001cfe4:	83 ec 0c             	sub    esp,0xc
c001cfe7:	ba 58 f8 01 c0       	mov    edx,0xc001f858
c001cfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff0:	89 10                	mov    DWORD PTR [eax],edx
c001cff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff6:	83 ec 0c             	sub    esp,0xc
c001cff9:	50                   	push   eax
c001cffa:	e8 99 03 ff ff       	call   c000d398 <Timer::~Timer()>
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	90                   	nop
c001d003:	83 c4 0c             	add    esp,0xc
c001d006:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d008 <APICTimer::~APICTimer()>:
c001d008:	83 ec 0c             	sub    esp,0xc
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d012:	e8 cd ff ff ff       	call   c001cfe4 <APICTimer::~APICTimer()>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	83 ec 08             	sub    esp,0x8
c001d01d:	68 60 01 00 00       	push   0x160
c001d022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d026:	e8 37 d6 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	83 c4 0c             	add    esp,0xc
c001d031:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d034 <PIT::~PIT()>:
c001d034:	83 ec 0c             	sub    esp,0xc
c001d037:	ba a8 f8 01 c0       	mov    edx,0xc001f8a8
c001d03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d040:	89 10                	mov    DWORD PTR [eax],edx
c001d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	50                   	push   eax
c001d04a:	e8 49 03 ff ff       	call   c000d398 <Timer::~Timer()>
c001d04f:	83 c4 10             	add    esp,0x10
c001d052:	90                   	nop
c001d053:	83 c4 0c             	add    esp,0xc
c001d056:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d058 <PIT::~PIT()>:
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	83 ec 0c             	sub    esp,0xc
c001d05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d062:	e8 cd ff ff ff       	call   c001d034 <PIT::~PIT()>
c001d067:	83 c4 10             	add    esp,0x10
c001d06a:	83 ec 08             	sub    esp,0x8
c001d06d:	68 5c 01 00 00       	push   0x15c
c001d072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d076:	e8 e7 d5 fe ff       	call   c000a662 <operator delete(void*, unsigned long)>
c001d07b:	83 c4 10             	add    esp,0x10
c001d07e:	83 c4 0c             	add    esp,0xc
c001d081:	c3                   	ret    
