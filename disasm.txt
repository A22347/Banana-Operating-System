
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ad 9d 00 00       	call   c0009dcd <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b5 26 02 00       	call   c00226da <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 32 02 c0       	mov    ebx,0xc0023222
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 32 02 c0    	cmp    ebx,0xc0023230
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 76 02 c0       	mov    eax,0xc00276d8
c0000049:	3d d8 76 02 c0       	cmp    eax,0xc00276d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 76 02 c0       	push   0xc00276d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 76 02 c0       	mov    eax,0xc00276d8
c0000075:	2d d8 76 02 c0       	sub    eax,0xc00276d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 76 02 c0       	push   0xc00276d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 78 02 c0 00 	cmp    BYTE PTR ds:0xc0027860,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 32 02 c0       	mov    ebx,0xc0023238
c00000bb:	81 eb 34 32 02 c0    	sub    ebx,0xc0023234
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 32 02 c0       	mov    esi,0xc0023234
c00000ca:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 76 02 c0       	push   0xc00276d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 78 02 c0 01 	mov    BYTE PTR ds:0xc0027860,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 78 02 c0       	push   0xc0027868
c000012c:	68 d8 76 02 c0       	push   0xc00276d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 b8 79 01 00       	call   c0017c88 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 98 ca 00 00       	call   c000cd80 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 96 79 01 00       	call   c0017c88 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 73 7e 01 00       	call   c0018184 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 b6 84 01 00       	call   c00187d0 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 7c 02 c0 	lgdtd  ds:0xc0027cb0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 4a e7 00 00       	call   c000ec59 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 80 78 02 c0       	mov    ds:0xc0027880,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 80 78 02 c0    	mov    DWORD PTR ds:0xc0027880,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 80 78 02 c0    	mov    ebx,DWORD PTR ds:0xc0027880
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 40 32 02 c0 02 	test   BYTE PTR [edx-0x3ffdcdc0],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 40 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcdc0],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 40 32 02 c0 08 	test   BYTE PTR [edx-0x3ffdcdc0],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 40 32 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcdc0],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 40 32 02 c0 01 	test   BYTE PTR [edx-0x3ffdcdc0],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d a0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278a0
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 a4 78 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd875c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 a4 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd875c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 cc 78 02 c0    	cmp    DWORD PTR ds:0xc00278cc,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d dc 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278dc
c0000d64:	c7 42 0c d4 78 02 c0 	mov    DWORD PTR [edx+0xc],0xc00278d4
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 a0 78 02 c0 02 	test   BYTE PTR ds:0xc00278a0,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 8b 8d 00 00       	call   c0009bd0 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 cd 8c 00 00       	call   c0009bd0 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 b7 8c 00 00       	call   c0009bd0 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 93 8c 00 00       	call   c0009bd0 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d a0 78 02 c0    	mov    edi,DWORD PTR ds:0xc00278a0
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 a4 78 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd875c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 a4 78 02 c0 	mov    DWORD PTR [edx*4-0x3ffd875c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 d4 78 02 c0 	lea    edx,[eax*8-0x3ffd872c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d e0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278e0
c00010e6:	81 fb d4 78 02 c0    	cmp    ebx,0xc00278d4
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d d4 78 02 c0       	cmp    eax,0xc00278d4
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d d0 78 02 c0    	cmp    DWORD PTR ds:0xc00278d0,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 dc 78 02 c0       	mov    ds:0xc00278dc,eax
c0001122:	a3 e0 78 02 c0       	mov    ds:0xc00278e0,eax
c0001127:	a3 d0 78 02 c0       	mov    ds:0xc00278d0,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 d4 78 02 c0 	mov    DWORD PTR [eax+0x8],0xc00278d4
c0001135:	c7 40 0c d4 78 02 c0 	mov    DWORD PTR [eax+0xc],0xc00278d4
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 e0 78 02 c0       	mov    ds:0xc00278e0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 d4 78 02 c0 	mov    DWORD PTR [eax+0x8],0xc00278d4
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 98 78 02 c0 	lea    ebp,[edx*4-0x3ffd8768]
c0001186:	8b 14 95 a0 78 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8760]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 a0 78 02 c0 	lea    ecx,[edx*4-0x3ffd8760]
c00011a1:	8b 14 95 a0 78 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8760]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd d4 7b 02 c0 	or     DWORD PTR [edi*4-0x3ffd842c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 d4 78 02 c0 	lea    eax,[eax*8-0x3ffd872c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,ecx
c000125b:	89 0d e0 78 02 c0    	mov    DWORD PTR ds:0xc00278e0,ecx
c0001261:	c7 41 08 d4 78 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00278d4
c0001268:	c7 41 0c d4 78 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00278d4
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd cc 78 02 c0 	lea    edx,[ecx*8-0x3ffd8734]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d d4 7b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd842c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d d4 7b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd842c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 cc 78 02 c0 	lea    edx,[eax*4-0x3ffd8734]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d d4 7b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd842c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,edi
c000132e:	89 3d e0 78 02 c0    	mov    DWORD PTR ds:0xc00278e0,edi
c0001334:	c7 47 08 d4 78 02 c0 	mov    DWORD PTR [edi+0x8],0xc00278d4
c000133b:	c7 47 0c d4 78 02 c0 	mov    DWORD PTR [edi+0xc],0xc00278d4
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d d0 78 02 c0    	mov    DWORD PTR ds:0xc00278d0,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 cc 78 02 c0       	mov    eax,ds:0xc00278cc
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba a0 78 02 c0       	mov    edx,0xc00278a0
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d f4 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027bf4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 f4 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027bf4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d f4 7b 02 c0    	mov    DWORD PTR ds:0xc0027bf4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 cc 78 02 c0    	cmp    DWORD PTR ds:0xc00278cc,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 fc 7b 02 c0    	push   DWORD PTR ds:0xc0027bfc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 fc 7b 02 c0       	mov    eax,ds:0xc0027bfc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d cc 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278cc,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 cc 78 02 c0       	mov    eax,ds:0xc00278cc
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 a4 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd875c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 d4 78 02 c0       	mov    eax,0xc00278d4
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d cc 7b 02 c0       	cmp    eax,0xc0027bcc
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 08 7c 02 c0       	mov    eax,ds:0xc0027c08
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 f0 7b 02 c0    	mov    esi,DWORD PTR ds:0xc0027bf0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 04 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c04
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 14 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c14
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 44 33 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdccbc]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 a0 78 02 c0       	mov    eax,ds:0xc00278a0
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 a0 78 02 c0       	mov    ds:0xc00278a0,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d e4 7b 02 c0    	mov    DWORD PTR ds:0xc0027be4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d e8 7b 02 c0    	mov    DWORD PTR ds:0xc0027be8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d ec 7b 02 c0    	mov    DWORD PTR ds:0xc0027bec,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 f4 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027bf4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 ee 9c 01 00       	jmp    c001b80c <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 20 9d 01 00       	jmp    c001b854 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 49 9d 01 00       	jmp    c001b89c <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 8a 06 02 00       	call   c00224c0 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 60 34 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdcba0]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 60 34 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdcba0]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 60 33 02 c0       	mov    edx,0xc0023360
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 80 34 02 c0       	mov    edx,0xc0023480
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba 97 61 02 c0       	mov    edx,0xc0026197
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 70 34 02 c0       	mov    edx,0xc0023470
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 40 7c 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd83c0]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 20 7c 02 c0    	mov    ax,ds:0xc0027c20
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 20 7c 02 c0    	mov    ds:0xc0027c20,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 87 f4 01 00       	call   c00224c0 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 92 34 02 c0       	mov    eax,0xc0023492
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad e0 33 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdcc20]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 9b 34 02 c0       	mov    eax,0xc002349b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 60 34 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcba0]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 52 de 01 00       	call   c00224c0 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 70 34 02 c0       	mov    edx,0xc0023470
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 60 33 02 c0       	mov    edx,0xc0023360
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 70 33 02 c0       	mov    edx,0xc0023370
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 40 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd83c0]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 40 7c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd83c0],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 19 c8 01 00       	call   c00224c0 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 ff c7 01 00       	call   c00224c0 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 b7 33 02 c0       	mov    eax,0xc00233b7
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 b0 33 02 c0       	mov    eax,0xc00233b0
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 98 b3 01 00       	call   c00224c0 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 40 7c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd83c0]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be a0 33 02 c0       	mov    esi,0xc00233a0
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 0c ad 01 00       	call   c00224c0 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 80 34 02 c0       	mov    edx,0xc0023480
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 80 33 02 c0       	mov    edx,0xc0023380
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 90 33 02 c0       	mov    edx,0xc0023390
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba a2 34 02 c0       	mov    edx,0xc00234a2
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba ae 34 02 c0       	mov    edx,0xc00234ae
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba c2 34 02 c0       	mov    edx,0xc00234c2
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 3c 17 00 00       	call   c0009d07 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 34 17 00 00       	call   c0009d17 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c e0 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc00237e0
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 e0 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc00237e0
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 e0 35 02 c0       	mov    eax,0xc00235e0
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 20 35 02 c0       	mov    eax,0xc0023520
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 e0 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcb20]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 96 14 00 00       	jmp    c0009d07 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 b1 14 00 00       	jmp    c0009d27 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0008883:	48                   	dec    eax
c0008884:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000889a:	48                   	dec    eax
c000889b:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00088ab:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00088ba:	48                   	dec    eax
c00088bb:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00088d5:	e8 16 fb 00 00       	call   c00183f0 <schedule()>
c00088da:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00088df:	48                   	dec    eax
c00088e0:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 d4 7d 02 c0       	mov    eax,ds:0xc0027dd4
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 e0 38 02 c0       	push   0xc00238e0
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 a8 7c 02 c0       	mov    eax,0xc0027ca8
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 e9 38 02 c0       	push   0xc00238e9
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 c0 24 02 c0       	mov    eax,0xc00224c0
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 f3 38 02 c0       	push   0xc00238f3
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 f4 21 02 c0       	mov    eax,0xc00221f4
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 fc 38 02 c0       	push   0xc00238fc
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 c0 25 02 c0       	mov    eax,0xc00225c0
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 06 39 02 c0       	push   0xc0023906
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 40 23 02 c0       	mov    eax,0xc0022340
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 0f 39 02 c0       	push   0xc002390f
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 ac 7c 02 c0       	mov    eax,0xc0027cac
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 1c 39 02 c0       	push   0xc002391c
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 ad 7c 02 c0       	mov    eax,0xc0027cad
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 13 5c 00 00       	call   c000e650 <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 29 39 02 c0       	push   0xc0023929
c0008a6d:	e8 ef 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 40 39 02 c0 	mov    DWORD PTR [esp],0xc0023940
c0008a7a:	e8 e2 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 7c 12 00 00       	call   c0009d07 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0008a9a:	68 59 39 02 c0       	push   0xc0023959
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 25 f5 00 00       	call   c0017fcc <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 01 97 00 c0       	push   0xc0009701
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 18 f7 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 18 8c 01 c0       	push   0xc0018c18
c0008ac5:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0008acb:	e8 04 f7 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0008ad8:	68 a4 3b 02 c0       	push   0xc0023ba4
c0008add:	c6 05 ad 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027cad,0x1
c0008ae4:	e8 78 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 05 05 01 00       	call   c0018ff3 <Vm::initialise8086()>
c0008aee:	e8 b7 48 00 00       	call   c000d3aa <Fs::initVFS()>
c0008af3:	c7 04 24 66 39 02 c0 	mov    DWORD PTR [esp],0xc0023966
c0008afa:	e8 62 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 a4 3b 02 c0       	push   0xc0023ba4
c0008b1e:	e8 3e 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 fe dc 00 00       	call   c0016826 <Sys::loadSyscalls()>
c0008b28:	e8 3b c1 00 00       	call   c0014c68 <Krnl::loadSystemEnv()>
c0008b2d:	e8 8d c5 00 00       	call   c00150bf <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 80 39 02 c0       	push   0xc0023980
c0008b3c:	68 89 39 02 c0       	push   0xc0023989
c0008b41:	e8 a3 ca 00 00       	call   c00155e9 <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 ba 53 00 00       	call   c000df08 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 c8 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bc8
c0008b55:	e8 07 12 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 a5 5a 00 00       	call   c000e610 <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 91 39 02 c0 	mov    DWORD PTR [esp],0xc0023991
c0008b72:	e8 ea 11 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 54 bc 00 00       	call   c00147d0 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 ab 39 02 c0 	mov    DWORD PTR [esp],0xc00239ab
c0008b83:	e8 d9 11 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 bc 39 02 c0       	push   0xc00239bc
c0008b97:	e8 5a ee 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 82 f0 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 36 fa 00 00       	call   c00185e8 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 d8 39 02 c0       	push   0xc00239d8
c0008bc7:	50                   	push   eax
c0008bc8:	e8 fd 5a 00 00       	call   c000e6ca <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba 38 3c 02 c0       	mov    edx,0xc0023c38
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 c1 7c 02 c0 04 	test   BYTE PTR ds:0xc0027cc1,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 25 94 01 00       	call   c0022186 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 fa a5 00 00       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 d3 a5 00 00       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 b1 a5 00 00       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 8f a5 00 00       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 c0 7c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027cc0,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 9d a4 00 00       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 78 a4 00 00       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 8f 92 01 00       	call   c0022140 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 cc 91 01 00       	call   c00220a0 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 94 a4 00 00       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 e8 39 02 c0       	push   0xc00239e8
c0008f2d:	e8 e1 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 fb 39 02 c0       	push   0xc00239fb
c0008f50:	e8 be 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 0c 3a 02 c0       	push   0xc0023a0c
c0008f73:	e8 9b 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 1d 3a 02 c0       	push   0xc0023a1d
c0008f96:	e8 78 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 2e 3a 02 c0       	push   0xc0023a2e
c0008fb9:	e8 55 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 3f 3a 02 c0       	push   0xc0023a3f
c0008fdc:	e8 32 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 50 3a 02 c0       	push   0xc0023a50
c0008fff:	e8 0f 40 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 61 3a 02 c0       	push   0xc0023a61
c0009022:	e8 ec 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 72 3a 02 c0       	push   0xc0023a72
c0009045:	e8 c9 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 83 3a 02 c0       	push   0xc0023a83
c0009068:	e8 a6 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 94 3a 02 c0       	push   0xc0023a94
c000908b:	e8 83 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 a5 3a 02 c0       	push   0xc0023aa5
c00090ae:	e8 60 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 b6 3a 02 c0       	push   0xc0023ab6
c00090d1:	e8 3d 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 c7 3a 02 c0       	push   0xc0023ac7
c00090f4:	e8 1a 3f 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 d8 3a 02 c0       	push   0xc0023ad8
c0009117:	e8 f7 3e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 e9 3a 02 c0       	push   0xc0023ae9
c000913a:	e8 d4 3e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 fa 3a 02 c0       	push   0xc0023afa
c000915d:	e8 b1 3e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 0b 3b 02 c0       	push   0xc0023b0b
c0009180:	e8 8e 3e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 1c 3b 02 c0       	push   0xc0023b1c
c000919f:	e8 6f 3e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 07 59 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025907
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 5e 3e 00 00       	jmp    c000d013 <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 2d 3b 02 c0       	push   0xc0023b2d
c0009288:	e8 e4 ba 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 33 3b 02 c0       	push   0xc0023b33
c00092c0:	e8 ac ba 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 57 96 00 00       	jmp    c0012964 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 e8 3b 02 c0       	push   0xc0023be8
c000935a:	e8 02 0a 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 c0 7c 02 c0 04 	test   BYTE PTR ds:0xc0027cc0,0x4
c0009366:	c7 04 24 39 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b39
c000936d:	0f 94 05 80 70 02 c0 	sete   BYTE PTR ds:0xc0027080
c0009374:	e8 e8 09 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 82 09 00 00       	call   c0009d07 <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 8d 8e 00 00       	call   c001221c <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 28 51 00 00       	call   c000e4c6 <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 91 39 02 c0 	mov    DWORD PTR [esp],0xc0023991
c00093bf:	e8 9d 09 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00093cb:	e8 37 09 00 00       	call   c0009d07 <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 74 a0 00 00       	call   c001344e <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 dd 50 00 00       	call   c000e4c6 <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 14             	add    esp,0x14
c0009400:	68 0c 3c 02 c0       	push   0xc0023c0c
c0009405:	e8 57 09 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000940a:	e8 9f 17 01 00       	call   c001abae <Hal::initialiseCoprocessor()>
c000940f:	c7 04 24 51 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b51
c0009416:	e8 46 09 00 00       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000941b:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c0009422:	e8 c1 ee 00 00       	call   c00182e8 <setupMultitasking(void (*)())>
c0009427:	83 c4 14             	add    esp,0x14
c000942a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000942f:	5b                   	pop    ebx
c0009430:	5e                   	pop    esi
c0009431:	c3                   	ret    

c0009432 <Computer::disableNMI()>:
c0009432:	6a 00                	push   0x0
c0009434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009438:	e8 f7 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c000943d:	58                   	pop    eax
c000943e:	5a                   	pop    edx
c000943f:	c3                   	ret    

c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009444:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000944b:	19 c0                	sbb    eax,eax
c000944d:	83 e0 80             	and    eax,0xffffff80
c0009450:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009454:	e6 70                	out    0x70,al
c0009456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000945a:	e6 71                	out    0x71,al
c000945c:	c3                   	ret    
c000945d:	90                   	nop

c000945e <Computer::handleNMI()>:
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 10             	sub    esp,0x10
c0009463:	e4 92                	in     al,0x92
c0009465:	89 c6                	mov    esi,eax
c0009467:	e4 61                	in     al,0x61
c0009469:	68 6c 3b 02 c0       	push   0xc0023b6c
c000946e:	88 c3                	mov    bl,al
c0009470:	e8 9e 3b 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 e6 10             	and    esi,0x10
c000947b:	75 0d                	jne    c000948a <Computer::handleNMI()+0x2c>
c000947d:	f6 c3 40             	test   bl,0x40
c0009480:	75 1d                	jne    c000949f <Computer::handleNMI()+0x41>
c0009482:	84 db                	test   bl,bl
c0009484:	78 2d                	js     c00094b3 <Computer::handleNMI()+0x55>
c0009486:	58                   	pop    eax
c0009487:	5b                   	pop    ebx
c0009488:	5e                   	pop    esi
c0009489:	c3                   	ret    
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 7d 3b 02 c0       	push   0xc0023b7d
c0009492:	e8 da b8 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	f6 c3 40             	test   bl,0x40
c000949d:	74 e3                	je     c0009482 <Computer::handleNMI()+0x24>
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	68 8a 3b 02 c0       	push   0xc0023b8a
c00094a7:	e8 c5 b8 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	84 db                	test   bl,bl
c00094b1:	79 d3                	jns    c0009486 <Computer::handleNMI()+0x28>
c00094b3:	c7 44 24 10 94 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b94
c00094bb:	5a                   	pop    edx
c00094bc:	5b                   	pop    ebx
c00094bd:	5e                   	pop    esi
c00094be:	e9 ae b8 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c00094c3:	90                   	nop

c00094c4 <Computer::setDiskActivityLight(int, bool)>:
c00094c4:	56                   	push   esi
c00094c5:	53                   	push   ebx
c00094c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094cf:	77 1b                	ja     c00094ec <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d1:	e4 92                	in     al,0x92
c00094d3:	bb 40 00 00 00       	mov    ebx,0x40
c00094d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094dc:	89 da                	mov    edx,ebx
c00094de:	d3 e2                	shl    edx,cl
c00094e0:	89 f1                	mov    ecx,esi
c00094e2:	f7 d2                	not    edx
c00094e4:	d3 e3                	shl    ebx,cl
c00094e6:	21 d0                	and    eax,edx
c00094e8:	09 d8                	or     eax,ebx
c00094ea:	e6 92                	out    0x92,al
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <GDTEntry::setBase(unsigned int)>:
c00094f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094f8:	89 c1                	mov    ecx,eax
c00094fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00094fe:	c1 e9 10             	shr    ecx,0x10
c0009501:	c1 e8 18             	shr    eax,0x18
c0009504:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009507:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <GDTEntry::setLimit(unsigned int)>:
c000950c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009514:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009517:	66 89 01             	mov    WORD PTR [ecx],ax
c000951a:	83 e2 f0             	and    edx,0xfffffff0
c000951d:	c1 e8 10             	shr    eax,0x10
c0009520:	83 e0 0f             	and    eax,0xf
c0009523:	09 d0                	or     eax,edx
c0009525:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <GDT::GDT()>:
c000952a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009538:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953e:	90                   	nop
c000953f:	c3                   	ret    

c0009540 <GDT::addEntry(GDTEntry)>:
c0009540:	53                   	push   ebx
c0009541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009549:	8b 02                	mov    eax,DWORD PTR [edx]
c000954b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000954f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009553:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009557:	8d 48 01             	lea    ecx,[eax+0x1]
c000955a:	c1 e0 03             	shl    eax,0x3
c000955d:	89 0a                	mov    DWORD PTR [edx],ecx
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <GDT::getNumberOfEntries()>:
c0009562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009566:	8b 00                	mov    eax,DWORD PTR [eax]
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::flush()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	83 c0 04             	add    eax,0x4
c0009573:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000957a:	a3 b2 7c 02 c0       	mov    ds:0xc0027cb2,eax
c000957f:	66 89 15 b0 7c 02 c0 	mov    WORD PTR ds:0xc0027cb0,dx
c0009586:	e9 f2 6d ff ff       	jmp    c000037d <loadGDT>
c000958b:	90                   	nop

c000958c <GDT::setup()>:
c000958c:	57                   	push   edi
c000958d:	56                   	push   esi
c000958e:	53                   	push   ebx
c000958f:	83 ec 40             	sub    esp,0x40
c0009592:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009596:	6a 00                	push   0x0
c0009598:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000959c:	56                   	push   esi
c000959d:	e8 4e ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095a2:	6a 00                	push   0x0
c00095a4:	56                   	push   esi
c00095a5:	e8 62 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095aa:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095b2:	6a 00                	push   0x0
c00095b4:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095b8:	56                   	push   esi
c00095b9:	e8 32 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095be:	68 ff ff ff 00       	push   0xffffff
c00095c3:	56                   	push   esi
c00095c4:	e8 43 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	6a 00                	push   0x0
c00095e0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095e4:	56                   	push   esi
c00095e5:	e8 06 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095ea:	68 ff ff ff 00       	push   0xffffff
c00095ef:	56                   	push   esi
c00095f0:	e8 17 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00095f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00095fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009605:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009609:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000960e:	0d 00 92 c0 00       	or     eax,0xc09200
c0009613:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0009617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000961b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000961f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000962b:	89 fa                	mov    edx,edi
c000962d:	80 cc 60             	or     ah,0x60
c0009630:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009636:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000963a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000963e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009646:	80 cc 60             	or     ah,0x60
c0009649:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000964d:	89 f8                	mov    eax,edi
c000964f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009654:	09 d0                	or     eax,edx
c0009656:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000965a:	89 c7                	mov    edi,eax
c000965c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000966c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009676:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000967b:	09 d0                	or     eax,edx
c000967d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009681:	83 c4 0c             	add    esp,0xc
c0009684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968c:	53                   	push   ebx
c000968d:	e8 ae fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c0009692:	83 c4 0c             	add    esp,0xc
c0009695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000969d:	53                   	push   ebx
c000969e:	e8 9d fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096ae:	53                   	push   ebx
c00096af:	e8 8c fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096b4:	83 c4 0c             	add    esp,0xc
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bf:	53                   	push   ebx
c00096c0:	e8 7b fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096c5:	83 c4 0c             	add    esp,0xc
c00096c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d0:	53                   	push   ebx
c00096d1:	e8 6a fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096d6:	83 c4 0c             	add    esp,0xc
c00096d9:	57                   	push   edi
c00096da:	56                   	push   esi
c00096db:	53                   	push   ebx
c00096dc:	e8 5f fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096e1:	83 c4 0c             	add    esp,0xc
c00096e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096ec:	53                   	push   ebx
c00096ed:	e8 4e fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096f5:	e8 70 fe ff ff       	call   c000956a <GDT::flush()>
c00096fa:	83 c4 50             	add    esp,0x50
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	c3                   	ret    

c0009701 <idleFunction(void*)>:
c0009701:	53                   	push   ebx
c0009702:	83 ec 08             	sub    esp,0x8
c0009705:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000970a:	48                   	dec    eax
c000970b:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0009710:	75 01                	jne    c0009713 <idleFunction(void*)+0x12>
c0009712:	fb                   	sti    
c0009713:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0009718:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000971e:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009725:	74 3c                	je     c0009763 <idleFunction(void*)+0x62>
c0009727:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000972e:	74 33                	je     c0009763 <idleFunction(void*)+0x62>
c0009730:	31 db                	xor    ebx,ebx
c0009732:	52                   	push   edx
c0009733:	52                   	push   edx
c0009734:	68 e1 00 00 00       	push   0xe1
c0009739:	50                   	push   eax
c000973a:	e8 27 fb ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c000973f:	53                   	push   ebx
c0009740:	83 e0 02             	and    eax,0x2
c0009743:	50                   	push   eax
c0009744:	68 e1 00 00 00       	push   0xe1
c0009749:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c000974f:	e8 3e fb ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009754:	83 c4 20             	add    esp,0x20
c0009757:	e8 58 6a ff ff       	call   c00001b4 <doTPAUSE>
c000975c:	e8 e1 8f 01 00       	call   c0022742 <idleCommon()>
c0009761:	eb f4                	jmp    c0009757 <idleFunction(void*)+0x56>
c0009763:	fb                   	sti    
c0009764:	f4                   	hlt    
c0009765:	e8 d8 8f 01 00       	call   c0022742 <idleCommon()>
c000976a:	eb f7                	jmp    c0009763 <idleFunction(void*)+0x62>

c000976c <IDTEntry::IDTEntry(bool)>:
c000976c:	83 ec 04             	sub    esp,0x4
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	88 04 24             	mov    BYTE PTR [esp],al
c0009776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009784:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000978c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000978f:	83 e2 f0             	and    edx,0xfffffff0
c0009792:	83 ca 0e             	or     edx,0xe
c0009795:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000979c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000979f:	83 e2 ef             	and    edx,0xffffffef
c00097a2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097a5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097a9:	74 05                	je     c00097b0 <IDTEntry::IDTEntry(bool)+0x44>
c00097ab:	b2 03                	mov    dl,0x3
c00097ad:	eb 05                	jmp    c00097b4 <IDTEntry::IDTEntry(bool)+0x48>
c00097af:	90                   	nop
c00097b0:	b2 00                	mov    dl,0x0
c00097b2:	66 90                	xchg   ax,ax
c00097b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b8:	83 e2 03             	and    edx,0x3
c00097bb:	88 d1                	mov    cl,dl
c00097bd:	c1 e1 05             	shl    ecx,0x5
c00097c0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097c3:	83 e2 9f             	and    edx,0xffffff9f
c00097c6:	09 ca                	or     edx,ecx
c00097c8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097cf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097d2:	83 ca 80             	or     edx,0xffffff80
c00097d5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097d8:	90                   	nop
c00097d9:	83 c4 04             	add    esp,0x4
c00097dc:	c3                   	ret    
c00097dd:	90                   	nop

c00097de <IDTEntry::setOffset(unsigned int)>:
c00097de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e6:	66 89 02             	mov    WORD PTR [edx],ax
c00097e9:	c1 e8 10             	shr    eax,0x10
c00097ec:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097f0:	c3                   	ret    
c00097f1:	90                   	nop
c00097f2:	66 90                	xchg   ax,ax

c00097f4 <IDT::IDT()>:
c00097f4:	90                   	nop
c00097f5:	c3                   	ret    

c00097f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	83 c0 30             	add    eax,0x30
c00097fd:	c3                   	ret    

c00097fe <IDT::addEntry(IDTEntry, int)>:
c00097fe:	53                   	push   ebx
c00097ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009807:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000980b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000980f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0009812:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0009816:	5b                   	pop    ebx
c0009817:	c3                   	ret    

c0009818 <IDT::addEntry(int, void (*)(), bool)>:
c0009818:	53                   	push   ebx
c0009819:	83 ec 10             	sub    esp,0x10
c000981c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009821:	50                   	push   eax
c0009822:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009826:	53                   	push   ebx
c0009827:	e8 40 ff ff ff       	call   c000976c <IDTEntry::IDTEntry(bool)>
c000982c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009830:	53                   	push   ebx
c0009831:	e8 a8 ff ff ff       	call   c00097de <IDTEntry::setOffset(unsigned int)>
c0009836:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000983a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000983e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009842:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009846:	e8 b3 ff ff ff       	call   c00097fe <IDT::addEntry(IDTEntry, int)>
c000984b:	83 c4 30             	add    esp,0x30
c000984e:	5b                   	pop    ebx
c000984f:	c3                   	ret    

c0009850 <IDT::flush()>:
c0009850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009854:	66 c7 05 b8 7c 02 c0 ff 07 	mov    WORD PTR ds:0xc0027cb8,0x7ff
c000985d:	a3 ba 7c 02 c0       	mov    ds:0xc0027cba,eax
c0009862:	0f 01 1d b8 7c 02 c0 	lidtd  ds:0xc0027cb8
c0009869:	c3                   	ret    

c000986a <IDT::setup()>:
c000986a:	57                   	push   edi
c000986b:	56                   	push   esi
c000986c:	53                   	push   ebx
c000986d:	83 ec 10             	sub    esp,0x10
c0009870:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009874:	6a 00                	push   0x0
c0009876:	68 9d 03 00 c0       	push   0xc000039d
c000987b:	6a 00                	push   0x0
c000987d:	53                   	push   ebx
c000987e:	e8 95 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009883:	6a 00                	push   0x0
c0009885:	68 ad 03 00 c0       	push   0xc00003ad
c000988a:	6a 01                	push   0x1
c000988c:	53                   	push   ebx
c000988d:	e8 86 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009892:	83 c4 20             	add    esp,0x20
c0009895:	6a 00                	push   0x0
c0009897:	68 b7 03 00 c0       	push   0xc00003b7
c000989c:	6a 02                	push   0x2
c000989e:	53                   	push   ebx
c000989f:	e8 74 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098a4:	6a 00                	push   0x0
c00098a6:	68 c1 03 00 c0       	push   0xc00003c1
c00098ab:	6a 03                	push   0x3
c00098ad:	53                   	push   ebx
c00098ae:	e8 65 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098b3:	83 c4 20             	add    esp,0x20
c00098b6:	6a 00                	push   0x0
c00098b8:	68 cb 03 00 c0       	push   0xc00003cb
c00098bd:	6a 04                	push   0x4
c00098bf:	53                   	push   ebx
c00098c0:	e8 53 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098c5:	6a 00                	push   0x0
c00098c7:	68 d5 03 00 c0       	push   0xc00003d5
c00098cc:	6a 05                	push   0x5
c00098ce:	53                   	push   ebx
c00098cf:	e8 44 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098d4:	83 c4 20             	add    esp,0x20
c00098d7:	6a 00                	push   0x0
c00098d9:	68 df 03 00 c0       	push   0xc00003df
c00098de:	6a 06                	push   0x6
c00098e0:	53                   	push   ebx
c00098e1:	e8 32 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098e6:	6a 00                	push   0x0
c00098e8:	68 e9 03 00 c0       	push   0xc00003e9
c00098ed:	6a 07                	push   0x7
c00098ef:	53                   	push   ebx
c00098f0:	e8 23 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00098f5:	83 c4 20             	add    esp,0x20
c00098f8:	6a 00                	push   0x0
c00098fa:	68 f3 03 00 c0       	push   0xc00003f3
c00098ff:	6a 08                	push   0x8
c0009901:	53                   	push   ebx
c0009902:	e8 11 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009907:	6a 00                	push   0x0
c0009909:	68 fb 03 00 c0       	push   0xc00003fb
c000990e:	6a 09                	push   0x9
c0009910:	53                   	push   ebx
c0009911:	e8 02 ff ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009916:	83 c4 20             	add    esp,0x20
c0009919:	6a 00                	push   0x0
c000991b:	68 05 04 00 c0       	push   0xc0000405
c0009920:	6a 0a                	push   0xa
c0009922:	53                   	push   ebx
c0009923:	e8 f0 fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009928:	6a 00                	push   0x0
c000992a:	68 0d 04 00 c0       	push   0xc000040d
c000992f:	6a 0b                	push   0xb
c0009931:	53                   	push   ebx
c0009932:	e8 e1 fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009937:	83 c4 20             	add    esp,0x20
c000993a:	6a 00                	push   0x0
c000993c:	68 15 04 00 c0       	push   0xc0000415
c0009941:	6a 0c                	push   0xc
c0009943:	53                   	push   ebx
c0009944:	e8 cf fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009949:	6a 00                	push   0x0
c000994b:	68 1d 04 00 c0       	push   0xc000041d
c0009950:	6a 0d                	push   0xd
c0009952:	53                   	push   ebx
c0009953:	e8 c0 fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009958:	83 c4 20             	add    esp,0x20
c000995b:	6a 00                	push   0x0
c000995d:	68 25 04 00 c0       	push   0xc0000425
c0009962:	6a 0e                	push   0xe
c0009964:	53                   	push   ebx
c0009965:	e8 ae fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c000996a:	6a 00                	push   0x0
c000996c:	68 2d 04 00 c0       	push   0xc000042d
c0009971:	6a 0f                	push   0xf
c0009973:	53                   	push   ebx
c0009974:	e8 9f fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009979:	83 c4 20             	add    esp,0x20
c000997c:	6a 00                	push   0x0
c000997e:	68 37 04 00 c0       	push   0xc0000437
c0009983:	6a 10                	push   0x10
c0009985:	53                   	push   ebx
c0009986:	e8 8d fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c000998b:	6a 00                	push   0x0
c000998d:	68 41 04 00 c0       	push   0xc0000441
c0009992:	6a 11                	push   0x11
c0009994:	53                   	push   ebx
c0009995:	e8 7e fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c000999a:	83 c4 20             	add    esp,0x20
c000999d:	6a 00                	push   0x0
c000999f:	68 4b 04 00 c0       	push   0xc000044b
c00099a4:	6a 12                	push   0x12
c00099a6:	53                   	push   ebx
c00099a7:	e8 6c fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099ac:	6a 01                	push   0x1
c00099ae:	68 e5 04 00 c0       	push   0xc00004e5
c00099b3:	6a 60                	push   0x60
c00099b5:	53                   	push   ebx
c00099b6:	e8 5d fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099bb:	83 c4 20             	add    esp,0x20
c00099be:	6a 00                	push   0x0
c00099c0:	68 ec 04 00 c0       	push   0xc00004ec
c00099c5:	6a 20                	push   0x20
c00099c7:	53                   	push   ebx
c00099c8:	e8 4b fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099cd:	6a 00                	push   0x0
c00099cf:	68 d7 04 00 c0       	push   0xc00004d7
c00099d4:	6a 21                	push   0x21
c00099d6:	53                   	push   ebx
c00099d7:	e8 3c fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099dc:	83 c4 20             	add    esp,0x20
c00099df:	6a 00                	push   0x0
c00099e1:	68 de 04 00 c0       	push   0xc00004de
c00099e6:	6a 22                	push   0x22
c00099e8:	53                   	push   ebx
c00099e9:	e8 2a fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099ee:	6a 00                	push   0x0
c00099f0:	68 55 04 00 c0       	push   0xc0000455
c00099f5:	6a 23                	push   0x23
c00099f7:	53                   	push   ebx
c00099f8:	e8 1b fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c00099fd:	83 c4 20             	add    esp,0x20
c0009a00:	6a 00                	push   0x0
c0009a02:	68 5f 04 00 c0       	push   0xc000045f
c0009a07:	6a 24                	push   0x24
c0009a09:	53                   	push   ebx
c0009a0a:	e8 09 fe ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a0f:	6a 00                	push   0x0
c0009a11:	68 69 04 00 c0       	push   0xc0000469
c0009a16:	6a 25                	push   0x25
c0009a18:	53                   	push   ebx
c0009a19:	e8 fa fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a1e:	83 c4 20             	add    esp,0x20
c0009a21:	6a 00                	push   0x0
c0009a23:	68 73 04 00 c0       	push   0xc0000473
c0009a28:	6a 26                	push   0x26
c0009a2a:	53                   	push   ebx
c0009a2b:	e8 e8 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a30:	6a 00                	push   0x0
c0009a32:	68 7d 04 00 c0       	push   0xc000047d
c0009a37:	6a 27                	push   0x27
c0009a39:	53                   	push   ebx
c0009a3a:	e8 d9 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a3f:	83 c4 20             	add    esp,0x20
c0009a42:	6a 00                	push   0x0
c0009a44:	68 87 04 00 c0       	push   0xc0000487
c0009a49:	6a 28                	push   0x28
c0009a4b:	53                   	push   ebx
c0009a4c:	e8 c7 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a51:	6a 00                	push   0x0
c0009a53:	68 91 04 00 c0       	push   0xc0000491
c0009a58:	6a 29                	push   0x29
c0009a5a:	53                   	push   ebx
c0009a5b:	e8 b8 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a60:	83 c4 20             	add    esp,0x20
c0009a63:	6a 00                	push   0x0
c0009a65:	68 9b 04 00 c0       	push   0xc000049b
c0009a6a:	6a 2a                	push   0x2a
c0009a6c:	53                   	push   ebx
c0009a6d:	e8 a6 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a72:	6a 00                	push   0x0
c0009a74:	68 a5 04 00 c0       	push   0xc00004a5
c0009a79:	6a 2b                	push   0x2b
c0009a7b:	53                   	push   ebx
c0009a7c:	e8 97 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a81:	83 c4 20             	add    esp,0x20
c0009a84:	6a 00                	push   0x0
c0009a86:	68 af 04 00 c0       	push   0xc00004af
c0009a8b:	6a 2c                	push   0x2c
c0009a8d:	53                   	push   ebx
c0009a8e:	e8 85 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009a93:	6a 00                	push   0x0
c0009a95:	68 b9 04 00 c0       	push   0xc00004b9
c0009a9a:	6a 2d                	push   0x2d
c0009a9c:	53                   	push   ebx
c0009a9d:	e8 76 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009aa2:	83 c4 20             	add    esp,0x20
c0009aa5:	6a 00                	push   0x0
c0009aa7:	68 c3 04 00 c0       	push   0xc00004c3
c0009aac:	6a 2e                	push   0x2e
c0009aae:	53                   	push   ebx
c0009aaf:	e8 64 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009ab4:	6a 00                	push   0x0
c0009ab6:	68 cd 04 00 c0       	push   0xc00004cd
c0009abb:	6a 2f                	push   0x2f
c0009abd:	53                   	push   ebx
c0009abe:	e8 55 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009ac3:	83 c4 20             	add    esp,0x20
c0009ac6:	6a 00                	push   0x0
c0009ac8:	68 23 05 00 c0       	push   0xc0000523
c0009acd:	6a 30                	push   0x30
c0009acf:	53                   	push   ebx
c0009ad0:	e8 43 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009ad5:	6a 00                	push   0x0
c0009ad7:	68 2d 05 00 c0       	push   0xc000052d
c0009adc:	6a 31                	push   0x31
c0009ade:	53                   	push   ebx
c0009adf:	e8 34 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009ae4:	83 c4 20             	add    esp,0x20
c0009ae7:	6a 00                	push   0x0
c0009ae9:	68 37 05 00 c0       	push   0xc0000537
c0009aee:	6a 32                	push   0x32
c0009af0:	53                   	push   ebx
c0009af1:	e8 22 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009af6:	6a 00                	push   0x0
c0009af8:	68 41 05 00 c0       	push   0xc0000541
c0009afd:	6a 33                	push   0x33
c0009aff:	53                   	push   ebx
c0009b00:	e8 13 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009b05:	83 c4 20             	add    esp,0x20
c0009b08:	6a 00                	push   0x0
c0009b0a:	68 4b 05 00 c0       	push   0xc000054b
c0009b0f:	6a 34                	push   0x34
c0009b11:	53                   	push   ebx
c0009b12:	e8 01 fd ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009b17:	6a 00                	push   0x0
c0009b19:	68 55 05 00 c0       	push   0xc0000555
c0009b1e:	6a 35                	push   0x35
c0009b20:	53                   	push   ebx
c0009b21:	e8 f2 fc ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009b26:	83 c4 20             	add    esp,0x20
c0009b29:	6a 00                	push   0x0
c0009b2b:	68 5f 05 00 c0       	push   0xc000055f
c0009b30:	6a 36                	push   0x36
c0009b32:	53                   	push   ebx
c0009b33:	e8 e0 fc ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009b38:	6a 00                	push   0x0
c0009b3a:	68 69 05 00 c0       	push   0xc0000569
c0009b3f:	6a 37                	push   0x37
c0009b41:	53                   	push   ebx
c0009b42:	e8 d1 fc ff ff       	call   c0009818 <IDT::addEntry(int, void (*)(), bool)>
c0009b47:	83 c4 1c             	add    esp,0x1c
c0009b4a:	6a 03                	push   0x3
c0009b4c:	6a 02                	push   0x2
c0009b4e:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0009b54:	e8 cd 28 00 00       	call   c000c426 <VAS::allocatePages(int, int)>
c0009b59:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b60:	89 c6                	mov    esi,eax
c0009b62:	e8 a0 01 00 00       	call   c0009d07 <malloc>
c0009b67:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b70:	89 c7                	mov    edi,eax
c0009b72:	e8 85 1a 00 00       	call   c000b5fc <TSS::TSS()>
c0009b77:	83 c4 0c             	add    esp,0xc
c0009b7a:	68 f3 03 00 c0       	push   0xc00003f3
c0009b7f:	56                   	push   esi
c0009b80:	57                   	push   edi
c0009b81:	e8 ba 1a 00 00       	call   c000b640 <TSS::setup(unsigned long, unsigned long)>
c0009b86:	89 c6                	mov    esi,eax
c0009b88:	58                   	pop    eax
c0009b89:	5a                   	pop    edx
c0009b8a:	6a 00                	push   0x0
c0009b8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b90:	50                   	push   eax
c0009b91:	e8 d6 fb ff ff       	call   c000976c <IDTEntry::IDTEntry(bool)>
c0009b96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b9a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b9f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009ba6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009bac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bb0:	80 ce 05             	or     dh,0x5
c0009bb3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009bb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bbe:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009bc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bc4:	e8 87 fc ff ff       	call   c0009850 <IDT::flush()>
c0009bc9:	83 c4 20             	add    esp,0x20
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	c3                   	ret    

c0009bd0 <sbrk>:
c0009bd0:	55                   	push   ebp
c0009bd1:	57                   	push   edi
c0009bd2:	56                   	push   esi
c0009bd3:	53                   	push   ebx
c0009bd4:	83 ec 24             	sub    esp,0x24
c0009bd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009bdb:	53                   	push   ebx
c0009bdc:	68 5c 3c 02 c0       	push   0xc0023c5c
c0009be1:	e8 2d 34 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009be6:	83 c4 10             	add    esp,0x10
c0009be9:	85 db                	test   ebx,ebx
c0009beb:	74 5f                	je     c0009c4c <sbrk+0x7c>
c0009bed:	78 64                	js     c0009c53 <sbrk+0x83>
c0009bef:	a1 1c 6f 02 c0       	mov    eax,ds:0xc0026f1c
c0009bf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bf8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bfe:	89 dd                	mov    ebp,ebx
c0009c00:	78 69                	js     c0009c6b <sbrk+0x9b>
c0009c02:	c1 fd 0c             	sar    ebp,0xc
c0009c05:	bb 00 00 00 00       	mov    ebx,0x0
c0009c0a:	8b 35 d4 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027dd4
c0009c10:	8b 3d 1c 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f1c
c0009c16:	e8 a3 07 00 00       	call   c000a3be <Phys::allocatePage()>
c0009c1b:	68 01 04 00 00       	push   0x401
c0009c20:	57                   	push   edi
c0009c21:	50                   	push   eax
c0009c22:	56                   	push   esi
c0009c23:	e8 fc 26 00 00       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c28:	81 05 1c 6f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026f1c,0x1000
c0009c32:	43                   	inc    ebx
c0009c33:	83 c4 10             	add    esp,0x10
c0009c36:	39 dd                	cmp    ebp,ebx
c0009c38:	75 d0                	jne    c0009c0a <sbrk+0x3a>
c0009c3a:	0f 20 d8             	mov    eax,cr3
c0009c3d:	0f 22 d8             	mov    cr3,eax
c0009c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c44:	83 c4 1c             	add    esp,0x1c
c0009c47:	5b                   	pop    ebx
c0009c48:	5e                   	pop    esi
c0009c49:	5f                   	pop    edi
c0009c4a:	5d                   	pop    ebp
c0009c4b:	c3                   	ret    
c0009c4c:	a1 1c 6f 02 c0       	mov    eax,ds:0xc0026f1c
c0009c51:	eb f1                	jmp    c0009c44 <sbrk+0x74>
c0009c53:	83 ec 08             	sub    esp,0x8
c0009c56:	53                   	push   ebx
c0009c57:	68 88 3c 02 c0       	push   0xc0023c88
c0009c5c:	e8 b2 33 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009c61:	83 c4 10             	add    esp,0x10
c0009c64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c69:	eb d9                	jmp    c0009c44 <sbrk+0x74>
c0009c6b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c71:	eb 8f                	jmp    c0009c02 <sbrk+0x32>

c0009c73 <mmap>:
c0009c73:	83 ec 18             	sub    esp,0x18
c0009c76:	68 7a 3c 02 c0       	push   0xc0023c7a
c0009c7b:	e8 f1 b0 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0009c80:	b8 00 00 00 00       	mov    eax,0x0
c0009c85:	83 c4 1c             	add    esp,0x1c
c0009c88:	c3                   	ret    

c0009c89 <munmap>:
c0009c89:	83 ec 18             	sub    esp,0x18
c0009c8c:	68 7f 3c 02 c0       	push   0xc0023c7f
c0009c91:	e8 db b0 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0009c96:	b8 00 00 00 00       	mov    eax,0x0
c0009c9b:	83 c4 1c             	add    esp,0x1c
c0009c9e:	c3                   	ret    

c0009c9f <liballoc_lock()>:
c0009c9f:	fa                   	cli    
c0009ca0:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0009ca6:	b8 00 00 00 00       	mov    eax,0x0
c0009cab:	c3                   	ret    

c0009cac <liballoc_unlock()>:
c0009cac:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0009cb1:	48                   	dec    eax
c0009cb2:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0009cb7:	75 01                	jne    c0009cba <liballoc_unlock()+0xe>
c0009cb9:	fb                   	sti    
c0009cba:	b8 00 00 00 00       	mov    eax,0x0
c0009cbf:	c3                   	ret    

c0009cc0 <liballoc_alloc(int)>:
c0009cc0:	83 ec 10             	sub    esp,0x10
c0009cc3:	6a 01                	push   0x1
c0009cc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009cc9:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0009ccf:	e8 52 27 00 00       	call   c000c426 <VAS::allocatePages(int, int)>
c0009cd4:	83 c4 1c             	add    esp,0x1c
c0009cd7:	c3                   	ret    

c0009cd8 <liballoc_free(void*, int)>:
c0009cd8:	83 ec 14             	sub    esp,0x14
c0009cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009cdf:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0009ce5:	e8 e6 23 00 00       	call   c000c0d0 <VAS::freeAllocatedPages(unsigned long)>
c0009cea:	b8 00 00 00 00       	mov    eax,0x0
c0009cef:	83 c4 1c             	add    esp,0x1c
c0009cf2:	c3                   	ret    

c0009cf3 <realloc>:
c0009cf3:	83 ec 14             	sub    esp,0x14
c0009cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cfe:	e8 55 78 ff ff       	call   c0001558 <dlrealloc>
c0009d03:	83 c4 1c             	add    esp,0x1c
c0009d06:	c3                   	ret    

c0009d07 <malloc>:
c0009d07:	83 ec 18             	sub    esp,0x18
c0009d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d0e:	e8 08 73 ff ff       	call   c000101b <dlmalloc>
c0009d13:	83 c4 1c             	add    esp,0x1c
c0009d16:	c3                   	ret    

c0009d17 <free>:
c0009d17:	83 ec 18             	sub    esp,0x18
c0009d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d1e:	e8 9d 6f ff ff       	call   c0000cc0 <dlfree>
c0009d23:	83 c4 1c             	add    esp,0x1c
c0009d26:	c3                   	ret    

c0009d27 <rfree>:
c0009d27:	83 ec 18             	sub    esp,0x18
c0009d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d2e:	e8 8d 6f ff ff       	call   c0000cc0 <dlfree>
c0009d33:	83 c4 1c             	add    esp,0x1c
c0009d36:	c3                   	ret    

c0009d37 <calloc>:
c0009d37:	56                   	push   esi
c0009d38:	53                   	push   ebx
c0009d39:	83 ec 10             	sub    esp,0x10
c0009d3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d40:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d45:	53                   	push   ebx
c0009d46:	e8 bc ff ff ff       	call   c0009d07 <malloc>
c0009d4b:	89 c6                	mov    esi,eax
c0009d4d:	83 c4 0c             	add    esp,0xc
c0009d50:	53                   	push   ebx
c0009d51:	6a 00                	push   0x0
c0009d53:	50                   	push   eax
c0009d54:	e8 23 69 ff ff       	call   c000067c <memset>
c0009d59:	89 f0                	mov    eax,esi
c0009d5b:	83 c4 14             	add    esp,0x14
c0009d5e:	5b                   	pop    ebx
c0009d5f:	5e                   	pop    esi
c0009d60:	c3                   	ret    

c0009d61 <Krnl::setBootMessage(char const*)>:
c0009d61:	57                   	push   edi
c0009d62:	56                   	push   esi
c0009d63:	53                   	push   ebx
c0009d64:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d6a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d71:	68 9e 00 00 00       	push   0x9e
c0009d76:	6a 00                	push   0x0
c0009d78:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d7c:	56                   	push   esi
c0009d7d:	e8 fa 68 ff ff       	call   c000067c <memset>
c0009d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d85:	e8 0e 69 ff ff       	call   c0000698 <strlen>
c0009d8a:	ba 50 00 00 00       	mov    edx,0x50
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	29 c2                	sub    edx,eax
c0009d94:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d98:	d1 ea                	shr    edx,1
c0009d9a:	84 c0                	test   al,al
c0009d9c:	74 19                	je     c0009db7 <Krnl::setBootMessage(char const*)+0x56>
c0009d9e:	01 d2                	add    edx,edx
c0009da0:	43                   	inc    ebx
c0009da1:	01 f2                	add    edx,esi
c0009da3:	80 cc 0f             	or     ah,0xf
c0009da6:	83 c2 02             	add    edx,0x2
c0009da9:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009dad:	43                   	inc    ebx
c0009dae:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009db3:	84 c0                	test   al,al
c0009db5:	75 ec                	jne    c0009da3 <Krnl::setBootMessage(char const*)+0x42>
c0009db7:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009dbc:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009dc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009dc3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009dc9:	5b                   	pop    ebx
c0009dca:	5e                   	pop    esi
c0009dcb:	5f                   	pop    edi
c0009dcc:	c3                   	ret    

c0009dcd <kernel_main>:
c0009dcd:	57                   	push   edi
c0009dce:	56                   	push   esi
c0009dcf:	53                   	push   ebx
c0009dd0:	83 ec 20             	sub    esp,0x20
c0009dd3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009dd8:	a3 c0 7c 02 c0       	mov    ds:0xc0027cc0,eax
c0009ddd:	f6 c4 08             	test   ah,0x8
c0009de0:	0f 85 7a 03 00 00    	jne    c000a160 <kernel_main+0x393>
c0009de6:	31 f6                	xor    esi,esi
c0009de8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ded:	89 f0                	mov    eax,esi
c0009def:	89 fa                	mov    edx,edi
c0009df1:	ee                   	out    dx,al
c0009df2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009df7:	b0 80                	mov    al,0x80
c0009df9:	89 da                	mov    edx,ebx
c0009dfb:	ee                   	out    dx,al
c0009dfc:	b1 03                	mov    cl,0x3
c0009dfe:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e03:	88 c8                	mov    al,cl
c0009e05:	ee                   	out    dx,al
c0009e06:	89 f0                	mov    eax,esi
c0009e08:	89 fa                	mov    edx,edi
c0009e0a:	ee                   	out    dx,al
c0009e0b:	88 c8                	mov    al,cl
c0009e0d:	89 da                	mov    edx,ebx
c0009e0f:	ee                   	out    dx,al
c0009e10:	b0 c7                	mov    al,0xc7
c0009e12:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e17:	ee                   	out    dx,al
c0009e18:	b0 0b                	mov    al,0xb
c0009e1a:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e1f:	ee                   	out    dx,al
c0009e20:	83 ec 0c             	sub    esp,0xc
c0009e23:	68 b8 3c 02 c0       	push   0xc0023cb8
c0009e28:	e8 e6 31 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009e37:	0f 85 eb 02 00 00    	jne    c000a128 <kernel_main+0x35b>
c0009e3d:	e8 c6 0c 00 00       	call   c000ab08 <installVgaTextImplementation()>
c0009e42:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009e49:	0f 85 94 02 00 00    	jne    c000a0e3 <kernel_main+0x316>
c0009e4f:	0f b6 05 20 6f 02 c0 	movzx  eax,BYTE PTR ds:0xc0026f20
c0009e56:	84 c0                	test   al,al
c0009e58:	74 7b                	je     c0009ed5 <kernel_main+0x108>
c0009e5a:	31 db                	xor    ebx,ebx
c0009e5c:	bf 0a 00 00 00       	mov    edi,0xa
c0009e61:	be 05 00 00 00       	mov    esi,0x5
c0009e66:	31 c9                	xor    ecx,ecx
c0009e68:	eb 2a                	jmp    c0009e94 <kernel_main+0xc7>
c0009e6a:	3c 0d                	cmp    al,0xd
c0009e6c:	74 1a                	je     c0009e88 <kernel_main+0xbb>
c0009e6e:	3c 0a                	cmp    al,0xa
c0009e70:	74 40                	je     c0009eb2 <kernel_main+0xe5>
c0009e72:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e75:	80 cc 0e             	or     ah,0xe
c0009e78:	c1 e2 04             	shl    edx,0x4
c0009e7b:	01 ca                	add    edx,ecx
c0009e7d:	41                   	inc    ecx
c0009e7e:	01 fa                	add    edx,edi
c0009e80:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e88:	43                   	inc    ebx
c0009e89:	0f b6 83 20 6f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd90e0]
c0009e90:	84 c0                	test   al,al
c0009e92:	74 32                	je     c0009ec6 <kernel_main+0xf9>
c0009e94:	80 b9 56 6f 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd90aa],0xdb
c0009e9b:	75 cd                	jne    c0009e6a <kernel_main+0x9d>
c0009e9d:	0f b6 91 55 6f 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd90ab]
c0009ea4:	83 e2 fe             	and    edx,0xfffffffe
c0009ea7:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009ead:	75 bb                	jne    c0009e6a <kernel_main+0x9d>
c0009eaf:	47                   	inc    edi
c0009eb0:	eb b8                	jmp    c0009e6a <kernel_main+0x9d>
c0009eb2:	43                   	inc    ebx
c0009eb3:	46                   	inc    esi
c0009eb4:	31 c9                	xor    ecx,ecx
c0009eb6:	0f b6 83 20 6f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd90e0]
c0009ebd:	bf 0a 00 00 00       	mov    edi,0xa
c0009ec2:	84 c0                	test   al,al
c0009ec4:	75 ce                	jne    c0009e94 <kernel_main+0xc7>
c0009ec6:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c0009ecc:	80 e6 08             	and    dh,0x8
c0009ecf:	0f 85 bf 00 00 00    	jne    c0009f94 <kernel_main+0x1c7>
c0009ed5:	83 ec 0c             	sub    esp,0xc
c0009ed8:	68 54 3d 02 c0       	push   0xc0023d54
c0009edd:	e8 7f fe ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0009ee2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009ee7:	05 ff 0f 00 00       	add    eax,0xfff
c0009eec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ef1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ef4:	e8 44 06 00 00       	call   c000a53d <Phys::physicalMemorySetup(unsigned int)>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009f03:	0f 85 a2 01 00 00    	jne    c000a0ab <kernel_main+0x2de>
c0009f09:	e8 6a 1f 00 00       	call   c000be78 <Virt::virtualMemorySetup()>
c0009f0e:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009f15:	0f 85 58 01 00 00    	jne    c000a073 <kernel_main+0x2a6>
c0009f1b:	83 ec 0c             	sub    esp,0xc
c0009f1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f22:	56                   	push   esi
c0009f23:	e8 26 2b 00 00       	call   c000ca4e <VAS::VAS()>
c0009f28:	83 c4 10             	add    esp,0x10
c0009f2b:	89 35 d4 7d 02 c0    	mov    DWORD PTR ds:0xc0027dd4,esi
c0009f31:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009f38:	0f 85 fd 00 00 00    	jne    c000a03b <kernel_main+0x26e>
c0009f3e:	e8 dd 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f43:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009f4a:	0f 85 b3 00 00 00    	jne    c000a003 <kernel_main+0x236>
c0009f50:	83 ec 0c             	sub    esp,0xc
c0009f53:	68 ec 01 00 00       	push   0x1ec
c0009f58:	e8 aa fd ff ff       	call   c0009d07 <malloc>
c0009f5d:	89 c3                	mov    ebx,eax
c0009f5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f62:	e8 51 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	89 1d a8 7c 02 c0    	mov    DWORD PTR ds:0xc0027ca8,ebx
c0009f70:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009f77:	75 53                	jne    c0009fcc <kernel_main+0x1ff>
c0009f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f7b:	6a 00                	push   0x0
c0009f7d:	6a 00                	push   0x0
c0009f7f:	6a 00                	push   0x0
c0009f81:	53                   	push   ebx
c0009f82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f85:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f88:	e8 1b 22 00 00       	call   c000c1a8 <VAS::~VAS()>
c0009f8d:	83 c4 30             	add    esp,0x30
c0009f90:	5b                   	pop    ebx
c0009f91:	5e                   	pop    esi
c0009f92:	5f                   	pop    edi
c0009f93:	c3                   	ret    
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	68 03 3d 02 c0       	push   0xc0023d03
c0009f9c:	e8 c0 fd ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0009fa1:	83 c4 10             	add    esp,0x10
c0009fa4:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009fab:	0f 85 24 ff ff ff    	jne    c0009ed5 <kernel_main+0x108>
c0009fb1:	eb 04                	jmp    c0009fb7 <kernel_main+0x1ea>
c0009fb3:	3c 1c                	cmp    al,0x1c
c0009fb5:	74 06                	je     c0009fbd <kernel_main+0x1f0>
c0009fb7:	e4 60                	in     al,0x60
c0009fb9:	3c 5a                	cmp    al,0x5a
c0009fbb:	75 f6                	jne    c0009fb3 <kernel_main+0x1e6>
c0009fbd:	e4 60                	in     al,0x60
c0009fbf:	3c 5a                	cmp    al,0x5a
c0009fc1:	74 fa                	je     c0009fbd <kernel_main+0x1f0>
c0009fc3:	3c 1c                	cmp    al,0x1c
c0009fc5:	74 f6                	je     c0009fbd <kernel_main+0x1f0>
c0009fc7:	e9 09 ff ff ff       	jmp    c0009ed5 <kernel_main+0x108>
c0009fcc:	83 ec 0c             	sub    esp,0xc
c0009fcf:	68 42 3d 02 c0       	push   0xc0023d42
c0009fd4:	e8 88 fd ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009fe3:	74 0c                	je     c0009ff1 <kernel_main+0x224>
c0009fe5:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0009feb:	eb 8c                	jmp    c0009f79 <kernel_main+0x1ac>
c0009fed:	3c 1c                	cmp    al,0x1c
c0009fef:	74 06                	je     c0009ff7 <kernel_main+0x22a>
c0009ff1:	e4 60                	in     al,0x60
c0009ff3:	3c 5a                	cmp    al,0x5a
c0009ff5:	75 f6                	jne    c0009fed <kernel_main+0x220>
c0009ff7:	e4 60                	in     al,0x60
c0009ff9:	3c 5a                	cmp    al,0x5a
c0009ffb:	74 fa                	je     c0009ff7 <kernel_main+0x22a>
c0009ffd:	3c 1c                	cmp    al,0x1c
c0009fff:	74 f6                	je     c0009ff7 <kernel_main+0x22a>
c000a001:	eb e2                	jmp    c0009fe5 <kernel_main+0x218>
c000a003:	83 ec 0c             	sub    esp,0xc
c000a006:	68 2f 3d 02 c0       	push   0xc0023d2f
c000a00b:	e8 51 fd ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a01a:	0f 85 30 ff ff ff    	jne    c0009f50 <kernel_main+0x183>
c000a020:	eb 04                	jmp    c000a026 <kernel_main+0x259>
c000a022:	3c 1c                	cmp    al,0x1c
c000a024:	74 06                	je     c000a02c <kernel_main+0x25f>
c000a026:	e4 60                	in     al,0x60
c000a028:	3c 5a                	cmp    al,0x5a
c000a02a:	75 f6                	jne    c000a022 <kernel_main+0x255>
c000a02c:	e4 60                	in     al,0x60
c000a02e:	3c 5a                	cmp    al,0x5a
c000a030:	74 fa                	je     c000a02c <kernel_main+0x25f>
c000a032:	3c 1c                	cmp    al,0x1c
c000a034:	74 f6                	je     c000a02c <kernel_main+0x25f>
c000a036:	e9 15 ff ff ff       	jmp    c0009f50 <kernel_main+0x183>
c000a03b:	83 ec 0c             	sub    esp,0xc
c000a03e:	68 25 3d 02 c0       	push   0xc0023d25
c000a043:	e8 19 fd ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a048:	83 c4 10             	add    esp,0x10
c000a04b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a052:	0f 85 e6 fe ff ff    	jne    c0009f3e <kernel_main+0x171>
c000a058:	eb 04                	jmp    c000a05e <kernel_main+0x291>
c000a05a:	3c 1c                	cmp    al,0x1c
c000a05c:	74 06                	je     c000a064 <kernel_main+0x297>
c000a05e:	e4 60                	in     al,0x60
c000a060:	3c 5a                	cmp    al,0x5a
c000a062:	75 f6                	jne    c000a05a <kernel_main+0x28d>
c000a064:	e4 60                	in     al,0x60
c000a066:	3c 5a                	cmp    al,0x5a
c000a068:	74 fa                	je     c000a064 <kernel_main+0x297>
c000a06a:	3c 1c                	cmp    al,0x1c
c000a06c:	74 f6                	je     c000a064 <kernel_main+0x297>
c000a06e:	e9 cb fe ff ff       	jmp    c0009f3e <kernel_main+0x171>
c000a073:	83 ec 0c             	sub    esp,0xc
c000a076:	68 1a 3d 02 c0       	push   0xc0023d1a
c000a07b:	e8 e1 fc ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a08a:	0f 85 8b fe ff ff    	jne    c0009f1b <kernel_main+0x14e>
c000a090:	eb 04                	jmp    c000a096 <kernel_main+0x2c9>
c000a092:	3c 1c                	cmp    al,0x1c
c000a094:	74 06                	je     c000a09c <kernel_main+0x2cf>
c000a096:	e4 60                	in     al,0x60
c000a098:	3c 5a                	cmp    al,0x5a
c000a09a:	75 f6                	jne    c000a092 <kernel_main+0x2c5>
c000a09c:	e4 60                	in     al,0x60
c000a09e:	3c 5a                	cmp    al,0x5a
c000a0a0:	74 fa                	je     c000a09c <kernel_main+0x2cf>
c000a0a2:	3c 1c                	cmp    al,0x1c
c000a0a4:	74 f6                	je     c000a09c <kernel_main+0x2cf>
c000a0a6:	e9 70 fe ff ff       	jmp    c0009f1b <kernel_main+0x14e>
c000a0ab:	83 ec 0c             	sub    esp,0xc
c000a0ae:	68 0f 3d 02 c0       	push   0xc0023d0f
c000a0b3:	e8 a9 fc ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a0b8:	83 c4 10             	add    esp,0x10
c000a0bb:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a0c2:	0f 85 41 fe ff ff    	jne    c0009f09 <kernel_main+0x13c>
c000a0c8:	eb 04                	jmp    c000a0ce <kernel_main+0x301>
c000a0ca:	3c 1c                	cmp    al,0x1c
c000a0cc:	74 06                	je     c000a0d4 <kernel_main+0x307>
c000a0ce:	e4 60                	in     al,0x60
c000a0d0:	3c 5a                	cmp    al,0x5a
c000a0d2:	75 f6                	jne    c000a0ca <kernel_main+0x2fd>
c000a0d4:	e4 60                	in     al,0x60
c000a0d6:	3c 5a                	cmp    al,0x5a
c000a0d8:	74 fa                	je     c000a0d4 <kernel_main+0x307>
c000a0da:	3c 1c                	cmp    al,0x1c
c000a0dc:	74 f6                	je     c000a0d4 <kernel_main+0x307>
c000a0de:	e9 26 fe ff ff       	jmp    c0009f09 <kernel_main+0x13c>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 f1 3c 02 c0       	push   0xc0023cf1
c000a0eb:	e8 71 fc ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a0f0:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c000a0f6:	83 c4 10             	add    esp,0x10
c000a0f9:	f6 c2 80             	test   dl,0x80
c000a0fc:	74 18                	je     c000a116 <kernel_main+0x349>
c000a0fe:	0f b6 05 20 6f 02 c0 	movzx  eax,BYTE PTR ds:0xc0026f20
c000a105:	84 c0                	test   al,al
c000a107:	0f 85 4d fd ff ff    	jne    c0009e5a <kernel_main+0x8d>
c000a10d:	e9 ba fd ff ff       	jmp    c0009ecc <kernel_main+0xff>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 06                	je     c000a11c <kernel_main+0x34f>
c000a116:	e4 60                	in     al,0x60
c000a118:	3c 5a                	cmp    al,0x5a
c000a11a:	75 f6                	jne    c000a112 <kernel_main+0x345>
c000a11c:	e4 60                	in     al,0x60
c000a11e:	3c 5a                	cmp    al,0x5a
c000a120:	74 fa                	je     c000a11c <kernel_main+0x34f>
c000a122:	3c 1c                	cmp    al,0x1c
c000a124:	74 f6                	je     c000a11c <kernel_main+0x34f>
c000a126:	eb d6                	jmp    c000a0fe <kernel_main+0x331>
c000a128:	83 ec 0c             	sub    esp,0xc
c000a12b:	68 e2 3c 02 c0       	push   0xc0023ce2
c000a130:	e8 2c fc ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a13f:	0f 85 f8 fc ff ff    	jne    c0009e3d <kernel_main+0x70>
c000a145:	eb 04                	jmp    c000a14b <kernel_main+0x37e>
c000a147:	3c 1c                	cmp    al,0x1c
c000a149:	74 06                	je     c000a151 <kernel_main+0x384>
c000a14b:	e4 60                	in     al,0x60
c000a14d:	3c 5a                	cmp    al,0x5a
c000a14f:	75 f6                	jne    c000a147 <kernel_main+0x37a>
c000a151:	e4 60                	in     al,0x60
c000a153:	3c 5a                	cmp    al,0x5a
c000a155:	74 fa                	je     c000a151 <kernel_main+0x384>
c000a157:	3c 1c                	cmp    al,0x1c
c000a159:	74 f6                	je     c000a151 <kernel_main+0x384>
c000a15b:	e9 dd fc ff ff       	jmp    c0009e3d <kernel_main+0x70>
c000a160:	83 ec 0c             	sub    esp,0xc
c000a163:	68 cf 3c 02 c0       	push   0xc0023ccf
c000a168:	e8 f4 fb ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c000a16d:	83 c4 10             	add    esp,0x10
c000a170:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c000a177:	0f 85 69 fc ff ff    	jne    c0009de6 <kernel_main+0x19>
c000a17d:	eb 04                	jmp    c000a183 <kernel_main+0x3b6>
c000a17f:	3c 1c                	cmp    al,0x1c
c000a181:	74 06                	je     c000a189 <kernel_main+0x3bc>
c000a183:	e4 60                	in     al,0x60
c000a185:	3c 5a                	cmp    al,0x5a
c000a187:	75 f6                	jne    c000a17f <kernel_main+0x3b2>
c000a189:	e4 60                	in     al,0x60
c000a18b:	3c 5a                	cmp    al,0x5a
c000a18d:	74 fa                	je     c000a189 <kernel_main+0x3bc>
c000a18f:	3c 1c                	cmp    al,0x1c
c000a191:	74 f6                	je     c000a189 <kernel_main+0x3bc>
c000a193:	e9 4e fc ff ff       	jmp    c0009de6 <kernel_main+0x19>

c000a198 <Phys::allocateDMA(unsigned long)>:
c000a198:	55                   	push   ebp
c000a199:	31 ed                	xor    ebp,ebp
c000a19b:	57                   	push   edi
c000a19c:	56                   	push   esi
c000a19d:	53                   	push   ebx
c000a19e:	31 db                	xor    ebx,ebx
c000a1a0:	83 ec 28             	sub    esp,0x28
c000a1a3:	68 73 3d 02 c0       	push   0xc0023d73
c000a1a8:	e8 66 2e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a1ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a1b1:	83 c4 10             	add    esp,0x10
c000a1b4:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a1ba:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a1c2:	c1 ef 0c             	shr    edi,0xc
c000a1c5:	31 c0                	xor    eax,eax
c000a1c7:	eb 19                	jmp    c000a1e2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1c9:	85 c0                	test   eax,eax
c000a1cb:	75 06                	jne    c000a1d3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a1cd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a1d1:	89 dd                	mov    ebp,ebx
c000a1d3:	8d 70 01             	lea    esi,[eax+0x1]
c000a1d6:	39 f7                	cmp    edi,esi
c000a1d8:	74 3f                	je     c000a219 <Phys::allocateDMA(unsigned long)+0x81>
c000a1da:	89 f0                	mov    eax,esi
c000a1dc:	43                   	inc    ebx
c000a1dd:	83 fb 0f             	cmp    ebx,0xf
c000a1e0:	7f 11                	jg     c000a1f3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a1e2:	80 bb dc 7c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8324],0x0
c000a1e9:	74 de                	je     c000a1c9 <Phys::allocateDMA(unsigned long)+0x31>
c000a1eb:	31 c0                	xor    eax,eax
c000a1ed:	43                   	inc    ebx
c000a1ee:	83 fb 0f             	cmp    ebx,0xf
c000a1f1:	7e ef                	jle    c000a1e2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1f3:	83 ec 0c             	sub    esp,0xc
c000a1f6:	68 a3 3d 02 c0       	push   0xc0023da3
c000a1fb:	e8 13 2e 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a200:	c7 04 24 60 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e60
c000a207:	e8 65 ab 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a20c:	83 c4 10             	add    esp,0x10
c000a20f:	31 c0                	xor    eax,eax
c000a211:	83 c4 1c             	add    esp,0x1c
c000a214:	5b                   	pop    ebx
c000a215:	5e                   	pop    esi
c000a216:	5f                   	pop    edi
c000a217:	5d                   	pop    ebp
c000a218:	c3                   	ret    
c000a219:	89 e9                	mov    ecx,ebp
c000a21b:	c1 f9 04             	sar    ecx,0x4
c000a21e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a222:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a226:	89 ca                	mov    edx,ecx
c000a228:	4a                   	dec    edx
c000a229:	79 03                	jns    c000a22e <Phys::allocateDMA(unsigned long)+0x96>
c000a22b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a22e:	c1 fa 04             	sar    edx,0x4
c000a231:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a235:	74 08                	je     c000a23f <Phys::allocateDMA(unsigned long)+0xa7>
c000a237:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a23b:	31 c0                	xor    eax,eax
c000a23d:	eb ae                	jmp    c000a1ed <Phys::allocateDMA(unsigned long)+0x55>
c000a23f:	85 f6                	test   esi,esi
c000a241:	74 15                	je     c000a258 <Phys::allocateDMA(unsigned long)+0xc0>
c000a243:	8d 95 dc 7c 02 c0    	lea    edx,[ebp-0x3ffd8324]
c000a249:	8d 84 05 dd 7c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8323]
c000a250:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a253:	42                   	inc    edx
c000a254:	39 d0                	cmp    eax,edx
c000a256:	75 f8                	jne    c000a250 <Phys::allocateDMA(unsigned long)+0xb8>
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	01 3d d4 7c 02 c0    	add    DWORD PTR ds:0xc0027cd4,edi
c000a261:	68 8c 3d 02 c0       	push   0xc0023d8c
c000a266:	e8 a8 2d 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a272:	85 c0                	test   eax,eax
c000a274:	74 23                	je     c000a299 <Phys::allocateDMA(unsigned long)+0x101>
c000a276:	83 ec 0c             	sub    esp,0xc
c000a279:	68 6c 6c 02 c0       	push   0xc0026c6c
c000a27e:	e8 90 2d 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a283:	c7 04 24 60 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e60
c000a28a:	e8 e2 aa 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a28f:	83 c4 10             	add    esp,0x10
c000a292:	89 f0                	mov    eax,esi
c000a294:	e9 43 ff ff ff       	jmp    c000a1dc <Phys::allocateDMA(unsigned long)+0x44>
c000a299:	c1 e5 0c             	shl    ebp,0xc
c000a29c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2a2:	e9 6a ff ff ff       	jmp    c000a211 <Phys::allocateDMA(unsigned long)+0x79>

c000a2a7 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2a7:	83 ec 18             	sub    esp,0x18
c000a2aa:	68 a7 3d 02 c0       	push   0xc0023da7
c000a2af:	e8 5f 2d 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a2b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b8:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a2be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a2c2:	c1 ea 0c             	shr    edx,0xc
c000a2c5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a2ca:	29 15 d4 7c 02 c0    	sub    DWORD PTR ds:0xc0027cd4,edx
c000a2d0:	c1 e8 0c             	shr    eax,0xc
c000a2d3:	83 c4 10             	add    esp,0x10
c000a2d6:	85 d2                	test   edx,edx
c000a2d8:	74 0f                	je     c000a2e9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a2da:	05 dc 7c 02 c0       	add    eax,0xc0027cdc
c000a2df:	01 c2                	add    edx,eax
c000a2e1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a2e4:	40                   	inc    eax
c000a2e5:	39 d0                	cmp    eax,edx
c000a2e7:	75 f8                	jne    c000a2e1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a2e9:	83 c4 0c             	add    esp,0xc
c000a2ec:	c3                   	ret    

c000a2ed <Phys::setPageState(unsigned long, bool)>:
c000a2ed:	56                   	push   esi
c000a2ee:	ba 01 00 00 00       	mov    edx,0x1
c000a2f3:	53                   	push   ebx
c000a2f4:	8b 35 64 70 02 c0    	mov    esi,DWORD PTR ds:0xc0027064
c000a2fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a302:	89 c8                	mov    eax,ecx
c000a304:	83 e1 07             	and    ecx,0x7
c000a307:	c1 e8 03             	shr    eax,0x3
c000a30a:	d3 e3                	shl    ebx,cl
c000a30c:	01 c6                	add    esi,eax
c000a30e:	d3 e2                	shl    edx,cl
c000a310:	f7 d2                	not    edx
c000a312:	20 16                	and    BYTE PTR [esi],dl
c000a314:	03 05 64 70 02 c0    	add    eax,DWORD PTR ds:0xc0027064
c000a31a:	08 18                	or     BYTE PTR [eax],bl
c000a31c:	5b                   	pop    ebx
c000a31d:	5e                   	pop    esi
c000a31e:	c3                   	ret    

c000a31f <Phys::getPageState(unsigned long)>:
c000a31f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a323:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000a329:	89 c8                	mov    eax,ecx
c000a32b:	83 e1 07             	and    ecx,0x7
c000a32e:	c1 e8 03             	shr    eax,0x3
c000a331:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a335:	d3 f8                	sar    eax,cl
c000a337:	83 e0 01             	and    eax,0x1
c000a33a:	c3                   	ret    

c000a33b <Phys::freePage(unsigned long)>:
c000a33b:	53                   	push   ebx
c000a33c:	83 ec 10             	sub    esp,0x10
c000a33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a343:	53                   	push   ebx
c000a344:	68 bd 3d 02 c0       	push   0xc0023dbd
c000a349:	e8 c5 2c 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a34e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a354:	83 c4 10             	add    esp,0x10
c000a357:	3d ff ff 00 00       	cmp    eax,0xffff
c000a35c:	76 3d                	jbe    c000a39b <Phys::freePage(unsigned long)+0x60>
c000a35e:	83 ec 0c             	sub    esp,0xc
c000a361:	c1 eb 0c             	shr    ebx,0xc
c000a364:	53                   	push   ebx
c000a365:	e8 b5 ff ff ff       	call   c000a31f <Phys::getPageState(unsigned long)>
c000a36a:	83 c4 10             	add    esp,0x10
c000a36d:	84 c0                	test   al,al
c000a36f:	74 19                	je     c000a38a <Phys::freePage(unsigned long)+0x4f>
c000a371:	83 ec 08             	sub    esp,0x8
c000a374:	ff 0d d4 7c 02 c0    	dec    DWORD PTR ds:0xc0027cd4
c000a37a:	6a 00                	push   0x0
c000a37c:	53                   	push   ebx
c000a37d:	e8 6b ff ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	83 c4 08             	add    esp,0x8
c000a388:	5b                   	pop    ebx
c000a389:	c3                   	ret    
c000a38a:	c7 44 24 10 e7 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023de7
c000a392:	83 c4 08             	add    esp,0x8
c000a395:	5b                   	pop    ebx
c000a396:	e9 d6 a9 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c000a39b:	83 ec 08             	sub    esp,0x8
c000a39e:	53                   	push   ebx
c000a39f:	68 d0 3d 02 c0       	push   0xc0023dd0
c000a3a4:	e8 6a 2c 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a3a9:	58                   	pop    eax
c000a3aa:	5a                   	pop    edx
c000a3ab:	68 00 10 00 00       	push   0x1000
c000a3b0:	53                   	push   ebx
c000a3b1:	e8 f1 fe ff ff       	call   c000a2a7 <Phys::freeDMA(unsigned long, unsigned long)>
c000a3b6:	83 c4 10             	add    esp,0x10
c000a3b9:	83 c4 08             	add    esp,0x8
c000a3bc:	5b                   	pop    ebx
c000a3bd:	c3                   	ret    

c000a3be <Phys::allocatePage()>:
c000a3be:	56                   	push   esi
c000a3bf:	53                   	push   ebx
c000a3c0:	83 ec 14             	sub    esp,0x14
c000a3c3:	8b 35 c8 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027cc8
c000a3c9:	89 f3                	mov    ebx,esi
c000a3cb:	eb 0a                	jmp    c000a3d7 <Phys::allocatePage()+0x19>
c000a3cd:	89 1d c8 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc8,ebx
c000a3d3:	39 de                	cmp    esi,ebx
c000a3d5:	74 24                	je     c000a3fb <Phys::allocatePage()+0x3d>
c000a3d7:	53                   	push   ebx
c000a3d8:	e8 42 ff ff ff       	call   c000a31f <Phys::getPageState(unsigned long)>
c000a3dd:	5a                   	pop    edx
c000a3de:	84 c0                	test   al,al
c000a3e0:	74 69                	je     c000a44b <Phys::allocatePage()+0x8d>
c000a3e2:	43                   	inc    ebx
c000a3e3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a3e9:	75 e2                	jne    c000a3cd <Phys::allocatePage()+0xf>
c000a3eb:	31 db                	xor    ebx,ebx
c000a3ed:	c7 05 c8 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027cc8,0x0
c000a3f7:	39 de                	cmp    esi,ebx
c000a3f9:	75 dc                	jne    c000a3d7 <Phys::allocatePage()+0x19>
c000a3fb:	83 ec 0c             	sub    esp,0xc
c000a3fe:	80 35 ec 7c 02 c0 01 	xor    BYTE PTR ds:0xc0027cec,0x1
c000a405:	68 88 3e 02 c0       	push   0xc0023e88
c000a40a:	e8 04 2c 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a40f:	58                   	pop    eax
c000a410:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a415:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a418:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a41e:	e8 7f 28 00 00       	call   c000cca2 <VAS::scanForEviction()>
c000a423:	83 c4 10             	add    esp,0x10
c000a426:	85 c0                	test   eax,eax
c000a428:	75 62                	jne    c000a48c <Phys::allocatePage()+0xce>
c000a42a:	83 ec 0c             	sub    esp,0xc
c000a42d:	68 ac 3e 02 c0       	push   0xc0023eac
c000a432:	e8 3a a9 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a437:	83 c4 10             	add    esp,0x10
c000a43a:	8b 1d c8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027cc8
c000a440:	53                   	push   ebx
c000a441:	e8 d9 fe ff ff       	call   c000a31f <Phys::getPageState(unsigned long)>
c000a446:	5a                   	pop    edx
c000a447:	84 c0                	test   al,al
c000a449:	75 97                	jne    c000a3e2 <Phys::allocatePage()+0x24>
c000a44b:	6a 01                	push   0x1
c000a44d:	53                   	push   ebx
c000a44e:	e8 9a fe ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a453:	5a                   	pop    edx
c000a454:	a1 d4 7c 02 c0       	mov    eax,ds:0xc0027cd4
c000a459:	59                   	pop    ecx
c000a45a:	40                   	inc    eax
c000a45b:	8b 15 c8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc8
c000a461:	a3 d4 7c 02 c0       	mov    ds:0xc0027cd4,eax
c000a466:	c1 e2 0c             	shl    edx,0xc
c000a469:	52                   	push   edx
c000a46a:	ff 35 d8 7c 02 c0    	push   DWORD PTR ds:0xc0027cd8
c000a470:	50                   	push   eax
c000a471:	68 fd 3d 02 c0       	push   0xc0023dfd
c000a476:	e8 98 2b 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a47b:	a1 c8 7c 02 c0       	mov    eax,ds:0xc0027cc8
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	c1 e0 0c             	shl    eax,0xc
c000a486:	83 c4 14             	add    esp,0x14
c000a489:	5b                   	pop    ebx
c000a48a:	5e                   	pop    esi
c000a48b:	c3                   	ret    
c000a48c:	83 ec 08             	sub    esp,0x8
c000a48f:	89 c2                	mov    edx,eax
c000a491:	6a 01                	push   0x1
c000a493:	c1 ea 0c             	shr    edx,0xc
c000a496:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a49a:	52                   	push   edx
c000a49b:	e8 4d fe ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a4a0:	83 c4 10             	add    esp,0x10
c000a4a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4a7:	eb dd                	jmp    c000a486 <Phys::allocatePage()+0xc8>

c000a4a9 <Phys::allocateContiguousPages(int)>:
c000a4a9:	57                   	push   edi
c000a4aa:	56                   	push   esi
c000a4ab:	53                   	push   ebx
c000a4ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a4b0:	fa                   	cli    
c000a4b1:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000a4b7:	31 db                	xor    ebx,ebx
c000a4b9:	85 db                	test   ebx,ebx
c000a4bb:	75 11                	jne    c000a4ce <Phys::allocateContiguousPages(int)+0x25>
c000a4bd:	e8 fc fe ff ff       	call   c000a3be <Phys::allocatePage()>
c000a4c2:	83 fe 01             	cmp    esi,0x1
c000a4c5:	89 c7                	mov    edi,eax
c000a4c7:	74 21                	je     c000a4ea <Phys::allocateContiguousPages(int)+0x41>
c000a4c9:	bb 01 00 00 00       	mov    ebx,0x1
c000a4ce:	e8 eb fe ff ff       	call   c000a3be <Phys::allocatePage()>
c000a4d3:	89 da                	mov    edx,ebx
c000a4d5:	c1 e2 0c             	shl    edx,0xc
c000a4d8:	01 fa                	add    edx,edi
c000a4da:	39 c2                	cmp    edx,eax
c000a4dc:	74 20                	je     c000a4fe <Phys::allocateContiguousPages(int)+0x55>
c000a4de:	bb 01 00 00 00       	mov    ebx,0x1
c000a4e3:	89 c7                	mov    edi,eax
c000a4e5:	83 fe 01             	cmp    esi,0x1
c000a4e8:	75 e4                	jne    c000a4ce <Phys::allocateContiguousPages(int)+0x25>
c000a4ea:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000a4ef:	48                   	dec    eax
c000a4f0:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000a4f5:	75 01                	jne    c000a4f8 <Phys::allocateContiguousPages(int)+0x4f>
c000a4f7:	fb                   	sti    
c000a4f8:	89 f8                	mov    eax,edi
c000a4fa:	5b                   	pop    ebx
c000a4fb:	5e                   	pop    esi
c000a4fc:	5f                   	pop    edi
c000a4fd:	c3                   	ret    
c000a4fe:	43                   	inc    ebx
c000a4ff:	39 f3                	cmp    ebx,esi
c000a501:	75 b6                	jne    c000a4b9 <Phys::allocateContiguousPages(int)+0x10>
c000a503:	eb e5                	jmp    c000a4ea <Phys::allocateContiguousPages(int)+0x41>

c000a505 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a505:	56                   	push   esi
c000a506:	53                   	push   ebx
c000a507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a50b:	39 1d cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,ebx
c000a511:	73 06                	jae    c000a519 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a513:	89 1d cc 7c 02 c0    	mov    DWORD PTR ds:0xc0027ccc,ebx
c000a519:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a51d:	c1 eb 0c             	shr    ebx,0xc
c000a520:	c1 e8 0c             	shr    eax,0xc
c000a523:	39 d8                	cmp    eax,ebx
c000a525:	73 13                	jae    c000a53a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a527:	6a 00                	push   0x0
c000a529:	8d 70 01             	lea    esi,[eax+0x1]
c000a52c:	50                   	push   eax
c000a52d:	e8 bb fd ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a532:	5a                   	pop    edx
c000a533:	89 f0                	mov    eax,esi
c000a535:	59                   	pop    ecx
c000a536:	39 f3                	cmp    ebx,esi
c000a538:	75 ed                	jne    c000a527 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a53a:	5b                   	pop    ebx
c000a53b:	5e                   	pop    esi
c000a53c:	c3                   	ret    

c000a53d <Phys::physicalMemorySetup(unsigned int)>:
c000a53d:	55                   	push   ebp
c000a53e:	57                   	push   edi
c000a53f:	56                   	push   esi
c000a540:	53                   	push   ebx
c000a541:	31 db                	xor    ebx,ebx
c000a543:	83 ec 40             	sub    esp,0x40
c000a546:	6a 10                	push   0x10
c000a548:	6a 00                	push   0x0
c000a54a:	68 dc 7c 02 c0       	push   0xc0027cdc
c000a54f:	e8 28 61 ff ff       	call   c000067c <memset>
c000a554:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a558:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a55d:	05 00 10 00 00       	add    eax,0x1000
c000a562:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a566:	5a                   	pop    edx
c000a567:	59                   	pop    ecx
c000a568:	50                   	push   eax
c000a569:	68 1b 3e 02 c0       	push   0xc0023e1b
c000a56e:	e8 a0 2a 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	83 ec 08             	sub    esp,0x8
c000a579:	6a 01                	push   0x1
c000a57b:	53                   	push   ebx
c000a57c:	43                   	inc    ebx
c000a57d:	e8 6b fd ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a582:	83 c4 10             	add    esp,0x10
c000a585:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a58b:	75 e9                	jne    c000a576 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a58d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a594:	66 85 c0             	test   ax,ax
c000a597:	0f 84 8e 01 00 00    	je     c000a72b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a59d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5ad:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a5be:	eb 15                	jmp    c000a5d5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a5c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a5c4:	83 c3 18             	add    ebx,0x18
c000a5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a5cb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a5cf:	0f 84 66 01 00 00    	je     c000a73b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5d5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a5d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a5db:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a5de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a5e8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a5eb:	01 f0                	add    eax,esi
c000a5ed:	55                   	push   ebp
c000a5ee:	11 fa                	adc    edx,edi
c000a5f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5fc:	56                   	push   esi
c000a5fd:	68 dc 3e 02 c0       	push   0xc0023edc
c000a602:	e8 0c 2a 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	09 f8                	or     eax,edi
c000a610:	0f 85 25 01 00 00    	jne    c000a73b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a616:	4d                   	dec    ebp
c000a617:	75 a7                	jne    c000a5c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a619:	ba 00 00 08 00       	mov    edx,0x80000
c000a61e:	89 c1                	mov    ecx,eax
c000a620:	39 f2                	cmp    edx,esi
c000a622:	19 f9                	sbb    ecx,edi
c000a624:	0f 82 a7 00 00 00    	jb     c000a6d1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a62a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a62e:	89 c1                	mov    ecx,eax
c000a630:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a634:	0f 83 97 00 00 00    	jae    c000a6d1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a63a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a63f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a643:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a647:	39 fa                	cmp    edx,edi
c000a649:	19 e8                	sbb    eax,ebp
c000a64b:	0f 82 9a 01 00 00    	jb     c000a7eb <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a651:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a655:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a659:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a65f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a664:	83 d5 ff             	adc    ebp,0xffffffff
c000a667:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a66b:	31 c0                	xor    eax,eax
c000a66d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a671:	39 fa                	cmp    edx,edi
c000a673:	89 c1                	mov    ecx,eax
c000a675:	19 e9                	sbb    ecx,ebp
c000a677:	0f 83 43 ff ff ff    	jae    c000a5c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a67d:	be 00 00 08 00       	mov    esi,0x80000
c000a682:	51                   	push   ecx
c000a683:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a687:	57                   	push   edi
c000a688:	56                   	push   esi
c000a689:	68 00 3f 02 c0       	push   0xc0023f00
c000a68e:	e8 80 29 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a693:	5d                   	pop    ebp
c000a694:	58                   	pop    eax
c000a695:	57                   	push   edi
c000a696:	56                   	push   esi
c000a697:	e8 69 fe ff ff       	call   c000a505 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a69c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6a4:	83 c4 0c             	add    esp,0xc
c000a6a7:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6ab:	03 05 d8 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027cd8
c000a6b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a6b8:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a6bd:	52                   	push   edx
c000a6be:	50                   	push   eax
c000a6bf:	68 41 3e 02 c0       	push   0xc0023e41
c000a6c4:	e8 4a 29 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	e9 ef fe ff ff       	jmp    c000a5c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6d1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a6d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a6dd:	39 ea                	cmp    edx,ebp
c000a6df:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a6e3:	0f 82 d7 fe ff ff    	jb     c000a5c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6e9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6ee:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6f2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6f6:	0f 83 c4 fe ff ff    	jae    c000a5c0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6fc:	39 ee                	cmp    esi,ebp
c000a6fe:	89 f8                	mov    eax,edi
c000a700:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a704:	0f 83 78 ff ff ff    	jae    c000a682 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a70a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a70e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a712:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a716:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a71a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a71e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a726:	e9 57 ff ff ff       	jmp    c000a682 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a72b:	83 ec 0c             	sub    esp,0xc
c000a72e:	68 33 3e 02 c0       	push   0xc0023e33
c000a733:	e8 39 a6 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a738:	83 c4 10             	add    esp,0x10
c000a73b:	83 ec 08             	sub    esp,0x8
c000a73e:	bb 60 00 00 00       	mov    ebx,0x60
c000a743:	6a 00                	push   0x0
c000a745:	6a 06                	push   0x6
c000a747:	e8 a1 fb ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a74c:	58                   	pop    eax
c000a74d:	5a                   	pop    edx
c000a74e:	6a 00                	push   0x0
c000a750:	6a 07                	push   0x7
c000a752:	e8 96 fb ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a757:	83 05 d8 7c 02 c0 02 	add    DWORD PTR ds:0xc0027cd8,0x2
c000a75e:	83 c4 10             	add    esp,0x10
c000a761:	83 ec 08             	sub    esp,0x8
c000a764:	6a 00                	push   0x0
c000a766:	53                   	push   ebx
c000a767:	43                   	inc    ebx
c000a768:	e8 80 fb ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a776:	75 e9                	jne    c000a761 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a778:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a77d:	bb 40 01 00 00       	mov    ebx,0x140
c000a782:	83 c0 20             	add    eax,0x20
c000a785:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a78a:	eb 22                	jmp    c000a7ae <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a78c:	83 ec 08             	sub    esp,0x8
c000a78f:	6a 00                	push   0x0
c000a791:	53                   	push   ebx
c000a792:	43                   	inc    ebx
c000a793:	e8 55 fb ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a798:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a79d:	83 c4 10             	add    esp,0x10
c000a7a0:	40                   	inc    eax
c000a7a1:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a7a7:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a7ac:	74 07                	je     c000a7b5 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a7ae:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a7b3:	7e d7                	jle    c000a78c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a7b5:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a7ba:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a7bf:	7f 22                	jg     c000a7e3 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a7c1:	83 ec 08             	sub    esp,0x8
c000a7c4:	6a 00                	push   0x0
c000a7c6:	53                   	push   ebx
c000a7c7:	43                   	inc    ebx
c000a7c8:	e8 20 fb ff ff       	call   c000a2ed <Phys::setPageState(unsigned long, bool)>
c000a7cd:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	40                   	inc    eax
c000a7d6:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a7dc:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a7e1:	75 d7                	jne    c000a7ba <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a7e3:	83 c4 3c             	add    esp,0x3c
c000a7e6:	5b                   	pop    ebx
c000a7e7:	5e                   	pop    esi
c000a7e8:	5f                   	pop    edi
c000a7e9:	5d                   	pop    ebp
c000a7ea:	c3                   	ret    
c000a7eb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7fb:	e9 51 fe ff ff       	jmp    c000a651 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a800 <Pipe::isAtty()>:
c000a800:	31 c0                	xor    eax,eax
c000a802:	c3                   	ret    
c000a803:	90                   	nop

c000a804 <Pipe::~Pipe()>:
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	ba 6c 3f 02 c0       	mov    edx,0xc0023f6c
c000a80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a810:	89 10                	mov    DWORD PTR [eax],edx
c000a812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a816:	83 ec 0c             	sub    esp,0xc
c000a819:	50                   	push   eax
c000a81a:	e8 39 12 00 00       	call   c000ba58 <UnixFile::~UnixFile()>
c000a81f:	83 c4 10             	add    esp,0x10
c000a822:	90                   	nop
c000a823:	83 c4 0c             	add    esp,0xc
c000a826:	c3                   	ret    
c000a827:	90                   	nop

c000a828 <Pipe::~Pipe()>:
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	83 ec 0c             	sub    esp,0xc
c000a82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a832:	e8 cd ff ff ff       	call   c000a804 <Pipe::~Pipe()>
c000a837:	83 c4 10             	add    esp,0x10
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	6a 20                	push   0x20
c000a83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a843:	e8 ea 26 00 00       	call   c000cf32 <operator delete(void*, unsigned long)>
c000a848:	83 c4 10             	add    esp,0x10
c000a84b:	83 c4 0c             	add    esp,0xc
c000a84e:	c3                   	ret    
c000a84f:	90                   	nop

c000a850 <Pipe::read(unsigned long long, void*, int*)>:
c000a850:	55                   	push   ebp
c000a851:	57                   	push   edi
c000a852:	56                   	push   esi
c000a853:	53                   	push   ebx
c000a854:	83 ec 1c             	sub    esp,0x1c
c000a857:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a85b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a85f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a863:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a866:	89 c8                	mov    eax,ecx
c000a868:	99                   	cdq    
c000a869:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a86d:	74 24                	je     c000a893 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a86f:	39 f9                	cmp    ecx,edi
c000a871:	89 d1                	mov    ecx,edx
c000a873:	19 f1                	sbb    ecx,esi
c000a875:	73 1c                	jae    c000a893 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a877:	fa                   	cli    
c000a878:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000a87e:	e8 6d db 00 00       	call   c00183f0 <schedule()>
c000a883:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000a888:	48                   	dec    eax
c000a889:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000a88e:	75 d3                	jne    c000a863 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a890:	fb                   	sti    
c000a891:	eb d0                	jmp    c000a863 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a893:	39 f8                	cmp    eax,edi
c000a895:	89 d1                	mov    ecx,edx
c000a897:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a89e:	19 f1                	sbb    ecx,esi
c000a8a0:	73 07                	jae    c000a8a9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a8a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8a9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a8ac:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a8af:	29 f7                	sub    edi,esi
c000a8b1:	89 f8                	mov    eax,edi
c000a8b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8b7:	99                   	cdq    
c000a8b8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a8bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8bf:	19 d0                	sbb    eax,edx
c000a8c1:	73 07                	jae    c000a8ca <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a8c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a8ca:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a8cd:	89 ea                	mov    edx,ebp
c000a8cf:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a8d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8d8:	74 0d                	je     c000a8e7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a8da:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a8dd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a8e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a8e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a8e7:	85 d2                	test   edx,edx
c000a8e9:	74 11                	je     c000a8fc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a8eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a8ef:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a8f2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a8f6:	89 d1                	mov    ecx,edx
c000a8f8:	89 c7                	mov    edi,eax
c000a8fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a8fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a8ff:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a902:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a905:	99                   	cdq    
c000a906:	89 f7                	mov    edi,esi
c000a908:	03 04 24             	add    eax,DWORD PTR [esp]
c000a90b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a90f:	c1 ff 1f             	sar    edi,0x1f
c000a912:	57                   	push   edi
c000a913:	56                   	push   esi
c000a914:	52                   	push   edx
c000a915:	50                   	push   eax
c000a916:	e8 a5 7c 01 00       	call   c00225c0 <__umoddi3>
c000a91b:	83 c4 10             	add    esp,0x10
c000a91e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a921:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a926:	75 10                	jne    c000a938 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a928:	83 ec 0c             	sub    esp,0xc
c000a92b:	68 29 3f 02 c0       	push   0xc0023f29
c000a930:	e8 3c a4 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a935:	83 c4 10             	add    esp,0x10
c000a938:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a93c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a93f:	89 10                	mov    DWORD PTR [eax],edx
c000a941:	83 c4 1c             	add    esp,0x1c
c000a944:	31 c0                	xor    eax,eax
c000a946:	5b                   	pop    ebx
c000a947:	5e                   	pop    esi
c000a948:	5f                   	pop    edi
c000a949:	5d                   	pop    ebp
c000a94a:	c3                   	ret    
c000a94b:	90                   	nop

c000a94c <Pipe::write(unsigned long long, void*, int*)>:
c000a94c:	55                   	push   ebp
c000a94d:	57                   	push   edi
c000a94e:	56                   	push   esi
c000a94f:	53                   	push   ebx
c000a950:	83 ec 1c             	sub    esp,0x1c
c000a953:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a95b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a95e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a962:	89 04 24             	mov    DWORD PTR [esp],eax
c000a965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a969:	89 d8                	mov    eax,ebx
c000a96b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a96e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a972:	89 d6                	mov    esi,edx
c000a974:	89 d7                	mov    edi,edx
c000a976:	c1 ff 1f             	sar    edi,0x1f
c000a979:	03 34 24             	add    esi,DWORD PTR [esp]
c000a97c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a980:	c1 f8 1f             	sar    eax,0x1f
c000a983:	39 f3                	cmp    ebx,esi
c000a985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a98d:	19 f8                	sbb    eax,edi
c000a98f:	b8 01 00 00 00       	mov    eax,0x1
c000a994:	72 6e                	jb     c000aa04 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a996:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a999:	01 d0                	add    eax,edx
c000a99b:	99                   	cdq    
c000a99c:	f7 fb                	idiv   ebx
c000a99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a2:	29 d3                	sub    ebx,edx
c000a9a4:	89 d7                	mov    edi,edx
c000a9a6:	89 de                	mov    esi,ebx
c000a9a8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9ab:	c1 fb 1f             	sar    ebx,0x1f
c000a9ae:	39 f2                	cmp    edx,esi
c000a9b0:	19 d8                	sbb    eax,ebx
c000a9b2:	b8 00 00 00 00       	mov    eax,0x0
c000a9b7:	72 04                	jb     c000a9bd <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a9b9:	89 d0                	mov    eax,edx
c000a9bb:	29 f0                	sub    eax,esi
c000a9bd:	89 d3                	mov    ebx,edx
c000a9bf:	29 c3                	sub    ebx,eax
c000a9c1:	74 0b                	je     c000a9ce <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a9c3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a9c6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a9ca:	89 d9                	mov    ecx,ebx
c000a9cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9ce:	85 c0                	test   eax,eax
c000a9d0:	74 0d                	je     c000a9df <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a9d2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a9d6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a9d9:	89 de                	mov    esi,ebx
c000a9db:	89 c1                	mov    ecx,eax
c000a9dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9df:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a9e2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a9e7:	75 10                	jne    c000a9f9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	68 45 3f 02 c0       	push   0xc0023f45
c000a9f1:	e8 7b a3 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000a9f6:	83 c4 10             	add    esp,0x10
c000a9f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9fd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa00:	89 08                	mov    DWORD PTR [eax],ecx
c000aa02:	31 c0                	xor    eax,eax
c000aa04:	83 c4 1c             	add    esp,0x1c
c000aa07:	5b                   	pop    ebx
c000aa08:	5e                   	pop    esi
c000aa09:	5f                   	pop    edi
c000aa0a:	5d                   	pop    ebp
c000aa0b:	c3                   	ret    

c000aa0c <Pipe::Pipe(int)>:
c000aa0c:	83 ec 0c             	sub    esp,0xc
c000aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa13:	83 ec 08             	sub    esp,0x8
c000aa16:	6a 00                	push   0x0
c000aa18:	50                   	push   eax
c000aa19:	e8 58 0e 00 00       	call   c000b876 <UnixFile::UnixFile(int)>
c000aa1e:	83 c4 10             	add    esp,0x10
c000aa21:	ba 6c 3f 02 c0       	mov    edx,0xc0023f6c
c000aa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2a:	89 10                	mov    DWORD PTR [eax],edx
c000aa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa46:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aa4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa51:	83 ec 0c             	sub    esp,0xc
c000aa54:	50                   	push   eax
c000aa55:	e8 ad f2 ff ff       	call   c0009d07 <malloc>
c000aa5a:	83 c4 10             	add    esp,0x10
c000aa5d:	89 c2                	mov    edx,eax
c000aa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa6e:	90                   	nop
c000aa6f:	83 c4 0c             	add    esp,0xc
c000aa72:	c3                   	ret    
c000aa73:	90                   	nop

c000aa74 <VgaText::isAtty()>:
c000aa74:	b0 01                	mov    al,0x1
c000aa76:	c3                   	ret    
c000aa77:	90                   	nop

c000aa78 <VgaText::~VgaText()>:
c000aa78:	83 ec 0c             	sub    esp,0xc
c000aa7b:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c000aa80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa84:	89 10                	mov    DWORD PTR [eax],edx
c000aa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8a:	83 ec 0c             	sub    esp,0xc
c000aa8d:	50                   	push   eax
c000aa8e:	e8 c5 0f 00 00       	call   c000ba58 <UnixFile::~UnixFile()>
c000aa93:	83 c4 10             	add    esp,0x10
c000aa96:	90                   	nop
c000aa97:	83 c4 0c             	add    esp,0xc
c000aa9a:	c3                   	ret    
c000aa9b:	90                   	nop

c000aa9c <VgaText::~VgaText()>:
c000aa9c:	83 ec 0c             	sub    esp,0xc
c000aa9f:	83 ec 0c             	sub    esp,0xc
c000aaa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaa6:	e8 cd ff ff ff       	call   c000aa78 <VgaText::~VgaText()>
c000aaab:	83 c4 10             	add    esp,0x10
c000aaae:	83 ec 08             	sub    esp,0x8
c000aab1:	68 b4 01 00 00       	push   0x1b4
c000aab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaba:	e8 73 24 00 00       	call   c000cf32 <operator delete(void*, unsigned long)>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	83 c4 0c             	add    esp,0xc
c000aac5:	c3                   	ret    

c000aac6 <VgaText::read(unsigned long long, void*, int*)>:
c000aac6:	83 ec 10             	sub    esp,0x10
c000aac9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aacd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad5:	e8 6b 56 00 00       	call   c0010145 <readKeyboard(VgaText*, char*, unsigned long)>
c000aada:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aade:	89 02                	mov    DWORD PTR [edx],eax
c000aae0:	31 c0                	xor    eax,eax
c000aae2:	83 c4 1c             	add    esp,0x1c
c000aae5:	c3                   	ret    

c000aae6 <setTerminalScrollLock(bool)>:
c000aae6:	c3                   	ret    

c000aae7 <addToTerminalCycle(VgaText*)>:
c000aae7:	8b 15 20 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027d20
c000aaed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf1:	85 d2                	test   edx,edx
c000aaf3:	75 09                	jne    c000aafe <addToTerminalCycle(VgaText*)+0x17>
c000aaf5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aaf8:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000aafd:	c3                   	ret    
c000aafe:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab01:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab04:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab07:	c3                   	ret    

c000ab08 <installVgaTextImplementation()>:
c000ab08:	83 ec 10             	sub    esp,0x10
c000ab0b:	6a 20                	push   0x20
c000ab0d:	6a 00                	push   0x0
c000ab0f:	68 00 7d 02 c0       	push   0xc0027d00
c000ab14:	e8 63 5b ff ff       	call   c000067c <memset>
c000ab19:	83 c4 1c             	add    esp,0x1c
c000ab1c:	c3                   	ret    

c000ab1d <scrollTerminalScrollLock(int)>:
c000ab1d:	c3                   	ret    

c000ab1e <VgaText::updateTitle()>:
c000ab1e:	53                   	push   ebx
c000ab1f:	31 c0                	xor    eax,eax
c000ab21:	83 ec 58             	sub    esp,0x58
c000ab24:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab28:	89 e1                	mov    ecx,esp
c000ab2a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab2e:	40                   	inc    eax
c000ab2f:	83 f8 50             	cmp    eax,0x50
c000ab32:	75 f6                	jne    c000ab2a <VgaText::updateTitle()+0xc>
c000ab34:	31 c0                	xor    eax,eax
c000ab36:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab3d:	84 db                	test   bl,bl
c000ab3f:	74 06                	je     c000ab47 <VgaText::updateTitle()+0x29>
c000ab41:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ab44:	40                   	inc    eax
c000ab45:	eb ef                	jmp    c000ab36 <VgaText::updateTitle()+0x18>
c000ab47:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ab4a:	85 c0                	test   eax,eax
c000ab4c:	74 09                	je     c000ab57 <VgaText::updateTitle()+0x39>
c000ab4e:	53                   	push   ebx
c000ab4f:	53                   	push   ebx
c000ab50:	51                   	push   ecx
c000ab51:	52                   	push   edx
c000ab52:	ff d0                	call   eax
c000ab54:	83 c4 10             	add    esp,0x10
c000ab57:	83 c4 58             	add    esp,0x58
c000ab5a:	5b                   	pop    ebx
c000ab5b:	c3                   	ret    

c000ab5c <VgaText::load()>:
c000ab5c:	53                   	push   ebx
c000ab5d:	31 c0                	xor    eax,eax
c000ab5f:	83 ec 58             	sub    esp,0x58
c000ab62:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab66:	89 e2                	mov    edx,esp
c000ab68:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab6c:	40                   	inc    eax
c000ab6d:	83 f8 50             	cmp    eax,0x50
c000ab70:	75 f6                	jne    c000ab68 <VgaText::load()+0xc>
c000ab72:	31 c0                	xor    eax,eax
c000ab74:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab7b:	84 c9                	test   cl,cl
c000ab7d:	74 06                	je     c000ab85 <VgaText::load()+0x29>
c000ab7f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab82:	40                   	inc    eax
c000ab83:	eb ef                	jmp    c000ab74 <VgaText::load()+0x18>
c000ab85:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab88:	85 c0                	test   eax,eax
c000ab8a:	74 09                	je     c000ab95 <VgaText::load()+0x39>
c000ab8c:	51                   	push   ecx
c000ab8d:	51                   	push   ecx
c000ab8e:	52                   	push   edx
c000ab8f:	53                   	push   ebx
c000ab90:	ff d0                	call   eax
c000ab92:	83 c4 10             	add    esp,0x10
c000ab95:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab98:	85 c0                	test   eax,eax
c000ab9a:	74 09                	je     c000aba5 <VgaText::load()+0x49>
c000ab9c:	83 ec 0c             	sub    esp,0xc
c000ab9f:	53                   	push   ebx
c000aba0:	ff d0                	call   eax
c000aba2:	83 c4 10             	add    esp,0x10
c000aba5:	83 c4 58             	add    esp,0x58
c000aba8:	5b                   	pop    ebx
c000aba9:	c3                   	ret    

c000abaa <VgaText::updateCursor()>:
c000abaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abae:	39 05 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,eax
c000abb4:	75 09                	jne    c000abbf <VgaText::updateCursor()+0x15>
c000abb6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000abb9:	85 c0                	test   eax,eax
c000abbb:	74 02                	je     c000abbf <VgaText::updateCursor()+0x15>
c000abbd:	ff e0                	jmp    eax
c000abbf:	c3                   	ret    

c000abc0 <VgaText::doANSI_SGR(int)>:
c000abc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abc8:	85 d2                	test   edx,edx
c000abca:	75 0b                	jne    c000abd7 <VgaText::doANSI_SGR(int)+0x17>
c000abcc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000abcf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000abd5:	eb 59                	jmp    c000ac30 <VgaText::doANSI_SGR(int)+0x70>
c000abd7:	83 fa 07             	cmp    edx,0x7
c000abda:	75 0b                	jne    c000abe7 <VgaText::doANSI_SGR(int)+0x27>
c000abdc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000abdf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000abe2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000abe5:	eb 49                	jmp    c000ac30 <VgaText::doANSI_SGR(int)+0x70>
c000abe7:	83 fa 1b             	cmp    edx,0x1b
c000abea:	74 e0                	je     c000abcc <VgaText::doANSI_SGR(int)+0xc>
c000abec:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000abef:	83 f9 07             	cmp    ecx,0x7
c000abf2:	77 09                	ja     c000abfd <VgaText::doANSI_SGR(int)+0x3d>
c000abf4:	8b 14 8d a0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f60]
c000abfb:	eb 20                	jmp    c000ac1d <VgaText::doANSI_SGR(int)+0x5d>
c000abfd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac00:	83 f9 07             	cmp    ecx,0x7
c000ac03:	77 09                	ja     c000ac0e <VgaText::doANSI_SGR(int)+0x4e>
c000ac05:	8b 14 8d a0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f60]
c000ac0c:	eb 22                	jmp    c000ac30 <VgaText::doANSI_SGR(int)+0x70>
c000ac0e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac11:	83 f9 07             	cmp    ecx,0x7
c000ac14:	77 0b                	ja     c000ac21 <VgaText::doANSI_SGR(int)+0x61>
c000ac16:	8b 14 95 58 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90a8]
c000ac1d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac20:	c3                   	ret    
c000ac21:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac24:	83 f9 07             	cmp    ecx,0x7
c000ac27:	77 0a                	ja     c000ac33 <VgaText::doANSI_SGR(int)+0x73>
c000ac29:	8b 14 95 30 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90d0]
c000ac30:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac33:	c3                   	ret    

c000ac34 <VgaText::setDefaultBgColour(VgaColour)>:
c000ac34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac3f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac42:	c3                   	ret    
c000ac43:	90                   	nop

c000ac44 <VgaText::setDefaultFgColour(VgaColour)>:
c000ac44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac4c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ac4f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac52:	c3                   	ret    
c000ac53:	90                   	nop

c000ac54 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac54:	53                   	push   ebx
c000ac55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac61:	51                   	push   ecx
c000ac62:	e8 cd ff ff ff       	call   c000ac34 <VgaText::setDefaultBgColour(VgaColour)>
c000ac67:	58                   	pop    eax
c000ac68:	5a                   	pop    edx
c000ac69:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac6d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac71:	5b                   	pop    ebx
c000ac72:	eb d0                	jmp    c000ac44 <VgaText::setDefaultFgColour(VgaColour)>

c000ac74 <VgaText::setTitleTextColour(VgaColour)>:
c000ac74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac7c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac7f:	e9 9a fe ff ff       	jmp    c000ab1e <VgaText::updateTitle()>

c000ac84 <VgaText::setTitleColour(VgaColour)>:
c000ac84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac8c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac8f:	e9 8a fe ff ff       	jmp    c000ab1e <VgaText::updateTitle()>

c000ac94 <VgaText::setTitle(char*)>:
c000ac94:	53                   	push   ebx
c000ac95:	83 ec 10             	sub    esp,0x10
c000ac98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca0:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000aca6:	50                   	push   eax
c000aca7:	e8 8c 5a ff ff       	call   c0000738 <strcpy>
c000acac:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000acb0:	83 c4 18             	add    esp,0x18
c000acb3:	5b                   	pop    ebx
c000acb4:	e9 65 fe ff ff       	jmp    c000ab1e <VgaText::updateTitle()>
c000acb9:	90                   	nop

c000acba <VgaText::combineColours(unsigned char, unsigned char)>:
c000acba:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000acbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000acc3:	83 e0 0f             	and    eax,0xf
c000acc6:	c1 e2 04             	shl    edx,0x4
c000acc9:	09 d0                	or     eax,edx
c000accb:	c3                   	ret    

c000accc <VgaText::scrollScreen()>:
c000accc:	55                   	push   ebp
c000accd:	b9 01 00 00 00       	mov    ecx,0x1
c000acd2:	57                   	push   edi
c000acd3:	56                   	push   esi
c000acd4:	53                   	push   ebx
c000acd5:	83 ec 0c             	sub    esp,0xc
c000acd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000acdc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ace2:	31 ff                	xor    edi,edi
c000ace4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ace7:	83 f9 17             	cmp    ecx,0x17
c000acea:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aced:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000acf4:	75 27                	jne    c000ad1d <VgaText::scrollScreen()+0x51>
c000acf6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000acf9:	01 f5                	add    ebp,esi
c000acfb:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad01:	74 16                	je     c000ad19 <VgaText::scrollScreen()+0x4d>
c000ad03:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad07:	50                   	push   eax
c000ad08:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad0c:	50                   	push   eax
c000ad0d:	e8 a8 ff ff ff       	call   c000acba <VgaText::combineColours(unsigned char, unsigned char)>
c000ad12:	5a                   	pop    edx
c000ad13:	5a                   	pop    edx
c000ad14:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad17:	eb 04                	jmp    c000ad1d <VgaText::scrollScreen()+0x51>
c000ad19:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad1d:	47                   	inc    edi
c000ad1e:	46                   	inc    esi
c000ad1f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad25:	75 bd                	jne    c000ace4 <VgaText::scrollScreen()+0x18>
c000ad27:	41                   	inc    ecx
c000ad28:	83 f9 18             	cmp    ecx,0x18
c000ad2b:	75 af                	jne    c000acdc <VgaText::scrollScreen()+0x10>
c000ad2d:	39 1d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ebx
c000ad33:	75 1b                	jne    c000ad50 <VgaText::scrollScreen()+0x84>
c000ad35:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad39:	74 05                	je     c000ad40 <VgaText::scrollScreen()+0x74>
c000ad3b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad3e:	eb 10                	jmp    c000ad50 <VgaText::scrollScreen()+0x84>
c000ad40:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 09                	je     c000ad50 <VgaText::scrollScreen()+0x84>
c000ad47:	83 ec 0c             	sub    esp,0xc
c000ad4a:	53                   	push   ebx
c000ad4b:	ff d0                	call   eax
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad54:	83 c4 0c             	add    esp,0xc
c000ad57:	5b                   	pop    ebx
c000ad58:	5e                   	pop    esi
c000ad59:	5f                   	pop    edi
c000ad5a:	5d                   	pop    ebp
c000ad5b:	e9 4a fe ff ff       	jmp    c000abaa <VgaText::updateCursor()>

c000ad60 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad65:	c1 e0 08             	shl    eax,0x8
c000ad68:	89 c2                	mov    edx,eax
c000ad6a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad6f:	09 d0                	or     eax,edx
c000ad71:	c3                   	ret    

c000ad72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad72:	56                   	push   esi
c000ad73:	53                   	push   ebx
c000ad74:	51                   	push   ecx
c000ad75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad79:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad7e:	50                   	push   eax
c000ad7f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad84:	50                   	push   eax
c000ad85:	e8 30 ff ff ff       	call   c000acba <VgaText::combineColours(unsigned char, unsigned char)>
c000ad8a:	5b                   	pop    ebx
c000ad8b:	0f b6 c0             	movzx  eax,al
c000ad8e:	5e                   	pop    esi
c000ad8f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad94:	50                   	push   eax
c000ad95:	53                   	push   ebx
c000ad96:	e8 c5 ff ff ff       	call   c000ad60 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad9b:	5a                   	pop    edx
c000ad9c:	5e                   	pop    esi
c000ad9d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ada0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ada6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000adaa:	0f b7 d2             	movzx  edx,dx
c000adad:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000adb1:	39 0d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ecx
c000adb7:	75 10                	jne    c000adc9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000adb9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000adbc:	85 c0                	test   eax,eax
c000adbe:	74 09                	je     c000adc9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000adc0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000adc4:	5a                   	pop    edx
c000adc5:	5b                   	pop    ebx
c000adc6:	5e                   	pop    esi
c000adc7:	ff e0                	jmp    eax
c000adc9:	58                   	pop    eax
c000adca:	5b                   	pop    ebx
c000adcb:	5e                   	pop    esi
c000adcc:	c3                   	ret    
c000adcd:	90                   	nop

c000adce <VgaText::getCursorX()>:
c000adce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000add2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000add5:	c3                   	ret    

c000add6 <VgaText::getCursorY()>:
c000add6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adda:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000addd:	c3                   	ret    

c000adde <VgaText::setCursor(int, int)>:
c000adde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ade2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ade6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ade9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aded:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000adf0:	e9 b5 fd ff ff       	jmp    c000abaa <VgaText::updateCursor()>

c000adf5 <setActiveTerminal(VgaText*)>:
c000adf5:	53                   	push   ebx
c000adf6:	83 ec 08             	sub    esp,0x8
c000adf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adfd:	85 db                	test   ebx,ebx
c000adff:	75 11                	jne    c000ae12 <setActiveTerminal(VgaText*)+0x1d>
c000ae01:	c7 44 24 10 80 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f80
c000ae09:	83 c4 08             	add    esp,0x8
c000ae0c:	5b                   	pop    ebx
c000ae0d:	e9 5f 9f 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c000ae12:	a1 24 7d 02 c0       	mov    eax,ds:0xc0027d24
c000ae17:	85 c0                	test   eax,eax
c000ae19:	74 0c                	je     c000ae27 <setActiveTerminal(VgaText*)+0x32>
c000ae1b:	83 ec 0c             	sub    esp,0xc
c000ae1e:	50                   	push   eax
c000ae1f:	e8 86 fd ff ff       	call   c000abaa <VgaText::updateCursor()>
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	89 1d 24 7d 02 c0    	mov    DWORD PTR ds:0xc0027d24,ebx
c000ae2d:	51                   	push   ecx
c000ae2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae34:	53                   	push   ebx
c000ae35:	e8 a4 ff ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000ae3a:	83 c4 10             	add    esp,0x10
c000ae3d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae41:	75 07                	jne    c000ae4a <setActiveTerminal(VgaText*)+0x55>
c000ae43:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ae4a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae4e:	83 c4 08             	add    esp,0x8
c000ae51:	5b                   	pop    ebx
c000ae52:	e9 05 fd ff ff       	jmp    c000ab5c <VgaText::load()>

c000ae57 <doTerminalCycle()>:
c000ae57:	83 ec 18             	sub    esp,0x18
c000ae5a:	a1 20 7d 02 c0       	mov    eax,ds:0xc0027d20
c000ae5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae62:	50                   	push   eax
c000ae63:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000ae68:	e8 88 ff ff ff       	call   c000adf5 <setActiveTerminal(VgaText*)>
c000ae6d:	83 c4 1c             	add    esp,0x1c
c000ae70:	c3                   	ret    
c000ae71:	90                   	nop

c000ae72 <VgaText::setCursorX(int)>:
c000ae72:	83 ec 10             	sub    esp,0x10
c000ae75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae79:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae80:	50                   	push   eax
c000ae81:	e8 58 ff ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000ae86:	83 c4 1c             	add    esp,0x1c
c000ae89:	c3                   	ret    

c000ae8a <VgaText::setCursorY(int)>:
c000ae8a:	83 ec 10             	sub    esp,0x10
c000ae8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae95:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae98:	50                   	push   eax
c000ae99:	e8 40 ff ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000ae9e:	83 c4 1c             	add    esp,0x1c
c000aea1:	c3                   	ret    

c000aea2 <VgaText::incrementCursor(bool)>:
c000aea2:	56                   	push   esi
c000aea3:	53                   	push   ebx
c000aea4:	51                   	push   ecx
c000aea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aea9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aead:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aeb0:	40                   	inc    eax
c000aeb1:	83 f8 50             	cmp    eax,0x50
c000aeb4:	74 05                	je     c000aebb <VgaText::incrementCursor(bool)+0x19>
c000aeb6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb9:	eb 24                	jmp    c000aedf <VgaText::incrementCursor(bool)+0x3d>
c000aebb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aebe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aec5:	8d 50 01             	lea    edx,[eax+0x1]
c000aec8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000aecb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000aece:	75 0f                	jne    c000aedf <VgaText::incrementCursor(bool)+0x3d>
c000aed0:	83 ec 0c             	sub    esp,0xc
c000aed3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aed6:	53                   	push   ebx
c000aed7:	e8 f0 fd ff ff       	call   c000accc <VgaText::scrollScreen()>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	89 f0                	mov    eax,esi
c000aee1:	84 c0                	test   al,al
c000aee3:	74 0c                	je     c000aef1 <VgaText::incrementCursor(bool)+0x4f>
c000aee5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aee9:	5a                   	pop    edx
c000aeea:	5b                   	pop    ebx
c000aeeb:	5e                   	pop    esi
c000aeec:	e9 b9 fc ff ff       	jmp    c000abaa <VgaText::updateCursor()>
c000aef1:	58                   	pop    eax
c000aef2:	5b                   	pop    ebx
c000aef3:	5e                   	pop    esi
c000aef4:	c3                   	ret    
c000aef5:	90                   	nop

c000aef6 <VgaText::decrementCursor(bool)>:
c000aef6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aefa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aefe:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af01:	85 c0                	test   eax,eax
c000af03:	74 04                	je     c000af09 <VgaText::decrementCursor(bool)+0x13>
c000af05:	48                   	dec    eax
c000af06:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af09:	84 c9                	test   cl,cl
c000af0b:	74 09                	je     c000af16 <VgaText::decrementCursor(bool)+0x20>
c000af0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af11:	e9 94 fc ff ff       	jmp    c000abaa <VgaText::updateCursor()>
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af18:	53                   	push   ebx
c000af19:	83 ec 08             	sub    esp,0x8
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af2c:	3c 07                	cmp    al,0x7
c000af2e:	75 21                	jne    c000af51 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000af30:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000af38:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000af40:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000af48:	83 c4 08             	add    esp,0x8
c000af4b:	5b                   	pop    ebx
c000af4c:	e9 5e 2f 00 00       	jmp    c000deaf <Krnl::beep(int, int, bool)>
c000af51:	3c 0d                	cmp    al,0xd
c000af53:	75 09                	jne    c000af5e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af5c:	eb 2c                	jmp    c000af8a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af5e:	3c 0a                	cmp    al,0xa
c000af60:	75 31                	jne    c000af93 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af62:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af65:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af6c:	8d 50 01             	lea    edx,[eax+0x1]
c000af6f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af72:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af75:	75 0f                	jne    c000af86 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af77:	83 ec 0c             	sub    esp,0xc
c000af7a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af7d:	53                   	push   ebx
c000af7e:	e8 49 fd ff ff       	call   c000accc <VgaText::scrollScreen()>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af8a:	83 c4 08             	add    esp,0x8
c000af8d:	5b                   	pop    ebx
c000af8e:	e9 17 fc ff ff       	jmp    c000abaa <VgaText::updateCursor()>
c000af93:	3c 08                	cmp    al,0x8
c000af95:	75 25                	jne    c000afbc <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af97:	50                   	push   eax
c000af98:	50                   	push   eax
c000af99:	6a 01                	push   0x1
c000af9b:	53                   	push   ebx
c000af9c:	e8 55 ff ff ff       	call   c000aef6 <VgaText::decrementCursor(bool)>
c000afa1:	5a                   	pop    edx
c000afa2:	59                   	pop    ecx
c000afa3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000afa6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000afa9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afaf:	6a 20                	push   0x20
c000afb1:	53                   	push   ebx
c000afb2:	e8 bb fd ff ff       	call   c000ad72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000afb7:	83 c4 28             	add    esp,0x28
c000afba:	5b                   	pop    ebx
c000afbb:	c3                   	ret    
c000afbc:	83 ec 08             	sub    esp,0x8
c000afbf:	0f be c0             	movsx  eax,al
c000afc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000afc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000afc8:	51                   	push   ecx
c000afc9:	52                   	push   edx
c000afca:	50                   	push   eax
c000afcb:	53                   	push   ebx
c000afcc:	e8 a1 fd ff ff       	call   c000ad72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000afd1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000afd5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000afdd:	83 c4 28             	add    esp,0x28
c000afe0:	5b                   	pop    ebx
c000afe1:	e9 bc fe ff ff       	jmp    c000aea2 <VgaText::incrementCursor(bool)>

c000afe6 <VgaText::doUpdate()>:
c000afe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afea:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000afed:	85 c0                	test   eax,eax
c000afef:	74 02                	je     c000aff3 <VgaText::doUpdate()+0xd>
c000aff1:	ff e0                	jmp    eax
c000aff3:	c3                   	ret    

c000aff4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aff4:	55                   	push   ebp
c000aff5:	31 ed                	xor    ebp,ebp
c000aff7:	57                   	push   edi
c000aff8:	56                   	push   esi
c000aff9:	53                   	push   ebx
c000affa:	83 ec 1c             	sub    esp,0x1c
c000affd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b001:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b006:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b00d:	50                   	push   eax
c000b00e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b013:	50                   	push   eax
c000b014:	e8 a1 fc ff ff       	call   c000acba <VgaText::combineColours(unsigned char, unsigned char)>
c000b019:	59                   	pop    ecx
c000b01a:	0f b6 c0             	movzx  eax,al
c000b01d:	5e                   	pop    esi
c000b01e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b023:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b027:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b02a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b02e:	0f b7 f6             	movzx  esi,si
c000b031:	01 f6                	add    esi,esi
c000b033:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b036:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b039:	84 c0                	test   al,al
c000b03b:	0f 84 fd 00 00 00    	je     c000b13e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b041:	3c 0d                	cmp    al,0xd
c000b043:	75 0c                	jne    c000b051 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b045:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b04c:	e9 e7 00 00 00       	jmp    c000b138 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b051:	3c 0a                	cmp    al,0xa
c000b053:	75 47                	jne    c000b09c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b055:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b058:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b05f:	8d 48 01             	lea    ecx,[eax+0x1]
c000b062:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b065:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b068:	75 0f                	jne    c000b079 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b06a:	83 ec 0c             	sub    esp,0xc
c000b06d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b070:	53                   	push   ebx
c000b071:	e8 56 fc ff ff       	call   c000accc <VgaText::scrollScreen()>
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	83 ec 0c             	sub    esp,0xc
c000b07c:	31 ed                	xor    ebp,ebp
c000b07e:	53                   	push   ebx
c000b07f:	e8 26 fb ff ff       	call   c000abaa <VgaText::updateCursor()>
c000b084:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b08f:	0f b7 f6             	movzx  esi,si
c000b092:	01 f6                	add    esi,esi
c000b094:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b097:	e9 9c 00 00 00       	jmp    c000b138 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b09c:	3c 08                	cmp    al,0x8
c000b09e:	75 35                	jne    c000b0d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b0a0:	56                   	push   esi
c000b0a1:	56                   	push   esi
c000b0a2:	6a 01                	push   0x1
c000b0a4:	53                   	push   ebx
c000b0a5:	e8 4c fe ff ff       	call   c000aef6 <VgaText::decrementCursor(bool)>
c000b0aa:	58                   	pop    eax
c000b0ab:	5a                   	pop    edx
c000b0ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b0b5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b0b8:	6a 20                	push   0x20
c000b0ba:	53                   	push   ebx
c000b0bb:	e8 b2 fc ff ff       	call   c000ad72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0c0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0c5:	83 c4 20             	add    esp,0x20
c000b0c8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0cb:	0f b7 f6             	movzx  esi,si
c000b0ce:	01 f6                	add    esi,esi
c000b0d0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0d3:	eb 63                	jmp    c000b138 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0d5:	51                   	push   ecx
c000b0d6:	51                   	push   ecx
c000b0d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0db:	50                   	push   eax
c000b0dc:	e8 7f fc ff ff       	call   c000ad60 <VgaText::combineCharAndColour(char, unsigned char)>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	66 89 06             	mov    WORD PTR [esi],ax
c000b0e7:	39 1d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ebx
c000b0ed:	75 21                	jne    c000b110 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0ef:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0f2:	85 c0                	test   eax,eax
c000b0f4:	74 1a                	je     c000b110 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0f6:	52                   	push   edx
c000b0f7:	52                   	push   edx
c000b0f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0fb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b102:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b106:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b109:	51                   	push   ecx
c000b10a:	53                   	push   ebx
c000b10b:	ff d0                	call   eax
c000b10d:	83 c4 20             	add    esp,0x20
c000b110:	83 c6 02             	add    esi,0x2
c000b113:	50                   	push   eax
c000b114:	50                   	push   eax
c000b115:	6a 00                	push   0x0
c000b117:	53                   	push   ebx
c000b118:	e8 85 fd ff ff       	call   c000aea2 <VgaText::incrementCursor(bool)>
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b124:	75 0d                	jne    c000b133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b126:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b12b:	0f b7 f6             	movzx  esi,si
c000b12e:	01 f6                	add    esi,esi
c000b130:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b133:	bd 01 00 00 00       	mov    ebp,0x1
c000b138:	47                   	inc    edi
c000b139:	e9 f8 fe ff ff       	jmp    c000b036 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	53                   	push   ebx
c000b142:	e8 63 fa ff ff       	call   c000abaa <VgaText::updateCursor()>
c000b147:	83 c4 10             	add    esp,0x10
c000b14a:	89 e8                	mov    eax,ebp
c000b14c:	84 c0                	test   al,al
c000b14e:	74 0c                	je     c000b15c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	53                   	push   ebx
c000b154:	e8 8d fe ff ff       	call   c000afe6 <VgaText::doUpdate()>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b163:	83 c4 1c             	add    esp,0x1c
c000b166:	5b                   	pop    ebx
c000b167:	5e                   	pop    esi
c000b168:	5f                   	pop    edi
c000b169:	5d                   	pop    ebp
c000b16a:	c3                   	ret    
c000b16b:	90                   	nop

c000b16c <VgaText::clearScreen()>:
c000b16c:	57                   	push   edi
c000b16d:	56                   	push   esi
c000b16e:	31 f6                	xor    esi,esi
c000b170:	53                   	push   ebx
c000b171:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b175:	52                   	push   edx
c000b176:	6a 00                	push   0x0
c000b178:	6a 00                	push   0x0
c000b17a:	53                   	push   ebx
c000b17b:	e8 5e fc ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000b180:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b18d:	7e 20                	jle    c000b1af <VgaText::clearScreen()+0x43>
c000b18f:	31 ff                	xor    edi,edi
c000b191:	50                   	push   eax
c000b192:	50                   	push   eax
c000b193:	56                   	push   esi
c000b194:	57                   	push   edi
c000b195:	47                   	inc    edi
c000b196:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b199:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b19c:	6a 20                	push   0x20
c000b19e:	53                   	push   ebx
c000b19f:	e8 ce fb ff ff       	call   c000ad72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1a4:	83 c4 20             	add    esp,0x20
c000b1a7:	83 ff 50             	cmp    edi,0x50
c000b1aa:	75 e5                	jne    c000b191 <VgaText::clearScreen()+0x25>
c000b1ac:	46                   	inc    esi
c000b1ad:	eb db                	jmp    c000b18a <VgaText::clearScreen()+0x1e>
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	53                   	push   ebx
c000b1b3:	e8 2e fe ff ff       	call   c000afe6 <VgaText::doUpdate()>
c000b1b8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	5b                   	pop    ebx
c000b1c3:	5e                   	pop    esi
c000b1c4:	5f                   	pop    edi
c000b1c5:	c3                   	ret    

c000b1c6 <VgaText::putchar(char)>:
c000b1c6:	56                   	push   esi
c000b1c7:	53                   	push   ebx
c000b1c8:	83 ec 14             	sub    esp,0x14
c000b1cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b1d3:	3c 5b                	cmp    al,0x5b
c000b1d5:	75 18                	jne    c000b1ef <VgaText::putchar(char)+0x29>
c000b1d7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b1db:	74 1f                	je     c000b1fc <VgaText::putchar(char)+0x36>
c000b1dd:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b1e3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b1ea:	e9 bd 00 00 00       	jmp    c000b2ac <VgaText::putchar(char)+0xe6>
c000b1ef:	3c 1b                	cmp    al,0x1b
c000b1f1:	75 09                	jne    c000b1fc <VgaText::putchar(char)+0x36>
c000b1f3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1f7:	e9 b0 00 00 00       	jmp    c000b2ac <VgaText::putchar(char)+0xe6>
c000b1fc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1ff:	84 c9                	test   cl,cl
c000b201:	0f 84 92 00 00 00    	je     c000b299 <VgaText::putchar(char)+0xd3>
c000b207:	8d 50 c0             	lea    edx,[eax-0x40]
c000b20a:	80 fa 3e             	cmp    dl,0x3e
c000b20d:	77 76                	ja     c000b285 <VgaText::putchar(char)+0xbf>
c000b20f:	3c 6d                	cmp    al,0x6d
c000b211:	75 47                	jne    c000b25a <VgaText::putchar(char)+0x94>
c000b213:	31 f6                	xor    esi,esi
c000b215:	31 d2                	xor    edx,edx
c000b217:	31 c0                	xor    eax,eax
c000b219:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b21c:	7e 2d                	jle    c000b24b <VgaText::putchar(char)+0x85>
c000b21e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b223:	80 fa 3b             	cmp    dl,0x3b
c000b226:	75 17                	jne    c000b23f <VgaText::putchar(char)+0x79>
c000b228:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b22c:	50                   	push   eax
c000b22d:	53                   	push   ebx
c000b22e:	e8 8d f9 ff ff       	call   c000abc0 <VgaText::doANSI_SGR(int)>
c000b233:	59                   	pop    ecx
c000b234:	31 d2                	xor    edx,edx
c000b236:	58                   	pop    eax
c000b237:	31 c0                	xor    eax,eax
c000b239:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b23d:	eb 09                	jmp    c000b248 <VgaText::putchar(char)+0x82>
c000b23f:	6b c0 0a             	imul   eax,eax,0xa
c000b242:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b246:	88 ca                	mov    dl,cl
c000b248:	46                   	inc    esi
c000b249:	eb ce                	jmp    c000b219 <VgaText::putchar(char)+0x53>
c000b24b:	84 d2                	test   dl,dl
c000b24d:	74 2e                	je     c000b27d <VgaText::putchar(char)+0xb7>
c000b24f:	50                   	push   eax
c000b250:	53                   	push   ebx
c000b251:	e8 6a f9 ff ff       	call   c000abc0 <VgaText::doANSI_SGR(int)>
c000b256:	58                   	pop    eax
c000b257:	5a                   	pop    edx
c000b258:	eb 23                	jmp    c000b27d <VgaText::putchar(char)+0xb7>
c000b25a:	3c 4a                	cmp    al,0x4a
c000b25c:	75 1f                	jne    c000b27d <VgaText::putchar(char)+0xb7>
c000b25e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b262:	75 19                	jne    c000b27d <VgaText::putchar(char)+0xb7>
c000b264:	83 ec 0c             	sub    esp,0xc
c000b267:	53                   	push   ebx
c000b268:	e8 ff fe ff ff       	call   c000b16c <VgaText::clearScreen()>
c000b26d:	83 c4 0c             	add    esp,0xc
c000b270:	6a 00                	push   0x0
c000b272:	6a 00                	push   0x0
c000b274:	53                   	push   ebx
c000b275:	e8 64 fb ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000b27a:	83 c4 10             	add    esp,0x10
c000b27d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b283:	eb 27                	jmp    c000b2ac <VgaText::putchar(char)+0xe6>
c000b285:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b288:	83 fa 0e             	cmp    edx,0xe
c000b28b:	7f 1f                	jg     c000b2ac <VgaText::putchar(char)+0xe6>
c000b28d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b290:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b293:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b297:	eb 13                	jmp    c000b2ac <VgaText::putchar(char)+0xe6>
c000b299:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b29c:	0f be c0             	movsx  eax,al
c000b29f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b2a2:	50                   	push   eax
c000b2a3:	53                   	push   ebx
c000b2a4:	e8 6f fc ff ff       	call   c000af18 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	83 c4 14             	add    esp,0x14
c000b2af:	5b                   	pop    ebx
c000b2b0:	5e                   	pop    esi
c000b2b1:	c3                   	ret    

c000b2b2 <VgaText::putx(unsigned int)>:
c000b2b2:	57                   	push   edi
c000b2b3:	b9 11 00 00 00       	mov    ecx,0x11
c000b2b8:	56                   	push   esi
c000b2b9:	be 8e 3f 02 c0       	mov    esi,0xc0023f8e
c000b2be:	53                   	push   ebx
c000b2bf:	83 ec 20             	sub    esp,0x20
c000b2c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b2c6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b2ca:	fc                   	cld    
c000b2cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b2cd:	be 08 00 00 00       	mov    esi,0x8
c000b2d2:	50                   	push   eax
c000b2d3:	50                   	push   eax
c000b2d4:	89 d8                	mov    eax,ebx
c000b2d6:	c1 e3 04             	shl    ebx,0x4
c000b2d9:	c1 e8 1c             	shr    eax,0x1c
c000b2dc:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b2e1:	50                   	push   eax
c000b2e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b2e6:	e8 db fe ff ff       	call   c000b1c6 <VgaText::putchar(char)>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	4e                   	dec    esi
c000b2ef:	75 e1                	jne    c000b2d2 <VgaText::putx(unsigned int)+0x20>
c000b2f1:	83 c4 20             	add    esp,0x20
c000b2f4:	5b                   	pop    ebx
c000b2f5:	5e                   	pop    esi
c000b2f6:	5f                   	pop    edi
c000b2f7:	c3                   	ret    

c000b2f8 <VgaText::puts(char const*)>:
c000b2f8:	53                   	push   ebx
c000b2f9:	83 ec 08             	sub    esp,0x8
c000b2fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b300:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b303:	84 c0                	test   al,al
c000b305:	74 12                	je     c000b319 <VgaText::puts(char const*)+0x21>
c000b307:	43                   	inc    ebx
c000b308:	51                   	push   ecx
c000b309:	51                   	push   ecx
c000b30a:	50                   	push   eax
c000b30b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b30f:	e8 b2 fe ff ff       	call   c000b1c6 <VgaText::putchar(char)>
c000b314:	83 c4 10             	add    esp,0x10
c000b317:	eb e7                	jmp    c000b300 <VgaText::puts(char const*)+0x8>
c000b319:	83 c4 08             	add    esp,0x8
c000b31c:	5b                   	pop    ebx
c000b31d:	c3                   	ret    

c000b31e <VgaText::VgaText(char const*)>:
c000b31e:	57                   	push   edi
c000b31f:	56                   	push   esi
c000b320:	53                   	push   ebx
c000b321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b325:	83 ec 08             	sub    esp,0x8
c000b328:	6a 00                	push   0x0
c000b32a:	50                   	push   eax
c000b32b:	e8 46 05 00 00       	call   c000b876 <UnixFile::UnixFile(int)>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c000b338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b33c:	89 10                	mov    DWORD PTR [eax],edx
c000b33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b342:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b34d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b358:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b360:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b368:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b373:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b389:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b394:	8d 50 60             	lea    edx,[eax+0x60]
c000b397:	bb 00 7d 02 c0       	mov    ebx,0xc0027d00
c000b39c:	b8 08 00 00 00       	mov    eax,0x8
c000b3a1:	fc                   	cld    
c000b3a2:	89 d7                	mov    edi,edx
c000b3a4:	89 de                	mov    esi,ebx
c000b3a6:	89 c1                	mov    ecx,eax
c000b3a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ae:	05 82 00 00 00       	add    eax,0x82
c000b3b3:	83 ec 08             	sub    esp,0x8
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	50                   	push   eax
c000b3bb:	e8 78 53 ff ff       	call   c0000738 <strcpy>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	6a 01                	push   0x1
c000b3d3:	e8 e1 08 00 00       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	89 c2                	mov    edx,eax
c000b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b3e4:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c000b3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3f1:	89 c6                	mov    esi,eax
c000b3f3:	e8 c6 ef ff ff       	call   c000a3be <Phys::allocatePage()>
c000b3f8:	68 05 0c 00 00       	push   0xc05
c000b3fd:	56                   	push   esi
c000b3fe:	50                   	push   eax
c000b3ff:	53                   	push   ebx
c000b400:	e8 1f 0f 00 00       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b405:	83 c4 10             	add    esp,0x10
c000b408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b40f:	83 ec 04             	sub    esp,0x4
c000b412:	68 00 0f 00 00       	push   0xf00
c000b417:	6a 00                	push   0x0
c000b419:	50                   	push   eax
c000b41a:	e8 5d 52 ff ff       	call   c000067c <memset>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	83 ec 04             	sub    esp,0x4
c000b425:	6a 00                	push   0x0
c000b427:	6a 07                	push   0x7
c000b429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42d:	e8 22 f8 ff ff       	call   c000ac54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	83 ec 04             	sub    esp,0x4
c000b438:	6a 00                	push   0x0
c000b43a:	6a 00                	push   0x0
c000b43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b440:	e8 99 f9 ff ff       	call   c000adde <VgaText::setCursor(int, int)>
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	83 ec 0c             	sub    esp,0xc
c000b44b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44f:	e8 18 fd ff ff       	call   c000b16c <VgaText::clearScreen()>
c000b454:	83 c4 10             	add    esp,0x10
c000b457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b463:	05 02 01 00 00       	add    eax,0x102
c000b468:	83 ec 04             	sub    esp,0x4
c000b46b:	6a 30                	push   0x30
c000b46d:	6a 00                	push   0x0
c000b46f:	50                   	push   eax
c000b470:	e8 07 52 ff ff       	call   c000067c <memset>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	05 32 01 00 00       	add    eax,0x132
c000b481:	83 ec 04             	sub    esp,0x4
c000b484:	68 80 00 00 00       	push   0x80
c000b489:	6a 00                	push   0x0
c000b48b:	50                   	push   eax
c000b48c:	e8 eb 51 ff ff       	call   c000067c <memset>
c000b491:	83 c4 10             	add    esp,0x10
c000b494:	90                   	nop
c000b495:	5b                   	pop    ebx
c000b496:	5e                   	pop    esi
c000b497:	5f                   	pop    edi
c000b498:	c3                   	ret    
c000b499:	90                   	nop

c000b49a <VgaText::receiveKey(unsigned char)>:
c000b49a:	55                   	push   ebp
c000b49b:	57                   	push   edi
c000b49c:	56                   	push   esi
c000b49d:	53                   	push   ebx
c000b49e:	83 ec 1c             	sub    esp,0x1c
c000b4a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b4a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b4a9:	84 db                	test   bl,bl
c000b4ab:	0f 84 c6 00 00 00    	je     c000b577 <VgaText::receiveKey(unsigned char)+0xdd>
c000b4b1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b4b7:	80 fb 08             	cmp    bl,0x8
c000b4ba:	75 2c                	jne    c000b4e8 <VgaText::receiveKey(unsigned char)+0x4e>
c000b4bc:	83 ec 0c             	sub    esp,0xc
c000b4bf:	57                   	push   edi
c000b4c0:	e8 d3 51 ff ff       	call   c0000698 <strlen>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	85 c0                	test   eax,eax
c000b4ca:	74 41                	je     c000b50d <VgaText::receiveKey(unsigned char)+0x73>
c000b4cc:	50                   	push   eax
c000b4cd:	50                   	push   eax
c000b4ce:	6a 08                	push   0x8
c000b4d0:	56                   	push   esi
c000b4d1:	e8 f0 fc ff ff       	call   c000b1c6 <VgaText::putchar(char)>
c000b4d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4d9:	e8 ba 51 ff ff       	call   c0000698 <strlen>
c000b4de:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b4e6:	eb 22                	jmp    c000b50a <VgaText::receiveKey(unsigned char)+0x70>
c000b4e8:	0f be c3             	movsx  eax,bl
c000b4eb:	52                   	push   edx
c000b4ec:	52                   	push   edx
c000b4ed:	50                   	push   eax
c000b4ee:	56                   	push   esi
c000b4ef:	e8 d2 fc ff ff       	call   c000b1c6 <VgaText::putchar(char)>
c000b4f4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4fd:	59                   	pop    ecx
c000b4fe:	5d                   	pop    ebp
c000b4ff:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b503:	50                   	push   eax
c000b504:	57                   	push   edi
c000b505:	e8 6e 53 ff ff       	call   c0000878 <strcat>
c000b50a:	83 c4 10             	add    esp,0x10
c000b50d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b514:	75 05                	jne    c000b51b <VgaText::receiveKey(unsigned char)+0x81>
c000b516:	80 fb 0a             	cmp    bl,0xa
c000b519:	75 50                	jne    c000b56b <VgaText::receiveKey(unsigned char)+0xd1>
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b524:	53                   	push   ebx
c000b525:	e8 6e 51 ff ff       	call   c0000698 <strlen>
c000b52a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b52d:	89 c5                	mov    ebp,eax
c000b52f:	e8 64 51 ff ff       	call   c0000698 <strlen>
c000b534:	83 c4 10             	add    esp,0x10
c000b537:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b53b:	3d 80 00 00 00       	cmp    eax,0x80
c000b540:	76 10                	jbe    c000b552 <VgaText::receiveKey(unsigned char)+0xb8>
c000b542:	83 ec 0c             	sub    esp,0xc
c000b545:	68 9f 3f 02 c0       	push   0xc0023f9f
c000b54a:	e8 22 98 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000b54f:	83 c4 10             	add    esp,0x10
c000b552:	50                   	push   eax
c000b553:	50                   	push   eax
c000b554:	57                   	push   edi
c000b555:	53                   	push   ebx
c000b556:	e8 1d 53 ff ff       	call   c0000878 <strcat>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	6a 30                	push   0x30
c000b560:	6a 00                	push   0x0
c000b562:	57                   	push   edi
c000b563:	e8 14 51 ff ff       	call   c000067c <memset>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	83 ec 0c             	sub    esp,0xc
c000b56e:	56                   	push   esi
c000b56f:	e8 72 fa ff ff       	call   c000afe6 <VgaText::doUpdate()>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	83 c4 1c             	add    esp,0x1c
c000b57a:	5b                   	pop    ebx
c000b57b:	5e                   	pop    esi
c000b57c:	5f                   	pop    edi
c000b57d:	5d                   	pop    ebp
c000b57e:	c3                   	ret    
c000b57f:	90                   	nop

c000b580 <VgaText::write(unsigned long long, void*, int*)>:
c000b580:	55                   	push   ebp
c000b581:	57                   	push   edi
c000b582:	56                   	push   esi
c000b583:	53                   	push   ebx
c000b584:	83 ec 0c             	sub    esp,0xc
c000b587:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b58b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b58f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b593:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b59a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b59d:	39 eb                	cmp    ebx,ebp
c000b59f:	74 13                	je     c000b5b4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b5a1:	43                   	inc    ebx
c000b5a2:	50                   	push   eax
c000b5a3:	50                   	push   eax
c000b5a4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b5a8:	50                   	push   eax
c000b5a9:	56                   	push   esi
c000b5aa:	e8 17 fc ff ff       	call   c000b1c6 <VgaText::putchar(char)>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	eb e9                	jmp    c000b59d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b5b4:	83 ec 0c             	sub    esp,0xc
c000b5b7:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b5be:	56                   	push   esi
c000b5bf:	e8 22 fa ff ff       	call   c000afe6 <VgaText::doUpdate()>
c000b5c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b5c8:	89 38                	mov    DWORD PTR [eax],edi
c000b5ca:	83 c4 1c             	add    esp,0x1c
c000b5cd:	31 c0                	xor    eax,eax
c000b5cf:	5b                   	pop    ebx
c000b5d0:	5e                   	pop    esi
c000b5d1:	5f                   	pop    edi
c000b5d2:	5d                   	pop    ebp
c000b5d3:	c3                   	ret    

c000b5d4 <newTerminal(char*)>:
c000b5d4:	83 ec 28             	sub    esp,0x28
c000b5d7:	68 b4 01 00 00       	push   0x1b4
c000b5dc:	e8 26 e7 ff ff       	call   c0009d07 <malloc>
c000b5e1:	5a                   	pop    edx
c000b5e2:	59                   	pop    ecx
c000b5e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b5e7:	50                   	push   eax
c000b5e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ec:	e8 2d fd ff ff       	call   c000b31e <VgaText::VgaText(char const*)>
c000b5f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5f5:	83 c4 2c             	add    esp,0x2c
c000b5f8:	c3                   	ret    
c000b5f9:	66 90                	xchg   ax,ax
c000b5fb:	90                   	nop

c000b5fc <TSS::TSS()>:
c000b5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b600:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b607:	90                   	nop
c000b608:	c3                   	ret    
c000b609:	90                   	nop
c000b60a:	66 90                	xchg   ax,ax

c000b60c <TSS::setESP(unsigned long)>:
c000b60c:	55                   	push   ebp
c000b60d:	89 e5                	mov    ebp,esp
c000b60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b615:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b618:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b61b:	90                   	nop
c000b61c:	5d                   	pop    ebp
c000b61d:	c3                   	ret    
c000b61e:	66 90                	xchg   ax,ax

c000b620 <TSS::flush()>:
c000b620:	55                   	push   ebp
c000b621:	89 e5                	mov    ebp,esp
c000b623:	83 ec 10             	sub    esp,0x10
c000b626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b629:	8b 00                	mov    eax,DWORD PTR [eax]
c000b62b:	83 c8 03             	or     eax,0x3
c000b62e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b632:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b636:	66 89 d0             	mov    ax,dx
c000b639:	0f 00 d8             	ltr    ax
c000b63c:	90                   	nop
c000b63d:	c9                   	leave  
c000b63e:	c3                   	ret    
c000b63f:	90                   	nop

c000b640 <TSS::setup(unsigned long, unsigned long)>:
c000b640:	55                   	push   ebp
c000b641:	89 e5                	mov    ebp,esp
c000b643:	83 ec 18             	sub    esp,0x18
c000b646:	83 ec 0c             	sub    esp,0xc
c000b649:	6a 68                	push   0x68
c000b64b:	e8 b7 e6 ff ff       	call   c0009d07 <malloc>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 c2                	mov    edx,eax
c000b655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b658:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b661:	83 ec 04             	sub    esp,0x4
c000b664:	6a 68                	push   0x68
c000b666:	6a 00                	push   0x0
c000b668:	50                   	push   eax
c000b669:	e8 0e 50 ff ff       	call   c000067c <memset>
c000b66e:	83 c4 10             	add    esp,0x10
c000b671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b677:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b683:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b68c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b68f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b692:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6a7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6bf:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6cb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b6e6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b708:	0f 20 da             	mov    edx,cr3
c000b70b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b70e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b711:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b717:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71a:	83 ec 08             	sub    esp,0x8
c000b71d:	50                   	push   eax
c000b71e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b721:	50                   	push   eax
c000b722:	e8 c9 dd ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c000b727:	83 c4 10             	add    esp,0x10
c000b72a:	83 ec 08             	sub    esp,0x8
c000b72d:	6a 68                	push   0x68
c000b72f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b732:	50                   	push   eax
c000b733:	e8 d4 dd ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b73f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b742:	83 e0 0f             	and    eax,0xf
c000b745:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b748:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b74b:	83 c8 40             	or     eax,0x40
c000b74e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b751:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000b756:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b75c:	05 78 01 00 00       	add    eax,0x178
c000b761:	83 ec 04             	sub    esp,0x4
c000b764:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b767:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b76a:	50                   	push   eax
c000b76b:	e8 d0 dd ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	89 c2                	mov    edx,eax
c000b775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b778:	89 10                	mov    DWORD PTR [eax],edx
c000b77a:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000b77f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b785:	05 78 01 00 00       	add    eax,0x178
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	50                   	push   eax
c000b78e:	e8 d7 dd ff ff       	call   c000956a <GDT::flush()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b799:	8b 00                	mov    eax,DWORD PTR [eax]
c000b79b:	c9                   	leave  
c000b79c:	c3                   	ret    
c000b79d:	90                   	nop

c000b79e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7ae:	75 08                	jne    c000b7b8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b7b0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7b6:	eb 38                	jmp    c000b7f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b7b8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7bd:	75 17                	jne    c000b7d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b7d3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b7d6:	89 c1                	mov    ecx,eax
c000b7d8:	83 e1 fd             	and    ecx,0xfffffffd
c000b7db:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b7e1:	74 cd                	je     c000b7b0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7e3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b7e8:	83 e0 ef             	and    eax,0xffffffef
c000b7eb:	83 f8 08             	cmp    eax,0x8
c000b7ee:	76 c0                	jbe    c000b7b0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7f0:	31 c0                	xor    eax,eax
c000b7f2:	c3                   	ret    
c000b7f3:	90                   	nop

c000b7f4 <ReservedFilename::isAtty()>:
c000b7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7fb:	31 c0                	xor    eax,eax
c000b7fd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b803:	74 09                	je     c000b80e <ReservedFilename::isAtty()+0x1a>
c000b805:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b80b:	0f 94 c0             	sete   al
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b814:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b818:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b81b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b81f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b824:	75 08                	jne    c000b82e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b826:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b82c:	eb 3d                	jmp    c000b86b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b82e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b833:	75 17                	jne    c000b84c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b83a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b83d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b843:	8b 10                	mov    edx,DWORD PTR [eax]
c000b845:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b849:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b84c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b851:	75 04                	jne    c000b857 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b853:	89 0a                	mov    DWORD PTR [edx],ecx
c000b855:	eb 14                	jmp    c000b86b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b857:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b85c:	74 c8                	je     c000b826 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b85e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b863:	83 e0 ef             	and    eax,0xffffffef
c000b866:	83 f8 08             	cmp    eax,0x8
c000b869:	76 bb                	jbe    c000b826 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b86b:	31 c0                	xor    eax,eax
c000b86d:	c3                   	ret    

c000b86e <UnixFile::getFileDescriptor()>:
c000b86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b875:	c3                   	ret    

c000b876 <UnixFile::UnixFile(int)>:
c000b876:	53                   	push   ebx
c000b877:	83 ec 28             	sub    esp,0x28
c000b87a:	ba bc 40 02 c0       	mov    edx,0xc00240bc
c000b87f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b883:	89 10                	mov    DWORD PTR [eax],edx
c000b885:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b88d:	0f 8f 8c 01 00 00    	jg     c000ba1f <UnixFile::UnixFile(int)+0x1a9>
c000b893:	a1 e0 70 02 c0       	mov    eax,ds:0xc00270e0
c000b898:	8d 50 01             	lea    edx,[eax+0x1]
c000b89b:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000b8a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b8a5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b8a8:	83 ec 08             	sub    esp,0x8
c000b8ab:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b8af:	68 b8 7d 02 c0       	push   0xc0027db8
c000b8b4:	e8 ef 6e 01 00       	call   c00227a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b8b9:	83 c4 10             	add    esp,0x10
c000b8bc:	a0 b4 7d 02 c0       	mov    al,ds:0xc0027db4
c000b8c1:	83 f0 01             	xor    eax,0x1
c000b8c4:	84 c0                	test   al,al
c000b8c6:	0f 84 54 01 00 00    	je     c000ba20 <UnixFile::UnixFile(int)+0x1aa>
c000b8cc:	c6 05 b4 7d 02 c0 01 	mov    BYTE PTR ds:0xc0027db4,0x1
c000b8d3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b8db:	83 ec 0c             	sub    esp,0xc
c000b8de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8e2:	e8 20 e4 ff ff       	call   c0009d07 <malloc>
c000b8e7:	83 c4 10             	add    esp,0x10
c000b8ea:	89 c3                	mov    ebx,eax
c000b8ec:	83 ec 08             	sub    esp,0x8
c000b8ef:	68 03 ff ff 0f       	push   0xfffff03
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 2c 01 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000b8fa:	83 c4 10             	add    esp,0x10
c000b8fd:	89 1d ac 7d 02 c0    	mov    DWORD PTR ds:0xc0027dac,ebx
c000b903:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b90b:	83 ec 0c             	sub    esp,0xc
c000b90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b912:	e8 f0 e3 ff ff       	call   c0009d07 <malloc>
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	89 c3                	mov    ebx,eax
c000b91c:	83 ec 08             	sub    esp,0x8
c000b91f:	68 01 ff ff 0f       	push   0xfffff01
c000b924:	53                   	push   ebx
c000b925:	e8 fc 00 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000b92a:	83 c4 10             	add    esp,0x10
c000b92d:	89 1d b0 7d 02 c0    	mov    DWORD PTR ds:0xc0027db0,ebx
c000b933:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b93b:	83 ec 0c             	sub    esp,0xc
c000b93e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b942:	e8 c0 e3 ff ff       	call   c0009d07 <malloc>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	89 c3                	mov    ebx,eax
c000b94c:	83 ec 08             	sub    esp,0x8
c000b94f:	68 00 ff ff 0f       	push   0xfffff00
c000b954:	53                   	push   ebx
c000b955:	e8 cc 00 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	89 1d a4 7d 02 c0    	mov    DWORD PTR ds:0xc0027da4,ebx
c000b963:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b96b:	83 ec 0c             	sub    esp,0xc
c000b96e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b972:	e8 90 e3 ff ff       	call   c0009d07 <malloc>
c000b977:	83 c4 10             	add    esp,0x10
c000b97a:	89 c3                	mov    ebx,eax
c000b97c:	83 ec 08             	sub    esp,0x8
c000b97f:	68 02 ff ff 0f       	push   0xfffff02
c000b984:	53                   	push   ebx
c000b985:	e8 9c 00 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000b98a:	83 c4 10             	add    esp,0x10
c000b98d:	89 1d a8 7d 02 c0    	mov    DWORD PTR ds:0xc0027da8,ebx
c000b993:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b99b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b9a0:	7f 7e                	jg     c000ba20 <UnixFile::UnixFile(int)+0x1aa>
c000b9a2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b9aa:	83 ec 0c             	sub    esp,0xc
c000b9ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9b1:	e8 51 e3 ff ff       	call   c0009d07 <malloc>
c000b9b6:	83 c4 10             	add    esp,0x10
c000b9b9:	89 c3                	mov    ebx,eax
c000b9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9bf:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b9c4:	83 ec 08             	sub    esp,0x8
c000b9c7:	50                   	push   eax
c000b9c8:	53                   	push   ebx
c000b9c9:	e8 58 00 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000b9ce:	83 c4 10             	add    esp,0x10
c000b9d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9d5:	89 1c 85 80 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8280],ebx
c000b9dc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b9e4:	83 ec 0c             	sub    esp,0xc
c000b9e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9eb:	e8 17 e3 ff ff       	call   c0009d07 <malloc>
c000b9f0:	83 c4 10             	add    esp,0x10
c000b9f3:	89 c3                	mov    ebx,eax
c000b9f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9f9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9fe:	83 ec 08             	sub    esp,0x8
c000ba01:	50                   	push   eax
c000ba02:	53                   	push   ebx
c000ba03:	e8 1e 00 00 00       	call   c000ba26 <ReservedFilename::ReservedFilename(int)>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba0f:	89 1c 85 40 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd82c0],ebx
c000ba16:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba1a:	e9 7c ff ff ff       	jmp    c000b99b <UnixFile::UnixFile(int)+0x125>
c000ba1f:	90                   	nop
c000ba20:	83 c4 28             	add    esp,0x28
c000ba23:	5b                   	pop    ebx
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <ReservedFilename::ReservedFilename(int)>:
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba2d:	83 ec 08             	sub    esp,0x8
c000ba30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba34:	50                   	push   eax
c000ba35:	e8 3c fe ff ff       	call   c000b876 <UnixFile::UnixFile(int)>
c000ba3a:	83 c4 10             	add    esp,0x10
c000ba3d:	ba d8 40 02 c0       	mov    edx,0xc00240d8
c000ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba46:	89 10                	mov    DWORD PTR [eax],edx
c000ba48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba53:	90                   	nop
c000ba54:	83 c4 0c             	add    esp,0xc
c000ba57:	c3                   	ret    

c000ba58 <UnixFile::~UnixFile()>:
c000ba58:	83 ec 1c             	sub    esp,0x1c
c000ba5b:	ba bc 40 02 c0       	mov    edx,0xc00240bc
c000ba60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba64:	89 10                	mov    DWORD PTR [eax],edx
c000ba66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba6d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba72:	7f 73                	jg     c000bae7 <UnixFile::~UnixFile()+0x8f>
c000ba74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba7c:	83 ec 0c             	sub    esp,0xc
c000ba7f:	68 b8 7d 02 c0       	push   0xc0027db8
c000ba84:	e8 f3 6d 01 00       	call   c002287c <LinkedList<UnixFile>::getFirstElement()>
c000ba89:	83 c4 10             	add    esp,0x10
c000ba8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba90:	83 ec 0c             	sub    esp,0xc
c000ba93:	68 b8 7d 02 c0       	push   0xc0027db8
c000ba98:	e8 e7 6d 01 00       	call   c0022884 <LinkedList<UnixFile>::removeFirst()>
c000ba9d:	83 c4 10             	add    esp,0x10
c000baa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000baa4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000baa8:	74 40                	je     c000baea <UnixFile::~UnixFile()+0x92>
c000baaa:	83 ec 08             	sub    esp,0x8
c000baad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bab1:	68 b8 7d 02 c0       	push   0xc0027db8
c000bab6:	e8 ed 6c 01 00       	call   c00227a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000babb:	83 c4 10             	add    esp,0x10
c000babe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac2:	8d 50 01             	lea    edx,[eax+0x1]
c000bac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bac9:	3d 88 13 00 00       	cmp    eax,0x1388
c000bace:	0f 94 c0             	sete   al
c000bad1:	84 c0                	test   al,al
c000bad3:	74 a7                	je     c000ba7c <UnixFile::~UnixFile()+0x24>
c000bad5:	83 ec 0c             	sub    esp,0xc
c000bad8:	68 94 40 02 c0       	push   0xc0024094
c000badd:	e8 8f 92 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	eb 95                	jmp    c000ba7c <UnixFile::~UnixFile()+0x24>
c000bae7:	90                   	nop
c000bae8:	eb 01                	jmp    c000baeb <UnixFile::~UnixFile()+0x93>
c000baea:	90                   	nop
c000baeb:	90                   	nop
c000baec:	83 c4 1c             	add    esp,0x1c
c000baef:	c3                   	ret    

c000baf0 <UnixFile::~UnixFile()>:
c000baf0:	83 ec 0c             	sub    esp,0xc
c000baf3:	83 ec 0c             	sub    esp,0xc
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 59 ff ff ff       	call   c000ba58 <UnixFile::~UnixFile()>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	83 ec 08             	sub    esp,0x8
c000bb05:	6a 0c                	push   0xc
c000bb07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0b:	e8 22 14 00 00       	call   c000cf32 <operator delete(void*, unsigned long)>
c000bb10:	83 c4 10             	add    esp,0x10
c000bb13:	83 c4 0c             	add    esp,0xc
c000bb16:	c3                   	ret    
c000bb17:	90                   	nop

c000bb18 <ReservedFilename::~ReservedFilename()>:
c000bb18:	83 ec 0c             	sub    esp,0xc
c000bb1b:	ba d8 40 02 c0       	mov    edx,0xc00240d8
c000bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb24:	89 10                	mov    DWORD PTR [eax],edx
c000bb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2a:	83 ec 0c             	sub    esp,0xc
c000bb2d:	50                   	push   eax
c000bb2e:	e8 25 ff ff ff       	call   c000ba58 <UnixFile::~UnixFile()>
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	90                   	nop
c000bb37:	83 c4 0c             	add    esp,0xc
c000bb3a:	c3                   	ret    
c000bb3b:	90                   	nop

c000bb3c <ReservedFilename::~ReservedFilename()>:
c000bb3c:	83 ec 0c             	sub    esp,0xc
c000bb3f:	83 ec 0c             	sub    esp,0xc
c000bb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb46:	e8 cd ff ff ff       	call   c000bb18 <ReservedFilename::~ReservedFilename()>
c000bb4b:	83 c4 10             	add    esp,0x10
c000bb4e:	83 ec 08             	sub    esp,0x8
c000bb51:	6a 0c                	push   0xc
c000bb53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb57:	e8 d6 13 00 00       	call   c000cf32 <operator delete(void*, unsigned long)>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	83 c4 0c             	add    esp,0xc
c000bb62:	c3                   	ret    

c000bb63 <getFromFileDescriptor(int)>:
c000bb63:	53                   	push   ebx
c000bb64:	83 ec 08             	sub    esp,0x8
c000bb67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb71:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb77:	7f 2c                	jg     c000bba5 <getFromFileDescriptor(int)+0x42>
c000bb79:	83 ec 0c             	sub    esp,0xc
c000bb7c:	68 b8 7d 02 c0       	push   0xc0027db8
c000bb81:	e8 f6 6c 01 00       	call   c002287c <LinkedList<UnixFile>::getFirstElement()>
c000bb86:	83 c4 10             	add    esp,0x10
c000bb89:	85 c0                	test   eax,eax
c000bb8b:	75 04                	jne    c000bb91 <getFromFileDescriptor(int)+0x2e>
c000bb8d:	31 c0                	xor    eax,eax
c000bb8f:	eb 6e                	jmp    c000bbff <getFromFileDescriptor(int)+0x9c>
c000bb91:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb94:	74 69                	je     c000bbff <getFromFileDescriptor(int)+0x9c>
c000bb96:	52                   	push   edx
c000bb97:	52                   	push   edx
c000bb98:	50                   	push   eax
c000bb99:	68 b8 7d 02 c0       	push   0xc0027db8
c000bb9e:	e8 83 6d 01 00       	call   c0022926 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bba3:	eb e1                	jmp    c000bb86 <getFromFileDescriptor(int)+0x23>
c000bba5:	a1 ac 7d 02 c0       	mov    eax,ds:0xc0027dac
c000bbaa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bbb0:	74 4d                	je     c000bbff <getFromFileDescriptor(int)+0x9c>
c000bbb2:	a1 b0 7d 02 c0       	mov    eax,ds:0xc0027db0
c000bbb7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bbbd:	74 40                	je     c000bbff <getFromFileDescriptor(int)+0x9c>
c000bbbf:	a1 a8 7d 02 c0       	mov    eax,ds:0xc0027da8
c000bbc4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bbca:	74 33                	je     c000bbff <getFromFileDescriptor(int)+0x9c>
c000bbcc:	a1 a4 7d 02 c0       	mov    eax,ds:0xc0027da4
c000bbd1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bbd7:	74 26                	je     c000bbff <getFromFileDescriptor(int)+0x9c>
c000bbd9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bbdf:	83 f8 08             	cmp    eax,0x8
c000bbe2:	77 09                	ja     c000bbed <getFromFileDescriptor(int)+0x8a>
c000bbe4:	8b 04 85 80 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8280]
c000bbeb:	eb 12                	jmp    c000bbff <getFromFileDescriptor(int)+0x9c>
c000bbed:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bbf3:	83 fb 08             	cmp    ebx,0x8
c000bbf6:	77 95                	ja     c000bb8d <getFromFileDescriptor(int)+0x2a>
c000bbf8:	8b 04 9d 40 7d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd82c0]
c000bbff:	83 c4 08             	add    esp,0x8
c000bc02:	5b                   	pop    ebx
c000bc03:	c3                   	ret    

c000bc04 <__static_initialization_and_destruction_0(int, int)>:
c000bc04:	83 ec 0c             	sub    esp,0xc
c000bc07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc0c:	75 34                	jne    c000bc42 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc16:	75 2a                	jne    c000bc42 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc18:	83 ec 0c             	sub    esp,0xc
c000bc1b:	68 b8 7d 02 c0       	push   0xc0027db8
c000bc20:	e8 41 6b 01 00       	call   c0022766 <LinkedList<UnixFile>::LinkedList()>
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	83 ec 04             	sub    esp,0x4
c000bc2b:	68 18 6f 02 c0       	push   0xc0026f18
c000bc30:	68 b8 7d 02 c0       	push   0xc0027db8
c000bc35:	68 64 27 02 c0       	push   0xc0022764
c000bc3a:	e8 6d 12 00 00       	call   c000ceac <__cxa_atexit>
c000bc3f:	83 c4 10             	add    esp,0x10
c000bc42:	90                   	nop
c000bc43:	83 c4 0c             	add    esp,0xc
c000bc46:	c3                   	ret    

c000bc47 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	83 ec 08             	sub    esp,0x8
c000bc4d:	68 ff ff 00 00       	push   0xffff
c000bc52:	6a 01                	push   0x1
c000bc54:	e8 ab ff ff ff       	call   c000bc04 <__static_initialization_and_destruction_0(int, int)>
c000bc59:	83 c4 10             	add    esp,0x10
c000bc5c:	83 c4 0c             	add    esp,0xc
c000bc5f:	c3                   	ret    

c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc60:	53                   	push   ebx
c000bc61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc69:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc6f:	89 c8                	mov    eax,ecx
c000bc71:	d1 e8                	shr    eax,1
c000bc73:	03 05 e8 70 02 c0    	add    eax,DWORD PTR ds:0xc00270e8
c000bc79:	83 e1 01             	and    ecx,0x1
c000bc7c:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc7e:	75 09                	jne    c000bc89 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc80:	83 e2 f0             	and    edx,0xfffffff0
c000bc83:	09 da                	or     edx,ebx
c000bc85:	88 10                	mov    BYTE PTR [eax],dl
c000bc87:	5b                   	pop    ebx
c000bc88:	c3                   	ret    
c000bc89:	c1 e3 04             	shl    ebx,0x4
c000bc8c:	83 e2 0f             	and    edx,0xf
c000bc8f:	09 da                	or     edx,ebx
c000bc91:	88 10                	mov    BYTE PTR [eax],dl
c000bc93:	5b                   	pop    ebx
c000bc94:	c3                   	ret    

c000bc95 <Virt::getPageState(unsigned long)>:
c000bc95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc99:	8b 0d e8 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270e8
c000bc9f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bca5:	89 d0                	mov    eax,edx
c000bca7:	d1 e8                	shr    eax,1
c000bca9:	83 e2 01             	and    edx,0x1
c000bcac:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bcaf:	75 04                	jne    c000bcb5 <Virt::getPageState(unsigned long)+0x20>
c000bcb1:	83 e0 0f             	and    eax,0xf
c000bcb4:	c3                   	ret    
c000bcb5:	c0 e8 04             	shr    al,0x4
c000bcb8:	c3                   	ret    

c000bcb9 <Virt::allocateKernelVirtualPages(int)>:
c000bcb9:	55                   	push   ebp
c000bcba:	31 ed                	xor    ebp,ebp
c000bcbc:	57                   	push   edi
c000bcbd:	56                   	push   esi
c000bcbe:	53                   	push   ebx
c000bcbf:	31 db                	xor    ebx,ebx
c000bcc1:	83 ec 1c             	sub    esp,0x1c
c000bcc4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bcc8:	8b 3d e4 70 02 c0    	mov    edi,DWORD PTR ds:0xc00270e4
c000bcce:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bcd3:	57                   	push   edi
c000bcd4:	e8 bc ff ff ff       	call   c000bc95 <Virt::getPageState(unsigned long)>
c000bcd9:	5a                   	pop    edx
c000bcda:	84 c0                	test   al,al
c000bcdc:	75 3a                	jne    c000bd18 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bcde:	85 db                	test   ebx,ebx
c000bce0:	75 02                	jne    c000bce4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bce2:	89 fd                	mov    ebp,edi
c000bce4:	43                   	inc    ebx
c000bce5:	39 f3                	cmp    ebx,esi
c000bce7:	74 5a                	je     c000bd43 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bce9:	47                   	inc    edi
c000bcea:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcf0:	76 31                	jbe    c000bd23 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bcf2:	c7 05 e4 70 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00270e4,0xc8000
c000bcfc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd01:	75 28                	jne    c000bd2b <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd03:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd08:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd0d:	57                   	push   edi
c000bd0e:	e8 82 ff ff ff       	call   c000bc95 <Virt::getPageState(unsigned long)>
c000bd13:	5a                   	pop    edx
c000bd14:	84 c0                	test   al,al
c000bd16:	74 c6                	je     c000bcde <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd18:	31 db                	xor    ebx,ebx
c000bd1a:	47                   	inc    edi
c000bd1b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd21:	77 cf                	ja     c000bcf2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd23:	89 3d e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,edi
c000bd29:	eb a8                	jmp    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd2b:	83 ec 0c             	sub    esp,0xc
c000bd2e:	68 ec 40 02 c0       	push   0xc00240ec
c000bd33:	e8 39 90 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000bd38:	8b 3d e4 70 02 c0    	mov    edi,DWORD PTR ds:0xc00270e4
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	eb 90                	jmp    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd43:	89 2d e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,ebp
c000bd49:	4b                   	dec    ebx
c000bd4a:	74 5f                	je     c000bdab <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bd4c:	85 f6                	test   esi,esi
c000bd4e:	74 3d                	je     c000bd8d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd50:	89 e8                	mov    eax,ebp
c000bd52:	31 db                	xor    ebx,ebx
c000bd54:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd57:	eb 14                	jmp    c000bd6d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd59:	6a 01                	push   0x1
c000bd5b:	43                   	inc    ebx
c000bd5c:	50                   	push   eax
c000bd5d:	e8 fe fe ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd62:	58                   	pop    eax
c000bd63:	39 f3                	cmp    ebx,esi
c000bd65:	5a                   	pop    edx
c000bd66:	74 25                	je     c000bd8d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd68:	a1 e4 70 02 c0       	mov    eax,ds:0xc00270e4
c000bd6d:	8d 50 01             	lea    edx,[eax+0x1]
c000bd70:	85 db                	test   ebx,ebx
c000bd72:	89 15 e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,edx
c000bd78:	74 20                	je     c000bd9a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd7a:	39 df                	cmp    edi,ebx
c000bd7c:	75 db                	jne    c000bd59 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd7e:	6a 03                	push   0x3
c000bd80:	43                   	inc    ebx
c000bd81:	50                   	push   eax
c000bd82:	e8 d9 fe ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd87:	59                   	pop    ecx
c000bd88:	39 f3                	cmp    ebx,esi
c000bd8a:	58                   	pop    eax
c000bd8b:	75 db                	jne    c000bd68 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd8d:	83 c4 1c             	add    esp,0x1c
c000bd90:	89 e8                	mov    eax,ebp
c000bd92:	5b                   	pop    ebx
c000bd93:	c1 e0 0c             	shl    eax,0xc
c000bd96:	5e                   	pop    esi
c000bd97:	5f                   	pop    edi
c000bd98:	5d                   	pop    ebp
c000bd99:	c3                   	ret    
c000bd9a:	6a 02                	push   0x2
c000bd9c:	bb 01 00 00 00       	mov    ebx,0x1
c000bda1:	50                   	push   eax
c000bda2:	e8 b9 fe ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bda7:	58                   	pop    eax
c000bda8:	5a                   	pop    edx
c000bda9:	eb bd                	jmp    c000bd68 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bdab:	6a 04                	push   0x4
c000bdad:	8d 45 01             	lea    eax,[ebp+0x1]
c000bdb0:	55                   	push   ebp
c000bdb1:	a3 e4 70 02 c0       	mov    ds:0xc00270e4,eax
c000bdb6:	e8 a5 fe ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdbb:	59                   	pop    ecx
c000bdbc:	89 e8                	mov    eax,ebp
c000bdbe:	5b                   	pop    ebx
c000bdbf:	c1 e0 0c             	shl    eax,0xc
c000bdc2:	83 c4 1c             	add    esp,0x1c
c000bdc5:	5b                   	pop    ebx
c000bdc6:	5e                   	pop    esi
c000bdc7:	5f                   	pop    edi
c000bdc8:	5d                   	pop    ebp
c000bdc9:	c3                   	ret    

c000bdca <Virt::freeSwapfilePage(unsigned long)>:
c000bdca:	53                   	push   ebx
c000bdcb:	8b 15 d0 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027dd0
c000bdd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdd5:	b8 01 00 00 00       	mov    eax,0x1
c000bdda:	89 cb                	mov    ebx,ecx
c000bddc:	d3 e0                	shl    eax,cl
c000bdde:	c1 eb 05             	shr    ebx,0x5
c000bde1:	f7 d0                	not    eax
c000bde3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bde6:	5b                   	pop    ebx
c000bde7:	c3                   	ret    

c000bde8 <Virt::swapIDToSector(unsigned long)>:
c000bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdec:	0f af 05 ec 70 02 c0 	imul   eax,DWORD PTR ds:0xc00270ec
c000bdf3:	03 05 f4 70 02 c0    	add    eax,DWORD PTR ds:0xc00270f4
c000bdf9:	c3                   	ret    

c000bdfa <Virt::allocateSwapfilePage()>:
c000bdfa:	55                   	push   ebp
c000bdfb:	31 d2                	xor    edx,edx
c000bdfd:	57                   	push   edi
c000bdfe:	56                   	push   esi
c000bdff:	53                   	push   ebx
c000be00:	83 ec 0c             	sub    esp,0xc
c000be03:	8b 0d ec 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270ec
c000be09:	a1 f0 70 02 c0       	mov    eax,ds:0xc00270f0
c000be0e:	f7 f1                	div    ecx
c000be10:	39 0d f0 70 02 c0    	cmp    DWORD PTR ds:0xc00270f0,ecx
c000be16:	72 2d                	jb     c000be45 <Virt::allocateSwapfilePage()+0x4b>
c000be18:	8b 35 d0 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027dd0
c000be1e:	8b 16                	mov    edx,DWORD PTR [esi]
c000be20:	f6 c2 01             	test   dl,0x1
c000be23:	74 3c                	je     c000be61 <Virt::allocateSwapfilePage()+0x67>
c000be25:	31 c9                	xor    ecx,ecx
c000be27:	bf 01 00 00 00       	mov    edi,0x1
c000be2c:	eb 12                	jmp    c000be40 <Virt::allocateSwapfilePage()+0x46>
c000be2e:	89 fd                	mov    ebp,edi
c000be30:	89 ca                	mov    edx,ecx
c000be32:	d3 e5                	shl    ebp,cl
c000be34:	c1 ea 05             	shr    edx,0x5
c000be37:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000be3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be3c:	85 ea                	test   edx,ebp
c000be3e:	74 2a                	je     c000be6a <Virt::allocateSwapfilePage()+0x70>
c000be40:	41                   	inc    ecx
c000be41:	39 c8                	cmp    eax,ecx
c000be43:	77 e9                	ja     c000be2e <Virt::allocateSwapfilePage()+0x34>
c000be45:	83 ec 0c             	sub    esp,0xc
c000be48:	68 a4 42 02 c0       	push   0xc00242a4
c000be4d:	e8 1f 8f 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000be52:	83 c4 10             	add    esp,0x10
c000be55:	31 c9                	xor    ecx,ecx
c000be57:	83 c4 0c             	add    esp,0xc
c000be5a:	89 c8                	mov    eax,ecx
c000be5c:	5b                   	pop    ebx
c000be5d:	5e                   	pop    esi
c000be5e:	5f                   	pop    edi
c000be5f:	5d                   	pop    ebp
c000be60:	c3                   	ret    
c000be61:	89 f3                	mov    ebx,esi
c000be63:	bd 01 00 00 00       	mov    ebp,0x1
c000be68:	31 c9                	xor    ecx,ecx
c000be6a:	09 ea                	or     edx,ebp
c000be6c:	89 c8                	mov    eax,ecx
c000be6e:	89 13                	mov    DWORD PTR [ebx],edx
c000be70:	83 c4 0c             	add    esp,0xc
c000be73:	5b                   	pop    ebx
c000be74:	5e                   	pop    esi
c000be75:	5f                   	pop    edi
c000be76:	5d                   	pop    ebp
c000be77:	c3                   	ret    

c000be78 <Virt::virtualMemorySetup()>:
c000be78:	53                   	push   ebx
c000be79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be7e:	6a 0f                	push   0xf
c000be80:	53                   	push   ebx
c000be81:	43                   	inc    ebx
c000be82:	e8 d9 fd ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be87:	58                   	pop    eax
c000be88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be8e:	5a                   	pop    edx
c000be8f:	75 ed                	jne    c000be7e <Virt::virtualMemorySetup()+0x6>
c000be91:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be96:	6a 00                	push   0x0
c000be98:	53                   	push   ebx
c000be99:	43                   	inc    ebx
c000be9a:	e8 c1 fd ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be9f:	59                   	pop    ecx
c000bea0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bea6:	58                   	pop    eax
c000bea7:	75 ed                	jne    c000be96 <Virt::virtualMemorySetup()+0x1e>
c000bea9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000beae:	6a 0f                	push   0xf
c000beb0:	53                   	push   ebx
c000beb1:	43                   	inc    ebx
c000beb2:	e8 a9 fd ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beb7:	58                   	pop    eax
c000beb8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bebe:	5a                   	pop    edx
c000bebf:	75 ed                	jne    c000beae <Virt::virtualMemorySetup()+0x36>
c000bec1:	5b                   	pop    ebx
c000bec2:	c3                   	ret    

c000bec3 <Virt::setupPageSwapping(int)>:
c000bec3:	53                   	push   ebx
c000bec4:	83 ec 0c             	sub    esp,0xc
c000bec7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000becb:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000bed0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bed6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bed8:	53                   	push   ebx
c000bed9:	c1 e3 0b             	shl    ebx,0xb
c000bedc:	68 bb 42 02 c0       	push   0xc00242bb
c000bee1:	50                   	push   eax
c000bee2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bee5:	89 1d f0 70 02 c0    	mov    DWORD PTR ds:0xc00270f0,ebx
c000beeb:	c6 05 f8 70 02 c0 43 	mov    BYTE PTR ds:0xc00270f8,0x43
c000bef2:	c1 eb 08             	shr    ebx,0x8
c000bef5:	a3 f4 70 02 c0       	mov    ds:0xc00270f4,eax
c000befa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000befd:	c7 05 ec 70 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00270ec,0x8
c000bf07:	e8 fb dd ff ff       	call   c0009d07 <malloc>
c000bf0c:	83 c4 0c             	add    esp,0xc
c000bf0f:	89 c1                	mov    ecx,eax
c000bf11:	a3 d0 7d 02 c0       	mov    ds:0xc0027dd0,eax
c000bf16:	31 d2                	xor    edx,edx
c000bf18:	a1 f0 70 02 c0       	mov    eax,ds:0xc00270f0
c000bf1d:	f7 35 ec 70 02 c0    	div    DWORD PTR ds:0xc00270ec
c000bf23:	c1 e8 05             	shr    eax,0x5
c000bf26:	50                   	push   eax
c000bf27:	6a 00                	push   0x0
c000bf29:	51                   	push   ecx
c000bf2a:	e8 4d 47 ff ff       	call   c000067c <memset>
c000bf2f:	83 c4 18             	add    esp,0x18
c000bf32:	5b                   	pop    ebx
c000bf33:	c3                   	ret    

c000bf34 <VAS::VAS(VAS*)>:
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf46:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	68 0c 41 02 c0       	push   0xc002410c
c000bf55:	e8 17 8e 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000bf5a:	83 c4 10             	add    esp,0x10
c000bf5d:	90                   	nop
c000bf5e:	83 c4 0c             	add    esp,0xc
c000bf61:	c3                   	ret    

c000bf62 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf66:	89 c2                	mov    edx,eax
c000bf68:	c1 e8 0a             	shr    eax,0xa
c000bf6b:	c1 ea 16             	shr    edx,0x16
c000bf6e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf73:	19 c9                	sbb    ecx,ecx
c000bf75:	c1 e2 0c             	shl    edx,0xc
c000bf78:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf7e:	25 fc 0f 00 00       	and    eax,0xffc
c000bf83:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf8a:	01 d0                	add    eax,edx
c000bf8c:	c3                   	ret    
c000bf8d:	90                   	nop

c000bf8e <VAS::getPageTableEntry(unsigned long)>:
c000bf8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf92:	89 ca                	mov    edx,ecx
c000bf94:	c1 e9 0a             	shr    ecx,0xa
c000bf97:	c1 ea 16             	shr    edx,0x16
c000bf9a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bfa0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bfa6:	c1 e0 0c             	shl    eax,0xc
c000bfa9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bfac:	c3                   	ret    

c000bfad <Virt::freeKernelVirtualPages(unsigned long)>:
c000bfad:	57                   	push   edi
c000bfae:	56                   	push   esi
c000bfaf:	be 01 00 00 00       	mov    esi,0x1
c000bfb4:	53                   	push   ebx
c000bfb5:	83 ec 10             	sub    esp,0x10
c000bfb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bfbc:	c1 eb 0c             	shr    ebx,0xc
c000bfbf:	eb 3f                	jmp    c000c000 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bfc1:	83 ec 08             	sub    esp,0x8
c000bfc4:	57                   	push   edi
c000bfc5:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c000bfcb:	e8 be ff ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfd5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bfd9:	f6 c4 04             	test   ah,0x4
c000bfdc:	75 5f                	jne    c000c03d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bfde:	80 fa 04             	cmp    dl,0x4
c000bfe1:	74 78                	je     c000c05b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bfe3:	80 fa 02             	cmp    dl,0x2
c000bfe6:	0f 84 88 00 00 00    	je     c000c074 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bfec:	80 fa 03             	cmp    dl,0x3
c000bfef:	0f 84 ad 00 00 00    	je     c000c0a2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bff5:	fe ca                	dec    dl
c000bff7:	0f 84 92 00 00 00    	je     c000c08f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bffd:	43                   	inc    ebx
c000bffe:	31 f6                	xor    esi,esi
c000c000:	53                   	push   ebx
c000c001:	89 df                	mov    edi,ebx
c000c003:	e8 8d fc ff ff       	call   c000bc95 <Virt::getPageState(unsigned long)>
c000c008:	c1 e7 0c             	shl    edi,0xc
c000c00b:	59                   	pop    ecx
c000c00c:	84 c0                	test   al,al
c000c00e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c012:	75 ad                	jne    c000bfc1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c014:	83 ec 0c             	sub    esp,0xc
c000c017:	68 d2 42 02 c0       	push   0xc00242d2
c000c01c:	e8 50 8d 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000c021:	58                   	pop    eax
c000c022:	5a                   	pop    edx
c000c023:	57                   	push   edi
c000c024:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c000c02a:	e8 5f ff ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	8b 00                	mov    eax,DWORD PTR [eax]
c000c034:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c038:	f6 c4 04             	test   ah,0x4
c000c03b:	74 c0                	je     c000bffd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c03d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c041:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c046:	83 ec 0c             	sub    esp,0xc
c000c049:	50                   	push   eax
c000c04a:	e8 ec e2 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c000c04f:	83 c4 10             	add    esp,0x10
c000c052:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c056:	80 fa 04             	cmp    dl,0x4
c000c059:	75 88                	jne    c000bfe3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c05b:	89 f0                	mov    eax,esi
c000c05d:	84 c0                	test   al,al
c000c05f:	75 47                	jne    c000c0a8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c061:	c7 44 24 20 30 41 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024130
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	5b                   	pop    ebx
c000c06d:	5e                   	pop    esi
c000c06e:	5f                   	pop    edi
c000c06f:	e9 fd 8c 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c000c074:	89 f0                	mov    eax,esi
c000c076:	84 c0                	test   al,al
c000c078:	75 15                	jne    c000c08f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c07a:	83 ec 0c             	sub    esp,0xc
c000c07d:	68 ee 42 02 c0       	push   0xc00242ee
c000c082:	e8 ea 8c 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000c087:	83 c4 10             	add    esp,0x10
c000c08a:	e9 6e ff ff ff       	jmp    c000bffd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c08f:	83 ec 08             	sub    esp,0x8
c000c092:	6a 00                	push   0x0
c000c094:	53                   	push   ebx
c000c095:	e8 c6 fb ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	e9 5b ff ff ff       	jmp    c000bffd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0a2:	89 f0                	mov    eax,esi
c000c0a4:	84 c0                	test   al,al
c000c0a6:	75 15                	jne    c000c0bd <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c0a8:	83 ec 08             	sub    esp,0x8
c000c0ab:	6a 00                	push   0x0
c000c0ad:	53                   	push   ebx
c000c0ae:	e8 ad fb ff ff       	call   c000bc60 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c0b3:	83 c4 10             	add    esp,0x10
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	5b                   	pop    ebx
c000c0ba:	5e                   	pop    esi
c000c0bb:	5f                   	pop    edi
c000c0bc:	c3                   	ret    
c000c0bd:	c7 44 24 20 0a 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc002430a
c000c0c5:	83 c4 10             	add    esp,0x10
c000c0c8:	5b                   	pop    ebx
c000c0c9:	5e                   	pop    esi
c000c0ca:	5f                   	pop    edi
c000c0cb:	e9 a1 8c 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>

c000c0d0 <VAS::freeAllocatedPages(unsigned long)>:
c000c0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c0d8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c0dc:	74 09                	je     c000c0e7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c0de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c0e2:	e9 c6 fe ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c000c0e7:	c7 44 24 04 54 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024154
c000c0ef:	e9 1f 0f 00 00       	jmp    c000d013 <Dbg::kprintf(char const*, ...)>

c000c0f4 <VAS::virtualToPhysical(unsigned long)>:
c000c0f4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0f8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0fc:	e8 8d fe ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000c101:	5a                   	pop    edx
c000c102:	8b 00                	mov    eax,DWORD PTR [eax]
c000c104:	59                   	pop    ecx
c000c105:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <VAS::reflagRange(unsigned long, int, int, int)>:
c000c10c:	55                   	push   ebp
c000c10d:	57                   	push   edi
c000c10e:	56                   	push   esi
c000c10f:	53                   	push   ebx
c000c110:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c114:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c118:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c11c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c120:	85 db                	test   ebx,ebx
c000c122:	7e 22                	jle    c000c146 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c124:	c1 e3 0c             	shl    ebx,0xc
c000c127:	01 f3                	add    ebx,esi
c000c129:	56                   	push   esi
c000c12a:	81 c6 00 10 00 00    	add    esi,0x1000
c000c130:	55                   	push   ebp
c000c131:	e8 58 fe ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000c136:	5a                   	pop    edx
c000c137:	59                   	pop    ecx
c000c138:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c13a:	21 f9                	and    ecx,edi
c000c13c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c140:	39 f3                	cmp    ebx,esi
c000c142:	89 08                	mov    DWORD PTR [eax],ecx
c000c144:	75 e3                	jne    c000c129 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c146:	5b                   	pop    ebx
c000c147:	5e                   	pop    esi
c000c148:	5f                   	pop    edi
c000c149:	5d                   	pop    ebp
c000c14a:	c3                   	ret    
c000c14b:	90                   	nop

c000c14c <VAS::setToWriteCombining(unsigned long, int)>:
c000c14c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c151:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c157:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c15e:	75 01                	jne    c000c161 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c160:	c3                   	ret    
c000c161:	68 80 00 00 00       	push   0x80
c000c166:	6a ff                	push   0xffffffff
c000c168:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c16c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c174:	e8 93 ff ff ff       	call   c000c10c <VAS::reflagRange(unsigned long, int, int, int)>
c000c179:	83 c4 14             	add    esp,0x14
c000c17c:	c3                   	ret    
c000c17d:	90                   	nop

c000c17e <VAS::mapOtherVASIn(bool, VAS*)>:
c000c17e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c183:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c187:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c18e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c191:	19 c0                	sbb    eax,eax
c000c193:	83 ca 03             	or     edx,0x3
c000c196:	83 e0 fc             	and    eax,0xfffffffc
c000c199:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c1a0:	0f 20 d8             	mov    eax,cr3
c000c1a3:	0f 22 d8             	mov    cr3,eax
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <VAS::~VAS()>:
c000c1a8:	83 ec 2c             	sub    esp,0x2c
c000c1ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c1b3:	fa                   	cli    
c000c1b4:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c1b9:	40                   	inc    eax
c000c1ba:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c1bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c1c9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c1cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c1d3:	6a 01                	push   0x1
c000c1d5:	50                   	push   eax
c000c1d6:	e8 a3 ff ff ff       	call   c000c17e <VAS::mapOtherVASIn(bool, VAS*)>
c000c1db:	83 c4 0c             	add    esp,0xc
c000c1de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1e6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c1ee:	0f 8f d4 00 00 00    	jg     c000c2c8 <VAS::~VAS()+0x120>
c000c1f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1ff:	c1 e2 02             	shl    edx,0x2
c000c202:	01 d0                	add    eax,edx
c000c204:	8b 00                	mov    eax,DWORD PTR [eax]
c000c206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c20e:	83 e0 01             	and    eax,0x1
c000c211:	0f 84 a8 00 00 00    	je     c000c2bf <VAS::~VAS()+0x117>
c000c217:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c21f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c227:	7f 72                	jg     c000c29b <VAS::~VAS()+0xf3>
c000c229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c22d:	c1 e0 0a             	shl    eax,0xa
c000c230:	89 c2                	mov    edx,eax
c000c232:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c236:	01 d0                	add    eax,edx
c000c238:	c1 e0 0c             	shl    eax,0xc
c000c23b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c23f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c244:	8b 00                	mov    eax,DWORD PTR [eax]
c000c246:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c249:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c24f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c253:	6a 01                	push   0x1
c000c255:	50                   	push   eax
c000c256:	e8 07 fd ff ff       	call   c000bf62 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c25b:	83 c4 0c             	add    esp,0xc
c000c25e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c262:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c266:	8b 00                	mov    eax,DWORD PTR [eax]
c000c268:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c26c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c270:	25 01 04 00 00       	and    eax,0x401
c000c275:	3d 01 04 00 00       	cmp    eax,0x401
c000c27a:	75 19                	jne    c000c295 <VAS::~VAS()+0xed>
c000c27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c285:	83 ec 0c             	sub    esp,0xc
c000c288:	50                   	push   eax
c000c289:	e8 ad e0 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c000c28e:	83 c4 10             	add    esp,0x10
c000c291:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c295:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c299:	eb 84                	jmp    c000c21f <VAS::~VAS()+0x77>
c000c29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c29f:	25 00 04 00 00       	and    eax,0x400
c000c2a4:	74 19                	je     c000c2bf <VAS::~VAS()+0x117>
c000c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2af:	83 ec 0c             	sub    esp,0xc
c000c2b2:	50                   	push   eax
c000c2b3:	e8 83 e0 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c000c2b8:	83 c4 10             	add    esp,0x10
c000c2bb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2bf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c2c3:	e9 1e ff ff ff       	jmp    c000c1e6 <VAS::~VAS()+0x3e>
c000c2c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2cf:	83 ec 0c             	sub    esp,0xc
c000c2d2:	50                   	push   eax
c000c2d3:	e8 d5 fc ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c000c2d8:	83 c4 10             	add    esp,0x10
c000c2db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c2e2:	83 ec 0c             	sub    esp,0xc
c000c2e5:	50                   	push   eax
c000c2e6:	e8 50 e0 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c000c2eb:	83 c4 10             	add    esp,0x10
c000c2ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2f6:	c1 e0 02             	shl    eax,0x2
c000c2f9:	83 ec 08             	sub    esp,0x8
c000c2fc:	50                   	push   eax
c000c2fd:	68 78 41 02 c0       	push   0xc0024178
c000c302:	e8 0c 0d 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000c307:	83 c4 10             	add    esp,0x10
c000c30a:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c30f:	48                   	dec    eax
c000c310:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c315:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c31a:	85 c0                	test   eax,eax
c000c31c:	75 01                	jne    c000c31f <VAS::~VAS()+0x177>
c000c31e:	fb                   	sti    
c000c31f:	90                   	nop
c000c320:	83 c4 2c             	add    esp,0x2c
c000c323:	c3                   	ret    

c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c324:	55                   	push   ebp
c000c325:	57                   	push   edi
c000c326:	56                   	push   esi
c000c327:	53                   	push   ebx
c000c328:	83 ec 1c             	sub    esp,0x1c
c000c32b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c32f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c333:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c339:	77 08                	ja     c000c343 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c33b:	0f 20 d8             	mov    eax,cr3
c000c33e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c341:	75 47                	jne    c000c38a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c343:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c347:	09 d8                	or     eax,ebx
c000c349:	a9 ff 0f 00 00       	test   eax,0xfff
c000c34e:	75 57                	jne    c000c3a7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c350:	89 de                	mov    esi,ebx
c000c352:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c355:	c1 ee 16             	shr    esi,0x16
c000c358:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c35f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c363:	74 54                	je     c000c3b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c365:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c369:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c36f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c373:	c1 e6 0c             	shl    esi,0xc
c000c376:	c1 eb 0a             	shr    ebx,0xa
c000c379:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c37f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c382:	83 c4 1c             	add    esp,0x1c
c000c385:	5b                   	pop    ebx
c000c386:	5e                   	pop    esi
c000c387:	5f                   	pop    edi
c000c388:	5d                   	pop    ebp
c000c389:	c3                   	ret    
c000c38a:	83 ec 0c             	sub    esp,0xc
c000c38d:	68 98 41 02 c0       	push   0xc0024198
c000c392:	e8 7c 0c 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c39e:	09 d8                	or     eax,ebx
c000c3a0:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3a5:	74 a9                	je     c000c350 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c3a7:	83 ec 0c             	sub    esp,0xc
c000c3aa:	68 00 42 02 c0       	push   0xc0024200
c000c3af:	e8 bd 89 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	eb 97                	jmp    c000c350 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c3b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3bd:	e8 fc df ff ff       	call   c000a3be <Phys::allocatePage()>
c000c3c2:	83 ec 0c             	sub    esp,0xc
c000c3c5:	89 c5                	mov    ebp,eax
c000c3c7:	8b 0d d4 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027dd4
c000c3cd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c3d1:	6a 01                	push   0x1
c000c3d3:	e8 e1 f8 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c000c3d8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c3df:	6a 01                	push   0x1
c000c3e1:	50                   	push   eax
c000c3e2:	55                   	push   ebp
c000c3e3:	81 cd 07 04 00 00    	or     ebp,0x407
c000c3e9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3ed:	51                   	push   ecx
c000c3ee:	e8 27 02 00 00       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3f3:	83 c4 1c             	add    esp,0x1c
c000c3f6:	68 00 10 00 00       	push   0x1000
c000c3fb:	6a 00                	push   0x0
c000c3fd:	50                   	push   eax
c000c3fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c402:	e8 75 42 ff ff       	call   c000067c <memset>
c000c407:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c40b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c40e:	e8 9a fb ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c000c413:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c417:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c41a:	83 c4 10             	add    esp,0x10
c000c41d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c420:	e9 40 ff ff ff       	jmp    c000c365 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c425:	90                   	nop

c000c426 <VAS::allocatePages(int, int)>:
c000c426:	55                   	push   ebp
c000c427:	57                   	push   edi
c000c428:	56                   	push   esi
c000c429:	53                   	push   ebx
c000c42a:	83 ec 1c             	sub    esp,0x1c
c000c42d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c431:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c436:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c43c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c442:	83 e0 01             	and    eax,0x1
c000c445:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c449:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c44d:	0f 85 cc 00 00 00    	jne    c000c51f <VAS::allocatePages(int, int)+0xf9>
c000c453:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c456:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c45a:	85 c0                	test   eax,eax
c000c45c:	0f 84 a1 00 00 00    	je     c000c503 <VAS::allocatePages(int, int)+0xdd>
c000c462:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c466:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c46a:	c1 e6 0c             	shl    esi,0xc
c000c46d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c471:	85 c0                	test   eax,eax
c000c473:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c476:	7e 33                	jle    c000c4ab <VAS::allocatePages(int, int)+0x85>
c000c478:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c47c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c480:	81 cd 00 04 00 00    	or     ebp,0x400
c000c486:	e8 33 df ff ff       	call   c000a3be <Phys::allocatePage()>
c000c48b:	55                   	push   ebp
c000c48c:	53                   	push   ebx
c000c48d:	50                   	push   eax
c000c48e:	57                   	push   edi
c000c48f:	e8 90 fe ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c494:	83 c4 10             	add    esp,0x10
c000c497:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c49c:	74 03                	je     c000c4a1 <VAS::allocatePages(int, int)+0x7b>
c000c49e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c4a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4a7:	39 de                	cmp    esi,ebx
c000c4a9:	75 db                	jne    c000c486 <VAS::allocatePages(int, int)+0x60>
c000c4ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c4b0:	75 12                	jne    c000c4c4 <VAS::allocatePages(int, int)+0x9e>
c000c4b2:	0f 20 d8             	mov    eax,cr3
c000c4b5:	0f 22 d8             	mov    cr3,eax
c000c4b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4bc:	83 c4 1c             	add    esp,0x1c
c000c4bf:	5b                   	pop    ebx
c000c4c0:	5e                   	pop    esi
c000c4c1:	5f                   	pop    edi
c000c4c2:	5d                   	pop    ebp
c000c4c3:	c3                   	ret    
c000c4c4:	c1 ee 0a             	shr    esi,0xa
c000c4c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c4cb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c4d1:	c1 eb 0a             	shr    ebx,0xa
c000c4d4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c4da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c4e0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c4e6:	39 c3                	cmp    ebx,eax
c000c4e8:	77 ce                	ja     c000c4b8 <VAS::allocatePages(int, int)+0x92>
c000c4ea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c4ed:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4f3:	39 d8                	cmp    eax,ebx
c000c4f5:	73 f3                	jae    c000c4ea <VAS::allocatePages(int, int)+0xc4>
c000c4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4fb:	83 c4 1c             	add    esp,0x1c
c000c4fe:	5b                   	pop    ebx
c000c4ff:	5e                   	pop    esi
c000c500:	5f                   	pop    edi
c000c501:	5d                   	pop    ebp
c000c502:	c3                   	ret    
c000c503:	83 ec 0c             	sub    esp,0xc
c000c506:	68 24 42 02 c0       	push   0xc0024224
c000c50b:	e8 61 88 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000c510:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c513:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	e9 43 ff ff ff       	jmp    c000c462 <VAS::allocatePages(int, int)+0x3c>
c000c51f:	83 ec 0c             	sub    esp,0xc
c000c522:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c526:	e8 8e f7 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c000c52b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c537:	0f 87 9b 00 00 00    	ja     c000c5d8 <VAS::allocatePages(int, int)+0x1b2>
c000c53d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c541:	85 d2                	test   edx,edx
c000c543:	7e 3c                	jle    c000c581 <VAS::allocatePages(int, int)+0x15b>
c000c545:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c549:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c54d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c551:	c1 e5 0c             	shl    ebp,0xc
c000c554:	81 ce 00 04 00 00    	or     esi,0x400
c000c55a:	01 dd                	add    ebp,ebx
c000c55c:	e8 5d de ff ff       	call   c000a3be <Phys::allocatePage()>
c000c561:	56                   	push   esi
c000c562:	53                   	push   ebx
c000c563:	50                   	push   eax
c000c564:	57                   	push   edi
c000c565:	e8 ba fd ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c56a:	83 c4 10             	add    esp,0x10
c000c56d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c572:	74 03                	je     c000c577 <VAS::allocatePages(int, int)+0x151>
c000c574:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c577:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c57d:	39 dd                	cmp    ebp,ebx
c000c57f:	75 db                	jne    c000c55c <VAS::allocatePages(int, int)+0x136>
c000c581:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c586:	0f 84 26 ff ff ff    	je     c000c4b2 <VAS::allocatePages(int, int)+0x8c>
c000c58c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c590:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c594:	89 d3                	mov    ebx,edx
c000c596:	c1 e0 0c             	shl    eax,0xc
c000c599:	c1 eb 0a             	shr    ebx,0xa
c000c59c:	01 d0                	add    eax,edx
c000c59e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c5a4:	c1 e8 0a             	shr    eax,0xa
c000c5a7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c5b2:	2d 00 00 40 00       	sub    eax,0x400000
c000c5b7:	39 c3                	cmp    ebx,eax
c000c5b9:	0f 87 f9 fe ff ff    	ja     c000c4b8 <VAS::allocatePages(int, int)+0x92>
c000c5bf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5c2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5c8:	39 d8                	cmp    eax,ebx
c000c5ca:	73 f3                	jae    c000c5bf <VAS::allocatePages(int, int)+0x199>
c000c5cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5d0:	83 c4 1c             	add    esp,0x1c
c000c5d3:	5b                   	pop    ebx
c000c5d4:	5e                   	pop    esi
c000c5d5:	5f                   	pop    edi
c000c5d6:	5d                   	pop    ebp
c000c5d7:	c3                   	ret    
c000c5d8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c5dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5e3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c5ea:	0f 84 4d ff ff ff    	je     c000c53d <VAS::allocatePages(int, int)+0x117>
c000c5f0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5f8:	e9 40 ff ff ff       	jmp    c000c53d <VAS::allocatePages(int, int)+0x117>
c000c5fd:	90                   	nop

c000c5fe <VAS::setCPUSpecific(unsigned long)>:
c000c5fe:	83 ec 0c             	sub    esp,0xc
c000c601:	6a 05                	push   0x5
c000c603:	68 00 00 40 c2       	push   0xc2400000
c000c608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c610:	e8 0f fd ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c615:	83 c4 1c             	add    esp,0x1c
c000c618:	c3                   	ret    
c000c619:	90                   	nop

c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c61a:	55                   	push   ebp
c000c61b:	57                   	push   edi
c000c61c:	56                   	push   esi
c000c61d:	53                   	push   ebx
c000c61e:	83 ec 1c             	sub    esp,0x1c
c000c621:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c626:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c62a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c630:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c634:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c63a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c63e:	83 e0 01             	and    eax,0x1
c000c641:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c645:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c649:	85 c0                	test   eax,eax
c000c64b:	7e 39                	jle    c000c686 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c64d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c651:	89 f3                	mov    ebx,esi
c000c653:	c1 e0 0c             	shl    eax,0xc
c000c656:	01 f0                	add    eax,esi
c000c658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c65c:	55                   	push   ebp
c000c65d:	53                   	push   ebx
c000c65e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c662:	29 f0                	sub    eax,esi
c000c664:	01 d8                	add    eax,ebx
c000c666:	50                   	push   eax
c000c667:	57                   	push   edi
c000c668:	e8 b7 fc ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c66d:	83 c4 10             	add    esp,0x10
c000c670:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c675:	74 03                	je     c000c67a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c677:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c680:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c684:	75 d6                	jne    c000c65c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c686:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c68b:	75 10                	jne    c000c69d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c68d:	0f 20 d8             	mov    eax,cr3
c000c690:	0f 22 d8             	mov    cr3,eax
c000c693:	83 c4 1c             	add    esp,0x1c
c000c696:	89 f0                	mov    eax,esi
c000c698:	5b                   	pop    ebx
c000c699:	5e                   	pop    esi
c000c69a:	5f                   	pop    edi
c000c69b:	5d                   	pop    ebp
c000c69c:	c3                   	ret    
c000c69d:	89 f3                	mov    ebx,esi
c000c69f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6a3:	c1 eb 0a             	shr    ebx,0xa
c000c6a6:	c1 e0 0c             	shl    eax,0xc
c000c6a9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c6af:	01 f0                	add    eax,esi
c000c6b1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c6b7:	c1 e8 0a             	shr    eax,0xa
c000c6ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6bf:	2d 00 00 40 00       	sub    eax,0x400000
c000c6c4:	39 c3                	cmp    ebx,eax
c000c6c6:	77 cb                	ja     c000c693 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c6c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6d1:	39 d8                	cmp    eax,ebx
c000c6d3:	73 f3                	jae    c000c6c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c6d5:	83 c4 1c             	add    esp,0x1c
c000c6d8:	89 f0                	mov    eax,esi
c000c6da:	5b                   	pop    ebx
c000c6db:	5e                   	pop    esi
c000c6dc:	5f                   	pop    edi
c000c6dd:	5d                   	pop    ebp
c000c6de:	c3                   	ret    
c000c6df:	90                   	nop

c000c6e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c6e0:	55                   	push   ebp
c000c6e1:	57                   	push   edi
c000c6e2:	56                   	push   esi
c000c6e3:	53                   	push   ebx
c000c6e4:	83 ec 1c             	sub    esp,0x1c
c000c6e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6ef:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6f7:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6fc:	75 4a                	jne    c000c748 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c702:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c705:	c1 eb 16             	shr    ebx,0x16
c000c708:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c70f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c713:	74 4d                	je     c000c762 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c715:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c719:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c71d:	c1 e8 0a             	shr    eax,0xa
c000c720:	80 fa 01             	cmp    dl,0x1
c000c723:	19 d2                	sbb    edx,edx
c000c725:	c1 e3 0c             	shl    ebx,0xc
c000c728:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c72c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c732:	25 fc 0f 00 00       	and    eax,0xffc
c000c737:	01 d8                	add    eax,ebx
c000c739:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c740:	83 c4 1c             	add    esp,0x1c
c000c743:	5b                   	pop    ebx
c000c744:	5e                   	pop    esi
c000c745:	5f                   	pop    edi
c000c746:	5d                   	pop    ebp
c000c747:	c3                   	ret    
c000c748:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c74c:	83 ec 0c             	sub    esp,0xc
c000c74f:	68 50 42 02 c0       	push   0xc0024250
c000c754:	e8 18 86 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000c759:	83 c4 10             	add    esp,0x10
c000c75c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c760:	eb 9c                	jmp    c000c6fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c762:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c766:	e8 53 dc ff ff       	call   c000a3be <Phys::allocatePage()>
c000c76b:	83 ec 0c             	sub    esp,0xc
c000c76e:	89 c5                	mov    ebp,eax
c000c770:	8b 0d d4 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027dd4
c000c776:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c77a:	6a 01                	push   0x1
c000c77c:	e8 38 f5 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c000c781:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c788:	6a 01                	push   0x1
c000c78a:	50                   	push   eax
c000c78b:	55                   	push   ebp
c000c78c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c792:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c796:	51                   	push   ecx
c000c797:	e8 7e fe ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c79c:	83 c4 1c             	add    esp,0x1c
c000c79f:	68 00 10 00 00       	push   0x1000
c000c7a4:	6a 00                	push   0x0
c000c7a6:	50                   	push   eax
c000c7a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ab:	e8 cc 3e ff ff       	call   c000067c <memset>
c000c7b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c7b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c7b7:	e8 f1 f7 ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c000c7bc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7bf:	83 c4 10             	add    esp,0x10
c000c7c2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c7c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7c9:	e9 47 ff ff ff       	jmp    c000c715 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c7ce <VAS::VAS(bool)>:
c000c7ce:	53                   	push   ebx
c000c7cf:	83 ec 28             	sub    esp,0x28
c000c7d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c7d6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c7da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7f8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7fb:	e8 be db ff ff       	call   c000a3be <Phys::allocatePage()>
c000c800:	89 c2                	mov    edx,eax
c000c802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c806:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c809:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c000c80f:	83 ec 0c             	sub    esp,0xc
c000c812:	6a 01                	push   0x1
c000c814:	e8 a0 f4 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c000c819:	83 c4 10             	add    esp,0x10
c000c81c:	89 c2                	mov    edx,eax
c000c81e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c822:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c825:	83 ec 0c             	sub    esp,0xc
c000c828:	6a 03                	push   0x3
c000c82a:	6a 01                	push   0x1
c000c82c:	52                   	push   edx
c000c82d:	50                   	push   eax
c000c82e:	53                   	push   ebx
c000c82f:	e8 e6 fd ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c834:	83 c4 20             	add    esp,0x20
c000c837:	89 c2                	mov    edx,eax
c000c839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c83d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c840:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c848:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c850:	7f 1c                	jg     c000c86e <VAS::VAS(bool)+0xa0>
c000c852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c859:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c85d:	c1 e2 02             	shl    edx,0x2
c000c860:	01 d0                	add    eax,edx
c000c862:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c868:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c86c:	eb da                	jmp    c000c848 <VAS::VAS(bool)+0x7a>
c000c86e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c876:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c87e:	7f 7a                	jg     c000c8fa <VAS::VAS(bool)+0x12c>
c000c880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c884:	2d 00 02 00 00       	sub    eax,0x200
c000c889:	c1 e0 0c             	shl    eax,0xc
c000c88c:	83 c8 03             	or     eax,0x3
c000c88f:	89 c2                	mov    edx,eax
c000c891:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c896:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c89c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c8a2:	83 e0 10             	and    eax,0x10
c000c8a5:	84 c0                	test   al,al
c000c8a7:	74 07                	je     c000c8b0 <VAS::VAS(bool)+0xe2>
c000c8a9:	b8 00 01 00 00       	mov    eax,0x100
c000c8ae:	eb 05                	jmp    c000c8b5 <VAS::VAS(bool)+0xe7>
c000c8b0:	b8 00 00 00 00       	mov    eax,0x0
c000c8b5:	09 d0                	or     eax,edx
c000c8b7:	89 c1                	mov    ecx,eax
c000c8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8bd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8c4:	c1 e2 02             	shl    edx,0x2
c000c8c7:	01 d0                	add    eax,edx
c000c8c9:	89 ca                	mov    edx,ecx
c000c8cb:	89 10                	mov    DWORD PTR [eax],edx
c000c8cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c8d1:	2d 40 03 00 00       	sub    eax,0x340
c000c8d6:	83 f8 7f             	cmp    eax,0x7f
c000c8d9:	77 16                	ja     c000c8f1 <VAS::VAS(bool)+0x123>
c000c8db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8e6:	c1 e2 02             	shl    edx,0x2
c000c8e9:	01 d0                	add    eax,edx
c000c8eb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8f1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8f5:	e9 7c ff ff ff       	jmp    c000c876 <VAS::VAS(bool)+0xa8>
c000c8fa:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c8ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c905:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c90b:	83 e0 10             	and    eax,0x10
c000c90e:	84 c0                	test   al,al
c000c910:	74 07                	je     c000c919 <VAS::VAS(bool)+0x14b>
c000c912:	b8 03 41 00 00       	mov    eax,0x4103
c000c917:	eb 05                	jmp    c000c91e <VAS::VAS(bool)+0x150>
c000c919:	b8 03 40 00 00       	mov    eax,0x4003
c000c91e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c922:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c925:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c92b:	89 02                	mov    DWORD PTR [edx],eax
c000c92d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c938:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c93e:	83 ec 08             	sub    esp,0x8
c000c941:	50                   	push   eax
c000c942:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c946:	e8 b3 fc ff ff       	call   c000c5fe <VAS::setCPUSpecific(unsigned long)>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c952:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c955:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c95a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c960:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c966:	83 e0 10             	and    eax,0x10
c000c969:	84 c0                	test   al,al
c000c96b:	74 07                	je     c000c974 <VAS::VAS(bool)+0x1a6>
c000c96d:	b8 00 01 00 00       	mov    eax,0x100
c000c972:	eb 05                	jmp    c000c979 <VAS::VAS(bool)+0x1ab>
c000c974:	b8 00 00 00 00       	mov    eax,0x0
c000c979:	09 c2                	or     edx,eax
c000c97b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c97f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c982:	05 fc 0f 00 00       	add    eax,0xffc
c000c987:	83 ca 03             	or     edx,0x3
c000c98a:	89 10                	mov    DWORD PTR [eax],edx
c000c98c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c991:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c997:	83 ec 0c             	sub    esp,0xc
c000c99a:	50                   	push   eax
c000c99b:	e8 26 1e 00 00       	call   c000e7c6 <Device::getName()>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	83 ec 08             	sub    esp,0x8
c000c9a6:	68 24 43 02 c0       	push   0xc0024324
c000c9ab:	50                   	push   eax
c000c9ac:	e8 13 3e ff ff       	call   c00007c4 <strcmp>
c000c9b1:	83 c4 10             	add    esp,0x10
c000c9b4:	85 c0                	test   eax,eax
c000c9b6:	0f 94 c0             	sete   al
c000c9b9:	84 c0                	test   al,al
c000c9bb:	0f 84 87 00 00 00    	je     c000ca48 <VAS::VAS(bool)+0x27a>
c000c9c1:	fa                   	cli    
c000c9c2:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c9c7:	40                   	inc    eax
c000c9c8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c9cd:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c9d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9d8:	05 7c 09 00 00       	add    eax,0x97c
c000c9dd:	83 ec 0c             	sub    esp,0xc
c000c9e0:	50                   	push   eax
c000c9e1:	e8 10 ce ff ff       	call   c00097f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9ee:	89 c3                	mov    ebx,eax
c000c9f0:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c9f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9fb:	05 7c 09 00 00       	add    eax,0x97c
c000ca00:	83 ec 0c             	sub    esp,0xc
c000ca03:	50                   	push   eax
c000ca04:	e8 ed cd ff ff       	call   c00097f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca09:	83 c4 10             	add    esp,0x10
c000ca0c:	83 ec 08             	sub    esp,0x8
c000ca0f:	50                   	push   eax
c000ca10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca14:	e8 75 f5 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca23:	6a 11                	push   0x11
c000ca25:	53                   	push   ebx
c000ca26:	50                   	push   eax
c000ca27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca2b:	e8 f4 f8 ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000ca38:	48                   	dec    eax
c000ca39:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000ca3e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000ca43:	85 c0                	test   eax,eax
c000ca45:	75 01                	jne    c000ca48 <VAS::VAS(bool)+0x27a>
c000ca47:	fb                   	sti    
c000ca48:	90                   	nop
c000ca49:	83 c4 28             	add    esp,0x28
c000ca4c:	5b                   	pop    ebx
c000ca4d:	c3                   	ret    

c000ca4e <VAS::VAS()>:
c000ca4e:	53                   	push   ebx
c000ca4f:	83 ec 18             	sub    esp,0x18
c000ca52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca6c:	a3 d4 7d 02 c0       	mov    ds:0xc0027dd4,eax
c000ca71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca75:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca84:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca8b:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca93:	83 ec 0c             	sub    esp,0xc
c000ca96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca9a:	e8 68 d2 ff ff       	call   c0009d07 <malloc>
c000ca9f:	83 c4 10             	add    esp,0x10
c000caa2:	89 c3                	mov    ebx,eax
c000caa4:	83 ec 08             	sub    esp,0x8
c000caa7:	6a 01                	push   0x1
c000caa9:	53                   	push   ebx
c000caaa:	e8 1f fd ff ff       	call   c000c7ce <VAS::VAS(bool)>
c000caaf:	83 c4 10             	add    esp,0x10
c000cab2:	89 1d cc 7d 02 c0    	mov    DWORD PTR ds:0xc0027dcc,ebx
c000cab8:	90                   	nop
c000cab9:	83 c4 18             	add    esp,0x18
c000cabc:	5b                   	pop    ebx
c000cabd:	c3                   	ret    

c000cabe <VAS::evict(unsigned long)>:
c000cabe:	55                   	push   ebp
c000cabf:	57                   	push   edi
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	83 ec 1c             	sub    esp,0x1c
c000cac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cac9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cacd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cad1:	e8 24 f3 ff ff       	call   c000bdfa <Virt::allocateSwapfilePage()>
c000cad6:	89 c7                	mov    edi,eax
c000cad8:	a1 ec 70 02 c0       	mov    eax,ds:0xc00270ec
c000cadd:	85 c0                	test   eax,eax
c000cadf:	7e 3d                	jle    c000cb1e <VAS::evict(unsigned long)+0x60>
c000cae1:	89 ee                	mov    esi,ebp
c000cae3:	31 db                	xor    ebx,ebx
c000cae5:	83 ec 0c             	sub    esp,0xc
c000cae8:	57                   	push   edi
c000cae9:	e8 fa f2 ff ff       	call   c000bde8 <Virt::swapIDToSector(unsigned long)>
c000caee:	89 34 24             	mov    DWORD PTR [esp],esi
c000caf1:	01 d8                	add    eax,ebx
c000caf3:	6a 01                	push   0x1
c000caf5:	31 d2                	xor    edx,edx
c000caf7:	43                   	inc    ebx
c000caf8:	52                   	push   edx
c000caf9:	81 c6 00 02 00 00    	add    esi,0x200
c000caff:	50                   	push   eax
c000cb00:	0f be 05 f8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270f8
c000cb07:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c000cb0e:	e8 6b 3b 00 00       	call   c001067e <LogicalDisk::write(unsigned long long, int, void*)>
c000cb13:	83 c4 20             	add    esp,0x20
c000cb16:	39 1d ec 70 02 c0    	cmp    DWORD PTR ds:0xc00270ec,ebx
c000cb1c:	7f c7                	jg     c000cae5 <VAS::evict(unsigned long)+0x27>
c000cb1e:	83 ec 08             	sub    esp,0x8
c000cb21:	c1 e7 0b             	shl    edi,0xb
c000cb24:	55                   	push   ebp
c000cb25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb29:	e8 60 f4 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000cb2e:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb30:	89 d3                	mov    ebx,edx
c000cb32:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb38:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb3e:	09 d7                	or     edi,edx
c000cb40:	89 38                	mov    DWORD PTR [eax],edi
c000cb42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb45:	ff 05 c8 7d 02 c0    	inc    DWORD PTR ds:0xc0027dc8
c000cb4b:	e8 eb d7 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c000cb50:	0f 20 d8             	mov    eax,cr3
c000cb53:	0f 22 d8             	mov    cr3,eax
c000cb56:	ff 35 c8 7d 02 c0    	push   DWORD PTR ds:0xc0027dc8
c000cb5c:	55                   	push   ebp
c000cb5d:	53                   	push   ebx
c000cb5e:	68 74 42 02 c0       	push   0xc0024274
c000cb63:	e8 ab 04 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cb68:	a1 c4 7d 02 c0       	mov    eax,ds:0xc0027dc4
c000cb6d:	c7 44 24 50 32 43 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024332
c000cb75:	8d 50 01             	lea    edx,[eax+0x1]
c000cb78:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb7c:	89 15 c4 7d 02 c0    	mov    DWORD PTR ds:0xc0027dc4,edx
c000cb82:	83 c4 3c             	add    esp,0x3c
c000cb85:	5b                   	pop    ebx
c000cb86:	5e                   	pop    esi
c000cb87:	5f                   	pop    edi
c000cb88:	5d                   	pop    ebp
c000cb89:	e9 85 04 00 00       	jmp    c000d013 <Dbg::kprintf(char const*, ...)>

c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb8e:	55                   	push   ebp
c000cb8f:	57                   	push   edi
c000cb90:	56                   	push   esi
c000cb91:	53                   	push   ebx
c000cb92:	83 ec 14             	sub    esp,0x14
c000cb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb99:	68 43 43 02 c0       	push   0xc0024343
c000cb9e:	e8 70 04 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbaa:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbb0:	74 20                	je     c000cbd2 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbb2:	83 ec 08             	sub    esp,0x8
c000cbb5:	55                   	push   ebp
c000cbb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbba:	e8 cf f3 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	89 c3                	mov    ebx,eax
c000cbc4:	85 c0                	test   eax,eax
c000cbc6:	74 0a                	je     c000cbd2 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbc8:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbca:	f7 c7 01 00 00 00    	test   edi,0x1
c000cbd0:	74 0a                	je     c000cbdc <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cbd2:	31 c0                	xor    eax,eax
c000cbd4:	83 c4 0c             	add    esp,0xc
c000cbd7:	5b                   	pop    ebx
c000cbd8:	5e                   	pop    esi
c000cbd9:	5f                   	pop    edi
c000cbda:	5d                   	pop    ebp
c000cbdb:	c3                   	ret    
c000cbdc:	e8 dd d7 ff ff       	call   c000a3be <Phys::allocatePage()>
c000cbe1:	c1 ef 0b             	shr    edi,0xb
c000cbe4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cbe6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cbec:	09 c2                	or     edx,eax
c000cbee:	81 ca 01 08 00 00    	or     edx,0x801
c000cbf4:	89 13                	mov    DWORD PTR [ebx],edx
c000cbf6:	8b 0d ec 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270ec
c000cbfc:	85 c9                	test   ecx,ecx
c000cbfe:	7e 3d                	jle    c000cc3d <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc00:	89 ee                	mov    esi,ebp
c000cc02:	31 db                	xor    ebx,ebx
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	57                   	push   edi
c000cc08:	e8 db f1 ff ff       	call   c000bde8 <Virt::swapIDToSector(unsigned long)>
c000cc0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc10:	01 d8                	add    eax,ebx
c000cc12:	6a 01                	push   0x1
c000cc14:	31 d2                	xor    edx,edx
c000cc16:	43                   	inc    ebx
c000cc17:	52                   	push   edx
c000cc18:	81 c6 00 02 00 00    	add    esi,0x200
c000cc1e:	50                   	push   eax
c000cc1f:	0f be 05 f8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270f8
c000cc26:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c000cc2d:	e8 e0 39 00 00       	call   c0010612 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc32:	83 c4 20             	add    esp,0x20
c000cc35:	39 1d ec 70 02 c0    	cmp    DWORD PTR ds:0xc00270ec,ebx
c000cc3b:	7f c7                	jg     c000cc04 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc3d:	a1 c8 7d 02 c0       	mov    eax,ds:0xc0027dc8
c000cc42:	48                   	dec    eax
c000cc43:	52                   	push   edx
c000cc44:	a3 c8 7d 02 c0       	mov    ds:0xc0027dc8,eax
c000cc49:	50                   	push   eax
c000cc4a:	55                   	push   ebp
c000cc4b:	68 56 43 02 c0       	push   0xc0024356
c000cc50:	e8 be 03 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cc55:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc58:	e8 6d f1 ff ff       	call   c000bdca <Virt::freeSwapfilePage(unsigned long)>
c000cc5d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000cc62:	83 c4 10             	add    esp,0x10
c000cc65:	48                   	dec    eax
c000cc66:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000cc6b:	85 c0                	test   eax,eax
c000cc6d:	74 1d                	je     c000cc8c <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc73:	25 ff 0f 00 00       	and    eax,0xfff
c000cc78:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc7d:	77 10                	ja     c000cc8f <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc7f:	0f 20 d8             	mov    eax,cr3
c000cc82:	0f 22 d8             	mov    cr3,eax
c000cc85:	b0 01                	mov    al,0x1
c000cc87:	e9 48 ff ff ff       	jmp    c000cbd4 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc8c:	fb                   	sti    
c000cc8d:	eb e0                	jmp    c000cc6f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc8f:	83 ec 0c             	sub    esp,0xc
c000cc92:	68 6b 43 02 c0       	push   0xc002436b
c000cc97:	e8 77 03 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cc9c:	83 c4 10             	add    esp,0x10
c000cc9f:	eb de                	jmp    c000cc7f <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cca1:	90                   	nop

c000cca2 <VAS::scanForEviction()>:
c000cca2:	57                   	push   edi
c000cca3:	31 ff                	xor    edi,edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	83 ec 10             	sub    esp,0x10
c000ccaa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccae:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccb1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccb7:	75 0e                	jne    c000ccc7 <VAS::scanForEviction()+0x25>
c000ccb9:	89 da                	mov    edx,ebx
c000ccbb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccbe:	c1 ea 16             	shr    edx,0x16
c000ccc1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccc5:	74 4e                	je     c000cd15 <VAS::scanForEviction()+0x73>
c000ccc7:	53                   	push   ebx
c000ccc8:	56                   	push   esi
c000ccc9:	e8 c0 f2 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000ccce:	5a                   	pop    edx
c000cccf:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccd1:	59                   	pop    ecx
c000ccd2:	89 d1                	mov    ecx,edx
c000ccd4:	81 e1 01 08 00 00    	and    ecx,0x801
c000ccda:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cce0:	74 3e                	je     c000cd20 <VAS::scanForEviction()+0x7e>
c000cce2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cce8:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000ccee:	76 2b                	jbe    c000cd1b <VAS::scanForEviction()+0x79>
c000ccf0:	47                   	inc    edi
c000ccf1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccf8:	83 ff 03             	cmp    edi,0x3
c000ccfb:	74 32                	je     c000cd2f <VAS::scanForEviction()+0x8d>
c000ccfd:	31 db                	xor    ebx,ebx
c000ccff:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd05:	75 c0                	jne    c000ccc7 <VAS::scanForEviction()+0x25>
c000cd07:	89 da                	mov    edx,ebx
c000cd09:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd0c:	c1 ea 16             	shr    edx,0x16
c000cd0f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd13:	75 b2                	jne    c000ccc7 <VAS::scanForEviction()+0x25>
c000cd15:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd1b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd1e:	eb 91                	jmp    c000ccb1 <VAS::scanForEviction()+0xf>
c000cd20:	f6 c2 20             	test   dl,0x20
c000cd23:	74 13                	je     c000cd38 <VAS::scanForEviction()+0x96>
c000cd25:	83 e2 df             	and    edx,0xffffffdf
c000cd28:	89 10                	mov    DWORD PTR [eax],edx
c000cd2a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd2d:	eb b3                	jmp    c000cce2 <VAS::scanForEviction()+0x40>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	31 c0                	xor    eax,eax
c000cd34:	5b                   	pop    ebx
c000cd35:	5e                   	pop    esi
c000cd36:	5f                   	pop    edi
c000cd37:	c3                   	ret    
c000cd38:	83 ec 08             	sub    esp,0x8
c000cd3b:	89 d0                	mov    eax,edx
c000cd3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd46:	53                   	push   ebx
c000cd47:	68 7b 43 02 c0       	push   0xc002437b
c000cd4c:	e8 c2 02 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cd51:	58                   	pop    eax
c000cd52:	5a                   	pop    edx
c000cd53:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd56:	56                   	push   esi
c000cd57:	e8 62 fd ff ff       	call   c000cabe <VAS::evict(unsigned long)>
c000cd5c:	59                   	pop    ecx
c000cd5d:	5b                   	pop    ebx
c000cd5e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd61:	68 8f 43 02 c0       	push   0xc002438f
c000cd66:	e8 a8 02 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cd6b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd72:	83 c4 10             	add    esp,0x10
c000cd75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd79:	83 c4 10             	add    esp,0x10
c000cd7c:	5b                   	pop    ebx
c000cd7d:	5e                   	pop    esi
c000cd7e:	5f                   	pop    edi
c000cd7f:	c3                   	ret    

c000cd80 <mapVASFirstTime>:
c000cd80:	55                   	push   ebp
c000cd81:	57                   	push   edi
c000cd82:	56                   	push   esi
c000cd83:	53                   	push   ebx
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd8c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd8f:	4a                   	dec    edx
c000cd90:	0f 84 fe 00 00 00    	je     c000ce94 <mapVASFirstTime+0x114>
c000cd96:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd99:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd9c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cda1:	c1 e5 15             	shl    ebp,0x15
c000cda4:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cda9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cdaf:	29 eb                	sub    ebx,ebp
c000cdb1:	29 ef                	sub    edi,ebp
c000cdb3:	83 ec 08             	sub    esp,0x8
c000cdb6:	53                   	push   ebx
c000cdb7:	68 bb 43 02 c0       	push   0xc00243bb
c000cdbc:	e8 52 02 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cdc1:	e8 f8 d5 ff ff       	call   c000a3be <Phys::allocatePage()>
c000cdc6:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cdcd:	6a 01                	push   0x1
c000cdcf:	53                   	push   ebx
c000cdd0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cdd6:	50                   	push   eax
c000cdd7:	56                   	push   esi
c000cdd8:	e8 3d f8 ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cddd:	83 c4 20             	add    esp,0x20
c000cde0:	39 fb                	cmp    ebx,edi
c000cde2:	75 cf                	jne    c000cdb3 <mapVASFirstTime+0x33>
c000cde4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cde9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cdee:	29 eb                	sub    ebx,ebp
c000cdf0:	29 ef                	sub    edi,ebp
c000cdf2:	83 ec 08             	sub    esp,0x8
c000cdf5:	53                   	push   ebx
c000cdf6:	68 d7 43 02 c0       	push   0xc00243d7
c000cdfb:	e8 13 02 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ce00:	58                   	pop    eax
c000ce01:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce05:	5a                   	pop    edx
c000ce06:	19 c0                	sbb    eax,eax
c000ce08:	83 e0 04             	and    eax,0x4
c000ce0b:	05 03 04 00 00       	add    eax,0x403
c000ce10:	50                   	push   eax
c000ce11:	68 eb 43 02 c0       	push   0xc00243eb
c000ce16:	e8 f8 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ce1b:	e8 9e d5 ff ff       	call   c000a3be <Phys::allocatePage()>
c000ce20:	59                   	pop    ecx
c000ce21:	89 c5                	mov    ebp,eax
c000ce23:	58                   	pop    eax
c000ce24:	55                   	push   ebp
c000ce25:	68 f9 43 02 c0       	push   0xc00243f9
c000ce2a:	e8 e4 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ce2f:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce33:	19 d2                	sbb    edx,edx
c000ce35:	83 e2 04             	and    edx,0x4
c000ce38:	81 c2 03 04 00 00    	add    edx,0x403
c000ce3e:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce41:	6a 01                	push   0x1
c000ce43:	53                   	push   ebx
c000ce44:	55                   	push   ebp
c000ce45:	56                   	push   esi
c000ce46:	e8 cf f7 ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce4b:	83 c4 18             	add    esp,0x18
c000ce4e:	53                   	push   ebx
c000ce4f:	56                   	push   esi
c000ce50:	e8 39 f1 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c000ce55:	5a                   	pop    edx
c000ce56:	59                   	pop    ecx
c000ce57:	ff 30                	push   DWORD PTR [eax]
c000ce59:	68 15 44 02 c0       	push   0xc0024415
c000ce5e:	e8 b0 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ce63:	0f 20 d8             	mov    eax,cr3
c000ce66:	83 c4 0c             	add    esp,0xc
c000ce69:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce6f:	56                   	push   esi
c000ce70:	50                   	push   eax
c000ce71:	68 20 44 02 c0       	push   0xc0024420
c000ce76:	e8 98 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ce7b:	83 c4 10             	add    esp,0x10
c000ce7e:	39 df                	cmp    edi,ebx
c000ce80:	0f 85 6c ff ff ff    	jne    c000cdf2 <mapVASFirstTime+0x72>
c000ce86:	0f 20 d8             	mov    eax,cr3
c000ce89:	0f 22 d8             	mov    cr3,eax
c000ce8c:	83 c4 0c             	add    esp,0xc
c000ce8f:	5b                   	pop    ebx
c000ce90:	5e                   	pop    esi
c000ce91:	5f                   	pop    edi
c000ce92:	5d                   	pop    ebp
c000ce93:	c3                   	ret    
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	68 a2 43 02 c0       	push   0xc00243a2
c000ce9c:	e8 72 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cea1:	83 c4 10             	add    esp,0x10
c000cea4:	83 c4 0c             	add    esp,0xc
c000cea7:	5b                   	pop    ebx
c000cea8:	5e                   	pop    esi
c000cea9:	5f                   	pop    edi
c000ceaa:	5d                   	pop    ebp
c000ceab:	c3                   	ret    

c000ceac <__cxa_atexit>:
c000ceac:	31 c0                	xor    eax,eax
c000ceae:	c3                   	ret    

c000ceaf <__cxa_finalize>:
c000ceaf:	c3                   	ret    

c000ceb0 <__stack_chk_fail>:
c000ceb0:	55                   	push   ebp
c000ceb1:	89 e5                	mov    ebp,esp
c000ceb3:	83 ec 14             	sub    esp,0x14
c000ceb6:	68 38 44 02 c0       	push   0xc0024438
c000cebb:	e8 53 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cec0:	58                   	pop    eax
c000cec1:	5a                   	pop    edx
c000cec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cec5:	68 88 44 02 c0       	push   0xc0024488
c000ceca:	e8 44 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cecf:	59                   	pop    ecx
c000ced0:	58                   	pop    eax
c000ced1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ced4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ced7:	68 88 44 02 c0       	push   0xc0024488
c000cedc:	e8 32 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cee1:	5a                   	pop    edx
c000cee2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee5:	59                   	pop    ecx
c000cee6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cee8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ceeb:	68 88 44 02 c0       	push   0xc0024488
c000cef0:	e8 1e 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cef5:	5a                   	pop    edx
c000cef6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cef9:	59                   	pop    ecx
c000cefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf01:	68 88 44 02 c0       	push   0xc0024488
c000cf06:	e8 08 01 00 00       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000cf0b:	c7 04 24 90 44 02 c0 	mov    DWORD PTR [esp],0xc0024490
c000cf12:	e8 5a 7e 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000cf17:	83 c4 10             	add    esp,0x10
c000cf1a:	c9                   	leave  
c000cf1b:	c3                   	ret    

c000cf1c <__cxa_pure_virtual>:
c000cf1c:	83 ec 18             	sub    esp,0x18
c000cf1f:	68 a8 44 02 c0       	push   0xc00244a8
c000cf24:	e8 48 7e 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000cf29:	83 c4 1c             	add    esp,0x1c
c000cf2c:	c3                   	ret    

c000cf2d <operator new[](unsigned long)>:
c000cf2d:	e9 d5 cd ff ff       	jmp    c0009d07 <malloc>

c000cf32 <operator delete(void*, unsigned long)>:
c000cf32:	e9 f0 cd ff ff       	jmp    c0009d27 <rfree>

c000cf37 <operator delete[](void*)>:
c000cf37:	e9 eb cd ff ff       	jmp    c0009d27 <rfree>

c000cf3c <operator delete[](void*, unsigned long)>:
c000cf3c:	e9 e6 cd ff ff       	jmp    c0009d27 <rfree>

c000cf41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf41:	55                   	push   ebp
c000cf42:	b9 11 00 00 00       	mov    ecx,0x11
c000cf47:	57                   	push   edi
c000cf48:	56                   	push   esi
c000cf49:	be 8e 3f 02 c0       	mov    esi,0xc0023f8e
c000cf4e:	53                   	push   ebx
c000cf4f:	83 ec 20             	sub    esp,0x20
c000cf52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf56:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf5a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf5e:	fc                   	cld    
c000cf5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf61:	89 ee                	mov    esi,ebp
c000cf63:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf67:	eb 02                	jmp    c000cf6b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf69:	89 c6                	mov    esi,eax
c000cf6b:	31 d2                	xor    edx,edx
c000cf6d:	41                   	inc    ecx
c000cf6e:	89 f0                	mov    eax,esi
c000cf70:	f7 f3                	div    ebx
c000cf72:	39 de                	cmp    esi,ebx
c000cf74:	73 f3                	jae    c000cf69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf76:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf79:	eb 02                	jmp    c000cf7d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf7b:	89 c5                	mov    ebp,eax
c000cf7d:	31 d2                	xor    edx,edx
c000cf7f:	49                   	dec    ecx
c000cf80:	89 e8                	mov    eax,ebp
c000cf82:	f7 f3                	div    ebx
c000cf84:	39 dd                	cmp    ebp,ebx
c000cf86:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf8a:	88 11                	mov    BYTE PTR [ecx],dl
c000cf8c:	73 ed                	jae    c000cf7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf92:	83 c4 20             	add    esp,0x20
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	5f                   	pop    edi
c000cf98:	5d                   	pop    ebp
c000cf99:	c3                   	ret    

c000cf9a <Dbg::logc(char)>:
c000cf9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf9e:	f6 05 c0 7c 02 c0 10 	test   BYTE PTR ds:0xc0027cc0,0x10
c000cfa5:	75 12                	jne    c000cfb9 <Dbg::logc(char)+0x1f>
c000cfa7:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfac:	ec                   	in     al,dx
c000cfad:	a8 20                	test   al,0x20
c000cfaf:	74 fb                	je     c000cfac <Dbg::logc(char)+0x12>
c000cfb1:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfb6:	88 c8                	mov    al,cl
c000cfb8:	ee                   	out    dx,al
c000cfb9:	c3                   	ret    

c000cfba <Dbg::logs(char*)>:
c000cfba:	53                   	push   ebx
c000cfbb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cfbf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cfc2:	84 c0                	test   al,al
c000cfc4:	74 0f                	je     c000cfd5 <Dbg::logs(char*)+0x1b>
c000cfc6:	50                   	push   eax
c000cfc7:	43                   	inc    ebx
c000cfc8:	e8 cd ff ff ff       	call   c000cf9a <Dbg::logc(char)>
c000cfcd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cfd0:	5a                   	pop    edx
c000cfd1:	84 c0                	test   al,al
c000cfd3:	75 f1                	jne    c000cfc6 <Dbg::logs(char*)+0xc>
c000cfd5:	5b                   	pop    ebx
c000cfd6:	c3                   	ret    

c000cfd7 <Dbg::logWriteInt(unsigned int)>:
c000cfd7:	83 ec 10             	sub    esp,0x10
c000cfda:	6a 0a                	push   0xa
c000cfdc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfe0:	50                   	push   eax
c000cfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfe5:	e8 57 ff ff ff       	call   c000cf41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfea:	50                   	push   eax
c000cfeb:	e8 ca ff ff ff       	call   c000cfba <Dbg::logs(char*)>
c000cff0:	83 c4 20             	add    esp,0x20
c000cff3:	c3                   	ret    

c000cff4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cff4:	83 ec 10             	sub    esp,0x10
c000cff7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cffb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfff:	50                   	push   eax
c000d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d004:	e8 38 ff ff ff       	call   c000cf41 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d009:	50                   	push   eax
c000d00a:	e8 ab ff ff ff       	call   c000cfba <Dbg::logs(char*)>
c000d00f:	83 c4 20             	add    esp,0x20
c000d012:	c3                   	ret    

c000d013 <Dbg::kprintf(char const*, ...)>:
c000d013:	55                   	push   ebp
c000d014:	57                   	push   edi
c000d015:	56                   	push   esi
c000d016:	53                   	push   ebx
c000d017:	83 ec 0c             	sub    esp,0xc
c000d01a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d01e:	f6 05 c0 7c 02 c0 10 	test   BYTE PTR ds:0xc0027cc0,0x10
c000d025:	74 08                	je     c000d02f <Dbg::kprintf(char const*, ...)+0x1c>
c000d027:	83 c4 0c             	add    esp,0xc
c000d02a:	5b                   	pop    ebx
c000d02b:	5e                   	pop    esi
c000d02c:	5f                   	pop    edi
c000d02d:	5d                   	pop    ebp
c000d02e:	c3                   	ret    
c000d02f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d033:	31 db                	xor    ebx,ebx
c000d035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d039:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d03c:	84 c0                	test   al,al
c000d03e:	74 e7                	je     c000d027 <Dbg::kprintf(char const*, ...)+0x14>
c000d040:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d043:	3c 25                	cmp    al,0x25
c000d045:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d048:	75 44                	jne    c000d08e <Dbg::kprintf(char const*, ...)+0x7b>
c000d04a:	83 c3 02             	add    ebx,0x2
c000d04d:	8a 07                	mov    al,BYTE PTR [edi]
c000d04f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d052:	83 e8 25             	sub    eax,0x25
c000d055:	3c 53                	cmp    al,0x53
c000d057:	0f 87 c9 00 00 00    	ja     c000d126 <Dbg::kprintf(char const*, ...)+0x113>
c000d05d:	0f b6 c0             	movzx  eax,al
c000d060:	ff 24 85 bc 44 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbb44]
c000d067:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d06b:	89 c8                	mov    eax,ecx
c000d06d:	83 c1 04             	add    ecx,0x4
c000d070:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d074:	ff 30                	push   DWORD PTR [eax]
c000d076:	e8 5c ff ff ff       	call   c000cfd7 <Dbg::logWriteInt(unsigned int)>
c000d07b:	5f                   	pop    edi
c000d07c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d080:	84 c0                	test   al,al
c000d082:	74 a3                	je     c000d027 <Dbg::kprintf(char const*, ...)+0x14>
c000d084:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d087:	3c 25                	cmp    al,0x25
c000d089:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d08c:	74 bc                	je     c000d04a <Dbg::kprintf(char const*, ...)+0x37>
c000d08e:	50                   	push   eax
c000d08f:	89 eb                	mov    ebx,ebp
c000d091:	e8 04 ff ff ff       	call   c000cf9a <Dbg::logc(char)>
c000d096:	89 fd                	mov    ebp,edi
c000d098:	58                   	pop    eax
c000d099:	eb e1                	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d09b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d09f:	89 c8                	mov    eax,ecx
c000d0a1:	83 c1 04             	add    ecx,0x4
c000d0a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a8:	ff 30                	push   DWORD PTR [eax]
c000d0aa:	e8 0b ff ff ff       	call   c000cfba <Dbg::logs(char*)>
c000d0af:	58                   	pop    eax
c000d0b0:	eb ca                	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d0b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b6:	89 d0                	mov    eax,edx
c000d0b8:	83 c2 04             	add    edx,0x4
c000d0bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0bf:	ff 30                	push   DWORD PTR [eax]
c000d0c1:	e8 11 ff ff ff       	call   c000cfd7 <Dbg::logWriteInt(unsigned int)>
c000d0c6:	58                   	pop    eax
c000d0c7:	eb b3                	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d0c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0cd:	89 d0                	mov    eax,edx
c000d0cf:	83 c2 04             	add    edx,0x4
c000d0d2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d0d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0d9:	50                   	push   eax
c000d0da:	e8 bb fe ff ff       	call   c000cf9a <Dbg::logc(char)>
c000d0df:	58                   	pop    eax
c000d0e0:	eb 9a                	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d0e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0e6:	89 c8                	mov    eax,ecx
c000d0e8:	83 c1 04             	add    ecx,0x4
c000d0eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0ef:	6a 10                	push   0x10
c000d0f1:	ff 30                	push   DWORD PTR [eax]
c000d0f3:	e8 fc fe ff ff       	call   c000cff4 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0f8:	59                   	pop    ecx
c000d0f9:	5f                   	pop    edi
c000d0fa:	eb 80                	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d0fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d100:	89 d0                	mov    eax,edx
c000d102:	83 c2 08             	add    edx,0x8
c000d105:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d109:	6a 10                	push   0x10
c000d10b:	ff 30                	push   DWORD PTR [eax]
c000d10d:	e8 e2 fe ff ff       	call   c000cff4 <Dbg::logWriteIntBase(unsigned int, int)>
c000d112:	58                   	pop    eax
c000d113:	5a                   	pop    edx
c000d114:	e9 63 ff ff ff       	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d119:	6a 25                	push   0x25
c000d11b:	e8 7a fe ff ff       	call   c000cf9a <Dbg::logc(char)>
c000d120:	58                   	pop    eax
c000d121:	e9 56 ff ff ff       	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d126:	6a 25                	push   0x25
c000d128:	e8 6d fe ff ff       	call   c000cf9a <Dbg::logc(char)>
c000d12d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d130:	50                   	push   eax
c000d131:	e8 64 fe ff ff       	call   c000cf9a <Dbg::logc(char)>
c000d136:	5a                   	pop    edx
c000d137:	59                   	pop    ecx
c000d138:	e9 3f ff ff ff       	jmp    c000d07c <Dbg::kprintf(char const*, ...)+0x69>
c000d13d:	90                   	nop

c000d13e <File::read(unsigned long long, void*, int*)>:
c000d13e:	53                   	push   ebx
c000d13f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d143:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d147:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d14e:	3c 19                	cmp    al,0x19
c000d150:	77 35                	ja     c000d187 <File::read(unsigned long long, void*, int*)+0x49>
c000d152:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d159:	85 c0                	test   eax,eax
c000d15b:	74 2a                	je     c000d187 <File::read(unsigned long long, void*, int*)+0x49>
c000d15d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d163:	85 c0                	test   eax,eax
c000d165:	74 20                	je     c000d187 <File::read(unsigned long long, void*, int*)+0x49>
c000d167:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d16b:	74 21                	je     c000d18e <File::read(unsigned long long, void*, int*)+0x50>
c000d16d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d16f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d173:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d179:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d17d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d181:	5b                   	pop    ebx
c000d182:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d185:	ff e0                	jmp    eax
c000d187:	b8 0b 00 00 00       	mov    eax,0xb
c000d18c:	eb 05                	jmp    c000d193 <File::read(unsigned long long, void*, int*)+0x55>
c000d18e:	b8 05 00 00 00       	mov    eax,0x5
c000d193:	5b                   	pop    ebx
c000d194:	c3                   	ret    
c000d195:	90                   	nop

c000d196 <File::write(unsigned long long, void*, int*)>:
c000d196:	53                   	push   ebx
c000d197:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d19b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d19f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1a6:	3c 19                	cmp    al,0x19
c000d1a8:	77 35                	ja     c000d1df <File::write(unsigned long long, void*, int*)+0x49>
c000d1aa:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d1b1:	85 c0                	test   eax,eax
c000d1b3:	74 2a                	je     c000d1df <File::write(unsigned long long, void*, int*)+0x49>
c000d1b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1bb:	85 c0                	test   eax,eax
c000d1bd:	74 20                	je     c000d1df <File::write(unsigned long long, void*, int*)+0x49>
c000d1bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1c3:	74 21                	je     c000d1e6 <File::write(unsigned long long, void*, int*)+0x50>
c000d1c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1d9:	5b                   	pop    ebx
c000d1da:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d1dd:	ff e0                	jmp    eax
c000d1df:	b8 0b 00 00 00       	mov    eax,0xb
c000d1e4:	eb 05                	jmp    c000d1eb <File::write(unsigned long long, void*, int*)+0x55>
c000d1e6:	b8 05 00 00 00       	mov    eax,0x5
c000d1eb:	5b                   	pop    ebx
c000d1ec:	c3                   	ret    
c000d1ed:	90                   	nop

c000d1ee <Directory::read(unsigned long long, void*, int*)>:
c000d1ee:	53                   	push   ebx
c000d1ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1fe:	3c 19                	cmp    al,0x19
c000d200:	77 35                	ja     c000d237 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d202:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d209:	85 c0                	test   eax,eax
c000d20b:	74 2a                	je     c000d237 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d20d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d213:	85 c0                	test   eax,eax
c000d215:	74 20                	je     c000d237 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d217:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d21b:	74 21                	je     c000d23e <Directory::read(unsigned long long, void*, int*)+0x50>
c000d21d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d21f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d223:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d22d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d231:	5b                   	pop    ebx
c000d232:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d235:	ff e0                	jmp    eax
c000d237:	b8 0b 00 00 00       	mov    eax,0xb
c000d23c:	eb 05                	jmp    c000d243 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d23e:	b8 05 00 00 00       	mov    eax,0x5
c000d243:	5b                   	pop    ebx
c000d244:	c3                   	ret    
c000d245:	90                   	nop

c000d246 <Directory::write(unsigned long long, void*, int*)>:
c000d246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d24a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d251:	b8 0b 00 00 00       	mov    eax,0xb
c000d256:	80 fa 19             	cmp    dl,0x19
c000d259:	77 18                	ja     c000d273 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d25b:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d262:	85 d2                	test   edx,edx
c000d264:	74 0d                	je     c000d273 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d266:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d26d:	19 c0                	sbb    eax,eax
c000d26f:	83 e0 0a             	and    eax,0xa
c000d272:	40                   	inc    eax
c000d273:	c3                   	ret    

c000d274 <File::isAtty()>:
c000d274:	31 c0                	xor    eax,eax
c000d276:	c3                   	ret    
c000d277:	90                   	nop

c000d278 <Directory::isAtty()>:
c000d278:	31 c0                	xor    eax,eax
c000d27a:	c3                   	ret    
c000d27b:	90                   	nop

c000d27c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d27c:	b8 0a 00 00 00       	mov    eax,0xa
c000d281:	c3                   	ret    

c000d282 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d282:	b8 0a 00 00 00       	mov    eax,0xa
c000d287:	c3                   	ret    

c000d288 <Filesystem::allocateSwapfile(char const*, int)>:
c000d288:	31 c0                	xor    eax,eax
c000d28a:	31 d2                	xor    edx,edx
c000d28c:	c3                   	ret    
c000d28d:	90                   	nop

c000d28e <File::~File()>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	ba f8 46 02 c0       	mov    edx,0xc00246f8
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	89 10                	mov    DWORD PTR [eax],edx
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	50                   	push   eax
c000d2a4:	e8 af e7 ff ff       	call   c000ba58 <UnixFile::~UnixFile()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	83 c4 0c             	add    esp,0xc
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <File::~File()>:
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2bc:	e8 cd ff ff ff       	call   c000d28e <File::~File()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	68 14 01 00 00       	push   0x114
c000d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d0:	e8 5d fc ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <Directory::~Directory()>:
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	ba 14 47 02 c0       	mov    edx,0xc0024714
c000d2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e8:	89 10                	mov    DWORD PTR [eax],edx
c000d2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ee:	83 ec 0c             	sub    esp,0xc
c000d2f1:	50                   	push   eax
c000d2f2:	e8 61 e7 ff ff       	call   c000ba58 <UnixFile::~UnixFile()>
c000d2f7:	83 c4 10             	add    esp,0x10
c000d2fa:	90                   	nop
c000d2fb:	83 c4 0c             	add    esp,0xc
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <Directory::~Directory()>:
c000d300:	83 ec 0c             	sub    esp,0xc
c000d303:	83 ec 0c             	sub    esp,0xc
c000d306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30a:	e8 cd ff ff ff       	call   c000d2dc <Directory::~Directory()>
c000d30f:	83 c4 10             	add    esp,0x10
c000d312:	83 ec 08             	sub    esp,0x8
c000d315:	68 14 01 00 00       	push   0x114
c000d31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31e:	e8 0f fc ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	83 c4 0c             	add    esp,0xc
c000d329:	c3                   	ret    

c000d32a <Filesystem::Filesystem()>:
c000d32a:	ba 90 46 02 c0       	mov    edx,0xc0024690
c000d32f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d333:	89 10                	mov    DWORD PTR [eax],edx
c000d335:	8b 15 d8 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027dd8
c000d33b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	a3 d8 7d 02 c0       	mov    ds:0xc0027dd8,eax
c000d34b:	90                   	nop
c000d34c:	c3                   	ret    
c000d34d:	90                   	nop

c000d34e <Filesystem::~Filesystem()>:
c000d34e:	ba 90 46 02 c0       	mov    edx,0xc0024690
c000d353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d357:	89 10                	mov    DWORD PTR [eax],edx
c000d359:	90                   	nop
c000d35a:	c3                   	ret    
c000d35b:	90                   	nop

c000d35c <Filesystem::~Filesystem()>:
c000d35c:	83 ec 0c             	sub    esp,0xc
c000d35f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d363:	e8 e6 ff ff ff       	call   c000d34e <Filesystem::~Filesystem()>
c000d368:	83 c4 04             	add    esp,0x4
c000d36b:	83 ec 08             	sub    esp,0x8
c000d36e:	6a 08                	push   0x8
c000d370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d374:	e8 b9 fb ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000d379:	83 c4 10             	add    esp,0x10
c000d37c:	83 c4 0c             	add    esp,0xc
c000d37f:	c3                   	ret    

c000d380 <Fs::getcwd(Process*, char*, int)>:
c000d380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d384:	31 c0                	xor    eax,eax
c000d386:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d389:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d38d:	7d 15                	jge    c000d3a4 <Fs::getcwd(Process*, char*, int)+0x24>
c000d38f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d393:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d39a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d39d:	84 c9                	test   cl,cl
c000d39f:	74 06                	je     c000d3a7 <Fs::getcwd(Process*, char*, int)+0x27>
c000d3a1:	40                   	inc    eax
c000d3a2:	eb e2                	jmp    c000d386 <Fs::getcwd(Process*, char*, int)+0x6>
c000d3a4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3a7:	31 c0                	xor    eax,eax
c000d3a9:	c3                   	ret    

c000d3aa <Fs::initVFS()>:
c000d3aa:	83 ec 18             	sub    esp,0x18
c000d3ad:	6a 08                	push   0x8
c000d3af:	e8 53 c9 ff ff       	call   c0009d07 <malloc>
c000d3b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3b7:	e8 f0 e5 00 00       	call   c001b9ac <FAT::FAT()>
c000d3bc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3c3:	e8 3f c9 ff ff       	call   c0009d07 <malloc>
c000d3c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3cb:	e8 6c f8 00 00       	call   c001cc3c <ISO9660::ISO9660()>
c000d3d0:	83 c4 1c             	add    esp,0x1c
c000d3d3:	c3                   	ret    

c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d3d4:	55                   	push   ebp
c000d3d5:	57                   	push   edi
c000d3d6:	56                   	push   esi
c000d3d7:	53                   	push   ebx
c000d3d8:	81 ec 10 04 00 00    	sub    esp,0x410
c000d3de:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d3e5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d3ec:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3f3:	68 00 04 00 00       	push   0x400
c000d3f8:	6a 00                	push   0x0
c000d3fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3fe:	56                   	push   esi
c000d3ff:	e8 78 32 ff ff       	call   c000067c <memset>
c000d404:	83 c4 10             	add    esp,0x10
c000d407:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d40b:	75 0b                	jne    c000d418 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d40d:	50                   	push   eax
c000d40e:	50                   	push   eax
c000d40f:	57                   	push   edi
c000d410:	56                   	push   esi
c000d411:	e8 22 33 ff ff       	call   c0000738 <strcpy>
c000d416:	eb 41                	jmp    c000d459 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d418:	8a 07                	mov    al,BYTE PTR [edi]
c000d41a:	3c 5c                	cmp    al,0x5c
c000d41c:	74 04                	je     c000d422 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d41e:	3c 2f                	cmp    al,0x2f
c000d420:	75 18                	jne    c000d43a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d422:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d425:	3c 60                	cmp    al,0x60
c000d427:	7e 03                	jle    c000d42c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d429:	83 e8 20             	sub    eax,0x20
c000d42c:	88 04 24             	mov    BYTE PTR [esp],al
c000d42f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d436:	50                   	push   eax
c000d437:	50                   	push   eax
c000d438:	eb 18                	jmp    c000d452 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d43a:	50                   	push   eax
c000d43b:	50                   	push   eax
c000d43c:	55                   	push   ebp
c000d43d:	56                   	push   esi
c000d43e:	e8 f5 32 ff ff       	call   c0000738 <strcpy>
c000d443:	5a                   	pop    edx
c000d444:	59                   	pop    ecx
c000d445:	68 17 5e 02 c0       	push   0xc0025e17
c000d44a:	56                   	push   esi
c000d44b:	e8 28 34 ff ff       	call   c0000878 <strcat>
c000d450:	5d                   	pop    ebp
c000d451:	58                   	pop    eax
c000d452:	57                   	push   edi
c000d453:	56                   	push   esi
c000d454:	e8 1f 34 ff ff       	call   c0000878 <strcat>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d45f:	3c 60                	cmp    al,0x60
c000d461:	7e 03                	jle    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d463:	83 e8 20             	sub    eax,0x20
c000d466:	88 04 24             	mov    BYTE PTR [esp],al
c000d469:	88 03                	mov    BYTE PTR [ebx],al
c000d46b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d472:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d478:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d47c:	bf 03 00 00 00       	mov    edi,0x3
c000d481:	b8 03 00 00 00       	mov    eax,0x3
c000d486:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d489:	84 d2                	test   dl,dl
c000d48b:	0f 84 91 00 00 00    	je     c000d522 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d491:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d494:	80 fa 5c             	cmp    dl,0x5c
c000d497:	74 05                	je     c000d49e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d499:	80 fa 2f             	cmp    dl,0x2f
c000d49c:	75 12                	jne    c000d4b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d49e:	89 c5                	mov    ebp,eax
c000d4a0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4a5:	74 09                	je     c000d4b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4a7:	40                   	inc    eax
c000d4a8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4ac:	89 cf                	mov    edi,ecx
c000d4ae:	eb d6                	jmp    c000d486 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4b0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4b5:	75 5b                	jne    c000d512 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4b7:	80 fa 2e             	cmp    dl,0x2e
c000d4ba:	75 56                	jne    c000d512 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4bc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4c0:	74 19                	je     c000d4db <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4c2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4c7:	74 53                	je     c000d51c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4c9:	89 f9                	mov    ecx,edi
c000d4cb:	41                   	inc    ecx
c000d4cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d4cf:	80 fa 2f             	cmp    dl,0x2f
c000d4d2:	74 f7                	je     c000d4cb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d4d4:	80 fa 5c             	cmp    dl,0x5c
c000d4d7:	74 f2                	je     c000d4cb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d4d9:	eb d1                	jmp    c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4db:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4e0:	74 3a                	je     c000d51c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4e2:	83 f8 03             	cmp    eax,0x3
c000d4e5:	74 c5                	je     c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4e7:	41                   	inc    ecx
c000d4e8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d4eb:	80 fa 2f             	cmp    dl,0x2f
c000d4ee:	74 f7                	je     c000d4e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4f0:	80 fa 5c             	cmp    dl,0x5c
c000d4f3:	74 f2                	je     c000d4e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4f5:	48                   	dec    eax
c000d4f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4fa:	75 06                	jne    c000d502 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d500:	eb f3                	jmp    c000d4f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d502:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d506:	74 07                	je     c000d50f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d508:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d50c:	48                   	dec    eax
c000d50d:	eb f3                	jmp    c000d502 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d50f:	40                   	inc    eax
c000d510:	eb 9a                	jmp    c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d512:	80 fa 2f             	cmp    dl,0x2f
c000d515:	74 95                	je     c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d517:	80 fa 5c             	cmp    dl,0x5c
c000d51a:	74 90                	je     c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d51c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d51f:	40                   	inc    eax
c000d520:	eb 8a                	jmp    c000d4ac <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d522:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d526:	83 ec 0c             	sub    esp,0xc
c000d529:	53                   	push   ebx
c000d52a:	e8 69 31 ff ff       	call   c0000698 <strlen>
c000d52f:	83 c4 10             	add    esp,0x10
c000d532:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d537:	75 26                	jne    c000d55f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d539:	83 ec 0c             	sub    esp,0xc
c000d53c:	53                   	push   ebx
c000d53d:	e8 56 31 ff ff       	call   c0000698 <strlen>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d54a:	74 26                	je     c000d572 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d54c:	83 ec 0c             	sub    esp,0xc
c000d54f:	53                   	push   ebx
c000d550:	e8 43 31 ff ff       	call   c0000698 <strlen>
c000d555:	83 c4 10             	add    esp,0x10
c000d558:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d55d:	eb c7                	jmp    c000d526 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d55f:	83 ec 0c             	sub    esp,0xc
c000d562:	53                   	push   ebx
c000d563:	e8 30 31 ff ff       	call   c0000698 <strlen>
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d570:	74 c7                	je     c000d539 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d572:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d578:	5b                   	pop    ebx
c000d579:	5e                   	pop    esi
c000d57a:	5f                   	pop    edi
c000d57b:	5d                   	pop    ebp
c000d57c:	c3                   	ret    
c000d57d:	90                   	nop

c000d57e <File::File(char const*, Process*)>:
c000d57e:	83 ec 0c             	sub    esp,0xc
c000d581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d585:	83 ec 08             	sub    esp,0x8
c000d588:	6a 00                	push   0x0
c000d58a:	50                   	push   eax
c000d58b:	e8 e6 e2 ff ff       	call   c000b876 <UnixFile::UnixFile(int)>
c000d590:	83 c4 10             	add    esp,0x10
c000d593:	ba f8 46 02 c0       	mov    edx,0xc00246f8
c000d598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59c:	89 10                	mov    DWORD PTR [eax],edx
c000d59e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ac:	83 c0 0d             	add    eax,0xd
c000d5af:	83 ec 04             	sub    esp,0x4
c000d5b2:	52                   	push   edx
c000d5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b7:	50                   	push   eax
c000d5b8:	e8 17 fe ff ff       	call   c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5bd:	83 c4 10             	add    esp,0x10
c000d5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5c7:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5e6:	0f b6 c0             	movzx  eax,al
c000d5e9:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d5f0:	85 c0                	test   eax,eax
c000d5f2:	74 5e                	je     c000d652 <File::File(char const*, Process*)+0xd4>
c000d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5fe:	0f b6 c0             	movzx  eax,al
c000d601:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d608:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d60e:	85 c0                	test   eax,eax
c000d610:	75 40                	jne    c000d652 <File::File(char const*, Process*)+0xd4>
c000d612:	83 ec 0c             	sub    esp,0xc
c000d615:	68 34 46 02 c0       	push   0xc0024634
c000d61a:	e8 f4 f9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d626:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d62c:	0f b6 c0             	movzx  eax,al
c000d62f:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d636:	83 ec 0c             	sub    esp,0xc
c000d639:	50                   	push   eax
c000d63a:	e8 d1 2e 00 00       	call   c0010510 <LogicalDisk::mount()>
c000d63f:	83 c4 10             	add    esp,0x10
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	68 db 68 02 c0       	push   0xc00268db
c000d64a:	e8 c4 f9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000d64f:	83 c4 10             	add    esp,0x10
c000d652:	90                   	nop
c000d653:	83 c4 0c             	add    esp,0xc
c000d656:	c3                   	ret    
c000d657:	90                   	nop

c000d658 <File::open(FileOpenMode)>:
c000d658:	53                   	push   ebx
c000d659:	b8 0b 00 00 00       	mov    eax,0xb
c000d65e:	83 ec 08             	sub    esp,0x8
c000d661:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d665:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d66c:	80 fa 19             	cmp    dl,0x19
c000d66f:	77 40                	ja     c000d6b1 <File::open(FileOpenMode)+0x59>
c000d671:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d678:	85 d2                	test   edx,edx
c000d67a:	74 35                	je     c000d6b1 <File::open(FileOpenMode)+0x59>
c000d67c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d682:	85 d2                	test   edx,edx
c000d684:	74 2b                	je     c000d6b1 <File::open(FileOpenMode)+0x59>
c000d686:	b8 06 00 00 00       	mov    eax,0x6
c000d68b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d68f:	75 20                	jne    c000d6b1 <File::open(FileOpenMode)+0x59>
c000d691:	8b 02                	mov    eax,DWORD PTR [edx]
c000d693:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69d:	51                   	push   ecx
c000d69e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6a1:	51                   	push   ecx
c000d6a2:	52                   	push   edx
c000d6a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	85 c0                	test   eax,eax
c000d6ab:	75 04                	jne    c000d6b1 <File::open(FileOpenMode)+0x59>
c000d6ad:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6b1:	83 c4 08             	add    esp,0x8
c000d6b4:	5b                   	pop    ebx
c000d6b5:	c3                   	ret    

c000d6b6 <File::close()>:
c000d6b6:	53                   	push   ebx
c000d6b7:	b8 0b 00 00 00       	mov    eax,0xb
c000d6bc:	83 ec 08             	sub    esp,0x8
c000d6bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6ca:	80 fa 19             	cmp    dl,0x19
c000d6cd:	77 41                	ja     c000d710 <File::close()+0x5a>
c000d6cf:	8b 1c 95 60 82 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7da0]
c000d6d6:	85 db                	test   ebx,ebx
c000d6d8:	74 36                	je     c000d710 <File::close()+0x5a>
c000d6da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d6e1:	74 2d                	je     c000d710 <File::close()+0x5a>
c000d6e3:	b8 05 00 00 00       	mov    eax,0x5
c000d6e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d6ec:	74 22                	je     c000d710 <File::close()+0x5a>
c000d6ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6f2:	8b 04 95 60 82 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7da0]
c000d6f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6ff:	53                   	push   ebx
c000d700:	53                   	push   ebx
c000d701:	8b 10                	mov    edx,DWORD PTR [eax]
c000d703:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d709:	50                   	push   eax
c000d70a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	83 c4 08             	add    esp,0x8
c000d713:	5b                   	pop    ebx
c000d714:	c3                   	ret    
c000d715:	90                   	nop

c000d716 <File::seek(unsigned long long)>:
c000d716:	56                   	push   esi
c000d717:	53                   	push   ebx
c000d718:	b8 0b 00 00 00       	mov    eax,0xb
c000d71d:	51                   	push   ecx
c000d71e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d722:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d726:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d72d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d731:	80 fa 19             	cmp    dl,0x19
c000d734:	77 31                	ja     c000d767 <File::seek(unsigned long long)+0x51>
c000d736:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d73d:	85 d2                	test   edx,edx
c000d73f:	74 26                	je     c000d767 <File::seek(unsigned long long)+0x51>
c000d741:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d747:	85 d2                	test   edx,edx
c000d749:	74 1c                	je     c000d767 <File::seek(unsigned long long)+0x51>
c000d74b:	b8 05 00 00 00       	mov    eax,0x5
c000d750:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d754:	74 11                	je     c000d767 <File::seek(unsigned long long)+0x51>
c000d756:	8b 02                	mov    eax,DWORD PTR [edx]
c000d758:	53                   	push   ebx
c000d759:	51                   	push   ecx
c000d75a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d760:	52                   	push   edx
c000d761:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	5a                   	pop    edx
c000d768:	5b                   	pop    ebx
c000d769:	5e                   	pop    esi
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <File::tell(unsigned long long*)>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	b8 0b 00 00 00       	mov    eax,0xb
c000d774:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d778:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d77f:	80 fa 19             	cmp    dl,0x19
c000d782:	77 34                	ja     c000d7b8 <File::tell(unsigned long long*)+0x4c>
c000d784:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d78b:	85 d2                	test   edx,edx
c000d78d:	74 29                	je     c000d7b8 <File::tell(unsigned long long*)+0x4c>
c000d78f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d795:	85 d2                	test   edx,edx
c000d797:	74 1f                	je     c000d7b8 <File::tell(unsigned long long*)+0x4c>
c000d799:	b8 05 00 00 00       	mov    eax,0x5
c000d79e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7a2:	74 14                	je     c000d7b8 <File::tell(unsigned long long*)+0x4c>
c000d7a4:	50                   	push   eax
c000d7a5:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7ab:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7b1:	52                   	push   edx
c000d7b2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	83 c4 0c             	add    esp,0xc
c000d7bb:	c3                   	ret    

c000d7bc <File::rewind()>:
c000d7bc:	83 ec 10             	sub    esp,0x10
c000d7bf:	6a 00                	push   0x0
c000d7c1:	6a 00                	push   0x0
c000d7c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c7:	e8 4a ff ff ff       	call   c000d716 <File::seek(unsigned long long)>
c000d7cc:	83 c4 1c             	add    esp,0x1c
c000d7cf:	c3                   	ret    

c000d7d0 <File::unlink()>:
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e3:	80 f9 19             	cmp    cl,0x19
c000d7e6:	77 2f                	ja     c000d817 <File::unlink()+0x47>
c000d7e8:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d7ef:	85 c9                	test   ecx,ecx
c000d7f1:	74 24                	je     c000d817 <File::unlink()+0x47>
c000d7f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7f9:	85 c9                	test   ecx,ecx
c000d7fb:	74 1a                	je     c000d817 <File::unlink()+0x47>
c000d7fd:	b8 06 00 00 00       	mov    eax,0x6
c000d802:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d806:	75 0f                	jne    c000d817 <File::unlink()+0x47>
c000d808:	83 c2 0d             	add    edx,0xd
c000d80b:	50                   	push   eax
c000d80c:	50                   	push   eax
c000d80d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d80f:	52                   	push   edx
c000d810:	51                   	push   ecx
c000d811:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	83 c4 0c             	add    esp,0xc
c000d81a:	c3                   	ret    
c000d81b:	90                   	nop

c000d81c <File::rename(char const*)>:
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	b8 0b 00 00 00       	mov    eax,0xb
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d82f:	80 f9 19             	cmp    cl,0x19
c000d832:	77 32                	ja     c000d866 <File::rename(char const*)+0x4a>
c000d834:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d83b:	85 c9                	test   ecx,ecx
c000d83d:	74 27                	je     c000d866 <File::rename(char const*)+0x4a>
c000d83f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d845:	85 c9                	test   ecx,ecx
c000d847:	74 1d                	je     c000d866 <File::rename(char const*)+0x4a>
c000d849:	b8 06 00 00 00       	mov    eax,0x6
c000d84e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d852:	75 12                	jne    c000d866 <File::rename(char const*)+0x4a>
c000d854:	83 c2 0d             	add    edx,0xd
c000d857:	50                   	push   eax
c000d858:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d85a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d85e:	52                   	push   edx
c000d85f:	51                   	push   ecx
c000d860:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	83 c4 0c             	add    esp,0xc
c000d869:	c3                   	ret    

c000d86a <File::chfatattr(unsigned char, unsigned char)>:
c000d86a:	57                   	push   edi
c000d86b:	b8 0b 00 00 00       	mov    eax,0xb
c000d870:	56                   	push   esi
c000d871:	53                   	push   ebx
c000d872:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d876:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d87a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d881:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d885:	80 f9 19             	cmp    cl,0x19
c000d888:	77 37                	ja     c000d8c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d88a:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d891:	85 c9                	test   ecx,ecx
c000d893:	74 2c                	je     c000d8c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d895:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89b:	85 c9                	test   ecx,ecx
c000d89d:	74 22                	je     c000d8c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d89f:	b8 06 00 00 00       	mov    eax,0x6
c000d8a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8a8:	75 17                	jne    c000d8c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8aa:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8ac:	89 f0                	mov    eax,esi
c000d8ae:	83 c2 0d             	add    edx,0xd
c000d8b1:	0f b6 f0             	movzx  esi,al
c000d8b4:	0f b6 db             	movzx  ebx,bl
c000d8b7:	56                   	push   esi
c000d8b8:	53                   	push   ebx
c000d8b9:	52                   	push   edx
c000d8ba:	51                   	push   ecx
c000d8bb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8be:	83 c4 10             	add    esp,0x10
c000d8c1:	5b                   	pop    ebx
c000d8c2:	5e                   	pop    esi
c000d8c3:	5f                   	pop    edi
c000d8c4:	c3                   	ret    
c000d8c5:	90                   	nop

c000d8c6 <File::exists()>:
c000d8c6:	83 ec 0c             	sub    esp,0xc
c000d8c9:	31 c0                	xor    eax,eax
c000d8cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8cf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8d6:	80 f9 19             	cmp    cl,0x19
c000d8d9:	77 24                	ja     c000d8ff <File::exists()+0x39>
c000d8db:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d8e2:	85 c9                	test   ecx,ecx
c000d8e4:	74 19                	je     c000d8ff <File::exists()+0x39>
c000d8e6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8ec:	85 c9                	test   ecx,ecx
c000d8ee:	74 0f                	je     c000d8ff <File::exists()+0x39>
c000d8f0:	83 c2 0d             	add    edx,0xd
c000d8f3:	50                   	push   eax
c000d8f4:	50                   	push   eax
c000d8f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f7:	52                   	push   edx
c000d8f8:	51                   	push   ecx
c000d8f9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	83 c4 0c             	add    esp,0xc
c000d902:	c3                   	ret    
c000d903:	90                   	nop

c000d904 <File::stat(unsigned long long*, bool*)>:
c000d904:	56                   	push   esi
c000d905:	53                   	push   ebx
c000d906:	50                   	push   eax
c000d907:	b8 0b 00 00 00       	mov    eax,0xb
c000d90c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d910:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d914:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d91b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d91f:	80 f9 19             	cmp    cl,0x19
c000d922:	77 3d                	ja     c000d961 <File::stat(unsigned long long*, bool*)+0x5d>
c000d924:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d92b:	85 c9                	test   ecx,ecx
c000d92d:	74 32                	je     c000d961 <File::stat(unsigned long long*, bool*)+0x5d>
c000d92f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d935:	85 c9                	test   ecx,ecx
c000d937:	74 28                	je     c000d961 <File::stat(unsigned long long*, bool*)+0x5d>
c000d939:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d93b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d93f:	74 13                	je     c000d954 <File::stat(unsigned long long*, bool*)+0x50>
c000d941:	83 ec 04             	sub    esp,0x4
c000d944:	56                   	push   esi
c000d945:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d94b:	51                   	push   ecx
c000d94c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d94f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d952:	eb 0a                	jmp    c000d95e <File::stat(unsigned long long*, bool*)+0x5a>
c000d954:	53                   	push   ebx
c000d955:	83 c2 0d             	add    edx,0xd
c000d958:	56                   	push   esi
c000d959:	52                   	push   edx
c000d95a:	51                   	push   ecx
c000d95b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d95e:	83 c4 10             	add    esp,0x10
c000d961:	5a                   	pop    edx
c000d962:	5b                   	pop    ebx
c000d963:	5e                   	pop    esi
c000d964:	c3                   	ret    

c000d965 <Fs::setcwd(Process*, char*)>:
c000d965:	55                   	push   ebp
c000d966:	57                   	push   edi
c000d967:	56                   	push   esi
c000d968:	53                   	push   ebx
c000d969:	81 ec 20 02 00 00    	sub    esp,0x220
c000d96f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d976:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d97c:	57                   	push   edi
c000d97d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d984:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d988:	56                   	push   esi
c000d989:	e8 46 fa ff ff       	call   c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d98e:	89 34 24             	mov    DWORD PTR [esp],esi
c000d991:	e8 02 2d ff ff       	call   c0000698 <strlen>
c000d996:	83 c4 10             	add    esp,0x10
c000d999:	83 f8 02             	cmp    eax,0x2
c000d99c:	77 15                	ja     c000d9b3 <Fs::setcwd(Process*, char*)+0x4e>
c000d99e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9a3:	83 eb 41             	sub    ebx,0x41
c000d9a6:	8b 04 9d 60 82 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7da0]
c000d9ad:	85 c0                	test   eax,eax
c000d9af:	75 1c                	jne    c000d9cd <Fs::setcwd(Process*, char*)+0x68>
c000d9b1:	eb 4c                	jmp    c000d9ff <Fs::setcwd(Process*, char*)+0x9a>
c000d9b3:	83 ec 0c             	sub    esp,0xc
c000d9b6:	56                   	push   esi
c000d9b7:	e8 dc 2c ff ff       	call   c0000698 <strlen>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	83 f8 03             	cmp    eax,0x3
c000d9c2:	75 74                	jne    c000da38 <Fs::setcwd(Process*, char*)+0xd3>
c000d9c4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9c9:	75 6d                	jne    c000da38 <Fs::setcwd(Process*, char*)+0xd3>
c000d9cb:	eb d1                	jmp    c000d99e <Fs::setcwd(Process*, char*)+0x39>
c000d9cd:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d9d4:	75 29                	jne    c000d9ff <Fs::setcwd(Process*, char*)+0x9a>
c000d9d6:	83 ec 0c             	sub    esp,0xc
c000d9d9:	68 0c 46 02 c0       	push   0xc002460c
c000d9de:	e8 30 f6 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000d9e3:	5a                   	pop    edx
c000d9e4:	ff 34 9d 60 82 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7da0]
c000d9eb:	e8 20 2b 00 00       	call   c0010510 <LogicalDisk::mount()>
c000d9f0:	c7 04 24 db 68 02 c0 	mov    DWORD PTR [esp],0xc00268db
c000d9f7:	e8 17 f6 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	b8 03 00 00 00       	mov    eax,0x3
c000da04:	83 fb 19             	cmp    ebx,0x19
c000da07:	0f 87 c6 00 00 00    	ja     c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000da0d:	8b 14 9d 60 82 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7da0]
c000da14:	b8 05 00 00 00       	mov    eax,0x5
c000da19:	85 d2                	test   edx,edx
c000da1b:	0f 84 b2 00 00 00    	je     c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000da21:	b8 06 00 00 00       	mov    eax,0x6
c000da26:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da2d:	0f 85 92 00 00 00    	jne    c000dac5 <Fs::setcwd(Process*, char*)+0x160>
c000da33:	e9 9b 00 00 00       	jmp    c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000da38:	83 ec 0c             	sub    esp,0xc
c000da3b:	68 14 01 00 00       	push   0x114
c000da40:	e8 c2 c2 ff ff       	call   c0009d07 <malloc>
c000da45:	83 c4 0c             	add    esp,0xc
c000da48:	89 c3                	mov    ebx,eax
c000da4a:	55                   	push   ebp
c000da4b:	56                   	push   esi
c000da4c:	50                   	push   eax
c000da4d:	e8 2c fb ff ff       	call   c000d57e <File::File(char const*, Process*)>
c000da52:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da57:	83 c4 0c             	add    esp,0xc
c000da5a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da5e:	50                   	push   eax
c000da5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da63:	50                   	push   eax
c000da64:	53                   	push   ebx
c000da65:	e8 9a fe ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c000da6a:	83 c4 10             	add    esp,0x10
c000da6d:	83 f8 02             	cmp    eax,0x2
c000da70:	74 04                	je     c000da76 <Fs::setcwd(Process*, char*)+0x111>
c000da72:	85 c0                	test   eax,eax
c000da74:	74 1c                	je     c000da92 <Fs::setcwd(Process*, char*)+0x12d>
c000da76:	b8 01 00 00 00       	mov    eax,0x1
c000da7b:	85 db                	test   ebx,ebx
c000da7d:	74 54                	je     c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da84:	53                   	push   ebx
c000da85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	b8 01 00 00 00       	mov    eax,0x1
c000da90:	eb 41                	jmp    c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000da92:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da97:	75 1c                	jne    c000dab5 <Fs::setcwd(Process*, char*)+0x150>
c000da99:	b8 02 00 00 00       	mov    eax,0x2
c000da9e:	85 db                	test   ebx,ebx
c000daa0:	74 31                	je     c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000daa2:	83 ec 0c             	sub    esp,0xc
c000daa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daa7:	53                   	push   ebx
c000daa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daab:	83 c4 10             	add    esp,0x10
c000daae:	b8 02 00 00 00       	mov    eax,0x2
c000dab3:	eb 1e                	jmp    c000dad3 <Fs::setcwd(Process*, char*)+0x16e>
c000dab5:	85 db                	test   ebx,ebx
c000dab7:	74 0c                	je     c000dac5 <Fs::setcwd(Process*, char*)+0x160>
c000dab9:	83 ec 0c             	sub    esp,0xc
c000dabc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dabe:	53                   	push   ebx
c000dabf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dac2:	83 c4 10             	add    esp,0x10
c000dac5:	50                   	push   eax
c000dac6:	50                   	push   eax
c000dac7:	56                   	push   esi
c000dac8:	57                   	push   edi
c000dac9:	e8 6a 2c ff ff       	call   c0000738 <strcpy>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	31 c0                	xor    eax,eax
c000dad3:	81 c4 1c 02 00 00    	add    esp,0x21c
c000dad9:	5b                   	pop    ebx
c000dada:	5e                   	pop    esi
c000dadb:	5f                   	pop    edi
c000dadc:	5d                   	pop    ebp
c000dadd:	c3                   	ret    

c000dade <Directory::Directory(char const*, Process*)>:
c000dade:	83 ec 0c             	sub    esp,0xc
c000dae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae5:	83 ec 08             	sub    esp,0x8
c000dae8:	6a 00                	push   0x0
c000daea:	50                   	push   eax
c000daeb:	e8 86 dd ff ff       	call   c000b876 <UnixFile::UnixFile(int)>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	ba 14 47 02 c0       	mov    edx,0xc0024714
c000daf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafc:	89 10                	mov    DWORD PTR [eax],edx
c000dafe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0c:	83 c0 0d             	add    eax,0xd
c000db0f:	83 ec 04             	sub    esp,0x4
c000db12:	52                   	push   edx
c000db13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db17:	50                   	push   eax
c000db18:	e8 b7 f8 ff ff       	call   c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db24:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db27:	8d 50 bf             	lea    edx,[eax-0x41]
c000db2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db46:	0f b6 c0             	movzx  eax,al
c000db49:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000db50:	85 c0                	test   eax,eax
c000db52:	74 5e                	je     c000dbb2 <Directory::Directory(char const*, Process*)+0xd4>
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db5e:	0f b6 c0             	movzx  eax,al
c000db61:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000db68:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db6e:	85 c0                	test   eax,eax
c000db70:	75 40                	jne    c000dbb2 <Directory::Directory(char const*, Process*)+0xd4>
c000db72:	83 ec 0c             	sub    esp,0xc
c000db75:	68 5c 46 02 c0       	push   0xc002465c
c000db7a:	e8 94 f4 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000db7f:	83 c4 10             	add    esp,0x10
c000db82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db86:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db8c:	0f b6 c0             	movzx  eax,al
c000db8f:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	50                   	push   eax
c000db9a:	e8 71 29 00 00       	call   c0010510 <LogicalDisk::mount()>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	83 ec 0c             	sub    esp,0xc
c000dba5:	68 db 68 02 c0       	push   0xc00268db
c000dbaa:	e8 64 f4 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	90                   	nop
c000dbb3:	83 c4 0c             	add    esp,0xc
c000dbb6:	c3                   	ret    
c000dbb7:	90                   	nop

c000dbb8 <Directory::open()>:
c000dbb8:	53                   	push   ebx
c000dbb9:	b8 0b 00 00 00       	mov    eax,0xb
c000dbbe:	83 ec 08             	sub    esp,0x8
c000dbc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbc5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dbcc:	80 fa 19             	cmp    dl,0x19
c000dbcf:	77 3d                	ja     c000dc0e <Directory::open()+0x56>
c000dbd1:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000dbd8:	85 d2                	test   edx,edx
c000dbda:	74 32                	je     c000dc0e <Directory::open()+0x56>
c000dbdc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dbe2:	85 d2                	test   edx,edx
c000dbe4:	74 28                	je     c000dc0e <Directory::open()+0x56>
c000dbe6:	b8 06 00 00 00       	mov    eax,0x6
c000dbeb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dbef:	75 1d                	jne    c000dc0e <Directory::open()+0x56>
c000dbf1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dbf7:	50                   	push   eax
c000dbf8:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbfa:	51                   	push   ecx
c000dbfb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbfe:	51                   	push   ecx
c000dbff:	52                   	push   edx
c000dc00:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc03:	83 c4 10             	add    esp,0x10
c000dc06:	85 c0                	test   eax,eax
c000dc08:	75 04                	jne    c000dc0e <Directory::open()+0x56>
c000dc0a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc0e:	83 c4 08             	add    esp,0x8
c000dc11:	5b                   	pop    ebx
c000dc12:	c3                   	ret    
c000dc13:	90                   	nop

c000dc14 <Directory::close()>:
c000dc14:	53                   	push   ebx
c000dc15:	b8 0b 00 00 00       	mov    eax,0xb
c000dc1a:	83 ec 08             	sub    esp,0x8
c000dc1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc21:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc28:	80 fa 19             	cmp    dl,0x19
c000dc2b:	77 41                	ja     c000dc6e <Directory::close()+0x5a>
c000dc2d:	8b 1c 95 60 82 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7da0]
c000dc34:	85 db                	test   ebx,ebx
c000dc36:	74 36                	je     c000dc6e <Directory::close()+0x5a>
c000dc38:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc3f:	74 2d                	je     c000dc6e <Directory::close()+0x5a>
c000dc41:	b8 05 00 00 00       	mov    eax,0x5
c000dc46:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc4a:	74 22                	je     c000dc6e <Directory::close()+0x5a>
c000dc4c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc50:	8b 04 95 60 82 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7da0]
c000dc57:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc5d:	53                   	push   ebx
c000dc5e:	53                   	push   ebx
c000dc5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc67:	50                   	push   eax
c000dc68:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc6b:	83 c4 10             	add    esp,0x10
c000dc6e:	83 c4 08             	add    esp,0x8
c000dc71:	5b                   	pop    ebx
c000dc72:	c3                   	ret    
c000dc73:	90                   	nop

c000dc74 <Directory::unlink()>:
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc87:	80 f9 19             	cmp    cl,0x19
c000dc8a:	77 2f                	ja     c000dcbb <Directory::unlink()+0x47>
c000dc8c:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000dc93:	85 c9                	test   ecx,ecx
c000dc95:	74 24                	je     c000dcbb <Directory::unlink()+0x47>
c000dc97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc9d:	85 c9                	test   ecx,ecx
c000dc9f:	74 1a                	je     c000dcbb <Directory::unlink()+0x47>
c000dca1:	b8 06 00 00 00       	mov    eax,0x6
c000dca6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcaa:	75 0f                	jne    c000dcbb <Directory::unlink()+0x47>
c000dcac:	83 c2 0d             	add    edx,0xd
c000dcaf:	50                   	push   eax
c000dcb0:	50                   	push   eax
c000dcb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb3:	52                   	push   edx
c000dcb4:	51                   	push   ecx
c000dcb5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	83 c4 0c             	add    esp,0xc
c000dcbe:	c3                   	ret    
c000dcbf:	90                   	nop

c000dcc0 <Directory::rename(char const*)>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dccc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd3:	80 f9 19             	cmp    cl,0x19
c000dcd6:	77 32                	ja     c000dd0a <Directory::rename(char const*)+0x4a>
c000dcd8:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000dcdf:	85 c9                	test   ecx,ecx
c000dce1:	74 27                	je     c000dd0a <Directory::rename(char const*)+0x4a>
c000dce3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce9:	85 c9                	test   ecx,ecx
c000dceb:	74 1d                	je     c000dd0a <Directory::rename(char const*)+0x4a>
c000dced:	b8 06 00 00 00       	mov    eax,0x6
c000dcf2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcf6:	75 12                	jne    c000dd0a <Directory::rename(char const*)+0x4a>
c000dcf8:	83 c2 0d             	add    edx,0xd
c000dcfb:	50                   	push   eax
c000dcfc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd02:	52                   	push   edx
c000dd03:	51                   	push   ecx
c000dd04:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	83 c4 0c             	add    esp,0xc
c000dd0d:	c3                   	ret    

c000dd0e <Directory::exists()>:
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	31 c0                	xor    eax,eax
c000dd13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd17:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd1e:	80 f9 19             	cmp    cl,0x19
c000dd21:	77 24                	ja     c000dd47 <Directory::exists()+0x39>
c000dd23:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000dd2a:	85 c9                	test   ecx,ecx
c000dd2c:	74 19                	je     c000dd47 <Directory::exists()+0x39>
c000dd2e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd34:	85 c9                	test   ecx,ecx
c000dd36:	74 0f                	je     c000dd47 <Directory::exists()+0x39>
c000dd38:	83 c2 0d             	add    edx,0xd
c000dd3b:	50                   	push   eax
c000dd3c:	50                   	push   eax
c000dd3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd3f:	52                   	push   edx
c000dd40:	51                   	push   ecx
c000dd41:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd44:	83 c4 10             	add    esp,0x10
c000dd47:	83 c4 0c             	add    esp,0xc
c000dd4a:	c3                   	ret    
c000dd4b:	90                   	nop

c000dd4c <Directory::read(dirent*)>:
c000dd4c:	83 ec 1c             	sub    esp,0x1c
c000dd4f:	b8 0b 00 00 00       	mov    eax,0xb
c000dd54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd58:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd5f:	80 fa 19             	cmp    dl,0x19
c000dd62:	77 30                	ja     c000dd94 <Directory::read(dirent*)+0x48>
c000dd64:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000dd6b:	85 d2                	test   edx,edx
c000dd6d:	74 25                	je     c000dd94 <Directory::read(dirent*)+0x48>
c000dd6f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd76:	74 1c                	je     c000dd94 <Directory::read(dirent*)+0x48>
c000dd78:	83 ec 0c             	sub    esp,0xc
c000dd7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd7d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd81:	52                   	push   edx
c000dd82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd86:	6a 00                	push   0x0
c000dd88:	68 10 01 00 00       	push   0x110
c000dd8d:	51                   	push   ecx
c000dd8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd91:	83 c4 20             	add    esp,0x20
c000dd94:	83 c4 1c             	add    esp,0x1c
c000dd97:	c3                   	ret    

c000dd98 <Directory::create()>:
c000dd98:	83 ec 0c             	sub    esp,0xc
c000dd9b:	b8 0b 00 00 00       	mov    eax,0xb
c000dda0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dda4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddab:	80 f9 19             	cmp    cl,0x19
c000ddae:	77 2f                	ja     c000dddf <Directory::create()+0x47>
c000ddb0:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000ddb7:	85 c9                	test   ecx,ecx
c000ddb9:	74 24                	je     c000dddf <Directory::create()+0x47>
c000ddbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ddc1:	85 c9                	test   ecx,ecx
c000ddc3:	74 1a                	je     c000dddf <Directory::create()+0x47>
c000ddc5:	b8 06 00 00 00       	mov    eax,0x6
c000ddca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddce:	75 0f                	jne    c000dddf <Directory::create()+0x47>
c000ddd0:	83 c2 0d             	add    edx,0xd
c000ddd3:	50                   	push   eax
c000ddd4:	50                   	push   eax
c000ddd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddd7:	52                   	push   edx
c000ddd8:	51                   	push   ecx
c000ddd9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dddc:	83 c4 10             	add    esp,0x10
c000dddf:	83 c4 0c             	add    esp,0xc
c000dde2:	c3                   	ret    
c000dde3:	90                   	nop

c000dde4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dde4:	b8 0a 00 00 00       	mov    eax,0xa
c000dde9:	c3                   	ret    
c000ddea:	66 90                	xchg   ax,ax

c000ddec <Bus::Bus(char const*)>:
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddf3:	83 ec 08             	sub    esp,0x8
c000ddf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfa:	50                   	push   eax
c000ddfb:	e8 ca 08 00 00       	call   c000e6ca <Device::Device(char const*)>
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	ba 30 47 02 c0       	mov    edx,0xc0024730
c000de08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de0c:	89 10                	mov    DWORD PTR [eax],edx
c000de0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de12:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de1c:	90                   	nop
c000de1d:	83 c4 0c             	add    esp,0xc
c000de20:	c3                   	ret    
c000de21:	90                   	nop
c000de22:	66 90                	xchg   ax,ax

c000de24 <Bus::~Bus()>:
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	ba 30 47 02 c0       	mov    edx,0xc0024730
c000de2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de30:	89 10                	mov    DWORD PTR [eax],edx
c000de32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de36:	83 ec 0c             	sub    esp,0xc
c000de39:	50                   	push   eax
c000de3a:	e8 55 05 00 00       	call   c000e394 <Device::~Device()>
c000de3f:	83 c4 10             	add    esp,0x10
c000de42:	90                   	nop
c000de43:	83 c4 0c             	add    esp,0xc
c000de46:	c3                   	ret    
c000de47:	90                   	nop

c000de48 <Bus::~Bus()>:
c000de48:	83 ec 0c             	sub    esp,0xc
c000de4b:	83 ec 0c             	sub    esp,0xc
c000de4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de52:	e8 cd ff ff ff       	call   c000de24 <Bus::~Bus()>
c000de57:	83 c4 10             	add    esp,0x10
c000de5a:	83 ec 08             	sub    esp,0x8
c000de5d:	68 58 01 00 00       	push   0x158
c000de62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de66:	e8 c7 f0 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	83 c4 0c             	add    esp,0xc
c000de71:	c3                   	ret    

c000de72 <beepThread(void*)>:
c000de72:	83 ec 0c             	sub    esp,0xc
c000de75:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000de7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de7e:	48                   	dec    eax
c000de7f:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000de84:	75 01                	jne    c000de87 <beepThread(void*)+0x15>
c000de86:	fb                   	sti    
c000de87:	83 ec 0c             	sub    esp,0xc
c000de8a:	6b c2 0a             	imul   eax,edx,0xa
c000de8d:	50                   	push   eax
c000de8e:	e8 55 a8 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c000de93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de9a:	e8 22 ce 00 00       	call   c001acc1 <Hal::makeBeep(int)>
c000de9f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dea7:	83 c4 1c             	add    esp,0x1c
c000deaa:	e9 39 a7 00 00       	jmp    c00185e8 <blockTask(TaskState)>

c000deaf <Krnl::beep(int, int, bool)>:
c000deaf:	56                   	push   esi
c000deb0:	53                   	push   ebx
c000deb1:	83 ec 10             	sub    esp,0x10
c000deb4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000deb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000debc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec0:	e8 fc cd 00 00       	call   c001acc1 <Hal::makeBeep(int)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	89 f0                	mov    eax,esi
c000deca:	84 c0                	test   al,al
c000decc:	74 1e                	je     c000deec <Krnl::beep(int, int, bool)+0x3d>
c000dece:	83 ec 0c             	sub    esp,0xc
c000ded1:	6b db 0a             	imul   ebx,ebx,0xa
c000ded4:	53                   	push   ebx
c000ded5:	e8 0e a8 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c000deda:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000dee2:	83 c4 14             	add    esp,0x14
c000dee5:	5b                   	pop    ebx
c000dee6:	5e                   	pop    esi
c000dee7:	e9 d5 cd 00 00       	jmp    c001acc1 <Hal::makeBeep(int)>
c000deec:	68 e6 00 00 00       	push   0xe6
c000def1:	53                   	push   ebx
c000def2:	68 72 de 00 c0       	push   0xc000de72
c000def7:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c000defd:	e8 d2 a2 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000df02:	83 c4 14             	add    esp,0x14
c000df05:	5b                   	pop    ebx
c000df06:	5e                   	pop    esi
c000df07:	c3                   	ret    

c000df08 <User::loadClockSettings(int)>:
c000df08:	53                   	push   ebx
c000df09:	83 ec 14             	sub    esp,0x14
c000df0c:	68 14 01 00 00       	push   0x114
c000df11:	e8 f1 bd ff ff       	call   c0009d07 <malloc>
c000df16:	83 c4 0c             	add    esp,0xc
c000df19:	89 c3                	mov    ebx,eax
c000df1b:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c000df21:	68 54 47 02 c0       	push   0xc0024754
c000df26:	50                   	push   eax
c000df27:	e8 52 f6 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c000df2c:	58                   	pop    eax
c000df2d:	5a                   	pop    edx
c000df2e:	6a 01                	push   0x1
c000df30:	53                   	push   ebx
c000df31:	e8 22 f7 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c000df36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df39:	e8 78 f7 ff ff       	call   c000d6b6 <File::close()>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	85 db                	test   ebx,ebx
c000df43:	74 0f                	je     c000df54 <User::loadClockSettings(int)+0x4c>
c000df45:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000df4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df4e:	83 c4 08             	add    esp,0x8
c000df51:	5b                   	pop    ebx
c000df52:	ff e0                	jmp    eax
c000df54:	83 c4 08             	add    esp,0x8
c000df57:	5b                   	pop    ebx
c000df58:	c3                   	ret    
c000df59:	90                   	nop

c000df5a <Clock::Clock(char const*)>:
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df61:	83 ec 08             	sub    esp,0x8
c000df64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df68:	50                   	push   eax
c000df69:	e8 5c 07 00 00       	call   c000e6ca <Device::Device(char const*)>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	ba 7c 47 02 c0       	mov    edx,0xc002477c
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	89 10                	mov    DWORD PTR [eax],edx
c000df7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df80:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df8a:	90                   	nop
c000df8b:	83 c4 0c             	add    esp,0xc
c000df8e:	c3                   	ret    
c000df8f:	90                   	nop

c000df90 <Clock::~Clock()>:
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	ba 7c 47 02 c0       	mov    edx,0xc002477c
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	89 10                	mov    DWORD PTR [eax],edx
c000df9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	50                   	push   eax
c000dfa6:	e8 e9 03 00 00       	call   c000e394 <Device::~Device()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	90                   	nop
c000dfaf:	83 c4 0c             	add    esp,0xc
c000dfb2:	c3                   	ret    
c000dfb3:	90                   	nop

c000dfb4 <Clock::~Clock()>:
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	83 ec 0c             	sub    esp,0xc
c000dfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbe:	e8 cd ff ff ff       	call   c000df90 <Clock::~Clock()>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	83 ec 08             	sub    esp,0x8
c000dfc9:	68 58 01 00 00       	push   0x158
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	e8 5b ef ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	83 c4 0c             	add    esp,0xc
c000dfdd:	c3                   	ret    

c000dfde <Clock::timeInSecondsLocal()>:
c000dfde:	53                   	push   ebx
c000dfdf:	83 ec 14             	sub    esp,0x14
c000dfe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfe6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfe8:	50                   	push   eax
c000dfe9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dfec:	0f b6 0d dc 7d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027ddc
c000dff3:	03 0d e0 7d 02 c0    	add    ecx,DWORD PTR ds:0xc0027de0
c000dff9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfff:	89 cb                	mov    ebx,ecx
c000e001:	c1 fb 1f             	sar    ebx,0x1f
c000e004:	01 c8                	add    eax,ecx
c000e006:	11 da                	adc    edx,ebx
c000e008:	83 c4 10             	add    esp,0x10
c000e00b:	31 c9                	xor    ecx,ecx
c000e00d:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000e014:	74 05                	je     c000e01b <Clock::timeInSecondsLocal()+0x3d>
c000e016:	b9 08 07 00 00       	mov    ecx,0x708
c000e01b:	31 db                	xor    ebx,ebx
c000e01d:	01 c8                	add    eax,ecx
c000e01f:	11 da                	adc    edx,ebx
c000e021:	83 c4 08             	add    esp,0x8
c000e024:	5b                   	pop    ebx
c000e025:	c3                   	ret    

c000e026 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e026:	57                   	push   edi
c000e027:	56                   	push   esi
c000e028:	53                   	push   ebx
c000e029:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e02d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e031:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e033:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e037:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e03a:	0f b6 05 dc 7d 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ddc
c000e041:	03 05 e0 7d 02 c0    	add    eax,DWORD PTR ds:0xc0027de0
c000e047:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e04d:	99                   	cdq    
c000e04e:	29 c6                	sub    esi,eax
c000e050:	19 d7                	sbb    edi,edx
c000e052:	89 f0                	mov    eax,esi
c000e054:	89 fa                	mov    edx,edi
c000e056:	31 f6                	xor    esi,esi
c000e058:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000e05f:	74 05                	je     c000e066 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e061:	be 08 07 00 00       	mov    esi,0x708
c000e066:	31 ff                	xor    edi,edi
c000e068:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e06c:	29 f0                	sub    eax,esi
c000e06e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e072:	19 fa                	sbb    edx,edi
c000e074:	89 d8                	mov    eax,ebx
c000e076:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e07a:	5b                   	pop    ebx
c000e07b:	5e                   	pop    esi
c000e07c:	5f                   	pop    edi
c000e07d:	ff e0                	jmp    eax

c000e07f <datetimeToSeconds(datetime_t)>:
c000e07f:	55                   	push   ebp
c000e080:	57                   	push   edi
c000e081:	56                   	push   esi
c000e082:	53                   	push   ebx
c000e083:	83 ec 14             	sub    esp,0x14
c000e086:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e08a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e08e:	89 d3                	mov    ebx,edx
c000e090:	0f b6 c6             	movzx  eax,dh
c000e093:	c1 eb 10             	shr    ebx,0x10
c000e096:	48                   	dec    eax
c000e097:	66 81 eb 6c 07       	sub    bx,0x76c
c000e09c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e0a0:	0f b6 f5             	movzx  esi,ch
c000e0a3:	89 cf                	mov    edi,ecx
c000e0a5:	6b f6 3c             	imul   esi,esi,0x3c
c000e0a8:	c1 ef 10             	shr    edi,0x10
c000e0ab:	0f b6 c9             	movzx  ecx,cl
c000e0ae:	89 f8                	mov    eax,edi
c000e0b0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0b6:	0f b6 f8             	movzx  edi,al
c000e0b9:	0f b6 d2             	movzx  edx,dl
c000e0bc:	01 fe                	add    esi,edi
c000e0be:	01 f1                	add    ecx,esi
c000e0c0:	0f b7 f3             	movzx  esi,bx
c000e0c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e0c7:	c1 f9 1f             	sar    ecx,0x1f
c000e0ca:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e0cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e0d3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e0d8:	8b 0c 8d c0 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb840]
c000e0df:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e0e3:	76 29                	jbe    c000e10e <datetimeToSeconds(datetime_t)+0x8f>
c000e0e5:	f6 c3 03             	test   bl,0x3
c000e0e8:	75 24                	jne    c000e10e <datetimeToSeconds(datetime_t)+0x8f>
c000e0ea:	31 d2                	xor    edx,edx
c000e0ec:	bf 64 00 00 00       	mov    edi,0x64
c000e0f1:	89 d8                	mov    eax,ebx
c000e0f3:	66 f7 f7             	div    di
c000e0f6:	66 85 d2             	test   dx,dx
c000e0f9:	75 12                	jne    c000e10d <datetimeToSeconds(datetime_t)+0x8e>
c000e0fb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e101:	bf 90 01 00 00       	mov    edi,0x190
c000e106:	99                   	cdq    
c000e107:	f7 ff                	idiv   edi
c000e109:	85 d2                	test   edx,edx
c000e10b:	75 01                	jne    c000e10e <datetimeToSeconds(datetime_t)+0x8f>
c000e10d:	41                   	inc    ecx
c000e10e:	66 83 fb 46          	cmp    bx,0x46
c000e112:	76 45                	jbe    c000e159 <datetimeToSeconds(datetime_t)+0xda>
c000e114:	bb 46 00 00 00       	mov    ebx,0x46
c000e119:	bf 64 00 00 00       	mov    edi,0x64
c000e11e:	bd 90 01 00 00       	mov    ebp,0x190
c000e123:	b8 6d 01 00 00       	mov    eax,0x16d
c000e128:	f6 c3 03             	test   bl,0x3
c000e12b:	75 23                	jne    c000e150 <datetimeToSeconds(datetime_t)+0xd1>
c000e12d:	89 d8                	mov    eax,ebx
c000e12f:	99                   	cdq    
c000e130:	f7 ff                	idiv   edi
c000e132:	b8 6e 01 00 00       	mov    eax,0x16e
c000e137:	85 d2                	test   edx,edx
c000e139:	75 15                	jne    c000e150 <datetimeToSeconds(datetime_t)+0xd1>
c000e13b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e141:	99                   	cdq    
c000e142:	f7 fd                	idiv   ebp
c000e144:	83 fa 01             	cmp    edx,0x1
c000e147:	19 c0                	sbb    eax,eax
c000e149:	f7 d0                	not    eax
c000e14b:	05 6e 01 00 00       	add    eax,0x16e
c000e150:	01 c1                	add    ecx,eax
c000e152:	43                   	inc    ebx
c000e153:	39 f3                	cmp    ebx,esi
c000e155:	7c cc                	jl     c000e123 <datetimeToSeconds(datetime_t)+0xa4>
c000e157:	eb 35                	jmp    c000e18e <datetimeToSeconds(datetime_t)+0x10f>
c000e159:	74 33                	je     c000e18e <datetimeToSeconds(datetime_t)+0x10f>
c000e15b:	b8 45 00 00 00       	mov    eax,0x45
c000e160:	89 c2                	mov    edx,eax
c000e162:	83 e2 03             	and    edx,0x3
c000e165:	39 f0                	cmp    eax,esi
c000e167:	7e 0f                	jle    c000e178 <datetimeToSeconds(datetime_t)+0xf9>
c000e169:	83 fa 01             	cmp    edx,0x1
c000e16c:	19 d2                	sbb    edx,edx
c000e16e:	48                   	dec    eax
c000e16f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e176:	eb e8                	jmp    c000e160 <datetimeToSeconds(datetime_t)+0xe1>
c000e178:	b8 6d 01 00 00       	mov    eax,0x16d
c000e17d:	85 d2                	test   edx,edx
c000e17f:	75 0b                	jne    c000e18c <datetimeToSeconds(datetime_t)+0x10d>
c000e181:	66 83 fb 01          	cmp    bx,0x1
c000e185:	19 c0                	sbb    eax,eax
c000e187:	05 6e 01 00 00       	add    eax,0x16e
c000e18c:	29 c1                	sub    ecx,eax
c000e18e:	b8 80 51 01 00       	mov    eax,0x15180
c000e193:	f7 e9                	imul   ecx
c000e195:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e199:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e19d:	83 c4 14             	add    esp,0x14
c000e1a0:	5b                   	pop    ebx
c000e1a1:	5e                   	pop    esi
c000e1a2:	5f                   	pop    edi
c000e1a3:	5d                   	pop    ebp
c000e1a4:	c3                   	ret    
c000e1a5:	90                   	nop

c000e1a6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e1a6:	57                   	push   edi
c000e1a7:	56                   	push   esi
c000e1a8:	53                   	push   ebx
c000e1a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1af:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e1b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1ba:	e8 c0 fe ff ff       	call   c000e07f <datetimeToSeconds(datetime_t)>
c000e1bf:	59                   	pop    ecx
c000e1c0:	0f b6 0d dc 7d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027ddc
c000e1c7:	5b                   	pop    ebx
c000e1c8:	03 0d e0 7d 02 c0    	add    ecx,DWORD PTR ds:0xc0027de0
c000e1ce:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1d4:	89 cb                	mov    ebx,ecx
c000e1d6:	c1 fb 1f             	sar    ebx,0x1f
c000e1d9:	29 c8                	sub    eax,ecx
c000e1db:	19 da                	sbb    edx,ebx
c000e1dd:	31 c9                	xor    ecx,ecx
c000e1df:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000e1e6:	74 05                	je     c000e1ed <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e1e8:	b9 08 07 00 00       	mov    ecx,0x708
c000e1ed:	31 db                	xor    ebx,ebx
c000e1ef:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1f3:	29 c8                	sub    eax,ecx
c000e1f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1f9:	19 da                	sbb    edx,ebx
c000e1fb:	89 f8                	mov    eax,edi
c000e1fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e201:	5b                   	pop    ebx
c000e202:	5e                   	pop    esi
c000e203:	5f                   	pop    edi
c000e204:	ff e0                	jmp    eax

c000e206 <secondsToDatetime(unsigned long long)>:
c000e206:	55                   	push   ebp
c000e207:	57                   	push   edi
c000e208:	56                   	push   esi
c000e209:	53                   	push   ebx
c000e20a:	83 ec 1c             	sub    esp,0x1c
c000e20d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e211:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e215:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e219:	6a 00                	push   0x0
c000e21b:	68 80 51 01 00       	push   0x15180
c000e220:	55                   	push   ebp
c000e221:	57                   	push   edi
c000e222:	e8 99 42 01 00       	call   c00224c0 <__udivdi3>
c000e227:	83 c4 10             	add    esp,0x10
c000e22a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e230:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e234:	6a 00                	push   0x0
c000e236:	68 80 51 01 00       	push   0x15180
c000e23b:	55                   	push   ebp
c000e23c:	57                   	push   edi
c000e23d:	bf 10 0e 00 00       	mov    edi,0xe10
c000e242:	e8 79 43 01 00       	call   c00225c0 <__umoddi3>
c000e247:	83 c4 10             	add    esp,0x10
c000e24a:	99                   	cdq    
c000e24b:	f7 ff                	idiv   edi
c000e24d:	bf 3c 00 00 00       	mov    edi,0x3c
c000e252:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e255:	89 d0                	mov    eax,edx
c000e257:	99                   	cdq    
c000e258:	f7 ff                	idiv   edi
c000e25a:	85 db                	test   ebx,ebx
c000e25c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e25f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e262:	79 11                	jns    c000e275 <secondsToDatetime(unsigned long long)+0x6f>
c000e264:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e268:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e26e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e273:	eb 07                	jmp    c000e27c <secondsToDatetime(unsigned long long)+0x76>
c000e275:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e27a:	89 d8                	mov    eax,ebx
c000e27c:	bf b4 05 00 00       	mov    edi,0x5b4
c000e281:	99                   	cdq    
c000e282:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e287:	f7 f9                	idiv   ecx
c000e289:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e28e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e292:	31 d2                	xor    edx,edx
c000e294:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e29c:	01 c3                	add    ebx,eax
c000e29e:	89 d8                	mov    eax,ebx
c000e2a0:	f7 f1                	div    ecx
c000e2a2:	31 d2                	xor    edx,edx
c000e2a4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e2a7:	89 d8                	mov    eax,ebx
c000e2a9:	f7 f7                	div    edi
c000e2ab:	31 d2                	xor    edx,edx
c000e2ad:	29 c1                	sub    ecx,eax
c000e2af:	89 d8                	mov    eax,ebx
c000e2b1:	f7 f5                	div    ebp
c000e2b3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e2b8:	29 c1                	sub    ecx,eax
c000e2ba:	31 d2                	xor    edx,edx
c000e2bc:	89 c8                	mov    eax,ecx
c000e2be:	f7 f5                	div    ebp
c000e2c0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e2c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2c9:	31 d2                	xor    edx,edx
c000e2cb:	89 c8                	mov    eax,ecx
c000e2cd:	f7 f5                	div    ebp
c000e2cf:	31 d2                	xor    edx,edx
c000e2d1:	01 c3                	add    ebx,eax
c000e2d3:	89 c8                	mov    eax,ecx
c000e2d5:	f7 f7                	div    edi
c000e2d7:	bf 99 00 00 00       	mov    edi,0x99
c000e2dc:	29 c3                	sub    ebx,eax
c000e2de:	31 d2                	xor    edx,edx
c000e2e0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e2e8:	29 c3                	sub    ebx,eax
c000e2ea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e2ed:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2f0:	bb 05 00 00 00       	mov    ebx,0x5
c000e2f5:	83 c1 02             	add    ecx,0x2
c000e2f8:	89 c8                	mov    eax,ecx
c000e2fa:	f7 f7                	div    edi
c000e2fc:	31 d2                	xor    edx,edx
c000e2fe:	89 c7                	mov    edi,eax
c000e300:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e306:	83 c0 02             	add    eax,0x2
c000e309:	f7 f3                	div    ebx
c000e30b:	89 eb                	mov    ebx,ebp
c000e30d:	29 c3                	sub    ebx,eax
c000e30f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e315:	88 1e                	mov    BYTE PTR [esi],bl
c000e317:	19 c0                	sbb    eax,eax
c000e319:	31 d2                	xor    edx,edx
c000e31b:	83 e0 0c             	and    eax,0xc
c000e31e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e322:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e32a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e32e:	83 f9 01             	cmp    ecx,0x1
c000e331:	0f 96 c2             	setbe  dl
c000e334:	41                   	inc    ecx
c000e335:	01 d0                	add    eax,edx
c000e337:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e33a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e33e:	83 c4 1c             	add    esp,0x1c
c000e341:	89 f0                	mov    eax,esi
c000e343:	5b                   	pop    ebx
c000e344:	5e                   	pop    esi
c000e345:	5f                   	pop    edi
c000e346:	5d                   	pop    ebp
c000e347:	c2 04 00             	ret    0x4

c000e34a <Clock::timeInDatetimeLocal()>:
c000e34a:	53                   	push   ebx
c000e34b:	83 ec 14             	sub    esp,0x14
c000e34e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e356:	e8 83 fc ff ff       	call   c000dfde <Clock::timeInSecondsLocal()>
c000e35b:	83 c4 0c             	add    esp,0xc
c000e35e:	52                   	push   edx
c000e35f:	50                   	push   eax
c000e360:	53                   	push   ebx
c000e361:	e8 a0 fe ff ff       	call   c000e206 <secondsToDatetime(unsigned long long)>
c000e366:	89 d8                	mov    eax,ebx
c000e368:	83 c4 14             	add    esp,0x14
c000e36b:	5b                   	pop    ebx
c000e36c:	c2 04 00             	ret    0x4
c000e36f:	90                   	nop

c000e370 <Device::hibernate()>:
c000e370:	c3                   	ret    
c000e371:	90                   	nop

c000e372 <Device::wake()>:
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <Device::detect()>:
c000e374:	c3                   	ret    
c000e375:	90                   	nop

c000e376 <Device::disableLegacy()>:
c000e376:	c3                   	ret    
c000e377:	90                   	nop

c000e378 <Device::powerSaving(PowerSavingLevel)>:
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <DriverlessDevice::close(int, int, void*)>:
c000e37a:	31 c0                	xor    eax,eax
c000e37c:	c3                   	ret    
c000e37d:	90                   	nop

c000e37e <DriverlessDevice::detect()>:
c000e37e:	c3                   	ret    
c000e37f:	90                   	nop

c000e380 <DriverlessDevice::open(int, int, void*)>:
c000e380:	83 ec 18             	sub    esp,0x18
c000e383:	68 f0 47 02 c0       	push   0xc00247f0
c000e388:	e8 e4 69 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000e38d:	83 c8 ff             	or     eax,0xffffffff
c000e390:	83 c4 1c             	add    esp,0x1c
c000e393:	c3                   	ret    

c000e394 <Device::~Device()>:
c000e394:	ba 50 48 02 c0       	mov    edx,0xc0024850
c000e399:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e39d:	89 10                	mov    DWORD PTR [eax],edx
c000e39f:	90                   	nop
c000e3a0:	c3                   	ret    
c000e3a1:	90                   	nop

c000e3a2 <Device::~Device()>:
c000e3a2:	83 ec 0c             	sub    esp,0xc
c000e3a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e3a9:	e8 e6 ff ff ff       	call   c000e394 <Device::~Device()>
c000e3ae:	83 c4 04             	add    esp,0x4
c000e3b1:	83 ec 08             	sub    esp,0x8
c000e3b4:	68 58 01 00 00       	push   0x158
c000e3b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bd:	e8 70 eb ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	83 c4 0c             	add    esp,0xc
c000e3c8:	c3                   	ret    
c000e3c9:	90                   	nop

c000e3ca <Device::findAndLoadDriver()>:
c000e3ca:	c7 44 24 04 0e 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc002480e
c000e3d2:	e9 3c ec ff ff       	jmp    c000d013 <Dbg::kprintf(char const*, ...)>
c000e3d7:	90                   	nop

c000e3d8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e3d8:	57                   	push   edi
c000e3d9:	b9 09 00 00 00       	mov    ecx,0x9
c000e3de:	56                   	push   esi
c000e3df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e3e3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e3e7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3f1:	81 c7 18 01 00 00    	add    edi,0x118
c000e3f7:	fc                   	cld    
c000e3f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3fa:	5e                   	pop    esi
c000e3fb:	5f                   	pop    edi
c000e3fc:	c3                   	ret    
c000e3fd:	90                   	nop

c000e3fe <Device::preOpenACPI(void*, char*, char*)>:
c000e3fe:	57                   	push   edi
c000e3ff:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e404:	56                   	push   esi
c000e405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e409:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e417:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e41d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e423:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e429:	b9 0e 00 00 00       	mov    ecx,0xe
c000e42e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e434:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e438:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e43a:	5e                   	pop    esi
c000e43b:	5f                   	pop    edi
c000e43c:	c3                   	ret    
c000e43d:	90                   	nop

c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e442:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e447:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e44e:	75 0b                	jne    c000e45b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e450:	8b 00                	mov    eax,DWORD PTR [eax]
c000e452:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e456:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e459:	eb 1e                	jmp    c000e479 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e45b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000e460:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e466:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e46c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e46e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e476:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e479:	ff e0                	jmp    eax
c000e47b:	90                   	nop

c000e47c <Device::getParent()>:
c000e47c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e480:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e486:	c3                   	ret    
c000e487:	90                   	nop

c000e488 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e491:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e498:	75 0b                	jne    c000e4a5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e49a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e49c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e4a0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e4a3:	eb 1e                	jmp    c000e4c3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e4a5:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000e4aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4b0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e4b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e4bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4c0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e4c3:	ff e0                	jmp    eax
c000e4c5:	90                   	nop

c000e4c6 <Device::addChild(Device*)>:
c000e4c6:	53                   	push   ebx
c000e4c7:	83 ec 08             	sub    esp,0x8
c000e4ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e4d2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e4d8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e4de:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e4e0:	85 d2                	test   edx,edx
c000e4e2:	74 04                	je     c000e4e8 <Device::addChild(Device*)+0x22>
c000e4e4:	89 d3                	mov    ebx,edx
c000e4e6:	eb f6                	jmp    c000e4de <Device::addChild(Device*)+0x18>
c000e4e8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e4eb:	83 ec 0c             	sub    esp,0xc
c000e4ee:	6a 08                	push   0x8
c000e4f0:	e8 12 b8 ff ff       	call   c0009d07 <malloc>
c000e4f5:	89 03                	mov    DWORD PTR [ebx],eax
c000e4f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e504:	83 c4 18             	add    esp,0x18
c000e507:	5b                   	pop    ebx
c000e508:	c3                   	ret    
c000e509:	90                   	nop

c000e50a <Device::removeAllChildren()>:
c000e50a:	56                   	push   esi
c000e50b:	53                   	push   ebx
c000e50c:	52                   	push   edx
c000e50d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e511:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e51a:	74 17                	je     c000e533 <Device::removeAllChildren()+0x29>
c000e51c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e51f:	85 c0                	test   eax,eax
c000e521:	74 0c                	je     c000e52f <Device::removeAllChildren()+0x25>
c000e523:	83 ec 0c             	sub    esp,0xc
c000e526:	8b 10                	mov    edx,DWORD PTR [eax]
c000e528:	50                   	push   eax
c000e529:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e531:	eb e4                	jmp    c000e517 <Device::removeAllChildren()+0xd>
c000e533:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e539:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e53f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e545:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e54c:	58                   	pop    eax
c000e54d:	5b                   	pop    ebx
c000e54e:	5e                   	pop    esi
c000e54f:	c3                   	ret    

c000e550 <Device::hibernateAll()>:
c000e550:	53                   	push   ebx
c000e551:	83 ec 14             	sub    esp,0x14
c000e554:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e558:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e55a:	53                   	push   ebx
c000e55b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e55e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e56a:	74 0f                	je     c000e57b <Device::hibernateAll()+0x2b>
c000e56c:	83 ec 0c             	sub    esp,0xc
c000e56f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e572:	e8 d9 ff ff ff       	call   c000e550 <Device::hibernateAll()>
c000e577:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e579:	eb e9                	jmp    c000e564 <Device::hibernateAll()+0x14>
c000e57b:	83 c4 08             	add    esp,0x8
c000e57e:	5b                   	pop    ebx
c000e57f:	c3                   	ret    

c000e580 <Device::wakeAll()>:
c000e580:	53                   	push   ebx
c000e581:	83 ec 14             	sub    esp,0x14
c000e584:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e588:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e58a:	53                   	push   ebx
c000e58b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e58e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e59a:	74 0f                	je     c000e5ab <Device::wakeAll()+0x2b>
c000e59c:	83 ec 0c             	sub    esp,0xc
c000e59f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5a2:	e8 d9 ff ff ff       	call   c000e580 <Device::wakeAll()>
c000e5a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5a9:	eb e9                	jmp    c000e594 <Device::wakeAll()+0x14>
c000e5ab:	83 c4 08             	add    esp,0x8
c000e5ae:	5b                   	pop    ebx
c000e5af:	c3                   	ret    

c000e5b0 <Device::detectAll()>:
c000e5b0:	53                   	push   ebx
c000e5b1:	83 ec 14             	sub    esp,0x14
c000e5b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5ba:	53                   	push   ebx
c000e5bb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e5be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5ca:	74 0f                	je     c000e5db <Device::detectAll()+0x2b>
c000e5cc:	83 ec 0c             	sub    esp,0xc
c000e5cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5d2:	e8 d9 ff ff ff       	call   c000e5b0 <Device::detectAll()>
c000e5d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5d9:	eb e9                	jmp    c000e5c4 <Device::detectAll()+0x14>
c000e5db:	83 c4 08             	add    esp,0x8
c000e5de:	5b                   	pop    ebx
c000e5df:	c3                   	ret    

c000e5e0 <Device::disableLegacyAll()>:
c000e5e0:	53                   	push   ebx
c000e5e1:	83 ec 14             	sub    esp,0x14
c000e5e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5ea:	53                   	push   ebx
c000e5eb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e5ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5f4:	83 c4 10             	add    esp,0x10
c000e5f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5fa:	74 0f                	je     c000e60b <Device::disableLegacyAll()+0x2b>
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e602:	e8 d9 ff ff ff       	call   c000e5e0 <Device::disableLegacyAll()>
c000e607:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e609:	eb e9                	jmp    c000e5f4 <Device::disableLegacyAll()+0x14>
c000e60b:	83 c4 08             	add    esp,0x8
c000e60e:	5b                   	pop    ebx
c000e60f:	c3                   	ret    

c000e610 <Device::loadDriversForAll()>:
c000e610:	53                   	push   ebx
c000e611:	83 ec 08             	sub    esp,0x8
c000e614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e618:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e61f:	75 0c                	jne    c000e62d <Device::loadDriversForAll()+0x1d>
c000e621:	83 ec 0c             	sub    esp,0xc
c000e624:	53                   	push   ebx
c000e625:	e8 a0 fd ff ff       	call   c000e3ca <Device::findAndLoadDriver()>
c000e62a:	83 c4 10             	add    esp,0x10
c000e62d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e633:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e636:	74 12                	je     c000e64a <Device::loadDriversForAll()+0x3a>
c000e638:	83 ec 0c             	sub    esp,0xc
c000e63b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e63e:	e8 cd ff ff ff       	call   c000e610 <Device::loadDriversForAll()>
c000e643:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e645:	83 c4 10             	add    esp,0x10
c000e648:	eb e9                	jmp    c000e633 <Device::loadDriversForAll()+0x23>
c000e64a:	83 c4 08             	add    esp,0x8
c000e64d:	5b                   	pop    ebx
c000e64e:	c3                   	ret    
c000e64f:	90                   	nop

c000e650 <Device::closeAll()>:
c000e650:	53                   	push   ebx
c000e651:	83 ec 08             	sub    esp,0x8
c000e654:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e658:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e65a:	6a 00                	push   0x0
c000e65c:	6a 00                	push   0x0
c000e65e:	6a 00                	push   0x0
c000e660:	53                   	push   ebx
c000e661:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e664:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e670:	74 0f                	je     c000e681 <Device::closeAll()+0x31>
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e678:	e8 d3 ff ff ff       	call   c000e650 <Device::closeAll()>
c000e67d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e67f:	eb e9                	jmp    c000e66a <Device::closeAll()+0x1a>
c000e681:	83 c4 08             	add    esp,0x8
c000e684:	5b                   	pop    ebx
c000e685:	c3                   	ret    

c000e686 <Device::powerSavingAll(PowerSavingLevel)>:
c000e686:	56                   	push   esi
c000e687:	53                   	push   ebx
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e68f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e693:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e695:	56                   	push   esi
c000e696:	53                   	push   ebx
c000e697:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e69a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6a6:	74 0f                	je     c000e6b7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e6a8:	52                   	push   edx
c000e6a9:	52                   	push   edx
c000e6aa:	56                   	push   esi
c000e6ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6ae:	e8 d3 ff ff ff       	call   c000e686 <Device::powerSavingAll(PowerSavingLevel)>
c000e6b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6b5:	eb e9                	jmp    c000e6a0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e6b7:	58                   	pop    eax
c000e6b8:	5b                   	pop    ebx
c000e6b9:	5e                   	pop    esi
c000e6ba:	c3                   	ret    
c000e6bb:	90                   	nop

c000e6bc <Device::setName(char const*)>:
c000e6bc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e6c4:	e9 6f 20 ff ff       	jmp    c0000738 <strcpy>
c000e6c9:	90                   	nop

c000e6ca <Device::Device(char const*)>:
c000e6ca:	83 ec 1c             	sub    esp,0x1c
c000e6cd:	ba 50 48 02 c0       	mov    edx,0xc0024850
c000e6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d6:	89 10                	mov    DWORD PTR [eax],edx
c000e6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6dc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e706:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e710:	83 ec 08             	sub    esp,0x8
c000e713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e717:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e71b:	e8 9c ff ff ff       	call   c000e6bc <Device::setName(char const*)>
c000e720:	83 c4 10             	add    esp,0x10
c000e723:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e72b:	83 ec 0c             	sub    esp,0xc
c000e72e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e732:	e8 d0 b5 ff ff       	call   c0009d07 <malloc>
c000e737:	83 c4 10             	add    esp,0x10
c000e73a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e740:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e747:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e74b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e755:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e75b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e765:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e76b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e776:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e781:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e7c0:	90                   	nop
c000e7c1:	83 c4 1c             	add    esp,0x1c
c000e7c4:	c3                   	ret    
c000e7c5:	90                   	nop

c000e7c6 <Device::getName()>:
c000e7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7ca:	05 d0 00 00 00       	add    eax,0xd0
c000e7cf:	c3                   	ret    

c000e7d0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7de:	50                   	push   eax
c000e7df:	e8 e6 fe ff ff       	call   c000e6ca <Device::Device(char const*)>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	ba 7c 48 02 c0       	mov    edx,0xc002487c
c000e7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f0:	89 10                	mov    DWORD PTR [eax],edx
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e800:	90                   	nop
c000e801:	83 c4 0c             	add    esp,0xc
c000e804:	c3                   	ret    
c000e805:	90                   	nop

c000e806 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e806:	57                   	push   edi
c000e807:	56                   	push   esi
c000e808:	53                   	push   ebx
c000e809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e80d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e811:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e815:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e81b:	75 0c                	jne    c000e829 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e81d:	52                   	push   edx
c000e81e:	52                   	push   edx
c000e81f:	53                   	push   ebx
c000e820:	56                   	push   esi
c000e821:	e8 4c 41 01 00       	call   c0022972 <LinkedList<Device>::addElement(Device*)>
c000e826:	83 c4 10             	add    esp,0x10
c000e829:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e82f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e832:	74 12                	je     c000e846 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e834:	50                   	push   eax
c000e835:	57                   	push   edi
c000e836:	56                   	push   esi
c000e837:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e83a:	e8 c7 ff ff ff       	call   c000e806 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e83f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e841:	83 c4 10             	add    esp,0x10
c000e844:	eb e9                	jmp    c000e82f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e846:	5b                   	pop    ebx
c000e847:	5e                   	pop    esi
c000e848:	5f                   	pop    edi
c000e849:	c3                   	ret    

c000e84a <getDevicesOfType(DeviceType)>:
c000e84a:	53                   	push   ebx
c000e84b:	83 ec 14             	sub    esp,0x14
c000e84e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e852:	53                   	push   ebx
c000e853:	e8 f6 41 01 00       	call   c0022a4e <LinkedList<Device>::LinkedList()>
c000e858:	83 c4 0c             	add    esp,0xc
c000e85b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e85f:	53                   	push   ebx
c000e860:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c000e866:	e8 9b ff ff ff       	call   c000e806 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e86b:	89 d8                	mov    eax,ebx
c000e86d:	83 c4 18             	add    esp,0x18
c000e870:	5b                   	pop    ebx
c000e871:	c2 04 00             	ret    0x4

c000e874 <HardDiskController::HardDiskController(char const*)>:
c000e874:	83 ec 0c             	sub    esp,0xc
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	83 ec 08             	sub    esp,0x8
c000e87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e882:	50                   	push   eax
c000e883:	e8 42 fe ff ff       	call   c000e6ca <Device::Device(char const*)>
c000e888:	83 c4 10             	add    esp,0x10
c000e88b:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c000e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e894:	89 10                	mov    DWORD PTR [eax],edx
c000e896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e8a4:	90                   	nop
c000e8a5:	83 c4 0c             	add    esp,0xc
c000e8a8:	c3                   	ret    
c000e8a9:	90                   	nop
c000e8aa:	66 90                	xchg   ax,ax

c000e8ac <HardDiskController::~HardDiskController()>:
c000e8ac:	83 ec 0c             	sub    esp,0xc
c000e8af:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c000e8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b8:	89 10                	mov    DWORD PTR [eax],edx
c000e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	50                   	push   eax
c000e8c2:	e8 cd fa ff ff       	call   c000e394 <Device::~Device()>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	90                   	nop
c000e8cb:	83 c4 0c             	add    esp,0xc
c000e8ce:	c3                   	ret    
c000e8cf:	90                   	nop

c000e8d0 <HardDiskController::~HardDiskController()>:
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	83 ec 0c             	sub    esp,0xc
c000e8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8da:	e8 cd ff ff ff       	call   c000e8ac <HardDiskController::~HardDiskController()>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	83 ec 08             	sub    esp,0x8
c000e8e5:	68 58 01 00 00       	push   0x158
c000e8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ee:	e8 3f e6 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	83 c4 0c             	add    esp,0xc
c000e8f9:	c3                   	ret    

c000e8fa <PhysicalDisk::eject()>:
c000e8fa:	83 c8 ff             	or     eax,0xffffffff
c000e8fd:	c3                   	ret    

c000e8fe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e8fe:	83 ec 0c             	sub    esp,0xc
c000e901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e905:	83 ec 08             	sub    esp,0x8
c000e908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e90c:	50                   	push   eax
c000e90d:	e8 b8 fd ff ff       	call   c000e6ca <Device::Device(char const*)>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c000e91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91e:	89 10                	mov    DWORD PTR [eax],edx
c000e920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e924:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e948:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e94c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e956:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e960:	90                   	nop
c000e961:	83 c4 0c             	add    esp,0xc
c000e964:	c3                   	ret    
c000e965:	90                   	nop

c000e966 <PhysicalDisk::startCache()>:
c000e966:	56                   	push   esi
c000e967:	53                   	push   ebx
c000e968:	83 ec 10             	sub    esp,0x10
c000e96b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e96f:	6a 44                	push   0x44
c000e971:	e8 91 b3 ff ff       	call   c0009d07 <malloc>
c000e976:	89 c6                	mov    esi,eax
c000e978:	58                   	pop    eax
c000e979:	5a                   	pop    edx
c000e97a:	53                   	push   ebx
c000e97b:	56                   	push   esi
c000e97c:	e8 a7 24 00 00       	call   c0010e28 <VCache::VCache(PhysicalDisk*)>
c000e981:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e987:	83 c4 14             	add    esp,0x14
c000e98a:	5b                   	pop    ebx
c000e98b:	5e                   	pop    esi
c000e98c:	c3                   	ret    
c000e98d:	90                   	nop

c000e98e <PhysicalDisk::~PhysicalDisk()>:
c000e98e:	83 ec 0c             	sub    esp,0xc
c000e991:	ba d4 48 02 c0       	mov    edx,0xc00248d4
c000e996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e99a:	89 10                	mov    DWORD PTR [eax],edx
c000e99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	50                   	push   eax
c000e9a4:	e8 eb f9 ff ff       	call   c000e394 <Device::~Device()>
c000e9a9:	83 c4 10             	add    esp,0x10
c000e9ac:	90                   	nop
c000e9ad:	83 c4 0c             	add    esp,0xc
c000e9b0:	c3                   	ret    
c000e9b1:	90                   	nop

c000e9b2 <PhysicalDisk::~PhysicalDisk()>:
c000e9b2:	83 ec 0c             	sub    esp,0xc
c000e9b5:	83 ec 0c             	sub    esp,0xc
c000e9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9bc:	e8 cd ff ff ff       	call   c000e98e <PhysicalDisk::~PhysicalDisk()>
c000e9c1:	83 c4 10             	add    esp,0x10
c000e9c4:	83 ec 08             	sub    esp,0x8
c000e9c7:	68 6c 01 00 00       	push   0x16c
c000e9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9d0:	e8 5d e5 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	83 c4 0c             	add    esp,0xc
c000e9db:	c3                   	ret    

c000e9dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9e4:	c1 e0 04             	shl    eax,0x4
c000e9e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e9eb:	8d 50 10             	lea    edx,[eax+0x10]
c000e9ee:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e9f4:	74 08                	je     c000e9fe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e9f6:	83 c0 04             	add    eax,0x4
c000e9f9:	39 d0                	cmp    eax,edx
c000e9fb:	75 f1                	jne    c000e9ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e9fd:	c3                   	ret    
c000e9fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea08:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ea12:	eb e2                	jmp    c000e9f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ea14 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ea14:	57                   	push   edi
c000ea15:	31 c0                	xor    eax,eax
c000ea17:	56                   	push   esi
c000ea18:	53                   	push   ebx
c000ea19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ea1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ea21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ea25:	89 da                	mov    edx,ebx
c000ea27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ea2b:	c1 e2 04             	shl    edx,0x4
c000ea2e:	01 ca                	add    edx,ecx
c000ea30:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ea38:	74 16                	je     c000ea50 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ea3a:	40                   	inc    eax
c000ea3b:	83 f8 04             	cmp    eax,0x4
c000ea3e:	75 f0                	jne    c000ea30 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ea40:	c7 44 24 10 04 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024904
c000ea48:	5b                   	pop    ebx
c000ea49:	5e                   	pop    esi
c000ea4a:	5f                   	pop    edi
c000ea4b:	e9 21 63 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c000ea50:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ea53:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ea56:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ea5c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ea62:	5b                   	pop    ebx
c000ea63:	5e                   	pop    esi
c000ea64:	5f                   	pop    edi
c000ea65:	c3                   	ret    

c000ea66 <doubleFault(regs*, void*)>:
c000ea66:	55                   	push   ebp
c000ea67:	89 e5                	mov    ebp,esp
c000ea69:	83 ec 08             	sub    esp,0x8
c000ea6c:	83 ec 0c             	sub    esp,0xc
c000ea6f:	68 11 49 02 c0       	push   0xc0024911
c000ea74:	e8 f8 62 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000ea79:	83 c4 10             	add    esp,0x10
c000ea7c:	90                   	nop
c000ea7d:	c9                   	leave  
c000ea7e:	c3                   	ret    
c000ea7f:	90                   	nop

c000ea80 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea80:	56                   	push   esi
c000ea81:	53                   	push   ebx
c000ea82:	50                   	push   eax
c000ea83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ea8b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea90:	75 35                	jne    c000eac7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ea92:	8d 43 20             	lea    eax,[ebx+0x20]
c000ea95:	31 d2                	xor    edx,edx
c000ea97:	89 c1                	mov    ecx,eax
c000ea99:	c1 e1 04             	shl    ecx,0x4
c000ea9c:	01 f1                	add    ecx,esi
c000ea9e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000eaa6:	74 3e                	je     c000eae6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000eaa8:	42                   	inc    edx
c000eaa9:	83 fa 04             	cmp    edx,0x4
c000eaac:	75 f0                	jne    c000ea9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000eaae:	83 ec 0c             	sub    esp,0xc
c000eab1:	68 2b 49 02 c0       	push   0xc002492b
c000eab6:	e8 b6 62 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000eabb:	83 c4 10             	add    esp,0x10
c000eabe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eac3:	5a                   	pop    edx
c000eac4:	5b                   	pop    ebx
c000eac5:	5e                   	pop    esi
c000eac6:	c3                   	ret    
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	56                   	push   esi
c000eacb:	e8 f6 fc ff ff       	call   c000e7c6 <Device::getName()>
c000ead0:	83 c4 10             	add    esp,0x10
c000ead3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ead6:	75 ba                	jne    c000ea92 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ead8:	83 fb 0f             	cmp    ebx,0xf
c000eadb:	7f 29                	jg     c000eb06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000eadd:	0f b6 9b a0 73 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8c60]
c000eae4:	eb ac                	jmp    c000ea92 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000eae6:	8d 04 82             	lea    eax,[edx+eax*4]
c000eae9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eaed:	8d 04 86             	lea    eax,[esi+eax*4]
c000eaf0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000eaf6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eafa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000eb00:	89 d8                	mov    eax,ebx
c000eb02:	5a                   	pop    edx
c000eb03:	5b                   	pop    ebx
c000eb04:	5e                   	pop    esi
c000eb05:	c3                   	ret    
c000eb06:	83 ec 0c             	sub    esp,0xc
c000eb09:	68 1e 49 02 c0       	push   0xc002491e
c000eb0e:	e8 5e 62 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000eb13:	83 c4 10             	add    esp,0x10
c000eb16:	e9 77 ff ff ff       	jmp    c000ea92 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000eb1b:	90                   	nop

c000eb1c <InterruptController::clearAllHandlers(int, bool)>:
c000eb1c:	56                   	push   esi
c000eb1d:	53                   	push   ebx
c000eb1e:	52                   	push   edx
c000eb1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eb27:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eb2c:	75 61                	jne    c000eb8f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000eb2e:	8d 46 20             	lea    eax,[esi+0x20]
c000eb31:	c1 e6 04             	shl    esi,0x4
c000eb34:	c1 e0 04             	shl    eax,0x4
c000eb37:	01 de                	add    esi,ebx
c000eb39:	01 d8                	add    eax,ebx
c000eb3b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000eb45:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eb4f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000eb59:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eb63:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000eb6d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000eb77:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eb81:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eb8b:	58                   	pop    eax
c000eb8c:	5b                   	pop    ebx
c000eb8d:	5e                   	pop    esi
c000eb8e:	c3                   	ret    
c000eb8f:	83 ec 0c             	sub    esp,0xc
c000eb92:	53                   	push   ebx
c000eb93:	e8 2e fc ff ff       	call   c000e7c6 <Device::getName()>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eb9e:	75 8e                	jne    c000eb2e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eba0:	83 fe 0f             	cmp    esi,0xf
c000eba3:	7f 09                	jg     c000ebae <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eba5:	0f b6 b6 a0 73 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8c60]
c000ebac:	eb 80                	jmp    c000eb2e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	68 38 49 02 c0       	push   0xc0024938
c000ebb6:	e8 b6 61 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	e9 6b ff ff ff       	jmp    c000eb2e <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ebc3:	90                   	nop

c000ebc4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ebc4:	56                   	push   esi
c000ebc5:	53                   	push   ebx
c000ebc6:	52                   	push   edx
c000ebc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ebcb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ebcf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ebd4:	75 3a                	jne    c000ec10 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ebd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebda:	8d 50 20             	lea    edx,[eax+0x20]
c000ebdd:	c1 e2 04             	shl    edx,0x4
c000ebe0:	8d 04 16             	lea    eax,[esi+edx*1]
c000ebe3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ebe7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ebed:	74 0b                	je     c000ebfa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ebef:	83 c0 04             	add    eax,0x4
c000ebf2:	39 d0                	cmp    eax,edx
c000ebf4:	75 f1                	jne    c000ebe7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ebf6:	58                   	pop    eax
c000ebf7:	5b                   	pop    ebx
c000ebf8:	5e                   	pop    esi
c000ebf9:	c3                   	ret    
c000ebfa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ec04:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ec0e:	eb df                	jmp    c000ebef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ec10:	83 ec 0c             	sub    esp,0xc
c000ec13:	56                   	push   esi
c000ec14:	e8 ad fb ff ff       	call   c000e7c6 <Device::getName()>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ec1f:	75 b5                	jne    c000ebd6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ec21:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ec26:	7f 11                	jg     c000ec39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ec28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ec2c:	0f b6 80 a0 73 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8c60]
c000ec33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec37:	eb 9d                	jmp    c000ebd6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ec39:	83 ec 0c             	sub    esp,0xc
c000ec3c:	68 45 49 02 c0       	push   0xc0024945
c000ec41:	e8 2b 61 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000ec46:	83 c4 10             	add    esp,0x10
c000ec49:	eb 8b                	jmp    c000ebd6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ec4b <nmiHandler(regs*, void*)>:
c000ec4b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000ec50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec54:	e9 05 a8 ff ff       	jmp    c000945e <Computer::handleNMI()>

c000ec59 <int_handler>:
c000ec59:	55                   	push   ebp
c000ec5a:	57                   	push   edi
c000ec5b:	56                   	push   esi
c000ec5c:	53                   	push   ebx
c000ec5d:	83 ec 0c             	sub    esp,0xc
c000ec60:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ec64:	80 3d 84 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028784,0x0
c000ec6b:	74 0b                	je     c000ec78 <int_handler+0x1f>
c000ec6d:	fa                   	cli    
c000ec6e:	f4                   	hlt    
c000ec6f:	80 3d 84 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028784,0x0
c000ec76:	75 f5                	jne    c000ec6d <int_handler+0x14>
c000ec78:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000ec7d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ec80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ec86:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ec8c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ec8f:	83 f8 17             	cmp    eax,0x17
c000ec92:	77 13                	ja     c000eca7 <int_handler+0x4e>
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	8b 17                	mov    edx,DWORD PTR [edi]
c000ec99:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ec9c:	0f b6 c0             	movzx  eax,al
c000ec9f:	50                   	push   eax
c000eca0:	57                   	push   edi
c000eca1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	83 c3 15             	add    ebx,0x15
c000ecaa:	c1 e3 04             	shl    ebx,0x4
c000ecad:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ecb1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ecb8:	31 db                	xor    ebx,ebx
c000ecba:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ecbe:	85 c0                	test   eax,eax
c000ecc0:	74 13                	je     c000ecd5 <int_handler+0x7c>
c000ecc2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ecc5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ecc9:	74 1c                	je     c000ece7 <int_handler+0x8e>
c000eccb:	83 ec 08             	sub    esp,0x8
c000ecce:	52                   	push   edx
c000eccf:	56                   	push   esi
c000ecd0:	ff d0                	call   eax
c000ecd2:	83 c4 10             	add    esp,0x10
c000ecd5:	43                   	inc    ebx
c000ecd6:	83 fb 04             	cmp    ebx,0x4
c000ecd9:	75 df                	jne    c000ecba <int_handler+0x61>
c000ecdb:	83 c4 0c             	add    esp,0xc
c000ecde:	31 c0                	xor    eax,eax
c000ece0:	5b                   	pop    ebx
c000ece1:	31 d2                	xor    edx,edx
c000ece3:	5e                   	pop    esi
c000ece4:	5f                   	pop    edi
c000ece5:	5d                   	pop    ebp
c000ece6:	c3                   	ret    
c000ece7:	83 ec 08             	sub    esp,0x8
c000ecea:	52                   	push   edx
c000eceb:	56                   	push   esi
c000ecec:	ff d0                	call   eax
c000ecee:	83 c4 10             	add    esp,0x10
c000ecf1:	83 c4 0c             	add    esp,0xc
c000ecf4:	5b                   	pop    ebx
c000ecf5:	5e                   	pop    esi
c000ecf6:	5f                   	pop    edi
c000ecf7:	5d                   	pop    ebp
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <InterruptController::InterruptController(char const*)>:
c000ecfa:	83 ec 1c             	sub    esp,0x1c
c000ecfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ed08:	50                   	push   eax
c000ed09:	e8 bc f9 ff ff       	call   c000e6ca <Device::Device(char const*)>
c000ed0e:	83 c4 10             	add    esp,0x10
c000ed11:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c000ed16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed1a:	89 10                	mov    DWORD PTR [eax],edx
c000ed1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed20:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ed2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed32:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ed3a:	7f 5e                	jg     c000ed9a <InterruptController::InterruptController(char const*)+0xa0>
c000ed3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed44:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ed49:	7f 49                	jg     c000ed94 <InterruptController::InterruptController(char const*)+0x9a>
c000ed4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed53:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed5e:	01 ca                	add    edx,ecx
c000ed60:	83 c2 54             	add    edx,0x54
c000ed63:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed7e:	01 ca                	add    edx,ecx
c000ed80:	81 c2 54 04 00 00    	add    edx,0x454
c000ed86:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed8e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ed92:	eb b0                	jmp    c000ed44 <InterruptController::InterruptController(char const*)+0x4a>
c000ed94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed98:	eb 98                	jmp    c000ed32 <InterruptController::InterruptController(char const*)+0x38>
c000ed9a:	90                   	nop
c000ed9b:	83 c4 1c             	add    esp,0x1c
c000ed9e:	c3                   	ret    
c000ed9f:	90                   	nop

c000eda0 <InterruptController::~InterruptController()>:
c000eda0:	83 ec 0c             	sub    esp,0xc
c000eda3:	ba e8 4b 02 c0       	mov    edx,0xc0024be8
c000eda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edac:	89 10                	mov    DWORD PTR [eax],edx
c000edae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb2:	83 ec 0c             	sub    esp,0xc
c000edb5:	50                   	push   eax
c000edb6:	e8 d9 f5 ff ff       	call   c000e394 <Device::~Device()>
c000edbb:	83 c4 10             	add    esp,0x10
c000edbe:	90                   	nop
c000edbf:	83 c4 0c             	add    esp,0xc
c000edc2:	c3                   	ret    
c000edc3:	90                   	nop

c000edc4 <InterruptController::~InterruptController()>:
c000edc4:	83 ec 0c             	sub    esp,0xc
c000edc7:	83 ec 0c             	sub    esp,0xc
c000edca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edce:	e8 cd ff ff ff       	call   c000eda0 <InterruptController::~InterruptController()>
c000edd3:	83 c4 10             	add    esp,0x10
c000edd6:	83 ec 08             	sub    esp,0x8
c000edd9:	68 58 21 00 00       	push   0x2158
c000edde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ede2:	e8 4b e1 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	83 c4 0c             	add    esp,0xc
c000eded:	c3                   	ret    

c000edee <displayDebugInfo(regs*)>:
c000edee:	55                   	push   ebp
c000edef:	57                   	push   edi
c000edf0:	56                   	push   esi
c000edf1:	53                   	push   ebx
c000edf2:	83 ec 24             	sub    esp,0x24
c000edf5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000edf9:	0f 20 c2             	mov    edx,cr0
c000edfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ee00:	0f 20 d7             	mov    edi,cr2
c000ee03:	0f 20 de             	mov    esi,cr3
c000ee06:	0f 20 e5             	mov    ebp,cr4
c000ee09:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ee0c:	68 52 49 02 c0       	push   0xc0024952
c000ee11:	e8 fd e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee16:	59                   	pop    ecx
c000ee17:	58                   	pop    eax
c000ee18:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ee1b:	68 5d 49 02 c0       	push   0xc002495d
c000ee20:	e8 ee e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee25:	58                   	pop    eax
c000ee26:	5a                   	pop    edx
c000ee27:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ee2a:	68 68 49 02 c0       	push   0xc0024968
c000ee2f:	e8 df e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee34:	59                   	pop    ecx
c000ee35:	58                   	pop    eax
c000ee36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ee39:	68 73 49 02 c0       	push   0xc0024973
c000ee3e:	e8 d0 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee43:	58                   	pop    eax
c000ee44:	5a                   	pop    edx
c000ee45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ee48:	68 7e 49 02 c0       	push   0xc002497e
c000ee4d:	e8 c1 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee52:	59                   	pop    ecx
c000ee53:	58                   	pop    eax
c000ee54:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ee57:	68 89 49 02 c0       	push   0xc0024989
c000ee5c:	e8 b2 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee61:	58                   	pop    eax
c000ee62:	5a                   	pop    edx
c000ee63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee66:	68 94 49 02 c0       	push   0xc0024994
c000ee6b:	e8 a3 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee70:	59                   	pop    ecx
c000ee71:	58                   	pop    eax
c000ee72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ee75:	68 9f 49 02 c0       	push   0xc002499f
c000ee7a:	e8 94 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee7f:	58                   	pop    eax
c000ee80:	5a                   	pop    edx
c000ee81:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee84:	68 aa 49 02 c0       	push   0xc00249aa
c000ee89:	e8 85 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee8e:	59                   	pop    ecx
c000ee8f:	58                   	pop    eax
c000ee90:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee93:	68 b9 49 02 c0       	push   0xc00249b9
c000ee98:	e8 76 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000ee9d:	58                   	pop    eax
c000ee9e:	5a                   	pop    edx
c000ee9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eea2:	68 c4 49 02 c0       	push   0xc00249c4
c000eea7:	e8 67 e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000eeac:	59                   	pop    ecx
c000eead:	58                   	pop    eax
c000eeae:	57                   	push   edi
c000eeaf:	68 cf 49 02 c0       	push   0xc00249cf
c000eeb4:	e8 5a e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000eeb9:	58                   	pop    eax
c000eeba:	5a                   	pop    edx
c000eebb:	56                   	push   esi
c000eebc:	68 da 49 02 c0       	push   0xc00249da
c000eec1:	e8 4d e1 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000eec6:	59                   	pop    ecx
c000eec7:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eecc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed2:	e8 1e bf ff ff       	call   c000adf5 <setActiveTerminal(VgaText*)>
c000eed7:	58                   	pop    eax
c000eed8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eedb:	5a                   	pop    edx
c000eedc:	c1 e0 05             	shl    eax,0x5
c000eedf:	05 00 71 02 c0       	add    eax,0xc0027100
c000eee4:	50                   	push   eax
c000eee5:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eeea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef0:	e8 03 c4 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000eef5:	59                   	pop    ecx
c000eef6:	58                   	pop    eax
c000eef7:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eefc:	68 e5 49 02 c0       	push   0xc00249e5
c000ef01:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef07:	e8 ec c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000ef0c:	58                   	pop    eax
c000ef0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef12:	5a                   	pop    edx
c000ef13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef16:	83 c0 0c             	add    eax,0xc
c000ef19:	50                   	push   eax
c000ef1a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef25:	e8 ce c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000ef2a:	59                   	pop    ecx
c000ef2b:	58                   	pop    eax
c000ef2c:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef31:	68 ee 49 02 c0       	push   0xc00249ee
c000ef36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef3c:	e8 b7 c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000ef41:	58                   	pop    eax
c000ef42:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef47:	5a                   	pop    edx
c000ef48:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ef4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef51:	e8 5c c3 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000ef56:	59                   	pop    ecx
c000ef57:	58                   	pop    eax
c000ef58:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef5d:	68 f6 49 02 c0       	push   0xc00249f6
c000ef62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef68:	e8 8b c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000ef6d:	58                   	pop    eax
c000ef6e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef73:	5a                   	pop    edx
c000ef74:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ef77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef7d:	e8 30 c3 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000ef82:	59                   	pop    ecx
c000ef83:	58                   	pop    eax
c000ef84:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef89:	68 fe 49 02 c0       	push   0xc00249fe
c000ef8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef94:	e8 5f c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000ef99:	58                   	pop    eax
c000ef9a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef9f:	5a                   	pop    edx
c000efa0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000efa3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efa9:	e8 04 c3 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000efae:	59                   	pop    ecx
c000efaf:	58                   	pop    eax
c000efb0:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efb5:	68 06 4a 02 c0       	push   0xc0024a06
c000efba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc0:	e8 33 c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000efc5:	58                   	pop    eax
c000efc6:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efcb:	5a                   	pop    edx
c000efcc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000efcf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd5:	e8 d8 c2 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000efda:	59                   	pop    ecx
c000efdb:	58                   	pop    eax
c000efdc:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efe1:	68 0e 4a 02 c0       	push   0xc0024a0e
c000efe6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efec:	e8 07 c3 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000eff1:	58                   	pop    eax
c000eff2:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eff7:	5a                   	pop    edx
c000eff8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000effb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f001:	e8 ac c2 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f006:	59                   	pop    ecx
c000f007:	58                   	pop    eax
c000f008:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f00d:	68 16 4a 02 c0       	push   0xc0024a16
c000f012:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f018:	e8 db c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f01d:	58                   	pop    eax
c000f01e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f023:	5a                   	pop    edx
c000f024:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f027:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f02d:	e8 80 c2 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f032:	59                   	pop    ecx
c000f033:	58                   	pop    eax
c000f034:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f039:	68 1e 4a 02 c0       	push   0xc0024a1e
c000f03e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f044:	e8 af c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f049:	58                   	pop    eax
c000f04a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f04f:	5a                   	pop    edx
c000f050:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f054:	52                   	push   edx
c000f055:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f05b:	e8 52 c2 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f060:	59                   	pop    ecx
c000f061:	58                   	pop    eax
c000f062:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f067:	68 27 4a 02 c0       	push   0xc0024a27
c000f06c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f072:	e8 81 c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f077:	58                   	pop    eax
c000f078:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f07d:	5a                   	pop    edx
c000f07e:	57                   	push   edi
c000f07f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f085:	e8 28 c2 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f08a:	59                   	pop    ecx
c000f08b:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f090:	5f                   	pop    edi
c000f091:	68 2f 4a 02 c0       	push   0xc0024a2f
c000f096:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f09c:	e8 57 c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f0a1:	58                   	pop    eax
c000f0a2:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f0a7:	5a                   	pop    edx
c000f0a8:	56                   	push   esi
c000f0a9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0af:	e8 fe c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f0b4:	59                   	pop    ecx
c000f0b5:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f0ba:	5e                   	pop    esi
c000f0bb:	68 37 4a 02 c0       	push   0xc0024a37
c000f0c0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0c6:	e8 2d c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f0cb:	5f                   	pop    edi
c000f0cc:	58                   	pop    eax
c000f0cd:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f0d2:	55                   	push   ebp
c000f0d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d9:	e8 d4 c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f0de:	58                   	pop    eax
c000f0df:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f0e4:	5a                   	pop    edx
c000f0e5:	68 3f 4a 02 c0       	push   0xc0024a3f
c000f0ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f0:	e8 03 c2 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f0f5:	0f 21 c0             	mov    eax,db0
c000f0f8:	59                   	pop    ecx
c000f0f9:	5e                   	pop    esi
c000f0fa:	50                   	push   eax
c000f0fb:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f100:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f106:	e8 a7 c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f10b:	5f                   	pop    edi
c000f10c:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f111:	5d                   	pop    ebp
c000f112:	68 48 4a 02 c0       	push   0xc0024a48
c000f117:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f11d:	e8 d6 c1 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f122:	0f 21 c8             	mov    eax,db1
c000f125:	5a                   	pop    edx
c000f126:	59                   	pop    ecx
c000f127:	50                   	push   eax
c000f128:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f12d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f133:	e8 7a c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f138:	5e                   	pop    esi
c000f139:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f13e:	5f                   	pop    edi
c000f13f:	68 50 4a 02 c0       	push   0xc0024a50
c000f144:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f14a:	e8 a9 c1 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f14f:	0f 21 d0             	mov    eax,db2
c000f152:	5d                   	pop    ebp
c000f153:	5a                   	pop    edx
c000f154:	50                   	push   eax
c000f155:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f15a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f160:	e8 4d c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f165:	59                   	pop    ecx
c000f166:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f16b:	5e                   	pop    esi
c000f16c:	68 58 4a 02 c0       	push   0xc0024a58
c000f171:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f177:	e8 7c c1 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f17c:	0f 21 d8             	mov    eax,db3
c000f17f:	5f                   	pop    edi
c000f180:	5d                   	pop    ebp
c000f181:	50                   	push   eax
c000f182:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f187:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f18d:	e8 20 c1 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f192:	58                   	pop    eax
c000f193:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f198:	5a                   	pop    edx
c000f199:	68 60 4a 02 c0       	push   0xc0024a60
c000f19e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a4:	e8 4f c1 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f1a9:	0f 21 f0             	mov    eax,db6
c000f1ac:	59                   	pop    ecx
c000f1ad:	5e                   	pop    esi
c000f1ae:	50                   	push   eax
c000f1af:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f1b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1ba:	e8 f3 c0 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f1bf:	5f                   	pop    edi
c000f1c0:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f1c5:	5d                   	pop    ebp
c000f1c6:	68 68 4a 02 c0       	push   0xc0024a68
c000f1cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d1:	e8 22 c1 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f1d6:	0f 21 f8             	mov    eax,db7
c000f1d9:	5a                   	pop    edx
c000f1da:	59                   	pop    ecx
c000f1db:	50                   	push   eax
c000f1dc:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f1e1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e7:	e8 c6 c0 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f1ec:	5e                   	pop    esi
c000f1ed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1f0:	e8 b0 87 00 00       	call   c00179a5 <Thr::getDriverNameFromAddress(unsigned long)>
c000f1f5:	83 c4 10             	add    esp,0x10
c000f1f8:	85 c0                	test   eax,eax
c000f1fa:	74 7d                	je     c000f279 <displayDebugInfo(regs*)+0x48b>
c000f1fc:	89 c6                	mov    esi,eax
c000f1fe:	50                   	push   eax
c000f1ff:	50                   	push   eax
c000f200:	56                   	push   esi
c000f201:	68 70 4a 02 c0       	push   0xc0024a70
c000f206:	e8 08 de ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f20b:	5a                   	pop    edx
c000f20c:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f211:	59                   	pop    ecx
c000f212:	68 7e 4a 02 c0       	push   0xc0024a7e
c000f217:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f21d:	e8 d6 c0 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f222:	5f                   	pop    edi
c000f223:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f228:	5d                   	pop    ebp
c000f229:	56                   	push   esi
c000f22a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f230:	e8 c3 c0 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f235:	58                   	pop    eax
c000f236:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f23b:	5a                   	pop    edx
c000f23c:	68 8a 4a 02 c0       	push   0xc0024a8a
c000f241:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f247:	e8 ac c0 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c000f24c:	59                   	pop    ecx
c000f24d:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f252:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f258:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f25b:	e8 7c 87 00 00       	call   c00179dc <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f260:	5b                   	pop    ebx
c000f261:	5d                   	pop    ebp
c000f262:	50                   	push   eax
c000f263:	57                   	push   edi
c000f264:	e8 49 c0 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c000f269:	58                   	pop    eax
c000f26a:	5a                   	pop    edx
c000f26b:	56                   	push   esi
c000f26c:	68 96 4a 02 c0       	push   0xc0024a96
c000f271:	e8 9d dd ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f276:	83 c4 10             	add    esp,0x10
c000f279:	fa                   	cli    
c000f27a:	f4                   	hlt    
c000f27b:	eb fe                	jmp    c000f27b <displayDebugInfo(regs*)+0x48d>

c000f27d <gpFault(regs*, void*)>:
c000f27d:	53                   	push   ebx
c000f27e:	83 ec 14             	sub    esp,0x14
c000f281:	c7 05 e4 7d 02 c0 db 93 01 c0 	mov    DWORD PTR ds:0xc0027de4,0xc00193db
c000f28b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f28f:	53                   	push   ebx
c000f290:	e8 46 a1 00 00       	call   c00193db <Vm::faultHandler(regs*)>
c000f295:	83 c4 10             	add    esp,0x10
c000f298:	84 c0                	test   al,al
c000f29a:	74 05                	je     c000f2a1 <gpFault(regs*, void*)+0x24>
c000f29c:	83 c4 08             	add    esp,0x8
c000f29f:	5b                   	pop    ebx
c000f2a0:	c3                   	ret    
c000f2a1:	83 ec 0c             	sub    esp,0xc
c000f2a4:	68 a6 4a 02 c0       	push   0xc0024aa6
c000f2a9:	e8 65 dd ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f2ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2b1:	e8 38 fb ff ff       	call   c000edee <displayDebugInfo(regs*)>

c000f2b6 <pgFault(regs*, void*)>:
c000f2b6:	53                   	push   ebx
c000f2b7:	83 ec 10             	sub    esp,0x10
c000f2ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f2be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f2c1:	68 c1 4a 02 c0       	push   0xc0024ac1
c000f2c6:	e8 48 dd ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f2cb:	0f 20 d0             	mov    eax,cr2
c000f2ce:	5a                   	pop    edx
c000f2cf:	59                   	pop    ecx
c000f2d0:	50                   	push   eax
c000f2d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f2d9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f2df:	e8 aa d8 ff ff       	call   c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)>
c000f2e4:	83 c4 10             	add    esp,0x10
c000f2e7:	84 c0                	test   al,al
c000f2e9:	74 05                	je     c000f2f0 <pgFault(regs*, void*)+0x3a>
c000f2eb:	83 c4 08             	add    esp,0x8
c000f2ee:	5b                   	pop    ebx
c000f2ef:	c3                   	ret    
c000f2f0:	83 ec 0c             	sub    esp,0xc
c000f2f3:	68 d6 4a 02 c0       	push   0xc0024ad6
c000f2f8:	e8 16 dd ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f2fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f300:	e8 e9 fa ff ff       	call   c000edee <displayDebugInfo(regs*)>

c000f305 <otherISRHandler(regs*, void*)>:
c000f305:	53                   	push   ebx
c000f306:	83 ec 0c             	sub    esp,0xc
c000f309:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f30d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f310:	50                   	push   eax
c000f311:	50                   	push   eax
c000f312:	68 e3 4a 02 c0       	push   0xc0024ae3
c000f317:	e8 f7 dc ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 ca fa ff ff       	call   c000edee <displayDebugInfo(regs*)>

c000f324 <opcodeFault(regs*, void*)>:
c000f324:	55                   	push   ebp
c000f325:	89 e5                	mov    ebp,esp
c000f327:	56                   	push   esi
c000f328:	53                   	push   ebx
c000f329:	83 ec 30             	sub    esp,0x30
c000f32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f32f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f332:	83 ec 08             	sub    esp,0x8
c000f335:	50                   	push   eax
c000f336:	68 00 4b 02 c0       	push   0xc0024b00
c000f33b:	e8 d3 dc ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f340:	83 c4 10             	add    esp,0x10
c000f343:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f348:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f34e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f354:	84 c0                	test   al,al
c000f356:	74 24                	je     c000f37c <opcodeFault(regs*, void*)+0x58>
c000f358:	83 ec 0c             	sub    esp,0xc
c000f35b:	68 10 4b 02 c0       	push   0xc0024b10
c000f360:	e8 ae dc ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f365:	83 c4 10             	add    esp,0x10
c000f368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f36b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f36e:	8d 50 19             	lea    edx,[eax+0x19]
c000f371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f374:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f377:	e9 7b 03 00 00       	jmp    c000f6f7 <opcodeFault(regs*, void*)+0x3d3>
c000f37c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f37f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f382:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f385:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f38c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f38f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f395:	8a 00                	mov    al,BYTE PTR [eax]
c000f397:	3c f0                	cmp    al,0xf0
c000f399:	75 17                	jne    c000f3b2 <opcodeFault(regs*, void*)+0x8e>
c000f39b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f39e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3a4:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3ad:	e9 d6 00 00 00       	jmp    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f3b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b7:	3c f2                	cmp    al,0xf2
c000f3b9:	74 09                	je     c000f3c4 <opcodeFault(regs*, void*)+0xa0>
c000f3bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3be:	8a 00                	mov    al,BYTE PTR [eax]
c000f3c0:	3c f3                	cmp    al,0xf3
c000f3c2:	75 1b                	jne    c000f3df <opcodeFault(regs*, void*)+0xbb>
c000f3c4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3c8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3d1:	8d 50 01             	lea    edx,[eax+0x1]
c000f3d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3da:	e9 a9 00 00 00       	jmp    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f3df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3e2:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e4:	3c 66                	cmp    al,0x66
c000f3e6:	75 1b                	jne    c000f403 <opcodeFault(regs*, void*)+0xdf>
c000f3e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3f5:	8d 50 01             	lea    edx,[eax+0x1]
c000f3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3fe:	e9 85 00 00 00       	jmp    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f406:	8a 00                	mov    al,BYTE PTR [eax]
c000f408:	3c 67                	cmp    al,0x67
c000f40a:	75 18                	jne    c000f424 <opcodeFault(regs*, void*)+0x100>
c000f40c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f410:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f416:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f419:	8d 50 01             	lea    edx,[eax+0x1]
c000f41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f41f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f422:	eb 64                	jmp    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f424:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f427:	8a 00                	mov    al,BYTE PTR [eax]
c000f429:	3c 2e                	cmp    al,0x2e
c000f42b:	74 09                	je     c000f436 <opcodeFault(regs*, void*)+0x112>
c000f42d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f430:	8a 00                	mov    al,BYTE PTR [eax]
c000f432:	3c 3e                	cmp    al,0x3e
c000f434:	75 18                	jne    c000f44e <opcodeFault(regs*, void*)+0x12a>
c000f436:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f43a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f440:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f443:	8d 50 01             	lea    edx,[eax+0x1]
c000f446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f449:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f44c:	eb 3a                	jmp    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f44e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f451:	8a 00                	mov    al,BYTE PTR [eax]
c000f453:	3c 36                	cmp    al,0x36
c000f455:	74 1b                	je     c000f472 <opcodeFault(regs*, void*)+0x14e>
c000f457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f45a:	8a 00                	mov    al,BYTE PTR [eax]
c000f45c:	3c 26                	cmp    al,0x26
c000f45e:	74 12                	je     c000f472 <opcodeFault(regs*, void*)+0x14e>
c000f460:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f463:	8a 00                	mov    al,BYTE PTR [eax]
c000f465:	3c 64                	cmp    al,0x64
c000f467:	74 09                	je     c000f472 <opcodeFault(regs*, void*)+0x14e>
c000f469:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f46c:	8a 00                	mov    al,BYTE PTR [eax]
c000f46e:	3c 65                	cmp    al,0x65
c000f470:	75 16                	jne    c000f488 <opcodeFault(regs*, void*)+0x164>
c000f472:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f476:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f47c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f47f:	8d 50 01             	lea    edx,[eax+0x1]
c000f482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f485:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f48b:	8a 00                	mov    al,BYTE PTR [eax]
c000f48d:	3c 0f                	cmp    al,0xf
c000f48f:	0f 85 8d 01 00 00    	jne    c000f622 <opcodeFault(regs*, void*)+0x2fe>
c000f495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f498:	40                   	inc    eax
c000f499:	8a 00                	mov    al,BYTE PTR [eax]
c000f49b:	3c c7                	cmp    al,0xc7
c000f49d:	0f 85 7f 01 00 00    	jne    c000f622 <opcodeFault(regs*, void*)+0x2fe>
c000f4a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4ac:	8d 50 01             	lea    edx,[eax+0x1]
c000f4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f4b5:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f4b8:	50                   	push   eax
c000f4b9:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f4bc:	50                   	push   eax
c000f4bd:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f4c0:	50                   	push   eax
c000f4c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f4c4:	e8 c1 4f 00 00       	call   c001448a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f4cf:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f4d2:	83 f0 01             	xor    eax,0x1
c000f4d5:	84 c0                	test   al,al
c000f4d7:	0f 84 45 01 00 00    	je     c000f622 <opcodeFault(regs*, void*)+0x2fe>
c000f4dd:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f4e0:	3c 01                	cmp    al,0x1
c000f4e2:	0f 85 3a 01 00 00    	jne    c000f622 <opcodeFault(regs*, void*)+0x2fe>
c000f4e8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f4eb:	83 f0 01             	xor    eax,0x1
c000f4ee:	84 c0                	test   al,al
c000f4f0:	0f 84 2c 01 00 00    	je     c000f622 <opcodeFault(regs*, void*)+0x2fe>
c000f4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f4fc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4ff:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f506:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f509:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f50c:	89 c2                	mov    edx,eax
c000f50e:	b8 00 00 00 00       	mov    eax,0x0
c000f513:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f516:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f51f:	ba 00 00 00 00       	mov    edx,0x0
c000f524:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f527:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f52d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f530:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f533:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f53a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f53d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f540:	89 c2                	mov    edx,eax
c000f542:	b8 00 00 00 00       	mov    eax,0x0
c000f547:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f54a:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f550:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f553:	ba 00 00 00 00       	mov    edx,0x0
c000f558:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f55b:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f55e:	fa                   	cli    
c000f55f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f564:	40                   	inc    eax
c000f565:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000f56a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f56d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f570:	8b 00                	mov    eax,DWORD PTR [eax]
c000f572:	89 c1                	mov    ecx,eax
c000f574:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f577:	89 cb                	mov    ebx,ecx
c000f579:	89 d0                	mov    eax,edx
c000f57b:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f57e:	89 c6                	mov    esi,eax
c000f580:	89 f0                	mov    eax,esi
c000f582:	09 d8                	or     eax,ebx
c000f584:	85 c0                	test   eax,eax
c000f586:	75 21                	jne    c000f5a9 <opcodeFault(regs*, void*)+0x285>
c000f588:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f58b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f58e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f591:	89 01                	mov    DWORD PTR [ecx],eax
c000f593:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f599:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f59c:	83 c8 40             	or     eax,0x40
c000f59f:	89 c2                	mov    edx,eax
c000f5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5a4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f5a7:	eb 3e                	jmp    c000f5e7 <opcodeFault(regs*, void*)+0x2c3>
c000f5a9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f5ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f5af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f5b4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f5b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5bd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f5c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f5c3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f5c6:	89 d0                	mov    eax,edx
c000f5c8:	31 d2                	xor    edx,edx
c000f5ca:	89 c3                	mov    ebx,eax
c000f5cc:	89 d6                	mov    esi,edx
c000f5ce:	89 da                	mov    edx,ebx
c000f5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f5dc:	83 e0 bf             	and    eax,0xffffffbf
c000f5df:	89 c2                	mov    edx,eax
c000f5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f5e7:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f5ec:	48                   	dec    eax
c000f5ed:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000f5f2:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f5f7:	85 c0                	test   eax,eax
c000f5f9:	75 01                	jne    c000f5fc <opcodeFault(regs*, void*)+0x2d8>
c000f5fb:	fb                   	sti    
c000f5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f602:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f605:	01 c2                	add    edx,eax
c000f607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f60a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f60d:	83 ec 0c             	sub    esp,0xc
c000f610:	68 33 4b 02 c0       	push   0xc0024b33
c000f615:	e8 f9 d9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	e9 d5 00 00 00       	jmp    c000f6f7 <opcodeFault(regs*, void*)+0x3d3>
c000f622:	83 ec 0c             	sub    esp,0xc
c000f625:	68 46 4b 02 c0       	push   0xc0024b46
c000f62a:	e8 e4 d9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f62f:	83 c4 10             	add    esp,0x10
c000f632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f635:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f63b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f63e:	c1 e0 04             	shl    eax,0x4
c000f641:	01 d0                	add    eax,edx
c000f643:	83 c0 03             	add    eax,0x3
c000f646:	8a 00                	mov    al,BYTE PTR [eax]
c000f648:	0f b6 d8             	movzx  ebx,al
c000f64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f64e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f654:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f657:	c1 e0 04             	shl    eax,0x4
c000f65a:	01 d0                	add    eax,edx
c000f65c:	83 c0 02             	add    eax,0x2
c000f65f:	8a 00                	mov    al,BYTE PTR [eax]
c000f661:	0f b6 c8             	movzx  ecx,al
c000f664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f667:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f66d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f670:	c1 e0 04             	shl    eax,0x4
c000f673:	01 d0                	add    eax,edx
c000f675:	40                   	inc    eax
c000f676:	8a 00                	mov    al,BYTE PTR [eax]
c000f678:	0f b6 d0             	movzx  edx,al
c000f67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f67e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f684:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f687:	c1 e0 04             	shl    eax,0x4
c000f68a:	01 f0                	add    eax,esi
c000f68c:	8a 00                	mov    al,BYTE PTR [eax]
c000f68e:	0f b6 c0             	movzx  eax,al
c000f691:	83 ec 0c             	sub    esp,0xc
c000f694:	53                   	push   ebx
c000f695:	51                   	push   ecx
c000f696:	52                   	push   edx
c000f697:	50                   	push   eax
c000f698:	68 58 4b 02 c0       	push   0xc0024b58
c000f69d:	e8 71 d9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f6a2:	83 c4 20             	add    esp,0x20
c000f6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6ab:	83 c0 03             	add    eax,0x3
c000f6ae:	8a 00                	mov    al,BYTE PTR [eax]
c000f6b0:	0f b6 d8             	movzx  ebx,al
c000f6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6b9:	83 c0 02             	add    eax,0x2
c000f6bc:	8a 00                	mov    al,BYTE PTR [eax]
c000f6be:	0f b6 c8             	movzx  ecx,al
c000f6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6c7:	40                   	inc    eax
c000f6c8:	8a 00                	mov    al,BYTE PTR [eax]
c000f6ca:	0f b6 d0             	movzx  edx,al
c000f6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6d3:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d5:	0f b6 c0             	movzx  eax,al
c000f6d8:	83 ec 0c             	sub    esp,0xc
c000f6db:	53                   	push   ebx
c000f6dc:	51                   	push   ecx
c000f6dd:	52                   	push   edx
c000f6de:	50                   	push   eax
c000f6df:	68 80 4b 02 c0       	push   0xc0024b80
c000f6e4:	e8 2a d9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c000f6e9:	83 c4 20             	add    esp,0x20
c000f6ec:	83 ec 0c             	sub    esp,0xc
c000f6ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f6f2:	e8 f7 f6 ff ff       	call   c000edee <displayDebugInfo(regs*)>
c000f6f7:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f6fa:	5b                   	pop    ebx
c000f6fb:	5e                   	pop    esi
c000f6fc:	5d                   	pop    ebp
c000f6fd:	c3                   	ret    

c000f6fe <displayProgramFault(char const*)>:
c000f6fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f703:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f706:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f70c:	85 c0                	test   eax,eax
c000f70e:	74 15                	je     c000f725 <displayProgramFault(char const*)+0x27>
c000f710:	83 ec 0c             	sub    esp,0xc
c000f713:	6a 04                	push   0x4
c000f715:	6a 0f                	push   0xf
c000f717:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f71b:	50                   	push   eax
c000f71c:	e8 d3 b8 ff ff       	call   c000aff4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f721:	83 c4 1c             	add    esp,0x1c
c000f724:	c3                   	ret    
c000f725:	c3                   	ret    

c000f726 <setupInterruptController()>:
c000f726:	55                   	push   ebp
c000f727:	89 e5                	mov    ebp,esp
c000f729:	53                   	push   ebx
c000f72a:	83 ec 24             	sub    esp,0x24
c000f72d:	b8 00 00 00 00       	mov    eax,0x0
c000f732:	85 c0                	test   eax,eax
c000f734:	0f 95 c0             	setne  al
c000f737:	84 c0                	test   al,al
c000f739:	74 5b                	je     c000f796 <setupInterruptController()+0x70>
c000f73b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f748:	e8 ba a5 ff ff       	call   c0009d07 <malloc>
c000f74d:	83 c4 10             	add    esp,0x10
c000f750:	89 c3                	mov    ebx,eax
c000f752:	83 ec 0c             	sub    esp,0xc
c000f755:	53                   	push   ebx
c000f756:	e8 7d 1c 01 00       	call   c00213d8 <APIC::APIC()>
c000f75b:	83 c4 10             	add    esp,0x10
c000f75e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f761:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f764:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f767:	8b 00                	mov    eax,DWORD PTR [eax]
c000f769:	83 c0 08             	add    eax,0x8
c000f76c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f76e:	6a 00                	push   0x0
c000f770:	6a 00                	push   0x0
c000f772:	6a 00                	push   0x0
c000f774:	52                   	push   edx
c000f775:	ff d0                	call   eax
c000f777:	83 c4 10             	add    esp,0x10
c000f77a:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f77f:	83 ec 08             	sub    esp,0x8
c000f782:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f785:	50                   	push   eax
c000f786:	e8 3b ed ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f791:	e9 5e 03 00 00       	jmp    c000faf4 <setupInterruptController()+0x3ce>
c000f796:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c000f79b:	84 c0                	test   al,al
c000f79d:	75 14                	jne    c000f7b3 <setupInterruptController()+0x8d>
c000f79f:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f7a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f7aa:	83 e2 fe             	and    edx,0xfffffffe
c000f7ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f7b3:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f7b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f7be:	83 e0 01             	and    eax,0x1
c000f7c1:	84 c0                	test   al,al
c000f7c3:	0f 95 c0             	setne  al
c000f7c6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f7c9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f7d6:	e8 2c a5 ff ff       	call   c0009d07 <malloc>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	89 c3                	mov    ebx,eax
c000f7e0:	83 ec 0c             	sub    esp,0xc
c000f7e3:	53                   	push   ebx
c000f7e4:	e8 47 21 01 00       	call   c0021930 <PIC::PIC()>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f7ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f7f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f7:	83 c0 08             	add    eax,0x8
c000f7fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fc:	6a 00                	push   0x0
c000f7fe:	6a 00                	push   0x0
c000f800:	6a 00                	push   0x0
c000f802:	52                   	push   edx
c000f803:	ff d0                	call   eax
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f80c:	74 73                	je     c000f881 <setupInterruptController()+0x15b>
c000f80e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f811:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f814:	8b 00                	mov    eax,DWORD PTR [eax]
c000f816:	83 c0 0c             	add    eax,0xc
c000f819:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81b:	6a 00                	push   0x0
c000f81d:	6a 00                	push   0x0
c000f81f:	6a 00                	push   0x0
c000f821:	52                   	push   edx
c000f822:	ff d0                	call   eax
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f82b:	74 15                	je     c000f842 <setupInterruptController()+0x11c>
c000f82d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f830:	8b 00                	mov    eax,DWORD PTR [eax]
c000f832:	83 c0 04             	add    eax,0x4
c000f835:	8b 00                	mov    eax,DWORD PTR [eax]
c000f837:	83 ec 0c             	sub    esp,0xc
c000f83a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83d:	ff d0                	call   eax
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f84f:	e8 b3 a4 ff ff       	call   c0009d07 <malloc>
c000f854:	83 c4 10             	add    esp,0x10
c000f857:	89 c3                	mov    ebx,eax
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	53                   	push   ebx
c000f85d:	e8 76 1b 01 00       	call   c00213d8 <APIC::APIC()>
c000f862:	83 c4 10             	add    esp,0x10
c000f865:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f868:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f86b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f86e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f870:	83 c0 08             	add    eax,0x8
c000f873:	8b 00                	mov    eax,DWORD PTR [eax]
c000f875:	6a 00                	push   0x0
c000f877:	6a 00                	push   0x0
c000f879:	6a 00                	push   0x0
c000f87b:	52                   	push   edx
c000f87c:	ff d0                	call   eax
c000f87e:	83 c4 10             	add    esp,0x10
c000f881:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f886:	83 ec 08             	sub    esp,0x8
c000f889:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88c:	50                   	push   eax
c000f88d:	e8 34 ec ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c000f892:	83 c4 10             	add    esp,0x10
c000f895:	c7 05 e8 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027de8,0x0
c000f89f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a4:	83 c0 24             	add    eax,0x24
c000f8a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a9:	6a 00                	push   0x0
c000f8ab:	68 05 f3 00 c0       	push   0xc000f305
c000f8b0:	6a 00                	push   0x0
c000f8b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8b5:	ff d0                	call   eax
c000f8b7:	83 c4 10             	add    esp,0x10
c000f8ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bf:	83 c0 24             	add    eax,0x24
c000f8c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c4:	6a 00                	push   0x0
c000f8c6:	68 05 f3 00 c0       	push   0xc000f305
c000f8cb:	6a 01                	push   0x1
c000f8cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8d0:	ff d0                	call   eax
c000f8d2:	83 c4 10             	add    esp,0x10
c000f8d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8da:	83 c0 24             	add    eax,0x24
c000f8dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8df:	6a 00                	push   0x0
c000f8e1:	68 4b ec 00 c0       	push   0xc000ec4b
c000f8e6:	6a 02                	push   0x2
c000f8e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8eb:	ff d0                	call   eax
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f5:	83 c0 24             	add    eax,0x24
c000f8f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8fa:	6a 00                	push   0x0
c000f8fc:	68 05 f3 00 c0       	push   0xc000f305
c000f901:	6a 03                	push   0x3
c000f903:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f906:	ff d0                	call   eax
c000f908:	83 c4 10             	add    esp,0x10
c000f90b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f90e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f910:	83 c0 24             	add    eax,0x24
c000f913:	8b 00                	mov    eax,DWORD PTR [eax]
c000f915:	6a 00                	push   0x0
c000f917:	68 05 f3 00 c0       	push   0xc000f305
c000f91c:	6a 04                	push   0x4
c000f91e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f921:	ff d0                	call   eax
c000f923:	83 c4 10             	add    esp,0x10
c000f926:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f929:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92b:	83 c0 24             	add    eax,0x24
c000f92e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f930:	6a 00                	push   0x0
c000f932:	68 05 f3 00 c0       	push   0xc000f305
c000f937:	6a 05                	push   0x5
c000f939:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f93c:	ff d0                	call   eax
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f944:	8b 00                	mov    eax,DWORD PTR [eax]
c000f946:	83 c0 24             	add    eax,0x24
c000f949:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94b:	6a 00                	push   0x0
c000f94d:	68 24 f3 00 c0       	push   0xc000f324
c000f952:	6a 06                	push   0x6
c000f954:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f957:	ff d0                	call   eax
c000f959:	83 c4 10             	add    esp,0x10
c000f95c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f95f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f961:	83 c0 24             	add    eax,0x24
c000f964:	8b 00                	mov    eax,DWORD PTR [eax]
c000f966:	6a 00                	push   0x0
c000f968:	68 66 ea 00 c0       	push   0xc000ea66
c000f96d:	6a 08                	push   0x8
c000f96f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f972:	ff d0                	call   eax
c000f974:	83 c4 10             	add    esp,0x10
c000f977:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f97a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97c:	83 c0 24             	add    eax,0x24
c000f97f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f981:	6a 00                	push   0x0
c000f983:	68 05 f3 00 c0       	push   0xc000f305
c000f988:	6a 09                	push   0x9
c000f98a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f98d:	ff d0                	call   eax
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f995:	8b 00                	mov    eax,DWORD PTR [eax]
c000f997:	83 c0 24             	add    eax,0x24
c000f99a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f99c:	6a 00                	push   0x0
c000f99e:	68 05 f3 00 c0       	push   0xc000f305
c000f9a3:	6a 0a                	push   0xa
c000f9a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9a8:	ff d0                	call   eax
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b2:	83 c0 24             	add    eax,0x24
c000f9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b7:	6a 00                	push   0x0
c000f9b9:	68 05 f3 00 c0       	push   0xc000f305
c000f9be:	6a 0b                	push   0xb
c000f9c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9c3:	ff d0                	call   eax
c000f9c5:	83 c4 10             	add    esp,0x10
c000f9c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9cd:	83 c0 24             	add    eax,0x24
c000f9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d2:	6a 00                	push   0x0
c000f9d4:	68 05 f3 00 c0       	push   0xc000f305
c000f9d9:	6a 0c                	push   0xc
c000f9db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9de:	ff d0                	call   eax
c000f9e0:	83 c4 10             	add    esp,0x10
c000f9e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e8:	83 c0 24             	add    eax,0x24
c000f9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ed:	6a 00                	push   0x0
c000f9ef:	68 7d f2 00 c0       	push   0xc000f27d
c000f9f4:	6a 0d                	push   0xd
c000f9f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9f9:	ff d0                	call   eax
c000f9fb:	83 c4 10             	add    esp,0x10
c000f9fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa03:	83 c0 24             	add    eax,0x24
c000fa06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa08:	6a 00                	push   0x0
c000fa0a:	68 b6 f2 00 c0       	push   0xc000f2b6
c000fa0f:	6a 0e                	push   0xe
c000fa11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa14:	ff d0                	call   eax
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa1e:	83 c0 24             	add    eax,0x24
c000fa21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa23:	6a 00                	push   0x0
c000fa25:	68 05 f3 00 c0       	push   0xc000f305
c000fa2a:	6a 0f                	push   0xf
c000fa2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa2f:	ff d0                	call   eax
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa37:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa39:	83 c0 24             	add    eax,0x24
c000fa3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa3e:	6a 00                	push   0x0
c000fa40:	68 05 f3 00 c0       	push   0xc000f305
c000fa45:	6a 10                	push   0x10
c000fa47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa4a:	ff d0                	call   eax
c000fa4c:	83 c4 10             	add    esp,0x10
c000fa4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa54:	83 c0 24             	add    eax,0x24
c000fa57:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa59:	6a 00                	push   0x0
c000fa5b:	68 05 f3 00 c0       	push   0xc000f305
c000fa60:	6a 11                	push   0x11
c000fa62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa65:	ff d0                	call   eax
c000fa67:	83 c4 10             	add    esp,0x10
c000fa6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa6f:	83 c0 24             	add    eax,0x24
c000fa72:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa74:	6a 00                	push   0x0
c000fa76:	68 05 f3 00 c0       	push   0xc000f305
c000fa7b:	6a 12                	push   0x12
c000fa7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa80:	ff d0                	call   eax
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8a:	83 c0 24             	add    eax,0x24
c000fa8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8f:	6a 00                	push   0x0
c000fa91:	68 05 f3 00 c0       	push   0xc000f305
c000fa96:	6a 13                	push   0x13
c000fa98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa9b:	ff d0                	call   eax
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faa3:	8b 00                	mov    eax,DWORD PTR [eax]
c000faa5:	83 c0 24             	add    eax,0x24
c000faa8:	8b 00                	mov    eax,DWORD PTR [eax]
c000faaa:	6a 00                	push   0x0
c000faac:	68 05 f3 00 c0       	push   0xc000f305
c000fab1:	6a 14                	push   0x14
c000fab3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fab6:	ff d0                	call   eax
c000fab8:	83 c4 10             	add    esp,0x10
c000fabb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fabe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac0:	83 c0 24             	add    eax,0x24
c000fac3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fac5:	6a 00                	push   0x0
c000fac7:	68 05 f3 00 c0       	push   0xc000f305
c000facc:	6a 1e                	push   0x1e
c000face:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fad1:	ff d0                	call   eax
c000fad3:	83 c4 10             	add    esp,0x10
c000fad6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fad9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadb:	83 c0 24             	add    eax,0x24
c000fade:	8b 00                	mov    eax,DWORD PTR [eax]
c000fae0:	6a 00                	push   0x0
c000fae2:	68 1b 6a 01 c0       	push   0xc0016a1b
c000fae7:	6a 60                	push   0x60
c000fae9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000faec:	ff d0                	call   eax
c000faee:	83 c4 10             	add    esp,0x10
c000faf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faf4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000faf7:	c9                   	leave  
c000faf8:	c3                   	ret    
c000faf9:	90                   	nop

c000fafa <InterruptController::convertLegacyIRQNumber(int)>:
c000fafa:	55                   	push   ebp
c000fafb:	89 e5                	mov    ebp,esp
c000fafd:	83 ec 08             	sub    esp,0x8
c000fb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb03:	83 ec 0c             	sub    esp,0xc
c000fb06:	50                   	push   eax
c000fb07:	e8 ba ec ff ff       	call   c000e7c6 <Device::getName()>
c000fb0c:	83 c4 10             	add    esp,0x10
c000fb0f:	8a 00                	mov    al,BYTE PTR [eax]
c000fb11:	3c 41                	cmp    al,0x41
c000fb13:	0f 94 c0             	sete   al
c000fb16:	84 c0                	test   al,al
c000fb18:	74 28                	je     c000fb42 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fb1a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fb1e:	7f 12                	jg     c000fb32 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fb20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb23:	05 a0 73 02 c0       	add    eax,0xc00273a0
c000fb28:	8a 00                	mov    al,BYTE PTR [eax]
c000fb2a:	0f b6 c0             	movzx  eax,al
c000fb2d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fb30:	eb 10                	jmp    c000fb42 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	68 a8 4b 02 c0       	push   0xc0024ba8
c000fb3a:	e8 32 52 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c000fb3f:	83 c4 10             	add    esp,0x10
c000fb42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb45:	c9                   	leave  
c000fb46:	c3                   	ret    
c000fb47:	90                   	nop

c000fb48 <startGUI(void*)>:
c000fb48:	55                   	push   ebp
c000fb49:	89 e5                	mov    ebp,esp
c000fb4b:	53                   	push   ebx
c000fb4c:	83 ec 04             	sub    esp,0x4
c000fb4f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fb54:	48                   	dec    eax
c000fb55:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fb5a:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fb5f:	85 c0                	test   eax,eax
c000fb61:	75 01                	jne    c000fb64 <startGUI(void*)+0x1c>
c000fb63:	fb                   	sti    
c000fb64:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fb6a:	83 ec 08             	sub    esp,0x8
c000fb6d:	6a 01                	push   0x1
c000fb6f:	68 28 4c 02 c0       	push   0xc0024c28
c000fb74:	e8 7d 7e 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	83 ec 08             	sub    esp,0x8
c000fb7f:	53                   	push   ebx
c000fb80:	50                   	push   eax
c000fb81:	e8 a1 80 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c000fb86:	83 c4 10             	add    esp,0x10
c000fb89:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fb8f:	83 ec 08             	sub    esp,0x8
c000fb92:	6a 01                	push   0x1
c000fb94:	68 42 4c 02 c0       	push   0xc0024c42
c000fb99:	e8 58 7e 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c000fb9e:	83 c4 10             	add    esp,0x10
c000fba1:	83 ec 08             	sub    esp,0x8
c000fba4:	53                   	push   ebx
c000fba5:	50                   	push   eax
c000fba6:	e8 7c 80 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	90                   	nop
c000fbaf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fbb2:	c9                   	leave  
c000fbb3:	c3                   	ret    

c000fbb4 <startGUIVESA(void*)>:
c000fbb4:	55                   	push   ebp
c000fbb5:	89 e5                	mov    ebp,esp
c000fbb7:	53                   	push   ebx
c000fbb8:	83 ec 04             	sub    esp,0x4
c000fbbb:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fbc0:	48                   	dec    eax
c000fbc1:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fbc6:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fbcb:	85 c0                	test   eax,eax
c000fbcd:	75 01                	jne    c000fbd0 <startGUIVESA(void*)+0x1c>
c000fbcf:	fb                   	sti    
c000fbd0:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fbd6:	83 ec 08             	sub    esp,0x8
c000fbd9:	6a 01                	push   0x1
c000fbdb:	68 60 4c 02 c0       	push   0xc0024c60
c000fbe0:	e8 11 7e 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	83 ec 08             	sub    esp,0x8
c000fbeb:	53                   	push   ebx
c000fbec:	50                   	push   eax
c000fbed:	e8 35 80 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fbfb:	83 ec 08             	sub    esp,0x8
c000fbfe:	6a 01                	push   0x1
c000fc00:	68 42 4c 02 c0       	push   0xc0024c42
c000fc05:	e8 ec 7d 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c000fc0a:	83 c4 10             	add    esp,0x10
c000fc0d:	83 ec 08             	sub    esp,0x8
c000fc10:	53                   	push   ebx
c000fc11:	50                   	push   eax
c000fc12:	e8 10 80 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c000fc17:	83 c4 10             	add    esp,0x10
c000fc1a:	90                   	nop
c000fc1b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fc1e:	c9                   	leave  
c000fc1f:	c3                   	ret    

c000fc20 <sendKeyToTerminal(unsigned char)>:
c000fc20:	55                   	push   ebp
c000fc21:	89 e5                	mov    ebp,esp
c000fc23:	83 ec 28             	sub    esp,0x28
c000fc26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc29:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fc2c:	a1 24 7d 02 c0       	mov    eax,ds:0xc0027d24
c000fc31:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fc35:	83 ec 08             	sub    esp,0x8
c000fc38:	52                   	push   edx
c000fc39:	50                   	push   eax
c000fc3a:	e8 5b b8 ff ff       	call   c000b49a <VgaText::receiveKey(unsigned char)>
c000fc3f:	83 c4 10             	add    esp,0x10
c000fc42:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fc46:	0f 85 8f 00 00 00    	jne    c000fcdb <sendKeyToTerminal(unsigned char)+0xbb>
c000fc4c:	fa                   	cli    
c000fc4d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fc52:	40                   	inc    eax
c000fc53:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fc58:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fc5d:	40                   	inc    eax
c000fc5e:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c000fc63:	a1 00 7e 02 c0       	mov    eax,ds:0xc0027e00
c000fc68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc6b:	c7 05 00 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e00,0x0
c000fc75:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc79:	74 1f                	je     c000fc9a <sendKeyToTerminal(unsigned char)+0x7a>
c000fc7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fc81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc84:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fc87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc90:	e8 17 8c 00 00       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c000fc95:	83 c4 10             	add    esp,0x10
c000fc98:	eb db                	jmp    c000fc75 <sendKeyToTerminal(unsigned char)+0x55>
c000fc9a:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fc9f:	48                   	dec    eax
c000fca0:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c000fca5:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fcaa:	85 c0                	test   eax,eax
c000fcac:	75 18                	jne    c000fcc6 <sendKeyToTerminal(unsigned char)+0xa6>
c000fcae:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c000fcb3:	85 c0                	test   eax,eax
c000fcb5:	74 0f                	je     c000fcc6 <sendKeyToTerminal(unsigned char)+0xa6>
c000fcb7:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c000fcc1:	e8 2a 87 00 00       	call   c00183f0 <schedule()>
c000fcc6:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fccb:	48                   	dec    eax
c000fccc:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fcd1:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fcd6:	85 c0                	test   eax,eax
c000fcd8:	75 01                	jne    c000fcdb <sendKeyToTerminal(unsigned char)+0xbb>
c000fcda:	fb                   	sti    
c000fcdb:	90                   	nop
c000fcdc:	c9                   	leave  
c000fcdd:	c3                   	ret    

c000fcde <sendKeyboardToken(KeyboardToken)>:
c000fcde:	55                   	push   ebp
c000fcdf:	89 e5                	mov    ebp,esp
c000fce1:	83 ec 18             	sub    esp,0x18
c000fce4:	e8 61 53 00 00       	call   c001504a <Krnl::userIOReceived()>
c000fce9:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fcec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcef:	0f b7 c0             	movzx  eax,ax
c000fcf2:	83 f2 01             	xor    edx,0x1
c000fcf5:	88 90 20 7e 02 c0    	mov    BYTE PTR [eax-0x3ffd81e0],dl
c000fcfb:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000fd00:	85 c0                	test   eax,eax
c000fd02:	74 24                	je     c000fd28 <sendKeyboardToken(KeyboardToken)+0x4a>
c000fd04:	8b 0d 08 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e08
c000fd0a:	83 ec 04             	sub    esp,0x4
c000fd0d:	68 20 7e 02 c0       	push   0xc0027e20
c000fd12:	83 ec 08             	sub    esp,0x8
c000fd15:	89 e2                	mov    edx,esp
c000fd17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd1a:	89 02                	mov    DWORD PTR [edx],eax
c000fd1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd1f:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd23:	ff d1                	call   ecx
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fd2c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fd2f:	a0 28 82 02 c0       	mov    al,ds:0xc0028228
c000fd34:	38 c2                	cmp    dl,al
c000fd36:	74 1c                	je     c000fd54 <sendKeyboardToken(KeyboardToken)+0x76>
c000fd38:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fd3b:	a2 28 82 02 c0       	mov    ds:0xc0028228,al
c000fd40:	a0 28 82 02 c0       	mov    al,ds:0xc0028228
c000fd45:	0f b6 c0             	movzx  eax,al
c000fd48:	83 ec 0c             	sub    esp,0xc
c000fd4b:	50                   	push   eax
c000fd4c:	e8 95 ad ff ff       	call   c000aae6 <setTerminalScrollLock(bool)>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fd57:	84 c0                	test   al,al
c000fd59:	0f 84 ae 00 00 00    	je     c000fe0d <sendKeyboardToken(KeyboardToken)+0x12f>
c000fd5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd62:	66 3d 10 03          	cmp    ax,0x310
c000fd66:	75 06                	jne    c000fd6e <sendKeyboardToken(KeyboardToken)+0x90>
c000fd68:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fd6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd71:	66 3d 11 03          	cmp    ax,0x311
c000fd75:	75 06                	jne    c000fd7d <sendKeyboardToken(KeyboardToken)+0x9f>
c000fd77:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fd7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd80:	66 3d 12 03          	cmp    ax,0x312
c000fd84:	75 06                	jne    c000fd8c <sendKeyboardToken(KeyboardToken)+0xae>
c000fd86:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fd8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8f:	66 3d 13 03          	cmp    ax,0x313
c000fd93:	75 06                	jne    c000fd9b <sendKeyboardToken(KeyboardToken)+0xbd>
c000fd95:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fd9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9e:	66 3d 14 03          	cmp    ax,0x314
c000fda2:	75 06                	jne    c000fdaa <sendKeyboardToken(KeyboardToken)+0xcc>
c000fda4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fdaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdad:	66 3d 15 03          	cmp    ax,0x315
c000fdb1:	75 06                	jne    c000fdb9 <sendKeyboardToken(KeyboardToken)+0xdb>
c000fdb3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fdb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdbc:	66 3d 16 03          	cmp    ax,0x316
c000fdc0:	75 06                	jne    c000fdc8 <sendKeyboardToken(KeyboardToken)+0xea>
c000fdc2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fdc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdcb:	66 3d 17 03          	cmp    ax,0x317
c000fdcf:	75 06                	jne    c000fdd7 <sendKeyboardToken(KeyboardToken)+0xf9>
c000fdd1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fdd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdda:	66 3d 18 03          	cmp    ax,0x318
c000fdde:	75 06                	jne    c000fde6 <sendKeyboardToken(KeyboardToken)+0x108>
c000fde0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde9:	66 3d 19 03          	cmp    ax,0x319
c000fded:	75 06                	jne    c000fdf5 <sendKeyboardToken(KeyboardToken)+0x117>
c000fdef:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf8:	66 3d 1a 03          	cmp    ax,0x31a
c000fdfc:	0f 85 c9 00 00 00    	jne    c000fecb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fe02:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fe08:	e9 be 00 00 00       	jmp    c000fecb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fe0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe10:	66 3d 10 03          	cmp    ax,0x310
c000fe14:	75 0a                	jne    c000fe20 <sendKeyboardToken(KeyboardToken)+0x142>
c000fe16:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fe1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe23:	66 3d 11 03          	cmp    ax,0x311
c000fe27:	75 0a                	jne    c000fe33 <sendKeyboardToken(KeyboardToken)+0x155>
c000fe29:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fe2f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe36:	66 3d 12 03          	cmp    ax,0x312
c000fe3a:	75 0a                	jne    c000fe46 <sendKeyboardToken(KeyboardToken)+0x168>
c000fe3c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fe42:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe49:	66 3d 13 03          	cmp    ax,0x313
c000fe4d:	75 0a                	jne    c000fe59 <sendKeyboardToken(KeyboardToken)+0x17b>
c000fe4f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fe55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe5c:	66 3d 14 03          	cmp    ax,0x314
c000fe60:	75 0a                	jne    c000fe6c <sendKeyboardToken(KeyboardToken)+0x18e>
c000fe62:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fe68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe6f:	66 3d 15 03          	cmp    ax,0x315
c000fe73:	75 0a                	jne    c000fe7f <sendKeyboardToken(KeyboardToken)+0x1a1>
c000fe75:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fe7b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe82:	66 3d 16 03          	cmp    ax,0x316
c000fe86:	75 0a                	jne    c000fe92 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000fe88:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fe8e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe95:	66 3d 17 03          	cmp    ax,0x317
c000fe99:	75 0a                	jne    c000fea5 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000fe9b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fea1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea8:	66 3d 18 03          	cmp    ax,0x318
c000feac:	75 0a                	jne    c000feb8 <sendKeyboardToken(KeyboardToken)+0x1da>
c000feae:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000feb4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000feb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000febb:	66 3d 19 03          	cmp    ax,0x319
c000febf:	75 0a                	jne    c000fecb <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fec1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fec7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fece:	66 3d 00 02          	cmp    ax,0x200
c000fed2:	75 2c                	jne    c000ff00 <sendKeyboardToken(KeyboardToken)+0x222>
c000fed4:	a0 20 82 02 c0       	mov    al,ds:0xc0028220
c000fed9:	83 f0 01             	xor    eax,0x1
c000fedc:	84 c0                	test   al,al
c000fede:	74 20                	je     c000ff00 <sendKeyboardToken(KeyboardToken)+0x222>
c000fee0:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000fee5:	6a 01                	push   0x1
c000fee7:	6a 00                	push   0x0
c000fee9:	68 48 fb 00 c0       	push   0xc000fb48
c000feee:	50                   	push   eax
c000feef:	e8 e0 82 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000fef4:	83 c4 10             	add    esp,0x10
c000fef7:	c6 05 20 82 02 c0 01 	mov    BYTE PTR ds:0xc0028220,0x1
c000fefe:	eb 33                	jmp    c000ff33 <sendKeyboardToken(KeyboardToken)+0x255>
c000ff00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff03:	66 3d 01 02          	cmp    ax,0x201
c000ff07:	75 2a                	jne    c000ff33 <sendKeyboardToken(KeyboardToken)+0x255>
c000ff09:	a0 20 82 02 c0       	mov    al,ds:0xc0028220
c000ff0e:	83 f0 01             	xor    eax,0x1
c000ff11:	84 c0                	test   al,al
c000ff13:	74 1e                	je     c000ff33 <sendKeyboardToken(KeyboardToken)+0x255>
c000ff15:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ff1a:	6a 01                	push   0x1
c000ff1c:	6a 00                	push   0x0
c000ff1e:	68 b4 fb 00 c0       	push   0xc000fbb4
c000ff23:	50                   	push   eax
c000ff24:	e8 ab 82 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	c6 05 20 82 02 c0 01 	mov    BYTE PTR ds:0xc0028220,0x1
c000ff33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff36:	66 3d 1d 03          	cmp    ax,0x31d
c000ff3a:	75 06                	jne    c000ff42 <sendKeyboardToken(KeyboardToken)+0x264>
c000ff3c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ff42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff45:	66 3d 1c 03          	cmp    ax,0x31c
c000ff49:	75 06                	jne    c000ff51 <sendKeyboardToken(KeyboardToken)+0x273>
c000ff4b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ff51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff54:	66 3d 1b 03          	cmp    ax,0x31b
c000ff58:	75 06                	jne    c000ff60 <sendKeyboardToken(KeyboardToken)+0x282>
c000ff5a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ff60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff63:	66 3d 1e 03          	cmp    ax,0x31e
c000ff67:	75 06                	jne    c000ff6f <sendKeyboardToken(KeyboardToken)+0x291>
c000ff69:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ff6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff72:	66 3d 1f 03          	cmp    ax,0x31f
c000ff76:	75 06                	jne    c000ff7e <sendKeyboardToken(KeyboardToken)+0x2a0>
c000ff78:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ff7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff81:	66 3d 1a 03          	cmp    ax,0x31a
c000ff85:	75 06                	jne    c000ff8d <sendKeyboardToken(KeyboardToken)+0x2af>
c000ff87:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ff8d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ff91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff94:	83 f0 01             	xor    eax,0x1
c000ff97:	84 c0                	test   al,al
c000ff99:	74 77                	je     c0010012 <sendKeyboardToken(KeyboardToken)+0x334>
c000ff9b:	a0 21 7f 02 c0       	mov    al,ds:0xc0027f21
c000ffa0:	84 c0                	test   al,al
c000ffa2:	74 41                	je     c000ffe5 <sendKeyboardToken(KeyboardToken)+0x307>
c000ffa4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffa8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ffac:	74 2b                	je     c000ffd9 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000ffae:	8b 15 24 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028224
c000ffb4:	89 d0                	mov    eax,edx
c000ffb6:	c1 e0 02             	shl    eax,0x2
c000ffb9:	01 d0                	add    eax,edx
c000ffbb:	01 c0                	add    eax,eax
c000ffbd:	a3 24 82 02 c0       	mov    ds:0xc0028224,eax
c000ffc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc5:	0f b7 c0             	movzx  eax,ax
c000ffc8:	8d 50 d0             	lea    edx,[eax-0x30]
c000ffcb:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000ffd0:	01 d0                	add    eax,edx
c000ffd2:	a3 24 82 02 c0       	mov    ds:0xc0028224,eax
c000ffd7:	eb 6d                	jmp    c0010046 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffd9:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c000ffe3:	eb 61                	jmp    c0010046 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffe5:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000ffea:	85 c0                	test   eax,eax
c000ffec:	74 18                	je     c0010006 <sendKeyboardToken(KeyboardToken)+0x328>
c000ffee:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000fff3:	0f b6 c0             	movzx  eax,al
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	50                   	push   eax
c000fffa:	e8 21 fc ff ff       	call   c000fc20 <sendKeyToTerminal(unsigned char)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010006:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c0010010:	eb 34                	jmp    c0010046 <sendKeyboardToken(KeyboardToken)+0x368>
c0010012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010015:	66 3d 01 01          	cmp    ax,0x101
c0010019:	75 2b                	jne    c0010046 <sendKeyboardToken(KeyboardToken)+0x368>
c001001b:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c0010020:	85 c0                	test   eax,eax
c0010022:	74 18                	je     c001003c <sendKeyboardToken(KeyboardToken)+0x35e>
c0010024:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c0010029:	0f b6 c0             	movzx  eax,al
c001002c:	83 ec 0c             	sub    esp,0xc
c001002f:	50                   	push   eax
c0010030:	e8 eb fb ff ff       	call   c000fc20 <sendKeyToTerminal(unsigned char)>
c0010035:	83 c4 10             	add    esp,0x10
c0010038:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001003c:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c0010046:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010049:	83 f0 01             	xor    eax,0x1
c001004c:	84 c0                	test   al,al
c001004e:	74 4c                	je     c001009c <sendKeyboardToken(KeyboardToken)+0x3be>
c0010050:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010053:	83 f0 01             	xor    eax,0x1
c0010056:	84 c0                	test   al,al
c0010058:	74 42                	je     c001009c <sendKeyboardToken(KeyboardToken)+0x3be>
c001005a:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c001005f:	83 f0 01             	xor    eax,0x1
c0010062:	84 c0                	test   al,al
c0010064:	74 36                	je     c001009c <sendKeyboardToken(KeyboardToken)+0x3be>
c0010066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010069:	66 83 f8 1f          	cmp    ax,0x1f
c001006d:	76 09                	jbe    c0010078 <sendKeyboardToken(KeyboardToken)+0x39a>
c001006f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010072:	66 83 f8 7e          	cmp    ax,0x7e
c0010076:	76 12                	jbe    c001008a <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001007b:	66 83 f8 0a          	cmp    ax,0xa
c001007f:	74 09                	je     c001008a <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010084:	66 83 f8 08          	cmp    ax,0x8
c0010088:	75 12                	jne    c001009c <sendKeyboardToken(KeyboardToken)+0x3be>
c001008a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001008d:	0f b6 c0             	movzx  eax,al
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	50                   	push   eax
c0010094:	e8 87 fb ff ff       	call   c000fc20 <sendKeyToTerminal(unsigned char)>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001009f:	83 f0 01             	xor    eax,0x1
c00100a2:	84 c0                	test   al,al
c00100a4:	74 4f                	je     c00100f5 <sendKeyboardToken(KeyboardToken)+0x417>
c00100a6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00100a9:	83 f0 01             	xor    eax,0x1
c00100ac:	84 c0                	test   al,al
c00100ae:	74 45                	je     c00100f5 <sendKeyboardToken(KeyboardToken)+0x417>
c00100b0:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c00100b5:	84 c0                	test   al,al
c00100b7:	74 3c                	je     c00100f5 <sendKeyboardToken(KeyboardToken)+0x417>
c00100b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100bc:	66 83 f8 3f          	cmp    ax,0x3f
c00100c0:	76 33                	jbe    c00100f5 <sendKeyboardToken(KeyboardToken)+0x417>
c00100c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c5:	66 83 f8 7f          	cmp    ax,0x7f
c00100c9:	77 2a                	ja     c00100f5 <sendKeyboardToken(KeyboardToken)+0x417>
c00100cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100ce:	88 c2                	mov    dl,al
c00100d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d3:	66 83 f8 5f          	cmp    ax,0x5f
c00100d7:	76 04                	jbe    c00100dd <sendKeyboardToken(KeyboardToken)+0x3ff>
c00100d9:	b0 20                	mov    al,0x20
c00100db:	eb 02                	jmp    c00100df <sendKeyboardToken(KeyboardToken)+0x401>
c00100dd:	b0 00                	mov    al,0x0
c00100df:	29 c2                	sub    edx,eax
c00100e1:	88 d0                	mov    al,dl
c00100e3:	83 e8 40             	sub    eax,0x40
c00100e6:	0f b6 c0             	movzx  eax,al
c00100e9:	83 ec 0c             	sub    esp,0xc
c00100ec:	50                   	push   eax
c00100ed:	e8 2e fb ff ff       	call   c000fc20 <sendKeyToTerminal(unsigned char)>
c00100f2:	83 c4 10             	add    esp,0x10
c00100f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100f8:	66 3d 00 03          	cmp    ax,0x300
c00100fc:	75 0f                	jne    c001010d <sendKeyboardToken(KeyboardToken)+0x42f>
c00100fe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010101:	83 f0 01             	xor    eax,0x1
c0010104:	84 c0                	test   al,al
c0010106:	74 05                	je     c001010d <sendKeyboardToken(KeyboardToken)+0x42f>
c0010108:	e8 4a ad ff ff       	call   c000ae57 <doTerminalCycle()>
c001010d:	90                   	nop
c001010e:	c9                   	leave  
c001010f:	c3                   	ret    

c0010110 <clearInternalKeybuffer(VgaText*)>:
c0010110:	55                   	push   ebp
c0010111:	89 e5                	mov    ebp,esp
c0010113:	83 ec 08             	sub    esp,0x8
c0010116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010119:	05 32 01 00 00       	add    eax,0x132
c001011e:	83 ec 0c             	sub    esp,0xc
c0010121:	50                   	push   eax
c0010122:	e8 71 05 ff ff       	call   c0000698 <strlen>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001012d:	81 c2 32 01 00 00    	add    edx,0x132
c0010133:	83 ec 04             	sub    esp,0x4
c0010136:	50                   	push   eax
c0010137:	6a 00                	push   0x0
c0010139:	52                   	push   edx
c001013a:	e8 3d 05 ff ff       	call   c000067c <memset>
c001013f:	83 c4 10             	add    esp,0x10
c0010142:	90                   	nop
c0010143:	c9                   	leave  
c0010144:	c3                   	ret    

c0010145 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010145:	55                   	push   ebp
c0010146:	89 e5                	mov    ebp,esp
c0010148:	83 ec 18             	sub    esp,0x18
c001014b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010150:	85 c0                	test   eax,eax
c0010152:	74 2a                	je     c001017e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010154:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001015a:	8b 0d 08 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e08
c0010160:	83 ec 04             	sub    esp,0x4
c0010163:	68 20 7e 02 c0       	push   0xc0027e20
c0010168:	83 ec 08             	sub    esp,0x8
c001016b:	89 e2                	mov    edx,esp
c001016d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010170:	89 02                	mov    DWORD PTR [edx],eax
c0010172:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010175:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010179:	ff d1                	call   ecx
c001017b:	83 c4 10             	add    esp,0x10
c001017e:	fb                   	sti    
c001017f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010186:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001018a:	0f 84 a1 00 00 00    	je     c0010231 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010193:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010199:	84 c0                	test   al,al
c001019b:	75 28                	jne    c00101c5 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001019d:	fa                   	cli    
c001019e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00101a3:	40                   	inc    eax
c00101a4:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00101a9:	e8 42 82 00 00       	call   c00183f0 <schedule()>
c00101ae:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00101b3:	48                   	dec    eax
c00101b4:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00101b9:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00101be:	85 c0                	test   eax,eax
c00101c0:	75 ce                	jne    c0010190 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00101c2:	fb                   	sti    
c00101c3:	eb cb                	jmp    c0010190 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00101c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00101c8:	8d 50 01             	lea    edx,[eax+0x1]
c00101cb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00101ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101d1:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c00101d7:	88 10                	mov    BYTE PTR [eax],dl
c00101d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101dc:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00101e2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00101e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e8:	05 32 01 00 00       	add    eax,0x132
c00101ed:	83 ec 0c             	sub    esp,0xc
c00101f0:	50                   	push   eax
c00101f1:	e8 a2 04 ff ff       	call   c0000698 <strlen>
c00101f6:	83 c4 10             	add    esp,0x10
c00101f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101fc:	81 c2 32 01 00 00    	add    edx,0x132
c0010202:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010205:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010208:	81 c2 32 01 00 00    	add    edx,0x132
c001020e:	83 ec 04             	sub    esp,0x4
c0010211:	50                   	push   eax
c0010212:	51                   	push   ecx
c0010213:	52                   	push   edx
c0010214:	e8 9b 03 ff ff       	call   c00005b4 <memmove>
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001021f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010222:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010226:	0f 85 5a ff ff ff    	jne    c0010186 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001022c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001022f:	eb 03                	jmp    c0010234 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010234:	c9                   	leave  
c0010235:	c3                   	ret    

c0010236 <Keyboard::Keyboard(char const*)>:
c0010236:	83 ec 0c             	sub    esp,0xc
c0010239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001023d:	83 ec 08             	sub    esp,0x8
c0010240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010244:	50                   	push   eax
c0010245:	e8 80 e4 ff ff       	call   c000e6ca <Device::Device(char const*)>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	ba 84 4c 02 c0       	mov    edx,0xc0024c84
c0010252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010256:	89 10                	mov    DWORD PTR [eax],edx
c0010258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010266:	c6 05 04 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027e04,0x1
c001026d:	90                   	nop
c001026e:	83 c4 0c             	add    esp,0xc
c0010271:	c3                   	ret    

c0010272 <Keyboard::~Keyboard()>:
c0010272:	83 ec 0c             	sub    esp,0xc
c0010275:	ba 84 4c 02 c0       	mov    edx,0xc0024c84
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	89 10                	mov    DWORD PTR [eax],edx
c0010280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	50                   	push   eax
c0010288:	e8 07 e1 ff ff       	call   c000e394 <Device::~Device()>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <Keyboard::~Keyboard()>:
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	83 ec 0c             	sub    esp,0xc
c001029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a0:	e8 cd ff ff ff       	call   c0010272 <Keyboard::~Keyboard()>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	83 ec 08             	sub    esp,0x8
c00102ab:	68 5c 01 00 00       	push   0x15c
c00102b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b4:	e8 79 cc ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c00102b9:	83 c4 10             	add    esp,0x10
c00102bc:	83 c4 0c             	add    esp,0xc
c00102bf:	c3                   	ret    

c00102c0 <LogicalDisk::close(int, int, void*)>:
c00102c0:	83 c8 ff             	or     eax,0xffffffff
c00102c3:	c3                   	ret    

c00102c4 <LogicalDisk::~LogicalDisk()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba 54 4d 02 c0       	mov    edx,0xc0024d54
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 b5 e0 ff ff       	call   c000e394 <Device::~Device()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <LogicalDisk::~LogicalDisk()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <LogicalDisk::~LogicalDisk()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	68 74 01 00 00       	push   0x174
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 27 cc ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 c4 0c             	add    esp,0xc
c0010311:	c3                   	ret    

c0010312 <LogicalDisk::open(int, int, void*)>:
c0010312:	83 ec 18             	sub    esp,0x18
c0010315:	68 b0 4c 02 c0       	push   0xc0024cb0
c001031a:	e8 52 4a 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c001031f:	83 c8 ff             	or     eax,0xffffffff
c0010322:	83 c4 1c             	add    esp,0x1c
c0010325:	c3                   	ret    

c0010326 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010326:	53                   	push   ebx
c0010327:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001032b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001032f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010333:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0010339:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001033f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010345:	77 10                	ja     c0010357 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010347:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001034d:	89 d3                	mov    ebx,edx
c001034f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010355:	72 05                	jb     c001035c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010357:	83 c8 ff             	or     eax,0xffffffff
c001035a:	89 c2                	mov    edx,eax
c001035c:	5b                   	pop    ebx
c001035d:	c3                   	ret    

c001035e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001035e:	56                   	push   esi
c001035f:	83 c8 ff             	or     eax,0xffffffff
c0010362:	53                   	push   ebx
c0010363:	89 c2                	mov    edx,eax
c0010365:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010369:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001036d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010371:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010377:	77 27                	ja     c00103a0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010379:	89 d8                	mov    eax,ebx
c001037b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010381:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010387:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001038c:	89 c2                	mov    edx,eax
c001038e:	73 10                	jae    c00103a0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010390:	89 c8                	mov    eax,ecx
c0010392:	89 da                	mov    edx,ebx
c0010394:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001039a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00103a0:	5b                   	pop    ebx
c00103a1:	5e                   	pop    esi
c00103a2:	c3                   	ret    
c00103a3:	90                   	nop

c00103a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00103a4:	83 ec 1c             	sub    esp,0x1c
c00103a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00103ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00103be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00103c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00103c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ca:	83 ec 08             	sub    esp,0x8
c00103cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00103d1:	50                   	push   eax
c00103d2:	e8 f3 e2 ff ff       	call   c000e6ca <Device::Device(char const*)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	ba 54 4d 02 c0       	mov    edx,0xc0024d54
c00103df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103e3:	89 10                	mov    DWORD PTR [eax],edx
c00103e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103e9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00103f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103f4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00103fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ff:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010409:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001040d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010411:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010415:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001041b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010421:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010425:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010428:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001042c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010432:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001043c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010440:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001044a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010454:	90                   	nop
c0010455:	83 c4 1c             	add    esp,0x1c
c0010458:	c3                   	ret    
c0010459:	90                   	nop

c001045a <LogicalDisk::assignDriveLetter()>:
c001045a:	55                   	push   ebp
c001045b:	57                   	push   edi
c001045c:	56                   	push   esi
c001045d:	53                   	push   ebx
c001045e:	83 ec 14             	sub    esp,0x14
c0010461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010465:	8b 3d 40 82 02 c0    	mov    edi,DWORD PTR ds:0xc0028240
c001046b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010471:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010475:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001047b:	8b 3d 44 82 02 c0    	mov    edi,DWORD PTR ds:0xc0028244
c0010481:	3c 01                	cmp    al,0x1
c0010483:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010487:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001048b:	19 c0                	sbb    eax,eax
c001048d:	83 e0 02             	and    eax,0x2
c0010490:	83 c0 41             	add    eax,0x41
c0010493:	0f be e8             	movsx  ebp,al
c0010496:	3c 43                	cmp    al,0x43
c0010498:	75 10                	jne    c00104aa <LogicalDisk::assignDriveLetter()+0x50>
c001049a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00104a1:	75 5d                	jne    c0010500 <LogicalDisk::assignDriveLetter()+0xa6>
c00104a3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00104a8:	75 56                	jne    c0010500 <LogicalDisk::assignDriveLetter()+0xa6>
c00104aa:	8d 75 bf             	lea    esi,[ebp-0x41]
c00104ad:	ba 01 00 00 00       	mov    edx,0x1
c00104b2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00104b6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00104ba:	d3 e2                	shl    edx,cl
c00104bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104c0:	89 d7                	mov    edi,edx
c00104c2:	89 d6                	mov    esi,edx
c00104c4:	c1 ff 1f             	sar    edi,0x1f
c00104c7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00104cb:	21 f9                	and    ecx,edi
c00104cd:	09 d1                	or     ecx,edx
c00104cf:	75 2f                	jne    c0010500 <LogicalDisk::assignDriveLetter()+0xa6>
c00104d1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00104d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00104df:	09 f2                	or     edx,esi
c00104e1:	89 15 40 82 02 c0    	mov    DWORD PTR ds:0xc0028240,edx
c00104e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104eb:	09 fa                	or     edx,edi
c00104ed:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00104f1:	89 15 44 82 02 c0    	mov    DWORD PTR ds:0xc0028244,edx
c00104f7:	89 1c bd 60 82 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7da0],ebx
c00104fe:	eb 08                	jmp    c0010508 <LogicalDisk::assignDriveLetter()+0xae>
c0010500:	45                   	inc    ebp
c0010501:	40                   	inc    eax
c0010502:	3c 5b                	cmp    al,0x5b
c0010504:	75 90                	jne    c0010496 <LogicalDisk::assignDriveLetter()+0x3c>
c0010506:	31 c0                	xor    eax,eax
c0010508:	83 c4 14             	add    esp,0x14
c001050b:	5b                   	pop    ebx
c001050c:	5e                   	pop    esi
c001050d:	5f                   	pop    edi
c001050e:	5d                   	pop    ebp
c001050f:	c3                   	ret    

c0010510 <LogicalDisk::mount()>:
c0010510:	56                   	push   esi
c0010511:	53                   	push   ebx
c0010512:	83 ec 1c             	sub    esp,0x1c
c0010515:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010519:	8b 1d d8 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd8
c001051f:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010526:	50                   	push   eax
c0010527:	68 d4 4c 02 c0       	push   0xc0024cd4
c001052c:	e8 e2 ca ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0010531:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	85 db                	test   ebx,ebx
c0010540:	74 4e                	je     c0010590 <LogicalDisk::mount()+0x80>
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	68 f5 4c 02 c0       	push   0xc0024cf5
c001054a:	e8 c4 ca ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001054f:	83 c4 0c             	add    esp,0xc
c0010552:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010559:	8b 13                	mov    edx,DWORD PTR [ebx]
c001055b:	83 e8 41             	sub    eax,0x41
c001055e:	50                   	push   eax
c001055f:	56                   	push   esi
c0010560:	53                   	push   ebx
c0010561:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010564:	83 c4 10             	add    esp,0x10
c0010567:	84 c0                	test   al,al
c0010569:	74 20                	je     c001058b <LogicalDisk::mount()+0x7b>
c001056b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001056f:	83 ec 0c             	sub    esp,0xc
c0010572:	68 11 4d 02 c0       	push   0xc0024d11
c0010577:	e8 97 ca ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001057c:	83 c4 10             	add    esp,0x10
c001057f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010585:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010589:	eb 07                	jmp    c0010592 <LogicalDisk::mount()+0x82>
c001058b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001058e:	eb ae                	jmp    c001053e <LogicalDisk::mount()+0x2e>
c0010590:	31 c0                	xor    eax,eax
c0010592:	83 c4 14             	add    esp,0x14
c0010595:	5b                   	pop    ebx
c0010596:	5e                   	pop    esi
c0010597:	c3                   	ret    

c0010598 <LogicalDisk::unmount()>:
c0010598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001059c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00105a6:	c3                   	ret    
c00105a7:	90                   	nop

c00105a8 <LogicalDisk::eject()>:
c00105a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00105b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105b8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00105bb:	90                   	nop

c00105bc <LogicalDisk::unassignDriveLetter()>:
c00105bc:	57                   	push   edi
c00105bd:	56                   	push   esi
c00105be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105c2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00105c9:	84 c9                	test   cl,cl
c00105cb:	75 0f                	jne    c00105dc <LogicalDisk::unassignDriveLetter()+0x20>
c00105cd:	c7 44 24 0c 2a 4d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024d2a
c00105d5:	5e                   	pop    esi
c00105d6:	5f                   	pop    edi
c00105d7:	e9 95 47 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c00105dc:	83 e9 41             	sub    ecx,0x41
c00105df:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00105e6:	b8 01 00 00 00       	mov    eax,0x1
c00105eb:	c7 04 8d 60 82 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7da0],0x0
c00105f6:	d3 e0                	shl    eax,cl
c00105f8:	89 c7                	mov    edi,eax
c00105fa:	f7 d0                	not    eax
c00105fc:	c1 ff 1f             	sar    edi,0x1f
c00105ff:	21 05 40 82 02 c0    	and    DWORD PTR ds:0xc0028240,eax
c0010605:	89 fe                	mov    esi,edi
c0010607:	f7 d6                	not    esi
c0010609:	21 35 44 82 02 c0    	and    DWORD PTR ds:0xc0028244,esi
c001060f:	5e                   	pop    esi
c0010610:	5f                   	pop    edi
c0010611:	c3                   	ret    

c0010612 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010612:	57                   	push   edi
c0010613:	56                   	push   esi
c0010614:	53                   	push   ebx
c0010615:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010619:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001061d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010625:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001062b:	77 41                	ja     c001066e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001062d:	99                   	cdq    
c001062e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010634:	01 c8                	add    eax,ecx
c0010636:	11 da                	adc    edx,ebx
c0010638:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001063e:	19 d7                	sbb    edi,edx
c0010640:	72 33                	jb     c0010675 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010642:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010648:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001064e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010652:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010656:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001065c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010662:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010666:	5b                   	pop    ebx
c0010667:	5e                   	pop    esi
c0010668:	5f                   	pop    edi
c0010669:	e9 f4 0a 00 00       	jmp    c0011162 <VCache::read(unsigned long long, int, void*)>
c001066e:	b8 05 00 00 00       	mov    eax,0x5
c0010673:	eb 05                	jmp    c001067a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010675:	b8 07 00 00 00       	mov    eax,0x7
c001067a:	5b                   	pop    ebx
c001067b:	5e                   	pop    esi
c001067c:	5f                   	pop    edi
c001067d:	c3                   	ret    

c001067e <LogicalDisk::write(unsigned long long, int, void*)>:
c001067e:	57                   	push   edi
c001067f:	56                   	push   esi
c0010680:	53                   	push   ebx
c0010681:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010689:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001068d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010691:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010697:	77 41                	ja     c00106da <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010699:	99                   	cdq    
c001069a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00106a0:	01 c8                	add    eax,ecx
c00106a2:	11 da                	adc    edx,ebx
c00106a4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00106aa:	19 d7                	sbb    edi,edx
c00106ac:	72 33                	jb     c00106e1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00106ae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00106b4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00106ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00106be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00106c2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00106c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00106ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	5f                   	pop    edi
c00106d5:	e9 8e 09 00 00       	jmp    c0011068 <VCache::write(unsigned long long, int, void*)>
c00106da:	b8 05 00 00 00       	mov    eax,0x5
c00106df:	eb 05                	jmp    c00106e6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00106e1:	b8 07 00 00 00       	mov    eax,0x7
c00106e6:	5b                   	pop    ebx
c00106e7:	5e                   	pop    esi
c00106e8:	5f                   	pop    edi
c00106e9:	c3                   	ret    
c00106ea:	66 90                	xchg   ax,ax

c00106ec <Mouse::Mouse(char const*)>:
c00106ec:	83 ec 0c             	sub    esp,0xc
c00106ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f3:	83 ec 08             	sub    esp,0x8
c00106f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106fa:	50                   	push   eax
c00106fb:	e8 ca df ff ff       	call   c000e6ca <Device::Device(char const*)>
c0010700:	83 c4 10             	add    esp,0x10
c0010703:	ba 80 4d 02 c0       	mov    edx,0xc0024d80
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	89 10                	mov    DWORD PTR [eax],edx
c001070e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010712:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001071c:	90                   	nop
c001071d:	83 c4 0c             	add    esp,0xc
c0010720:	c3                   	ret    
c0010721:	90                   	nop
c0010722:	66 90                	xchg   ax,ax

c0010724 <Mouse::~Mouse()>:
c0010724:	83 ec 0c             	sub    esp,0xc
c0010727:	ba 80 4d 02 c0       	mov    edx,0xc0024d80
c001072c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010730:	89 10                	mov    DWORD PTR [eax],edx
c0010732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010736:	83 ec 0c             	sub    esp,0xc
c0010739:	50                   	push   eax
c001073a:	e8 55 dc ff ff       	call   c000e394 <Device::~Device()>
c001073f:	83 c4 10             	add    esp,0x10
c0010742:	90                   	nop
c0010743:	83 c4 0c             	add    esp,0xc
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <Mouse::~Mouse()>:
c0010748:	83 ec 0c             	sub    esp,0xc
c001074b:	83 ec 0c             	sub    esp,0xc
c001074e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010752:	e8 cd ff ff ff       	call   c0010724 <Mouse::~Mouse()>
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	83 ec 08             	sub    esp,0x8
c001075d:	68 58 01 00 00       	push   0x158
c0010762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010766:	e8 c7 c7 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	83 c4 0c             	add    esp,0xc
c0010771:	c3                   	ret    

c0010772 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010772:	55                   	push   ebp
c0010773:	57                   	push   edi
c0010774:	56                   	push   esi
c0010775:	53                   	push   ebx
c0010776:	81 ec 28 01 00 00    	sub    esp,0x128
c001077c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010783:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001078a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010791:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010798:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001079c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00107a0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00107a7:	e8 1a e0 ff ff       	call   c000e7c6 <Device::getName()>
c00107ac:	5a                   	pop    edx
c00107ad:	59                   	pop    ecx
c00107ae:	50                   	push   eax
c00107af:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00107b3:	55                   	push   ebp
c00107b4:	e8 7f ff fe ff       	call   c0000738 <strcpy>
c00107b9:	5b                   	pop    ebx
c00107ba:	58                   	pop    eax
c00107bb:	68 a4 4d 02 c0       	push   0xc0024da4
c00107c0:	55                   	push   ebp
c00107c1:	e8 b2 00 ff ff       	call   c0000878 <strcat>
c00107c6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00107cd:	e8 35 95 ff ff       	call   c0009d07 <malloc>
c00107d2:	83 c4 0c             	add    esp,0xc
c00107d5:	89 c3                	mov    ebx,eax
c00107d7:	57                   	push   edi
c00107d8:	56                   	push   esi
c00107d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00107e8:	55                   	push   ebp
c00107e9:	50                   	push   eax
c00107ea:	e8 b5 fb ff ff       	call   c00103a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00107ef:	83 c4 14             	add    esp,0x14
c00107f2:	53                   	push   ebx
c00107f3:	e8 62 fc ff ff       	call   c001045a <LogicalDisk::assignDriveLetter()>
c00107f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107fb:	e8 10 fd ff ff       	call   c0010510 <LogicalDisk::mount()>
c0010800:	58                   	pop    eax
c0010801:	5a                   	pop    edx
c0010802:	53                   	push   ebx
c0010803:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001080a:	e8 b7 dc ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c001080f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010815:	5b                   	pop    ebx
c0010816:	5e                   	pop    esi
c0010817:	5f                   	pop    edi
c0010818:	5d                   	pop    ebp
c0010819:	c3                   	ret    

c001081a <createPartitionsForDisk(PhysicalDisk*)>:
c001081a:	55                   	push   ebp
c001081b:	57                   	push   edi
c001081c:	56                   	push   esi
c001081d:	53                   	push   ebx
c001081e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010824:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001082b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010831:	3d 00 02 00 00       	cmp    eax,0x200
c0010836:	74 27                	je     c001085f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010838:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001083e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010844:	83 ec 10             	sub    esp,0x10
c0010847:	0f a4 f7 0a          	shld   edi,esi,0xa
c001084b:	99                   	cdq    
c001084c:	c1 e6 0a             	shl    esi,0xa
c001084f:	52                   	push   edx
c0010850:	89 fd                	mov    ebp,edi
c0010852:	50                   	push   eax
c0010853:	55                   	push   ebp
c0010854:	56                   	push   esi
c0010855:	e8 66 1c 01 00       	call   c00224c0 <__udivdi3>
c001085a:	e9 b1 00 00 00       	jmp    c0010910 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001085f:	83 ec 0c             	sub    esp,0xc
c0010862:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010864:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010868:	56                   	push   esi
c0010869:	6a 01                	push   0x1
c001086b:	6a 00                	push   0x0
c001086d:	6a 00                	push   0x0
c001086f:	53                   	push   ebx
c0010870:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010873:	83 c4 20             	add    esp,0x20
c0010876:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001087e:	75 0a                	jne    c001088a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010880:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010888:	74 2c                	je     c00108b6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001088a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010890:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010896:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001089c:	83 ec 10             	sub    esp,0x10
c001089f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00108a3:	89 f7                	mov    edi,esi
c00108a5:	c1 e0 0a             	shl    eax,0xa
c00108a8:	c1 ff 1f             	sar    edi,0x1f
c00108ab:	57                   	push   edi
c00108ac:	56                   	push   esi
c00108ad:	52                   	push   edx
c00108ae:	50                   	push   eax
c00108af:	e8 0c 1c 01 00       	call   c00224c0 <__udivdi3>
c00108b4:	eb 5a                	jmp    c0010910 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00108b6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00108bd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00108c4:	83 e1 7f             	and    ecx,0x7f
c00108c7:	83 e0 7f             	and    eax,0x7f
c00108ca:	01 c1                	add    ecx,eax
c00108cc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00108d3:	83 e0 7f             	and    eax,0x7f
c00108d6:	01 c1                	add    ecx,eax
c00108d8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00108df:	83 e0 7f             	and    eax,0x7f
c00108e2:	00 c1                	add    cl,al
c00108e4:	74 41                	je     c0010927 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00108e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00108ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00108f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00108ff:	89 f7                	mov    edi,esi
c0010901:	c1 e0 0a             	shl    eax,0xa
c0010904:	c1 ff 1f             	sar    edi,0x1f
c0010907:	57                   	push   edi
c0010908:	56                   	push   esi
c0010909:	52                   	push   edx
c001090a:	50                   	push   eax
c001090b:	e8 b0 1b 01 00       	call   c00224c0 <__udivdi3>
c0010910:	83 c4 14             	add    esp,0x14
c0010913:	52                   	push   edx
c0010914:	50                   	push   eax
c0010915:	6a 00                	push   0x0
c0010917:	6a 00                	push   0x0
c0010919:	53                   	push   ebx
c001091a:	e8 53 fe ff ff       	call   c0010772 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001091f:	83 c4 20             	add    esp,0x20
c0010922:	e9 79 01 00 00       	jmp    c0010aa0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010927:	89 f0                	mov    eax,esi
c0010929:	31 f6                	xor    esi,esi
c001092b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010932:	75 02                	jne    c0010936 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010934:	89 f1                	mov    ecx,esi
c0010936:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001093d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010944:	c1 e2 08             	shl    edx,0x8
c0010947:	c1 e7 10             	shl    edi,0x10
c001094a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010952:	09 fa                	or     edx,edi
c0010954:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001095c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010963:	83 c0 10             	add    eax,0x10
c0010966:	09 fa                	or     edx,edi
c0010968:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001096f:	c1 e7 18             	shl    edi,0x18
c0010972:	09 fa                	or     edx,edi
c0010974:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001097b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001097f:	c1 e7 10             	shl    edi,0x10
c0010982:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010989:	c1 e2 08             	shl    edx,0x8
c001098c:	09 fa                	or     edx,edi
c001098e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010995:	09 fa                	or     edx,edi
c0010997:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001099e:	c1 e7 18             	shl    edi,0x18
c00109a1:	09 fa                	or     edx,edi
c00109a3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00109a7:	46                   	inc    esi
c00109a8:	83 fe 04             	cmp    esi,0x4
c00109ab:	0f 85 7a ff ff ff    	jne    c001092b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00109b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b5:	83 f0 01             	xor    eax,0x1
c00109b8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00109bc:	75 57                	jne    c0010a15 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00109be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109c2:	83 f0 01             	xor    eax,0x1
c00109c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00109c9:	75 4a                	jne    c0010a15 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00109cb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00109cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00109d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00109df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00109e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00109eb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00109f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00109f5:	89 f7                	mov    edi,esi
c00109f7:	c1 e0 0a             	shl    eax,0xa
c00109fa:	c1 ff 1f             	sar    edi,0x1f
c00109fd:	57                   	push   edi
c00109fe:	56                   	push   esi
c00109ff:	52                   	push   edx
c0010a00:	50                   	push   eax
c0010a01:	e8 ba 1a 01 00       	call   c00224c0 <__udivdi3>
c0010a06:	83 c4 10             	add    esp,0x10
c0010a09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010a11:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010a15:	84 c9                	test   cl,cl
c0010a17:	74 53                	je     c0010a6c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010a19:	0f b6 c9             	movzx  ecx,cl
c0010a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010a24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a28:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010a2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a34:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010a38:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010a3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a4c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010a50:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010a54:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010a58:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010a5c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a60:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010a64:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010a68:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010a6c:	31 ed                	xor    ebp,ebp
c0010a6e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010a72:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010a76:	89 f8                	mov    eax,edi
c0010a78:	09 f0                	or     eax,esi
c0010a7a:	74 1e                	je     c0010a9a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a7c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010a80:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010a84:	89 d1                	mov    ecx,edx
c0010a86:	09 c1                	or     ecx,eax
c0010a88:	74 10                	je     c0010a9a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a8a:	83 ec 0c             	sub    esp,0xc
c0010a8d:	57                   	push   edi
c0010a8e:	56                   	push   esi
c0010a8f:	52                   	push   edx
c0010a90:	50                   	push   eax
c0010a91:	53                   	push   ebx
c0010a92:	e8 db fc ff ff       	call   c0010772 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a97:	83 c4 20             	add    esp,0x20
c0010a9a:	45                   	inc    ebp
c0010a9b:	83 fd 04             	cmp    ebp,0x4
c0010a9e:	75 ce                	jne    c0010a6e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010aa0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010aa6:	5b                   	pop    ebx
c0010aa7:	5e                   	pop    esi
c0010aa8:	5f                   	pop    edi
c0010aa9:	5d                   	pop    ebp
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <Serial::Serial(char const*)>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab3:	83 ec 08             	sub    esp,0x8
c0010ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aba:	50                   	push   eax
c0010abb:	e8 0a dc ff ff       	call   c000e6ca <Device::Device(char const*)>
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	ba b8 4d 02 c0       	mov    edx,0xc0024db8
c0010ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010acc:	89 10                	mov    DWORD PTR [eax],edx
c0010ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010adc:	90                   	nop
c0010add:	83 c4 0c             	add    esp,0xc
c0010ae0:	c3                   	ret    
c0010ae1:	90                   	nop
c0010ae2:	66 90                	xchg   ax,ax

c0010ae4 <Serial::~Serial()>:
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	ba b8 4d 02 c0       	mov    edx,0xc0024db8
c0010aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af0:	89 10                	mov    DWORD PTR [eax],edx
c0010af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af6:	83 ec 0c             	sub    esp,0xc
c0010af9:	50                   	push   eax
c0010afa:	e8 95 d8 ff ff       	call   c000e394 <Device::~Device()>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	90                   	nop
c0010b03:	83 c4 0c             	add    esp,0xc
c0010b06:	c3                   	ret    
c0010b07:	90                   	nop

c0010b08 <Serial::~Serial()>:
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	e8 cd ff ff ff       	call   c0010ae4 <Serial::~Serial()>
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	83 ec 08             	sub    esp,0x8
c0010b1d:	68 58 01 00 00       	push   0x158
c0010b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b26:	e8 07 c4 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	83 c4 0c             	add    esp,0xc
c0010b31:	c3                   	ret    
c0010b32:	66 90                	xchg   ax,ax

c0010b34 <Timer::Timer(char const*)>:
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3b:	83 ec 08             	sub    esp,0x8
c0010b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b42:	50                   	push   eax
c0010b43:	e8 82 db ff ff       	call   c000e6ca <Device::Device(char const*)>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	ba fc 4d 02 c0       	mov    edx,0xc0024dfc
c0010b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b54:	89 10                	mov    DWORD PTR [eax],edx
c0010b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010b64:	90                   	nop
c0010b65:	83 c4 0c             	add    esp,0xc
c0010b68:	c3                   	ret    
c0010b69:	90                   	nop
c0010b6a:	66 90                	xchg   ax,ax

c0010b6c <Timer::~Timer()>:
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	ba fc 4d 02 c0       	mov    edx,0xc0024dfc
c0010b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b78:	89 10                	mov    DWORD PTR [eax],edx
c0010b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7e:	83 ec 0c             	sub    esp,0xc
c0010b81:	50                   	push   eax
c0010b82:	e8 0d d8 ff ff       	call   c000e394 <Device::~Device()>
c0010b87:	83 c4 10             	add    esp,0x10
c0010b8a:	90                   	nop
c0010b8b:	83 c4 0c             	add    esp,0xc
c0010b8e:	c3                   	ret    
c0010b8f:	90                   	nop

c0010b90 <Timer::~Timer()>:
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	83 ec 0c             	sub    esp,0xc
c0010b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9a:	e8 cd ff ff ff       	call   c0010b6c <Timer::~Timer()>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	83 ec 08             	sub    esp,0x8
c0010ba5:	68 5c 01 00 00       	push   0x15c
c0010baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bae:	e8 7f c3 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	83 c4 0c             	add    esp,0xc
c0010bb9:	c3                   	ret    

c0010bba <Timer::read()>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010bc4:	c3                   	ret    

c0010bc5 <timerHandler(unsigned int)>:
c0010bc5:	56                   	push   esi
c0010bc6:	53                   	push   ebx
c0010bc7:	51                   	push   ecx
c0010bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bcc:	01 05 cc 82 02 c0    	add    DWORD PTR ds:0xc00282cc,eax
c0010bd2:	80 3d ad 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027cad,0x0
c0010bd9:	0f 84 49 01 00 00    	je     c0010d28 <timerHandler(unsigned int)+0x163>
c0010bdf:	fa                   	cli    
c0010be0:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0010bef:	68 d8 91 02 c0       	push   0xc00291d8
c0010bf4:	e8 97 1e 01 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	84 c0                	test   al,al
c0010bfe:	0f 85 a0 00 00 00    	jne    c0010ca4 <timerHandler(unsigned int)+0xdf>
c0010c04:	83 ec 0c             	sub    esp,0xc
c0010c07:	68 d8 91 02 c0       	push   0xc00291d8
c0010c0c:	e8 9b 1e 01 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c11:	83 c4 10             	add    esp,0x10
c0010c14:	89 c6                	mov    esi,eax
c0010c16:	66 90                	xchg   ax,ax
c0010c18:	83 ec 0c             	sub    esp,0xc
c0010c1b:	68 d8 91 02 c0       	push   0xc00291d8
c0010c20:	e8 87 1e 01 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c25:	c7 04 24 d8 91 02 c0 	mov    DWORD PTR [esp],0xc00291d8
c0010c2c:	89 c3                	mov    ebx,eax
c0010c2e:	e8 81 1e 01 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010c33:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c36:	83 c4 10             	add    esp,0x10
c0010c39:	3b 05 cc 82 02 c0    	cmp    eax,DWORD PTR ds:0xc00282cc
c0010c3f:	77 23                	ja     c0010c64 <timerHandler(unsigned int)+0x9f>
c0010c41:	83 ec 0c             	sub    esp,0xc
c0010c44:	53                   	push   ebx
c0010c45:	e8 62 7c 00 00       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0010c4a:	83 c4 10             	add    esp,0x10
c0010c4d:	39 de                	cmp    esi,ebx
c0010c4f:	75 27                	jne    c0010c78 <timerHandler(unsigned int)+0xb3>
c0010c51:	83 ec 0c             	sub    esp,0xc
c0010c54:	68 d8 91 02 c0       	push   0xc00291d8
c0010c59:	e8 4e 1e 01 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c5e:	89 c6                	mov    esi,eax
c0010c60:	eb 12                	jmp    c0010c74 <timerHandler(unsigned int)+0xaf>
c0010c62:	66 90                	xchg   ax,ax
c0010c64:	52                   	push   edx
c0010c65:	52                   	push   edx
c0010c66:	53                   	push   ebx
c0010c67:	68 d8 91 02 c0       	push   0xc00291d8
c0010c6c:	e8 fb 1e 01 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	90                   	nop
c0010c78:	83 ec 0c             	sub    esp,0xc
c0010c7b:	68 d8 91 02 c0       	push   0xc00291d8
c0010c80:	e8 0b 1e 01 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	84 c0                	test   al,al
c0010c8a:	75 18                	jne    c0010ca4 <timerHandler(unsigned int)+0xdf>
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	68 d8 91 02 c0       	push   0xc00291d8
c0010c94:	e8 13 1e 01 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	39 f0                	cmp    eax,esi
c0010c9e:	0f 85 74 ff ff ff    	jne    c0010c18 <timerHandler(unsigned int)+0x53>
c0010ca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ca9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010cad:	74 41                	je     c0010cf0 <timerHandler(unsigned int)+0x12b>
c0010caf:	80 3d ac 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027cac,0x0
c0010cb6:	74 38                	je     c0010cf0 <timerHandler(unsigned int)+0x12b>
c0010cb8:	fa                   	cli    
c0010cb9:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0010cbf:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0010cc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010cca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010ccd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010cd3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010cd6:	72 08                	jb     c0010ce0 <timerHandler(unsigned int)+0x11b>
c0010cd8:	e8 13 77 00 00       	call   c00183f0 <schedule()>
c0010cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce0:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010ce5:	48                   	dec    eax
c0010ce6:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010ceb:	75 03                	jne    c0010cf0 <timerHandler(unsigned int)+0x12b>
c0010ced:	fb                   	sti    
c0010cee:	66 90                	xchg   ax,ax
c0010cf0:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0010cf5:	48                   	dec    eax
c0010cf6:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0010cfb:	75 1b                	jne    c0010d18 <timerHandler(unsigned int)+0x153>
c0010cfd:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c0010d04:	74 12                	je     c0010d18 <timerHandler(unsigned int)+0x153>
c0010d06:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0010d10:	e8 db 76 00 00       	call   c00183f0 <schedule()>
c0010d15:	8d 76 00             	lea    esi,[esi+0x0]
c0010d18:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010d1d:	48                   	dec    eax
c0010d1e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010d23:	75 03                	jne    c0010d28 <timerHandler(unsigned int)+0x163>
c0010d25:	fb                   	sti    
c0010d26:	66 90                	xchg   ax,ax
c0010d28:	58                   	pop    eax
c0010d29:	5b                   	pop    ebx
c0010d2a:	5e                   	pop    esi
c0010d2b:	c3                   	ret    

c0010d2c <setupTimer(int)>:
c0010d2c:	57                   	push   edi
c0010d2d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010d32:	56                   	push   esi
c0010d33:	53                   	push   ebx
c0010d34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d47:	e8 7a da ff ff       	call   c000e7c6 <Device::getName()>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d52:	0f 85 94 00 00 00    	jne    c0010dec <setupTimer(int)+0xc0>
c0010d58:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010d5d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010d64:	0f 84 82 00 00 00    	je     c0010dec <setupTimer(int)+0xc0>
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	68 5c 01 00 00       	push   0x15c
c0010d72:	e8 90 8f ff ff       	call   c0009d07 <malloc>
c0010d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d7a:	89 c3                	mov    ebx,eax
c0010d7c:	e8 97 12 01 00       	call   c0022018 <PIT::PIT()>
c0010d81:	59                   	pop    ecx
c0010d82:	5f                   	pop    edi
c0010d83:	53                   	push   ebx
c0010d84:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0010d8a:	e8 37 d7 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c0010d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d91:	6a 00                	push   0x0
c0010d93:	6a 00                	push   0x0
c0010d95:	56                   	push   esi
c0010d96:	53                   	push   ebx
c0010d97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d9a:	83 c4 14             	add    esp,0x14
c0010d9d:	68 60 01 00 00       	push   0x160
c0010da2:	e8 60 8f ff ff       	call   c0009d07 <malloc>
c0010da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010daa:	89 c7                	mov    edi,eax
c0010dac:	e8 1b 11 01 00       	call   c0021ecc <APICTimer::APICTimer()>
c0010db1:	6a 00                	push   0x0
c0010db3:	6a 00                	push   0x0
c0010db5:	56                   	push   esi
c0010db6:	57                   	push   edi
c0010db7:	e8 10 10 01 00       	call   c0021dcc <APICTimer::open(int, int, void*)>
c0010dbc:	83 c4 20             	add    esp,0x20
c0010dbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc1:	6a 00                	push   0x0
c0010dc3:	6a 00                	push   0x0
c0010dc5:	6a 00                	push   0x0
c0010dc7:	53                   	push   ebx
c0010dc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010dcb:	58                   	pop    eax
c0010dcc:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010dd1:	5a                   	pop    edx
c0010dd2:	57                   	push   edi
c0010dd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010dd9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010ddf:	e8 e2 d6 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c0010de4:	83 c4 10             	add    esp,0x10
c0010de7:	eb 37                	jmp    c0010e20 <setupTimer(int)+0xf4>
c0010de9:	8d 76 00             	lea    esi,[esi+0x0]
c0010dec:	83 ec 0c             	sub    esp,0xc
c0010def:	68 5c 01 00 00       	push   0x15c
c0010df4:	e8 0e 8f ff ff       	call   c0009d07 <malloc>
c0010df9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dfc:	89 c3                	mov    ebx,eax
c0010dfe:	e8 15 12 01 00       	call   c0022018 <PIT::PIT()>
c0010e03:	58                   	pop    eax
c0010e04:	5a                   	pop    edx
c0010e05:	53                   	push   ebx
c0010e06:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0010e0c:	e8 b5 d6 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c0010e11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e13:	6a 00                	push   0x0
c0010e15:	6a 00                	push   0x0
c0010e17:	56                   	push   esi
c0010e18:	53                   	push   ebx
c0010e19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e1c:	83 c4 20             	add    esp,0x20
c0010e1f:	90                   	nop
c0010e20:	89 d8                	mov    eax,ebx
c0010e22:	5b                   	pop    ebx
c0010e23:	5e                   	pop    esi
c0010e24:	5f                   	pop    edi
c0010e25:	c3                   	ret    
c0010e26:	66 90                	xchg   ax,ax

c0010e28 <VCache::VCache(PhysicalDisk*)>:
c0010e28:	53                   	push   ebx
c0010e29:	83 ec 18             	sub    esp,0x18
c0010e2c:	ba 2c 4e 02 c0       	mov    edx,0xc0024e2c
c0010e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e35:	89 10                	mov    DWORD PTR [eax],edx
c0010e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e3b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e46:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e51:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010e58:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e63:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010e6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e75:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010e7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e80:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e88:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010e8f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eaa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010eb9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ec8:	e8 3a 8e ff ff       	call   c0009d07 <malloc>
c0010ecd:	83 c4 10             	add    esp,0x10
c0010ed0:	89 c3                	mov    ebx,eax
c0010ed2:	83 ec 0c             	sub    esp,0xc
c0010ed5:	53                   	push   ebx
c0010ed6:	e8 e5 72 00 00       	call   c00181c0 <Mutex::Mutex()>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010eed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010efb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eff:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f09:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f10:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010f16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010f20:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010f23:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010f2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f32:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010f38:	05 00 01 00 00       	add    eax,0x100
c0010f3d:	c1 e0 04             	shl    eax,0x4
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	50                   	push   eax
c0010f44:	e8 be 8d ff ff       	call   c0009d07 <malloc>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	89 c2                	mov    edx,eax
c0010f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f59:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f64:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010f68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f6c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010f72:	c1 e0 06             	shl    eax,0x6
c0010f75:	83 ec 0c             	sub    esp,0xc
c0010f78:	50                   	push   eax
c0010f79:	e8 89 8d ff ff       	call   c0009d07 <malloc>
c0010f7e:	83 c4 10             	add    esp,0x10
c0010f81:	89 c2                	mov    edx,eax
c0010f83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f87:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f8a:	90                   	nop
c0010f8b:	83 c4 18             	add    esp,0x18
c0010f8e:	5b                   	pop    ebx
c0010f8f:	c3                   	ret    

c0010f90 <VCache::invalidateReadBuffer()>:
c0010f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f94:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010f9a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010f9e:	c3                   	ret    
c0010f9f:	90                   	nop

c0010fa0 <VCache::writeWriteBuffer()>:
c0010fa0:	53                   	push   ebx
c0010fa1:	83 ec 08             	sub    esp,0x8
c0010fa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fac:	74 1e                	je     c0010fcc <VCache::writeWriteBuffer()+0x2c>
c0010fae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010fb1:	83 ec 0c             	sub    esp,0xc
c0010fb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fb6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fc2:	50                   	push   eax
c0010fc3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010fc6:	83 c4 20             	add    esp,0x20
c0010fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fcc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010fd3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010fda:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010fde:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010fe5:	83 c4 08             	add    esp,0x8
c0010fe8:	5b                   	pop    ebx
c0010fe9:	c3                   	ret    
c0010fea:	66 90                	xchg   ax,ax

c0010fec <VCache::~VCache()>:
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	ba 2c 4e 02 c0       	mov    edx,0xc0024e2c
c0010ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff8:	89 10                	mov    DWORD PTR [eax],edx
c0010ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011001:	84 c0                	test   al,al
c0011003:	74 0f                	je     c0011014 <VCache::~VCache()+0x28>
c0011005:	83 ec 0c             	sub    esp,0xc
c0011008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100c:	e8 8f ff ff ff       	call   c0010fa0 <VCache::writeWriteBuffer()>
c0011011:	83 c4 10             	add    esp,0x10
c0011014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011018:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	50                   	push   eax
c001101f:	e8 f3 8c ff ff       	call   c0009d17 <free>
c0011024:	83 c4 10             	add    esp,0x10
c0011027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	50                   	push   eax
c0011032:	e8 e0 8c ff ff       	call   c0009d17 <free>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	90                   	nop
c001103b:	83 c4 0c             	add    esp,0xc
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <VCache::~VCache()>:
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	83 ec 0c             	sub    esp,0xc
c0011046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104a:	e8 9d ff ff ff       	call   c0010fec <VCache::~VCache()>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	83 ec 08             	sub    esp,0x8
c0011055:	6a 44                	push   0x44
c0011057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105b:	e8 d2 be ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0011060:	83 c4 10             	add    esp,0x10
c0011063:	83 c4 0c             	add    esp,0xc
c0011066:	c3                   	ret    
c0011067:	90                   	nop

c0011068 <VCache::write(unsigned long long, int, void*)>:
c0011068:	55                   	push   ebp
c0011069:	31 c0                	xor    eax,eax
c001106b:	57                   	push   edi
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	83 ec 0c             	sub    esp,0xc
c0011071:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011075:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011079:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001107d:	8d 76 00             	lea    esi,[esi+0x0]
c0011080:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011084:	7d 1a                	jge    c00110a0 <VCache::write(unsigned long long, int, void*)+0x38>
c0011086:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011089:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001108f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011093:	0f af c8             	imul   ecx,eax
c0011096:	01 ca                	add    edx,ecx
c0011098:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001109a:	40                   	inc    eax
c001109b:	eb e3                	jmp    c0011080 <VCache::write(unsigned long long, int, void*)+0x18>
c001109d:	8d 76 00             	lea    esi,[esi+0x0]
c00110a0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00110a4:	74 0a                	je     c00110b0 <VCache::write(unsigned long long, int, void*)+0x48>
c00110a6:	53                   	push   ebx
c00110a7:	e8 e4 fe ff ff       	call   c0010f90 <VCache::invalidateReadBuffer()>
c00110ac:	58                   	pop    eax
c00110ad:	8d 76 00             	lea    esi,[esi+0x0]
c00110b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00110b4:	74 5e                	je     c0011114 <VCache::write(unsigned long long, int, void*)+0xac>
c00110b6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00110b9:	89 e8                	mov    eax,ebp
c00110bb:	99                   	cdq    
c00110bc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00110bf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00110c2:	89 c1                	mov    ecx,eax
c00110c4:	89 d0                	mov    eax,edx
c00110c6:	31 f1                	xor    ecx,esi
c00110c8:	31 f8                	xor    eax,edi
c00110ca:	09 c1                	or     ecx,eax
c00110cc:	75 3a                	jne    c0011108 <VCache::write(unsigned long long, int, void*)+0xa0>
c00110ce:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00110d3:	75 33                	jne    c0011108 <VCache::write(unsigned long long, int, void*)+0xa0>
c00110d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110d8:	89 ef                	mov    edi,ebp
c00110da:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00110e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110e4:	0f af f9             	imul   edi,ecx
c00110e7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00110ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00110ef:	40                   	inc    eax
c00110f0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00110f3:	83 f8 40             	cmp    eax,0x40
c00110f6:	75 60                	jne    c0011158 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110f8:	83 ec 0c             	sub    esp,0xc
c00110fb:	53                   	push   ebx
c00110fc:	e8 9f fe ff ff       	call   c0010fa0 <VCache::writeWriteBuffer()>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	eb 52                	jmp    c0011158 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011106:	66 90                	xchg   ax,ax
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	53                   	push   ebx
c001110c:	e8 8f fe ff ff       	call   c0010fa0 <VCache::writeWriteBuffer()>
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011117:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c001111c:	7f 22                	jg     c0011140 <VCache::write(unsigned long long, int, void*)+0xd8>
c001111e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011121:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011124:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011128:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001112c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001112f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011132:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011138:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001113c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001113e:	eb 18                	jmp    c0011158 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	8b 10                	mov    edx,DWORD PTR [eax]
c0011145:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011149:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114d:	57                   	push   edi
c001114e:	56                   	push   esi
c001114f:	50                   	push   eax
c0011150:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011153:	83 c4 20             	add    esp,0x20
c0011156:	66 90                	xchg   ax,ax
c0011158:	83 c4 0c             	add    esp,0xc
c001115b:	31 c0                	xor    eax,eax
c001115d:	5b                   	pop    ebx
c001115e:	5e                   	pop    esi
c001115f:	5f                   	pop    edi
c0011160:	5d                   	pop    ebp
c0011161:	c3                   	ret    

c0011162 <VCache::read(unsigned long long, int, void*)>:
c0011162:	55                   	push   ebp
c0011163:	31 c0                	xor    eax,eax
c0011165:	57                   	push   edi
c0011166:	56                   	push   esi
c0011167:	53                   	push   ebx
c0011168:	83 ec 1c             	sub    esp,0x1c
c001116b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001116f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011173:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011177:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001117b:	90                   	nop
c001117c:	39 e8                	cmp    eax,ebp
c001117e:	7d 18                	jge    c0011198 <VCache::read(unsigned long long, int, void*)+0x36>
c0011180:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011183:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011189:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001118d:	0f af c8             	imul   ecx,eax
c0011190:	01 ca                	add    edx,ecx
c0011192:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011194:	40                   	inc    eax
c0011195:	eb e5                	jmp    c001117c <VCache::read(unsigned long long, int, void*)+0x1a>
c0011197:	90                   	nop
c0011198:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001119c:	74 0e                	je     c00111ac <VCache::read(unsigned long long, int, void*)+0x4a>
c001119e:	83 ec 0c             	sub    esp,0xc
c00111a1:	53                   	push   ebx
c00111a2:	e8 f9 fd ff ff       	call   c0010fa0 <VCache::writeWriteBuffer()>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	66 90                	xchg   ax,ax
c00111ac:	83 fd 01             	cmp    ebp,0x1
c00111af:	0f 85 87 00 00 00    	jne    c001123c <VCache::read(unsigned long long, int, void*)+0xda>
c00111b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111bc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00111c3:	75 77                	jne    c001123c <VCache::read(unsigned long long, int, void*)+0xda>
c00111c5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00111c8:	89 e9                	mov    ecx,ebp
c00111ca:	f7 d9                	neg    ecx
c00111cc:	89 c8                	mov    eax,ecx
c00111ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00111d2:	c1 f8 1f             	sar    eax,0x1f
c00111d5:	21 f1                	and    ecx,esi
c00111d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111db:	89 c8                	mov    eax,ecx
c00111dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111e1:	21 f9                	and    ecx,edi
c00111e3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00111e7:	89 ca                	mov    edx,ecx
c00111e9:	74 0d                	je     c00111f8 <VCache::read(unsigned long long, int, void*)+0x96>
c00111eb:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00111ee:	75 08                	jne    c00111f8 <VCache::read(unsigned long long, int, void*)+0x96>
c00111f0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00111f3:	74 27                	je     c001121c <VCache::read(unsigned long long, int, void*)+0xba>
c00111f5:	8d 76 00             	lea    esi,[esi+0x0]
c00111f8:	83 ec 0c             	sub    esp,0xc
c00111fb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00111ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011203:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011206:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011209:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001120b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001120e:	55                   	push   ebp
c001120f:	52                   	push   edx
c0011210:	50                   	push   eax
c0011211:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011215:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011218:	83 c4 20             	add    esp,0x20
c001121b:	90                   	nop
c001121c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001121f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011223:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011229:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001122c:	48                   	dec    eax
c001122d:	21 c6                	and    esi,eax
c001122f:	0f af f1             	imul   esi,ecx
c0011232:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011235:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011237:	eb 23                	jmp    c001125c <VCache::read(unsigned long long, int, void*)+0xfa>
c0011239:	8d 76 00             	lea    esi,[esi+0x0]
c001123c:	83 ec 0c             	sub    esp,0xc
c001123f:	53                   	push   ebx
c0011240:	e8 4b fd ff ff       	call   c0010f90 <VCache::invalidateReadBuffer()>
c0011245:	5a                   	pop    edx
c0011246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011249:	8b 10                	mov    edx,DWORD PTR [eax]
c001124b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001124f:	55                   	push   ebp
c0011250:	57                   	push   edi
c0011251:	56                   	push   esi
c0011252:	50                   	push   eax
c0011253:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011256:	83 c4 20             	add    esp,0x20
c0011259:	8d 76 00             	lea    esi,[esi+0x0]
c001125c:	83 c4 1c             	add    esp,0x1c
c001125f:	31 c0                	xor    eax,eax
c0011261:	5b                   	pop    ebx
c0011262:	5e                   	pop    esi
c0011263:	5f                   	pop    edi
c0011264:	5d                   	pop    ebp
c0011265:	c3                   	ret    

c0011266 <Video::putrect(int, int, int, int, unsigned int)>:
c0011266:	55                   	push   ebp
c0011267:	57                   	push   edi
c0011268:	56                   	push   esi
c0011269:	53                   	push   ebx
c001126a:	83 ec 1c             	sub    esp,0x1c
c001126d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011271:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011275:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011279:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001127d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011281:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011285:	01 df                	add    edi,ebx
c0011287:	39 fb                	cmp    ebx,edi
c0011289:	7d 1f                	jge    c00112aa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001128b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001128f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011293:	7d 12                	jge    c00112a7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011295:	8b 16                	mov    edx,DWORD PTR [esi]
c0011297:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001129b:	53                   	push   ebx
c001129c:	55                   	push   ebp
c001129d:	45                   	inc    ebp
c001129e:	56                   	push   esi
c001129f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	eb e8                	jmp    c001128f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00112a7:	43                   	inc    ebx
c00112a8:	eb dd                	jmp    c0011287 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00112aa:	83 c4 1c             	add    esp,0x1c
c00112ad:	5b                   	pop    ebx
c00112ae:	5e                   	pop    esi
c00112af:	5f                   	pop    edi
c00112b0:	5d                   	pop    ebp
c00112b1:	c3                   	ret    

c00112b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00112b2:	55                   	push   ebp
c00112b3:	57                   	push   edi
c00112b4:	31 ff                	xor    edi,edi
c00112b6:	56                   	push   esi
c00112b7:	53                   	push   ebx
c00112b8:	83 ec 1c             	sub    esp,0x1c
c00112bb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00112bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00112c3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00112ca:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00112cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112d3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00112d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00112db:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00112de:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00112e2:	01 f9                	add    ecx,edi
c00112e4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00112e8:	7d 2f                	jge    c0011319 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00112ea:	31 f6                	xor    esi,esi
c00112ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00112f0:	01 f2                	add    edx,esi
c00112f2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00112f6:	7d 1a                	jge    c0011312 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00112f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112fb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00112fe:	46                   	inc    esi
c00112ff:	51                   	push   ecx
c0011300:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011304:	52                   	push   edx
c0011305:	55                   	push   ebp
c0011306:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011310:	eb da                	jmp    c00112ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011312:	47                   	inc    edi
c0011313:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011317:	eb c5                	jmp    c00112de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011319:	83 c4 1c             	add    esp,0x1c
c001131c:	5b                   	pop    ebx
c001131d:	5e                   	pop    esi
c001131e:	5f                   	pop    edi
c001131f:	5d                   	pop    ebp
c0011320:	c3                   	ret    
c0011321:	90                   	nop

c0011322 <Video::blit(unsigned int*, int, int, int, int)>:
c0011322:	55                   	push   ebp
c0011323:	57                   	push   edi
c0011324:	56                   	push   esi
c0011325:	53                   	push   ebx
c0011326:	83 ec 1c             	sub    esp,0x1c
c0011329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001132d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011331:	85 c0                	test   eax,eax
c0011333:	79 02                	jns    c0011337 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011335:	31 c0                	xor    eax,eax
c0011337:	c1 e0 02             	shl    eax,0x2
c001133a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001133e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011342:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011346:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001134a:	39 d8                	cmp    eax,ebx
c001134c:	7e 49                	jle    c0011397 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001134e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011354:	7c 41                	jl     c0011397 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011356:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001135a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001135e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011362:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011366:	39 f9                	cmp    ecx,edi
c0011368:	7e 22                	jle    c001138c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001136a:	83 c5 04             	add    ebp,0x4
c001136d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011373:	7c 14                	jl     c0011389 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011375:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011377:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001137a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001137e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011382:	56                   	push   esi
c0011383:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	47                   	inc    edi
c001138a:	eb d2                	jmp    c001135e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001138c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011390:	43                   	inc    ebx
c0011391:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011395:	eb ab                	jmp    c0011342 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011397:	83 c4 1c             	add    esp,0x1c
c001139a:	5b                   	pop    ebx
c001139b:	5e                   	pop    esi
c001139c:	5f                   	pop    edi
c001139d:	5d                   	pop    ebp
c001139e:	c3                   	ret    
c001139f:	90                   	nop

c00113a0 <Video::clearScreen(unsigned int)>:
c00113a0:	57                   	push   edi
c00113a1:	56                   	push   esi
c00113a2:	53                   	push   ebx
c00113a3:	31 db                	xor    ebx,ebx
c00113a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113a9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00113af:	7e 1f                	jle    c00113d0 <Video::clearScreen(unsigned int)+0x30>
c00113b1:	31 ff                	xor    edi,edi
c00113b3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00113b9:	7e 12                	jle    c00113cd <Video::clearScreen(unsigned int)+0x2d>
c00113bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00113bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113c1:	53                   	push   ebx
c00113c2:	57                   	push   edi
c00113c3:	47                   	inc    edi
c00113c4:	56                   	push   esi
c00113c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	eb e6                	jmp    c00113b3 <Video::clearScreen(unsigned int)+0x13>
c00113cd:	43                   	inc    ebx
c00113ce:	eb d9                	jmp    c00113a9 <Video::clearScreen(unsigned int)+0x9>
c00113d0:	5b                   	pop    ebx
c00113d1:	5e                   	pop    esi
c00113d2:	5f                   	pop    edi
c00113d3:	c3                   	ret    

c00113d4 <Video::putpixel(int, int, unsigned int)>:
c00113d4:	c7 44 24 04 34 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e34
c00113dc:	e9 90 39 00 00       	jmp    c0014d71 <Krnl::panic(char const*)>
c00113e1:	90                   	nop

c00113e2 <Video::Video(char const*)>:
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e9:	83 ec 08             	sub    esp,0x8
c00113ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f0:	50                   	push   eax
c00113f1:	e8 d4 d2 ff ff       	call   c000e6ca <Device::Device(char const*)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	ba a4 4e 02 c0       	mov    edx,0xc0024ea4
c00113fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011402:	89 10                	mov    DWORD PTR [eax],edx
c0011404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011408:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011412:	90                   	nop
c0011413:	83 c4 0c             	add    esp,0xc
c0011416:	c3                   	ret    
c0011417:	90                   	nop

c0011418 <Video::~Video()>:
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	ba a4 4e 02 c0       	mov    edx,0xc0024ea4
c0011420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011424:	89 10                	mov    DWORD PTR [eax],edx
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	50                   	push   eax
c001142e:	e8 61 cf ff ff       	call   c000e394 <Device::~Device()>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	90                   	nop
c0011437:	83 c4 0c             	add    esp,0xc
c001143a:	c3                   	ret    
c001143b:	90                   	nop

c001143c <Video::~Video()>:
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011446:	e8 cd ff ff ff       	call   c0011418 <Video::~Video()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 ec 08             	sub    esp,0x8
c0011451:	68 64 01 00 00       	push   0x164
c0011456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001145a:	e8 d3 ba ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	83 c4 0c             	add    esp,0xc
c0011465:	c3                   	ret    

c0011466 <Video::isMonochrome()>:
c0011466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001146a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011470:	c3                   	ret    
c0011471:	90                   	nop

c0011472 <Video::getWidth()>:
c0011472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011476:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001147c:	c3                   	ret    
c001147d:	90                   	nop

c001147e <Video::getHeight()>:
c001147e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011482:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <Video::drawCursor(int, int, unsigned char*, int)>:
c001148a:	55                   	push   ebp
c001148b:	57                   	push   edi
c001148c:	56                   	push   esi
c001148d:	53                   	push   ebx
c001148e:	83 ec 2c             	sub    esp,0x2c
c0011491:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011495:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011499:	83 f8 01             	cmp    eax,0x1
c001149c:	19 c9                	sbb    ecx,ecx
c001149e:	31 db                	xor    ebx,ebx
c00114a0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00114a4:	89 cd                	mov    ebp,ecx
c00114a6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00114ae:	f7 d5                	not    ebp
c00114b0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00114b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114ba:	01 d8                	add    eax,ebx
c00114bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114c0:	56                   	push   esi
c00114c1:	e8 b8 ff ff ff       	call   c001147e <Video::getHeight()>
c00114c6:	59                   	pop    ecx
c00114c7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00114cb:	7e 70                	jle    c001153d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00114cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00114d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00114d5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00114d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00114dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00114e0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00114e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00114eb:	89 f8                	mov    eax,edi
c00114ed:	83 c0 20             	add    eax,0x20
c00114f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f4:	56                   	push   esi
c00114f5:	e8 78 ff ff ff       	call   c0011472 <Video::getWidth()>
c00114fa:	5a                   	pop    edx
c00114fb:	39 c7                	cmp    edi,eax
c00114fd:	7d 34                	jge    c0011533 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00114ff:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011504:	74 05                	je     c001150b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011506:	8b 06                	mov    eax,DWORD PTR [esi]
c0011508:	55                   	push   ebp
c0011509:	eb 0d                	jmp    c0011518 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001150b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011510:	74 12                	je     c0011524 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011512:	8b 06                	mov    eax,DWORD PTR [esi]
c0011514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011518:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001151c:	57                   	push   edi
c001151d:	56                   	push   esi
c001151e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011528:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001152c:	47                   	inc    edi
c001152d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011531:	75 c1                	jne    c00114f4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011533:	43                   	inc    ebx
c0011534:	83 fb 20             	cmp    ebx,0x20
c0011537:	0f 85 79 ff ff ff    	jne    c00114b6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001153d:	83 c4 2c             	add    esp,0x2c
c0011540:	5b                   	pop    ebx
c0011541:	5e                   	pop    esi
c0011542:	5f                   	pop    edi
c0011543:	5d                   	pop    ebp
c0011544:	c3                   	ret    
c0011545:	90                   	nop

c0011546 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011546:	55                   	push   ebp
c0011547:	57                   	push   edi
c0011548:	56                   	push   esi
c0011549:	53                   	push   ebx
c001154a:	83 ec 28             	sub    esp,0x28
c001154d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011551:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011555:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011559:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001155d:	c1 e6 08             	shl    esi,0x8
c0011560:	01 c6                	add    esi,eax
c0011562:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011566:	c1 e0 08             	shl    eax,0x8
c0011569:	01 d0                	add    eax,edx
c001156b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001156f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011573:	0f af c6             	imul   eax,esi
c0011576:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001157d:	50                   	push   eax
c001157e:	e8 84 87 ff ff       	call   c0009d07 <malloc>
c0011583:	83 c4 10             	add    esp,0x10
c0011586:	89 c7                	mov    edi,eax
c0011588:	85 c0                	test   eax,eax
c001158a:	75 10                	jne    c001159c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001158c:	83 ec 0c             	sub    esp,0xc
c001158f:	68 55 4e 02 c0       	push   0xc0024e55
c0011594:	e8 d8 37 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001159f:	ba 12 00 00 00       	mov    edx,0x12
c00115a4:	84 c0                	test   al,al
c00115a6:	74 11                	je     c00115b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00115a8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00115ac:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00115b0:	c1 fa 03             	sar    edx,0x3
c00115b3:	0f af d1             	imul   edx,ecx
c00115b6:	83 c2 12             	add    edx,0x12
c00115b9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00115bd:	74 04                	je     c00115c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00115bf:	85 f6                	test   esi,esi
c00115c1:	75 12                	jne    c00115d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00115c3:	83 ec 0c             	sub    esp,0xc
c00115c6:	68 65 4e 02 c0       	push   0xc0024e65
c00115cb:	e8 43 ba ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00115d0:	e9 b8 00 00 00       	jmp    c001168d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00115d5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00115d9:	80 f9 02             	cmp    cl,0x2
c00115dc:	0f 85 96 00 00 00    	jne    c0011678 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00115e2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00115e7:	75 0e                	jne    c00115f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00115e9:	84 c0                	test   al,al
c00115eb:	75 0a                	jne    c00115f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00115ed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00115f0:	83 e8 18             	sub    eax,0x18
c00115f3:	a8 f7                	test   al,0xf7
c00115f5:	74 0a                	je     c0011601 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00115f7:	83 ec 0c             	sub    esp,0xc
c00115fa:	68 7a 4e 02 c0       	push   0xc0024e7a
c00115ff:	eb 7f                	jmp    c0011680 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011601:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011609:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011611:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001161d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011621:	75 0c                	jne    c001162f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011623:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011628:	c1 e0 18             	shl    eax,0x18
c001162b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001162f:	45                   	inc    ebp
c0011630:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011635:	c1 e1 10             	shl    ecx,0x10
c0011638:	89 c8                	mov    eax,ecx
c001163a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001163f:	c1 e1 08             	shl    ecx,0x8
c0011642:	09 c1                	or     ecx,eax
c0011644:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011648:	09 c1                	or     ecx,eax
c001164a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001164e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011652:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011656:	c1 f8 03             	sar    eax,0x3
c0011659:	01 c2                	add    edx,eax
c001165b:	89 e8                	mov    eax,ebp
c001165d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011661:	39 c6                	cmp    esi,eax
c0011663:	7f b0                	jg     c0011615 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011665:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011669:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001166d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011670:	7e 22                	jle    c0011694 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011672:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011676:	eb 99                	jmp    c0011611 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011678:	50                   	push   eax
c0011679:	50                   	push   eax
c001167a:	51                   	push   ecx
c001167b:	68 88 4e 02 c0       	push   0xc0024e88
c0011680:	e8 8e b9 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0011685:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011688:	e8 8a 86 ff ff       	call   c0009d17 <free>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	31 ff                	xor    edi,edi
c0011692:	eb 0f                	jmp    c00116a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011694:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011698:	89 30                	mov    DWORD PTR [eax],esi
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00116a1:	89 30                	mov    DWORD PTR [eax],esi
c00116a3:	83 c4 1c             	add    esp,0x1c
c00116a6:	89 f8                	mov    eax,edi
c00116a8:	5b                   	pop    ebx
c00116a9:	5e                   	pop    esi
c00116aa:	5f                   	pop    edi
c00116ab:	5d                   	pop    ebp
c00116ac:	c3                   	ret    
c00116ad:	90                   	nop

c00116ae <Video::putTGA(int, int, unsigned char*, int)>:
c00116ae:	55                   	push   ebp
c00116af:	57                   	push   edi
c00116b0:	56                   	push   esi
c00116b1:	53                   	push   ebx
c00116b2:	83 ec 28             	sub    esp,0x28
c00116b5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00116b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116bd:	50                   	push   eax
c00116be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116c2:	50                   	push   eax
c00116c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00116c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00116cb:	56                   	push   esi
c00116cc:	e8 75 fe ff ff       	call   c0011546 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00116d1:	83 c4 20             	add    esp,0x20
c00116d4:	85 c0                	test   eax,eax
c00116d6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116da:	74 35                	je     c0011711 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00116dc:	89 c7                	mov    edi,eax
c00116de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00116e6:	39 d8                	cmp    eax,ebx
c00116e8:	7e 27                	jle    c0011711 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00116ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00116ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00116f6:	39 e8                	cmp    eax,ebp
c00116f8:	7e 14                	jle    c001170e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00116fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00116fc:	83 c7 04             	add    edi,0x4
c00116ff:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011702:	53                   	push   ebx
c0011703:	55                   	push   ebp
c0011704:	45                   	inc    ebp
c0011705:	56                   	push   esi
c0011706:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	eb e0                	jmp    c00116ee <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001170e:	43                   	inc    ebx
c001170f:	eb cd                	jmp    c00116de <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011711:	83 c4 1c             	add    esp,0x1c
c0011714:	5b                   	pop    ebx
c0011715:	5e                   	pop    esi
c0011716:	5f                   	pop    edi
c0011717:	5d                   	pop    ebp
c0011718:	c3                   	ret    
c0011719:	66 90                	xchg   ax,ax
c001171b:	90                   	nop

c001171c <ACPI::close(int, int, void*)>:
c001171c:	83 ec 1c             	sub    esp,0x1c
c001171f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011727:	74 0b                	je     c0011734 <ACPI::close(int, int, void*)+0x18>
c0011729:	b8 00 00 00 00       	mov    eax,0x0
c001172e:	e9 99 00 00 00       	jmp    c00117cc <ACPI::close(int, int, void*)+0xb0>
c0011733:	90                   	nop
c0011734:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011739:	75 29                	jne    c0011764 <ACPI::close(int, int, void*)+0x48>
c001173b:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c0011740:	85 c0                	test   eax,eax
c0011742:	74 08                	je     c001174c <ACPI::close(int, int, void*)+0x30>
c0011744:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c0011749:	ff d0                	call   eax
c001174b:	90                   	nop
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	68 e4 4e 02 c0       	push   0xc0024ee4
c0011754:	e8 18 36 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0011759:	83 c4 10             	add    esp,0x10
c001175c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011761:	eb 69                	jmp    c00117cc <ACPI::close(int, int, void*)+0xb0>
c0011763:	90                   	nop
c0011764:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011769:	75 59                	jne    c00117c4 <ACPI::close(int, int, void*)+0xa8>
c001176b:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c0011770:	85 c0                	test   eax,eax
c0011772:	74 08                	je     c001177c <ACPI::close(int, int, void*)+0x60>
c0011774:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c0011779:	ff d0                	call   eax
c001177b:	90                   	nop
c001177c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011781:	8d 76 00             	lea    esi,[esi+0x0]
c0011784:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011789:	83 e0 02             	and    eax,0x2
c001178c:	74 1e                	je     c00117ac <ACPI::close(int, int, void*)+0x90>
c001178e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011799:	89 c2                	mov    edx,eax
c001179b:	ec                   	in     al,dx
c001179c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00117a0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00117a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00117a8:	eb da                	jmp    c0011784 <ACPI::close(int, int, void*)+0x68>
c00117aa:	66 90                	xchg   ax,ax
c00117ac:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00117b3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00117b8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00117bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117c0:	ee                   	out    dx,al
c00117c1:	8d 76 00             	lea    esi,[esi+0x0]
c00117c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117c9:	8d 76 00             	lea    esi,[esi+0x0]
c00117cc:	83 c4 1c             	add    esp,0x1c
c00117cf:	c3                   	ret    

c00117d0 <findRSDP()>:
c00117d0:	83 ec 1c             	sub    esp,0x1c
c00117d3:	83 ec 0c             	sub    esp,0xc
c00117d6:	68 07 50 02 c0       	push   0xc0025007
c00117db:	e8 81 85 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00117e8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117ee:	83 e0 04             	and    eax,0x4
c00117f1:	84 c0                	test   al,al
c00117f3:	75 0b                	jne    c0011800 <findRSDP()+0x30>
c00117f5:	b8 00 00 00 00       	mov    eax,0x0
c00117fa:	e9 a1 00 00 00       	jmp    c00118a0 <findRSDP()+0xd0>
c00117ff:	90                   	nop
c0011800:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c0011805:	3d ff 07 00 00       	cmp    eax,0x7ff
c001180a:	7f 1c                	jg     c0011828 <findRSDP()+0x58>
c001180c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011811:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011817:	83 e2 fb             	and    edx,0xfffffffb
c001181a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011820:	b8 00 00 00 00       	mov    eax,0x0
c0011825:	eb 79                	jmp    c00118a0 <findRSDP()+0xd0>
c0011827:	90                   	nop
c0011828:	83 ec 0c             	sub    esp,0xc
c001182b:	68 17 50 02 c0       	push   0xc0025017
c0011830:	e8 2c 85 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011840:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011848:	77 3e                	ja     c0011888 <findRSDP()+0xb8>
c001184a:	83 ec 04             	sub    esp,0x4
c001184d:	6a 08                	push   0x8
c001184f:	68 30 50 02 c0       	push   0xc0025030
c0011854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011858:	e8 1b ed fe ff       	call   c0000578 <memcmp>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	85 c0                	test   eax,eax
c0011862:	0f 94 c0             	sete   al
c0011865:	84 c0                	test   al,al
c0011867:	74 17                	je     c0011880 <findRSDP()+0xb0>
c0011869:	83 ec 0c             	sub    esp,0xc
c001186c:	68 39 50 02 c0       	push   0xc0025039
c0011871:	e8 eb 84 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001187d:	eb 21                	jmp    c00118a0 <findRSDP()+0xd0>
c001187f:	90                   	nop
c0011880:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011885:	eb b9                	jmp    c0011840 <findRSDP()+0x70>
c0011887:	90                   	nop
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	68 47 50 02 c0       	push   0xc0025047
c0011890:	e8 cc 84 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	b8 00 00 00 00       	mov    eax,0x0
c001189d:	8d 76 00             	lea    esi,[esi+0x0]
c00118a0:	83 c4 1c             	add    esp,0x1c
c00118a3:	c3                   	ret    

c00118a4 <loadACPITables(unsigned char*)>:
c00118a4:	57                   	push   edi
c00118a5:	56                   	push   esi
c00118a6:	53                   	push   ebx
c00118a7:	83 ec 60             	sub    esp,0x60
c00118aa:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00118af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118b5:	83 e0 04             	and    eax,0x4
c00118b8:	84 c0                	test   al,al
c00118ba:	0f 84 3c 02 00 00    	je     c0011afc <loadACPITables(unsigned char*)+0x258>
c00118c0:	a0 00 85 02 c0       	mov    al,ds:0xc0028500
c00118c5:	84 c0                	test   al,al
c00118c7:	74 77                	je     c0011940 <loadACPITables(unsigned char*)+0x9c>
c00118c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00118d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00118d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d8:	83 e8 24             	sub    eax,0x24
c00118db:	c1 e8 03             	shr    eax,0x3
c00118de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118e2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00118ea:	66 90                	xchg   ax,ax
c00118ec:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00118f0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00118f4:	0f 8d b6 00 00 00    	jge    c00119b0 <loadACPITables(unsigned char*)+0x10c>
c00118fa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118fe:	83 c0 24             	add    eax,0x24
c0011901:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011905:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011909:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001190d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011911:	c1 e0 03             	shl    eax,0x3
c0011914:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011918:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001191c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001191f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011921:	89 c1                	mov    ecx,eax
c0011923:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c0011928:	8d 50 01             	lea    edx,[eax+0x1]
c001192b:	89 15 ec 82 02 c0    	mov    DWORD PTR ds:0xc00282ec,edx
c0011931:	89 ca                	mov    edx,ecx
c0011933:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c001193a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001193e:	eb ac                	jmp    c00118ec <loadACPITables(unsigned char*)+0x48>
c0011940:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011944:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011948:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001194c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194f:	83 e8 24             	sub    eax,0x24
c0011952:	c1 e8 02             	shr    eax,0x2
c0011955:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011959:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011961:	8d 76 00             	lea    esi,[esi+0x0]
c0011964:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011968:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001196c:	7d 42                	jge    c00119b0 <loadACPITables(unsigned char*)+0x10c>
c001196e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011972:	83 c0 24             	add    eax,0x24
c0011975:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011979:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001197d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011981:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011985:	c1 e0 02             	shl    eax,0x2
c0011988:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001198c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011990:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011992:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c0011997:	8d 50 01             	lea    edx,[eax+0x1]
c001199a:	89 15 ec 82 02 c0    	mov    DWORD PTR ds:0xc00282ec,edx
c00119a0:	89 ca                	mov    edx,ecx
c00119a2:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c00119a9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00119ad:	eb b5                	jmp    c0011964 <loadACPITables(unsigned char*)+0xc0>
c00119af:	90                   	nop
c00119b0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00119b8:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c00119bd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00119c1:	0f 8d 39 01 00 00    	jge    c0011b00 <loadACPITables(unsigned char*)+0x25c>
c00119c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00119cb:	8b 04 c5 04 83 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7cfc]
c00119d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00119de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119e2:	25 ff 0f 00 00       	and    eax,0xfff
c00119e7:	89 c6                	mov    esi,eax
c00119e9:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c00119ef:	83 ec 0c             	sub    esp,0xc
c00119f2:	6a 01                	push   0x1
c00119f4:	e8 c0 a2 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a00:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a06:	83 ec 0c             	sub    esp,0xc
c0011a09:	6a 01                	push   0x1
c0011a0b:	6a 01                	push   0x1
c0011a0d:	50                   	push   eax
c0011a0e:	52                   	push   edx
c0011a0f:	53                   	push   ebx
c0011a10:	e8 05 ac ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a15:	83 c4 20             	add    esp,0x20
c0011a18:	09 f0                	or     eax,esi
c0011a1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a1e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a22:	c1 e0 03             	shl    eax,0x3
c0011a25:	05 00 83 02 c0       	add    eax,0xc0028300
c0011a2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a36:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011a3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011a52:	89 c6                	mov    esi,eax
c0011a54:	89 d7                	mov    edi,edx
c0011a56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a58:	89 c8                	mov    eax,ecx
c0011a5a:	89 fa                	mov    edx,edi
c0011a5c:	89 f3                	mov    ebx,esi
c0011a5e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011a62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011a66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a79:	05 00 10 00 00       	add    eax,0x1000
c0011a7e:	c1 e8 0c             	shr    eax,0xc
c0011a81:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a91:	25 ff 0f 00 00       	and    eax,0xfff
c0011a96:	89 c6                	mov    esi,eax
c0011a98:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c0011a9e:	83 ec 0c             	sub    esp,0xc
c0011aa1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011aa5:	e8 0f a2 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0011aaa:	83 c4 10             	add    esp,0x10
c0011aad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ab1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ab7:	83 ec 0c             	sub    esp,0xc
c0011aba:	6a 01                	push   0x1
c0011abc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ac0:	50                   	push   eax
c0011ac1:	52                   	push   edx
c0011ac2:	53                   	push   ebx
c0011ac3:	e8 52 ab ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ac8:	83 c4 20             	add    esp,0x20
c0011acb:	09 f0                	or     eax,esi
c0011acd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ad5:	83 ec 0c             	sub    esp,0xc
c0011ad8:	50                   	push   eax
c0011ad9:	e8 cf a4 ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c0011ade:	83 c4 10             	add    esp,0x10
c0011ae1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ae5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ae9:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c0011af0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011af4:	e9 bf fe ff ff       	jmp    c00119b8 <loadACPITables(unsigned char*)+0x114>
c0011af9:	8d 76 00             	lea    esi,[esi+0x0]
c0011afc:	90                   	nop
c0011afd:	8d 76 00             	lea    esi,[esi+0x0]
c0011b00:	83 c4 60             	add    esp,0x60
c0011b03:	5b                   	pop    ebx
c0011b04:	5e                   	pop    esi
c0011b05:	5f                   	pop    edi
c0011b06:	c3                   	ret    
c0011b07:	90                   	nop

c0011b08 <findRSDT(unsigned char*)>:
c0011b08:	57                   	push   edi
c0011b09:	56                   	push   esi
c0011b0a:	53                   	push   ebx
c0011b0b:	83 ec 50             	sub    esp,0x50
c0011b0e:	83 ec 0c             	sub    esp,0xc
c0011b11:	68 5b 50 02 c0       	push   0xc002505b
c0011b16:	e8 46 82 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011b23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b29:	83 e0 04             	and    eax,0x4
c0011b2c:	84 c0                	test   al,al
c0011b2e:	75 0c                	jne    c0011b3c <findRSDT(unsigned char*)+0x34>
c0011b30:	b8 00 00 00 00       	mov    eax,0x0
c0011b35:	e9 86 01 00 00       	jmp    c0011cc0 <findRSDT(unsigned char*)+0x1b8>
c0011b3a:	66 90                	xchg   ax,ax
c0011b3c:	83 ec 0c             	sub    esp,0xc
c0011b3f:	68 6d 50 02 c0       	push   0xc002506d
c0011b44:	e8 18 82 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011b49:	83 c4 10             	add    esp,0x10
c0011b4c:	89 e0                	mov    eax,esp
c0011b4e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011b52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b5a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011b62:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011b6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011b72:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011b76:	89 c6                	mov    esi,eax
c0011b78:	89 d7                	mov    edi,edx
c0011b7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b7c:	89 c8                	mov    eax,ecx
c0011b7e:	89 fa                	mov    edx,edi
c0011b80:	89 f3                	mov    ebx,esi
c0011b82:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011b86:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011b8a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b8e:	83 ec 0c             	sub    esp,0xc
c0011b91:	68 7f 50 02 c0       	push   0xc002507f
c0011b96:	e8 c6 81 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ba2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ba6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011bae:	83 ec 0c             	sub    esp,0xc
c0011bb1:	68 91 50 02 c0       	push   0xc0025091
c0011bb6:	e8 a6 81 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011bbb:	83 c4 10             	add    esp,0x10
c0011bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bc6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011bd2:	83 ec 04             	sub    esp,0x4
c0011bd5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011bd9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011bdd:	68 08 4f 02 c0       	push   0xc0024f08
c0011be2:	e8 2c b4 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011bee:	25 ff 0f 00 00       	and    eax,0xfff
c0011bf3:	89 c6                	mov    esi,eax
c0011bf5:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c0011bfb:	83 ec 0c             	sub    esp,0xc
c0011bfe:	6a 02                	push   0x2
c0011c00:	e8 b4 a0 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011c0c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c12:	83 ec 0c             	sub    esp,0xc
c0011c15:	6a 01                	push   0x1
c0011c17:	6a 02                	push   0x2
c0011c19:	50                   	push   eax
c0011c1a:	52                   	push   edx
c0011c1b:	53                   	push   ebx
c0011c1c:	e8 f9 a9 ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c21:	83 c4 20             	add    esp,0x20
c0011c24:	09 f0                	or     eax,esi
c0011c26:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011c2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c2e:	25 ff 0f 00 00       	and    eax,0xfff
c0011c33:	89 c6                	mov    esi,eax
c0011c35:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	6a 02                	push   0x2
c0011c40:	e8 74 a0 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0011c45:	83 c4 10             	add    esp,0x10
c0011c48:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011c4c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c52:	83 ec 0c             	sub    esp,0xc
c0011c55:	6a 01                	push   0x1
c0011c57:	6a 02                	push   0x2
c0011c59:	50                   	push   eax
c0011c5a:	52                   	push   edx
c0011c5b:	53                   	push   ebx
c0011c5c:	e8 b9 a9 ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c61:	83 c4 20             	add    esp,0x20
c0011c64:	09 f0                	or     eax,esi
c0011c66:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011c6a:	83 ec 04             	sub    esp,0x4
c0011c6d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c75:	68 28 4f 02 c0       	push   0xc0024f28
c0011c7a:	e8 94 b3 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0011c7f:	83 c4 10             	add    esp,0x10
c0011c82:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011c87:	75 13                	jne    c0011c9c <findRSDT(unsigned char*)+0x194>
c0011c89:	c6 05 00 85 02 c0 00 	mov    BYTE PTR ds:0xc0028500,0x0
c0011c90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c94:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c98:	eb 22                	jmp    c0011cbc <findRSDT(unsigned char*)+0x1b4>
c0011c9a:	66 90                	xchg   ax,ax
c0011c9c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011ca1:	75 11                	jne    c0011cb4 <findRSDT(unsigned char*)+0x1ac>
c0011ca3:	c6 05 00 85 02 c0 01 	mov    BYTE PTR ds:0xc0028500,0x1
c0011caa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011cb2:	eb 08                	jmp    c0011cbc <findRSDT(unsigned char*)+0x1b4>
c0011cb4:	b8 00 00 00 00       	mov    eax,0x0
c0011cb9:	eb 05                	jmp    c0011cc0 <findRSDT(unsigned char*)+0x1b8>
c0011cbb:	90                   	nop
c0011cbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011cc0:	83 c4 50             	add    esp,0x50
c0011cc3:	5b                   	pop    ebx
c0011cc4:	5e                   	pop    esi
c0011cc5:	5f                   	pop    edi
c0011cc6:	c3                   	ret    
c0011cc7:	90                   	nop

c0011cc8 <findDataTable(unsigned char*, char*)>:
c0011cc8:	83 ec 1c             	sub    esp,0x1c
c0011ccb:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011cd0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011cd6:	83 e0 04             	and    eax,0x4
c0011cd9:	84 c0                	test   al,al
c0011cdb:	75 07                	jne    c0011ce4 <findDataTable(unsigned char*, char*)+0x1c>
c0011cdd:	b8 00 00 00 00       	mov    eax,0x0
c0011ce2:	eb 58                	jmp    c0011d3c <findDataTable(unsigned char*, char*)+0x74>
c0011ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cec:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c0011cf1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011cf5:	7d 3d                	jge    c0011d34 <findDataTable(unsigned char*, char*)+0x6c>
c0011cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cfb:	c1 e0 03             	shl    eax,0x3
c0011cfe:	05 00 83 02 c0       	add    eax,0xc0028300
c0011d03:	83 ec 04             	sub    esp,0x4
c0011d06:	6a 04                	push   0x4
c0011d08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d0c:	50                   	push   eax
c0011d0d:	e8 66 e8 fe ff       	call   c0000578 <memcmp>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	85 c0                	test   eax,eax
c0011d17:	0f 94 c0             	sete   al
c0011d1a:	84 c0                	test   al,al
c0011d1c:	74 0e                	je     c0011d2c <findDataTable(unsigned char*, char*)+0x64>
c0011d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d22:	8b 04 c5 04 83 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7cfc]
c0011d29:	eb 11                	jmp    c0011d3c <findDataTable(unsigned char*, char*)+0x74>
c0011d2b:	90                   	nop
c0011d2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011d30:	eb ba                	jmp    c0011cec <findDataTable(unsigned char*, char*)+0x24>
c0011d32:	66 90                	xchg   ax,ax
c0011d34:	b8 00 00 00 00       	mov    eax,0x0
c0011d39:	8d 76 00             	lea    esi,[esi+0x0]
c0011d3c:	83 c4 1c             	add    esp,0x1c
c0011d3f:	c3                   	ret    

c0011d40 <scanMADT()>:
c0011d40:	53                   	push   ebx
c0011d41:	83 ec 38             	sub    esp,0x38
c0011d44:	83 ec 0c             	sub    esp,0xc
c0011d47:	68 a3 50 02 c0       	push   0xc00250a3
c0011d4c:	e8 10 80 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011d51:	83 c4 10             	add    esp,0x10
c0011d54:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0011d59:	25 00 04 00 00       	and    eax,0x400
c0011d5e:	74 14                	je     c0011d74 <scanMADT()+0x34>
c0011d60:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011d65:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d6b:	83 e2 fb             	and    edx,0xfffffffb
c0011d6e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d74:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011d79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d7f:	83 e0 04             	and    eax,0x4
c0011d82:	84 c0                	test   al,al
c0011d84:	0f 84 82 04 00 00    	je     c001220c <scanMADT()+0x4cc>
c0011d8a:	83 ec 0c             	sub    esp,0xc
c0011d8d:	68 b0 50 02 c0       	push   0xc00250b0
c0011d92:	e8 ca 7f ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	e8 31 fa ff ff       	call   c00117d0 <findRSDP()>
c0011d9f:	a3 0c 85 02 c0       	mov    ds:0xc002850c,eax
c0011da4:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0011da9:	85 c0                	test   eax,eax
c0011dab:	75 1b                	jne    c0011dc8 <scanMADT()+0x88>
c0011dad:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011db2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011db8:	83 e2 fb             	and    edx,0xfffffffb
c0011dbb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011dc1:	e9 4e 04 00 00       	jmp    c0012214 <scanMADT()+0x4d4>
c0011dc6:	66 90                	xchg   ax,ax
c0011dc8:	83 ec 0c             	sub    esp,0xc
c0011dcb:	68 c2 50 02 c0       	push   0xc00250c2
c0011dd0:	e8 8c 7f ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0011ddd:	83 ec 0c             	sub    esp,0xc
c0011de0:	50                   	push   eax
c0011de1:	e8 22 fd ff ff       	call   c0011b08 <findRSDT(unsigned char*)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	a3 08 85 02 c0       	mov    ds:0xc0028508,eax
c0011dee:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011df3:	85 c0                	test   eax,eax
c0011df5:	75 19                	jne    c0011e10 <scanMADT()+0xd0>
c0011df7:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011dfc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011e02:	83 e2 fb             	and    edx,0xfffffffb
c0011e05:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011e0b:	e9 04 04 00 00       	jmp    c0012214 <scanMADT()+0x4d4>
c0011e10:	83 ec 0c             	sub    esp,0xc
c0011e13:	68 d2 50 02 c0       	push   0xc00250d2
c0011e18:	e8 44 7f ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011e25:	83 ec 0c             	sub    esp,0xc
c0011e28:	50                   	push   eax
c0011e29:	e8 76 fa ff ff       	call   c00118a4 <loadACPITables(unsigned char*)>
c0011e2e:	83 c4 10             	add    esp,0x10
c0011e31:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011e36:	83 ec 08             	sub    esp,0x8
c0011e39:	68 ea 50 02 c0       	push   0xc00250ea
c0011e3e:	50                   	push   eax
c0011e3f:	e8 84 fe ff ff       	call   c0011cc8 <findDataTable(unsigned char*, char*)>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011e4b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011e50:	75 1a                	jne    c0011e6c <scanMADT()+0x12c>
c0011e52:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011e57:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011e5d:	83 e2 fe             	and    edx,0xfffffffe
c0011e60:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011e66:	e9 a9 03 00 00       	jmp    c0012214 <scanMADT()+0x4d4>
c0011e6b:	90                   	nop
c0011e6c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011e74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e7b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011e7f:	0f 87 8f 03 00 00    	ja     c0012214 <scanMADT()+0x4d4>
c0011e85:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011e8d:	0f 87 81 03 00 00    	ja     c0012214 <scanMADT()+0x4d4>
c0011e93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e97:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011ea2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ea6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eaa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011eae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011eb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb6:	8d 50 01             	lea    edx,[eax+0x1]
c0011eb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ec1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ec5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011ec9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011ece:	0f 86 3c 03 00 00    	jbe    c0012210 <scanMADT()+0x4d0>
c0011ed4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011ed9:	75 59                	jne    c0011f34 <scanMADT()+0x1f4>
c0011edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011edf:	8d 50 01             	lea    edx,[eax+0x1]
c0011ee2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ee6:	8a 15 00 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028700
c0011eec:	0f b6 d2             	movzx  edx,dl
c0011eef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ef3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ef7:	88 82 40 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78c0],al
c0011efd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f01:	8d 50 01             	lea    edx,[eax+0x1]
c0011f04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f08:	8a 15 00 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028700
c0011f0e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f11:	88 0d 00 87 02 c0    	mov    BYTE PTR ds:0xc0028700,cl
c0011f17:	0f b6 d2             	movzx  edx,dl
c0011f1a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011f1e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011f22:	88 82 20 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78e0],al
c0011f28:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f2d:	e9 c6 02 00 00       	jmp    c00121f8 <scanMADT()+0x4b8>
c0011f32:	66 90                	xchg   ax,ax
c0011f34:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011f39:	0f 85 15 01 00 00    	jne    c0012054 <scanMADT()+0x314>
c0011f3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f43:	8d 50 01             	lea    edx,[eax+0x1]
c0011f46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f4a:	8a 15 c0 85 02 c0    	mov    dl,BYTE PTR ds:0xc00285c0
c0011f50:	0f b6 d2             	movzx  edx,dl
c0011f53:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011f57:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011f5b:	88 82 e0 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a20],al
c0011f61:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011f65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f6d:	01 d0                	add    eax,edx
c0011f6f:	83 c0 2c             	add    eax,0x2c
c0011f72:	8a 00                	mov    al,BYTE PTR [eax]
c0011f74:	0f b6 d0             	movzx  edx,al
c0011f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f7b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f82:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f86:	0f b6 c0             	movzx  eax,al
c0011f89:	c1 e0 08             	shl    eax,0x8
c0011f8c:	89 d1                	mov    ecx,edx
c0011f8e:	09 c1                	or     ecx,eax
c0011f90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f94:	8d 50 02             	lea    edx,[eax+0x2]
c0011f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f9b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f9f:	0f b6 c0             	movzx  eax,al
c0011fa2:	c1 e0 10             	shl    eax,0x10
c0011fa5:	09 c1                	or     ecx,eax
c0011fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fab:	8d 50 03             	lea    edx,[eax+0x3]
c0011fae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fb2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fb6:	0f b6 c0             	movzx  eax,al
c0011fb9:	c1 e0 18             	shl    eax,0x18
c0011fbc:	09 c1                	or     ecx,eax
c0011fbe:	89 ca                	mov    edx,ecx
c0011fc0:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0011fc5:	0f b6 c0             	movzx  eax,al
c0011fc8:	89 14 85 00 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7a00],edx
c0011fcf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011fd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fdc:	01 d0                	add    eax,edx
c0011fde:	83 c0 2c             	add    eax,0x2c
c0011fe1:	8a 00                	mov    al,BYTE PTR [eax]
c0011fe3:	0f b6 d0             	movzx  edx,al
c0011fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fea:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ff1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011ff5:	0f b6 c0             	movzx  eax,al
c0011ff8:	c1 e0 08             	shl    eax,0x8
c0011ffb:	89 d1                	mov    ecx,edx
c0011ffd:	09 c1                	or     ecx,eax
c0011fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012003:	8d 50 02             	lea    edx,[eax+0x2]
c0012006:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001200a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001200e:	0f b6 c0             	movzx  eax,al
c0012011:	c1 e0 10             	shl    eax,0x10
c0012014:	09 c1                	or     ecx,eax
c0012016:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001201a:	8d 50 03             	lea    edx,[eax+0x3]
c001201d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012021:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012025:	0f b6 c0             	movzx  eax,al
c0012028:	c1 e0 18             	shl    eax,0x18
c001202b:	09 c1                	or     ecx,eax
c001202d:	89 ca                	mov    edx,ecx
c001202f:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0012034:	0f b6 c0             	movzx  eax,al
c0012037:	89 14 85 80 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7980],edx
c001203e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012043:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0012048:	40                   	inc    eax
c0012049:	a2 c0 85 02 c0       	mov    ds:0xc00285c0,al
c001204e:	e9 a5 01 00 00       	jmp    c00121f8 <scanMADT()+0x4b8>
c0012053:	90                   	nop
c0012054:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012059:	0f 85 e9 00 00 00    	jne    c0012148 <scanMADT()+0x408>
c001205f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012063:	8d 50 01             	lea    edx,[eax+0x1]
c0012066:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001206a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001206e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012072:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012076:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001207a:	8d 50 01             	lea    edx,[eax+0x1]
c001207d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012081:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012085:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012089:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001208d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012091:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012095:	01 d0                	add    eax,edx
c0012097:	83 c0 2c             	add    eax,0x2c
c001209a:	8a 00                	mov    al,BYTE PTR [eax]
c001209c:	0f b6 d0             	movzx  edx,al
c001209f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00120a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120aa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00120ae:	0f b6 c0             	movzx  eax,al
c00120b1:	c1 e0 08             	shl    eax,0x8
c00120b4:	89 d1                	mov    ecx,edx
c00120b6:	09 c1                	or     ecx,eax
c00120b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120bc:	8d 50 02             	lea    edx,[eax+0x2]
c00120bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120c3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00120c7:	0f b6 c0             	movzx  eax,al
c00120ca:	c1 e0 10             	shl    eax,0x10
c00120cd:	09 c1                	or     ecx,eax
c00120cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120d3:	8d 50 03             	lea    edx,[eax+0x3]
c00120d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120da:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00120de:	0f b6 c0             	movzx  eax,al
c00120e1:	c1 e0 18             	shl    eax,0x18
c00120e4:	09 c8                	or     eax,ecx
c00120e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120ea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00120ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120f7:	01 d0                	add    eax,edx
c00120f9:	83 c0 2c             	add    eax,0x2c
c00120fc:	8a 00                	mov    al,BYTE PTR [eax]
c00120fe:	0f b6 c0             	movzx  eax,al
c0012101:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012105:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012108:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001210c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012110:	0f b6 d2             	movzx  edx,dl
c0012113:	c1 e2 08             	shl    edx,0x8
c0012116:	09 d0                	or     eax,edx
c0012118:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001211d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012122:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0012127:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001212b:	88 90 a0 73 02 c0    	mov    BYTE PTR [eax-0x3ffd8c60],dl
c0012131:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0012136:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001213b:	66 89 84 12 a0 85 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7a60],ax
c0012143:	e9 b0 00 00 00       	jmp    c00121f8 <scanMADT()+0x4b8>
c0012148:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001214d:	0f 85 99 00 00 00    	jne    c00121ec <scanMADT()+0x4ac>
c0012153:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012157:	8d 50 01             	lea    edx,[eax+0x1]
c001215a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001215e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012162:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012166:	0f b6 c0             	movzx  eax,al
c0012169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001216d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012171:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012175:	01 d0                	add    eax,edx
c0012177:	83 c0 2c             	add    eax,0x2c
c001217a:	8a 00                	mov    al,BYTE PTR [eax]
c001217c:	0f b6 d0             	movzx  edx,al
c001217f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012183:	8d 48 01             	lea    ecx,[eax+0x1]
c0012186:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001218a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	c1 e0 08             	shl    eax,0x8
c0012194:	09 d0                	or     eax,edx
c0012196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001219a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001219f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121a3:	8d 50 01             	lea    edx,[eax+0x1]
c00121a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00121b2:	0f b6 c0             	movzx  eax,al
c00121b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121bd:	c1 e0 08             	shl    eax,0x8
c00121c0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00121c4:	89 c1                	mov    ecx,eax
c00121c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ca:	c1 e0 18             	shl    eax,0x18
c00121cd:	89 c3                	mov    ebx,eax
c00121cf:	a1 10 85 02 c0       	mov    eax,ds:0xc0028510
c00121d4:	8d 50 01             	lea    edx,[eax+0x1]
c00121d7:	89 15 10 85 02 c0    	mov    DWORD PTR ds:0xc0028510,edx
c00121dd:	09 d9                	or     ecx,ebx
c00121df:	89 ca                	mov    edx,ecx
c00121e1:	89 14 85 20 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ae0],edx
c00121e8:	eb 0e                	jmp    c00121f8 <scanMADT()+0x4b8>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00121f1:	75 05                	jne    c00121f8 <scanMADT()+0x4b8>
c00121f3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00121f8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00121fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012201:	01 d0                	add    eax,edx
c0012203:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012207:	e9 68 fc ff ff       	jmp    c0011e74 <scanMADT()+0x134>
c001220c:	90                   	nop
c001220d:	eb 05                	jmp    c0012214 <scanMADT()+0x4d4>
c001220f:	90                   	nop
c0012210:	90                   	nop
c0012211:	8d 76 00             	lea    esi,[esi+0x0]
c0012214:	83 c4 38             	add    esp,0x38
c0012217:	5b                   	pop    ebx
c0012218:	c3                   	ret    
c0012219:	90                   	nop
c001221a:	66 90                	xchg   ax,ax

c001221c <ACPI::ACPI()>:
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012223:	83 ec 08             	sub    esp,0x8
c0012226:	68 ef 50 02 c0       	push   0xc00250ef
c001222b:	50                   	push   eax
c001222c:	e8 99 c4 ff ff       	call   c000e6ca <Device::Device(char const*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	ba b0 52 02 c0       	mov    edx,0xc00252b0
c0012239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223d:	89 10                	mov    DWORD PTR [eax],edx
c001223f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012243:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001224a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001224e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001225c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	68 f4 50 02 c0       	push   0xc00250f4
c001226e:	e8 ee 7a ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	e8 c5 fa ff ff       	call   c0011d40 <scanMADT()>
c001227b:	90                   	nop
c001227c:	83 c4 0c             	add    esp,0xc
c001227f:	c3                   	ret    

c0012280 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012280:	83 ec 2c             	sub    esp,0x2c
c0012283:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012287:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001228b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001228f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012293:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012298:	88 d0                	mov    al,dl
c001229a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001229e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00122a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00122ab:	90                   	nop
c00122ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122b0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00122b6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00122ba:	0f 8d 9c 00 00 00    	jge    c001235c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00122c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c8:	83 c2 2a             	add    edx,0x2a
c00122cb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00122cf:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00122d4:	75 7a                	jne    c0012350 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00122d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122de:	83 c2 2a             	add    edx,0x2a
c00122e1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00122e5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00122e9:	75 65                	jne    c0012350 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00122eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122f0:	74 3a                	je     c001232c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00122f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122fa:	83 c2 2a             	add    edx,0x2a
c00122fd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012305:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012308:	39 c2                	cmp    edx,eax
c001230a:	74 10                	je     c001231c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	68 48 4f 02 c0       	push   0xc0024f48
c0012314:	e8 58 2a 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	68 02 51 02 c0       	push   0xc0025102
c0012324:	e8 48 2a 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012330:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012338:	83 c2 2a             	add    edx,0x2a
c001233b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001233f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012341:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012344:	89 01                	mov    DWORD PTR [ecx],eax
c0012346:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012349:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001234e:	66 90                	xchg   ax,ax
c0012350:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012354:	e9 53 ff ff ff       	jmp    c00122ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012359:	8d 76 00             	lea    esi,[esi+0x0]
c001235c:	90                   	nop
c001235d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012361:	83 c4 2c             	add    esp,0x2c
c0012364:	c2 04 00             	ret    0x4
c0012367:	90                   	nop

c0012368 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012368:	83 ec 1c             	sub    esp,0x1c
c001236b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001236f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012373:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012377:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001237c:	88 c8                	mov    al,cl
c001237e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012382:	88 d0                	mov    al,dl
c0012384:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001238c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012396:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012399:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001239d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00123a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123a5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00123af:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00123b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123b6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00123bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123bf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00123c5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00123c9:	8d 48 01             	lea    ecx,[eax+0x1]
c00123cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123d0:	83 c2 2a             	add    edx,0x2a
c00123d3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00123d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00123e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123e5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00123e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00123ec:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00123f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123f4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123fa:	8d 50 01             	lea    edx,[eax+0x1]
c00123fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012401:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001240b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012411:	3d 00 02 00 00       	cmp    eax,0x200
c0012416:	75 10                	jne    c0012428 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	68 11 51 02 c0       	push   0xc0025111
c0012420:	e8 4c 29 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	90                   	nop
c0012429:	83 c4 1c             	add    esp,0x1c
c001242c:	c3                   	ret    
c001242d:	90                   	nop
c001242e:	66 90                	xchg   ax,ax

c0012430 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012430:	b8 00 00 00 00       	mov    eax,0x0
c0012435:	c3                   	ret    
c0012436:	66 90                	xchg   ax,ax

c0012438 <ACPI::detectPCI()>:
c0012438:	53                   	push   ebx
c0012439:	83 ec 68             	sub    esp,0x68
c001243c:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012441:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012446:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001244b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012451:	83 e0 04             	and    eax,0x4
c0012454:	84 c0                	test   al,al
c0012456:	74 2c                	je     c0012484 <ACPI::detectPCI()+0x4c>
c0012458:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c001245d:	83 ec 08             	sub    esp,0x8
c0012460:	68 2e 51 02 c0       	push   0xc002512e
c0012465:	50                   	push   eax
c0012466:	e8 5d f8 ff ff       	call   c0011cc8 <findDataTable(unsigned char*, char*)>
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0012472:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012477:	74 0b                	je     c0012484 <ACPI::detectPCI()+0x4c>
c0012479:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001247e:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012483:	90                   	nop
c0012484:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c001248c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012490:	8a 00                	mov    al,BYTE PTR [eax]
c0012492:	3c 01                	cmp    al,0x1
c0012494:	75 0e                	jne    c00124a4 <ACPI::detectPCI()+0x6c>
c0012496:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001249b:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00124a0:	eb 2a                	jmp    c00124cc <ACPI::detectPCI()+0x94>
c00124a2:	66 90                	xchg   ax,ax
c00124a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00124a8:	8a 00                	mov    al,BYTE PTR [eax]
c00124aa:	3c 02                	cmp    al,0x2
c00124ac:	75 1e                	jne    c00124cc <ACPI::detectPCI()+0x94>
c00124ae:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00124b3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124b8:	74 12                	je     c00124cc <ACPI::detectPCI()+0x94>
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	68 78 4f 02 c0       	push   0xc0024f78
c00124c2:	e8 aa 28 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	66 90                	xchg   ax,ax
c00124cc:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c00124d0:	83 f0 01             	xor    eax,0x1
c00124d3:	84 c0                	test   al,al
c00124d5:	74 41                	je     c0012518 <ACPI::detectPCI()+0xe0>
c00124d7:	e8 74 dc fe ff       	call   c0000150 <manualPCIProbe>
c00124dc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00124e0:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c00124e5:	75 0d                	jne    c00124f4 <ACPI::detectPCI()+0xbc>
c00124e7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00124ec:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00124f1:	eb 25                	jmp    c0012518 <ACPI::detectPCI()+0xe0>
c00124f3:	90                   	nop
c00124f4:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00124f9:	75 1d                	jne    c0012518 <ACPI::detectPCI()+0xe0>
c00124fb:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012500:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012505:	74 11                	je     c0012518 <ACPI::detectPCI()+0xe0>
c0012507:	83 ec 0c             	sub    esp,0xc
c001250a:	68 78 4f 02 c0       	push   0xc0024f78
c001250f:	e8 5d 28 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0012514:	83 c4 10             	add    esp,0x10
c0012517:	90                   	nop
c0012518:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001251d:	0f 84 49 03 00 00    	je     c001286c <ACPI::detectPCI()+0x434>
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	68 33 51 02 c0       	push   0xc0025133
c001252b:	e8 31 78 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012538:	0f 84 8e 00 00 00    	je     c00125cc <ACPI::detectPCI()+0x194>
c001253e:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012543:	25 00 08 00 00       	and    eax,0x800
c0012548:	0f 84 16 01 00 00    	je     c0012664 <ACPI::detectPCI()+0x22c>
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	68 a0 4f 02 c0       	push   0xc0024fa0
c0012556:	e8 06 78 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001255b:	83 c4 10             	add    esp,0x10
c001255e:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012563:	25 80 00 00 00       	and    eax,0x80
c0012568:	0f 85 f6 00 00 00    	jne    c0012664 <ACPI::detectPCI()+0x22c>
c001256e:	66 90                	xchg   ax,ax
c0012570:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012577:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c001257c:	89 c2                	mov    edx,eax
c001257e:	ec                   	in     al,dx
c001257f:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012583:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012587:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001258b:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012590:	74 0a                	je     c001259c <ACPI::detectPCI()+0x164>
c0012592:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012597:	74 03                	je     c001259c <ACPI::detectPCI()+0x164>
c0012599:	eb d5                	jmp    c0012570 <ACPI::detectPCI()+0x138>
c001259b:	90                   	nop
c001259c:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00125a3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00125a8:	89 c2                	mov    edx,eax
c00125aa:	ec                   	in     al,dx
c00125ab:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00125af:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00125b3:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00125b7:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00125bc:	74 de                	je     c001259c <ACPI::detectPCI()+0x164>
c00125be:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00125c3:	0f 85 93 00 00 00    	jne    c001265c <ACPI::detectPCI()+0x224>
c00125c9:	eb d1                	jmp    c001259c <ACPI::detectPCI()+0x164>
c00125cb:	90                   	nop
c00125cc:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00125d0:	83 f0 01             	xor    eax,0x1
c00125d3:	84 c0                	test   al,al
c00125d5:	0f 84 89 00 00 00    	je     c0012664 <ACPI::detectPCI()+0x22c>
c00125db:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00125e0:	25 00 08 00 00       	and    eax,0x800
c00125e5:	74 7d                	je     c0012664 <ACPI::detectPCI()+0x22c>
c00125e7:	83 ec 0c             	sub    esp,0xc
c00125ea:	68 c4 4f 02 c0       	push   0xc0024fc4
c00125ef:	e8 6d 77 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00125fc:	25 80 00 00 00       	and    eax,0x80
c0012601:	75 61                	jne    c0012664 <ACPI::detectPCI()+0x22c>
c0012603:	90                   	nop
c0012604:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001260b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012610:	89 c2                	mov    edx,eax
c0012612:	ec                   	in     al,dx
c0012613:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012617:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001261b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001261f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012624:	74 0a                	je     c0012630 <ACPI::detectPCI()+0x1f8>
c0012626:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001262b:	74 03                	je     c0012630 <ACPI::detectPCI()+0x1f8>
c001262d:	eb d5                	jmp    c0012604 <ACPI::detectPCI()+0x1cc>
c001262f:	90                   	nop
c0012630:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012637:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c001263c:	89 c2                	mov    edx,eax
c001263e:	ec                   	in     al,dx
c001263f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012643:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012647:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001264b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012650:	74 de                	je     c0012630 <ACPI::detectPCI()+0x1f8>
c0012652:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012657:	75 07                	jne    c0012660 <ACPI::detectPCI()+0x228>
c0012659:	eb d5                	jmp    c0012630 <ACPI::detectPCI()+0x1f8>
c001265b:	90                   	nop
c001265c:	90                   	nop
c001265d:	eb 05                	jmp    c0012664 <ACPI::detectPCI()+0x22c>
c001265f:	90                   	nop
c0012660:	90                   	nop
c0012661:	8d 76 00             	lea    esi,[esi+0x0]
c0012664:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c001266c:	83 ec 0c             	sub    esp,0xc
c001266f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012673:	e8 8f 76 ff ff       	call   c0009d07 <malloc>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	89 c3                	mov    ebx,eax
c001267d:	83 ec 0c             	sub    esp,0xc
c0012680:	53                   	push   ebx
c0012681:	e8 90 ac 00 00       	call   c001d316 <PCI::PCI()>
c0012686:	83 c4 10             	add    esp,0x10
c0012689:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c001268d:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012692:	25 00 08 00 00       	and    eax,0x800
c0012697:	74 7b                	je     c0012714 <ACPI::detectPCI()+0x2dc>
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	68 4b 51 02 c0       	push   0xc002514b
c00126a1:	e8 bb 76 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00126a6:	83 c4 10             	add    esp,0x10
c00126a9:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00126ae:	25 80 00 00 00       	and    eax,0x80
c00126b3:	75 5f                	jne    c0012714 <ACPI::detectPCI()+0x2dc>
c00126b5:	8d 76 00             	lea    esi,[esi+0x0]
c00126b8:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00126bf:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00126c4:	89 c2                	mov    edx,eax
c00126c6:	ec                   	in     al,dx
c00126c7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00126cb:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00126cf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00126d3:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c00126d8:	74 0a                	je     c00126e4 <ACPI::detectPCI()+0x2ac>
c00126da:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c00126df:	74 03                	je     c00126e4 <ACPI::detectPCI()+0x2ac>
c00126e1:	eb d5                	jmp    c00126b8 <ACPI::detectPCI()+0x280>
c00126e3:	90                   	nop
c00126e4:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c00126eb:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c00126f0:	89 c2                	mov    edx,eax
c00126f2:	ec                   	in     al,dx
c00126f3:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00126f7:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00126fb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00126ff:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012704:	74 de                	je     c00126e4 <ACPI::detectPCI()+0x2ac>
c0012706:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001270b:	75 03                	jne    c0012710 <ACPI::detectPCI()+0x2d8>
c001270d:	eb d5                	jmp    c00126e4 <ACPI::detectPCI()+0x2ac>
c001270f:	90                   	nop
c0012710:	90                   	nop
c0012711:	8d 76 00             	lea    esi,[esi+0x0]
c0012714:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012718:	83 ec 08             	sub    esp,0x8
c001271b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001271f:	50                   	push   eax
c0012720:	e8 a1 bd ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001272d:	25 00 08 00 00       	and    eax,0x800
c0012732:	74 78                	je     c00127ac <ACPI::detectPCI()+0x374>
c0012734:	83 ec 0c             	sub    esp,0xc
c0012737:	68 51 51 02 c0       	push   0xc0025151
c001273c:	e8 20 76 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012749:	25 80 00 00 00       	and    eax,0x80
c001274e:	75 5c                	jne    c00127ac <ACPI::detectPCI()+0x374>
c0012750:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012757:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001275c:	89 c2                	mov    edx,eax
c001275e:	ec                   	in     al,dx
c001275f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012763:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012767:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001276b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012770:	74 0a                	je     c001277c <ACPI::detectPCI()+0x344>
c0012772:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012777:	74 03                	je     c001277c <ACPI::detectPCI()+0x344>
c0012779:	eb d5                	jmp    c0012750 <ACPI::detectPCI()+0x318>
c001277b:	90                   	nop
c001277c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012783:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012788:	89 c2                	mov    edx,eax
c001278a:	ec                   	in     al,dx
c001278b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001278f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012793:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012797:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c001279c:	74 de                	je     c001277c <ACPI::detectPCI()+0x344>
c001279e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00127a3:	75 03                	jne    c00127a8 <ACPI::detectPCI()+0x370>
c00127a5:	eb d5                	jmp    c001277c <ACPI::detectPCI()+0x344>
c00127a7:	90                   	nop
c00127a8:	90                   	nop
c00127a9:	8d 76 00             	lea    esi,[esi+0x0]
c00127ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00127b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b2:	83 c0 08             	add    eax,0x8
c00127b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00127bc:	74 0a                	je     c00127c8 <ACPI::detectPCI()+0x390>
c00127be:	ba 01 00 00 00       	mov    edx,0x1
c00127c3:	eb 0b                	jmp    c00127d0 <ACPI::detectPCI()+0x398>
c00127c5:	8d 76 00             	lea    esi,[esi+0x0]
c00127c8:	ba 02 00 00 00       	mov    edx,0x2
c00127cd:	8d 76 00             	lea    esi,[esi+0x0]
c00127d0:	6a 00                	push   0x0
c00127d2:	6a 00                	push   0x0
c00127d4:	52                   	push   edx
c00127d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00127d9:	ff d0                	call   eax
c00127db:	83 c4 10             	add    esp,0x10
c00127de:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00127e3:	25 00 08 00 00       	and    eax,0x800
c00127e8:	0f 84 26 01 00 00    	je     c0012914 <ACPI::detectPCI()+0x4dc>
c00127ee:	83 ec 0c             	sub    esp,0xc
c00127f1:	68 57 51 02 c0       	push   0xc0025157
c00127f6:	e8 66 75 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012803:	25 80 00 00 00       	and    eax,0x80
c0012808:	0f 85 06 01 00 00    	jne    c0012914 <ACPI::detectPCI()+0x4dc>
c001280e:	66 90                	xchg   ax,ax
c0012810:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012817:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001281c:	89 c2                	mov    edx,eax
c001281e:	ec                   	in     al,dx
c001281f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012823:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012827:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001282b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012830:	74 0a                	je     c001283c <ACPI::detectPCI()+0x404>
c0012832:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012837:	74 03                	je     c001283c <ACPI::detectPCI()+0x404>
c0012839:	eb d5                	jmp    c0012810 <ACPI::detectPCI()+0x3d8>
c001283b:	90                   	nop
c001283c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012843:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012848:	89 c2                	mov    edx,eax
c001284a:	ec                   	in     al,dx
c001284b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001284f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012853:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012857:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001285c:	74 de                	je     c001283c <ACPI::detectPCI()+0x404>
c001285e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012863:	0f 85 a7 00 00 00    	jne    c0012910 <ACPI::detectPCI()+0x4d8>
c0012869:	eb d1                	jmp    c001283c <ACPI::detectPCI()+0x404>
c001286b:	90                   	nop
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	68 5d 51 02 c0       	push   0xc002515d
c0012874:	e8 9a a7 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	68 68 51 02 c0       	push   0xc0025168
c0012884:	e8 d8 74 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012894:	83 ec 0c             	sub    esp,0xc
c0012897:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001289b:	e8 67 74 ff ff       	call   c0009d07 <malloc>
c00128a0:	83 c4 10             	add    esp,0x10
c00128a3:	89 c3                	mov    ebx,eax
c00128a5:	83 ec 0c             	sub    esp,0xc
c00128a8:	53                   	push   ebx
c00128a9:	e8 d2 bb 00 00       	call   c001e480 <IDE::IDE()>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00128b5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00128b9:	83 ec 08             	sub    esp,0x8
c00128bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00128c0:	50                   	push   eax
c00128c1:	e8 00 bc ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c00128c6:	83 c4 10             	add    esp,0x10
c00128c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128cd:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00128d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128db:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00128e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128e8:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00128f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f7:	83 c0 08             	add    eax,0x8
c00128fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00128fc:	6a 00                	push   0x0
c00128fe:	6a 00                	push   0x0
c0012900:	6a 00                	push   0x0
c0012902:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012906:	ff d0                	call   eax
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	eb 07                	jmp    c0012914 <ACPI::detectPCI()+0x4dc>
c001290d:	8d 76 00             	lea    esi,[esi+0x0]
c0012910:	90                   	nop
c0012911:	8d 76 00             	lea    esi,[esi+0x0]
c0012914:	90                   	nop
c0012915:	83 c4 68             	add    esp,0x68
c0012918:	5b                   	pop    ebx
c0012919:	c3                   	ret    
c001291a:	66 90                	xchg   ax,ax

c001291c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001291c:	83 ec 1c             	sub    esp,0x1c
c001291f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012923:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012926:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001292a:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001292f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012934:	83 ec 08             	sub    esp,0x8
c0012937:	52                   	push   edx
c0012938:	50                   	push   eax
c0012939:	e8 dc 69 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c001293e:	83 c4 10             	add    esp,0x10
c0012941:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012945:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001294a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001294f:	83 ec 04             	sub    esp,0x4
c0012952:	6a 01                	push   0x1
c0012954:	52                   	push   edx
c0012955:	50                   	push   eax
c0012956:	e8 e5 6a ff ff       	call   c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>
c001295b:	83 c4 10             	add    esp,0x10
c001295e:	90                   	nop
c001295f:	83 c4 1c             	add    esp,0x1c
c0012962:	c3                   	ret    
c0012963:	90                   	nop

c0012964 <ACPI::sleep()>:
c0012964:	83 ec 0c             	sub    esp,0xc
c0012967:	83 ec 0c             	sub    esp,0xc
c001296a:	68 7d 51 02 c0       	push   0xc002517d
c001296f:	e8 9f a6 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c001297c:	85 c0                	test   eax,eax
c001297e:	74 18                	je     c0012998 <ACPI::sleep()+0x34>
c0012980:	83 ec 0c             	sub    esp,0xc
c0012983:	68 8a 51 02 c0       	push   0xc002518a
c0012988:	e8 86 a6 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c0012995:	ff d0                	call   eax
c0012997:	90                   	nop
c0012998:	90                   	nop
c0012999:	83 c4 0c             	add    esp,0xc
c001299c:	c3                   	ret    
c001299d:	90                   	nop
c001299e:	66 90                	xchg   ax,ax

c00129a0 <ACPI::open(int, int, void*)>:
c00129a0:	57                   	push   edi
c00129a1:	56                   	push   esi
c00129a2:	53                   	push   ebx
c00129a3:	81 ec 70 01 00 00    	sub    esp,0x170
c00129a9:	83 ec 0c             	sub    esp,0xc
c00129ac:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00129b3:	e8 80 fa ff ff       	call   c0012438 <ACPI::detectPCI()>
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	83 ec 0c             	sub    esp,0xc
c00129be:	68 e8 4f 02 c0       	push   0xc0024fe8
c00129c3:	e8 99 73 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	83 ec 0c             	sub    esp,0xc
c00129ce:	68 a4 51 02 c0       	push   0xc00251a4
c00129d3:	e8 a7 45 00 00       	call   c0016f7f <Thr::loadKernelSymbolTable(char const*)>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00129e3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00129ee:	83 ec 0c             	sub    esp,0xc
c00129f1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00129f8:	e8 0a 73 ff ff       	call   c0009d07 <malloc>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	89 c3                	mov    ebx,eax
c0012a02:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012a07:	83 ec 04             	sub    esp,0x4
c0012a0a:	50                   	push   eax
c0012a0b:	68 c2 51 02 c0       	push   0xc00251c2
c0012a10:	53                   	push   ebx
c0012a11:	e8 68 ab ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0012a16:	83 c4 10             	add    esp,0x10
c0012a19:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012a20:	83 ec 08             	sub    esp,0x8
c0012a23:	6a 01                	push   0x1
c0012a25:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012a2c:	e8 27 ac ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012a3b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012a43:	75 17                	jne    c0012a5c <ACPI::open(int, int, void*)+0xbc>
c0012a45:	83 ec 0c             	sub    esp,0xc
c0012a48:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012a4f:	e8 62 ac ff ff       	call   c000d6b6 <File::close()>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	eb 0b                	jmp    c0012a64 <ACPI::open(int, int, void*)+0xc4>
c0012a59:	8d 76 00             	lea    esi,[esi+0x0]
c0012a5c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012a64:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012a6c:	74 1e                	je     c0012a8c <ACPI::open(int, int, void*)+0xec>
c0012a6e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a77:	83 c0 08             	add    eax,0x8
c0012a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a7c:	83 ec 0c             	sub    esp,0xc
c0012a7f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012a86:	ff d0                	call   eax
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	90                   	nop
c0012a8c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012a93:	83 f0 01             	xor    eax,0x1
c0012a96:	84 c0                	test   al,al
c0012a98:	74 42                	je     c0012adc <ACPI::open(int, int, void*)+0x13c>
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	68 e0 51 02 c0       	push   0xc00251e0
c0012aa2:	e8 ba 72 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	83 ec 04             	sub    esp,0x4
c0012aad:	6a 0c                	push   0xc
c0012aaf:	68 fb 51 02 c0       	push   0xc00251fb
c0012ab4:	68 0c 52 02 c0       	push   0xc002520c
c0012ab9:	e8 2b 2b 00 00       	call   c00155e9 <Reg::readIntWithDefault(char*, char*, int)>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012ac8:	83 ec 0c             	sub    esp,0xc
c0012acb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012ad2:	e8 ec 93 ff ff       	call   c000bec3 <Virt::setupPageSwapping(int)>
c0012ad7:	83 c4 10             	add    esp,0x10
c0012ada:	66 90                	xchg   ax,ax
c0012adc:	83 ec 0c             	sub    esp,0xc
c0012adf:	68 66 39 02 c0       	push   0xc0023966
c0012ae4:	e8 78 72 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0012af2:	83 ec 08             	sub    esp,0x8
c0012af5:	6a 01                	push   0x1
c0012af7:	68 13 52 02 c0       	push   0xc0025213
c0012afc:	e8 f5 4e 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0012b01:	83 c4 10             	add    esp,0x10
c0012b04:	83 ec 08             	sub    esp,0x8
c0012b07:	53                   	push   ebx
c0012b08:	50                   	push   eax
c0012b09:	e8 19 51 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012b18:	83 ec 08             	sub    esp,0x8
c0012b1b:	6a 12                	push   0x12
c0012b1d:	50                   	push   eax
c0012b1e:	e8 27 bd ff ff       	call   c000e84a <getDevicesOfType(DeviceType)>
c0012b23:	83 c4 0c             	add    esp,0xc
c0012b26:	66 90                	xchg   ax,ax
c0012b28:	83 ec 0c             	sub    esp,0xc
c0012b2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b32:	50                   	push   eax
c0012b33:	e8 64 01 01 00       	call   c0022c9c <LinkedList<Device>::isEmpty()>
c0012b38:	83 c4 10             	add    esp,0x10
c0012b3b:	83 f0 01             	xor    eax,0x1
c0012b3e:	84 c0                	test   al,al
c0012b40:	0f 84 46 01 00 00    	je     c0012c8c <ACPI::open(int, int, void*)+0x2ec>
c0012b46:	83 ec 0c             	sub    esp,0xc
c0012b49:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b50:	50                   	push   eax
c0012b51:	e8 62 01 01 00       	call   c0022cb8 <LinkedList<Device>::getFirstElement()>
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012b60:	83 ec 0c             	sub    esp,0xc
c0012b63:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b6a:	50                   	push   eax
c0012b6b:	e8 50 01 01 00       	call   c0022cc0 <LinkedList<Device>::removeFirst()>
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012b7a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012b81:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012b88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012b8c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012b92:	ba 09 00 00 00       	mov    edx,0x9
c0012b97:	fc                   	cld    
c0012b98:	89 c7                	mov    edi,eax
c0012b9a:	89 de                	mov    esi,ebx
c0012b9c:	89 d1                	mov    ecx,edx
c0012b9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ba0:	83 ec 08             	sub    esp,0x8
c0012ba3:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012ba7:	50                   	push   eax
c0012ba8:	83 ec 24             	sub    esp,0x24
c0012bab:	89 e0                	mov    eax,esp
c0012bad:	89 c3                	mov    ebx,eax
c0012baf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012bb3:	ba 09 00 00 00       	mov    edx,0x9
c0012bb8:	89 df                	mov    edi,ebx
c0012bba:	89 c6                	mov    esi,eax
c0012bbc:	89 d1                	mov    ecx,edx
c0012bbe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012bc0:	e8 2f ac 00 00       	call   c001d7f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012bc5:	83 c4 30             	add    esp,0x30
c0012bc8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012bcf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012bd7:	0f 84 4b ff ff ff    	je     c0012b28 <ACPI::open(int, int, void*)+0x188>
c0012bdd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012be8:	83 ec 0c             	sub    esp,0xc
c0012beb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012bf2:	e8 10 71 ff ff       	call   c0009d07 <malloc>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	89 c3                	mov    ebx,eax
c0012bfc:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012c01:	83 ec 04             	sub    esp,0x4
c0012c04:	50                   	push   eax
c0012c05:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012c0c:	53                   	push   ebx
c0012c0d:	e8 6c a9 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012c1c:	83 ec 0c             	sub    esp,0xc
c0012c1f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012c26:	e8 9b ac ff ff       	call   c000d8c6 <File::exists()>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	84 c0                	test   al,al
c0012c30:	74 2a                	je     c0012c5c <ACPI::open(int, int, void*)+0x2bc>
c0012c32:	83 ec 08             	sub    esp,0x8
c0012c35:	6a 01                	push   0x1
c0012c37:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012c3e:	e8 b3 4d 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	83 ec 08             	sub    esp,0x8
c0012c49:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012c50:	50                   	push   eax
c0012c51:	e8 d1 4f 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	8d 76 00             	lea    esi,[esi+0x0]
c0012c5c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012c64:	0f 84 be fe ff ff    	je     c0012b28 <ACPI::open(int, int, void*)+0x188>
c0012c6a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c73:	83 c0 08             	add    eax,0x8
c0012c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012c82:	ff d0                	call   eax
c0012c84:	83 c4 10             	add    esp,0x10
c0012c87:	e9 9c fe ff ff       	jmp    c0012b28 <ACPI::open(int, int, void*)+0x188>
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012c96:	50                   	push   eax
c0012c97:	e8 fc ff 00 00       	call   c0022c98 <LinkedList<Device>::~LinkedList()>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0012ca5:	83 ec 08             	sub    esp,0x8
c0012ca8:	6a 01                	push   0x1
c0012caa:	68 2e 52 02 c0       	push   0xc002522e
c0012caf:	e8 42 4d 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	83 ec 08             	sub    esp,0x8
c0012cba:	53                   	push   ebx
c0012cbb:	50                   	push   eax
c0012cbc:	e8 66 4f 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0012cca:	83 ec 08             	sub    esp,0x8
c0012ccd:	6a 01                	push   0x1
c0012ccf:	68 4b 52 02 c0       	push   0xc002524b
c0012cd4:	e8 1d 4d 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	83 ec 08             	sub    esp,0x8
c0012cdf:	53                   	push   ebx
c0012ce0:	50                   	push   eax
c0012ce1:	e8 41 4f 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0012cee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012cf4:	83 e0 04             	and    eax,0x4
c0012cf7:	84 c0                	test   al,al
c0012cf9:	0f 84 15 01 00 00    	je     c0012e14 <ACPI::open(int, int, void*)+0x474>
c0012cff:	83 ec 0c             	sub    esp,0xc
c0012d02:	68 68 52 02 c0       	push   0xc0025268
c0012d07:	e8 55 70 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012d1a:	83 ec 0c             	sub    esp,0xc
c0012d1d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012d24:	e8 de 6f ff ff       	call   c0009d07 <malloc>
c0012d29:	83 c4 10             	add    esp,0x10
c0012d2c:	89 c3                	mov    ebx,eax
c0012d2e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012d33:	83 ec 04             	sub    esp,0x4
c0012d36:	50                   	push   eax
c0012d37:	68 85 52 02 c0       	push   0xc0025285
c0012d3c:	53                   	push   ebx
c0012d3d:	e8 3c a8 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012d4c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d54:	74 1a                	je     c0012d70 <ACPI::open(int, int, void*)+0x3d0>
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d60:	e8 61 ab ff ff       	call   c000d8c6 <File::exists()>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	84 c0                	test   al,al
c0012d6a:	74 04                	je     c0012d70 <ACPI::open(int, int, void*)+0x3d0>
c0012d6c:	b0 01                	mov    al,0x1
c0012d6e:	eb 04                	jmp    c0012d74 <ACPI::open(int, int, void*)+0x3d4>
c0012d70:	b0 00                	mov    al,0x0
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	84 c0                	test   al,al
c0012d76:	74 28                	je     c0012da0 <ACPI::open(int, int, void*)+0x400>
c0012d78:	83 ec 08             	sub    esp,0x8
c0012d7b:	6a 01                	push   0x1
c0012d7d:	68 85 52 02 c0       	push   0xc0025285
c0012d82:	e8 6f 4c 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c0012d87:	83 c4 10             	add    esp,0x10
c0012d8a:	83 ec 08             	sub    esp,0x8
c0012d8d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012d94:	50                   	push   eax
c0012d95:	e8 8d 4e 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012da0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012da8:	74 2a                	je     c0012dd4 <ACPI::open(int, int, void*)+0x434>
c0012daa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012db2:	74 20                	je     c0012dd4 <ACPI::open(int, int, void*)+0x434>
c0012db4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dbd:	83 c0 08             	add    eax,0x8
c0012dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc2:	83 ec 0c             	sub    esp,0xc
c0012dc5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012dcc:	ff d0                	call   eax
c0012dce:	83 c4 10             	add    esp,0x10
c0012dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012dd4:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0012dd9:	83 ec 08             	sub    esp,0x8
c0012ddc:	68 a2 52 02 c0       	push   0xc00252a2
c0012de1:	50                   	push   eax
c0012de2:	e8 e1 ee ff ff       	call   c0011cc8 <findDataTable(unsigned char*, char*)>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012df1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012df9:	74 19                	je     c0012e14 <ACPI::open(int, int, void*)+0x474>
c0012dfb:	83 ec 08             	sub    esp,0x8
c0012dfe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012e05:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012e0c:	e8 0b fb ff ff       	call   c001291c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	b8 00 00 00 00       	mov    eax,0x0
c0012e19:	81 c4 70 01 00 00    	add    esp,0x170
c0012e1f:	5b                   	pop    ebx
c0012e20:	5e                   	pop    esi
c0012e21:	5f                   	pop    edi
c0012e22:	c3                   	ret    
c0012e23:	90                   	nop

c0012e24 <CPU::close(int, int, void*)>:
c0012e24:	31 c0                	xor    eax,eax
c0012e26:	c3                   	ret    
c0012e27:	90                   	nop

c0012e28 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012e28:	55                   	push   ebp
c0012e29:	57                   	push   edi
c0012e2a:	56                   	push   esi
c0012e2b:	53                   	push   ebx
c0012e2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012e34:	89 ce                	mov    esi,ecx
c0012e36:	89 d5                	mov    ebp,edx
c0012e38:	80 f9 04             	cmp    cl,0x4
c0012e3b:	75 28                	jne    c0012e65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012e3d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012e40:	3c 03                	cmp    al,0x3
c0012e42:	0f 86 63 01 00 00    	jbe    c0012fab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012e48:	80 fa 03             	cmp    dl,0x3
c0012e4b:	0f 84 5a 01 00 00    	je     c0012fab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012e51:	8d 7a f2             	lea    edi,[edx-0xe]
c0012e54:	b8 70 75 02 c0       	mov    eax,0xc0027570
c0012e59:	89 fb                	mov    ebx,edi
c0012e5b:	80 fb 01             	cmp    bl,0x1
c0012e5e:	77 4e                	ja     c0012eae <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012e60:	e9 52 01 00 00       	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e65:	80 f9 05             	cmp    cl,0x5
c0012e68:	75 4d                	jne    c0012eb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012e6a:	b8 80 75 02 c0       	mov    eax,0xc0027580
c0012e6f:	80 fa 03             	cmp    dl,0x3
c0012e72:	0f 86 3f 01 00 00    	jbe    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e78:	8d 7a fa             	lea    edi,[edx-0x6]
c0012e7b:	b8 90 75 02 c0       	mov    eax,0xc0027590
c0012e80:	89 fb                	mov    ebx,edi
c0012e82:	80 fb 01             	cmp    bl,0x1
c0012e85:	0f 86 2c 01 00 00    	jbe    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e8b:	b8 a0 75 02 c0       	mov    eax,0xc00275a0
c0012e90:	80 fa 08             	cmp    dl,0x8
c0012e93:	0f 84 1e 01 00 00    	je     c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e99:	89 d7                	mov    edi,edx
c0012e9b:	b8 b0 75 02 c0       	mov    eax,0xc00275b0
c0012ea0:	83 e7 fb             	and    edi,0xfffffffb
c0012ea3:	89 fb                	mov    ebx,edi
c0012ea5:	80 fb 09             	cmp    bl,0x9
c0012ea8:	0f 84 09 01 00 00    	je     c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eae:	31 c0                	xor    eax,eax
c0012eb0:	89 eb                	mov    ebx,ebp
c0012eb2:	0f b6 fb             	movzx  edi,bl
c0012eb5:	eb 30                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012eb7:	31 c0                	xor    eax,eax
c0012eb9:	80 f9 06             	cmp    cl,0x6
c0012ebc:	75 f2                	jne    c0012eb0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012ebe:	80 fa 0a             	cmp    dl,0xa
c0012ec1:	77 ed                	ja     c0012eb0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012ec3:	bf de 05 00 00       	mov    edi,0x5de
c0012ec8:	0f a3 d7             	bt     edi,edx
c0012ecb:	73 e3                	jae    c0012eb0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012ecd:	b8 c0 75 02 c0       	mov    eax,0xc00275c0
c0012ed2:	e9 e0 00 00 00       	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ed7:	39 c7                	cmp    edi,eax
c0012ed9:	0f 84 d3 00 00 00    	je     c0012fb2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012edf:	40                   	inc    eax
c0012ee0:	3d d0 00 00 00       	cmp    eax,0xd0
c0012ee5:	74 09                	je     c0012ef0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012ee7:	89 f3                	mov    ebx,esi
c0012ee9:	80 fb 0f             	cmp    bl,0xf
c0012eec:	75 f1                	jne    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012eee:	eb e7                	jmp    c0012ed7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012ef0:	80 f9 10             	cmp    cl,0x10
c0012ef3:	75 14                	jne    c0012f09 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012ef5:	8d 42 fc             	lea    eax,[edx-0x4]
c0012ef8:	83 e0 fb             	and    eax,0xfffffffb
c0012efb:	3c 02                	cmp    al,0x2
c0012efd:	76 34                	jbe    c0012f33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012eff:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f04:	80 fa 02             	cmp    dl,0x2
c0012f07:	eb 24                	jmp    c0012f2d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012f09:	80 f9 11             	cmp    cl,0x11
c0012f0c:	75 13                	jne    c0012f21 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012f0e:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f13:	80 fa 03             	cmp    dl,0x3
c0012f16:	0f 85 9b 00 00 00    	jne    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f1c:	e9 91 00 00 00       	jmp    c0012fb2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012f21:	80 f9 12             	cmp    cl,0x12
c0012f24:	75 14                	jne    c0012f3a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012f26:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f2b:	fe ca                	dec    dl
c0012f2d:	0f 85 84 00 00 00    	jne    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f33:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0012f38:	eb 7d                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f3a:	80 f9 14             	cmp    cl,0x14
c0012f3d:	75 12                	jne    c0012f51 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012f3f:	4a                   	dec    edx
c0012f40:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f45:	80 fa 01             	cmp    dl,0x1
c0012f48:	77 6d                	ja     c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f4a:	b8 f0 75 02 c0       	mov    eax,0xc00275f0
c0012f4f:	eb 66                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f51:	80 f9 15             	cmp    cl,0x15
c0012f54:	75 31                	jne    c0012f87 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012f56:	b8 00 76 02 c0       	mov    eax,0xc0027600
c0012f5b:	80 fa 01             	cmp    dl,0x1
c0012f5e:	74 57                	je     c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f60:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f65:	80 fa 13             	cmp    dl,0x13
c0012f68:	76 0c                	jbe    c0012f76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012f6a:	80 fa 30             	cmp    dl,0x30
c0012f6d:	75 48                	jne    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f6f:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0012f74:	eb 41                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f76:	b9 04 00 09 00       	mov    ecx,0x90004
c0012f7b:	0f a3 d1             	bt     ecx,edx
c0012f7e:	73 37                	jae    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f80:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0012f85:	eb 30                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f87:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f8c:	80 f9 16             	cmp    cl,0x16
c0012f8f:	75 26                	jne    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f91:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0012f96:	84 d2                	test   dl,dl
c0012f98:	74 1d                	je     c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f9a:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0012f9f:	80 fa 30             	cmp    dl,0x30
c0012fa2:	75 13                	jne    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012fa4:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0012fa9:	eb 0c                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012fab:	b8 60 75 02 c0       	mov    eax,0xc0027560
c0012fb0:	eb 05                	jmp    c0012fb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012fb2:	b8 d0 75 02 c0       	mov    eax,0xc00275d0
c0012fb7:	5b                   	pop    ebx
c0012fb8:	5e                   	pop    esi
c0012fb9:	5f                   	pop    edi
c0012fba:	5d                   	pop    ebp
c0012fbb:	c3                   	ret    

c0012fbc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012fbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc4:	80 f9 04             	cmp    cl,0x4
c0012fc7:	75 6b                	jne    c0013034 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012fc9:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0012fce:	80 fa 01             	cmp    dl,0x1
c0012fd1:	0f 86 92 02 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd7:	b8 d0 73 02 c0       	mov    eax,0xc00273d0
c0012fdc:	80 fa 02             	cmp    dl,0x2
c0012fdf:	0f 84 84 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe5:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c0012fea:	80 fa 03             	cmp    dl,0x3
c0012fed:	0f 84 76 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff3:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c0012ff8:	80 fa 04             	cmp    dl,0x4
c0012ffb:	0f 84 68 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013001:	b8 00 74 02 c0       	mov    eax,0xc0027400
c0013006:	80 fa 05             	cmp    dl,0x5
c0013009:	0f 84 5a 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001300f:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c0013014:	80 fa 07             	cmp    dl,0x7
c0013017:	0f 84 4c 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001301d:	83 ea 08             	sub    edx,0x8
c0013020:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0013025:	80 fa 01             	cmp    dl,0x1
c0013028:	0f 87 3b 02 00 00    	ja     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302e:	b8 10 74 02 c0       	mov    eax,0xc0027410
c0013033:	c3                   	ret    
c0013034:	80 f9 05             	cmp    cl,0x5
c0013037:	75 45                	jne    c001307e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0013039:	8d 4a ff             	lea    ecx,[edx-0x1]
c001303c:	b8 20 74 02 c0       	mov    eax,0xc0027420
c0013041:	80 f9 02             	cmp    cl,0x2
c0013044:	0f 86 1f 02 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001304a:	80 fa 04             	cmp    dl,0x4
c001304d:	0f 84 f3 01 00 00    	je     c0013246 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0013053:	80 fa 07             	cmp    dl,0x7
c0013056:	0f 84 0d 02 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001305c:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0013061:	80 fa 08             	cmp    dl,0x8
c0013064:	0f 84 ff 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001306a:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c001306f:	80 fa 09             	cmp    dl,0x9
c0013072:	0f 85 f1 01 00 00    	jne    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013078:	b8 40 74 02 c0       	mov    eax,0xc0027440
c001307d:	c3                   	ret    
c001307e:	80 f9 06             	cmp    cl,0x6
c0013081:	0f 85 85 01 00 00    	jne    c001320c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0013087:	b8 50 74 02 c0       	mov    eax,0xc0027450
c001308c:	80 fa 01             	cmp    dl,0x1
c001308f:	0f 84 d4 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013095:	8d 42 fb             	lea    eax,[edx-0x5]
c0013098:	3c 01                	cmp    al,0x1
c001309a:	0f 86 ac 01 00 00    	jbe    c001324c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00130a0:	80 fa 03             	cmp    dl,0x3
c00130a3:	0f 84 a3 01 00 00    	je     c001324c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00130a9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00130ac:	b8 70 74 02 c0       	mov    eax,0xc0027470
c00130b1:	80 f9 01             	cmp    cl,0x1
c00130b4:	0f 86 af 01 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130ba:	80 fa 09             	cmp    dl,0x9
c00130bd:	0f 84 8f 01 00 00    	je     c0013252 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00130c3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00130c6:	80 f9 01             	cmp    cl,0x1
c00130c9:	0f 86 9a 01 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130cf:	b8 80 74 02 c0       	mov    eax,0xc0027480
c00130d4:	80 fa 0d             	cmp    dl,0xd
c00130d7:	0f 84 8c 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130dd:	b8 90 74 02 c0       	mov    eax,0xc0027490
c00130e2:	80 fa 0e             	cmp    dl,0xe
c00130e5:	0f 84 7e 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130eb:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c00130f0:	80 fa 0f             	cmp    dl,0xf
c00130f3:	0f 84 70 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f9:	b8 80 74 02 c0       	mov    eax,0xc0027480
c00130fe:	80 fa 15             	cmp    dl,0x15
c0013101:	0f 84 62 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013107:	8d 4a ea             	lea    ecx,[edx-0x16]
c001310a:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c001310f:	80 f9 01             	cmp    cl,0x1
c0013112:	0f 86 51 01 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013118:	80 fa 1a             	cmp    dl,0x1a
c001311b:	0f 84 37 01 00 00    	je     c0013258 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013121:	80 fa 1c             	cmp    dl,0x1c
c0013124:	0f 84 34 01 00 00    	je     c001325e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001312a:	80 fa 1d             	cmp    dl,0x1d
c001312d:	0f 84 36 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013133:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0013138:	80 fa 25             	cmp    dl,0x25
c001313b:	0f 84 28 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013141:	8d 4a da             	lea    ecx,[edx-0x26]
c0013144:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0013149:	80 f9 01             	cmp    cl,0x1
c001314c:	0f 86 17 01 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013152:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0013157:	80 fa 2a             	cmp    dl,0x2a
c001315a:	0f 84 09 01 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013160:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0013165:	80 fa 2c             	cmp    dl,0x2c
c0013168:	0f 84 fb 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001316e:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0013173:	80 fa 2d             	cmp    dl,0x2d
c0013176:	0f 84 ed 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001317c:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c0013181:	80 fa 2e             	cmp    dl,0x2e
c0013184:	0f 84 df 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001318a:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c001318f:	80 fa 2f             	cmp    dl,0x2f
c0013192:	0f 84 d1 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013198:	8d 4a cb             	lea    ecx,[edx-0x35]
c001319b:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c00131a0:	80 f9 01             	cmp    cl,0x1
c00131a3:	0f 86 c0 00 00 00    	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131a9:	b8 f0 74 02 c0       	mov    eax,0xc00274f0
c00131ae:	80 fa 37             	cmp    dl,0x37
c00131b1:	0f 84 b2 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131b7:	b8 00 75 02 c0       	mov    eax,0xc0027500
c00131bc:	80 fa 3a             	cmp    dl,0x3a
c00131bf:	0f 84 a4 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131c5:	b8 10 75 02 c0       	mov    eax,0xc0027510
c00131ca:	80 fa 3c             	cmp    dl,0x3c
c00131cd:	0f 84 96 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131d3:	b8 20 75 02 c0       	mov    eax,0xc0027520
c00131d8:	80 fa 3d             	cmp    dl,0x3d
c00131db:	0f 84 88 00 00 00    	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131e1:	b8 00 75 02 c0       	mov    eax,0xc0027500
c00131e6:	80 fa 3e             	cmp    dl,0x3e
c00131e9:	74 7e                	je     c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131eb:	8d 42 bb             	lea    eax,[edx-0x45]
c00131ee:	3c 01                	cmp    al,0x1
c00131f0:	76 72                	jbe    c0013264 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00131f2:	80 fa 3f             	cmp    dl,0x3f
c00131f5:	74 6d                	je     c0013264 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00131f7:	80 fa 4a             	cmp    dl,0x4a
c00131fa:	74 0a                	je     c0013206 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00131fc:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0013201:	80 fa 4d             	cmp    dl,0x4d
c0013204:	75 63                	jne    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013206:	b8 f0 74 02 c0       	mov    eax,0xc00274f0
c001320b:	c3                   	ret    
c001320c:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c0013211:	80 f9 0b             	cmp    cl,0xb
c0013214:	75 0a                	jne    c0013220 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013216:	fe ca                	dec    dl
c0013218:	75 4f                	jne    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001321a:	b8 30 75 02 c0       	mov    eax,0xc0027530
c001321f:	c3                   	ret    
c0013220:	80 f9 0f             	cmp    cl,0xf
c0013223:	75 44                	jne    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013225:	b8 40 75 02 c0       	mov    eax,0xc0027540
c001322a:	80 fa 02             	cmp    dl,0x2
c001322d:	76 3a                	jbe    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001322f:	8d 42 fd             	lea    eax,[edx-0x3]
c0013232:	3c 01                	cmp    al,0x1
c0013234:	76 0a                	jbe    c0013240 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013236:	b8 dd 55 02 c0       	mov    eax,0xc00255dd
c001323b:	80 fa 06             	cmp    dl,0x6
c001323e:	75 29                	jne    c0013269 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013240:	b8 50 75 02 c0       	mov    eax,0xc0027550
c0013245:	c3                   	ret    
c0013246:	b8 30 74 02 c0       	mov    eax,0xc0027430
c001324b:	c3                   	ret    
c001324c:	b8 60 74 02 c0       	mov    eax,0xc0027460
c0013251:	c3                   	ret    
c0013252:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0013257:	c3                   	ret    
c0013258:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c001325d:	c3                   	ret    
c001325e:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0013263:	c3                   	ret    
c0013264:	b8 10 75 02 c0       	mov    eax,0xc0027510
c0013269:	c3                   	ret    

c001326a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001326a:	60                   	pusha  
c001326b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001326f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013273:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013277:	9c                   	pushf  
c0013278:	fa                   	cli    
c0013279:	0f 09                	wbinvd 
c001327b:	0f 30                	wrmsr  
c001327d:	9d                   	popf   
c001327e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013282:	89 02                	mov    DWORD PTR [edx],eax
c0013284:	61                   	popa   
c0013285:	c3                   	ret    

c0013286 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013286:	60                   	pusha  
c0013287:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001328b:	9c                   	pushf  
c001328c:	fa                   	cli    
c001328d:	0f 09                	wbinvd 
c001328f:	31 c0                	xor    eax,eax
c0013291:	31 d2                	xor    edx,edx
c0013293:	0f 32                	rdmsr  
c0013295:	9d                   	popf   
c0013296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001329a:	89 02                	mov    DWORD PTR [edx],eax
c001329c:	61                   	popa   
c001329d:	c3                   	ret    

c001329e <CPU::AMD_K6_writeback(int, int, int)>:
c001329e:	56                   	push   esi
c001329f:	53                   	push   ebx
c00132a0:	83 ec 10             	sub    esp,0x10
c00132a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00132ac:	75 5d                	jne    c001330b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00132ae:	83 f8 08             	cmp    eax,0x8
c00132b1:	75 09                	jne    c00132bc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00132b3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00132b8:	7e 13                	jle    c00132cd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00132ba:	eb 30                	jmp    c00132ec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00132bc:	83 f8 06             	cmp    eax,0x6
c00132bf:	7c 4a                	jl     c001330b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00132c1:	83 f8 07             	cmp    eax,0x7
c00132c4:	7e 07                	jle    c00132cd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00132c6:	83 f8 09             	cmp    eax,0x9
c00132c9:	74 21                	je     c00132ec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00132cb:	eb 3e                	jmp    c001330b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00132cd:	89 e6                	mov    esi,esp
c00132cf:	8b 1d cc 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ccc
c00132d5:	56                   	push   esi
c00132d6:	c1 eb 15             	shr    ebx,0x15
c00132d9:	68 82 00 00 c0       	push   0xc0000082
c00132de:	83 e3 7e             	and    ebx,0x7e
c00132e1:	e8 a0 ff ff ff       	call   c0013286 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00132e6:	56                   	push   esi
c00132e7:	6a 00                	push   0x0
c00132e9:	53                   	push   ebx
c00132ea:	eb 12                	jmp    c00132fe <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00132ec:	89 e3                	mov    ebx,esp
c00132ee:	53                   	push   ebx
c00132ef:	68 82 00 00 c0       	push   0xc0000082
c00132f4:	e8 8d ff ff ff       	call   c0013286 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00132f9:	53                   	push   ebx
c00132fa:	6a 00                	push   0x0
c00132fc:	6a 00                	push   0x0
c00132fe:	68 82 00 00 c0       	push   0xc0000082
c0013303:	e8 62 ff ff ff       	call   c001326a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013308:	83 c4 18             	add    esp,0x18
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	5b                   	pop    ebx
c001330f:	5e                   	pop    esi
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013312:	55                   	push   ebp
c0013313:	57                   	push   edi
c0013314:	56                   	push   esi
c0013315:	53                   	push   ebx
c0013316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001331a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001331e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013322:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013326:	39 05 60 76 02 c0    	cmp    DWORD PTR ds:0xc0027660,eax
c001332c:	75 23                	jne    c0013351 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001332e:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c0013333:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013337:	89 06                	mov    DWORD PTR [esi],eax
c0013339:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c001333e:	89 07                	mov    DWORD PTR [edi],eax
c0013340:	a1 64 87 02 c0       	mov    eax,ds:0xc0028764
c0013345:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013348:	a1 60 87 02 c0       	mov    eax,ds:0xc0028760
c001334d:	89 02                	mov    DWORD PTR [edx],eax
c001334f:	eb 3f                	jmp    c0013390 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013351:	31 c9                	xor    ecx,ecx
c0013353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013357:	0f a2                	cpuid  
c0013359:	89 06                	mov    DWORD PTR [esi],eax
c001335b:	89 1f                	mov    DWORD PTR [edi],ebx
c001335d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013361:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013364:	89 10                	mov    DWORD PTR [eax],edx
c0013366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001336a:	a3 60 76 02 c0       	mov    ds:0xc0027660,eax
c001336f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013371:	a3 6c 87 02 c0       	mov    ds:0xc002876c,eax
c0013376:	8b 07                	mov    eax,DWORD PTR [edi]
c0013378:	a3 68 87 02 c0       	mov    ds:0xc0028768,eax
c001337d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013380:	a3 64 87 02 c0       	mov    ds:0xc0028764,eax
c0013385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013389:	8b 00                	mov    eax,DWORD PTR [eax]
c001338b:	a3 60 87 02 c0       	mov    ds:0xc0028760,eax
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <CPU::cpuidCheckEDX(unsigned int)>:
c0013396:	83 ec 10             	sub    esp,0x10
c0013399:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001339d:	50                   	push   eax
c001339e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a2:	50                   	push   eax
c00133a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a7:	50                   	push   eax
c00133a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133ac:	50                   	push   eax
c00133ad:	6a 01                	push   0x1
c00133af:	e8 5e ff ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133b8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00133bc:	0f 95 c0             	setne  al
c00133bf:	83 c4 24             	add    esp,0x24
c00133c2:	c3                   	ret    
c00133c3:	90                   	nop

c00133c4 <CPU::cpuidCheckECX(unsigned int)>:
c00133c4:	83 ec 10             	sub    esp,0x10
c00133c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133cb:	50                   	push   eax
c00133cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133d0:	50                   	push   eax
c00133d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133d5:	50                   	push   eax
c00133d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133da:	50                   	push   eax
c00133db:	6a 01                	push   0x1
c00133dd:	e8 30 ff ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133e6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00133ea:	0f 95 c0             	setne  al
c00133ed:	83 c4 24             	add    esp,0x24
c00133f0:	c3                   	ret    
c00133f1:	90                   	nop

c00133f2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00133f2:	83 ec 10             	sub    esp,0x10
c00133f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133f9:	50                   	push   eax
c00133fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133fe:	50                   	push   eax
c00133ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013403:	50                   	push   eax
c0013404:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013408:	50                   	push   eax
c0013409:	6a 07                	push   0x7
c001340b:	e8 02 ff ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013410:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013414:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013418:	0f 95 c0             	setne  al
c001341b:	83 c4 24             	add    esp,0x24
c001341e:	c3                   	ret    
c001341f:	90                   	nop

c0013420 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013420:	83 ec 10             	sub    esp,0x10
c0013423:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013427:	50                   	push   eax
c0013428:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001342c:	50                   	push   eax
c001342d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013431:	50                   	push   eax
c0013432:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013436:	50                   	push   eax
c0013437:	6a 07                	push   0x7
c0013439:	e8 d4 fe ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001343e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013442:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013446:	0f 95 c0             	setne  al
c0013449:	83 c4 24             	add    esp,0x24
c001344c:	c3                   	ret    
c001344d:	90                   	nop

c001344e <CPU::CPU()>:
c001344e:	83 ec 0c             	sub    esp,0xc
c0013451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013455:	83 ec 08             	sub    esp,0x8
c0013458:	68 dd 55 02 c0       	push   0xc00255dd
c001345d:	50                   	push   eax
c001345e:	e8 67 b2 ff ff       	call   c000e6ca <Device::Device(char const*)>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	ba 40 58 02 c0       	mov    edx,0xc0025840
c001346b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346f:	89 10                	mov    DWORD PTR [eax],edx
c0013471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013475:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001347f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013483:	05 78 01 00 00       	add    eax,0x178
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	50                   	push   eax
c001348c:	e8 99 60 ff ff       	call   c000952a <GDT::GDT()>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013498:	05 7c 09 00 00       	add    eax,0x97c
c001349d:	83 ec 0c             	sub    esp,0xc
c00134a0:	50                   	push   eax
c00134a1:	e8 4e 63 ff ff       	call   c00097f4 <IDT::IDT()>
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ad:	05 7c 11 00 00       	add    eax,0x117c
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	50                   	push   eax
c00134b6:	e8 41 81 ff ff       	call   c000b5fc <TSS::TSS()>
c00134bb:	83 c4 10             	add    esp,0x10
c00134be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00134c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00134d7:	90                   	nop
c00134d8:	83 c4 0c             	add    esp,0xc
c00134db:	c3                   	ret    

c00134dc <CPU::displayFeatures()>:
c00134dc:	53                   	push   ebx
c00134dd:	83 ec 10             	sub    esp,0x10
c00134e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00134ea:	68 d4 52 02 c0       	push   0xc00252d4
c00134ef:	e8 1f 9b ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00134f4:	58                   	pop    eax
c00134f5:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00134fb:	5a                   	pop    edx
c00134fc:	50                   	push   eax
c00134fd:	68 e5 52 02 c0       	push   0xc00252e5
c0013502:	e8 0c 9b ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013507:	59                   	pop    ecx
c0013508:	58                   	pop    eax
c0013509:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001350f:	c1 e8 0e             	shr    eax,0xe
c0013512:	0f b6 c0             	movzx  eax,al
c0013515:	50                   	push   eax
c0013516:	68 f6 52 02 c0       	push   0xc00252f6
c001351b:	e8 f3 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013520:	58                   	pop    eax
c0013521:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013527:	5a                   	pop    edx
c0013528:	66 c1 e8 06          	shr    ax,0x6
c001352c:	0f b6 c0             	movzx  eax,al
c001352f:	50                   	push   eax
c0013530:	68 07 53 02 c0       	push   0xc0025307
c0013535:	e8 d9 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001353a:	c7 04 24 07 59 02 c0 	mov    DWORD PTR [esp],0xc0025907
c0013541:	e8 cd 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c001354e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013555:	74 05                	je     c001355c <CPU::displayFeatures()+0x80>
c0013557:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c001355c:	51                   	push   ecx
c001355d:	51                   	push   ecx
c001355e:	50                   	push   eax
c001355f:	68 18 53 02 c0       	push   0xc0025318
c0013564:	e8 aa 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013569:	83 c4 10             	add    esp,0x10
c001356c:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013571:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013578:	78 05                	js     c001357f <CPU::displayFeatures()+0xa3>
c001357a:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c001357f:	52                   	push   edx
c0013580:	52                   	push   edx
c0013581:	50                   	push   eax
c0013582:	68 2f 53 02 c0       	push   0xc002532f
c0013587:	e8 87 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013594:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001359b:	75 05                	jne    c00135a2 <CPU::displayFeatures()+0xc6>
c001359d:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00135a2:	51                   	push   ecx
c00135a3:	51                   	push   ecx
c00135a4:	50                   	push   eax
c00135a5:	68 46 53 02 c0       	push   0xc0025346
c00135aa:	e8 64 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00135b7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00135be:	75 05                	jne    c00135c5 <CPU::displayFeatures()+0xe9>
c00135c0:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00135c5:	52                   	push   edx
c00135c6:	52                   	push   edx
c00135c7:	50                   	push   eax
c00135c8:	68 5d 53 02 c0       	push   0xc002535d
c00135cd:	e8 41 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00135da:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00135e1:	75 05                	jne    c00135e8 <CPU::displayFeatures()+0x10c>
c00135e3:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00135e8:	51                   	push   ecx
c00135e9:	51                   	push   ecx
c00135ea:	50                   	push   eax
c00135eb:	68 74 53 02 c0       	push   0xc0025374
c00135f0:	e8 1e 9a ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00135fd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013604:	75 05                	jne    c001360b <CPU::displayFeatures()+0x12f>
c0013606:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c001360b:	52                   	push   edx
c001360c:	52                   	push   edx
c001360d:	50                   	push   eax
c001360e:	68 8b 53 02 c0       	push   0xc002538b
c0013613:	e8 fb 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013618:	83 c4 10             	add    esp,0x10
c001361b:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013620:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013627:	75 05                	jne    c001362e <CPU::displayFeatures()+0x152>
c0013629:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c001362e:	51                   	push   ecx
c001362f:	51                   	push   ecx
c0013630:	50                   	push   eax
c0013631:	68 a2 53 02 c0       	push   0xc00253a2
c0013636:	e8 d8 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001363b:	83 c4 10             	add    esp,0x10
c001363e:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013643:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001364a:	75 05                	jne    c0013651 <CPU::displayFeatures()+0x175>
c001364c:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013651:	52                   	push   edx
c0013652:	52                   	push   edx
c0013653:	50                   	push   eax
c0013654:	68 b9 53 02 c0       	push   0xc00253b9
c0013659:	e8 b5 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001365e:	83 c4 10             	add    esp,0x10
c0013661:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013666:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001366d:	75 05                	jne    c0013674 <CPU::displayFeatures()+0x198>
c001366f:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013674:	51                   	push   ecx
c0013675:	51                   	push   ecx
c0013676:	50                   	push   eax
c0013677:	68 d0 53 02 c0       	push   0xc00253d0
c001367c:	e8 92 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013689:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013690:	75 05                	jne    c0013697 <CPU::displayFeatures()+0x1bb>
c0013692:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013697:	52                   	push   edx
c0013698:	52                   	push   edx
c0013699:	50                   	push   eax
c001369a:	68 e7 53 02 c0       	push   0xc00253e7
c001369f:	e8 6f 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00136ac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00136b3:	75 05                	jne    c00136ba <CPU::displayFeatures()+0x1de>
c00136b5:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00136ba:	51                   	push   ecx
c00136bb:	51                   	push   ecx
c00136bc:	50                   	push   eax
c00136bd:	68 fe 53 02 c0       	push   0xc00253fe
c00136c2:	e8 4c 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00136c7:	83 c4 10             	add    esp,0x10
c00136ca:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00136cf:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00136d6:	75 05                	jne    c00136dd <CPU::displayFeatures()+0x201>
c00136d8:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c00136dd:	52                   	push   edx
c00136de:	52                   	push   edx
c00136df:	50                   	push   eax
c00136e0:	68 15 54 02 c0       	push   0xc0025415
c00136e5:	e8 29 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c00136f2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00136f9:	75 05                	jne    c0013700 <CPU::displayFeatures()+0x224>
c00136fb:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013700:	51                   	push   ecx
c0013701:	51                   	push   ecx
c0013702:	50                   	push   eax
c0013703:	68 2c 54 02 c0       	push   0xc002542c
c0013708:	e8 06 99 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013715:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001371c:	78 05                	js     c0013723 <CPU::displayFeatures()+0x247>
c001371e:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013723:	52                   	push   edx
c0013724:	52                   	push   edx
c0013725:	50                   	push   eax
c0013726:	68 43 54 02 c0       	push   0xc0025443
c001372b:	e8 e3 98 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c0013738:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001373f:	75 05                	jne    c0013746 <CPU::displayFeatures()+0x26a>
c0013741:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013746:	51                   	push   ecx
c0013747:	51                   	push   ecx
c0013748:	50                   	push   eax
c0013749:	68 5a 54 02 c0       	push   0xc002545a
c001374e:	e8 c0 98 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013753:	83 c4 10             	add    esp,0x10
c0013756:	b8 e1 39 02 c0       	mov    eax,0xc00239e1
c001375b:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013762:	75 05                	jne    c0013769 <CPU::displayFeatures()+0x28d>
c0013764:	b8 e5 39 02 c0       	mov    eax,0xc00239e5
c0013769:	52                   	push   edx
c001376a:	52                   	push   edx
c001376b:	50                   	push   eax
c001376c:	68 71 54 02 c0       	push   0xc0025471
c0013771:	e8 9d 98 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0013776:	83 c4 18             	add    esp,0x18
c0013779:	5b                   	pop    ebx
c001377a:	c3                   	ret    
c001377b:	90                   	nop

c001377c <CPU::detectFeatures()>:
c001377c:	55                   	push   ebp
c001377d:	57                   	push   edi
c001377e:	56                   	push   esi
c001377f:	53                   	push   ebx
c0013780:	83 ec 50             	sub    esp,0x50
c0013783:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013787:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013791:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013798:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001379e:	6a 0d                	push   0xd
c00137a0:	6a 00                	push   0x0
c00137a2:	55                   	push   ebp
c00137a3:	e8 d4 ce fe ff       	call   c000067c <memset>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00137b0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00137b7:	0f 84 22 09 00 00    	je     c00140df <CPU::detectFeatures()+0x963>
c00137bd:	83 ec 0c             	sub    esp,0xc
c00137c0:	89 ef                	mov    edi,ebp
c00137c2:	6a 10                	push   0x10
c00137c4:	e8 cd fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c00137c9:	83 e0 01             	and    eax,0x1
c00137cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00137cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137d5:	83 e0 fd             	and    eax,0xfffffffd
c00137d8:	09 d0                	or     eax,edx
c00137da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137e0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00137e7:	e8 aa fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c00137ec:	83 e0 01             	and    eax,0x1
c00137ef:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00137f6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137fc:	83 e0 fb             	and    eax,0xfffffffb
c00137ff:	09 d0                	or     eax,edx
c0013801:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013807:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001380e:	e8 83 fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0013813:	83 e0 01             	and    eax,0x1
c0013816:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001381d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013823:	83 e0 f7             	and    eax,0xfffffff7
c0013826:	09 d0                	or     eax,edx
c0013828:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001382e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013835:	e8 5c fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c001383a:	83 e0 01             	and    eax,0x1
c001383d:	c1 e0 04             	shl    eax,0x4
c0013840:	88 c2                	mov    dl,al
c0013842:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013848:	83 e0 ef             	and    eax,0xffffffef
c001384b:	09 d0                	or     eax,edx
c001384d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013853:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001385a:	e8 37 fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c001385f:	83 e0 01             	and    eax,0x1
c0013862:	c1 e0 05             	shl    eax,0x5
c0013865:	88 c2                	mov    dl,al
c0013867:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001386d:	83 e0 df             	and    eax,0xffffffdf
c0013870:	09 d0                	or     eax,edx
c0013872:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013878:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001387f:	e8 12 fb ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c0013884:	83 e0 01             	and    eax,0x1
c0013887:	8d 14 00             	lea    edx,[eax+eax*1]
c001388a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013890:	83 e0 fd             	and    eax,0xfffffffd
c0013893:	09 d0                	or     eax,edx
c0013895:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001389b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00138a2:	e8 ef fa ff ff       	call   c0013396 <CPU::cpuidCheckEDX(unsigned int)>
c00138a7:	83 e0 01             	and    eax,0x1
c00138aa:	c1 e0 06             	shl    eax,0x6
c00138ad:	88 c2                	mov    dl,al
c00138af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00138b5:	83 e0 bf             	and    eax,0xffffffbf
c00138b8:	09 d0                	or     eax,edx
c00138ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00138c0:	58                   	pop    eax
c00138c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138c5:	50                   	push   eax
c00138c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138ca:	50                   	push   eax
c00138cb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00138cf:	56                   	push   esi
c00138d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138d4:	50                   	push   eax
c00138d5:	6a 00                	push   0x0
c00138d7:	e8 36 fa ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138dc:	b8 04 00 00 00       	mov    eax,0x4
c00138e1:	89 c1                	mov    ecx,eax
c00138e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138e5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00138eb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00138ef:	89 c1                	mov    ecx,eax
c00138f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138f3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00138f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138fd:	89 c1                	mov    ecx,eax
c00138ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013901:	83 c4 18             	add    esp,0x18
c0013904:	68 88 54 02 c0       	push   0xc0025488
c0013909:	55                   	push   ebp
c001390a:	e8 b5 ce fe ff       	call   c00007c4 <strcmp>
c001390f:	83 c4 10             	add    esp,0x10
c0013912:	85 c0                	test   eax,eax
c0013914:	75 0f                	jne    c0013925 <CPU::detectFeatures()+0x1a9>
c0013916:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013920:	e9 22 02 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013925:	50                   	push   eax
c0013926:	50                   	push   eax
c0013927:	68 95 54 02 c0       	push   0xc0025495
c001392c:	55                   	push   ebp
c001392d:	e8 92 ce fe ff       	call   c00007c4 <strcmp>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	85 c0                	test   eax,eax
c0013937:	74 dd                	je     c0013916 <CPU::detectFeatures()+0x19a>
c0013939:	50                   	push   eax
c001393a:	50                   	push   eax
c001393b:	68 a2 54 02 c0       	push   0xc00254a2
c0013940:	55                   	push   ebp
c0013941:	e8 7e ce fe ff       	call   c00007c4 <strcmp>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	85 c0                	test   eax,eax
c001394b:	74 2a                	je     c0013977 <CPU::detectFeatures()+0x1fb>
c001394d:	50                   	push   eax
c001394e:	50                   	push   eax
c001394f:	68 af 54 02 c0       	push   0xc00254af
c0013954:	55                   	push   ebp
c0013955:	e8 6a ce fe ff       	call   c00007c4 <strcmp>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	85 c0                	test   eax,eax
c001395f:	74 16                	je     c0013977 <CPU::detectFeatures()+0x1fb>
c0013961:	50                   	push   eax
c0013962:	50                   	push   eax
c0013963:	68 bc 54 02 c0       	push   0xc00254bc
c0013968:	55                   	push   ebp
c0013969:	e8 56 ce fe ff       	call   c00007c4 <strcmp>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	85 c0                	test   eax,eax
c0013973:	74 48                	je     c00139bd <CPU::detectFeatures()+0x241>
c0013975:	eb 0f                	jmp    c0013986 <CPU::detectFeatures()+0x20a>
c0013977:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013981:	e9 c1 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013986:	50                   	push   eax
c0013987:	50                   	push   eax
c0013988:	68 c9 54 02 c0       	push   0xc00254c9
c001398d:	55                   	push   ebp
c001398e:	e8 31 ce fe ff       	call   c00007c4 <strcmp>
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	85 c0                	test   eax,eax
c0013998:	74 23                	je     c00139bd <CPU::detectFeatures()+0x241>
c001399a:	57                   	push   edi
c001399b:	57                   	push   edi
c001399c:	68 d6 54 02 c0       	push   0xc00254d6
c00139a1:	55                   	push   ebp
c00139a2:	e8 1d ce fe ff       	call   c00007c4 <strcmp>
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	85 c0                	test   eax,eax
c00139ac:	75 1e                	jne    c00139cc <CPU::detectFeatures()+0x250>
c00139ae:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00139b8:	e9 8a 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c00139bd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00139c7:	e9 7b 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c00139cc:	56                   	push   esi
c00139cd:	56                   	push   esi
c00139ce:	68 e3 54 02 c0       	push   0xc00254e3
c00139d3:	55                   	push   ebp
c00139d4:	e8 eb cd fe ff       	call   c00007c4 <strcmp>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	85 c0                	test   eax,eax
c00139de:	75 0f                	jne    c00139ef <CPU::detectFeatures()+0x273>
c00139e0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00139ea:	e9 58 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c00139ef:	51                   	push   ecx
c00139f0:	51                   	push   ecx
c00139f1:	68 a2 54 02 c0       	push   0xc00254a2
c00139f6:	55                   	push   ebp
c00139f7:	e8 c8 cd fe ff       	call   c00007c4 <strcmp>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	85 c0                	test   eax,eax
c0013a01:	75 0f                	jne    c0013a12 <CPU::detectFeatures()+0x296>
c0013a03:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013a0d:	e9 35 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013a12:	52                   	push   edx
c0013a13:	52                   	push   edx
c0013a14:	68 f0 54 02 c0       	push   0xc00254f0
c0013a19:	55                   	push   ebp
c0013a1a:	e8 a5 cd fe ff       	call   c00007c4 <strcmp>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	85 c0                	test   eax,eax
c0013a24:	75 0f                	jne    c0013a35 <CPU::detectFeatures()+0x2b9>
c0013a26:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013a30:	e9 12 01 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013a35:	50                   	push   eax
c0013a36:	50                   	push   eax
c0013a37:	68 fd 54 02 c0       	push   0xc00254fd
c0013a3c:	55                   	push   ebp
c0013a3d:	e8 82 cd fe ff       	call   c00007c4 <strcmp>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	85 c0                	test   eax,eax
c0013a47:	75 0f                	jne    c0013a58 <CPU::detectFeatures()+0x2dc>
c0013a49:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013a53:	e9 ef 00 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013a58:	50                   	push   eax
c0013a59:	50                   	push   eax
c0013a5a:	68 0a 55 02 c0       	push   0xc002550a
c0013a5f:	55                   	push   ebp
c0013a60:	e8 5f cd fe ff       	call   c00007c4 <strcmp>
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	85 c0                	test   eax,eax
c0013a6a:	75 0f                	jne    c0013a7b <CPU::detectFeatures()+0x2ff>
c0013a6c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013a76:	e9 cc 00 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013a7b:	50                   	push   eax
c0013a7c:	50                   	push   eax
c0013a7d:	68 17 55 02 c0       	push   0xc0025517
c0013a82:	55                   	push   ebp
c0013a83:	e8 3c cd fe ff       	call   c00007c4 <strcmp>
c0013a88:	83 c4 10             	add    esp,0x10
c0013a8b:	85 c0                	test   eax,eax
c0013a8d:	75 0f                	jne    c0013a9e <CPU::detectFeatures()+0x322>
c0013a8f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013a99:	e9 a9 00 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013a9e:	50                   	push   eax
c0013a9f:	50                   	push   eax
c0013aa0:	68 24 55 02 c0       	push   0xc0025524
c0013aa5:	55                   	push   ebp
c0013aa6:	e8 19 cd fe ff       	call   c00007c4 <strcmp>
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	85 c0                	test   eax,eax
c0013ab0:	75 0f                	jne    c0013ac1 <CPU::detectFeatures()+0x345>
c0013ab2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013abc:	e9 86 00 00 00       	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013ac1:	50                   	push   eax
c0013ac2:	50                   	push   eax
c0013ac3:	68 31 55 02 c0       	push   0xc0025531
c0013ac8:	55                   	push   ebp
c0013ac9:	e8 f6 cc fe ff       	call   c00007c4 <strcmp>
c0013ace:	83 c4 10             	add    esp,0x10
c0013ad1:	85 c0                	test   eax,eax
c0013ad3:	75 0c                	jne    c0013ae1 <CPU::detectFeatures()+0x365>
c0013ad5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013adf:	eb 66                	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013ae1:	50                   	push   eax
c0013ae2:	50                   	push   eax
c0013ae3:	68 3e 55 02 c0       	push   0xc002553e
c0013ae8:	55                   	push   ebp
c0013ae9:	e8 d6 cc fe ff       	call   c00007c4 <strcmp>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	85 c0                	test   eax,eax
c0013af3:	75 0c                	jne    c0013b01 <CPU::detectFeatures()+0x385>
c0013af5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013aff:	eb 46                	jmp    c0013b47 <CPU::detectFeatures()+0x3cb>
c0013b01:	57                   	push   edi
c0013b02:	57                   	push   edi
c0013b03:	68 4b 55 02 c0       	push   0xc002554b
c0013b08:	55                   	push   ebp
c0013b09:	e8 b6 cc fe ff       	call   c00007c4 <strcmp>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	85 c0                	test   eax,eax
c0013b13:	74 e0                	je     c0013af5 <CPU::detectFeatures()+0x379>
c0013b15:	56                   	push   esi
c0013b16:	56                   	push   esi
c0013b17:	68 58 55 02 c0       	push   0xc0025558
c0013b1c:	55                   	push   ebp
c0013b1d:	e8 a2 cc fe ff       	call   c00007c4 <strcmp>
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	85 c0                	test   eax,eax
c0013b27:	74 cc                	je     c0013af5 <CPU::detectFeatures()+0x379>
c0013b29:	51                   	push   ecx
c0013b2a:	51                   	push   ecx
c0013b2b:	68 65 55 02 c0       	push   0xc0025565
c0013b30:	55                   	push   ebp
c0013b31:	e8 8e cc fe ff       	call   c00007c4 <strcmp>
c0013b36:	83 c4 10             	add    esp,0x10
c0013b39:	85 c0                	test   eax,eax
c0013b3b:	74 b8                	je     c0013af5 <CPU::detectFeatures()+0x379>
c0013b3d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013b47:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013b4c:	0f 86 be 00 00 00    	jbe    c0013c10 <CPU::detectFeatures()+0x494>
c0013b52:	83 ec 0c             	sub    esp,0xc
c0013b55:	68 80 00 00 00       	push   0x80
c0013b5a:	e8 93 f8 ff ff       	call   c00133f2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b5f:	83 e0 01             	and    eax,0x1
c0013b62:	c1 e0 06             	shl    eax,0x6
c0013b65:	88 c2                	mov    dl,al
c0013b67:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b6d:	83 e0 bf             	and    eax,0xffffffbf
c0013b70:	09 d0                	or     eax,edx
c0013b72:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b78:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013b7f:	e8 6e f8 ff ff       	call   c00133f2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b84:	83 e0 01             	and    eax,0x1
c0013b87:	c1 e0 04             	shl    eax,0x4
c0013b8a:	88 c2                	mov    dl,al
c0013b8c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b92:	83 e0 ef             	and    eax,0xffffffef
c0013b95:	09 d0                	or     eax,edx
c0013b97:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b9d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013ba4:	e8 49 f8 ff ff       	call   c00133f2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013ba9:	c1 e0 07             	shl    eax,0x7
c0013bac:	88 c2                	mov    dl,al
c0013bae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013bb4:	83 e0 7f             	and    eax,0x7f
c0013bb7:	09 d0                	or     eax,edx
c0013bb9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013bbf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013bc6:	e8 55 f8 ff ff       	call   c0013420 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013bcb:	83 e0 01             	and    eax,0x1
c0013bce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013bd5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013bdb:	83 e0 f7             	and    eax,0xfffffff7
c0013bde:	09 d0                	or     eax,edx
c0013be0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013be6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013bed:	e8 2e f8 ff ff       	call   c0013420 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013bf2:	83 c4 10             	add    esp,0x10
c0013bf5:	83 e0 01             	and    eax,0x1
c0013bf8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013bff:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013c05:	83 e0 fb             	and    eax,0xfffffffb
c0013c08:	09 d0                	or     eax,edx
c0013c0a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c17:	50                   	push   eax
c0013c18:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c1c:	50                   	push   eax
c0013c1d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013c21:	56                   	push   esi
c0013c22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c26:	50                   	push   eax
c0013c27:	6a 01                	push   0x1
c0013c29:	e8 e4 f6 ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c2e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013c32:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013c38:	88 ca                	mov    dl,cl
c0013c3a:	83 e0 f0             	and    eax,0xfffffff0
c0013c3d:	83 e2 0f             	and    edx,0xf
c0013c40:	09 d0                	or     eax,edx
c0013c42:	88 ca                	mov    dl,cl
c0013c44:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013c4a:	c0 ea 04             	shr    dl,0x4
c0013c4d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013c51:	0f b6 c2             	movzx  eax,dl
c0013c54:	83 c4 20             	add    esp,0x20
c0013c57:	c1 e0 06             	shl    eax,0x6
c0013c5a:	89 c7                	mov    edi,eax
c0013c5c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013c62:	66 25 3f c0          	and    ax,0xc03f
c0013c66:	09 f8                	or     eax,edi
c0013c68:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013c6f:	89 c8                	mov    eax,ecx
c0013c71:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013c78:	c1 e8 08             	shr    eax,0x8
c0013c7b:	83 e5 3f             	and    ebp,0x3f
c0013c7e:	83 e0 0f             	and    eax,0xf
c0013c81:	89 c7                	mov    edi,eax
c0013c83:	c1 e7 06             	shl    edi,0x6
c0013c86:	09 ef                	or     edi,ebp
c0013c88:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013c8f:	89 fa                	mov    edx,edi
c0013c91:	83 e5 c0             	and    ebp,0xffffffc0
c0013c94:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013c9a:	88 c2                	mov    dl,al
c0013c9c:	c0 ea 02             	shr    dl,0x2
c0013c9f:	89 d7                	mov    edi,edx
c0013ca1:	09 ef                	or     edi,ebp
c0013ca3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013ca9:	89 fa                	mov    edx,edi
c0013cab:	83 e5 cf             	and    ebp,0xffffffcf
c0013cae:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013cb4:	89 cf                	mov    edi,ecx
c0013cb6:	c1 ef 0c             	shr    edi,0xc
c0013cb9:	83 e7 03             	and    edi,0x3
c0013cbc:	c1 e7 04             	shl    edi,0x4
c0013cbf:	09 ef                	or     edi,ebp
c0013cc1:	3c 06                	cmp    al,0x6
c0013cc3:	89 fa                	mov    edx,edi
c0013cc5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013ccb:	74 04                	je     c0013cd1 <CPU::detectFeatures()+0x555>
c0013ccd:	3c 0f                	cmp    al,0xf
c0013ccf:	75 5c                	jne    c0013d2d <CPU::detectFeatures()+0x5b1>
c0013cd1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013cd5:	89 cf                	mov    edi,ecx
c0013cd7:	c1 ef 10             	shr    edi,0x10
c0013cda:	c1 e7 04             	shl    edi,0x4
c0013cdd:	09 fa                	or     edx,edi
c0013cdf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013ce5:	0f b6 d2             	movzx  edx,dl
c0013ce8:	66 81 e7 3f c0       	and    di,0xc03f
c0013ced:	c1 e2 06             	shl    edx,0x6
c0013cf0:	09 fa                	or     edx,edi
c0013cf2:	3c 0f                	cmp    al,0xf
c0013cf4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013cfb:	75 30                	jne    c0013d2d <CPU::detectFeatures()+0x5b1>
c0013cfd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013d03:	c1 e9 14             	shr    ecx,0x14
c0013d06:	83 e0 3f             	and    eax,0x3f
c0013d09:	83 c1 0f             	add    ecx,0xf
c0013d0c:	88 ca                	mov    dl,cl
c0013d0e:	c0 e9 02             	shr    cl,0x2
c0013d11:	c1 e2 06             	shl    edx,0x6
c0013d14:	09 d0                	or     eax,edx
c0013d16:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013d1c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013d22:	83 e0 c0             	and    eax,0xffffffc0
c0013d25:	09 c1                	or     ecx,eax
c0013d27:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013d2d:	83 ec 0c             	sub    esp,0xc
c0013d30:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013d37:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d3b:	50                   	push   eax
c0013d3c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013d40:	55                   	push   ebp
c0013d41:	56                   	push   esi
c0013d42:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013d46:	57                   	push   edi
c0013d47:	68 00 00 00 80       	push   0x80000000
c0013d4c:	e8 c1 f5 ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d51:	83 c4 20             	add    esp,0x20
c0013d54:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013d5c:	76 22                	jbe    c0013d80 <CPU::detectFeatures()+0x604>
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d65:	50                   	push   eax
c0013d66:	55                   	push   ebp
c0013d67:	56                   	push   esi
c0013d68:	57                   	push   edi
c0013d69:	68 01 00 00 80       	push   0x80000001
c0013d6e:	e8 9f f5 ff ff       	call   c0013312 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d73:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013d7d:	83 c4 20             	add    esp,0x20
c0013d80:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013d86:	83 f8 01             	cmp    eax,0x1
c0013d89:	75 6f                	jne    c0013dfa <CPU::detectFeatures()+0x67e>
c0013d8b:	51                   	push   ecx
c0013d8c:	51                   	push   ecx
c0013d8d:	68 71 55 02 c0       	push   0xc0025571
c0013d92:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013d96:	56                   	push   esi
c0013d97:	e8 9c c9 fe ff       	call   c0000738 <strcpy>
c0013d9c:	5f                   	pop    edi
c0013d9d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013da3:	5d                   	pop    ebp
c0013da4:	66 c1 e8 06          	shr    ax,0x6
c0013da8:	0f b6 c0             	movzx  eax,al
c0013dab:	50                   	push   eax
c0013dac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013db2:	c1 e8 0e             	shr    eax,0xe
c0013db5:	0f b6 c0             	movzx  eax,al
c0013db8:	50                   	push   eax
c0013db9:	e8 fe f1 ff ff       	call   c0012fbc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013dbe:	5a                   	pop    edx
c0013dbf:	59                   	pop    ecx
c0013dc0:	50                   	push   eax
c0013dc1:	56                   	push   esi
c0013dc2:	e8 b1 ca fe ff       	call   c0000878 <strcat>
c0013dc7:	5f                   	pop    edi
c0013dc8:	5d                   	pop    ebp
c0013dc9:	56                   	push   esi
c0013dca:	53                   	push   ebx
c0013dcb:	e8 ec a8 ff ff       	call   c000e6bc <Device::setName(char const*)>
c0013dd0:	58                   	pop    eax
c0013dd1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013dd7:	5a                   	pop    edx
c0013dd8:	68 78 55 02 c0       	push   0xc0025578
c0013ddd:	50                   	push   eax
c0013dde:	e8 e1 c9 fe ff       	call   c00007c4 <strcmp>
c0013de3:	83 c4 10             	add    esp,0x10
c0013de6:	85 c0                	test   eax,eax
c0013de8:	0f 85 71 03 00 00    	jne    c001415f <CPU::detectFeatures()+0x9e3>
c0013dee:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013df5:	e9 65 03 00 00       	jmp    c001415f <CPU::detectFeatures()+0x9e3>
c0013dfa:	83 f8 02             	cmp    eax,0x2
c0013dfd:	0f 85 b5 00 00 00    	jne    c0013eb8 <CPU::detectFeatures()+0x73c>
c0013e03:	57                   	push   edi
c0013e04:	57                   	push   edi
c0013e05:	68 8a 55 02 c0       	push   0xc002558a
c0013e0a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013e0e:	56                   	push   esi
c0013e0f:	e8 24 c9 fe ff       	call   c0000738 <strcpy>
c0013e14:	5d                   	pop    ebp
c0013e15:	58                   	pop    eax
c0013e16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e1c:	66 c1 e8 06          	shr    ax,0x6
c0013e20:	0f b6 c0             	movzx  eax,al
c0013e23:	50                   	push   eax
c0013e24:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e2a:	c1 e8 0e             	shr    eax,0xe
c0013e2d:	0f b6 c0             	movzx  eax,al
c0013e30:	50                   	push   eax
c0013e31:	e8 f2 ef ff ff       	call   c0012e28 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013e36:	5a                   	pop    edx
c0013e37:	59                   	pop    ecx
c0013e38:	50                   	push   eax
c0013e39:	56                   	push   esi
c0013e3a:	e8 39 ca fe ff       	call   c0000878 <strcat>
c0013e3f:	5f                   	pop    edi
c0013e40:	5d                   	pop    ebp
c0013e41:	56                   	push   esi
c0013e42:	53                   	push   ebx
c0013e43:	e8 74 a8 ff ff       	call   c000e6bc <Device::setName(char const*)>
c0013e48:	58                   	pop    eax
c0013e49:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013e4f:	5a                   	pop    edx
c0013e50:	68 8f 55 02 c0       	push   0xc002558f
c0013e55:	50                   	push   eax
c0013e56:	e8 69 c9 fe ff       	call   c00007c4 <strcmp>
c0013e5b:	83 c4 10             	add    esp,0x10
c0013e5e:	85 c0                	test   eax,eax
c0013e60:	75 20                	jne    c0013e82 <CPU::detectFeatures()+0x706>
c0013e62:	8b 15 a8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ca8
c0013e68:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013e6e:	a8 01                	test   al,0x1
c0013e70:	74 10                	je     c0013e82 <CPU::detectFeatures()+0x706>
c0013e72:	83 e0 fe             	and    eax,0xfffffffe
c0013e75:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013e7b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013e82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e88:	c1 e8 0e             	shr    eax,0xe
c0013e8b:	3c 05                	cmp    al,0x5
c0013e8d:	0f 85 cc 02 00 00    	jne    c001415f <CPU::detectFeatures()+0x9e3>
c0013e93:	56                   	push   esi
c0013e94:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013e9a:	83 e0 0f             	and    eax,0xf
c0013e9d:	50                   	push   eax
c0013e9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ea4:	66 c1 e8 06          	shr    ax,0x6
c0013ea8:	0f b6 c0             	movzx  eax,al
c0013eab:	50                   	push   eax
c0013eac:	6a 05                	push   0x5
c0013eae:	e8 eb f3 ff ff       	call   c001329e <CPU::AMD_K6_writeback(int, int, int)>
c0013eb3:	e9 1f 02 00 00       	jmp    c00140d7 <CPU::detectFeatures()+0x95b>
c0013eb8:	8d 50 fd             	lea    edx,[eax-0x3]
c0013ebb:	83 fa 01             	cmp    edx,0x1
c0013ebe:	76 09                	jbe    c0013ec9 <CPU::detectFeatures()+0x74d>
c0013ec0:	83 f8 06             	cmp    eax,0x6
c0013ec3:	0f 85 91 01 00 00    	jne    c001405a <CPU::detectFeatures()+0x8de>
c0013ec9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013ecf:	c1 ea 0e             	shr    edx,0xe
c0013ed2:	80 fa 05             	cmp    dl,0x5
c0013ed5:	75 7b                	jne    c0013f52 <CPU::detectFeatures()+0x7d6>
c0013ed7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013edd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013ee2:	66 81 fa 00 01       	cmp    dx,0x100
c0013ee7:	75 0c                	jne    c0013ef5 <CPU::detectFeatures()+0x779>
c0013ee9:	51                   	push   ecx
c0013eea:	51                   	push   ecx
c0013eeb:	68 96 55 02 c0       	push   0xc0025596
c0013ef0:	e9 dc 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013ef5:	66 81 fa 00 02       	cmp    dx,0x200
c0013efa:	75 0c                	jne    c0013f08 <CPU::detectFeatures()+0x78c>
c0013efc:	52                   	push   edx
c0013efd:	52                   	push   edx
c0013efe:	68 a9 55 02 c0       	push   0xc00255a9
c0013f03:	e9 c9 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f08:	66 81 fa 40 02       	cmp    dx,0x240
c0013f0d:	75 0c                	jne    c0013f1b <CPU::detectFeatures()+0x79f>
c0013f0f:	50                   	push   eax
c0013f10:	50                   	push   eax
c0013f11:	68 bb 55 02 c0       	push   0xc00255bb
c0013f16:	e9 b6 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f1b:	83 f8 06             	cmp    eax,0x6
c0013f1e:	75 0c                	jne    c0013f2c <CPU::detectFeatures()+0x7b0>
c0013f20:	50                   	push   eax
c0013f21:	50                   	push   eax
c0013f22:	68 cd 55 02 c0       	push   0xc00255cd
c0013f27:	e9 a5 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f2c:	83 f8 04             	cmp    eax,0x4
c0013f2f:	75 0c                	jne    c0013f3d <CPU::detectFeatures()+0x7c1>
c0013f31:	50                   	push   eax
c0013f32:	50                   	push   eax
c0013f33:	68 d9 55 02 c0       	push   0xc00255d9
c0013f38:	e9 94 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f3d:	83 f8 03             	cmp    eax,0x3
c0013f40:	0f 85 19 02 00 00    	jne    c001415f <CPU::detectFeatures()+0x9e3>
c0013f46:	50                   	push   eax
c0013f47:	50                   	push   eax
c0013f48:	68 e1 55 02 c0       	push   0xc00255e1
c0013f4d:	e9 7f 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f52:	80 fa 06             	cmp    dl,0x6
c0013f55:	0f 85 db 00 00 00    	jne    c0014036 <CPU::detectFeatures()+0x8ba>
c0013f5b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013f61:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013f66:	66 81 fa 80 01       	cmp    dx,0x180
c0013f6b:	75 0c                	jne    c0013f79 <CPU::detectFeatures()+0x7fd>
c0013f6d:	50                   	push   eax
c0013f6e:	50                   	push   eax
c0013f6f:	68 ec 55 02 c0       	push   0xc00255ec
c0013f74:	e9 58 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f79:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013f7f:	66 f7 c1 80 ff       	test   cx,0xff80
c0013f84:	75 0c                	jne    c0013f92 <CPU::detectFeatures()+0x816>
c0013f86:	50                   	push   eax
c0013f87:	50                   	push   eax
c0013f88:	68 fc 55 02 c0       	push   0xc00255fc
c0013f8d:	e9 3f 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013f92:	66 81 fa 40 02       	cmp    dx,0x240
c0013f97:	75 0c                	jne    c0013fa5 <CPU::detectFeatures()+0x829>
c0013f99:	55                   	push   ebp
c0013f9a:	55                   	push   ebp
c0013f9b:	68 03 56 02 c0       	push   0xc0025603
c0013fa0:	e9 2c 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013fa5:	66 81 fa 80 02       	cmp    dx,0x280
c0013faa:	75 0c                	jne    c0013fb8 <CPU::detectFeatures()+0x83c>
c0013fac:	57                   	push   edi
c0013fad:	57                   	push   edi
c0013fae:	68 0c 56 02 c0       	push   0xc002560c
c0013fb3:	e9 19 01 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013fb8:	66 81 fa 40 03       	cmp    dx,0x340
c0013fbd:	74 ed                	je     c0013fac <CPU::detectFeatures()+0x830>
c0013fbf:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013fc4:	75 0c                	jne    c0013fd2 <CPU::detectFeatures()+0x856>
c0013fc6:	56                   	push   esi
c0013fc7:	56                   	push   esi
c0013fc8:	68 13 56 02 c0       	push   0xc0025613
c0013fcd:	e9 ff 00 00 00       	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0013fd2:	83 f8 06             	cmp    eax,0x6
c0013fd5:	0f 84 45 ff ff ff    	je     c0013f20 <CPU::detectFeatures()+0x7a4>
c0013fdb:	83 f8 04             	cmp    eax,0x4
c0013fde:	0f 84 4d ff ff ff    	je     c0013f31 <CPU::detectFeatures()+0x7b5>
c0013fe4:	83 f8 03             	cmp    eax,0x3
c0013fe7:	0f 85 72 01 00 00    	jne    c001415f <CPU::detectFeatures()+0x9e3>
c0013fed:	51                   	push   ecx
c0013fee:	51                   	push   ecx
c0013fef:	68 1c 56 02 c0       	push   0xc002561c
c0013ff4:	53                   	push   ebx
c0013ff5:	e8 c2 a6 ff ff       	call   c000e6bc <Device::setName(char const*)>
c0013ffa:	b1 c1                	mov    cl,0xc1
c0013ffc:	88 c8                	mov    al,cl
c0013ffe:	e6 22                	out    0x22,al
c0014000:	e4 23                	in     al,0x23
c0014002:	88 c2                	mov    dl,al
c0014004:	88 c8                	mov    al,cl
c0014006:	e6 22                	out    0x22,al
c0014008:	88 d0                	mov    al,dl
c001400a:	83 c8 10             	or     eax,0x10
c001400d:	e6 23                	out    0x23,al
c001400f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014016:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014019:	89 d0                	mov    eax,edx
c001401b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014021:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014025:	40                   	inc    eax
c0014026:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001402c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014031:	e9 a1 00 00 00       	jmp    c00140d7 <CPU::detectFeatures()+0x95b>
c0014036:	83 f8 06             	cmp    eax,0x6
c0014039:	0f 84 e1 fe ff ff    	je     c0013f20 <CPU::detectFeatures()+0x7a4>
c001403f:	83 f8 04             	cmp    eax,0x4
c0014042:	0f 84 e9 fe ff ff    	je     c0013f31 <CPU::detectFeatures()+0x7b5>
c0014048:	83 f8 03             	cmp    eax,0x3
c001404b:	0f 85 0e 01 00 00    	jne    c001415f <CPU::detectFeatures()+0x9e3>
c0014051:	52                   	push   edx
c0014052:	52                   	push   edx
c0014053:	68 27 56 02 c0       	push   0xc0025627
c0014058:	eb 77                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c001405a:	83 f8 07             	cmp    eax,0x7
c001405d:	75 09                	jne    c0014068 <CPU::detectFeatures()+0x8ec>
c001405f:	50                   	push   eax
c0014060:	50                   	push   eax
c0014061:	68 31 56 02 c0       	push   0xc0025631
c0014066:	eb 69                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0014068:	83 f8 0a             	cmp    eax,0xa
c001406b:	75 09                	jne    c0014076 <CPU::detectFeatures()+0x8fa>
c001406d:	50                   	push   eax
c001406e:	50                   	push   eax
c001406f:	68 3c 56 02 c0       	push   0xc002563c
c0014074:	eb 5b                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0014076:	83 f8 0b             	cmp    eax,0xb
c0014079:	75 09                	jne    c0014084 <CPU::detectFeatures()+0x908>
c001407b:	50                   	push   eax
c001407c:	50                   	push   eax
c001407d:	68 44 56 02 c0       	push   0xc0025644
c0014082:	eb 4d                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0014084:	83 f8 08             	cmp    eax,0x8
c0014087:	75 09                	jne    c0014092 <CPU::detectFeatures()+0x916>
c0014089:	50                   	push   eax
c001408a:	50                   	push   eax
c001408b:	68 4d 56 02 c0       	push   0xc002564d
c0014090:	eb 3f                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c0014092:	83 f8 09             	cmp    eax,0x9
c0014095:	75 09                	jne    c00140a0 <CPU::detectFeatures()+0x924>
c0014097:	50                   	push   eax
c0014098:	50                   	push   eax
c0014099:	68 55 56 02 c0       	push   0xc0025655
c001409e:	eb 31                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c00140a0:	83 f8 05             	cmp    eax,0x5
c00140a3:	75 09                	jne    c00140ae <CPU::detectFeatures()+0x932>
c00140a5:	50                   	push   eax
c00140a6:	50                   	push   eax
c00140a7:	68 5d 56 02 c0       	push   0xc002565d
c00140ac:	eb 23                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c00140ae:	83 f8 0c             	cmp    eax,0xc
c00140b1:	75 09                	jne    c00140bc <CPU::detectFeatures()+0x940>
c00140b3:	55                   	push   ebp
c00140b4:	55                   	push   ebp
c00140b5:	68 6b 56 02 c0       	push   0xc002566b
c00140ba:	eb 15                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c00140bc:	83 f8 0d             	cmp    eax,0xd
c00140bf:	75 09                	jne    c00140ca <CPU::detectFeatures()+0x94e>
c00140c1:	57                   	push   edi
c00140c2:	57                   	push   edi
c00140c3:	68 76 56 02 c0       	push   0xc0025676
c00140c8:	eb 07                	jmp    c00140d1 <CPU::detectFeatures()+0x955>
c00140ca:	56                   	push   esi
c00140cb:	56                   	push   esi
c00140cc:	68 8a 56 02 c0       	push   0xc002568a
c00140d1:	53                   	push   ebx
c00140d2:	e8 e5 a5 ff ff       	call   c000e6bc <Device::setName(char const*)>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	e9 80 00 00 00       	jmp    c001415f <CPU::detectFeatures()+0x9e3>
c00140df:	51                   	push   ecx
c00140e0:	51                   	push   ecx
c00140e1:	68 d6 54 02 c0       	push   0xc00254d6
c00140e6:	55                   	push   ebp
c00140e7:	e8 4c c6 fe ff       	call   c0000738 <strcpy>
c00140ec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00140f6:	e8 e8 c0 fe ff       	call   c00001e3 <is486>
c00140fb:	83 c4 10             	add    esp,0x10
c00140fe:	85 c0                	test   eax,eax
c0014100:	74 2b                	je     c001412d <CPU::detectFeatures()+0x9b1>
c0014102:	52                   	push   edx
c0014103:	52                   	push   edx
c0014104:	68 96 56 02 c0       	push   0xc0025696
c0014109:	53                   	push   ebx
c001410a:	e8 ad a5 ff ff       	call   c000e6bc <Device::setName(char const*)>
c001410f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014116:	0f 20 c0             	mov    eax,cr0
c0014119:	83 e0 14             	and    eax,0x14
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	83 f8 04             	cmp    eax,0x4
c0014122:	75 1f                	jne    c0014143 <CPU::detectFeatures()+0x9c7>
c0014124:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001412b:	eb 32                	jmp    c001415f <CPU::detectFeatures()+0x9e3>
c001412d:	50                   	push   eax
c001412e:	50                   	push   eax
c001412f:	68 a1 56 02 c0       	push   0xc00256a1
c0014134:	53                   	push   ebx
c0014135:	e8 82 a5 ff ff       	call   c000e6bc <Device::setName(char const*)>
c001413a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014141:	eb d3                	jmp    c0014116 <CPU::detectFeatures()+0x99a>
c0014143:	e8 76 c0 fe ff       	call   c00001be <hasLegacyFPU>
c0014148:	83 e0 01             	and    eax,0x1
c001414b:	8d 14 00             	lea    edx,[eax+eax*1]
c001414e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014154:	83 e0 fd             	and    eax,0xfffffffd
c0014157:	09 d0                	or     eax,edx
c0014159:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001415f:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0014166:	74 0e                	je     c0014176 <CPU::detectFeatures()+0x9fa>
c0014168:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001416d:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0014174:	eb 20                	jmp    c0014196 <CPU::detectFeatures()+0xa1a>
c0014176:	e8 43 c0 fe ff       	call   c00001be <hasLegacyFPU>
c001417b:	83 e0 01             	and    eax,0x1
c001417e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014181:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014187:	83 e0 fd             	and    eax,0xfffffffd
c001418a:	09 d0                	or     eax,edx
c001418c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014192:	a8 02                	test   al,0x2
c0014194:	75 d2                	jne    c0014168 <CPU::detectFeatures()+0x9ec>
c0014196:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001419d:	83 c4 4c             	add    esp,0x4c
c00141a0:	5b                   	pop    ebx
c00141a1:	5e                   	pop    esi
c00141a2:	5f                   	pop    edi
c00141a3:	5d                   	pop    ebp
c00141a4:	c3                   	ret    
c00141a5:	90                   	nop

c00141a6 <CPU::setupSMEP()>:
c00141a6:	0f 20 e0             	mov    eax,cr4
c00141a9:	0d 00 00 10 00       	or     eax,0x100000
c00141ae:	0f 22 e0             	mov    cr4,eax
c00141b1:	c3                   	ret    

c00141b2 <CPU::setupUMIP()>:
c00141b2:	0f 20 e0             	mov    eax,cr4
c00141b5:	80 cc 08             	or     ah,0x8
c00141b8:	0f 22 e0             	mov    cr4,eax
c00141bb:	c3                   	ret    

c00141bc <CPU::setupTSC()>:
c00141bc:	0f 20 e0             	mov    eax,cr4
c00141bf:	83 c8 04             	or     eax,0x4
c00141c2:	0f 22 e0             	mov    cr4,eax
c00141c5:	c3                   	ret    

c00141c6 <CPU::setupLargePages()>:
c00141c6:	0f 20 e0             	mov    eax,cr4
c00141c9:	83 c8 10             	or     eax,0x10
c00141cc:	0f 22 e0             	mov    cr4,eax
c00141cf:	c3                   	ret    

c00141d0 <CPU::setupPAT()>:
c00141d0:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00141d5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00141dc:	74 2c                	je     c001420a <CPU::setupPAT()+0x3a>
c00141de:	53                   	push   ebx
c00141df:	83 ec 10             	sub    esp,0x10
c00141e2:	68 77 02 00 00       	push   0x277
c00141e7:	50                   	push   eax
c00141e8:	e8 79 50 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c00141ed:	83 e2 f8             	and    edx,0xfffffff8
c00141f0:	83 ca 01             	or     edx,0x1
c00141f3:	52                   	push   edx
c00141f4:	50                   	push   eax
c00141f5:	68 77 02 00 00       	push   0x277
c00141fa:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014200:	e8 8d 50 ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014205:	83 c4 28             	add    esp,0x28
c0014208:	5b                   	pop    ebx
c0014209:	c3                   	ret    
c001420a:	c3                   	ret    
c001420b:	90                   	nop

c001420c <CPU::setupMTRR()>:
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <CPU::setupGlobalPages()>:
c001420e:	0f 20 e0             	mov    eax,cr4
c0014211:	0c 80                	or     al,0x80
c0014213:	0f 22 e0             	mov    cr4,eax
c0014216:	c3                   	ret    
c0014217:	90                   	nop

c0014218 <CPU::allowUsermodeDataAccess()>:
c0014218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001421c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014223:	74 03                	je     c0014228 <CPU::allowUsermodeDataAccess()+0x10>
c0014225:	0f 01 cb             	stac   
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <CPU::prohibitUsermodeDataAccess()>:
c001422a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014235:	74 03                	je     c001423a <CPU::prohibitUsermodeDataAccess()+0x10>
c0014237:	0f 01 ca             	clac   
c001423a:	c3                   	ret    
c001423b:	90                   	nop

c001423c <CPU::setupSMAP()>:
c001423c:	0f 20 e0             	mov    eax,cr4
c001423f:	0d 00 00 20 00       	or     eax,0x200000
c0014244:	0f 22 e0             	mov    cr4,eax
c0014247:	eb e1                	jmp    c001422a <CPU::prohibitUsermodeDataAccess()>
c0014249:	90                   	nop

c001424a <CPU::setupFeatures()>:
c001424a:	53                   	push   ebx
c001424b:	83 ec 08             	sub    esp,0x8
c001424e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014252:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014259:	74 18                	je     c0014273 <CPU::setupFeatures()+0x29>
c001425b:	83 ec 0c             	sub    esp,0xc
c001425e:	68 ac 56 02 c0       	push   0xc00256ac
c0014263:	e8 ab 8d ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0014268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001426b:	e8 42 ff ff ff       	call   c00141b2 <CPU::setupUMIP()>
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001427a:	74 18                	je     c0014294 <CPU::setupFeatures()+0x4a>
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	68 b6 56 02 c0       	push   0xc00256b6
c0014284:	e8 8a 8d ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0014289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001428c:	e8 2b ff ff ff       	call   c00141bc <CPU::setupTSC()>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001429b:	74 18                	je     c00142b5 <CPU::setupFeatures()+0x6b>
c001429d:	83 ec 0c             	sub    esp,0xc
c00142a0:	68 bf 56 02 c0       	push   0xc00256bf
c00142a5:	e8 69 8d ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00142aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ad:	e8 14 ff ff ff       	call   c00141c6 <CPU::setupLargePages()>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00142bc:	74 18                	je     c00142d6 <CPU::setupFeatures()+0x8c>
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	68 c8 56 02 c0       	push   0xc00256c8
c00142c6:	e8 48 8d ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00142cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ce:	e8 3b ff ff ff       	call   c001420e <CPU::setupGlobalPages()>
c00142d3:	83 c4 10             	add    esp,0x10
c00142d6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00142dd:	74 18                	je     c00142f7 <CPU::setupFeatures()+0xad>
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	68 da 56 02 c0       	push   0xc00256da
c00142e7:	e8 27 8d ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00142ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ef:	e8 dc fe ff ff       	call   c00141d0 <CPU::setupPAT()>
c00142f4:	83 c4 10             	add    esp,0x10
c00142f7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00142fe:	74 11                	je     c0014311 <CPU::setupFeatures()+0xc7>
c0014300:	c7 44 24 10 e3 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256e3
c0014308:	83 c4 08             	add    esp,0x8
c001430b:	5b                   	pop    ebx
c001430c:	e9 02 8d ff ff       	jmp    c000d013 <Dbg::kprintf(char const*, ...)>
c0014311:	83 c4 08             	add    esp,0x8
c0014314:	5b                   	pop    ebx
c0014315:	c3                   	ret    

c0014316 <CPU::open(int, int, void*)>:
c0014316:	57                   	push   edi
c0014317:	56                   	push   esi
c0014318:	53                   	push   ebx
c0014319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001431d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014321:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014330:	68 ed 56 02 c0       	push   0xc00256ed
c0014335:	e8 27 5a ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001433a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014340:	89 04 24             	mov    DWORD PTR [esp],eax
c0014343:	e8 44 52 ff ff       	call   c000958c <GDT::setup()>
c0014348:	c7 04 24 ff 56 02 c0 	mov    DWORD PTR [esp],0xc00256ff
c001434f:	e8 0d 5a ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014354:	83 c4 0c             	add    esp,0xc
c0014357:	6a 00                	push   0x0
c0014359:	68 ef be ad de       	push   0xdeadbeef
c001435e:	57                   	push   edi
c001435f:	e8 dc 72 ff ff       	call   c000b640 <TSS::setup(unsigned long, unsigned long)>
c0014364:	c7 04 24 11 57 02 c0 	mov    DWORD PTR [esp],0xc0025711
c001436b:	e8 f1 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014370:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014373:	e8 a8 72 ff ff       	call   c000b620 <TSS::flush()>
c0014378:	c7 04 24 25 57 02 c0 	mov    DWORD PTR [esp],0xc0025725
c001437f:	e8 dd 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014384:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001438a:	89 04 24             	mov    DWORD PTR [esp],eax
c001438d:	e8 d8 54 ff ff       	call   c000986a <IDT::setup()>
c0014392:	c7 04 24 37 57 02 c0 	mov    DWORD PTR [esp],0xc0025737
c0014399:	e8 c3 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001439e:	b8 00 04 00 00       	mov    eax,0x400
c00143a3:	0f 23 f8             	mov    db7,eax
c00143a6:	c7 04 24 55 57 02 c0 	mov    DWORD PTR [esp],0xc0025755
c00143ad:	e8 af 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00143b2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00143bc:	e8 fd 5f ff ff       	call   c000a3be <Phys::allocatePage()>
c00143c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00143c7:	89 30                	mov    DWORD PTR [eax],esi
c00143c9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00143cf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00143d2:	c7 04 24 77 57 02 c0 	mov    DWORD PTR [esp],0xc0025777
c00143d9:	e8 83 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00143de:	58                   	pop    eax
c00143df:	5a                   	pop    edx
c00143e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00143e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143ea:	e8 0f 82 ff ff       	call   c000c5fe <VAS::setCPUSpecific(unsigned long)>
c00143ef:	c7 04 24 9f 57 02 c0 	mov    DWORD PTR [esp],0xc002579f
c00143f6:	e8 66 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00143fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143fe:	e8 79 f3 ff ff       	call   c001377c <CPU::detectFeatures()>
c0014403:	c7 04 24 c2 57 02 c0 	mov    DWORD PTR [esp],0xc00257c2
c001440a:	e8 52 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001440f:	e8 12 b3 ff ff       	call   c000f726 <setupInterruptController()>
c0014414:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001441a:	c7 04 24 e6 57 02 c0 	mov    DWORD PTR [esp],0xc00257e6
c0014421:	e8 3b 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014426:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001442b:	83 e0 10             	and    eax,0x10
c001442e:	83 f8 01             	cmp    eax,0x1
c0014431:	19 c0                	sbb    eax,eax
c0014433:	83 e0 46             	and    eax,0x46
c0014436:	83 c0 1e             	add    eax,0x1e
c0014439:	89 04 24             	mov    DWORD PTR [esp],eax
c001443c:	e8 eb c8 ff ff       	call   c0010d2c <setupTimer(int)>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001444a:	f6 05 c0 7c 02 c0 20 	test   BYTE PTR ds:0xc0027cc0,0x20
c0014451:	74 18                	je     c001446b <CPU::open(int, int, void*)+0x155>
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	68 01 58 02 c0       	push   0xc0025801
c001445b:	e8 01 59 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014463:	e8 e2 fd ff ff       	call   c001424a <CPU::setupFeatures()>
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	83 ec 0c             	sub    esp,0xc
c001446e:	68 1c 58 02 c0       	push   0xc002581c
c0014473:	e8 e9 58 ff ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0014478:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001447b:	e8 5c f0 ff ff       	call   c00134dc <CPU::displayFeatures()>
c0014480:	83 c4 10             	add    esp,0x10
c0014483:	31 c0                	xor    eax,eax
c0014485:	5b                   	pop    ebx
c0014486:	5e                   	pop    esi
c0014487:	5f                   	pop    edi
c0014488:	c3                   	ret    
c0014489:	90                   	nop

c001448a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001448a:	57                   	push   edi
c001448b:	56                   	push   esi
c001448c:	53                   	push   ebx
c001448d:	51                   	push   ecx
c001448e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014492:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014495:	0f 02 c0             	lar    eax,ax
c0014498:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001449b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001449f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00144a2:	88 ca                	mov    dl,cl
c00144a4:	c0 ea 06             	shr    dl,0x6
c00144a7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00144ab:	89 ca                	mov    edx,ecx
c00144ad:	66 c1 ea 03          	shr    dx,0x3
c00144b1:	83 e2 07             	and    edx,0x7
c00144b4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00144b9:	88 17                	mov    BYTE PTR [edi],dl
c00144bb:	0f 84 a6 01 00 00    	je     c0014667 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00144c1:	83 e1 07             	and    ecx,0x7
c00144c4:	80 f9 04             	cmp    cl,0x4
c00144c7:	0f 84 98 00 00 00    	je     c0014565 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00144cd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00144d2:	0f 95 c0             	setne  al
c00144d5:	80 f9 05             	cmp    cl,0x5
c00144d8:	0f 95 c2             	setne  dl
c00144db:	08 c2                	or     dl,al
c00144dd:	74 79                	je     c0014558 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00144df:	84 c9                	test   cl,cl
c00144e1:	75 05                	jne    c00144e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00144e3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00144e6:	eb 3c                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144e8:	80 f9 01             	cmp    cl,0x1
c00144eb:	75 05                	jne    c00144f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00144ed:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00144f0:	eb 32                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144f2:	80 f9 02             	cmp    cl,0x2
c00144f5:	75 05                	jne    c00144fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00144f7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00144fa:	eb 28                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144fc:	31 c0                	xor    eax,eax
c00144fe:	80 f9 03             	cmp    cl,0x3
c0014501:	75 05                	jne    c0014508 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014503:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014506:	eb 1c                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014508:	80 f9 05             	cmp    cl,0x5
c001450b:	75 05                	jne    c0014512 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001450d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014510:	eb 12                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014512:	80 f9 06             	cmp    cl,0x6
c0014515:	75 05                	jne    c001451c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014517:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001451a:	eb 08                	jmp    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001451c:	80 f9 07             	cmp    cl,0x7
c001451f:	75 03                	jne    c0014524 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014521:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014524:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014529:	75 10                	jne    c001453b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001452b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001452f:	b9 03 00 00 00       	mov    ecx,0x3
c0014534:	01 d0                	add    eax,edx
c0014536:	e9 37 01 00 00       	jmp    c0014672 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001453b:	b9 02 00 00 00       	mov    ecx,0x2
c0014540:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014545:	0f 85 27 01 00 00    	jne    c0014672 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001454b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001454e:	b9 06 00 00 00       	mov    ecx,0x6
c0014553:	e9 1a 01 00 00       	jmp    c0014672 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014558:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001455b:	b9 06 00 00 00       	mov    ecx,0x6
c0014560:	e9 0f 01 00 00       	jmp    c0014674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014565:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014568:	88 ca                	mov    dl,cl
c001456a:	c0 ea 06             	shr    dl,0x6
c001456d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014571:	89 ca                	mov    edx,ecx
c0014573:	66 c1 ea 03          	shr    dx,0x3
c0014577:	83 e2 07             	and    edx,0x7
c001457a:	80 e1 07             	and    cl,0x7
c001457d:	75 05                	jne    c0014584 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001457f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014582:	eb 4c                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014584:	80 f9 01             	cmp    cl,0x1
c0014587:	75 05                	jne    c001458e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014589:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001458c:	eb 42                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001458e:	80 f9 02             	cmp    cl,0x2
c0014591:	75 05                	jne    c0014598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014593:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014596:	eb 38                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014598:	80 f9 03             	cmp    cl,0x3
c001459b:	75 05                	jne    c00145a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001459d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00145a0:	eb 2e                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00145a2:	80 f9 04             	cmp    cl,0x4
c00145a5:	75 12                	jne    c00145b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00145a7:	f6 c4 60             	test   ah,0x60
c00145aa:	75 08                	jne    c00145b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00145ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00145af:	8d 78 14             	lea    edi,[eax+0x14]
c00145b2:	eb 1c                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00145b4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00145b7:	eb 17                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00145b9:	80 f9 05             	cmp    cl,0x5
c00145bc:	75 05                	jne    c00145c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00145be:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00145c1:	eb 0d                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00145c3:	80 f9 06             	cmp    cl,0x6
c00145c6:	75 05                	jne    c00145cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00145c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00145cb:	eb 03                	jmp    c00145d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00145cd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00145d0:	84 d2                	test   dl,dl
c00145d2:	75 05                	jne    c00145d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00145d4:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00145d7:	eb 3c                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145d9:	80 fa 01             	cmp    dl,0x1
c00145dc:	75 05                	jne    c00145e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00145de:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00145e1:	eb 32                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145e3:	80 fa 02             	cmp    dl,0x2
c00145e6:	75 05                	jne    c00145ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00145e8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00145eb:	eb 28                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145ed:	80 fa 03             	cmp    dl,0x3
c00145f0:	75 05                	jne    c00145f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00145f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00145f5:	eb 1e                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145f7:	31 c0                	xor    eax,eax
c00145f9:	80 fa 04             	cmp    dl,0x4
c00145fc:	74 17                	je     c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145fe:	80 fa 05             	cmp    dl,0x5
c0014601:	75 05                	jne    c0014608 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014603:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014606:	eb 0d                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014608:	80 fa 06             	cmp    dl,0x6
c001460b:	75 05                	jne    c0014612 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001460d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014610:	eb 03                	jmp    c0014615 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014612:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014615:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001461a:	0f 94 c2             	sete   dl
c001461d:	80 f9 05             	cmp    cl,0x5
c0014620:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014624:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014629:	d3 e0                	shl    eax,cl
c001462b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001462f:	74 0a                	je     c001463b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014631:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014634:	b9 07 00 00 00       	mov    ecx,0x7
c0014639:	eb 37                	jmp    c0014672 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001463b:	01 f8                	add    eax,edi
c001463d:	b9 03 00 00 00       	mov    ecx,0x3
c0014642:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014647:	74 2b                	je     c0014674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014649:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001464e:	75 0d                	jne    c001465d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014650:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014654:	01 c8                	add    eax,ecx
c0014656:	b9 04 00 00 00       	mov    ecx,0x4
c001465b:	eb 17                	jmp    c0014674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001465d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014660:	b9 07 00 00 00       	mov    ecx,0x7
c0014665:	eb 0d                	jmp    c0014674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014667:	b9 02 00 00 00       	mov    ecx,0x2
c001466c:	b2 01                	mov    dl,0x1
c001466e:	31 c0                	xor    eax,eax
c0014670:	eb 02                	jmp    c0014674 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014672:	31 d2                	xor    edx,edx
c0014674:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014678:	89 0b                	mov    DWORD PTR [ebx],ecx
c001467a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001467e:	88 11                	mov    BYTE PTR [ecx],dl
c0014680:	5a                   	pop    edx
c0014681:	5b                   	pop    ebx
c0014682:	5e                   	pop    esi
c0014683:	5f                   	pop    edi
c0014684:	c3                   	ret    

c0014685 <Krnl::smpEntry()>:
c0014685:	eb fe                	jmp    c0014685 <Krnl::smpEntry()>

c0014687 <Krnl::startCPU(int)>:
c0014687:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001468c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014693:	0f 84 36 01 00 00    	je     c00147cf <Krnl::startCPU(int)+0x148>
c0014699:	53                   	push   ebx
c001469a:	83 ec 10             	sub    esp,0x10
c001469d:	fa                   	cli    
c001469e:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00146a4:	6a 1b                	push   0x1b
c00146a6:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c00146ac:	e8 b5 4b ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c00146b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146b6:	89 c3                	mov    ebx,eax
c00146b8:	58                   	pop    eax
c00146b9:	5a                   	pop    edx
c00146ba:	53                   	push   ebx
c00146bb:	68 64 58 02 c0       	push   0xc0025864
c00146c0:	e8 4e 89 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00146c5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00146cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00146dd:	c1 e0 18             	shl    eax,0x18
c00146e0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00146ef:	09 c2                	or     edx,eax
c00146f1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00146f7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00146fd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014703:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014709:	80 cd c5             	or     ch,0xc5
c001470c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014712:	f3 90                	pause  
c0014714:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014716:	0f ba e1 0c          	bt     ecx,0xc
c001471a:	72 f6                	jb     c0014712 <Krnl::startCPU(int)+0x8b>
c001471c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014722:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014728:	09 c1                	or     ecx,eax
c001472a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014730:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014736:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001473c:	80 cd 85             	or     ch,0x85
c001473f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014745:	f3 90                	pause  
c0014747:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014749:	0f ba e1 0c          	bt     ecx,0xc
c001474d:	72 f6                	jb     c0014745 <Krnl::startCPU(int)+0xbe>
c001474f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014759:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001475f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014765:	09 c1                	or     ecx,eax
c0014767:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001476d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014773:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014779:	81 c9 02 06 00 00    	or     ecx,0x602
c001477f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014785:	f3 90                	pause  
c0014787:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014789:	0f ba e1 0c          	bt     ecx,0xc
c001478d:	72 f6                	jb     c0014785 <Krnl::startCPU(int)+0xfe>
c001478f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014799:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001479f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00147a5:	09 c8                	or     eax,ecx
c00147a7:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00147ad:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00147b3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00147b8:	0d 02 06 00 00       	or     eax,0x602
c00147bd:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00147c3:	f3 90                	pause  
c00147c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00147c7:	0f ba e0 0c          	bt     eax,0xc
c00147cb:	72 f6                	jb     c00147c3 <Krnl::startCPU(int)+0x13c>
c00147cd:	eb fe                	jmp    c00147cd <Krnl::startCPU(int)+0x146>
c00147cf:	c3                   	ret    

c00147d0 <Krnl::startCPUs()>:
c00147d0:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00147d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00147db:	88 c2                	mov    dl,al
c00147dd:	83 e2 0a             	and    edx,0xa
c00147e0:	80 fa 0a             	cmp    dl,0xa
c00147e3:	75 09                	jne    c00147ee <Krnl::startCPUs()+0x1e>
c00147e5:	a8 01                	test   al,0x1
c00147e7:	74 05                	je     c00147ee <Krnl::startCPUs()+0x1e>
c00147e9:	e9 ad b9 fe ff       	jmp    c000019b <prepareTramp>
c00147ee:	c3                   	ret    
c00147ef:	90                   	nop

c00147f0 <EnvVarContainer::getEnv(char const*)>:
c00147f0:	57                   	push   edi
c00147f1:	56                   	push   esi
c00147f2:	53                   	push   ebx
c00147f3:	31 db                	xor    ebx,ebx
c00147f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147f9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00147fb:	7e 2b                	jle    c0014828 <EnvVarContainer::getEnv(char const*)+0x38>
c00147fd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014804:	50                   	push   eax
c0014805:	50                   	push   eax
c0014806:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014809:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001480c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014810:	e8 af bf fe ff       	call   c00007c4 <strcmp>
c0014815:	83 c4 10             	add    esp,0x10
c0014818:	85 c0                	test   eax,eax
c001481a:	75 09                	jne    c0014825 <EnvVarContainer::getEnv(char const*)+0x35>
c001481c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001481f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014823:	eb 05                	jmp    c001482a <EnvVarContainer::getEnv(char const*)+0x3a>
c0014825:	43                   	inc    ebx
c0014826:	eb d1                	jmp    c00147f9 <EnvVarContainer::getEnv(char const*)+0x9>
c0014828:	31 c0                	xor    eax,eax
c001482a:	5b                   	pop    ebx
c001482b:	5e                   	pop    esi
c001482c:	5f                   	pop    edi
c001482d:	c3                   	ret    

c001482e <EnvVarContainer::setEnv(char const*, char const*)>:
c001482e:	55                   	push   ebp
c001482f:	57                   	push   edi
c0014830:	56                   	push   esi
c0014831:	53                   	push   ebx
c0014832:	83 ec 28             	sub    esp,0x28
c0014835:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014839:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001483d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014841:	56                   	push   esi
c0014842:	e8 51 be fe ff       	call   c0000698 <strlen>
c0014847:	40                   	inc    eax
c0014848:	89 04 24             	mov    DWORD PTR [esp],eax
c001484b:	e8 b7 54 ff ff       	call   c0009d07 <malloc>
c0014850:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014853:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014857:	e8 3c be fe ff       	call   c0000698 <strlen>
c001485c:	40                   	inc    eax
c001485d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014860:	e8 a2 54 ff ff       	call   c0009d07 <malloc>
c0014865:	89 34 24             	mov    DWORD PTR [esp],esi
c0014868:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001486c:	e8 27 be fe ff       	call   c0000698 <strlen>
c0014871:	83 c4 0c             	add    esp,0xc
c0014874:	40                   	inc    eax
c0014875:	50                   	push   eax
c0014876:	6a 00                	push   0x0
c0014878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001487c:	e8 fb bd fe ff       	call   c000067c <memset>
c0014881:	89 34 24             	mov    DWORD PTR [esp],esi
c0014884:	e8 0f be fe ff       	call   c0000698 <strlen>
c0014889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001488d:	8d 48 01             	lea    ecx,[eax+0x1]
c0014890:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014895:	89 de                	mov    esi,ebx
c0014897:	e8 fc bd fe ff       	call   c0000698 <strlen>
c001489c:	83 c4 0c             	add    esp,0xc
c001489f:	40                   	inc    eax
c00148a0:	50                   	push   eax
c00148a1:	6a 00                	push   0x0
c00148a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148a7:	e8 d0 bd fe ff       	call   c000067c <memset>
c00148ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148af:	e8 e4 bd fe ff       	call   c0000698 <strlen>
c00148b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148b8:	8d 48 01             	lea    ecx,[eax+0x1]
c00148bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148c0:	40                   	inc    eax
c00148c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00148c4:	c1 e0 03             	shl    eax,0x3
c00148c7:	5a                   	pop    edx
c00148c8:	59                   	pop    ecx
c00148c9:	50                   	push   eax
c00148ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00148cd:	e8 21 54 ff ff       	call   c0009cf3 <realloc>
c00148d2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00148d6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00148d9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00148dc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00148e0:	b9 08 00 00 00       	mov    ecx,0x8
c00148e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148e7:	83 c4 2c             	add    esp,0x2c
c00148ea:	5b                   	pop    ebx
c00148eb:	5e                   	pop    esi
c00148ec:	5f                   	pop    edi
c00148ed:	5d                   	pop    ebp
c00148ee:	c3                   	ret    
c00148ef:	90                   	nop

c00148f0 <EnvVarContainer::deleteEnv(char const*)>:
c00148f0:	c3                   	ret    
c00148f1:	90                   	nop

c00148f2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00148f2:	55                   	push   ebp
c00148f3:	57                   	push   edi
c00148f4:	56                   	push   esi
c00148f5:	53                   	push   ebx
c00148f6:	81 ec 38 01 00 00    	sub    esp,0x138
c00148fc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014903:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001490a:	68 14 01 00 00       	push   0x114
c001490f:	e8 f3 53 ff ff       	call   c0009d07 <malloc>
c0014914:	83 c4 0c             	add    esp,0xc
c0014917:	89 c3                	mov    ebx,eax
c0014919:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001491c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014923:	50                   	push   eax
c0014924:	e8 55 8c ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0014929:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001492c:	e8 95 8f ff ff       	call   c000d8c6 <File::exists()>
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	84 c0                	test   al,al
c0014936:	75 31                	jne    c0014969 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014938:	50                   	push   eax
c0014939:	50                   	push   eax
c001493a:	6a 12                	push   0x12
c001493c:	53                   	push   ebx
c001493d:	e8 16 8d ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0014942:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014944:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014947:	89 34 24             	mov    DWORD PTR [esp],esi
c001494a:	e8 49 bd fe ff       	call   c0000698 <strlen>
c001494f:	5a                   	pop    edx
c0014950:	31 d2                	xor    edx,edx
c0014952:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014956:	51                   	push   ecx
c0014957:	56                   	push   esi
c0014958:	52                   	push   edx
c0014959:	50                   	push   eax
c001495a:	53                   	push   ebx
c001495b:	ff d7                	call   edi
c001495d:	83 c4 14             	add    esp,0x14
c0014960:	53                   	push   ebx
c0014961:	e8 50 8d ff ff       	call   c000d6b6 <File::close()>
c0014966:	83 c4 10             	add    esp,0x10
c0014969:	56                   	push   esi
c001496a:	31 f6                	xor    esi,esi
c001496c:	68 00 01 00 00       	push   0x100
c0014971:	6a 00                	push   0x0
c0014973:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014977:	50                   	push   eax
c0014978:	e8 ff bc fe ff       	call   c000067c <memset>
c001497d:	5f                   	pop    edi
c001497e:	58                   	pop    eax
c001497f:	6a 01                	push   0x1
c0014981:	53                   	push   ebx
c0014982:	e8 d1 8c ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014992:	83 ec 0c             	sub    esp,0xc
c0014995:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014997:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001499b:	51                   	push   ecx
c001499c:	8d 54 24 23          	lea    edx,[esp+0x23]
c00149a0:	52                   	push   edx
c00149a1:	6a 00                	push   0x0
c00149a3:	6a 01                	push   0x1
c00149a5:	53                   	push   ebx
c00149a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149a9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00149ad:	83 c4 20             	add    esp,0x20
c00149b0:	3c 0d                	cmp    al,0xd
c00149b2:	0f 84 09 01 00 00    	je     c0014ac1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00149b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00149bd:	0f 84 ef 00 00 00    	je     c0014ab2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00149c3:	3c 0a                	cmp    al,0xa
c00149c5:	74 13                	je     c00149da <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00149c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149cc:	74 0c                	je     c00149da <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00149ce:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00149d4:	0f 8e d8 00 00 00    	jle    c0014ab2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00149da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	8d 78 01             	lea    edi,[eax+0x1]
c00149e4:	57                   	push   edi
c00149e5:	e8 1d 53 ff ff       	call   c0009d07 <malloc>
c00149ea:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00149ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149f2:	8d 56 04             	lea    edx,[esi+0x4]
c00149f5:	89 14 24             	mov    DWORD PTR [esp],edx
c00149f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00149fc:	e8 06 53 ff ff       	call   c0009d07 <malloc>
c0014a01:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014a05:	83 c4 0c             	add    esp,0xc
c0014a08:	57                   	push   edi
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a0f:	e8 68 bc fe ff       	call   c000067c <memset>
c0014a14:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014a18:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014a1c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014a20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a22:	83 c4 0c             	add    esp,0xc
c0014a25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014a29:	52                   	push   edx
c0014a2a:	6a 00                	push   0x0
c0014a2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a30:	e8 47 bc fe ff       	call   c000067c <memset>
c0014a35:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014a39:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a40:	e8 53 bc fe ff       	call   c0000698 <strlen>
c0014a45:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014a49:	89 c1                	mov    ecx,eax
c0014a4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a50:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014a53:	40                   	inc    eax
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014a5a:	85 d2                	test   edx,edx
c0014a5c:	75 0c                	jne    c0014a6a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014a5e:	83 ec 0c             	sub    esp,0xc
c0014a61:	6a 08                	push   0x8
c0014a63:	e8 9f 52 ff ff       	call   c0009d07 <malloc>
c0014a68:	eb 0c                	jmp    c0014a76 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014a6a:	c1 e0 03             	shl    eax,0x3
c0014a6d:	51                   	push   ecx
c0014a6e:	51                   	push   ecx
c0014a6f:	50                   	push   eax
c0014a70:	52                   	push   edx
c0014a71:	e8 7d 52 ff ff       	call   c0009cf3 <realloc>
c0014a76:	83 c4 10             	add    esp,0x10
c0014a79:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014a7c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014a7f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a82:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014a86:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014a8a:	b9 08 00 00 00       	mov    ecx,0x8
c0014a8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a91:	31 f6                	xor    esi,esi
c0014a93:	50                   	push   eax
c0014a94:	68 00 01 00 00       	push   0x100
c0014a99:	6a 00                	push   0x0
c0014a9b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014a9f:	50                   	push   eax
c0014aa0:	e8 d7 bb fe ff       	call   c000067c <memset>
c0014aa5:	83 c4 10             	add    esp,0x10
c0014aa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ab0:	eb 0f                	jmp    c0014ac1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014ab2:	3c 3d                	cmp    al,0x3d
c0014ab4:	74 07                	je     c0014abd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014ab6:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014aba:	46                   	inc    esi
c0014abb:	eb 04                	jmp    c0014ac1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014abd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014ac1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ac6:	0f 85 c6 fe ff ff    	jne    c0014992 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014acc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014ad2:	5b                   	pop    ebx
c0014ad3:	5e                   	pop    esi
c0014ad4:	5f                   	pop    edi
c0014ad5:	5d                   	pop    ebp
c0014ad6:	c3                   	ret    
c0014ad7:	90                   	nop

c0014ad8 <EnvVarContainer::__loadSystem()>:
c0014ad8:	83 ec 10             	sub    esp,0x10
c0014adb:	68 80 76 02 c0       	push   0xc0027680
c0014ae0:	68 75 58 02 c0       	push   0xc0025875
c0014ae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae9:	e8 04 fe ff ff       	call   c00148f2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014aee:	83 c4 1c             	add    esp,0x1c
c0014af1:	c3                   	ret    

c0014af2 <EnvVarContainer::__loadUser()>:
c0014af2:	c3                   	ret    
c0014af3:	90                   	nop

c0014af4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014af8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014b09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014b14:	90                   	nop
c0014b15:	c3                   	ret    

c0014b16 <EnvVarContainer::~EnvVarContainer()>:
c0014b16:	83 ec 0c             	sub    esp,0xc
c0014b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b20:	85 c0                	test   eax,eax
c0014b22:	74 1d                	je     c0014b41 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b2a:	85 c0                	test   eax,eax
c0014b2c:	74 13                	je     c0014b41 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	50                   	push   eax
c0014b39:	e8 d9 51 ff ff       	call   c0009d17 <free>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	90                   	nop
c0014b42:	83 c4 0c             	add    esp,0xc
c0014b45:	c3                   	ret    

c0014b46 <Krnl::getEnv(Process*, char const*)>:
c0014b46:	53                   	push   ebx
c0014b47:	83 ec 08             	sub    esp,0x8
c0014b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b52:	39 05 f0 91 02 c0    	cmp    DWORD PTR ds:0xc00291f0,eax
c0014b58:	74 04                	je     c0014b5e <Krnl::getEnv(Process*, char const*)+0x18>
c0014b5a:	85 c0                	test   eax,eax
c0014b5c:	75 0b                	jne    c0014b69 <Krnl::getEnv(Process*, char const*)+0x23>
c0014b5e:	a1 74 87 02 c0       	mov    eax,ds:0xc0028774
c0014b63:	85 c0                	test   eax,eax
c0014b65:	75 19                	jne    c0014b80 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014b67:	eb 27                	jmp    c0014b90 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014b69:	52                   	push   edx
c0014b6a:	52                   	push   edx
c0014b6b:	53                   	push   ebx
c0014b6c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014b72:	e8 79 fc ff ff       	call   c00147f0 <EnvVarContainer::getEnv(char const*)>
c0014b77:	83 c4 10             	add    esp,0x10
c0014b7a:	85 c0                	test   eax,eax
c0014b7c:	75 28                	jne    c0014ba6 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b7e:	eb de                	jmp    c0014b5e <Krnl::getEnv(Process*, char const*)+0x18>
c0014b80:	52                   	push   edx
c0014b81:	52                   	push   edx
c0014b82:	53                   	push   ebx
c0014b83:	50                   	push   eax
c0014b84:	e8 67 fc ff ff       	call   c00147f0 <EnvVarContainer::getEnv(char const*)>
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	85 c0                	test   eax,eax
c0014b8e:	75 16                	jne    c0014ba6 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b90:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014b94:	a1 78 87 02 c0       	mov    eax,ds:0xc0028778
c0014b99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b9d:	83 c4 08             	add    esp,0x8
c0014ba0:	5b                   	pop    ebx
c0014ba1:	e9 4a fc ff ff       	jmp    c00147f0 <EnvVarContainer::getEnv(char const*)>
c0014ba6:	83 c4 08             	add    esp,0x8
c0014ba9:	5b                   	pop    ebx
c0014baa:	c3                   	ret    

c0014bab <Krnl::setEnvSystem(char const*, char const*)>:
c0014bab:	83 ec 10             	sub    esp,0x10
c0014bae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bb6:	ff 35 78 87 02 c0    	push   DWORD PTR ds:0xc0028778
c0014bbc:	e8 6d fc ff ff       	call   c001482e <EnvVarContainer::setEnv(char const*, char const*)>
c0014bc1:	83 c4 1c             	add    esp,0x1c
c0014bc4:	c3                   	ret    

c0014bc5 <Krnl::setEnvUser(char const*, char const*)>:
c0014bc5:	a1 74 87 02 c0       	mov    eax,ds:0xc0028774
c0014bca:	85 c0                	test   eax,eax
c0014bcc:	74 15                	je     c0014be3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014bce:	83 ec 10             	sub    esp,0x10
c0014bd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bd9:	50                   	push   eax
c0014bda:	e8 4f fc ff ff       	call   c001482e <EnvVarContainer::setEnv(char const*, char const*)>
c0014bdf:	83 c4 1c             	add    esp,0x1c
c0014be2:	c3                   	ret    
c0014be3:	c3                   	ret    

c0014be4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014bee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bf2:	e9 37 fc ff ff       	jmp    c001482e <EnvVarContainer::setEnv(char const*, char const*)>

c0014bf7 <Krnl::deleteEnvSystem(char const*)>:
c0014bf7:	c3                   	ret    

c0014bf8 <Krnl::deleteEnvUser(char const*)>:
c0014bf8:	c3                   	ret    

c0014bf9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014bf9:	c3                   	ret    

c0014bfa <Krnl::newProcessEnv(Process*)>:
c0014bfa:	83 ec 28             	sub    esp,0x28
c0014bfd:	6a 0c                	push   0xc
c0014bff:	e8 03 51 ff ff       	call   c0009d07 <malloc>
c0014c04:	5a                   	pop    edx
c0014c05:	59                   	pop    ecx
c0014c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c0a:	50                   	push   eax
c0014c0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c0f:	e8 e0 fe ff ff       	call   c0014af4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c18:	83 c4 2c             	add    esp,0x2c
c0014c1b:	c3                   	ret    

c0014c1c <Krnl::copyProcessEnv(Process*, Process*)>:
c0014c1c:	57                   	push   edi
c0014c1d:	56                   	push   esi
c0014c1e:	53                   	push   ebx
c0014c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c23:	83 ec 0c             	sub    esp,0xc
c0014c26:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014c2c:	6a 0c                	push   0xc
c0014c2e:	e8 d4 50 ff ff       	call   c0009d07 <malloc>
c0014c33:	89 c3                	mov    ebx,eax
c0014c35:	58                   	pop    eax
c0014c36:	5a                   	pop    edx
c0014c37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c3b:	53                   	push   ebx
c0014c3c:	e8 b3 fe ff ff       	call   c0014af4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c41:	8b 07                	mov    eax,DWORD PTR [edi]
c0014c43:	89 03                	mov    DWORD PTR [ebx],eax
c0014c45:	c1 e0 03             	shl    eax,0x3
c0014c48:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c4b:	e8 b7 50 ff ff       	call   c0009d07 <malloc>
c0014c50:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014c53:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014c55:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014c58:	c1 e1 03             	shl    ecx,0x3
c0014c5b:	89 c7                	mov    edi,eax
c0014c5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c5f:	83 c4 10             	add    esp,0x10
c0014c62:	89 d8                	mov    eax,ebx
c0014c64:	5b                   	pop    ebx
c0014c65:	5e                   	pop    esi
c0014c66:	5f                   	pop    edi
c0014c67:	c3                   	ret    

c0014c68 <Krnl::loadSystemEnv()>:
c0014c68:	53                   	push   ebx
c0014c69:	83 ec 14             	sub    esp,0x14
c0014c6c:	6a 0c                	push   0xc
c0014c6e:	e8 94 50 ff ff       	call   c0009d07 <malloc>
c0014c73:	89 c3                	mov    ebx,eax
c0014c75:	58                   	pop    eax
c0014c76:	5a                   	pop    edx
c0014c77:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0014c7d:	53                   	push   ebx
c0014c7e:	e8 71 fe ff ff       	call   c0014af4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c86:	89 1d 78 87 02 c0    	mov    DWORD PTR ds:0xc0028778,ebx
c0014c8c:	e8 47 fe ff ff       	call   c0014ad8 <EnvVarContainer::__loadSystem()>
c0014c91:	83 c4 18             	add    esp,0x18
c0014c94:	5b                   	pop    ebx
c0014c95:	c3                   	ret    

c0014c96 <Krnl::loadUserEnv()>:
c0014c96:	53                   	push   ebx
c0014c97:	83 ec 14             	sub    esp,0x14
c0014c9a:	6a 0c                	push   0xc
c0014c9c:	e8 66 50 ff ff       	call   c0009d07 <malloc>
c0014ca1:	89 c3                	mov    ebx,eax
c0014ca3:	58                   	pop    eax
c0014ca4:	5a                   	pop    edx
c0014ca5:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0014cab:	53                   	push   ebx
c0014cac:	e8 43 fe ff ff       	call   c0014af4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014cb1:	89 1d 74 87 02 c0    	mov    DWORD PTR ds:0xc0028774,ebx
c0014cb7:	83 c4 18             	add    esp,0x18
c0014cba:	5b                   	pop    ebx
c0014cbb:	c3                   	ret    

c0014cbc <Krnl::flushEnv()>:
c0014cbc:	c3                   	ret    

c0014cbd <Krnl::getProcessTotalEnvCount(Process*)>:
c0014cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cc1:	8b 15 74 87 02 c0    	mov    edx,DWORD PTR ds:0xc0028774
c0014cc7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014ccd:	a1 78 87 02 c0       	mov    eax,ds:0xc0028778
c0014cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd4:	03 01                	add    eax,DWORD PTR [ecx]
c0014cd6:	85 d2                	test   edx,edx
c0014cd8:	74 02                	je     c0014cdc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014cda:	03 02                	add    eax,DWORD PTR [edx]
c0014cdc:	c3                   	ret    

c0014cdd <Krnl::getProcessEnvPair(Process*, int)>:
c0014cdd:	57                   	push   edi
c0014cde:	56                   	push   esi
c0014cdf:	8b 35 74 87 02 c0    	mov    esi,DWORD PTR ds:0xc0028774
c0014ce5:	53                   	push   ebx
c0014ce6:	85 f6                	test   esi,esi
c0014ce8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014cf0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014cf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014cfa:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014cfc:	75 16                	jne    c0014d14 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014cfe:	39 c2                	cmp    edx,eax
c0014d00:	7c 16                	jl     c0014d18 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014d02:	8b 0d 78 87 02 c0    	mov    ecx,DWORD PTR ds:0xc0028778
c0014d08:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014d0a:	01 c6                	add    esi,eax
c0014d0c:	39 d6                	cmp    esi,edx
c0014d0e:	7e 3c                	jle    c0014d4c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014d10:	29 c2                	sub    edx,eax
c0014d12:	eb 04                	jmp    c0014d18 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014d14:	39 c2                	cmp    edx,eax
c0014d16:	7d 05                	jge    c0014d1d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014d18:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014d1b:	eb 20                	jmp    c0014d3d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014d1d:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014d1f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014d22:	39 d1                	cmp    ecx,edx
c0014d24:	7e 04                	jle    c0014d2a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014d26:	29 c2                	sub    edx,eax
c0014d28:	eb 10                	jmp    c0014d3a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014d2a:	8b 35 78 87 02 c0    	mov    esi,DWORD PTR ds:0xc0028778
c0014d30:	03 0e                	add    ecx,DWORD PTR [esi]
c0014d32:	39 d1                	cmp    ecx,edx
c0014d34:	7e 16                	jle    c0014d4c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014d36:	29 c2                	sub    edx,eax
c0014d38:	29 fa                	sub    edx,edi
c0014d3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014d3d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014d40:	8b 02                	mov    eax,DWORD PTR [edx]
c0014d42:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014d45:	89 03                	mov    DWORD PTR [ebx],eax
c0014d47:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014d4a:	eb 1d                	jmp    c0014d69 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014d4c:	83 ec 0c             	sub    esp,0xc
c0014d4f:	68 97 58 02 c0       	push   0xc0025897
c0014d54:	e8 18 00 00 00       	call   c0014d71 <Krnl::panic(char const*)>
c0014d59:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014d5f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	89 d8                	mov    eax,ebx
c0014d6b:	5b                   	pop    ebx
c0014d6c:	5e                   	pop    esi
c0014d6d:	5f                   	pop    edi
c0014d6e:	c2 04 00             	ret    0x4

c0014d71 <Krnl::panic(char const*)>:
c0014d71:	53                   	push   ebx
c0014d72:	83 ec 10             	sub    esp,0x10
c0014d75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d79:	fa                   	cli    
c0014d7a:	c6 05 84 87 02 c0 01 	mov    BYTE PTR ds:0xc0028784,0x1
c0014d81:	53                   	push   ebx
c0014d82:	68 b1 58 02 c0       	push   0xc00258b1
c0014d87:	e8 87 82 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0014d8c:	83 c4 0c             	add    esp,0xc
c0014d8f:	6a 01                	push   0x1
c0014d91:	6a 0f                	push   0xf
c0014d93:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014d99:	e8 b6 5e ff ff       	call   c000ac54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d9e:	59                   	pop    ecx
c0014d9f:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014da5:	e8 c2 63 ff ff       	call   c000b16c <VgaText::clearScreen()>
c0014daa:	58                   	pop    eax
c0014dab:	5a                   	pop    edx
c0014dac:	68 08 59 02 c0       	push   0xc0025908
c0014db1:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014db7:	e8 d8 5e ff ff       	call   c000ac94 <VgaText::setTitle(char*)>
c0014dbc:	83 c4 0c             	add    esp,0xc
c0014dbf:	6a 01                	push   0x1
c0014dc1:	6a 0f                	push   0xf
c0014dc3:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014dc9:	e8 86 5e ff ff       	call   c000ac54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014dce:	59                   	pop    ecx
c0014dcf:	58                   	pop    eax
c0014dd0:	68 ca 58 02 c0       	push   0xc00258ca
c0014dd5:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014ddb:	e8 18 65 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014de0:	58                   	pop    eax
c0014de1:	5a                   	pop    edx
c0014de2:	68 54 59 02 c0       	push   0xc0025954
c0014de7:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014ded:	e8 06 65 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014df2:	59                   	pop    ecx
c0014df3:	58                   	pop    eax
c0014df4:	68 e6 58 02 c0       	push   0xc00258e6
c0014df9:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014dff:	e8 f4 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e04:	58                   	pop    eax
c0014e05:	5a                   	pop    edx
c0014e06:	53                   	push   ebx
c0014e07:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e0d:	e8 e6 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e12:	59                   	pop    ecx
c0014e13:	5b                   	pop    ebx
c0014e14:	68 06 59 02 c0       	push   0xc0025906
c0014e19:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e1f:	e8 d4 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e24:	58                   	pop    eax
c0014e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e29:	e8 77 2b 00 00       	call   c00179a5 <Thr::getDriverNameFromAddress(unsigned long)>
c0014e2e:	83 c4 10             	add    esp,0x10
c0014e31:	85 c0                	test   eax,eax
c0014e33:	0f 84 36 01 00 00    	je     c0014f6f <Krnl::panic(char const*)+0x1fe>
c0014e39:	83 ec 08             	sub    esp,0x8
c0014e3c:	89 c3                	mov    ebx,eax
c0014e3e:	68 90 59 02 c0       	push   0xc0025990
c0014e43:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e49:	e8 aa 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e4e:	59                   	pop    ecx
c0014e4f:	58                   	pop    eax
c0014e50:	68 e6 58 02 c0       	push   0xc00258e6
c0014e55:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e5b:	e8 98 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e60:	58                   	pop    eax
c0014e61:	5a                   	pop    edx
c0014e62:	53                   	push   ebx
c0014e63:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e69:	e8 8a 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	83 ec 08             	sub    esp,0x8
c0014e74:	68 05 59 02 c0       	push   0xc0025905
c0014e79:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e7f:	e8 74 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e84:	58                   	pop    eax
c0014e85:	5a                   	pop    edx
c0014e86:	68 e8 59 02 c0       	push   0xc00259e8
c0014e8b:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014e91:	e8 62 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014e96:	59                   	pop    ecx
c0014e97:	5b                   	pop    ebx
c0014e98:	68 28 5a 02 c0       	push   0xc0025a28
c0014e9d:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014ea3:	e8 50 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014ea8:	58                   	pop    eax
c0014ea9:	5a                   	pop    edx
c0014eaa:	68 f1 58 02 c0       	push   0xc00258f1
c0014eaf:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014eb5:	e8 3e 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014eba:	59                   	pop    ecx
c0014ebb:	5b                   	pop    ebx
c0014ebc:	68 6c 5a 02 c0       	push   0xc0025a6c
c0014ec1:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014ec7:	e8 2c 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014ecc:	58                   	pop    eax
c0014ecd:	5a                   	pop    edx
c0014ece:	68 09 59 02 c0       	push   0xc0025909
c0014ed3:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014ed9:	e8 1a 64 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014ede:	0f 20 c0             	mov    eax,cr0
c0014ee1:	59                   	pop    ecx
c0014ee2:	5b                   	pop    ebx
c0014ee3:	50                   	push   eax
c0014ee4:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014eea:	e8 c3 63 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c0014eef:	58                   	pop    eax
c0014ef0:	5a                   	pop    edx
c0014ef1:	68 13 59 02 c0       	push   0xc0025913
c0014ef6:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014efc:	e8 f7 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f01:	0f 20 d0             	mov    eax,cr2
c0014f04:	59                   	pop    ecx
c0014f05:	5b                   	pop    ebx
c0014f06:	50                   	push   eax
c0014f07:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f0d:	e8 a0 63 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c0014f12:	58                   	pop    eax
c0014f13:	5a                   	pop    edx
c0014f14:	68 1d 59 02 c0       	push   0xc002591d
c0014f19:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f1f:	e8 d4 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f24:	0f 20 d8             	mov    eax,cr3
c0014f27:	59                   	pop    ecx
c0014f28:	5b                   	pop    ebx
c0014f29:	50                   	push   eax
c0014f2a:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f30:	e8 7d 63 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c0014f35:	58                   	pop    eax
c0014f36:	5a                   	pop    edx
c0014f37:	68 30 59 02 c0       	push   0xc0025930
c0014f3c:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f42:	e8 b1 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f47:	0f 20 e0             	mov    eax,cr4
c0014f4a:	59                   	pop    ecx
c0014f4b:	5b                   	pop    ebx
c0014f4c:	50                   	push   eax
c0014f4d:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f53:	e8 5a 63 ff ff       	call   c000b2b2 <VgaText::putx(unsigned int)>
c0014f58:	58                   	pop    eax
c0014f59:	5a                   	pop    edx
c0014f5a:	68 3a 59 02 c0       	push   0xc002593a
c0014f5f:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f65:	e8 8e 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	eb fe                	jmp    c0014f6d <Krnl::panic(char const*)+0x1fc>
c0014f6f:	51                   	push   ecx
c0014f70:	51                   	push   ecx
c0014f71:	68 bc 59 02 c0       	push   0xc00259bc
c0014f76:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f7c:	e8 77 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f81:	5b                   	pop    ebx
c0014f82:	58                   	pop    eax
c0014f83:	68 e6 58 02 c0       	push   0xc00258e6
c0014f88:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014f8e:	e8 65 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014f93:	58                   	pop    eax
c0014f94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f99:	5a                   	pop    edx
c0014f9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f9d:	83 c0 0c             	add    eax,0xc
c0014fa0:	50                   	push   eax
c0014fa1:	ff 35 24 7d 02 c0    	push   DWORD PTR ds:0xc0027d24
c0014fa7:	e8 4c 63 ff ff       	call   c000b2f8 <VgaText::puts(char const*)>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	e9 bd fe ff ff       	jmp    c0014e71 <Krnl::panic(char const*)+0x100>

c0014fb4 <Krnl::powerThread(void*)>:
c0014fb4:	53                   	push   ebx
c0014fb5:	83 ec 08             	sub    esp,0x8
c0014fb8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0014fbd:	48                   	dec    eax
c0014fbe:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0014fc3:	75 01                	jne    c0014fc6 <Krnl::powerThread(void*)+0x12>
c0014fc5:	fb                   	sti    
c0014fc6:	52                   	push   edx
c0014fc7:	52                   	push   edx
c0014fc8:	ff 35 e4 87 02 c0    	push   DWORD PTR ds:0xc00287e4
c0014fce:	68 92 5a 02 c0       	push   0xc0025a92
c0014fd3:	e8 3b 80 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0014fd8:	59                   	pop    ecx
c0014fd9:	8b 1d d4 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287d4
c0014fdf:	58                   	pop    eax
c0014fe0:	c6 05 a0 87 02 c0 00 	mov    BYTE PTR ds:0xc00287a0,0x0
c0014fe7:	53                   	push   ebx
c0014fe8:	68 9c 5a 02 c0       	push   0xc0025a9c
c0014fed:	e8 21 80 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0014ff2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014ff9:	e8 fa 36 00 00       	call   c00186f8 <sleep(unsigned int)>
c0014ffe:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	83 c0 0a             	add    eax,0xa
c0015009:	85 db                	test   ebx,ebx
c001500b:	a3 e4 87 02 c0       	mov    ds:0xc00287e4,eax
c0015010:	74 b4                	je     c0014fc6 <Krnl::powerThread(void*)+0x12>
c0015012:	39 d8                	cmp    eax,ebx
c0015014:	7e b0                	jle    c0014fc6 <Krnl::powerThread(void*)+0x12>
c0015016:	83 ec 0c             	sub    esp,0xc
c0015019:	68 b4 5a 02 c0       	push   0xc0025ab4
c001501e:	e8 f0 7f ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0015023:	58                   	pop    eax
c0015024:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c001502a:	e8 cb 42 ff ff       	call   c00092fa <Computer::sleep()>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	eb 92                	jmp    c0014fc6 <Krnl::powerThread(void*)+0x12>

c0015034 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0015034:	57                   	push   edi
c0015035:	b9 09 00 00 00       	mov    ecx,0x9
c001503a:	56                   	push   esi
c001503b:	bf c0 87 02 c0       	mov    edi,0xc00287c0
c0015040:	fc                   	cld    
c0015041:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015045:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015047:	5e                   	pop    esi
c0015048:	5f                   	pop    edi
c0015049:	c3                   	ret    

c001504a <Krnl::userIOReceived()>:
c001504a:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c0015054:	c3                   	ret    

c0015055 <Krnl::handlePowerButton()>:
c0015055:	83 ec 0c             	sub    esp,0xc
c0015058:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c001505d:	83 f8 02             	cmp    eax,0x2
c0015060:	75 10                	jne    c0015072 <Krnl::handlePowerButton()+0x1d>
c0015062:	83 ec 0c             	sub    esp,0xc
c0015065:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c001506b:	e8 5a 42 ff ff       	call   c00092ca <Computer::shutdown()>
c0015070:	eb 11                	jmp    c0015083 <Krnl::handlePowerButton()+0x2e>
c0015072:	48                   	dec    eax
c0015073:	75 11                	jne    c0015086 <Krnl::handlePowerButton()+0x31>
c0015075:	83 ec 0c             	sub    esp,0xc
c0015078:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c001507e:	e8 77 42 ff ff       	call   c00092fa <Computer::sleep()>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	83 c4 0c             	add    esp,0xc
c0015089:	c3                   	ret    

c001508a <Krnl::handleSleepButton()>:
c001508a:	83 ec 0c             	sub    esp,0xc
c001508d:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c0015092:	83 f8 02             	cmp    eax,0x2
c0015095:	75 10                	jne    c00150a7 <Krnl::handleSleepButton()+0x1d>
c0015097:	83 ec 0c             	sub    esp,0xc
c001509a:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c00150a0:	e8 25 42 ff ff       	call   c00092ca <Computer::shutdown()>
c00150a5:	eb 11                	jmp    c00150b8 <Krnl::handleSleepButton()+0x2e>
c00150a7:	48                   	dec    eax
c00150a8:	75 11                	jne    c00150bb <Krnl::handleSleepButton()+0x31>
c00150aa:	83 ec 0c             	sub    esp,0xc
c00150ad:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c00150b3:	e8 42 42 ff ff       	call   c00092fa <Computer::sleep()>
c00150b8:	83 c4 10             	add    esp,0x10
c00150bb:	83 c4 0c             	add    esp,0xc
c00150be:	c3                   	ret    

c00150bf <Krnl::setupPowerManager()>:
c00150bf:	83 ec 0c             	sub    esp,0xc
c00150c2:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c00150cc:	68 f0 00 00 00       	push   0xf0
c00150d1:	c6 05 a0 87 02 c0 00 	mov    BYTE PTR ds:0xc00287a0,0x0
c00150d8:	6a 00                	push   0x0
c00150da:	68 b4 4f 01 c0       	push   0xc0014fb4
c00150df:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c00150e5:	e8 ea 30 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c00150ea:	c7 05 c0 87 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00287c0,0x2
c00150f4:	c7 05 c4 87 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00287c4,0x1
c00150fe:	c7 05 c8 87 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00287c8,0x3
c0015108:	c7 05 cc 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287cc,0x0
c0015112:	c7 05 d8 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d8,0x0
c001511c:	c7 05 d0 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d0,0x0
c0015126:	c7 05 dc 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287dc,0x0
c0015130:	c7 05 d4 87 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00287d4,0x3c
c001513a:	c7 05 e0 87 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00287e0,0x3c
c0015144:	83 c4 1c             	add    esp,0x1c
c0015147:	c3                   	ret    

c0015148 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015148:	55                   	push   ebp
c0015149:	57                   	push   edi
c001514a:	56                   	push   esi
c001514b:	53                   	push   ebx
c001514c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015152:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015159:	8a 1e                	mov    bl,BYTE PTR [esi]
c001515b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001515e:	80 fb 40             	cmp    bl,0x40
c0015161:	75 1b                	jne    c001517e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015163:	8a 16                	mov    dl,BYTE PTR [esi]
c0015165:	84 d2                	test   dl,dl
c0015167:	0f 84 f1 00 00 00    	je     c001525e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001516d:	8d 46 01             	lea    eax,[esi+0x1]
c0015170:	80 fa 3a             	cmp    dl,0x3a
c0015173:	74 04                	je     c0015179 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015175:	89 c6                	mov    esi,eax
c0015177:	eb ea                	jmp    c0015163 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015179:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001517c:	89 c6                	mov    esi,eax
c001517e:	50                   	push   eax
c001517f:	6a 40                	push   0x40
c0015181:	6a 00                	push   0x0
c0015183:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015187:	50                   	push   eax
c0015188:	e8 ef b4 fe ff       	call   c000067c <memset>
c001518d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015194:	31 c0                	xor    eax,eax
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	8a 0f                	mov    cl,BYTE PTR [edi]
c001519b:	84 c9                	test   cl,cl
c001519d:	0f 84 bb 00 00 00    	je     c001525e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151a3:	3d c7 00 00 00       	cmp    eax,0xc7
c00151a8:	0f 8f b0 00 00 00    	jg     c001525e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151ae:	80 f9 0a             	cmp    cl,0xa
c00151b1:	0f 85 98 00 00 00    	jne    c001524f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00151b7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00151bc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00151c0:	a8 df                	test   al,0xdf
c00151c2:	0f 94 c1             	sete   cl
c00151c5:	3c 23                	cmp    al,0x23
c00151c7:	0f 94 c2             	sete   dl
c00151ca:	08 d1                	or     cl,dl
c00151cc:	75 4a                	jne    c0015218 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151ce:	8d 50 f7             	lea    edx,[eax-0x9]
c00151d1:	80 fa 01             	cmp    dl,0x1
c00151d4:	76 42                	jbe    c0015218 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151d6:	3c 5b                	cmp    al,0x5b
c00151d8:	75 42                	jne    c001521c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00151da:	80 fb 40             	cmp    bl,0x40
c00151dd:	75 39                	jne    c0015218 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151df:	83 ec 0c             	sub    esp,0xc
c00151e2:	8d 54 24 65          	lea    edx,[esp+0x65]
c00151e6:	52                   	push   edx
c00151e7:	e8 ac b4 fe ff       	call   c0000698 <strlen>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	83 f8 3f             	cmp    eax,0x3f
c00151f2:	77 6a                	ja     c001525e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151f4:	50                   	push   eax
c00151f5:	50                   	push   eax
c00151f6:	8d 54 24 61          	lea    edx,[esp+0x61]
c00151fa:	52                   	push   edx
c00151fb:	8d 54 24 24          	lea    edx,[esp+0x24]
c00151ff:	52                   	push   edx
c0015200:	e8 33 b5 fe ff       	call   c0000738 <strcpy>
c0015205:	58                   	pop    eax
c0015206:	8d 54 24 24          	lea    edx,[esp+0x24]
c001520a:	52                   	push   edx
c001520b:	e8 88 b4 fe ff       	call   c0000698 <strlen>
c0015210:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	31 d2                	xor    edx,edx
c001521a:	eb 3a                	jmp    c0015256 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001521c:	80 fb 40             	cmp    bl,0x40
c001521f:	74 06                	je     c0015227 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015221:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015225:	eb 20                	jmp    c0015247 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015227:	50                   	push   eax
c0015228:	50                   	push   eax
c0015229:	55                   	push   ebp
c001522a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001522e:	50                   	push   eax
c001522f:	e8 90 b5 fe ff       	call   c00007c4 <strcmp>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	85 c0                	test   eax,eax
c0015239:	75 dd                	jne    c0015218 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001523b:	eb e4                	jmp    c0015221 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001523d:	8d 50 01             	lea    edx,[eax+0x1]
c0015240:	80 f9 3d             	cmp    cl,0x3d
c0015243:	74 1d                	je     c0015262 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015245:	89 d0                	mov    eax,edx
c0015247:	8a 08                	mov    cl,BYTE PTR [eax]
c0015249:	84 c9                	test   cl,cl
c001524b:	75 f0                	jne    c001523d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001524d:	eb 0f                	jmp    c001525e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001524f:	8d 50 01             	lea    edx,[eax+0x1]
c0015252:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015256:	47                   	inc    edi
c0015257:	89 d0                	mov    eax,edx
c0015259:	e9 3b ff ff ff       	jmp    c0015199 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001525e:	31 c0                	xor    eax,eax
c0015260:	eb 33                	jmp    c0015295 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015262:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015266:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015269:	50                   	push   eax
c001526a:	50                   	push   eax
c001526b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001526f:	50                   	push   eax
c0015270:	56                   	push   esi
c0015271:	e8 4e b5 fe ff       	call   c00007c4 <strcmp>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	85 c0                	test   eax,eax
c001527b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001527f:	75 97                	jne    c0015218 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015281:	51                   	push   ecx
c0015282:	51                   	push   ecx
c0015283:	52                   	push   edx
c0015284:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001528b:	e8 a8 b4 fe ff       	call   c0000738 <strcpy>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	b0 01                	mov    al,0x1
c0015295:	81 c4 2c 01 00 00    	add    esp,0x12c
c001529b:	5b                   	pop    ebx
c001529c:	5e                   	pop    esi
c001529d:	5f                   	pop    edi
c001529e:	5d                   	pop    ebp
c001529f:	c3                   	ret    

c00152a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00152a0:	57                   	push   edi
c00152a1:	56                   	push   esi
c00152a2:	53                   	push   ebx
c00152a3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00152a9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00152b0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00152b7:	53                   	push   ebx
c00152b8:	e8 db b3 fe ff       	call   c0000698 <strlen>
c00152bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00152c0:	89 c7                	mov    edi,eax
c00152c2:	e8 d1 b3 fe ff       	call   c0000698 <strlen>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00152ce:	3d ff 00 00 00       	cmp    eax,0xff
c00152d3:	0f 87 d3 00 00 00    	ja     c00153ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00152d9:	57                   	push   edi
c00152da:	57                   	push   edi
c00152db:	56                   	push   esi
c00152dc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00152e0:	56                   	push   esi
c00152e1:	e8 52 b4 fe ff       	call   c0000738 <strcpy>
c00152e6:	58                   	pop    eax
c00152e7:	5a                   	pop    edx
c00152e8:	68 17 5e 02 c0       	push   0xc0025e17
c00152ed:	56                   	push   esi
c00152ee:	e8 85 b5 fe ff       	call   c0000878 <strcat>
c00152f3:	59                   	pop    ecx
c00152f4:	5f                   	pop    edi
c00152f5:	53                   	push   ebx
c00152f6:	56                   	push   esi
c00152f7:	e8 7c b5 fe ff       	call   c0000878 <strcat>
c00152fc:	58                   	pop    eax
c00152fd:	5a                   	pop    edx
c00152fe:	68 c1 5a 02 c0       	push   0xc0025ac1
c0015303:	56                   	push   esi
c0015304:	e8 6f b5 fe ff       	call   c0000878 <strcat>
c0015309:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015310:	e8 f2 49 ff ff       	call   c0009d07 <malloc>
c0015315:	83 c4 0c             	add    esp,0xc
c0015318:	89 c3                	mov    ebx,eax
c001531a:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0015320:	56                   	push   esi
c0015321:	50                   	push   eax
c0015322:	e8 57 82 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	85 db                	test   ebx,ebx
c001532c:	74 7e                	je     c00153ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001532e:	51                   	push   ecx
c001532f:	51                   	push   ecx
c0015330:	6a 01                	push   0x1
c0015332:	53                   	push   ebx
c0015333:	e8 20 83 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	85 c0                	test   eax,eax
c001533d:	74 08                	je     c0015347 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015344:	53                   	push   ebx
c0015345:	eb 5f                	jmp    c00153a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015347:	52                   	push   edx
c0015348:	8d 44 24 17          	lea    eax,[esp+0x17]
c001534c:	50                   	push   eax
c001534d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015351:	50                   	push   eax
c0015352:	53                   	push   ebx
c0015353:	e8 ac 85 ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c0015358:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	89 c1                	mov    ecx,eax
c0015361:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015365:	74 31                	je     c0015398 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015367:	83 ec 0c             	sub    esp,0xc
c001536a:	50                   	push   eax
c001536b:	e8 97 49 ff ff       	call   c0009d07 <malloc>
c0015370:	89 c6                	mov    esi,eax
c0015372:	58                   	pop    eax
c0015373:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015375:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015379:	52                   	push   edx
c001537a:	56                   	push   esi
c001537b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001537f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015383:	53                   	push   ebx
c0015384:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015387:	83 c4 20             	add    esp,0x20
c001538a:	85 c0                	test   eax,eax
c001538c:	75 0a                	jne    c0015398 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001538e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015392:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015396:	74 18                	je     c00153b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015398:	83 ec 0c             	sub    esp,0xc
c001539b:	53                   	push   ebx
c001539c:	e8 15 83 ff ff       	call   c000d6b6 <File::close()>
c00153a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	31 c0                	xor    eax,eax
c00153ae:	eb 3b                	jmp    c00153eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00153b0:	83 ec 0c             	sub    esp,0xc
c00153b3:	53                   	push   ebx
c00153b4:	e8 fd 82 ff ff       	call   c000d6b6 <File::close()>
c00153b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153c1:	83 c4 0c             	add    esp,0xc
c00153c4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00153cb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00153d2:	56                   	push   esi
c00153d3:	e8 70 fd ff ff       	call   c0015148 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00153d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00153db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00153df:	e8 33 49 ff ff       	call   c0009d17 <free>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00153eb:	81 c4 20 01 00 00    	add    esp,0x120
c00153f1:	5b                   	pop    ebx
c00153f2:	5e                   	pop    esi
c00153f3:	5f                   	pop    edi
c00153f4:	c3                   	ret    

c00153f5 <Reg::getLine(char*, char*, char*)>:
c00153f5:	57                   	push   edi
c00153f6:	56                   	push   esi
c00153f7:	53                   	push   ebx
c00153f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015400:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015404:	57                   	push   edi
c0015405:	56                   	push   esi
c0015406:	53                   	push   ebx
c0015407:	68 c6 5a 02 c0       	push   0xc0025ac6
c001540c:	e8 8f fe ff ff       	call   c00152a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	84 c0                	test   al,al
c0015416:	75 10                	jne    c0015428 <Reg::getLine(char*, char*, char*)+0x33>
c0015418:	57                   	push   edi
c0015419:	56                   	push   esi
c001541a:	53                   	push   ebx
c001541b:	68 eb 5a 02 c0       	push   0xc0025aeb
c0015420:	e8 7b fe ff ff       	call   c00152a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	5b                   	pop    ebx
c0015429:	5e                   	pop    esi
c001542a:	5f                   	pop    edi
c001542b:	c3                   	ret    

c001542c <Reg::readInt(char*, char*, int*)>:
c001542c:	55                   	push   ebp
c001542d:	57                   	push   edi
c001542e:	56                   	push   esi
c001542f:	53                   	push   ebx
c0015430:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015436:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001543a:	57                   	push   edi
c001543b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015442:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015449:	e8 a7 ff ff ff       	call   c00153f5 <Reg::getLine(char*, char*, char*)>
c001544e:	83 c4 10             	add    esp,0x10
c0015451:	84 c0                	test   al,al
c0015453:	0f 84 b3 00 00 00    	je     c001550c <Reg::readInt(char*, char*, int*)+0xe0>
c0015459:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001545d:	80 fa 2b             	cmp    dl,0x2b
c0015460:	74 0c                	je     c001546e <Reg::readInt(char*, char*, int*)+0x42>
c0015462:	80 fa 2d             	cmp    dl,0x2d
c0015465:	75 0e                	jne    c0015475 <Reg::readInt(char*, char*, int*)+0x49>
c0015467:	ba 01 00 00 00       	mov    edx,0x1
c001546c:	eb 0b                	jmp    c0015479 <Reg::readInt(char*, char*, int*)+0x4d>
c001546e:	ba 01 00 00 00       	mov    edx,0x1
c0015473:	eb 02                	jmp    c0015477 <Reg::readInt(char*, char*, int*)+0x4b>
c0015475:	31 d2                	xor    edx,edx
c0015477:	31 c0                	xor    eax,eax
c0015479:	be 0a 00 00 00       	mov    esi,0xa
c001547e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015483:	75 20                	jne    c00154a5 <Reg::readInt(char*, char*, int*)+0x79>
c0015485:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015489:	80 f9 78             	cmp    cl,0x78
c001548c:	75 0a                	jne    c0015498 <Reg::readInt(char*, char*, int*)+0x6c>
c001548e:	83 c2 02             	add    edx,0x2
c0015491:	be 10 00 00 00       	mov    esi,0x10
c0015496:	eb 0d                	jmp    c00154a5 <Reg::readInt(char*, char*, int*)+0x79>
c0015498:	80 f9 62             	cmp    cl,0x62
c001549b:	75 08                	jne    c00154a5 <Reg::readInt(char*, char*, int*)+0x79>
c001549d:	83 c2 02             	add    edx,0x2
c00154a0:	be 02 00 00 00       	mov    esi,0x2
c00154a5:	01 d7                	add    edi,edx
c00154a7:	31 d2                	xor    edx,edx
c00154a9:	8a 1f                	mov    bl,BYTE PTR [edi]
c00154ab:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00154af:	80 fb 0d             	cmp    bl,0xd
c00154b2:	0f 94 c3             	sete   bl
c00154b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00154ba:	0f 94 c1             	sete   cl
c00154bd:	08 cb                	or     bl,cl
c00154bf:	75 3a                	jne    c00154fb <Reg::readInt(char*, char*, int*)+0xcf>
c00154c1:	0f af d6             	imul   edx,esi
c00154c4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00154c9:	83 fe 10             	cmp    esi,0x10
c00154cc:	75 26                	jne    c00154f4 <Reg::readInt(char*, char*, int*)+0xc8>
c00154ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00154d2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00154d5:	89 e9                	mov    ecx,ebp
c00154d7:	80 f9 05             	cmp    cl,0x5
c00154da:	77 06                	ja     c00154e2 <Reg::readInt(char*, char*, int*)+0xb6>
c00154dc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00154e0:	eb 16                	jmp    c00154f8 <Reg::readInt(char*, char*, int*)+0xcc>
c00154e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00154e6:	83 e9 61             	sub    ecx,0x61
c00154e9:	80 f9 05             	cmp    cl,0x5
c00154ec:	77 06                	ja     c00154f4 <Reg::readInt(char*, char*, int*)+0xc8>
c00154ee:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00154f2:	eb 04                	jmp    c00154f8 <Reg::readInt(char*, char*, int*)+0xcc>
c00154f4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00154f8:	47                   	inc    edi
c00154f9:	eb ae                	jmp    c00154a9 <Reg::readInt(char*, char*, int*)+0x7d>
c00154fb:	84 c0                	test   al,al
c00154fd:	74 02                	je     c0015501 <Reg::readInt(char*, char*, int*)+0xd5>
c00154ff:	f7 da                	neg    edx
c0015501:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015508:	89 10                	mov    DWORD PTR [eax],edx
c001550a:	88 d8                	mov    al,bl
c001550c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015512:	5b                   	pop    ebx
c0015513:	5e                   	pop    esi
c0015514:	5f                   	pop    edi
c0015515:	5d                   	pop    ebp
c0015516:	c3                   	ret    

c0015517 <Reg::readString(char*, char*, char*, int)>:
c0015517:	57                   	push   edi
c0015518:	56                   	push   esi
c0015519:	53                   	push   ebx
c001551a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015520:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015527:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001552b:	57                   	push   edi
c001552c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015533:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001553a:	e8 b6 fe ff ff       	call   c00153f5 <Reg::getLine(char*, char*, char*)>
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	89 c6                	mov    esi,eax
c0015544:	84 c0                	test   al,al
c0015546:	74 44                	je     c001558c <Reg::readString(char*, char*, char*, int)+0x75>
c0015548:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001554f:	31 c0                	xor    eax,eax
c0015551:	4a                   	dec    edx
c0015552:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015555:	84 c9                	test   cl,cl
c0015557:	74 0f                	je     c0015568 <Reg::readString(char*, char*, char*, int)+0x51>
c0015559:	39 c2                	cmp    edx,eax
c001555b:	7e 0b                	jle    c0015568 <Reg::readString(char*, char*, char*, int)+0x51>
c001555d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015560:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015565:	40                   	inc    eax
c0015566:	eb ea                	jmp    c0015552 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	53                   	push   ebx
c001556c:	e8 27 b1 fe ff       	call   c0000698 <strlen>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015579:	75 11                	jne    c001558c <Reg::readString(char*, char*, char*, int)+0x75>
c001557b:	83 ec 0c             	sub    esp,0xc
c001557e:	53                   	push   ebx
c001557f:	e8 14 b1 fe ff       	call   c0000698 <strlen>
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001558c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015592:	89 f0                	mov    eax,esi
c0015594:	5b                   	pop    ebx
c0015595:	5e                   	pop    esi
c0015596:	5f                   	pop    edi
c0015597:	c3                   	ret    

c0015598 <Reg::readBool(char*, char*, bool*)>:
c0015598:	83 ec 20             	sub    esp,0x20
c001559b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001559f:	50                   	push   eax
c00155a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155a8:	e8 7f fe ff ff       	call   c001542c <Reg::readInt(char*, char*, int*)>
c00155ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00155b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155b6:	0f 95 02             	setne  BYTE PTR [edx]
c00155b9:	83 c4 2c             	add    esp,0x2c
c00155bc:	c3                   	ret    

c00155bd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00155bd:	53                   	push   ebx
c00155be:	83 ec 1c             	sub    esp,0x1c
c00155c1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00155c5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00155c9:	50                   	push   eax
c00155ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155d2:	e8 c1 ff ff ff       	call   c0015598 <Reg::readBool(char*, char*, bool*)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	84 c0                	test   al,al
c00155dc:	74 04                	je     c00155e2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00155de:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00155e2:	88 d8                	mov    al,bl
c00155e4:	83 c4 18             	add    esp,0x18
c00155e7:	5b                   	pop    ebx
c00155e8:	c3                   	ret    

c00155e9 <Reg::readIntWithDefault(char*, char*, int)>:
c00155e9:	53                   	push   ebx
c00155ea:	83 ec 1c             	sub    esp,0x1c
c00155ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155f1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00155f5:	50                   	push   eax
c00155f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155fe:	e8 29 fe ff ff       	call   c001542c <Reg::readInt(char*, char*, int*)>
c0015603:	83 c4 10             	add    esp,0x10
c0015606:	84 c0                	test   al,al
c0015608:	74 04                	je     c001560e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001560a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001560e:	89 d8                	mov    eax,ebx
c0015610:	83 c4 18             	add    esp,0x18
c0015613:	5b                   	pop    ebx
c0015614:	c3                   	ret    

c0015615 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015615:	57                   	push   edi
c0015616:	56                   	push   esi
c0015617:	56                   	push   esi
c0015618:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001561c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015620:	56                   	push   esi
c0015621:	57                   	push   edi
c0015622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001562a:	e8 e8 fe ff ff       	call   c0015517 <Reg::readString(char*, char*, char*, int)>
c001562f:	83 c4 10             	add    esp,0x10
c0015632:	84 c0                	test   al,al
c0015634:	75 1a                	jne    c0015650 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015636:	51                   	push   ecx
c0015637:	56                   	push   esi
c0015638:	6a 00                	push   0x0
c001563a:	57                   	push   edi
c001563b:	e8 3c b0 fe ff       	call   c000067c <memset>
c0015640:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015647:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015650:	89 f8                	mov    eax,edi
c0015652:	5a                   	pop    edx
c0015653:	5e                   	pop    esi
c0015654:	5f                   	pop    edi
c0015655:	c3                   	ret    

c0015656 <Sys::eject(regs*)>:
c0015656:	83 ec 0c             	sub    esp,0xc
c0015659:	83 ca ff             	or     edx,0xffffffff
c001565c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015660:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015663:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015668:	83 e9 41             	sub    ecx,0x41
c001566b:	83 f9 19             	cmp    ecx,0x19
c001566e:	77 18                	ja     c0015688 <Sys::eject(regs*)+0x32>
c0015670:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c0015677:	85 c9                	test   ecx,ecx
c0015679:	74 0d                	je     c0015688 <Sys::eject(regs*)+0x32>
c001567b:	83 ec 0c             	sub    esp,0xc
c001567e:	51                   	push   ecx
c001567f:	e8 24 af ff ff       	call   c00105a8 <LogicalDisk::eject()>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	99                   	cdq    
c0015688:	83 c4 0c             	add    esp,0xc
c001568b:	c3                   	ret    

c001568c <Sys::exit(regs*)>:
c001568c:	83 ec 18             	sub    esp,0x18
c001568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015693:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015696:	e8 6d 36 00 00       	call   c0018d08 <terminateTask(int)>
c001569b:	83 c8 ff             	or     eax,0xffffffff
c001569e:	83 c4 1c             	add    esp,0x1c
c00156a1:	89 c2                	mov    edx,eax
c00156a3:	c3                   	ret    

c00156a4 <Sys::getCwd(regs*)>:
c00156a4:	83 ec 10             	sub    esp,0x10
c00156a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00156ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00156b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00156b9:	e8 c2 7c ff ff       	call   c000d380 <Fs::getcwd(Process*, char*, int)>
c00156be:	83 c4 1c             	add    esp,0x1c
c00156c1:	99                   	cdq    
c00156c2:	c3                   	ret    

c00156c3 <Sys::getPID(regs*)>:
c00156c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cd:	99                   	cdq    
c00156ce:	c3                   	ret    

c00156cf <Sys::getRAMData(regs*)>:
c00156cf:	8b 0d d8 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027cd8
c00156d5:	69 05 d4 7c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027cd4,0xc8
c00156df:	99                   	cdq    
c00156e0:	f7 f9                	idiv   ecx
c00156e2:	c1 e0 18             	shl    eax,0x18
c00156e5:	09 c8                	or     eax,ecx
c00156e7:	99                   	cdq    
c00156e8:	c3                   	ret    

c00156e9 <Sys::getVGAPtr(regs*)>:
c00156e9:	55                   	push   ebp
c00156ea:	57                   	push   edi
c00156eb:	56                   	push   esi
c00156ec:	53                   	push   ebx
c00156ed:	83 ec 18             	sub    esp,0x18
c00156f0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00156f4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00156f7:	e8 10 31 00 00       	call   c001880c <Thr::processFromPID(int)>
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	89 c1                	mov    ecx,eax
c0015701:	b8 01 00 00 00       	mov    eax,0x1
c0015706:	85 c9                	test   ecx,ecx
c0015708:	74 59                	je     c0015763 <Sys::getVGAPtr(regs*)+0x7a>
c001570a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015710:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015714:	74 0c                	je     c0015722 <Sys::getVGAPtr(regs*)+0x39>
c0015716:	83 ec 0c             	sub    esp,0xc
c0015719:	53                   	push   ebx
c001571a:	e8 d6 56 ff ff       	call   c000adf5 <setActiveTerminal(VgaText*)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015725:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015728:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001572d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001572f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015732:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015735:	81 c3 82 00 00 00    	add    ebx,0x82
c001573b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015741:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015744:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015747:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001574d:	50                   	push   eax
c001574e:	50                   	push   eax
c001574f:	53                   	push   ebx
c0015750:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015753:	05 a8 0f 00 00       	add    eax,0xfa8
c0015758:	50                   	push   eax
c0015759:	e8 da af fe ff       	call   c0000738 <strcpy>
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	31 c0                	xor    eax,eax
c0015763:	83 c4 0c             	add    esp,0xc
c0015766:	31 d2                	xor    edx,edx
c0015768:	5b                   	pop    ebx
c0015769:	5e                   	pop    esi
c001576a:	5f                   	pop    edi
c001576b:	5d                   	pop    ebp
c001576c:	c3                   	ret    

c001576d <Sys::loadDLL(regs*)>:
c001576d:	56                   	push   esi
c001576e:	53                   	push   ebx
c001576f:	31 d2                	xor    edx,edx
c0015771:	51                   	push   ecx
c0015772:	b8 01 00 00 00       	mov    eax,0x1
c0015777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001577b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001577f:	0f 84 8c 00 00 00    	je     c0015811 <Sys::loadDLL(regs*)+0xa4>
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	68 14 01 00 00       	push   0x114
c001578d:	e8 75 45 ff ff       	call   c0009d07 <malloc>
c0015792:	83 c4 0c             	add    esp,0xc
c0015795:	89 c3                	mov    ebx,eax
c0015797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001579c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001579f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00157a2:	53                   	push   ebx
c00157a3:	e8 d6 7d ff ff       	call   c000d57e <File::File(char const*, Process*)>
c00157a8:	83 c4 10             	add    esp,0x10
c00157ab:	31 d2                	xor    edx,edx
c00157ad:	b8 02 00 00 00       	mov    eax,0x2
c00157b2:	85 db                	test   ebx,ebx
c00157b4:	74 5b                	je     c0015811 <Sys::loadDLL(regs*)+0xa4>
c00157b6:	83 ec 0c             	sub    esp,0xc
c00157b9:	53                   	push   ebx
c00157ba:	e8 07 81 ff ff       	call   c000d8c6 <File::exists()>
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	84 c0                	test   al,al
c00157c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157c6:	75 11                	jne    c00157d9 <Sys::loadDLL(regs*)+0x6c>
c00157c8:	83 ec 0c             	sub    esp,0xc
c00157cb:	53                   	push   ebx
c00157cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	b8 03 00 00 00       	mov    eax,0x3
c00157d7:	eb 36                	jmp    c001580f <Sys::loadDLL(regs*)+0xa2>
c00157d9:	83 ec 0c             	sub    esp,0xc
c00157dc:	53                   	push   ebx
c00157dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157e0:	58                   	pop    eax
c00157e1:	5a                   	pop    edx
c00157e2:	6a 00                	push   0x0
c00157e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00157e7:	e8 0a 22 00 00       	call   c00179f6 <Thr::loadDLL(char const*, bool)>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	89 c1                	mov    ecx,eax
c00157f1:	31 d2                	xor    edx,edx
c00157f3:	b8 04 00 00 00       	mov    eax,0x4
c00157f8:	85 c9                	test   ecx,ecx
c00157fa:	74 15                	je     c0015811 <Sys::loadDLL(regs*)+0xa4>
c00157fc:	53                   	push   ebx
c00157fd:	53                   	push   ebx
c00157fe:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0015804:	51                   	push   ecx
c0015805:	e8 1d 24 00 00       	call   c0017c27 <Thr::executeDLL(unsigned long, void*)>
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	31 c0                	xor    eax,eax
c001580f:	31 d2                	xor    edx,edx
c0015811:	59                   	pop    ecx
c0015812:	5b                   	pop    ebx
c0015813:	5e                   	pop    esi
c0015814:	c3                   	ret    

c0015815 <Sys::read(regs*)>:
c0015815:	57                   	push   edi
c0015816:	56                   	push   esi
c0015817:	53                   	push   ebx
c0015818:	83 ec 10             	sub    esp,0x10
c001581b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001581f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015822:	83 f8 02             	cmp    eax,0x2
c0015825:	77 10                	ja     c0015837 <Sys::read(regs*)+0x22>
c0015827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015835:	eb 0e                	jmp    c0015845 <Sys::read(regs*)+0x30>
c0015837:	83 ec 0c             	sub    esp,0xc
c001583a:	50                   	push   eax
c001583b:	e8 23 63 ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	89 c1                	mov    ecx,eax
c0015845:	83 c8 ff             	or     eax,0xffffffff
c0015848:	85 c9                	test   ecx,ecx
c001584a:	89 c2                	mov    edx,eax
c001584c:	74 28                	je     c0015876 <Sys::read(regs*)+0x61>
c001584e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015856:	31 ff                	xor    edi,edi
c0015858:	83 ec 0c             	sub    esp,0xc
c001585b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001585d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015861:	52                   	push   edx
c0015862:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015865:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015868:	57                   	push   edi
c0015869:	56                   	push   esi
c001586a:	51                   	push   ecx
c001586b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001586e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015872:	83 c4 20             	add    esp,0x20
c0015875:	99                   	cdq    
c0015876:	83 c4 10             	add    esp,0x10
c0015879:	5b                   	pop    ebx
c001587a:	5e                   	pop    esi
c001587b:	5f                   	pop    edi
c001587c:	c3                   	ret    

c001587d <Sys::sbrk(regs*)>:
c001587d:	56                   	push   esi
c001587e:	53                   	push   ebx
c001587f:	50                   	push   eax
c0015880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015889:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001588f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015895:	85 db                	test   ebx,ebx
c0015897:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001589a:	74 02                	je     c001589e <Sys::sbrk(regs*)+0x21>
c001589c:	79 06                	jns    c00158a4 <Sys::sbrk(regs*)+0x27>
c001589e:	89 f0                	mov    eax,esi
c00158a0:	31 d2                	xor    edx,edx
c00158a2:	eb 2a                	jmp    c00158ce <Sys::sbrk(regs*)+0x51>
c00158a4:	83 c8 ff             	or     eax,0xffffffff
c00158a7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00158ad:	89 c2                	mov    edx,eax
c00158af:	77 1d                	ja     c00158ce <Sys::sbrk(regs*)+0x51>
c00158b1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00158b7:	50                   	push   eax
c00158b8:	c1 ea 0c             	shr    edx,0xc
c00158bb:	68 07 0c 00 00       	push   0xc07
c00158c0:	52                   	push   edx
c00158c1:	51                   	push   ecx
c00158c2:	e8 5f 6b ff ff       	call   c000c426 <VAS::allocatePages(int, int)>
c00158c7:	89 f0                	mov    eax,esi
c00158c9:	31 d2                	xor    edx,edx
c00158cb:	83 c4 10             	add    esp,0x10
c00158ce:	59                   	pop    ecx
c00158cf:	5b                   	pop    ebx
c00158d0:	5e                   	pop    esi
c00158d1:	c3                   	ret    

c00158d2 <Sys::setCwd(regs*)>:
c00158d2:	83 ec 14             	sub    esp,0x14
c00158d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158d9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00158e4:	e8 7c 80 ff ff       	call   c000d965 <Fs::setcwd(Process*, char*)>
c00158e9:	83 c4 1c             	add    esp,0x1c
c00158ec:	99                   	cdq    
c00158ed:	c3                   	ret    

c00158ee <Sys::setTime(regs*)>:
c00158ee:	55                   	push   ebp
c00158ef:	31 c9                	xor    ecx,ecx
c00158f1:	57                   	push   edi
c00158f2:	bd 0c 00 00 00       	mov    ebp,0xc
c00158f7:	56                   	push   esi
c00158f8:	53                   	push   ebx
c00158f9:	31 db                	xor    ebx,ebx
c00158fb:	83 ec 10             	sub    esp,0x10
c00158fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015902:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015905:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015908:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001590b:	89 c2                	mov    edx,eax
c001590d:	66 81 ef 6c 07       	sub    di,0x76c
c0015912:	83 e2 1f             	and    edx,0x1f
c0015915:	c1 e7 10             	shl    edi,0x10
c0015918:	42                   	inc    edx
c0015919:	c1 e8 05             	shr    eax,0x5
c001591c:	88 d1                	mov    cl,dl
c001591e:	31 d2                	xor    edx,edx
c0015920:	f7 f5                	div    ebp
c0015922:	89 dd                	mov    ebp,ebx
c0015924:	88 d5                	mov    ch,dl
c0015926:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001592c:	0f b7 c1             	movzx  eax,cx
c001592f:	31 d2                	xor    edx,edx
c0015931:	09 f8                	or     eax,edi
c0015933:	bf 3c 00 00 00       	mov    edi,0x3c
c0015938:	89 c1                	mov    ecx,eax
c001593a:	89 f0                	mov    eax,esi
c001593c:	f7 f7                	div    edi
c001593e:	c1 e2 10             	shl    edx,0x10
c0015941:	09 d5                	or     ebp,edx
c0015943:	31 d2                	xor    edx,edx
c0015945:	89 eb                	mov    ebx,ebp
c0015947:	f7 f7                	div    edi
c0015949:	bf 10 0e 00 00       	mov    edi,0xe10
c001594e:	88 d7                	mov    bh,dl
c0015950:	89 f0                	mov    eax,esi
c0015952:	31 d2                	xor    edx,edx
c0015954:	f7 f7                	div    edi
c0015956:	bf 18 00 00 00       	mov    edi,0x18
c001595b:	31 d2                	xor    edx,edx
c001595d:	f7 f7                	div    edi
c001595f:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015964:	88 d3                	mov    bl,dl
c0015966:	53                   	push   ebx
c0015967:	51                   	push   ecx
c0015968:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001596e:	e8 33 88 ff ff       	call   c000e1a6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015973:	83 c4 1c             	add    esp,0x1c
c0015976:	83 f0 01             	xor    eax,0x1
c0015979:	5b                   	pop    ebx
c001597a:	0f b6 c0             	movzx  eax,al
c001597d:	5e                   	pop    esi
c001597e:	31 d2                	xor    edx,edx
c0015980:	5f                   	pop    edi
c0015981:	5d                   	pop    ebp
c0015982:	c3                   	ret    

c0015983 <Sys::timezone(regs*)>:
c0015983:	53                   	push   ebx
c0015984:	83 ec 08             	sub    esp,0x8
c0015987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001598b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001598f:	75 17                	jne    c00159a8 <Sys::timezone(regs*)+0x25>
c0015991:	83 ec 0c             	sub    esp,0xc
c0015994:	68 06 5b 02 c0       	push   0xc0025b06
c0015999:	e8 75 76 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001599e:	83 c8 ff             	or     eax,0xffffffff
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	89 c2                	mov    edx,eax
c00159a6:	eb 20                	jmp    c00159c8 <Sys::timezone(regs*)+0x45>
c00159a8:	83 ec 0c             	sub    esp,0xc
c00159ab:	68 1b 5b 02 c0       	push   0xc0025b1b
c00159b0:	e8 5e 76 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00159b5:	58                   	pop    eax
c00159b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00159b9:	e8 4a 85 ff ff       	call   c000df08 <User::loadClockSettings(int)>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	b8 01 00 00 00       	mov    eax,0x1
c00159c6:	31 d2                	xor    edx,edx
c00159c8:	83 c4 08             	add    esp,0x8
c00159cb:	5b                   	pop    ebx
c00159cc:	c3                   	ret    

c00159cd <Sys::write(regs*)>:
c00159cd:	57                   	push   edi
c00159ce:	56                   	push   esi
c00159cf:	53                   	push   ebx
c00159d0:	83 ec 10             	sub    esp,0x10
c00159d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159da:	83 f8 02             	cmp    eax,0x2
c00159dd:	77 10                	ja     c00159ef <Sys::write(regs*)+0x22>
c00159df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159e7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00159ed:	eb 0e                	jmp    c00159fd <Sys::write(regs*)+0x30>
c00159ef:	83 ec 0c             	sub    esp,0xc
c00159f2:	50                   	push   eax
c00159f3:	e8 6b 61 ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	89 c1                	mov    ecx,eax
c00159fd:	83 c8 ff             	or     eax,0xffffffff
c0015a00:	85 c9                	test   ecx,ecx
c0015a02:	89 c2                	mov    edx,eax
c0015a04:	74 28                	je     c0015a2e <Sys::write(regs*)+0x61>
c0015a06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a0e:	31 ff                	xor    edi,edi
c0015a10:	83 ec 0c             	sub    esp,0xc
c0015a13:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015a15:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015a19:	52                   	push   edx
c0015a1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a1d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015a20:	57                   	push   edi
c0015a21:	56                   	push   esi
c0015a22:	51                   	push   ecx
c0015a23:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015a26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a2a:	83 c4 20             	add    esp,0x20
c0015a2d:	99                   	cdq    
c0015a2e:	83 c4 10             	add    esp,0x10
c0015a31:	5b                   	pop    ebx
c0015a32:	5e                   	pop    esi
c0015a33:	5f                   	pop    edi
c0015a34:	c3                   	ret    

c0015a35 <Sys::wsbe(regs*)>:
c0015a35:	57                   	push   edi
c0015a36:	b9 0b 00 00 00       	mov    ecx,0xb
c0015a3b:	56                   	push   esi
c0015a3c:	be 5a 5b 02 c0       	mov    esi,0xc0025b5a
c0015a41:	53                   	push   ebx
c0015a42:	83 ec 30             	sub    esp,0x30
c0015a45:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015a49:	fc                   	cld    
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015a4f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015a53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a5b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015a61:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a63:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015a66:	57                   	push   edi
c0015a67:	e8 2c ac fe ff       	call   c0000698 <strlen>
c0015a6c:	5a                   	pop    edx
c0015a6d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015a71:	52                   	push   edx
c0015a72:	31 d2                	xor    edx,edx
c0015a74:	57                   	push   edi
c0015a75:	52                   	push   edx
c0015a76:	50                   	push   eax
c0015a77:	56                   	push   esi
c0015a78:	ff d3                	call   ebx
c0015a7a:	83 c4 14             	add    esp,0x14
c0015a7d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a81:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a84:	e8 7f 32 00 00       	call   c0018d08 <terminateTask(int)>
c0015a89:	83 c4 40             	add    esp,0x40
c0015a8c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015a91:	5b                   	pop    ebx
c0015a92:	31 d2                	xor    edx,edx
c0015a94:	5e                   	pop    esi
c0015a95:	5f                   	pop    edi
c0015a96:	c3                   	ret    

c0015a97 <Sys::yield(regs*)>:
c0015a97:	83 ec 0c             	sub    esp,0xc
c0015a9a:	fa                   	cli    
c0015a9b:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0015aa1:	e8 4a 29 00 00       	call   c00183f0 <schedule()>
c0015aa6:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0015aab:	48                   	dec    eax
c0015aac:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0015ab1:	75 01                	jne    c0015ab4 <Sys::yield(regs*)+0x1d>
c0015ab3:	fb                   	sti    
c0015ab4:	8b 15 cc 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282cc
c0015aba:	83 c4 0c             	add    esp,0xc
c0015abd:	89 d0                	mov    eax,edx
c0015abf:	c1 ea 11             	shr    edx,0x11
c0015ac2:	c1 e0 07             	shl    eax,0x7
c0015ac5:	25 80 30 0f 00       	and    eax,0xf3080
c0015aca:	31 d0                	xor    eax,edx
c0015acc:	31 d2                	xor    edx,edx
c0015ace:	c3                   	ret    

c0015acf <sysCallSeekDir(regs*)>:
c0015acf:	31 c0                	xor    eax,eax
c0015ad1:	31 d2                	xor    edx,edx
c0015ad3:	c3                   	ret    

c0015ad4 <sysCallTellDir(regs*)>:
c0015ad4:	31 c0                	xor    eax,eax
c0015ad6:	31 d2                	xor    edx,edx
c0015ad8:	c3                   	ret    

c0015ad9 <sysCallVerify(regs*)>:
c0015ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015add:	31 d2                	xor    edx,edx
c0015adf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ae2:	c3                   	ret    

c0015ae3 <sysCallGetArgc(regs*)>:
c0015ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015aeb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015af1:	99                   	cdq    
c0015af2:	c3                   	ret    

c0015af3 <sysFormatDisk(regs*)>:
c0015af3:	56                   	push   esi
c0015af4:	53                   	push   ebx
c0015af5:	53                   	push   ebx
c0015af6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015afa:	8b 1d d8 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd8
c0015b00:	eb 25                	jmp    c0015b27 <sysFormatDisk(regs*)+0x34>
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b08:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015b0a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b0d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015b10:	50                   	push   eax
c0015b11:	ff 34 85 60 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7da0]
c0015b18:	53                   	push   ebx
c0015b19:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015b1c:	83 c4 20             	add    esp,0x20
c0015b1f:	83 f8 08             	cmp    eax,0x8
c0015b22:	75 12                	jne    c0015b36 <sysFormatDisk(regs*)+0x43>
c0015b24:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015b27:	85 db                	test   ebx,ebx
c0015b29:	75 d7                	jne    c0015b02 <sysFormatDisk(regs*)+0xf>
c0015b2b:	59                   	pop    ecx
c0015b2c:	b8 03 00 00 00       	mov    eax,0x3
c0015b31:	31 d2                	xor    edx,edx
c0015b33:	5b                   	pop    ebx
c0015b34:	5e                   	pop    esi
c0015b35:	c3                   	ret    
c0015b36:	85 c0                	test   eax,eax
c0015b38:	74 1b                	je     c0015b55 <sysFormatDisk(regs*)+0x62>
c0015b3a:	83 f8 09             	cmp    eax,0x9
c0015b3d:	74 0b                	je     c0015b4a <sysFormatDisk(regs*)+0x57>
c0015b3f:	59                   	pop    ecx
c0015b40:	b8 02 00 00 00       	mov    eax,0x2
c0015b45:	31 d2                	xor    edx,edx
c0015b47:	5b                   	pop    ebx
c0015b48:	5e                   	pop    esi
c0015b49:	c3                   	ret    
c0015b4a:	59                   	pop    ecx
c0015b4b:	b8 01 00 00 00       	mov    eax,0x1
c0015b50:	31 d2                	xor    edx,edx
c0015b52:	5b                   	pop    ebx
c0015b53:	5e                   	pop    esi
c0015b54:	c3                   	ret    
c0015b55:	59                   	pop    ecx
c0015b56:	31 c0                	xor    eax,eax
c0015b58:	31 d2                	xor    edx,edx
c0015b5a:	5b                   	pop    ebx
c0015b5b:	5e                   	pop    esi
c0015b5c:	c3                   	ret    

c0015b5d <sysSetDiskVolumeLabel(regs*)>:
c0015b5d:	56                   	push   esi
c0015b5e:	53                   	push   ebx
c0015b5f:	53                   	push   ebx
c0015b60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b64:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b67:	83 f8 19             	cmp    eax,0x19
c0015b6a:	77 2d                	ja     c0015b99 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b6c:	8b 0c 85 60 82 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7da0]
c0015b73:	85 c9                	test   ecx,ecx
c0015b75:	74 22                	je     c0015b99 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b77:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015b7a:	85 db                	test   ebx,ebx
c0015b7c:	74 1b                	je     c0015b99 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b7e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015b84:	85 d2                	test   edx,edx
c0015b86:	74 11                	je     c0015b99 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b88:	8b 32                	mov    esi,DWORD PTR [edx]
c0015b8a:	53                   	push   ebx
c0015b8b:	50                   	push   eax
c0015b8c:	51                   	push   ecx
c0015b8d:	52                   	push   edx
c0015b8e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015b91:	83 c4 10             	add    esp,0x10
c0015b94:	99                   	cdq    
c0015b95:	59                   	pop    ecx
c0015b96:	5b                   	pop    ebx
c0015b97:	5e                   	pop    esi
c0015b98:	c3                   	ret    
c0015b99:	59                   	pop    ecx
c0015b9a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba4:	5b                   	pop    ebx
c0015ba5:	5e                   	pop    esi
c0015ba6:	c3                   	ret    

c0015ba7 <sysGetDiskVolumeLabel(regs*)>:
c0015ba7:	57                   	push   edi
c0015ba8:	56                   	push   esi
c0015ba9:	53                   	push   ebx
c0015baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bb1:	83 fa 19             	cmp    edx,0x19
c0015bb4:	77 38                	ja     c0015bee <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bb6:	8b 0c 95 60 82 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7da0]
c0015bbd:	85 c9                	test   ecx,ecx
c0015bbf:	74 2d                	je     c0015bee <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bc1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015bc4:	85 db                	test   ebx,ebx
c0015bc6:	74 26                	je     c0015bee <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bc8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015bcb:	85 f6                	test   esi,esi
c0015bcd:	74 1f                	je     c0015bee <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bcf:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015bd5:	85 c0                	test   eax,eax
c0015bd7:	74 15                	je     c0015bee <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bd9:	83 ec 0c             	sub    esp,0xc
c0015bdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0015bde:	56                   	push   esi
c0015bdf:	53                   	push   ebx
c0015be0:	52                   	push   edx
c0015be1:	51                   	push   ecx
c0015be2:	50                   	push   eax
c0015be3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015be6:	83 c4 20             	add    esp,0x20
c0015be9:	99                   	cdq    
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	5f                   	pop    edi
c0015bed:	c3                   	ret    
c0015bee:	5b                   	pop    ebx
c0015bef:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015bf4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bf9:	5e                   	pop    esi
c0015bfa:	5f                   	pop    edi
c0015bfb:	c3                   	ret    

c0015bfc <sysShutdown(regs*)>:
c0015bfc:	83 ec 0c             	sub    esp,0xc
c0015bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c06:	85 c0                	test   eax,eax
c0015c08:	74 18                	je     c0015c22 <sysShutdown(regs*)+0x26>
c0015c0a:	83 f8 01             	cmp    eax,0x1
c0015c0d:	74 38                	je     c0015c47 <sysShutdown(regs*)+0x4b>
c0015c0f:	83 f8 02             	cmp    eax,0x2
c0015c12:	74 24                	je     c0015c38 <sysShutdown(regs*)+0x3c>
c0015c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c1e:	83 c4 0c             	add    esp,0xc
c0015c21:	c3                   	ret    
c0015c22:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015c27:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c29:	6a 00                	push   0x0
c0015c2b:	6a 00                	push   0x0
c0015c2d:	6a 00                	push   0x0
c0015c2f:	50                   	push   eax
c0015c30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	eb dc                	jmp    c0015c14 <sysShutdown(regs*)+0x18>
c0015c38:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015c3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c3f:	6a 00                	push   0x0
c0015c41:	6a 00                	push   0x0
c0015c43:	6a 01                	push   0x1
c0015c45:	eb e8                	jmp    c0015c2f <sysShutdown(regs*)+0x33>
c0015c47:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c0015c4c:	85 c0                	test   eax,eax
c0015c4e:	74 02                	je     c0015c52 <sysShutdown(regs*)+0x56>
c0015c50:	ff d0                	call   eax
c0015c52:	31 c0                	xor    eax,eax
c0015c54:	31 d2                	xor    edx,edx
c0015c56:	83 c4 0c             	add    esp,0xc
c0015c59:	c3                   	ret    

c0015c5a <sysCallRealpath(regs*)>:
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c61:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015c64:	85 d2                	test   edx,edx
c0015c66:	74 07                	je     c0015c6f <sysCallRealpath(regs*)+0x15>
c0015c68:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015c6b:	85 c0                	test   eax,eax
c0015c6d:	75 0b                	jne    c0015c7a <sysCallRealpath(regs*)+0x20>
c0015c6f:	b8 01 00 00 00       	mov    eax,0x1
c0015c74:	31 d2                	xor    edx,edx
c0015c76:	83 c4 0c             	add    esp,0xc
c0015c79:	c3                   	ret    
c0015c7a:	51                   	push   ecx
c0015c7b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c81:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015c84:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015c8a:	51                   	push   ecx
c0015c8b:	52                   	push   edx
c0015c8c:	50                   	push   eax
c0015c8d:	e8 42 77 ff ff       	call   c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	31 c0                	xor    eax,eax
c0015c97:	31 d2                	xor    edx,edx
c0015c99:	83 c4 0c             	add    esp,0xc
c0015c9c:	c3                   	ret    

c0015c9d <sysCallReadDir(regs*)>:
c0015c9d:	53                   	push   ebx
c0015c9e:	83 ec 18             	sub    esp,0x18
c0015ca1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ca5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ca8:	83 f8 02             	cmp    eax,0x2
c0015cab:	76 60                	jbe    c0015d0d <sysCallReadDir(regs*)+0x70>
c0015cad:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015cb4:	77 48                	ja     c0015cfe <sysCallReadDir(regs*)+0x61>
c0015cb6:	83 ec 0c             	sub    esp,0xc
c0015cb9:	50                   	push   eax
c0015cba:	e8 a4 5e ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	85 c0                	test   eax,eax
c0015cc4:	74 38                	je     c0015cfe <sysCallReadDir(regs*)+0x61>
c0015cc6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cd3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015cd7:	51                   	push   ecx
c0015cd8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cdb:	6a 00                	push   0x0
c0015cdd:	68 10 01 00 00       	push   0x110
c0015ce2:	50                   	push   eax
c0015ce3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ce6:	83 c4 20             	add    esp,0x20
c0015ce9:	85 c0                	test   eax,eax
c0015ceb:	74 29                	je     c0015d16 <sysCallReadDir(regs*)+0x79>
c0015ced:	83 f8 07             	cmp    eax,0x7
c0015cf0:	74 1b                	je     c0015d0d <sysCallReadDir(regs*)+0x70>
c0015cf2:	b8 02 00 00 00       	mov    eax,0x2
c0015cf7:	31 d2                	xor    edx,edx
c0015cf9:	83 c4 18             	add    esp,0x18
c0015cfc:	5b                   	pop    ebx
c0015cfd:	c3                   	ret    
c0015cfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d08:	83 c4 18             	add    esp,0x18
c0015d0b:	5b                   	pop    ebx
c0015d0c:	c3                   	ret    
c0015d0d:	b8 01 00 00 00       	mov    eax,0x1
c0015d12:	31 d2                	xor    edx,edx
c0015d14:	eb e3                	jmp    c0015cf9 <sysCallReadDir(regs*)+0x5c>
c0015d16:	31 c0                	xor    eax,eax
c0015d18:	31 d2                	xor    edx,edx
c0015d1a:	eb dd                	jmp    c0015cf9 <sysCallReadDir(regs*)+0x5c>

c0015d1c <sysCallIsATTY(regs*)>:
c0015d1c:	83 ec 0c             	sub    esp,0xc
c0015d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d26:	83 f8 02             	cmp    eax,0x2
c0015d29:	76 07                	jbe    c0015d32 <sysCallIsATTY(regs*)+0x16>
c0015d2b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015d30:	75 26                	jne    c0015d58 <sysCallIsATTY(regs*)+0x3c>
c0015d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d40:	85 c0                	test   eax,eax
c0015d42:	74 24                	je     c0015d68 <sysCallIsATTY(regs*)+0x4c>
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d49:	50                   	push   eax
c0015d4a:	ff 12                	call   DWORD PTR [edx]
c0015d4c:	31 d2                	xor    edx,edx
c0015d4e:	0f b6 c0             	movzx  eax,al
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	83 c4 0c             	add    esp,0xc
c0015d57:	c3                   	ret    
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	50                   	push   eax
c0015d5c:	e8 02 5e ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	85 c0                	test   eax,eax
c0015d66:	75 dc                	jne    c0015d44 <sysCallIsATTY(regs*)+0x28>
c0015d68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d72:	83 c4 0c             	add    esp,0xc
c0015d75:	c3                   	ret    

c0015d76 <sysCallSeek(regs*)>:
c0015d76:	53                   	push   ebx
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d81:	8d 50 fd             	lea    edx,[eax-0x3]
c0015d84:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015d8a:	77 32                	ja     c0015dbe <sysCallSeek(regs*)+0x48>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	50                   	push   eax
c0015d90:	e8 ce 5d ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015d95:	83 c4 0c             	add    esp,0xc
c0015d98:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015d9b:	31 db                	xor    ebx,ebx
c0015d9d:	53                   	push   ebx
c0015d9e:	51                   	push   ecx
c0015d9f:	50                   	push   eax
c0015da0:	e8 71 79 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	85 c0                	test   eax,eax
c0015daa:	0f 95 c0             	setne  al
c0015dad:	31 d2                	xor    edx,edx
c0015daf:	0f b6 c0             	movzx  eax,al
c0015db2:	f7 d8                	neg    eax
c0015db4:	83 d2 00             	adc    edx,0x0
c0015db7:	83 c4 08             	add    esp,0x8
c0015dba:	f7 da                	neg    edx
c0015dbc:	5b                   	pop    ebx
c0015dbd:	c3                   	ret    
c0015dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dc8:	83 c4 08             	add    esp,0x8
c0015dcb:	5b                   	pop    ebx
c0015dcc:	c3                   	ret    

c0015dcd <sysCallTell(regs*)>:
c0015dcd:	53                   	push   ebx
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015dd8:	83 f8 02             	cmp    eax,0x2
c0015ddb:	76 4d                	jbe    c0015e2a <sysCallTell(regs*)+0x5d>
c0015ddd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015de2:	76 19                	jbe    c0015dfd <sysCallTell(regs*)+0x30>
c0015de4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015de7:	31 d2                	xor    edx,edx
c0015de9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015def:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015df6:	31 c0                	xor    eax,eax
c0015df8:	83 c4 08             	add    esp,0x8
c0015dfb:	5b                   	pop    ebx
c0015dfc:	c3                   	ret    
c0015dfd:	83 ec 0c             	sub    esp,0xc
c0015e00:	50                   	push   eax
c0015e01:	e8 5d 5d ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015e06:	5a                   	pop    edx
c0015e07:	59                   	pop    ecx
c0015e08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e0b:	50                   	push   eax
c0015e0c:	e8 5b 79 ff ff       	call   c000d76c <File::tell(unsigned long long*)>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	85 c0                	test   eax,eax
c0015e16:	0f 95 c0             	setne  al
c0015e19:	31 d2                	xor    edx,edx
c0015e1b:	0f b6 c0             	movzx  eax,al
c0015e1e:	f7 d8                	neg    eax
c0015e20:	83 d2 00             	adc    edx,0x0
c0015e23:	83 c4 08             	add    esp,0x8
c0015e26:	f7 da                	neg    edx
c0015e28:	5b                   	pop    ebx
c0015e29:	c3                   	ret    
c0015e2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e34:	83 c4 08             	add    esp,0x8
c0015e37:	5b                   	pop    ebx
c0015e38:	c3                   	ret    

c0015e39 <sysCallSize(regs*)>:
c0015e39:	53                   	push   ebx
c0015e3a:	83 ec 18             	sub    esp,0x18
c0015e3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e41:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e44:	83 f8 02             	cmp    eax,0x2
c0015e47:	76 53                	jbe    c0015e9c <sysCallSize(regs*)+0x63>
c0015e49:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015e4e:	76 19                	jbe    c0015e69 <sysCallSize(regs*)+0x30>
c0015e50:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e53:	31 d2                	xor    edx,edx
c0015e55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e62:	31 c0                	xor    eax,eax
c0015e64:	83 c4 18             	add    esp,0x18
c0015e67:	5b                   	pop    ebx
c0015e68:	c3                   	ret    
c0015e69:	83 ec 0c             	sub    esp,0xc
c0015e6c:	50                   	push   eax
c0015e6d:	e8 f1 5c ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015e72:	83 c4 0c             	add    esp,0xc
c0015e75:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015e79:	52                   	push   edx
c0015e7a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e7d:	50                   	push   eax
c0015e7e:	e8 81 7a ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c0015e83:	83 c4 10             	add    esp,0x10
c0015e86:	85 c0                	test   eax,eax
c0015e88:	0f 95 c0             	setne  al
c0015e8b:	31 d2                	xor    edx,edx
c0015e8d:	0f b6 c0             	movzx  eax,al
c0015e90:	f7 d8                	neg    eax
c0015e92:	83 d2 00             	adc    edx,0x0
c0015e95:	83 c4 18             	add    esp,0x18
c0015e98:	f7 da                	neg    edx
c0015e9a:	5b                   	pop    ebx
c0015e9b:	c3                   	ret    
c0015e9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ea1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ea6:	83 c4 18             	add    esp,0x18
c0015ea9:	5b                   	pop    ebx
c0015eaa:	c3                   	ret    

c0015eab <sysCallSizeFromFilename(regs*)>:
c0015eab:	57                   	push   edi
c0015eac:	56                   	push   esi
c0015ead:	53                   	push   ebx
c0015eae:	83 ec 20             	sub    esp,0x20
c0015eb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015eb5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015eb8:	83 fb 02             	cmp    ebx,0x2
c0015ebb:	0f 86 88 00 00 00    	jbe    c0015f49 <sysCallSizeFromFilename(regs*)+0x9e>
c0015ec1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015ec7:	76 1b                	jbe    c0015ee4 <sysCallSizeFromFilename(regs*)+0x39>
c0015ec9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015ecc:	31 d2                	xor    edx,edx
c0015ece:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ed4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015edb:	83 c4 20             	add    esp,0x20
c0015ede:	31 c0                	xor    eax,eax
c0015ee0:	5b                   	pop    ebx
c0015ee1:	5e                   	pop    esi
c0015ee2:	5f                   	pop    edi
c0015ee3:	c3                   	ret    
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	68 14 01 00 00       	push   0x114
c0015eec:	e8 16 3e ff ff       	call   c0009d07 <malloc>
c0015ef1:	83 c4 0c             	add    esp,0xc
c0015ef4:	89 c7                	mov    edi,eax
c0015ef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015efb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015efe:	53                   	push   ebx
c0015eff:	57                   	push   edi
c0015f00:	e8 79 76 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0015f05:	83 c4 0c             	add    esp,0xc
c0015f08:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015f0c:	50                   	push   eax
c0015f0d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015f10:	57                   	push   edi
c0015f11:	e8 ee 79 ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	85 ff                	test   edi,edi
c0015f1b:	74 14                	je     c0015f31 <sysCallSizeFromFilename(regs*)+0x86>
c0015f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f21:	8b 17                	mov    edx,DWORD PTR [edi]
c0015f23:	83 ec 0c             	sub    esp,0xc
c0015f26:	57                   	push   edi
c0015f27:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f31:	85 c0                	test   eax,eax
c0015f33:	0f 95 c0             	setne  al
c0015f36:	31 d2                	xor    edx,edx
c0015f38:	0f b6 c0             	movzx  eax,al
c0015f3b:	f7 d8                	neg    eax
c0015f3d:	83 d2 00             	adc    edx,0x0
c0015f40:	83 c4 20             	add    esp,0x20
c0015f43:	f7 da                	neg    edx
c0015f45:	5b                   	pop    ebx
c0015f46:	5e                   	pop    esi
c0015f47:	5f                   	pop    edi
c0015f48:	c3                   	ret    
c0015f49:	83 c4 20             	add    esp,0x20
c0015f4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f51:	5b                   	pop    ebx
c0015f52:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f57:	5e                   	pop    esi
c0015f58:	5f                   	pop    edi
c0015f59:	c3                   	ret    

c0015f5a <sysCallClose(regs*)>:
c0015f5a:	53                   	push   ebx
c0015f5b:	83 ec 08             	sub    esp,0x8
c0015f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f62:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f65:	83 f8 02             	cmp    eax,0x2
c0015f68:	76 41                	jbe    c0015fab <sysCallClose(regs*)+0x51>
c0015f6a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015f70:	83 fa 01             	cmp    edx,0x1
c0015f73:	76 2d                	jbe    c0015fa2 <sysCallClose(regs*)+0x48>
c0015f75:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015f7a:	77 2f                	ja     c0015fab <sysCallClose(regs*)+0x51>
c0015f7c:	83 ec 0c             	sub    esp,0xc
c0015f7f:	50                   	push   eax
c0015f80:	e8 de 5b ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c0015f85:	89 c3                	mov    ebx,eax
c0015f87:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f8a:	e8 27 77 ff ff       	call   c000d6b6 <File::close()>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	85 db                	test   ebx,ebx
c0015f94:	74 0c                	je     c0015fa2 <sysCallClose(regs*)+0x48>
c0015f96:	83 ec 0c             	sub    esp,0xc
c0015f99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f9b:	53                   	push   ebx
c0015f9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	31 c0                	xor    eax,eax
c0015fa4:	31 d2                	xor    edx,edx
c0015fa6:	83 c4 08             	add    esp,0x8
c0015fa9:	5b                   	pop    ebx
c0015faa:	c3                   	ret    
c0015fab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fb0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fb5:	83 c4 08             	add    esp,0x8
c0015fb8:	5b                   	pop    ebx
c0015fb9:	c3                   	ret    

c0015fba <sysCallOpenDir(regs*)>:
c0015fba:	56                   	push   esi
c0015fbb:	53                   	push   ebx
c0015fbc:	53                   	push   ebx
c0015fbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fc1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015fc4:	85 f6                	test   esi,esi
c0015fc6:	74 59                	je     c0016021 <sysCallOpenDir(regs*)+0x67>
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 14 01 00 00       	push   0x114
c0015fd0:	e8 32 3d ff ff       	call   c0009d07 <malloc>
c0015fd5:	83 c4 0c             	add    esp,0xc
c0015fd8:	89 c6                	mov    esi,eax
c0015fda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fdf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015fe2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fe5:	56                   	push   esi
c0015fe6:	e8 f3 7a ff ff       	call   c000dade <Directory::Directory(char const*, Process*)>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	85 f6                	test   esi,esi
c0015ff0:	74 2f                	je     c0016021 <sysCallOpenDir(regs*)+0x67>
c0015ff2:	83 ec 0c             	sub    esp,0xc
c0015ff5:	56                   	push   esi
c0015ff6:	e8 bd 7b ff ff       	call   c000dbb8 <Directory::open()>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	85 c0                	test   eax,eax
c0016000:	75 1f                	jne    c0016021 <sysCallOpenDir(regs*)+0x67>
c0016002:	83 ec 0c             	sub    esp,0xc
c0016005:	56                   	push   esi
c0016006:	e8 63 58 ff ff       	call   c000b86e <UnixFile::getFileDescriptor()>
c001600b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001600e:	83 c4 10             	add    esp,0x10
c0016011:	89 02                	mov    DWORD PTR [edx],eax
c0016013:	c1 f8 1f             	sar    eax,0x1f
c0016016:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016019:	31 c0                	xor    eax,eax
c001601b:	59                   	pop    ecx
c001601c:	31 d2                	xor    edx,edx
c001601e:	5b                   	pop    ebx
c001601f:	5e                   	pop    esi
c0016020:	c3                   	ret    
c0016021:	59                   	pop    ecx
c0016022:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016027:	ba ff ff ff ff       	mov    edx,0xffffffff
c001602c:	5b                   	pop    ebx
c001602d:	5e                   	pop    esi
c001602e:	c3                   	ret    

c001602f <sysCallCloseDir(regs*)>:
c001602f:	53                   	push   ebx
c0016030:	83 ec 08             	sub    esp,0x8
c0016033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016037:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001603a:	8d 50 fd             	lea    edx,[eax-0x3]
c001603d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016043:	77 2f                	ja     c0016074 <sysCallCloseDir(regs*)+0x45>
c0016045:	83 ec 0c             	sub    esp,0xc
c0016048:	50                   	push   eax
c0016049:	e8 15 5b ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c001604e:	89 c3                	mov    ebx,eax
c0016050:	89 04 24             	mov    DWORD PTR [esp],eax
c0016053:	e8 bc 7b ff ff       	call   c000dc14 <Directory::close()>
c0016058:	83 c4 10             	add    esp,0x10
c001605b:	85 db                	test   ebx,ebx
c001605d:	74 0c                	je     c001606b <sysCallCloseDir(regs*)+0x3c>
c001605f:	83 ec 0c             	sub    esp,0xc
c0016062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016064:	53                   	push   ebx
c0016065:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016068:	83 c4 10             	add    esp,0x10
c001606b:	31 c0                	xor    eax,eax
c001606d:	31 d2                	xor    edx,edx
c001606f:	83 c4 08             	add    esp,0x8
c0016072:	5b                   	pop    ebx
c0016073:	c3                   	ret    
c0016074:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016079:	ba ff ff ff ff       	mov    edx,0xffffffff
c001607e:	83 c4 08             	add    esp,0x8
c0016081:	5b                   	pop    ebx
c0016082:	c3                   	ret    

c0016083 <sysCallMakeDir(regs*)>:
c0016083:	56                   	push   esi
c0016084:	53                   	push   ebx
c0016085:	83 ec 10             	sub    esp,0x10
c0016088:	68 14 01 00 00       	push   0x114
c001608d:	e8 75 3c ff ff       	call   c0009d07 <malloc>
c0016092:	83 c4 0c             	add    esp,0xc
c0016095:	89 c3                	mov    ebx,eax
c0016097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001609c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001609f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160a3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160a6:	53                   	push   ebx
c00160a7:	e8 32 7a ff ff       	call   c000dade <Directory::Directory(char const*, Process*)>
c00160ac:	83 c4 10             	add    esp,0x10
c00160af:	85 db                	test   ebx,ebx
c00160b1:	74 32                	je     c00160e5 <sysCallMakeDir(regs*)+0x62>
c00160b3:	83 ec 0c             	sub    esp,0xc
c00160b6:	53                   	push   ebx
c00160b7:	e8 dc 7c ff ff       	call   c000dd98 <Directory::create()>
c00160bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160bf:	89 c6                	mov    esi,eax
c00160c1:	e8 4e 7b ff ff       	call   c000dc14 <Directory::close()>
c00160c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160ce:	83 c4 10             	add    esp,0x10
c00160d1:	31 c0                	xor    eax,eax
c00160d3:	59                   	pop    ecx
c00160d4:	85 f6                	test   esi,esi
c00160d6:	5b                   	pop    ebx
c00160d7:	0f 95 c0             	setne  al
c00160da:	5e                   	pop    esi
c00160db:	31 d2                	xor    edx,edx
c00160dd:	f7 d8                	neg    eax
c00160df:	83 d2 00             	adc    edx,0x0
c00160e2:	f7 da                	neg    edx
c00160e4:	c3                   	ret    
c00160e5:	59                   	pop    ecx
c00160e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160f0:	5b                   	pop    ebx
c00160f1:	5e                   	pop    esi
c00160f2:	c3                   	ret    

c00160f3 <sysCallWait(regs*)>:
c00160f3:	83 ec 10             	sub    esp,0x10
c00160f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160fa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00160fd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016100:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016103:	e8 10 25 00 00       	call   c0018618 <waitTask(int, int*, int)>
c0016108:	83 c4 1c             	add    esp,0x1c
c001610b:	99                   	cdq    
c001610c:	c3                   	ret    

c001610d <sysCallNotImpl(regs*)>:
c001610d:	83 ec 18             	sub    esp,0x18
c0016110:	68 86 5b 02 c0       	push   0xc0025b86
c0016115:	e8 57 ec ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001611a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001611f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016124:	83 c4 1c             	add    esp,0x1c
c0016127:	c3                   	ret    

c0016128 <sysPanic(regs*)>:
c0016128:	83 ec 18             	sub    esp,0x18
c001612b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001612f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016132:	e8 3a ec ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0016137:	b8 01 00 00 00       	mov    eax,0x1
c001613c:	31 d2                	xor    edx,edx
c001613e:	83 c4 1c             	add    esp,0x1c
c0016141:	c3                   	ret    

c0016142 <sysCallRmdir(regs*)>:
c0016142:	56                   	push   esi
c0016143:	53                   	push   ebx
c0016144:	83 ec 20             	sub    esp,0x20
c0016147:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001614b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001614e:	68 14 01 00 00       	push   0x114
c0016153:	e8 af 3b ff ff       	call   c0009d07 <malloc>
c0016158:	83 c4 0c             	add    esp,0xc
c001615b:	89 c3                	mov    ebx,eax
c001615d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016162:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016165:	56                   	push   esi
c0016166:	53                   	push   ebx
c0016167:	e8 12 74 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c001616c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001616f:	e8 5c 76 ff ff       	call   c000d7d0 <File::unlink()>
c0016174:	83 c4 10             	add    esp,0x10
c0016177:	85 db                	test   ebx,ebx
c0016179:	74 14                	je     c001618f <sysCallRmdir(regs*)+0x4d>
c001617b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001617f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016181:	83 ec 0c             	sub    esp,0xc
c0016184:	53                   	push   ebx
c0016185:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001618f:	85 c0                	test   eax,eax
c0016191:	0f 95 c0             	setne  al
c0016194:	31 d2                	xor    edx,edx
c0016196:	0f b6 c0             	movzx  eax,al
c0016199:	f7 d8                	neg    eax
c001619b:	83 d2 00             	adc    edx,0x0
c001619e:	83 c4 14             	add    esp,0x14
c00161a1:	f7 da                	neg    edx
c00161a3:	5b                   	pop    ebx
c00161a4:	5e                   	pop    esi
c00161a5:	c3                   	ret    

c00161a6 <sysCallUnlink(regs*)>:
c00161a6:	56                   	push   esi
c00161a7:	53                   	push   ebx
c00161a8:	83 ec 20             	sub    esp,0x20
c00161ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161af:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00161b2:	68 14 01 00 00       	push   0x114
c00161b7:	e8 4b 3b ff ff       	call   c0009d07 <malloc>
c00161bc:	83 c4 0c             	add    esp,0xc
c00161bf:	89 c3                	mov    ebx,eax
c00161c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161c6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161c9:	56                   	push   esi
c00161ca:	53                   	push   ebx
c00161cb:	e8 ae 73 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c00161d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161d3:	e8 f8 75 ff ff       	call   c000d7d0 <File::unlink()>
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	85 db                	test   ebx,ebx
c00161dd:	74 14                	je     c00161f3 <sysCallUnlink(regs*)+0x4d>
c00161df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161e5:	83 ec 0c             	sub    esp,0xc
c00161e8:	53                   	push   ebx
c00161e9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161f3:	85 c0                	test   eax,eax
c00161f5:	0f 95 c0             	setne  al
c00161f8:	31 d2                	xor    edx,edx
c00161fa:	0f b6 c0             	movzx  eax,al
c00161fd:	f7 d8                	neg    eax
c00161ff:	83 d2 00             	adc    edx,0x0
c0016202:	83 c4 14             	add    esp,0x14
c0016205:	f7 da                	neg    edx
c0016207:	5b                   	pop    ebx
c0016208:	5e                   	pop    esi
c0016209:	c3                   	ret    

c001620a <sysCallGetArgv(regs*)>:
c001620a:	83 ec 0c             	sub    esp,0xc
c001620d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016211:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016214:	85 c0                	test   eax,eax
c0016216:	78 2b                	js     c0016243 <sysCallGetArgv(regs*)+0x39>
c0016218:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001621e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016221:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016227:	7d 1a                	jge    c0016243 <sysCallGetArgv(regs*)+0x39>
c0016229:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016230:	85 c0                	test   eax,eax
c0016232:	74 17                	je     c001624b <sysCallGetArgv(regs*)+0x41>
c0016234:	83 ec 08             	sub    esp,0x8
c0016237:	50                   	push   eax
c0016238:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001623b:	e8 f8 a4 fe ff       	call   c0000738 <strcpy>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	31 c0                	xor    eax,eax
c0016245:	31 d2                	xor    edx,edx
c0016247:	83 c4 0c             	add    esp,0xc
c001624a:	c3                   	ret    
c001624b:	b8 01 00 00 00       	mov    eax,0x1
c0016250:	31 d2                	xor    edx,edx
c0016252:	83 c4 0c             	add    esp,0xc
c0016255:	c3                   	ret    

c0016256 <sysCallTTYName(regs*)>:
c0016256:	56                   	push   esi
c0016257:	53                   	push   ebx
c0016258:	53                   	push   ebx
c0016259:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001625d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016260:	85 c0                	test   eax,eax
c0016262:	74 5f                	je     c00162c3 <sysCallTTYName(regs*)+0x6d>
c0016264:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016267:	83 f8 02             	cmp    eax,0x2
c001626a:	77 3e                	ja     c00162aa <sysCallTTYName(regs*)+0x54>
c001626c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016274:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001627a:	85 db                	test   ebx,ebx
c001627c:	74 45                	je     c00162c3 <sysCallTTYName(regs*)+0x6d>
c001627e:	83 ec 0c             	sub    esp,0xc
c0016281:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016283:	53                   	push   ebx
c0016284:	ff 10                	call   DWORD PTR [eax]
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	84 c0                	test   al,al
c001628b:	74 41                	je     c00162ce <sysCallTTYName(regs*)+0x78>
c001628d:	83 ec 08             	sub    esp,0x8
c0016290:	81 c3 82 00 00 00    	add    ebx,0x82
c0016296:	53                   	push   ebx
c0016297:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001629a:	e8 99 a4 fe ff       	call   c0000738 <strcpy>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	31 c0                	xor    eax,eax
c00162a4:	59                   	pop    ecx
c00162a5:	31 d2                	xor    edx,edx
c00162a7:	5b                   	pop    ebx
c00162a8:	5e                   	pop    esi
c00162a9:	c3                   	ret    
c00162aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00162af:	74 bb                	je     c001626c <sysCallTTYName(regs*)+0x16>
c00162b1:	83 ec 0c             	sub    esp,0xc
c00162b4:	50                   	push   eax
c00162b5:	e8 a9 58 ff ff       	call   c000bb63 <getFromFileDescriptor(int)>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	89 c3                	mov    ebx,eax
c00162bf:	85 db                	test   ebx,ebx
c00162c1:	75 bb                	jne    c001627e <sysCallTTYName(regs*)+0x28>
c00162c3:	59                   	pop    ecx
c00162c4:	b8 01 00 00 00       	mov    eax,0x1
c00162c9:	31 d2                	xor    edx,edx
c00162cb:	5b                   	pop    ebx
c00162cc:	5e                   	pop    esi
c00162cd:	c3                   	ret    
c00162ce:	59                   	pop    ecx
c00162cf:	b8 02 00 00 00       	mov    eax,0x2
c00162d4:	31 d2                	xor    edx,edx
c00162d6:	5b                   	pop    ebx
c00162d7:	5e                   	pop    esi
c00162d8:	c3                   	ret    

c00162d9 <sysCallUSleep(regs*)>:
c00162d9:	83 ec 1c             	sub    esp,0x1c
c00162dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00162e0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00162e3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00162e6:	6a 00                	push   0x0
c00162e8:	6a 64                	push   0x64
c00162ea:	52                   	push   edx
c00162eb:	50                   	push   eax
c00162ec:	e8 cf c1 00 00       	call   c00224c0 <__udivdi3>
c00162f1:	83 c4 14             	add    esp,0x14
c00162f4:	50                   	push   eax
c00162f5:	e8 ee 23 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c00162fa:	31 c0                	xor    eax,eax
c00162fc:	31 d2                	xor    edx,edx
c00162fe:	83 c4 1c             	add    esp,0x1c
c0016301:	c3                   	ret    

c0016302 <sysCallSpawn(regs*)>:
c0016302:	56                   	push   esi
c0016303:	53                   	push   ebx
c0016304:	50                   	push   eax
c0016305:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016309:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001630c:	85 c0                	test   eax,eax
c001630e:	75 08                	jne    c0016318 <sysCallSpawn(regs*)+0x16>
c0016310:	59                   	pop    ecx
c0016311:	31 c0                	xor    eax,eax
c0016313:	31 d2                	xor    edx,edx
c0016315:	5b                   	pop    ebx
c0016316:	5e                   	pop    esi
c0016317:	c3                   	ret    
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	68 1f 07 00 00       	push   0x71f
c0016320:	e8 e2 39 ff ff       	call   c0009d07 <malloc>
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	89 c6                	mov    esi,eax
c001632a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001632d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016330:	85 c0                	test   eax,eax
c0016332:	75 32                	jne    c0016366 <sysCallSpawn(regs*)+0x64>
c0016334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016339:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001633c:	52                   	push   edx
c001633d:	50                   	push   eax
c001633e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016341:	56                   	push   esi
c0016342:	e8 99 1a 00 00       	call   c0017de0 <Process::Process(char const*, Process*, char**)>
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016351:	75 bd                	jne    c0016310 <sysCallSpawn(regs*)+0xe>
c0016353:	83 ec 0c             	sub    esp,0xc
c0016356:	56                   	push   esi
c0016357:	e8 70 1f 00 00       	call   c00182cc <Process::createUserThread()>
c001635c:	8b 06                	mov    eax,DWORD PTR [esi]
c001635e:	83 c4 10             	add    esp,0x10
c0016361:	99                   	cdq    
c0016362:	59                   	pop    ecx
c0016363:	5b                   	pop    ebx
c0016364:	5e                   	pop    esi
c0016365:	c3                   	ret    
c0016366:	31 c0                	xor    eax,eax
c0016368:	eb d2                	jmp    c001633c <sysCallSpawn(regs*)+0x3a>

c001636a <sysCallGetEnv(regs*)>:
c001636a:	57                   	push   edi
c001636b:	56                   	push   esi
c001636c:	53                   	push   ebx
c001636d:	83 ec 1c             	sub    esp,0x1c
c0016370:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016379:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001637c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001637f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016382:	e8 36 e9 ff ff       	call   c0014cbd <Krnl::getProcessTotalEnvCount(Process*)>
c0016387:	83 c4 10             	add    esp,0x10
c001638a:	39 c7                	cmp    edi,eax
c001638c:	7c 14                	jl     c00163a2 <sysCallGetEnv(regs*)+0x38>
c001638e:	85 f6                	test   esi,esi
c0016390:	75 0b                	jne    c001639d <sysCallGetEnv(regs*)+0x33>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	31 c0                	xor    eax,eax
c0016397:	5b                   	pop    ebx
c0016398:	31 d2                	xor    edx,edx
c001639a:	5e                   	pop    esi
c001639b:	5f                   	pop    edi
c001639c:	c3                   	ret    
c001639d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163a0:	eb f0                	jmp    c0016392 <sysCallGetEnv(regs*)+0x28>
c00163a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163a6:	52                   	push   edx
c00163a7:	57                   	push   edi
c00163a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163ae:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00163b1:	50                   	push   eax
c00163b2:	e8 26 e9 ff ff       	call   c0014cdd <Krnl::getProcessEnvPair(Process*, int)>
c00163b7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00163ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00163c2:	83 c4 0c             	add    esp,0xc
c00163c5:	85 c9                	test   ecx,ecx
c00163c7:	75 23                	jne    c00163ec <sysCallGetEnv(regs*)+0x82>
c00163c9:	83 ec 0c             	sub    esp,0xc
c00163cc:	50                   	push   eax
c00163cd:	e8 c6 a2 fe ff       	call   c0000698 <strlen>
c00163d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00163d5:	89 c3                	mov    ebx,eax
c00163d7:	e8 bc a2 fe ff       	call   c0000698 <strlen>
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	31 d2                	xor    edx,edx
c00163e8:	5b                   	pop    ebx
c00163e9:	5e                   	pop    esi
c00163ea:	5f                   	pop    edi
c00163eb:	c3                   	ret    
c00163ec:	83 ec 08             	sub    esp,0x8
c00163ef:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163f2:	50                   	push   eax
c00163f3:	56                   	push   esi
c00163f4:	e8 3f a3 fe ff       	call   c0000738 <strcpy>
c00163f9:	58                   	pop    eax
c00163fa:	5a                   	pop    edx
c00163fb:	68 a0 5b 02 c0       	push   0xc0025ba0
c0016400:	56                   	push   esi
c0016401:	e8 72 a4 fe ff       	call   c0000878 <strcat>
c0016406:	59                   	pop    ecx
c0016407:	5b                   	pop    ebx
c0016408:	57                   	push   edi
c0016409:	56                   	push   esi
c001640a:	e8 69 a4 fe ff       	call   c0000878 <strcat>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	e9 7b ff ff ff       	jmp    c0016392 <sysCallGetEnv(regs*)+0x28>

c0016417 <sysAppSettings(regs*)>:
c0016417:	57                   	push   edi
c0016418:	56                   	push   esi
c0016419:	56                   	push   esi
c001641a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016421:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016427:	25 e0 1f 00 00       	and    eax,0x1fe0
c001642c:	66 3d c0 09          	cmp    ax,0x9c0
c0016430:	75 2e                	jne    c0016460 <sysAppSettings(regs*)+0x49>
c0016432:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016438:	83 e0 1f             	and    eax,0x1f
c001643b:	3c 01                	cmp    al,0x1
c001643d:	74 2c                	je     c001646b <sysAppSettings(regs*)+0x54>
c001643f:	3c 07                	cmp    al,0x7
c0016441:	0f 84 b3 00 00 00    	je     c00164fa <sysAppSettings(regs*)+0xe3>
c0016447:	84 c0                	test   al,al
c0016449:	0f 84 d2 00 00 00    	je     c0016521 <sysAppSettings(regs*)+0x10a>
c001644f:	3c 08                	cmp    al,0x8
c0016451:	74 63                	je     c00164b6 <sysAppSettings(regs*)+0x9f>
c0016453:	59                   	pop    ecx
c0016454:	0f b6 c0             	movzx  eax,al
c0016457:	5e                   	pop    esi
c0016458:	05 e8 03 00 00       	add    eax,0x3e8
c001645d:	5f                   	pop    edi
c001645e:	99                   	cdq    
c001645f:	c3                   	ret    
c0016460:	b8 01 00 00 00       	mov    eax,0x1
c0016465:	59                   	pop    ecx
c0016466:	31 d2                	xor    edx,edx
c0016468:	5e                   	pop    esi
c0016469:	5f                   	pop    edi
c001646a:	c3                   	ret    
c001646b:	50                   	push   eax
c001646c:	68 00 01 00 00       	push   0x100
c0016471:	6a 00                	push   0x0
c0016473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016478:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001647b:	83 c0 0c             	add    eax,0xc
c001647e:	50                   	push   eax
c001647f:	e8 f8 a1 fe ff       	call   c000067c <memset>
c0016484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016489:	b9 ff 00 00 00       	mov    ecx,0xff
c001648e:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016491:	83 c7 0c             	add    edi,0xc
c0016494:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016496:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649b:	5a                   	pop    edx
c001649c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001649f:	59                   	pop    ecx
c00164a0:	8d 50 0c             	lea    edx,[eax+0xc]
c00164a3:	52                   	push   edx
c00164a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164aa:	e8 e5 47 ff ff       	call   c000ac94 <VgaText::setTitle(char*)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	31 c0                	xor    eax,eax
c00164b4:	eb af                	jmp    c0016465 <sysAppSettings(regs*)+0x4e>
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00164bf:	83 e0 0f             	and    eax,0xf
c00164c2:	50                   	push   eax
c00164c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164cb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164d1:	e8 ae 47 ff ff       	call   c000ac84 <VgaText::setTitleColour(VgaColour)>
c00164d6:	5f                   	pop    edi
c00164d7:	58                   	pop    eax
c00164d8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00164de:	c1 e8 04             	shr    eax,0x4
c00164e1:	83 e0 0f             	and    eax,0xf
c00164e4:	50                   	push   eax
c00164e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164ed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164f3:	e8 7c 47 ff ff       	call   c000ac74 <VgaText::setTitleTextColour(VgaColour)>
c00164f8:	eb b5                	jmp    c00164af <sysAppSettings(regs*)+0x98>
c00164fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016502:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016508:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001650e:	c0 e8 06             	shr    al,0x6
c0016511:	83 e0 01             	and    eax,0x1
c0016514:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001651a:	31 c0                	xor    eax,eax
c001651c:	e9 44 ff ff ff       	jmp    c0016465 <sysAppSettings(regs*)+0x4e>
c0016521:	b8 02 00 00 00       	mov    eax,0x2
c0016526:	e9 3a ff ff ff       	jmp    c0016465 <sysAppSettings(regs*)+0x4e>

c001652b <sysSetFatAttrib(regs*)>:
c001652b:	57                   	push   edi
c001652c:	56                   	push   esi
c001652d:	53                   	push   ebx
c001652e:	83 ec 1c             	sub    esp,0x1c
c0016531:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016535:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016538:	68 14 01 00 00       	push   0x114
c001653d:	e8 c5 37 ff ff       	call   c0009d07 <malloc>
c0016542:	83 c4 0c             	add    esp,0xc
c0016545:	89 c3                	mov    ebx,eax
c0016547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001654c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001654f:	57                   	push   edi
c0016550:	53                   	push   ebx
c0016551:	e8 28 70 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0016556:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016559:	83 c4 0c             	add    esp,0xc
c001655c:	0f b6 d4             	movzx  edx,ah
c001655f:	0f b6 c0             	movzx  eax,al
c0016562:	52                   	push   edx
c0016563:	50                   	push   eax
c0016564:	53                   	push   ebx
c0016565:	e8 00 73 ff ff       	call   c000d86a <File::chfatattr(unsigned char, unsigned char)>
c001656a:	83 c4 10             	add    esp,0x10
c001656d:	85 db                	test   ebx,ebx
c001656f:	74 14                	je     c0016585 <sysSetFatAttrib(regs*)+0x5a>
c0016571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016575:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	53                   	push   ebx
c001657b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016585:	85 c0                	test   eax,eax
c0016587:	0f 95 c0             	setne  al
c001658a:	31 d2                	xor    edx,edx
c001658c:	0f b6 c0             	movzx  eax,al
c001658f:	f7 d8                	neg    eax
c0016591:	83 d2 00             	adc    edx,0x0
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	f7 da                	neg    edx
c0016599:	5b                   	pop    ebx
c001659a:	5e                   	pop    esi
c001659b:	5f                   	pop    edi
c001659c:	c3                   	ret    

c001659d <sysPipe(regs*)>:
c001659d:	57                   	push   edi
c001659e:	56                   	push   esi
c001659f:	53                   	push   ebx
c00165a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a4:	83 ec 0c             	sub    esp,0xc
c00165a7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00165aa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00165ad:	6a 20                	push   0x20
c00165af:	e8 53 37 ff ff       	call   c0009d07 <malloc>
c00165b4:	89 c3                	mov    ebx,eax
c00165b6:	58                   	pop    eax
c00165b7:	5a                   	pop    edx
c00165b8:	68 00 50 00 00       	push   0x5000
c00165bd:	53                   	push   ebx
c00165be:	e8 49 44 ff ff       	call   c000aa0c <Pipe::Pipe(int)>
c00165c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165c6:	e8 a3 52 ff ff       	call   c000b86e <UnixFile::getFileDescriptor()>
c00165cb:	89 07                	mov    DWORD PTR [edi],eax
c00165cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165d0:	e8 99 52 ff ff       	call   c000b86e <UnixFile::getFileDescriptor()>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	89 06                	mov    DWORD PTR [esi],eax
c00165da:	31 d2                	xor    edx,edx
c00165dc:	5b                   	pop    ebx
c00165dd:	31 c0                	xor    eax,eax
c00165df:	5e                   	pop    esi
c00165e0:	5f                   	pop    edi
c00165e1:	c3                   	ret    

c00165e2 <sysGetUnixTime(regs*)>:
c00165e2:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00165e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165f1:	e9 e8 79 ff ff       	jmp    c000dfde <Clock::timeInSecondsLocal()>

c00165f6 <string_ends_with(char const*, char const*)>:
c00165f6:	57                   	push   edi
c00165f7:	56                   	push   esi
c00165f8:	53                   	push   ebx
c00165f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165fd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016601:	83 ec 0c             	sub    esp,0xc
c0016604:	53                   	push   ebx
c0016605:	e8 8e a0 fe ff       	call   c0000698 <strlen>
c001660a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001660d:	89 c6                	mov    esi,eax
c001660f:	e8 84 a0 fe ff       	call   c0000698 <strlen>
c0016614:	83 c4 10             	add    esp,0x10
c0016617:	39 c6                	cmp    esi,eax
c0016619:	7d 06                	jge    c0016621 <string_ends_with(char const*, char const*)+0x2b>
c001661b:	5b                   	pop    ebx
c001661c:	31 c0                	xor    eax,eax
c001661e:	5e                   	pop    esi
c001661f:	5f                   	pop    edi
c0016620:	c3                   	ret    
c0016621:	83 ec 08             	sub    esp,0x8
c0016624:	29 c6                	sub    esi,eax
c0016626:	57                   	push   edi
c0016627:	01 f3                	add    ebx,esi
c0016629:	53                   	push   ebx
c001662a:	e8 95 a1 fe ff       	call   c00007c4 <strcmp>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	85 c0                	test   eax,eax
c0016634:	5b                   	pop    ebx
c0016635:	0f 94 c0             	sete   al
c0016638:	5e                   	pop    esi
c0016639:	0f b6 c0             	movzx  eax,al
c001663c:	5f                   	pop    edi
c001663d:	c3                   	ret    

c001663e <sysCallOpen(regs*)>:
c001663e:	56                   	push   esi
c001663f:	53                   	push   ebx
c0016640:	81 ec 04 01 00 00    	sub    esp,0x104
c0016646:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001664d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016650:	85 c9                	test   ecx,ecx
c0016652:	0f 84 ad 01 00 00    	je     c0016805 <sysCallOpen(regs*)+0x1c7>
c0016658:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001665b:	85 c0                	test   eax,eax
c001665d:	0f 84 a2 01 00 00    	je     c0016805 <sysCallOpen(regs*)+0x1c7>
c0016663:	52                   	push   edx
c0016664:	68 a2 5b 02 c0       	push   0xc0025ba2
c0016669:	50                   	push   eax
c001666a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001666e:	56                   	push   esi
c001666f:	e8 60 6d ff ff       	call   c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016674:	89 34 24             	mov    DWORD PTR [esp],esi
c0016677:	e8 1c a0 fe ff       	call   c0000698 <strlen>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	48                   	dec    eax
c0016680:	74 1d                	je     c001669f <sysCallOpen(regs*)+0x61>
c0016682:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016685:	eb 0f                	jmp    c0016696 <sysCallOpen(regs*)+0x58>
c0016687:	80 fa 3a             	cmp    dl,0x3a
c001668a:	74 0f                	je     c001669b <sysCallOpen(regs*)+0x5d>
c001668c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016690:	48                   	dec    eax
c0016691:	74 0c                	je     c001669f <sysCallOpen(regs*)+0x61>
c0016693:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016696:	80 fa 2e             	cmp    dl,0x2e
c0016699:	75 ec                	jne    c0016687 <sysCallOpen(regs*)+0x49>
c001669b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001669f:	83 ec 08             	sub    esp,0x8
c00166a2:	68 a6 5b 02 c0       	push   0xc0025ba6
c00166a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166aa:	e8 47 ff ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c00166af:	83 c4 10             	add    esp,0x10
c00166b2:	85 c0                	test   eax,eax
c00166b4:	74 1d                	je     c00166d3 <sysCallOpen(regs*)+0x95>
c00166b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166b9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00166bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166c6:	81 c4 04 01 00 00    	add    esp,0x104
c00166cc:	31 c0                	xor    eax,eax
c00166ce:	31 d2                	xor    edx,edx
c00166d0:	5b                   	pop    ebx
c00166d1:	5e                   	pop    esi
c00166d2:	c3                   	ret    
c00166d3:	83 ec 08             	sub    esp,0x8
c00166d6:	68 ab 5b 02 c0       	push   0xc0025bab
c00166db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166de:	e8 13 ff ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c00166e3:	83 c4 10             	add    esp,0x10
c00166e6:	85 c0                	test   eax,eax
c00166e8:	75 cc                	jne    c00166b6 <sysCallOpen(regs*)+0x78>
c00166ea:	83 ec 08             	sub    esp,0x8
c00166ed:	68 a7 5b 02 c0       	push   0xc0025ba7
c00166f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166f5:	e8 ca a0 fe ff       	call   c00007c4 <strcmp>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	85 c0                	test   eax,eax
c00166ff:	74 b5                	je     c00166b6 <sysCallOpen(regs*)+0x78>
c0016701:	83 ec 08             	sub    esp,0x8
c0016704:	68 a6 5b 02 c0       	push   0xc0025ba6
c0016709:	56                   	push   esi
c001670a:	e8 e7 fe ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	85 c0                	test   eax,eax
c0016714:	75 a0                	jne    c00166b6 <sysCallOpen(regs*)+0x78>
c0016716:	83 ec 08             	sub    esp,0x8
c0016719:	68 b0 5b 02 c0       	push   0xc0025bb0
c001671e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016721:	e8 d0 fe ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c0016726:	83 c4 10             	add    esp,0x10
c0016729:	85 c0                	test   eax,eax
c001672b:	0f 85 e7 00 00 00    	jne    c0016818 <sysCallOpen(regs*)+0x1da>
c0016731:	83 ec 08             	sub    esp,0x8
c0016734:	68 b5 5b 02 c0       	push   0xc0025bb5
c0016739:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001673c:	e8 b5 fe ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c0016741:	83 c4 10             	add    esp,0x10
c0016744:	85 c0                	test   eax,eax
c0016746:	0f 85 cc 00 00 00    	jne    c0016818 <sysCallOpen(regs*)+0x1da>
c001674c:	83 ec 08             	sub    esp,0x8
c001674f:	68 b1 5b 02 c0       	push   0xc0025bb1
c0016754:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016757:	e8 68 a0 fe ff       	call   c00007c4 <strcmp>
c001675c:	83 c4 10             	add    esp,0x10
c001675f:	85 c0                	test   eax,eax
c0016761:	0f 84 b1 00 00 00    	je     c0016818 <sysCallOpen(regs*)+0x1da>
c0016767:	83 ec 08             	sub    esp,0x8
c001676a:	68 b0 5b 02 c0       	push   0xc0025bb0
c001676f:	56                   	push   esi
c0016770:	e8 81 fe ff ff       	call   c00165f6 <string_ends_with(char const*, char const*)>
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	85 c0                	test   eax,eax
c001677a:	0f 85 98 00 00 00    	jne    c0016818 <sysCallOpen(regs*)+0x1da>
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	68 14 01 00 00       	push   0x114
c0016788:	e8 7a 35 ff ff       	call   c0009d07 <malloc>
c001678d:	83 c4 0c             	add    esp,0xc
c0016790:	89 c6                	mov    esi,eax
c0016792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016797:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001679a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001679d:	56                   	push   esi
c001679e:	e8 db 6d ff ff       	call   c000d57e <File::File(char const*, Process*)>
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	85 f6                	test   esi,esi
c00167a8:	74 5b                	je     c0016805 <sysCallOpen(regs*)+0x1c7>
c00167aa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00167ad:	0f b6 c2             	movzx  eax,dl
c00167b0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00167b3:	89 d0                	mov    eax,edx
c00167b5:	83 e0 01             	and    eax,0x1
c00167b8:	f6 c2 02             	test   dl,0x2
c00167bb:	74 03                	je     c00167c0 <sysCallOpen(regs*)+0x182>
c00167bd:	83 c8 02             	or     eax,0x2
c00167c0:	f6 c2 04             	test   dl,0x4
c00167c3:	74 03                	je     c00167c8 <sysCallOpen(regs*)+0x18a>
c00167c5:	83 c8 04             	or     eax,0x4
c00167c8:	f6 c2 08             	test   dl,0x8
c00167cb:	74 03                	je     c00167d0 <sysCallOpen(regs*)+0x192>
c00167cd:	83 c8 0a             	or     eax,0xa
c00167d0:	83 e2 10             	and    edx,0x10
c00167d3:	74 03                	je     c00167d8 <sysCallOpen(regs*)+0x19a>
c00167d5:	83 c8 12             	or     eax,0x12
c00167d8:	83 ec 08             	sub    esp,0x8
c00167db:	50                   	push   eax
c00167dc:	56                   	push   esi
c00167dd:	e8 76 6e ff ff       	call   c000d658 <File::open(FileOpenMode)>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	85 c0                	test   eax,eax
c00167e7:	75 1c                	jne    c0016805 <sysCallOpen(regs*)+0x1c7>
c00167e9:	83 ec 0c             	sub    esp,0xc
c00167ec:	56                   	push   esi
c00167ed:	e8 7c 50 ff ff       	call   c000b86e <UnixFile::getFileDescriptor()>
c00167f2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	89 02                	mov    DWORD PTR [edx],eax
c00167fa:	c1 f8 1f             	sar    eax,0x1f
c00167fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016800:	e9 c1 fe ff ff       	jmp    c00166c6 <sysCallOpen(regs*)+0x88>
c0016805:	81 c4 04 01 00 00    	add    esp,0x104
c001680b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016810:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016815:	5b                   	pop    ebx
c0016816:	5e                   	pop    esi
c0016817:	c3                   	ret    
c0016818:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001681b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016821:	e9 99 fe ff ff       	jmp    c00166bf <sysCallOpen(regs*)+0x81>

c0016826 <Sys::loadSyscalls()>:
c0016826:	c7 05 00 88 02 c0 97 5a 01 c0 	mov    DWORD PTR ds:0xc0028800,0xc0015a97
c0016830:	c7 05 04 88 02 c0 8c 56 01 c0 	mov    DWORD PTR ds:0xc0028804,0xc001568c
c001683a:	c7 05 08 88 02 c0 7d 58 01 c0 	mov    DWORD PTR ds:0xc0028808,0xc001587d
c0016844:	c7 05 0c 88 02 c0 cd 59 01 c0 	mov    DWORD PTR ds:0xc002880c,0xc00159cd
c001684e:	c7 05 10 88 02 c0 15 58 01 c0 	mov    DWORD PTR ds:0xc0028810,0xc0015815
c0016858:	c7 05 14 88 02 c0 c3 56 01 c0 	mov    DWORD PTR ds:0xc0028814,0xc00156c3
c0016862:	c7 05 18 88 02 c0 a4 56 01 c0 	mov    DWORD PTR ds:0xc0028818,0xc00156a4
c001686c:	c7 05 1c 88 02 c0 d2 58 01 c0 	mov    DWORD PTR ds:0xc002881c,0xc00158d2
c0016876:	c7 05 24 88 02 c0 5a 5f 01 c0 	mov    DWORD PTR ds:0xc0028824,0xc0015f5a
c0016880:	c7 05 20 88 02 c0 3e 66 01 c0 	mov    DWORD PTR ds:0xc0028820,0xc001663e
c001688a:	c7 05 28 88 02 c0 ba 5f 01 c0 	mov    DWORD PTR ds:0xc0028828,0xc0015fba
c0016894:	c7 05 2c 88 02 c0 9d 5c 01 c0 	mov    DWORD PTR ds:0xc002882c,0xc0015c9d
c001689e:	c7 05 30 88 02 c0 cf 5a 01 c0 	mov    DWORD PTR ds:0xc0028830,0xc0015acf
c00168a8:	c7 05 34 88 02 c0 d4 5a 01 c0 	mov    DWORD PTR ds:0xc0028834,0xc0015ad4
c00168b2:	c7 05 38 88 02 c0 83 60 01 c0 	mov    DWORD PTR ds:0xc0028838,0xc0016083
c00168bc:	c7 05 3c 88 02 c0 2f 60 01 c0 	mov    DWORD PTR ds:0xc002883c,0xc001602f
c00168c6:	c7 05 40 88 02 c0 76 5d 01 c0 	mov    DWORD PTR ds:0xc0028840,0xc0015d76
c00168d0:	c7 05 44 88 02 c0 cd 5d 01 c0 	mov    DWORD PTR ds:0xc0028844,0xc0015dcd
c00168da:	c7 05 48 88 02 c0 39 5e 01 c0 	mov    DWORD PTR ds:0xc0028848,0xc0015e39
c00168e4:	c7 05 4c 88 02 c0 d9 5a 01 c0 	mov    DWORD PTR ds:0xc002884c,0xc0015ad9
c00168ee:	c7 05 50 88 02 c0 f3 60 01 c0 	mov    DWORD PTR ds:0xc0028850,0xc00160f3
c00168f8:	c7 05 54 88 02 c0 0d 61 01 c0 	mov    DWORD PTR ds:0xc0028854,0xc001610d
c0016902:	c7 05 58 88 02 c0 0d 61 01 c0 	mov    DWORD PTR ds:0xc0028858,0xc001610d
c001690c:	c7 05 5c 88 02 c0 42 61 01 c0 	mov    DWORD PTR ds:0xc002885c,0xc0016142
c0016916:	c7 05 60 88 02 c0 a6 61 01 c0 	mov    DWORD PTR ds:0xc0028860,0xc00161a6
c0016920:	c7 05 64 88 02 c0 e3 5a 01 c0 	mov    DWORD PTR ds:0xc0028864,0xc0015ae3
c001692a:	c7 05 68 88 02 c0 0a 62 01 c0 	mov    DWORD PTR ds:0xc0028868,0xc001620a
c0016934:	c7 05 6c 88 02 c0 5a 5c 01 c0 	mov    DWORD PTR ds:0xc002886c,0xc0015c5a
c001693e:	c7 05 70 88 02 c0 56 62 01 c0 	mov    DWORD PTR ds:0xc0028870,0xc0016256
c0016948:	c7 05 74 88 02 c0 1c 5d 01 c0 	mov    DWORD PTR ds:0xc0028874,0xc0015d1c
c0016952:	c7 05 78 88 02 c0 d9 62 01 c0 	mov    DWORD PTR ds:0xc0028878,0xc00162d9
c001695c:	c7 05 7c 88 02 c0 ab 5e 01 c0 	mov    DWORD PTR ds:0xc002887c,0xc0015eab
c0016966:	c7 05 80 88 02 c0 02 63 01 c0 	mov    DWORD PTR ds:0xc0028880,0xc0016302
c0016970:	c7 05 84 88 02 c0 6a 63 01 c0 	mov    DWORD PTR ds:0xc0028884,0xc001636a
c001697a:	c7 05 88 88 02 c0 17 64 01 c0 	mov    DWORD PTR ds:0xc0028888,0xc0016417
c0016984:	c7 05 8c 88 02 c0 f3 5a 01 c0 	mov    DWORD PTR ds:0xc002888c,0xc0015af3
c001698e:	c7 05 90 88 02 c0 5d 5b 01 c0 	mov    DWORD PTR ds:0xc0028890,0xc0015b5d
c0016998:	c7 05 94 88 02 c0 a7 5b 01 c0 	mov    DWORD PTR ds:0xc0028894,0xc0015ba7
c00169a2:	c7 05 98 88 02 c0 2b 65 01 c0 	mov    DWORD PTR ds:0xc0028898,0xc001652b
c00169ac:	c7 05 9c 88 02 c0 28 61 01 c0 	mov    DWORD PTR ds:0xc002889c,0xc0016128
c00169b6:	c7 05 a0 88 02 c0 fc 5b 01 c0 	mov    DWORD PTR ds:0xc00288a0,0xc0015bfc
c00169c0:	c7 05 a4 88 02 c0 9d 65 01 c0 	mov    DWORD PTR ds:0xc00288a4,0xc001659d
c00169ca:	c7 05 a8 88 02 c0 e2 65 01 c0 	mov    DWORD PTR ds:0xc00288a8,0xc00165e2
c00169d4:	c7 05 ac 88 02 c0 6d 57 01 c0 	mov    DWORD PTR ds:0xc00288ac,0xc001576d
c00169de:	c7 05 b0 88 02 c0 ee 58 01 c0 	mov    DWORD PTR ds:0xc00288b0,0xc00158ee
c00169e8:	c7 05 b4 88 02 c0 83 59 01 c0 	mov    DWORD PTR ds:0xc00288b4,0xc0015983
c00169f2:	c7 05 b8 88 02 c0 56 56 01 c0 	mov    DWORD PTR ds:0xc00288b8,0xc0015656
c00169fc:	c7 05 bc 88 02 c0 35 5a 01 c0 	mov    DWORD PTR ds:0xc00288bc,0xc0015a35
c0016a06:	c7 05 c0 88 02 c0 cf 56 01 c0 	mov    DWORD PTR ds:0xc00288c0,0xc00156cf
c0016a10:	c7 05 c4 88 02 c0 e9 56 01 c0 	mov    DWORD PTR ds:0xc00288c4,0xc00156e9
c0016a1a:	c3                   	ret    

c0016a1b <Sys::systemCall(regs*, void*)>:
c0016a1b:	53                   	push   ebx
c0016a1c:	83 ec 08             	sub    esp,0x8
c0016a1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a23:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a26:	83 f8 7f             	cmp    eax,0x7f
c0016a29:	77 16                	ja     c0016a41 <Sys::systemCall(regs*, void*)+0x26>
c0016a2b:	8b 14 85 00 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7800]
c0016a32:	85 d2                	test   edx,edx
c0016a34:	74 0b                	je     c0016a41 <Sys::systemCall(regs*, void*)+0x26>
c0016a36:	83 ec 0c             	sub    esp,0xc
c0016a39:	53                   	push   ebx
c0016a3a:	ff d2                	call   edx
c0016a3c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a3f:	eb 0d                	jmp    c0016a4e <Sys::systemCall(regs*, void*)+0x33>
c0016a41:	52                   	push   edx
c0016a42:	52                   	push   edx
c0016a43:	50                   	push   eax
c0016a44:	68 ba 5b 02 c0       	push   0xc0025bba
c0016a49:	e8 c5 65 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016a56:	31 d2                	xor    edx,edx
c0016a58:	83 c4 08             	add    esp,0x8
c0016a5b:	5b                   	pop    ebx
c0016a5c:	c3                   	ret    

c0016a5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016a5d:	55                   	push   ebp
c0016a5e:	57                   	push   edi
c0016a5f:	56                   	push   esi
c0016a60:	53                   	push   ebx
c0016a61:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016a67:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016a6e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016a75:	85 c0                	test   eax,eax
c0016a77:	0f 95 c1             	setne  cl
c0016a7a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016a82:	0f 94 c2             	sete   dl
c0016a85:	84 d1                	test   cl,dl
c0016a87:	74 23                	je     c0016aac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a89:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016a8f:	74 1b                	je     c0016aac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a91:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016a97:	89 da                	mov    edx,ebx
c0016a99:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016a9f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016aa5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016aac:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016ab3:	05 ff 0f 00 00       	add    eax,0xfff
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016abf:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016ac5:	c1 e8 0c             	shr    eax,0xc
c0016ac8:	89 fe                	mov    esi,edi
c0016aca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ace:	c1 ee 0c             	shr    esi,0xc
c0016ad1:	6a 01                	push   0x1
c0016ad3:	e8 e1 51 ff ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0016ad8:	89 c5                	mov    ebp,eax
c0016ada:	58                   	pop    eax
c0016adb:	5a                   	pop    edx
c0016adc:	56                   	push   esi
c0016add:	68 ce 5b 02 c0       	push   0xc0025bce
c0016ae2:	e8 2c 65 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016ae7:	59                   	pop    ecx
c0016ae8:	58                   	pop    eax
c0016ae9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016aed:	68 e0 5b 02 c0       	push   0xc0025be0
c0016af2:	e8 1c 65 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016b00:	0f 86 31 01 00 00    	jbe    c0016c37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016b06:	c1 e6 0c             	shl    esi,0xc
c0016b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b0c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b13:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016b1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016b1d:	01 df                	add    edi,ebx
c0016b1f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016b22:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b26:	0f 84 08 01 00 00    	je     c0016c34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016b2c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016b32:	76 05                	jbe    c0016b39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016b34:	bf 00 10 00 00       	mov    edi,0x1000
c0016b39:	83 ec 0c             	sub    esp,0xc
c0016b3c:	31 d2                	xor    edx,edx
c0016b3e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016b45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b47:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016b4b:	50                   	push   eax
c0016b4c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016b50:	56                   	push   esi
c0016b51:	52                   	push   edx
c0016b52:	57                   	push   edi
c0016b53:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016b5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b5d:	83 c4 20             	add    esp,0x20
c0016b60:	85 c0                	test   eax,eax
c0016b62:	74 0a                	je     c0016b6e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016b64:	53                   	push   ebx
c0016b65:	53                   	push   ebx
c0016b66:	50                   	push   eax
c0016b67:	68 f2 5b 02 c0       	push   0xc0025bf2
c0016b6c:	eb 0f                	jmp    c0016b7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016b6e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b72:	74 20                	je     c0016b94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016b74:	51                   	push   ecx
c0016b75:	51                   	push   ecx
c0016b76:	6a 00                	push   0x0
c0016b78:	68 1d 5c 02 c0       	push   0xc0025c1d
c0016b7d:	e8 91 64 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016b82:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b85:	e8 23 54 ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c0016b8a:	83 c4 10             	add    esp,0x10
c0016b8d:	31 c0                	xor    eax,eax
c0016b8f:	e9 68 01 00 00       	jmp    c0016cfc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016b94:	fa                   	cli    
c0016b95:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0016b9b:	e8 1e 38 ff ff       	call   c000a3be <Phys::allocatePage()>
c0016ba0:	6a 07                	push   0x7
c0016ba2:	89 c7                	mov    edi,eax
c0016ba4:	55                   	push   ebp
c0016ba5:	50                   	push   eax
c0016ba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bb4:	e8 6b 57 ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016bb9:	83 c4 0c             	add    esp,0xc
c0016bbc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016bc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bc9:	6a 00                	push   0x0
c0016bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bd3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bd9:	e8 a0 55 ff ff       	call   c000c17e <VAS::mapOtherVASIn(bool, VAS*)>
c0016bde:	58                   	pop    eax
c0016bdf:	5a                   	pop    edx
c0016be0:	68 07 0c 00 00       	push   0xc07
c0016be5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016be9:	57                   	push   edi
c0016bea:	89 ef                	mov    edi,ebp
c0016bec:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016bf3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bf9:	6a 00                	push   0x0
c0016bfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c03:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c09:	e8 d2 5a ff ff       	call   c000c6e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c0e:	b9 00 10 00 00       	mov    ecx,0x1000
c0016c13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c15:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016c1a:	83 c4 20             	add    esp,0x20
c0016c1d:	48                   	dec    eax
c0016c1e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0016c23:	85 c0                	test   eax,eax
c0016c25:	75 01                	jne    c0016c28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016c27:	fb                   	sti    
c0016c28:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016c2f:	e9 df fe ff ff       	jmp    c0016b13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016c34:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016c37:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016c3f:	0f 86 a9 00 00 00    	jbe    c0016cee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c45:	fa                   	cli    
c0016c46:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0016c4c:	51                   	push   ecx
c0016c4d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c54:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c5a:	6a 00                	push   0x0
c0016c5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c64:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c6a:	e8 0f 55 ff ff       	call   c000c17e <VAS::mapOtherVASIn(bool, VAS*)>
c0016c6f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016c73:	c1 e6 0c             	shl    esi,0xc
c0016c76:	01 de                	add    esi,ebx
c0016c78:	83 c4 10             	add    esp,0x10
c0016c7b:	39 de                	cmp    esi,ebx
c0016c7d:	74 61                	je     c0016ce0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016c7f:	e8 3a 37 ff ff       	call   c000a3be <Phys::allocatePage()>
c0016c84:	6a 07                	push   0x7
c0016c86:	89 c7                	mov    edi,eax
c0016c88:	55                   	push   ebp
c0016c89:	50                   	push   eax
c0016c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c98:	e8 87 56 ff ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016c9d:	58                   	pop    eax
c0016c9e:	5a                   	pop    edx
c0016c9f:	68 07 0c 00 00       	push   0xc07
c0016ca4:	53                   	push   ebx
c0016ca5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016cab:	57                   	push   edi
c0016cac:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016cb3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cb9:	6a 00                	push   0x0
c0016cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cc9:	e8 12 5a ff ff       	call   c000c6e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016cce:	83 c4 1c             	add    esp,0x1c
c0016cd1:	68 00 10 00 00       	push   0x1000
c0016cd6:	6a 00                	push   0x0
c0016cd8:	55                   	push   ebp
c0016cd9:	e8 9e 99 fe ff       	call   c000067c <memset>
c0016cde:	eb 98                	jmp    c0016c78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016ce0:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016ce5:	48                   	dec    eax
c0016ce6:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0016ceb:	75 01                	jne    c0016cee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016ced:	fb                   	sti    
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	55                   	push   ebp
c0016cf2:	e8 b6 52 ff ff       	call   c000bfad <Virt::freeKernelVirtualPages(unsigned long)>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	b0 01                	mov    al,0x1
c0016cfc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016d02:	5b                   	pop    ebx
c0016d03:	5e                   	pop    esi
c0016d04:	5f                   	pop    edi
c0016d05:	5d                   	pop    ebp
c0016d06:	c3                   	ret    

c0016d07 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016d07:	55                   	push   ebp
c0016d08:	57                   	push   edi
c0016d09:	56                   	push   esi
c0016d0a:	53                   	push   ebx
c0016d0b:	83 ec 48             	sub    esp,0x48
c0016d0e:	68 14 01 00 00       	push   0x114
c0016d13:	e8 ef 2f ff ff       	call   c0009d07 <malloc>
c0016d18:	83 c4 0c             	add    esp,0xc
c0016d1b:	89 c6                	mov    esi,eax
c0016d1d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016d25:	50                   	push   eax
c0016d26:	e8 53 68 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0016d2b:	58                   	pop    eax
c0016d2c:	5a                   	pop    edx
c0016d2d:	6a 01                	push   0x1
c0016d2f:	56                   	push   esi
c0016d30:	e8 23 69 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	85 c0                	test   eax,eax
c0016d3a:	0f 85 47 01 00 00    	jne    c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	6a 34                	push   0x34
c0016d4d:	e8 b5 2f ff ff       	call   c0009d07 <malloc>
c0016d52:	89 c3                	mov    ebx,eax
c0016d54:	58                   	pop    eax
c0016d55:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d57:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016d5b:	57                   	push   edi
c0016d5c:	53                   	push   ebx
c0016d5d:	6a 00                	push   0x0
c0016d5f:	6a 34                	push   0x34
c0016d61:	56                   	push   esi
c0016d62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d65:	83 c4 20             	add    esp,0x20
c0016d68:	85 c0                	test   eax,eax
c0016d6a:	0f 85 17 01 00 00    	jne    c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d70:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016d76:	0f 85 0b 01 00 00    	jne    c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016d7f:	85 c0                	test   eax,eax
c0016d81:	0f 84 00 01 00 00    	je     c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d87:	31 d2                	xor    edx,edx
c0016d89:	55                   	push   ebp
c0016d8a:	52                   	push   edx
c0016d8b:	50                   	push   eax
c0016d8c:	56                   	push   esi
c0016d8d:	e8 84 69 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	85 c0                	test   eax,eax
c0016d97:	0f 85 ea 00 00 00    	jne    c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d9d:	83 ec 0c             	sub    esp,0xc
c0016da0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016da3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016da7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016dab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016daf:	0f af c2             	imul   eax,edx
c0016db2:	50                   	push   eax
c0016db3:	e8 4f 2f ff ff       	call   c0009d07 <malloc>
c0016db8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016dba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016dbe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dc5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016dc9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016dcd:	0f af c2             	imul   eax,edx
c0016dd0:	99                   	cdq    
c0016dd1:	52                   	push   edx
c0016dd2:	50                   	push   eax
c0016dd3:	56                   	push   esi
c0016dd4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016dd7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016dda:	83 c4 20             	add    esp,0x20
c0016ddd:	85 c0                	test   eax,eax
c0016ddf:	0f 84 a2 00 00 00    	je     c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016de5:	31 d2                	xor    edx,edx
c0016de7:	51                   	push   ecx
c0016de8:	52                   	push   edx
c0016de9:	50                   	push   eax
c0016dea:	56                   	push   esi
c0016deb:	e8 26 69 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c0016df0:	83 c4 10             	add    esp,0x10
c0016df3:	85 c0                	test   eax,eax
c0016df5:	0f 85 8c 00 00 00    	jne    c0016e87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016dfb:	83 ec 0c             	sub    esp,0xc
c0016dfe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e02:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e06:	31 ed                	xor    ebp,ebp
c0016e08:	0f af c2             	imul   eax,edx
c0016e0b:	50                   	push   eax
c0016e0c:	e8 f6 2e ff ff       	call   c0009d07 <malloc>
c0016e11:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e17:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e22:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e26:	0f af c2             	imul   eax,edx
c0016e29:	99                   	cdq    
c0016e2a:	52                   	push   edx
c0016e2b:	50                   	push   eax
c0016e2c:	56                   	push   esi
c0016e2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e30:	83 c4 20             	add    esp,0x20
c0016e33:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e3b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016e3f:	0f 86 80 00 00 00    	jbe    c0016ec5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016e45:	0f b7 fd             	movzx  edi,bp
c0016e48:	c1 e7 05             	shl    edi,0x5
c0016e4b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016e4f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016e52:	75 6b                	jne    c0016ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e54:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016e57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e5b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016e5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e62:	52                   	push   edx
c0016e63:	31 d2                	xor    edx,edx
c0016e65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016e68:	52                   	push   edx
c0016e69:	50                   	push   eax
c0016e6a:	56                   	push   esi
c0016e6b:	e8 a6 68 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c0016e70:	83 c4 10             	add    esp,0x10
c0016e73:	85 c0                	test   eax,eax
c0016e75:	74 17                	je     c0016e8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016e77:	83 ec 0c             	sub    esp,0xc
c0016e7a:	68 49 5c 02 c0       	push   0xc0025c49
c0016e7f:	e8 8f 61 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	31 c0                	xor    eax,eax
c0016e89:	e9 87 00 00 00       	jmp    c0016f15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016e8e:	83 ec 0c             	sub    esp,0xc
c0016e91:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016e94:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016e97:	50                   	push   eax
c0016e98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ea0:	56                   	push   esi
c0016ea1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016ea5:	e8 b3 fb ff ff       	call   c0016a5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016eaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eae:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016eb2:	83 c4 20             	add    esp,0x20
c0016eb5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016eb9:	73 04                	jae    c0016ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ebb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ebf:	45                   	inc    ebp
c0016ec0:	e9 76 ff ff ff       	jmp    c0016e3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016ec5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016ec9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ed1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016ed7:	83 ec 0c             	sub    esp,0xc
c0016eda:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016ee0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016ee5:	05 00 10 00 00       	add    eax,0x1000
c0016eea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ef1:	e8 21 2e ff ff       	call   c0009d17 <free>
c0016ef6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ef9:	e8 19 2e ff ff       	call   c0009d17 <free>
c0016efe:	58                   	pop    eax
c0016eff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f03:	e8 0f 2e ff ff       	call   c0009d17 <free>
c0016f08:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f0b:	e8 a6 67 ff ff       	call   c000d6b6 <File::close()>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	b0 01                	mov    al,0x1
c0016f15:	83 c4 3c             	add    esp,0x3c
c0016f18:	5b                   	pop    ebx
c0016f19:	5e                   	pop    esi
c0016f1a:	5f                   	pop    edi
c0016f1b:	5d                   	pop    ebp
c0016f1c:	c3                   	ret    

c0016f1d <Thr::runtimeReferenceHelper()>:
c0016f1d:	83 ec 18             	sub    esp,0x18
c0016f20:	68 51 5c 02 c0       	push   0xc0025c51
c0016f25:	e8 e9 60 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0016f2a:	fa                   	cli    
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	eb fe                	jmp    c0016f2e <Thr::runtimeReferenceHelper()+0x11>

c0016f30 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016f30:	57                   	push   edi
c0016f31:	56                   	push   esi
c0016f32:	53                   	push   ebx
c0016f33:	31 db                	xor    ebx,ebx
c0016f35:	39 1d a0 91 02 c0    	cmp    DWORD PTR ds:0xc00291a0,ebx
c0016f3b:	7e 3c                	jle    c0016f79 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016f3d:	8b 34 9d 20 91 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6ee0]
c0016f44:	31 ff                	xor    edi,edi
c0016f46:	39 3c 9d 20 90 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6fe0],edi
c0016f4d:	7e 27                	jle    c0016f76 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016f4f:	50                   	push   eax
c0016f50:	50                   	push   eax
c0016f51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f55:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f57:	03 04 9d a0 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6f60]
c0016f5e:	50                   	push   eax
c0016f5f:	e8 60 98 fe ff       	call   c00007c4 <strcmp>
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	85 c0                	test   eax,eax
c0016f69:	75 05                	jne    c0016f70 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016f6b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016f6e:	eb 0b                	jmp    c0016f7b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016f70:	83 c6 10             	add    esi,0x10
c0016f73:	47                   	inc    edi
c0016f74:	eb d0                	jmp    c0016f46 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016f76:	43                   	inc    ebx
c0016f77:	eb bc                	jmp    c0016f35 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016f79:	31 c0                	xor    eax,eax
c0016f7b:	5b                   	pop    ebx
c0016f7c:	5e                   	pop    esi
c0016f7d:	5f                   	pop    edi
c0016f7e:	c3                   	ret    

c0016f7f <Thr::loadKernelSymbolTable(char const*)>:
c0016f7f:	55                   	push   ebp
c0016f80:	57                   	push   edi
c0016f81:	56                   	push   esi
c0016f82:	53                   	push   ebx
c0016f83:	83 ec 68             	sub    esp,0x68
c0016f86:	8b 35 f0 91 02 c0    	mov    esi,DWORD PTR ds:0xc00291f0
c0016f8c:	68 14 01 00 00       	push   0x114
c0016f91:	e8 71 2d ff ff       	call   c0009d07 <malloc>
c0016f96:	83 c4 0c             	add    esp,0xc
c0016f99:	89 c3                	mov    ebx,eax
c0016f9b:	56                   	push   esi
c0016f9c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016fa0:	50                   	push   eax
c0016fa1:	e8 d8 65 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0016fa6:	5e                   	pop    esi
c0016fa7:	5f                   	pop    edi
c0016fa8:	6a 01                	push   0x1
c0016faa:	53                   	push   ebx
c0016fab:	e8 a8 66 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	85 c0                	test   eax,eax
c0016fb5:	74 0a                	je     c0016fc1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016fb7:	83 ec 0c             	sub    esp,0xc
c0016fba:	68 73 5c 02 c0       	push   0xc0025c73
c0016fbf:	eb 34                	jmp    c0016ff5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016fc1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016fc9:	83 ec 0c             	sub    esp,0xc
c0016fcc:	6a 34                	push   0x34
c0016fce:	e8 34 2d ff ff       	call   c0009d07 <malloc>
c0016fd3:	59                   	pop    ecx
c0016fd4:	89 c7                	mov    edi,eax
c0016fd6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016fda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fdc:	56                   	push   esi
c0016fdd:	57                   	push   edi
c0016fde:	6a 00                	push   0x0
c0016fe0:	6a 34                	push   0x34
c0016fe2:	53                   	push   ebx
c0016fe3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fe6:	83 c4 20             	add    esp,0x20
c0016fe9:	85 c0                	test   eax,eax
c0016feb:	74 17                	je     c0017004 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	68 8a 5c 02 c0       	push   0xc0025c8a
c0016ff5:	e8 77 dd ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	31 c0                	xor    eax,eax
c0016fff:	e9 31 02 00 00       	jmp    c0017235 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017004:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001700a:	75 e1                	jne    c0016fed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001700c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001700f:	85 c0                	test   eax,eax
c0017011:	74 da                	je     c0016fed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017013:	52                   	push   edx
c0017014:	31 d2                	xor    edx,edx
c0017016:	52                   	push   edx
c0017017:	50                   	push   eax
c0017018:	53                   	push   ebx
c0017019:	e8 f8 66 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c001701e:	83 c4 10             	add    esp,0x10
c0017021:	85 c0                	test   eax,eax
c0017023:	75 c8                	jne    c0016fed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001702c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017030:	31 ed                	xor    ebp,ebp
c0017032:	0f af c2             	imul   eax,edx
c0017035:	50                   	push   eax
c0017036:	e8 cc 2c ff ff       	call   c0009d07 <malloc>
c001703b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001703d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017041:	89 34 24             	mov    DWORD PTR [esp],esi
c0017044:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017048:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001704c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017050:	0f af c2             	imul   eax,edx
c0017053:	99                   	cdq    
c0017054:	52                   	push   edx
c0017055:	50                   	push   eax
c0017056:	53                   	push   ebx
c0017057:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001705a:	83 c4 20             	add    esp,0x20
c001705d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017065:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001706d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017075:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001707d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017081:	0f 86 aa 00 00 00    	jbe    c0017131 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017087:	0f b7 f5             	movzx  esi,bp
c001708a:	6b f6 28             	imul   esi,esi,0x28
c001708d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017091:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017098:	50                   	push   eax
c0017099:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001709d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00170a1:	8b 16                	mov    edx,DWORD PTR [esi]
c00170a3:	6b c0 28             	imul   eax,eax,0x28
c00170a6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00170aa:	89 d0                	mov    eax,edx
c00170ac:	31 d2                	xor    edx,edx
c00170ae:	52                   	push   edx
c00170af:	50                   	push   eax
c00170b0:	53                   	push   ebx
c00170b1:	e8 60 66 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00170b6:	83 c4 0c             	add    esp,0xc
c00170b9:	6a 20                	push   0x20
c00170bb:	6a 00                	push   0x0
c00170bd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00170c1:	52                   	push   edx
c00170c2:	e8 b5 95 fe ff       	call   c000067c <memset>
c00170c7:	58                   	pop    eax
c00170c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00170ca:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00170ce:	51                   	push   ecx
c00170cf:	8d 54 24 40          	lea    edx,[esp+0x40]
c00170d3:	52                   	push   edx
c00170d4:	6a 00                	push   0x0
c00170d6:	6a 1f                	push   0x1f
c00170d8:	53                   	push   ebx
c00170d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170dc:	83 c4 18             	add    esp,0x18
c00170df:	68 a1 5c 02 c0       	push   0xc0025ca1
c00170e4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00170e8:	52                   	push   edx
c00170e9:	e8 d6 96 fe ff       	call   c00007c4 <strcmp>
c00170ee:	83 c4 10             	add    esp,0x10
c00170f1:	85 c0                	test   eax,eax
c00170f3:	75 0f                	jne    c0017104 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00170f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017100:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017104:	50                   	push   eax
c0017105:	50                   	push   eax
c0017106:	68 a9 5c 02 c0       	push   0xc0025ca9
c001710b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001710f:	50                   	push   eax
c0017110:	e8 af 96 fe ff       	call   c00007c4 <strcmp>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	85 c0                	test   eax,eax
c001711a:	75 0f                	jne    c001712b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001711c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001711f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017127:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001712b:	45                   	inc    ebp
c001712c:	e9 4c ff ff ff       	jmp    c001707d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017131:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017136:	75 10                	jne    c0017148 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017138:	83 ec 0c             	sub    esp,0xc
c001713b:	68 b1 5c 02 c0       	push   0xc0025cb1
c0017140:	e8 2c dc ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017145:	83 c4 10             	add    esp,0x10
c0017148:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001714d:	75 10                	jne    c001715f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001714f:	83 ec 0c             	sub    esp,0xc
c0017152:	68 b1 5c 02 c0       	push   0xc0025cb1
c0017157:	e8 15 dc ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001715c:	83 c4 10             	add    esp,0x10
c001715f:	31 d2                	xor    edx,edx
c0017161:	50                   	push   eax
c0017162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017166:	52                   	push   edx
c0017167:	50                   	push   eax
c0017168:	53                   	push   ebx
c0017169:	e8 a8 65 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c001716e:	5a                   	pop    edx
c001716f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017173:	e8 8f 2b ff ff       	call   c0009d07 <malloc>
c0017178:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001717c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017180:	31 c9                	xor    ecx,ecx
c0017182:	5e                   	pop    esi
c0017183:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017185:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017189:	55                   	push   ebp
c001718a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718e:	51                   	push   ecx
c001718f:	52                   	push   edx
c0017190:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017194:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017198:	53                   	push   ebx
c0017199:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001719c:	83 c4 14             	add    esp,0x14
c001719f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171a3:	e8 5f 2b ff ff       	call   c0009d07 <malloc>
c00171a8:	89 c6                	mov    esi,eax
c00171aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171af:	56                   	push   esi
c00171b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00171b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00171b8:	51                   	push   ecx
c00171b9:	52                   	push   edx
c00171ba:	53                   	push   ebx
c00171bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171c2:	8b 15 a0 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291a0
c00171c8:	83 c4 1c             	add    esp,0x1c
c00171cb:	c1 e8 04             	shr    eax,0x4
c00171ce:	89 04 95 20 90 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6fe0],eax
c00171d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171d9:	31 d2                	xor    edx,edx
c00171db:	52                   	push   edx
c00171dc:	50                   	push   eax
c00171dd:	53                   	push   ebx
c00171de:	e8 33 65 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00171e3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00171e5:	31 d2                	xor    edx,edx
c00171e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171ea:	56                   	push   esi
c00171eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171ef:	52                   	push   edx
c00171f0:	50                   	push   eax
c00171f1:	53                   	push   ebx
c00171f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171f5:	83 c4 14             	add    esp,0x14
c00171f8:	53                   	push   ebx
c00171f9:	e8 b8 64 ff ff       	call   c000d6b6 <File::close()>
c00171fe:	5d                   	pop    ebp
c00171ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017203:	e8 0f 2b ff ff       	call   c0009d17 <free>
c0017208:	89 3c 24             	mov    DWORD PTR [esp],edi
c001720b:	e8 07 2b ff ff       	call   c0009d17 <free>
c0017210:	a1 a0 91 02 c0       	mov    eax,ds:0xc00291a0
c0017215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017219:	8d 50 01             	lea    edx,[eax+0x1]
c001721c:	89 0c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ecx
c0017223:	89 34 85 a0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f60],esi
c001722a:	89 15 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,edx
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	b0 01                	mov    al,0x1
c0017235:	83 c4 5c             	add    esp,0x5c
c0017238:	5b                   	pop    ebx
c0017239:	5e                   	pop    esi
c001723a:	5f                   	pop    edi
c001723b:	5d                   	pop    ebp
c001723c:	c3                   	ret    

c001723d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001723d:	55                   	push   ebp
c001723e:	57                   	push   edi
c001723f:	56                   	push   esi
c0017240:	53                   	push   ebx
c0017241:	81 ec 68 03 00 00    	sub    esp,0x368
c0017247:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001724e:	8b 1d f0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291f0
c0017254:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017258:	68 14 01 00 00       	push   0x114
c001725d:	e8 a5 2a ff ff       	call   c0009d07 <malloc>
c0017262:	83 c4 0c             	add    esp,0xc
c0017265:	89 c5                	mov    ebp,eax
c0017267:	53                   	push   ebx
c0017268:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001726f:	50                   	push   eax
c0017270:	e8 09 63 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0017275:	5e                   	pop    esi
c0017276:	5f                   	pop    edi
c0017277:	6a 01                	push   0x1
c0017279:	55                   	push   ebp
c001727a:	e8 d9 63 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	85 c0                	test   eax,eax
c0017284:	0f 85 a7 06 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001728a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	6a 34                	push   0x34
c0017297:	e8 6b 2a ff ff       	call   c0009d07 <malloc>
c001729c:	5b                   	pop    ebx
c001729d:	89 c7                	mov    edi,eax
c001729f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00172a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172a6:	53                   	push   ebx
c00172a7:	57                   	push   edi
c00172a8:	6a 00                	push   0x0
c00172aa:	6a 34                	push   0x34
c00172ac:	55                   	push   ebp
c00172ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172b0:	83 c4 20             	add    esp,0x20
c00172b3:	85 c0                	test   eax,eax
c00172b5:	0f 85 76 06 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172bb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00172c1:	0f 85 6a 06 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172c7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00172ca:	85 c0                	test   eax,eax
c00172cc:	0f 84 5f 06 00 00    	je     c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172d2:	31 d2                	xor    edx,edx
c00172d4:	51                   	push   ecx
c00172d5:	52                   	push   edx
c00172d6:	50                   	push   eax
c00172d7:	55                   	push   ebp
c00172d8:	e8 39 64 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00172dd:	83 c4 10             	add    esp,0x10
c00172e0:	85 c0                	test   eax,eax
c00172e2:	0f 85 49 06 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172e8:	83 ec 0c             	sub    esp,0xc
c00172eb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00172ee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172f2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172fa:	0f af c2             	imul   eax,edx
c00172fd:	50                   	push   eax
c00172fe:	e8 04 2a ff ff       	call   c0009d07 <malloc>
c0017303:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001730a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001730d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017311:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017315:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017319:	0f af c2             	imul   eax,edx
c001731c:	99                   	cdq    
c001731d:	52                   	push   edx
c001731e:	50                   	push   eax
c001731f:	55                   	push   ebp
c0017320:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017323:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017326:	83 c4 20             	add    esp,0x20
c0017329:	85 c0                	test   eax,eax
c001732b:	0f 84 00 06 00 00    	je     c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017331:	52                   	push   edx
c0017332:	31 d2                	xor    edx,edx
c0017334:	52                   	push   edx
c0017335:	50                   	push   eax
c0017336:	55                   	push   ebp
c0017337:	e8 da 63 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	85 c0                	test   eax,eax
c0017341:	0f 85 ea 05 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017347:	83 ec 0c             	sub    esp,0xc
c001734a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001734e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017352:	31 f6                	xor    esi,esi
c0017354:	0f af c2             	imul   eax,edx
c0017357:	50                   	push   eax
c0017358:	e8 aa 29 ff ff       	call   c0009d07 <malloc>
c001735d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017360:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001736b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001736f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017373:	0f af c2             	imul   eax,edx
c0017376:	99                   	cdq    
c0017377:	52                   	push   edx
c0017378:	50                   	push   eax
c0017379:	55                   	push   ebp
c001737a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001737d:	83 c4 20             	add    esp,0x20
c0017380:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017384:	0f 86 8a 00 00 00    	jbe    c0017414 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001738a:	0f b7 de             	movzx  ebx,si
c001738d:	c1 e3 05             	shl    ebx,0x5
c0017390:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017394:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017397:	75 75                	jne    c001740e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017399:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001739c:	31 d2                	xor    edx,edx
c001739e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173a9:	50                   	push   eax
c00173aa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00173ad:	52                   	push   edx
c00173ae:	50                   	push   eax
c00173af:	55                   	push   ebp
c00173b0:	e8 61 63 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00173b5:	83 c4 10             	add    esp,0x10
c00173b8:	85 c0                	test   eax,eax
c00173ba:	0f 85 71 05 00 00    	jne    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00173c0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00173c7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00173ca:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00173ce:	31 d2                	xor    edx,edx
c00173d0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00173e2:	50                   	push   eax
c00173e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173eb:	52                   	push   edx
c00173ec:	50                   	push   eax
c00173ed:	55                   	push   ebp
c00173ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173f1:	83 c4 1c             	add    esp,0x1c
c00173f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173f7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00173fa:	50                   	push   eax
c00173fb:	6a 00                	push   0x0
c00173fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017401:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017405:	50                   	push   eax
c0017406:	e8 71 92 fe ff       	call   c000067c <memset>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	46                   	inc    esi
c001740f:	e9 6c ff ff ff       	jmp    c0017380 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017414:	53                   	push   ebx
c0017415:	31 db                	xor    ebx,ebx
c0017417:	68 00 01 00 00       	push   0x100
c001741c:	6a 00                	push   0x0
c001741e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017422:	50                   	push   eax
c0017423:	e8 54 92 fe ff       	call   c000067c <memset>
c0017428:	83 c4 0c             	add    esp,0xc
c001742b:	68 00 01 00 00       	push   0x100
c0017430:	6a 00                	push   0x0
c0017432:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017439:	50                   	push   eax
c001743a:	e8 3d 92 fe ff       	call   c000067c <memset>
c001743f:	83 c4 10             	add    esp,0x10
c0017442:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001744a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017452:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001745a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017462:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001746a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001746e:	0f 86 30 01 00 00    	jbe    c00175a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017474:	0f b7 f3             	movzx  esi,bx
c0017477:	6b f6 28             	imul   esi,esi,0x28
c001747a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001747e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017485:	52                   	push   edx
c0017486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001748a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001748e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017490:	6b d2 28             	imul   edx,edx,0x28
c0017493:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017497:	31 d2                	xor    edx,edx
c0017499:	52                   	push   edx
c001749a:	50                   	push   eax
c001749b:	55                   	push   ebp
c001749c:	e8 75 62 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00174a1:	83 c4 0c             	add    esp,0xc
c00174a4:	6a 20                	push   0x20
c00174a6:	6a 00                	push   0x0
c00174a8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00174af:	51                   	push   ecx
c00174b0:	e8 c7 91 fe ff       	call   c000067c <memset>
c00174b5:	59                   	pop    ecx
c00174b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00174bd:	52                   	push   edx
c00174be:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00174c5:	51                   	push   ecx
c00174c6:	6a 00                	push   0x0
c00174c8:	6a 1f                	push   0x1f
c00174ca:	55                   	push   ebp
c00174cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174ce:	83 c4 1c             	add    esp,0x1c
c00174d1:	6a 09                	push   0x9
c00174d3:	68 cb 5c 02 c0       	push   0xc0025ccb
c00174d8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00174df:	51                   	push   ecx
c00174e0:	e8 93 90 fe ff       	call   c0000578 <memcmp>
c00174e5:	83 c4 10             	add    esp,0x10
c00174e8:	85 c0                	test   eax,eax
c00174ea:	75 21                	jne    c001750d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00174ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174f4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00174f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174ff:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017506:	89 d0                	mov    eax,edx
c0017508:	40                   	inc    eax
c0017509:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001750d:	50                   	push   eax
c001750e:	6a 09                	push   0x9
c0017510:	68 d5 5c 02 c0       	push   0xc0025cd5
c0017515:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001751c:	50                   	push   eax
c001751d:	e8 56 90 fe ff       	call   c0000578 <memcmp>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	85 c0                	test   eax,eax
c0017527:	75 21                	jne    c001754a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001752d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017531:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017535:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017539:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001753c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017543:	89 d0                	mov    eax,edx
c0017545:	40                   	inc    eax
c0017546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001754a:	50                   	push   eax
c001754b:	50                   	push   eax
c001754c:	68 a1 5c 02 c0       	push   0xc0025ca1
c0017551:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017558:	50                   	push   eax
c0017559:	e8 66 92 fe ff       	call   c00007c4 <strcmp>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	85 c0                	test   eax,eax
c0017563:	75 0f                	jne    c0017574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017565:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017568:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001756c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017570:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017574:	50                   	push   eax
c0017575:	50                   	push   eax
c0017576:	68 a9 5c 02 c0       	push   0xc0025ca9
c001757b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017582:	50                   	push   eax
c0017583:	e8 3c 92 fe ff       	call   c00007c4 <strcmp>
c0017588:	83 c4 10             	add    esp,0x10
c001758b:	85 c0                	test   eax,eax
c001758d:	75 0f                	jne    c001759e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001758f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001759a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001759e:	43                   	inc    ebx
c001759f:	e9 c6 fe ff ff       	jmp    c001746a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00175a4:	31 d2                	xor    edx,edx
c00175a6:	50                   	push   eax
c00175a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175ab:	52                   	push   edx
c00175ac:	50                   	push   eax
c00175ad:	55                   	push   ebp
c00175ae:	e8 63 61 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00175b3:	58                   	pop    eax
c00175b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175b8:	e8 4a 27 ff ff       	call   c0009d07 <malloc>
c00175bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175c4:	31 d2                	xor    edx,edx
c00175c6:	58                   	pop    eax
c00175c7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00175cb:	53                   	push   ebx
c00175cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00175d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175d4:	52                   	push   edx
c00175d5:	50                   	push   eax
c00175d6:	55                   	push   ebp
c00175d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175da:	83 c4 14             	add    esp,0x14
c00175dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175e1:	e8 21 27 ff ff       	call   c0009d07 <malloc>
c00175e6:	31 d2                	xor    edx,edx
c00175e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175ec:	83 c4 0c             	add    esp,0xc
c00175ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175f3:	52                   	push   edx
c00175f4:	50                   	push   eax
c00175f5:	55                   	push   ebp
c00175f6:	e8 1b 61 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c00175fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175fe:	31 d2                	xor    edx,edx
c0017600:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017603:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017607:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001760b:	52                   	push   edx
c001760c:	50                   	push   eax
c001760d:	55                   	push   ebp
c001760e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017611:	83 c4 20             	add    esp,0x20
c0017614:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001761c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017620:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017624:	0f 84 0b 03 00 00    	je     c0017935 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001762a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017631:	31 d2                	xor    edx,edx
c0017633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017637:	c1 e8 03             	shr    eax,0x3
c001763a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001763e:	51                   	push   ecx
c001763f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017643:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017647:	52                   	push   edx
c0017648:	50                   	push   eax
c0017649:	55                   	push   ebp
c001764a:	e8 c7 60 ff ff       	call   c000d716 <File::seek(unsigned long long)>
c001764f:	5b                   	pop    ebx
c0017650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017654:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001765b:	e8 a7 26 ff ff       	call   c0009d07 <malloc>
c0017660:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017663:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017667:	31 d2                	xor    edx,edx
c0017669:	5e                   	pop    esi
c001766a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001766e:	50                   	push   eax
c001766f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017677:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001767e:	52                   	push   edx
c001767f:	50                   	push   eax
c0017680:	55                   	push   ebp
c0017681:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017684:	83 c4 20             	add    esp,0x20
c0017687:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001768f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017693:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017697:	0f 8d 7c 02 00 00    	jge    c0017919 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001769d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00176a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176a5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00176aa:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00176ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00176b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00176b9:	89 d8                	mov    eax,ebx
c00176bb:	c1 e8 08             	shr    eax,0x8
c00176be:	89 c6                	mov    esi,eax
c00176c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176c4:	c1 e6 04             	shl    esi,0x4
c00176c7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00176cb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00176ce:	85 d2                	test   edx,edx
c00176d0:	0f 85 bf 00 00 00    	jne    c0017795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176dd:	03 06                	add    eax,DWORD PTR [esi]
c00176df:	50                   	push   eax
c00176e0:	e8 4b f8 ff ff       	call   c0016f30 <Thr::getAddressOfKernelSymbol(char const*)>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	89 c2                	mov    edx,eax
c00176ea:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00176ef:	85 c0                	test   eax,eax
c00176f1:	0f 85 9e 00 00 00    	jne    c0017795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176f7:	83 ec 0c             	sub    esp,0xc
c00176fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176fe:	03 06                	add    eax,DWORD PTR [esi]
c0017700:	50                   	push   eax
c0017701:	e8 02 12 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c0017706:	83 c4 10             	add    esp,0x10
c0017709:	89 c2                	mov    edx,eax
c001770b:	85 c0                	test   eax,eax
c001770d:	0f 85 82 00 00 00    	jne    c0017795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017713:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017717:	50                   	push   eax
c0017718:	50                   	push   eax
c0017719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001771d:	03 06                	add    eax,DWORD PTR [esi]
c001771f:	50                   	push   eax
c0017720:	68 df 5c 02 c0       	push   0xc0025cdf
c0017725:	e8 e9 58 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001772a:	58                   	pop    eax
c001772b:	5a                   	pop    edx
c001772c:	68 f9 5c 02 c0       	push   0xc0025cf9
c0017731:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017738:	50                   	push   eax
c0017739:	e8 fa 8f fe ff       	call   c0000738 <strcpy>
c001773e:	59                   	pop    ecx
c001773f:	58                   	pop    eax
c0017740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017744:	03 06                	add    eax,DWORD PTR [esi]
c0017746:	50                   	push   eax
c0017747:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001774e:	50                   	push   eax
c001774f:	e8 24 91 fe ff       	call   c0000878 <strcat>
c0017754:	58                   	pop    eax
c0017755:	5a                   	pop    edx
c0017756:	68 8f 5d 02 c0       	push   0xc0025d8f
c001775b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017762:	50                   	push   eax
c0017763:	e8 10 91 fe ff       	call   c0000878 <strcat>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017770:	0f 84 5d 01 00 00    	je     c00178d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017776:	83 ec 0c             	sub    esp,0xc
c0017779:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017780:	50                   	push   eax
c0017781:	e8 eb d5 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017786:	83 c4 10             	add    esp,0x10
c0017789:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001778d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017791:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017795:	80 fb 01             	cmp    bl,0x1
c0017798:	0f 85 88 00 00 00    	jne    c0017826 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001779e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00177a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00177a9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00177ad:	01 ce                	add    esi,ecx
c00177af:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00177b5:	0f 94 c0             	sete   al
c00177b8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00177be:	0f 94 c3             	sete   bl
c00177c1:	09 c3                	or     ebx,eax
c00177c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00177c5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00177ca:	74 41                	je     c001780d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00177cc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00177cf:	84 db                	test   bl,bl
c00177d1:	75 15                	jne    c00177e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00177d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177d7:	66 83 f8 0c          	cmp    ax,0xc
c00177db:	76 05                	jbe    c00177e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00177dd:	b8 0c 00 00 00       	mov    eax,0xc
c00177e2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00177e6:	76 37                	jbe    c001781f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177e8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00177ec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177f1:	0f 84 dc 00 00 00    	je     c00178d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00177f7:	83 ec 0c             	sub    esp,0xc
c00177fa:	68 10 5d 02 c0       	push   0xc0025d10
c00177ff:	e8 6d d5 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001780b:	eb 12                	jmp    c001781f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001780d:	01 c1                	add    ecx,eax
c001780f:	84 db                	test   bl,bl
c0017811:	75 0c                	jne    c001781f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017813:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017817:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001781b:	77 02                	ja     c001781f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001781d:	01 d1                	add    ecx,edx
c001781f:	89 0e                	mov    DWORD PTR [esi],ecx
c0017821:	e9 ea 00 00 00       	jmp    c0017910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017826:	80 fb 02             	cmp    bl,0x2
c0017829:	75 7c                	jne    c00178a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001782b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017832:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017836:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001783a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017840:	74 20                	je     c0017862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017842:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017848:	74 18                	je     c0017862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001784a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001784e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017853:	66 83 f8 0e          	cmp    ax,0xe
c0017857:	77 03                	ja     c001785c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017859:	8d 48 fc             	lea    ecx,[eax-0x4]
c001785c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017860:	76 1f                	jbe    c0017881 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017862:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017866:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001786b:	74 66                	je     c00178d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	68 2c 5d 02 c0       	push   0xc0025d2c
c0017875:	e8 f7 d4 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017881:	8b 06                	mov    eax,DWORD PTR [esi]
c0017883:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017888:	74 13                	je     c001789d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001788a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001788e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017895:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017899:	01 c8                	add    eax,ecx
c001789b:	eb 04                	jmp    c00178a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001789d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00178a1:	01 c2                	add    edx,eax
c00178a3:	89 16                	mov    DWORD PTR [esi],edx
c00178a5:	eb 69                	jmp    c0017910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178a7:	0f b6 db             	movzx  ebx,bl
c00178aa:	50                   	push   eax
c00178ab:	50                   	push   eax
c00178ac:	53                   	push   ebx
c00178ad:	68 48 5d 02 c0       	push   0xc0025d48
c00178b2:	e8 5c 57 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00178bf:	74 12                	je     c00178d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00178c1:	83 ec 0c             	sub    esp,0xc
c00178c4:	68 53 5d 02 c0       	push   0xc0025d53
c00178c9:	e8 a3 d4 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	eb 3d                	jmp    c0017910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178d3:	83 ec 0c             	sub    esp,0xc
c00178d6:	55                   	push   ebp
c00178d7:	e8 da 5d ff ff       	call   c000d6b6 <File::close()>
c00178dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178e5:	59                   	pop    ecx
c00178e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ea:	e8 28 24 ff ff       	call   c0009d17 <free>
c00178ef:	5b                   	pop    ebx
c00178f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178f4:	e8 1e 24 ff ff       	call   c0009d17 <free>
c00178f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178fc:	e8 16 24 ff ff       	call   c0009d17 <free>
c0017901:	5e                   	pop    esi
c0017902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017906:	e8 0c 24 ff ff       	call   c0009d17 <free>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	eb 21                	jmp    c0017931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017910:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017914:	e9 76 fd ff ff       	jmp    c001768f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017920:	e8 f2 23 ff ff       	call   c0009d17 <free>
c0017925:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	e9 eb fc ff ff       	jmp    c001761c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017931:	31 c0                	xor    eax,eax
c0017933:	eb 33                	jmp    c0017968 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017935:	83 ec 0c             	sub    esp,0xc
c0017938:	55                   	push   ebp
c0017939:	e8 78 5d ff ff       	call   c000d6b6 <File::close()>
c001793e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017941:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017944:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017947:	58                   	pop    eax
c0017948:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001794c:	e8 c6 23 ff ff       	call   c0009d17 <free>
c0017951:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017954:	e8 be 23 ff ff       	call   c0009d17 <free>
c0017959:	5a                   	pop    edx
c001795a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001795e:	e8 b4 23 ff ff       	call   c0009d17 <free>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	b0 01                	mov    al,0x1
c0017968:	81 c4 5c 03 00 00    	add    esp,0x35c
c001796e:	5b                   	pop    ebx
c001796f:	5e                   	pop    esi
c0017970:	5f                   	pop    edi
c0017971:	5d                   	pop    ebp
c0017972:	c3                   	ret    

c0017973 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017973:	56                   	push   esi
c0017974:	31 d2                	xor    edx,edx
c0017976:	53                   	push   ebx
c0017977:	8b 1d 00 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a00
c001797d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017981:	39 d3                	cmp    ebx,edx
c0017983:	7e 1b                	jle    c00179a0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017985:	8b 04 95 20 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73e0]
c001798c:	39 c8                	cmp    eax,ecx
c001798e:	77 0d                	ja     c001799d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017990:	8b 34 95 20 8a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd75e0]
c0017997:	01 c6                	add    esi,eax
c0017999:	39 ce                	cmp    esi,ecx
c001799b:	77 05                	ja     c00179a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001799d:	42                   	inc    edx
c001799e:	eb e1                	jmp    c0017981 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00179a0:	31 c0                	xor    eax,eax
c00179a2:	5b                   	pop    ebx
c00179a3:	5e                   	pop    esi
c00179a4:	c3                   	ret    

c00179a5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00179a5:	53                   	push   ebx
c00179a6:	31 c0                	xor    eax,eax
c00179a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00179ac:	8b 1d 00 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a00
c00179b2:	39 c3                	cmp    ebx,eax
c00179b4:	7e 22                	jle    c00179d8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00179b6:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c00179bd:	39 ca                	cmp    edx,ecx
c00179bf:	77 14                	ja     c00179d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00179c1:	03 14 85 20 8a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd75e0]
c00179c8:	39 ca                	cmp    edx,ecx
c00179ca:	76 09                	jbe    c00179d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00179cc:	8b 04 85 20 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71e0]
c00179d3:	eb 05                	jmp    c00179da <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00179d5:	40                   	inc    eax
c00179d6:	eb da                	jmp    c00179b2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00179d8:	31 c0                	xor    eax,eax
c00179da:	5b                   	pop    ebx
c00179db:	c3                   	ret    

c00179dc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00179dc:	53                   	push   ebx
c00179dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00179e1:	53                   	push   ebx
c00179e2:	e8 8c ff ff ff       	call   c0017973 <Thr::getDriverBaseFromAddress(unsigned long)>
c00179e7:	5a                   	pop    edx
c00179e8:	31 d2                	xor    edx,edx
c00179ea:	85 c0                	test   eax,eax
c00179ec:	74 04                	je     c00179f2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00179ee:	89 da                	mov    edx,ebx
c00179f0:	29 c2                	sub    edx,eax
c00179f2:	89 d0                	mov    eax,edx
c00179f4:	5b                   	pop    ebx
c00179f5:	c3                   	ret    

c00179f6 <Thr::loadDLL(char const*, bool)>:
c00179f6:	55                   	push   ebp
c00179f7:	57                   	push   edi
c00179f8:	56                   	push   esi
c00179f9:	53                   	push   ebx
c00179fa:	81 ec 34 01 00 00    	sub    esp,0x134
c0017a00:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017a07:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017a0e:	56                   	push   esi
c0017a0f:	68 6b 5d 02 c0       	push   0xc0025d6b
c0017a14:	e8 fa 55 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0017a19:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017a20:	e8 e2 22 ff ff       	call   c0009d07 <malloc>
c0017a25:	83 c4 0c             	add    esp,0xc
c0017a28:	89 c3                	mov    ebx,eax
c0017a2a:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0017a30:	56                   	push   esi
c0017a31:	50                   	push   eax
c0017a32:	e8 47 5b ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	85 db                	test   ebx,ebx
c0017a3c:	75 3c                	jne    c0017a7a <Thr::loadDLL(char const*, bool)+0x84>
c0017a3e:	89 f8                	mov    eax,edi
c0017a40:	84 c0                	test   al,al
c0017a42:	0f 84 d2 01 00 00    	je     c0017c1a <Thr::loadDLL(char const*, bool)+0x224>
c0017a48:	55                   	push   ebp
c0017a49:	55                   	push   ebp
c0017a4a:	68 7c 5d 02 c0       	push   0xc0025d7c
c0017a4f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017a53:	55                   	push   ebp
c0017a54:	e8 df 8c fe ff       	call   c0000738 <strcpy>
c0017a59:	58                   	pop    eax
c0017a5a:	5a                   	pop    edx
c0017a5b:	56                   	push   esi
c0017a5c:	55                   	push   ebp
c0017a5d:	e8 16 8e fe ff       	call   c0000878 <strcat>
c0017a62:	59                   	pop    ecx
c0017a63:	58                   	pop    eax
c0017a64:	68 8f 5d 02 c0       	push   0xc0025d8f
c0017a69:	55                   	push   ebp
c0017a6a:	e8 09 8e fe ff       	call   c0000878 <strcat>
c0017a6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a72:	e8 fa d2 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	51                   	push   ecx
c0017a7b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017a7f:	50                   	push   eax
c0017a80:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017a84:	50                   	push   eax
c0017a85:	53                   	push   ebx
c0017a86:	e8 79 5e ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	85 db                	test   ebx,ebx
c0017a90:	74 0c                	je     c0017a9e <Thr::loadDLL(char const*, bool)+0xa8>
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a97:	53                   	push   ebx
c0017a98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017aa3:	75 0a                	jne    c0017aaf <Thr::loadDLL(char const*, bool)+0xb9>
c0017aa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017aa9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017aad:	75 3c                	jne    c0017aeb <Thr::loadDLL(char const*, bool)+0xf5>
c0017aaf:	89 f8                	mov    eax,edi
c0017ab1:	84 c0                	test   al,al
c0017ab3:	0f 84 49 01 00 00    	je     c0017c02 <Thr::loadDLL(char const*, bool)+0x20c>
c0017ab9:	51                   	push   ecx
c0017aba:	51                   	push   ecx
c0017abb:	68 7c 5d 02 c0       	push   0xc0025d7c
c0017ac0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017ac4:	53                   	push   ebx
c0017ac5:	e8 6e 8c fe ff       	call   c0000738 <strcpy>
c0017aca:	5d                   	pop    ebp
c0017acb:	58                   	pop    eax
c0017acc:	56                   	push   esi
c0017acd:	53                   	push   ebx
c0017ace:	e8 a5 8d fe ff       	call   c0000878 <strcat>
c0017ad3:	58                   	pop    eax
c0017ad4:	5a                   	pop    edx
c0017ad5:	68 8f 5d 02 c0       	push   0xc0025d8f
c0017ada:	53                   	push   ebx
c0017adb:	e8 98 8d fe ff       	call   c0000878 <strcat>
c0017ae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ae3:	e8 89 d2 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017ae8:	83 c4 10             	add    esp,0x10
c0017aeb:	52                   	push   edx
c0017aec:	6a 03                	push   0x3
c0017aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017af6:	05 ff 0f 00 00       	add    eax,0xfff
c0017afb:	83 d2 00             	adc    edx,0x0
c0017afe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b02:	50                   	push   eax
c0017b03:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0017b09:	e8 18 49 ff ff       	call   c000c426 <VAS::allocatePages(int, int)>
c0017b0e:	59                   	pop    ecx
c0017b0f:	89 c3                	mov    ebx,eax
c0017b11:	5d                   	pop    ebp
c0017b12:	50                   	push   eax
c0017b13:	68 26 3e 02 c0       	push   0xc0023e26
c0017b18:	e8 f6 54 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0017b1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b20:	e8 73 8b fe ff       	call   c0000698 <strlen>
c0017b25:	8b 2d 00 8a 02 c0    	mov    ebp,DWORD PTR ds:0xc0028a00
c0017b2b:	40                   	inc    eax
c0017b2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b2f:	e8 d3 21 ff ff       	call   c0009d07 <malloc>
c0017b34:	89 04 ad 20 8e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd71e0],eax
c0017b3b:	58                   	pop    eax
c0017b3c:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0017b41:	5a                   	pop    edx
c0017b42:	56                   	push   esi
c0017b43:	ff 34 85 20 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd71e0]
c0017b4a:	e8 e9 8b fe ff       	call   c0000738 <strcpy>
c0017b4f:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0017b54:	8d 50 01             	lea    edx,[eax+0x1]
c0017b57:	89 1c 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],ebx
c0017b5e:	89 15 00 8a 02 c0    	mov    DWORD PTR ds:0xc0028a00,edx
c0017b64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b68:	83 c4 0c             	add    esp,0xc
c0017b6b:	89 14 85 20 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75e0],edx
c0017b72:	6a 01                	push   0x1
c0017b74:	53                   	push   ebx
c0017b75:	56                   	push   esi
c0017b76:	e8 c2 f6 ff ff       	call   c001723d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017b7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017b87:	0f 85 89 00 00 00    	jne    c0017c16 <Thr::loadDLL(char const*, bool)+0x220>
c0017b8d:	89 f8                	mov    eax,edi
c0017b8f:	84 c0                	test   al,al
c0017b91:	74 73                	je     c0017c06 <Thr::loadDLL(char const*, bool)+0x210>
c0017b93:	83 ec 0c             	sub    esp,0xc
c0017b96:	68 91 5d 02 c0       	push   0xc0025d91
c0017b9b:	e8 d1 d1 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	eb 61                	jmp    c0017c06 <Thr::loadDLL(char const*, bool)+0x210>
c0017ba5:	50                   	push   eax
c0017ba6:	50                   	push   eax
c0017ba7:	89 e8                	mov    eax,ebp
c0017ba9:	c1 e0 0c             	shl    eax,0xc
c0017bac:	01 d8                	add    eax,ebx
c0017bae:	50                   	push   eax
c0017baf:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0017bb5:	e8 d4 43 ff ff       	call   c000bf8e <VAS::getPageTableEntry(unsigned long)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bbf:	a8 60                	test   al,0x60
c0017bc1:	75 11                	jne    c0017bd4 <Thr::loadDLL(char const*, bool)+0x1de>
c0017bc3:	83 ec 0c             	sub    esp,0xc
c0017bc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017bcb:	50                   	push   eax
c0017bcc:	e8 6a 27 ff ff       	call   c000a33b <Phys::freePage(unsigned long)>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	45                   	inc    ebp
c0017bd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bdd:	05 ff 0f 00 00       	add    eax,0xfff
c0017be2:	bf 00 00 00 00       	mov    edi,0x0
c0017be7:	83 d2 00             	adc    edx,0x0
c0017bea:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017bee:	c1 ea 0c             	shr    edx,0xc
c0017bf1:	39 c5                	cmp    ebp,eax
c0017bf3:	89 d1                	mov    ecx,edx
c0017bf5:	89 f8                	mov    eax,edi
c0017bf7:	19 c8                	sbb    eax,ecx
c0017bf9:	72 aa                	jb     c0017ba5 <Thr::loadDLL(char const*, bool)+0x1af>
c0017bfb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017c00:	75 18                	jne    c0017c1a <Thr::loadDLL(char const*, bool)+0x224>
c0017c02:	31 db                	xor    ebx,ebx
c0017c04:	eb 14                	jmp    c0017c1a <Thr::loadDLL(char const*, bool)+0x224>
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	68 b0 5d 02 c0       	push   0xc0025db0
c0017c0e:	e8 5e d1 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	31 ed                	xor    ebp,ebp
c0017c18:	eb bb                	jmp    c0017bd5 <Thr::loadDLL(char const*, bool)+0x1df>
c0017c1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017c20:	89 d8                	mov    eax,ebx
c0017c22:	5b                   	pop    ebx
c0017c23:	5e                   	pop    esi
c0017c24:	5f                   	pop    edi
c0017c25:	5d                   	pop    ebp
c0017c26:	c3                   	ret    

c0017c27 <Thr::executeDLL(unsigned long, void*)>:
c0017c27:	56                   	push   esi
c0017c28:	53                   	push   ebx
c0017c29:	52                   	push   edx
c0017c2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017c32:	85 db                	test   ebx,ebx
c0017c34:	75 10                	jne    c0017c46 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017c36:	83 ec 0c             	sub    esp,0xc
c0017c39:	68 cc 5d 02 c0       	push   0xc0025dcc
c0017c3e:	e8 2e d1 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	50                   	push   eax
c0017c47:	50                   	push   eax
c0017c48:	53                   	push   ebx
c0017c49:	68 f6 5d 02 c0       	push   0xc0025df6
c0017c4e:	e8 c0 53 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0017c53:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017c57:	89 d8                	mov    eax,ebx
c0017c59:	83 c4 14             	add    esp,0x14
c0017c5c:	5b                   	pop    ebx
c0017c5d:	5e                   	pop    esi
c0017c5e:	ff e0                	jmp    eax

c0017c60 <userModeEntryPoint(void*)>:
c0017c60:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0017c65:	48                   	dec    eax
c0017c66:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0017c6b:	75 03                	jne    c0017c70 <userModeEntryPoint(void*)+0x10>
c0017c6d:	fb                   	sti    
c0017c6e:	66 90                	xchg   ax,ax
c0017c70:	fb                   	sti    
c0017c71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c79:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017c7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c83:	e9 d7 85 fe ff       	jmp    c000025f <goToUsermode>

c0017c88 <changeTSS>:
c0017c88:	83 ec 14             	sub    esp,0x14
c0017c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017c93:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017c98:	c1 e2 15             	shl    edx,0x15
c0017c9b:	29 d0                	sub    eax,edx
c0017c9d:	50                   	push   eax
c0017c9e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0017ca3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ca9:	05 7c 11 00 00       	add    eax,0x117c
c0017cae:	50                   	push   eax
c0017caf:	e8 58 39 ff ff       	call   c000b60c <TSS::setESP(unsigned long)>
c0017cb4:	83 c4 1c             	add    esp,0x1c
c0017cb7:	c3                   	ret    

c0017cb8 <switchToThread(ThreadControlBlock*)>:
c0017cb8:	57                   	push   edi
c0017cb9:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0017cbe:	56                   	push   esi
c0017cbf:	85 c0                	test   eax,eax
c0017cc1:	53                   	push   ebx
c0017cc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017cc6:	0f 85 a4 00 00 00    	jne    c0017d70 <switchToThread(ThreadControlBlock*)+0xb8>
c0017ccc:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017ccf:	3c ff                	cmp    al,0xff
c0017cd1:	0f 84 91 00 00 00    	je     c0017d68 <switchToThread(ThreadControlBlock*)+0xb0>
c0017cd7:	0f b6 d0             	movzx  edx,al
c0017cda:	b8 00 04 00 00       	mov    eax,0x400
c0017cdf:	29 d0                	sub    eax,edx
c0017ce1:	d1 f8                	sar    eax,1
c0017ce3:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017ce6:	66 90                	xchg   ax,ax
c0017ce8:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017ceb:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0017cf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cf6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017cfd:	74 4d                	je     c0017d4c <switchToThread(ThreadControlBlock*)+0x94>
c0017cff:	0f 31                	rdtsc  
c0017d01:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c0017d06:	89 c6                	mov    esi,eax
c0017d08:	89 d7                	mov    edi,edx
c0017d0a:	2b 35 f8 91 02 c0    	sub    esi,DWORD PTR ds:0xc00291f8
c0017d10:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0017d16:	1b 3d fc 91 02 c0    	sbb    edi,DWORD PTR ds:0xc00291fc
c0017d1c:	89 35 00 92 02 c0    	mov    DWORD PTR ds:0xc0029200,esi
c0017d22:	a3 f8 91 02 c0       	mov    ds:0xc00291f8,eax
c0017d27:	89 3d 04 92 02 c0    	mov    DWORD PTR ds:0xc0029204,edi
c0017d2d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017d33:	89 15 fc 91 02 c0    	mov    DWORD PTR ds:0xc00291fc,edx
c0017d39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d3c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017d3f:	01 c6                	add    esi,eax
c0017d41:	11 d7                	adc    edi,edx
c0017d43:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017d46:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017d49:	8d 76 00             	lea    esi,[esi+0x0]
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	51                   	push   ecx
c0017d50:	e8 42 85 fe ff       	call   c0000297 <switchToThreadASM>
c0017d55:	0f 20 c0             	mov    eax,cr0
c0017d58:	83 c8 08             	or     eax,0x8
c0017d5b:	0f 22 c0             	mov    cr0,eax
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	5b                   	pop    ebx
c0017d62:	5e                   	pop    esi
c0017d63:	5f                   	pop    edi
c0017d64:	c3                   	ret    
c0017d65:	8d 76 00             	lea    esi,[esi+0x0]
c0017d68:	31 c0                	xor    eax,eax
c0017d6a:	e9 79 ff ff ff       	jmp    c0017ce8 <switchToThread(ThreadControlBlock*)+0x30>
c0017d6f:	90                   	nop
c0017d70:	5b                   	pop    ebx
c0017d71:	c7 05 c0 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x1
c0017d7b:	5e                   	pop    esi
c0017d7c:	5f                   	pop    edi
c0017d7d:	c3                   	ret    
c0017d7e:	66 90                	xchg   ax,ax

c0017d80 <Process::addArgs(char**)>:
c0017d80:	57                   	push   edi
c0017d81:	56                   	push   esi
c0017d82:	53                   	push   ebx
c0017d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d8b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017d95:	85 ff                	test   edi,edi
c0017d97:	74 43                	je     c0017ddc <Process::addArgs(char**)+0x5c>
c0017d99:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d9b:	85 c0                	test   eax,eax
c0017d9d:	74 3d                	je     c0017ddc <Process::addArgs(char**)+0x5c>
c0017d9f:	31 db                	xor    ebx,ebx
c0017da1:	8d 76 00             	lea    esi,[esi+0x0]
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	50                   	push   eax
c0017da8:	e8 eb 88 fe ff       	call   c0000698 <strlen>
c0017dad:	40                   	inc    eax
c0017dae:	89 04 24             	mov    DWORD PTR [esp],eax
c0017db1:	e8 51 1f ff ff       	call   c0009d07 <malloc>
c0017db6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017dbd:	5a                   	pop    edx
c0017dbe:	59                   	pop    ecx
c0017dbf:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017dc2:	43                   	inc    ebx
c0017dc3:	50                   	push   eax
c0017dc4:	e8 6f 89 fe ff       	call   c0000738 <strcpy>
c0017dc9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017dd5:	85 c0                	test   eax,eax
c0017dd7:	75 cb                	jne    c0017da4 <Process::addArgs(char**)+0x24>
c0017dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ddc:	5b                   	pop    ebx
c0017ddd:	5e                   	pop    esi
c0017dde:	5f                   	pop    edi
c0017ddf:	c3                   	ret    

c0017de0 <Process::Process(char const*, Process*, char**)>:
c0017de0:	56                   	push   esi
c0017de1:	53                   	push   ebx
c0017de2:	83 ec 14             	sub    esp,0x14
c0017de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017de9:	05 0c 02 00 00       	add    eax,0x20c
c0017dee:	bb 07 00 00 00       	mov    ebx,0x7
c0017df3:	89 c6                	mov    esi,eax
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	85 db                	test   ebx,ebx
c0017dfa:	78 14                	js     c0017e10 <Process::Process(char const*, Process*, char**)+0x30>
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	56                   	push   esi
c0017e00:	e8 c7 af 00 00       	call   c0022dcc <ThreadControlBlock::ThreadControlBlock()>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	83 c6 5f             	add    esi,0x5f
c0017e0b:	4b                   	dec    ebx
c0017e0c:	eb ea                	jmp    c0017df8 <Process::Process(char const*, Process*, char**)+0x18>
c0017e0e:	66 90                	xchg   ax,ax
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017e1b:	83 ec 0c             	sub    esp,0xc
c0017e1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e22:	e8 d3 cd ff ff       	call   c0014bfa <Krnl::newProcessEnv(Process*)>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	89 c2                	mov    edx,eax
c0017e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e30:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017e43:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c0017e48:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4b:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c0017e51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e55:	89 02                	mov    DWORD PTR [edx],eax
c0017e57:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e66:	e8 9c 1e ff ff       	call   c0009d07 <malloc>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	89 c3                	mov    ebx,eax
c0017e70:	83 ec 08             	sub    esp,0x8
c0017e73:	6a 00                	push   0x0
c0017e75:	53                   	push   ebx
c0017e76:	e8 53 49 ff ff       	call   c000c7ce <VAS::VAS(bool)>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e82:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e9e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017eae:	85 c0                	test   eax,eax
c0017eb0:	74 42                	je     c0017ef4 <Process::Process(char const*, Process*, char**)+0x114>
c0017eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ebc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ed6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee0:	05 0c 01 00 00       	add    eax,0x10c
c0017ee5:	83 ec 08             	sub    esp,0x8
c0017ee8:	52                   	push   edx
c0017ee9:	50                   	push   eax
c0017eea:	e8 49 88 fe ff       	call   c0000738 <strcpy>
c0017eef:	83 c4 10             	add    esp,0x10
c0017ef2:	eb 64                	jmp    c0017f58 <Process::Process(char const*, Process*, char**)+0x178>
c0017ef4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0017efc:	83 ec 0c             	sub    esp,0xc
c0017eff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f03:	e8 ff 1d ff ff       	call   c0009d07 <malloc>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	89 c3                	mov    ebx,eax
c0017f0d:	83 ec 08             	sub    esp,0x8
c0017f10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f14:	53                   	push   ebx
c0017f15:	e8 04 34 ff ff       	call   c000b31e <VgaText::VgaText(char const*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f31:	83 ec 0c             	sub    esp,0xc
c0017f34:	50                   	push   eax
c0017f35:	e8 ad 2b ff ff       	call   c000aae7 <addToTerminalCycle(VgaText*)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	05 0c 01 00 00       	add    eax,0x10c
c0017f46:	83 ec 08             	sub    esp,0x8
c0017f49:	68 15 5e 02 c0       	push   0xc0025e15
c0017f4e:	50                   	push   eax
c0017f4f:	e8 e4 87 fe ff       	call   c0000738 <strcpy>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	90                   	nop
c0017f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5c:	83 c0 0c             	add    eax,0xc
c0017f5f:	83 ec 08             	sub    esp,0x8
c0017f62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f66:	50                   	push   eax
c0017f67:	e8 cc 87 fe ff       	call   c0000738 <strcpy>
c0017f6c:	83 c4 10             	add    esp,0x10
c0017f6f:	83 ec 08             	sub    esp,0x8
c0017f72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f7a:	e8 01 fe ff ff       	call   c0017d80 <Process::addArgs(char**)>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f8d:	e8 75 ed ff ff       	call   c0016d07 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017f92:	83 c4 10             	add    esp,0x10
c0017f95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f9d:	83 f0 01             	xor    eax,0x1
c0017fa0:	88 c2                	mov    dl,al
c0017fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017fac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017fb1:	83 ec 08             	sub    esp,0x8
c0017fb4:	50                   	push   eax
c0017fb5:	68 6c 5e 02 c0       	push   0xc0025e6c
c0017fba:	e8 54 50 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0017fbf:	83 c4 10             	add    esp,0x10
c0017fc2:	90                   	nop
c0017fc3:	83 c4 14             	add    esp,0x14
c0017fc6:	5b                   	pop    ebx
c0017fc7:	5e                   	pop    esi
c0017fc8:	c3                   	ret    
c0017fc9:	90                   	nop
c0017fca:	66 90                	xchg   ax,ax

c0017fcc <Process::Process(bool, char const*, Process*, char**)>:
c0017fcc:	56                   	push   esi
c0017fcd:	53                   	push   ebx
c0017fce:	83 ec 24             	sub    esp,0x24
c0017fd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fdd:	05 0c 02 00 00       	add    eax,0x20c
c0017fe2:	bb 07 00 00 00       	mov    ebx,0x7
c0017fe7:	89 c6                	mov    esi,eax
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	85 db                	test   ebx,ebx
c0017fee:	78 14                	js     c0018004 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	56                   	push   esi
c0017ff4:	e8 d3 ad 00 00       	call   c0022dcc <ThreadControlBlock::ThreadControlBlock()>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	83 c6 5f             	add    esi,0x5f
c0017fff:	4b                   	dec    ebx
c0018000:	eb ea                	jmp    c0017fec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018002:	66 90                	xchg   ax,ax
c0018004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018008:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001800f:	83 ec 0c             	sub    esp,0xc
c0018012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018016:	e8 df cb ff ff       	call   c0014bfa <Krnl::newProcessEnv(Process*)>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	89 c2                	mov    edx,eax
c0018020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018024:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001802a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001802e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018037:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001803c:	8d 50 01             	lea    edx,[eax+0x1]
c001803f:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c0018045:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018049:	89 02                	mov    DWORD PTR [edx],eax
c001804b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018053:	83 ec 0c             	sub    esp,0xc
c0018056:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001805a:	e8 a8 1c ff ff       	call   c0009d07 <malloc>
c001805f:	83 c4 10             	add    esp,0x10
c0018062:	89 c3                	mov    ebx,eax
c0018064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018069:	83 ec 08             	sub    esp,0x8
c001806c:	50                   	push   eax
c001806d:	53                   	push   ebx
c001806e:	e8 5b 47 ff ff       	call   c000c7ce <VAS::VAS(bool)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001807a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018084:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001808e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018096:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001809c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180a6:	85 c0                	test   eax,eax
c00180a8:	74 42                	je     c00180ec <Process::Process(bool, char const*, Process*, char**)+0x120>
c00180aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00180ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00180c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00180d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180d8:	05 0c 01 00 00       	add    eax,0x10c
c00180dd:	83 ec 08             	sub    esp,0x8
c00180e0:	52                   	push   edx
c00180e1:	50                   	push   eax
c00180e2:	e8 51 86 fe ff       	call   c0000738 <strcpy>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	eb 64                	jmp    c0018150 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00180ec:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180fb:	e8 07 1c ff ff       	call   c0009d07 <malloc>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	89 c3                	mov    ebx,eax
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001810c:	53                   	push   ebx
c001810d:	e8 0c 32 ff ff       	call   c000b31e <VgaText::VgaText(char const*)>
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018119:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001811f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018123:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	50                   	push   eax
c001812d:	e8 b5 29 ff ff       	call   c000aae7 <addToTerminalCycle(VgaText*)>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018139:	05 0c 01 00 00       	add    eax,0x10c
c001813e:	83 ec 08             	sub    esp,0x8
c0018141:	68 15 5e 02 c0       	push   0xc0025e15
c0018146:	50                   	push   eax
c0018147:	e8 ec 85 fe ff       	call   c0000738 <strcpy>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	90                   	nop
c0018150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018154:	83 c0 0c             	add    eax,0xc
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001815e:	50                   	push   eax
c001815f:	e8 d4 85 fe ff       	call   c0000738 <strcpy>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 ec 08             	sub    esp,0x8
c001816a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001816e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018172:	e8 09 fc ff ff       	call   c0017d80 <Process::addArgs(char**)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	90                   	nop
c001817b:	83 c4 24             	add    esp,0x24
c001817e:	5b                   	pop    ebx
c001817f:	5e                   	pop    esi
c0018180:	c3                   	ret    
c0018181:	8d 76 00             	lea    esi,[esi+0x0]

c0018184 <taskStartupFunction>:
c0018184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018189:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001818c:	c3                   	ret    
c001818d:	90                   	nop
c001818e:	66 90                	xchg   ax,ax

c0018190 <Semaphore::Semaphore(int)>:
c0018190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018194:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018198:	89 10                	mov    DWORD PTR [eax],edx
c001819a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001819e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181bb:	90                   	nop
c00181bc:	c3                   	ret    
c00181bd:	90                   	nop
c00181be:	66 90                	xchg   ax,ax

c00181c0 <Mutex::Mutex()>:
c00181c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c4:	6a 01                	push   0x1
c00181c6:	50                   	push   eax
c00181c7:	e8 c4 ff ff ff       	call   c0018190 <Semaphore::Semaphore(int)>
c00181cc:	83 c4 08             	add    esp,0x8
c00181cf:	90                   	nop
c00181d0:	c3                   	ret    
c00181d1:	90                   	nop
c00181d2:	66 90                	xchg   ax,ax

c00181d4 <Process::createThread(void (*)(void*), void*, int)>:
c00181d4:	57                   	push   edi
c00181d5:	31 c9                	xor    ecx,ecx
c00181d7:	56                   	push   esi
c00181d8:	53                   	push   ebx
c00181d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00181dd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00181e4:	89 f2                	mov    edx,esi
c00181e6:	66 90                	xchg   ax,ax
c00181e8:	0f b7 c2             	movzx  eax,dx
c00181eb:	83 e2 01             	and    edx,0x1
c00181ee:	74 14                	je     c0018204 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00181f0:	d1 f8                	sar    eax,1
c00181f2:	41                   	inc    ecx
c00181f3:	89 c2                	mov    edx,eax
c00181f5:	83 f9 10             	cmp    ecx,0x10
c00181f8:	75 ee                	jne    c00181e8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00181fa:	31 db                	xor    ebx,ebx
c00181fc:	89 d8                	mov    eax,ebx
c00181fe:	5b                   	pop    ebx
c00181ff:	5e                   	pop    esi
c0018200:	5f                   	pop    edi
c0018201:	c3                   	ret    
c0018202:	66 90                	xchg   ax,ax
c0018204:	b8 01 00 00 00       	mov    eax,0x1
c0018209:	d3 e0                	shl    eax,cl
c001820b:	09 c6                	or     esi,eax
c001820d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018210:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018217:	01 c0                	add    eax,eax
c0018219:	01 c8                	add    eax,ecx
c001821b:	8d 04 80             	lea    eax,[eax+eax*4]
c001821e:	01 d8                	add    eax,ebx
c0018220:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018227:	75 0b                	jne    c0018234 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018229:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018233:	90                   	nop
c0018234:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018240:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018243:	01 c0                	add    eax,eax
c0018245:	01 c8                	add    eax,ecx
c0018247:	8d 3c 80             	lea    edi,[eax+eax*4]
c001824a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001824d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018253:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018259:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001825d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018263:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018269:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018270:	89 ca                	mov    edx,ecx
c0018272:	f7 da                	neg    edx
c0018274:	c1 e2 15             	shl    edx,0x15
c0018277:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001827d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018283:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018287:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018291:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001829b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00182a1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00182ab:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00182b5:	53                   	push   ebx
c00182b6:	68 e4 91 02 c0       	push   0xc00291e4
c00182bb:	e8 ac a8 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	89 d8                	mov    eax,ebx
c00182c5:	5b                   	pop    ebx
c00182c6:	5e                   	pop    esi
c00182c7:	5f                   	pop    edi
c00182c8:	c3                   	ret    
c00182c9:	90                   	nop
c00182ca:	66 90                	xchg   ax,ax

c00182cc <Process::createUserThread()>:
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	68 80 00 00 00       	push   0x80
c00182d4:	6a 00                	push   0x0
c00182d6:	68 60 7c 01 c0       	push   0xc0017c60
c00182db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182df:	e8 f0 fe ff ff       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c00182e4:	83 c4 1c             	add    esp,0x1c
c00182e7:	c3                   	ret    

c00182e8 <setupMultitasking(void (*)())>:
c00182e8:	56                   	push   esi
c00182e9:	53                   	push   ebx
c00182ea:	51                   	push   ecx
c00182eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00182ef:	eb 13                	jmp    c0018304 <setupMultitasking(void (*)())+0x1c>
c00182f1:	8d 76 00             	lea    esi,[esi+0x0]
c00182f4:	83 ec 0c             	sub    esp,0xc
c00182f7:	68 e4 91 02 c0       	push   0xc00291e4
c00182fc:	e8 b3 a7 00 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018301:	83 c4 10             	add    esp,0x10
c0018304:	83 ec 0c             	sub    esp,0xc
c0018307:	68 e4 91 02 c0       	push   0xc00291e4
c001830c:	e8 7f a7 00 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	84 c0                	test   al,al
c0018316:	74 dc                	je     c00182f4 <setupMultitasking(void (*)())+0xc>
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	68 1f 07 00 00       	push   0x71f
c0018320:	e8 e2 19 ff ff       	call   c0009d07 <malloc>
c0018325:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001832c:	89 c3                	mov    ebx,eax
c001832e:	6a 00                	push   0x0
c0018330:	68 19 5e 02 c0       	push   0xc0025e19
c0018335:	6a 01                	push   0x1
c0018337:	50                   	push   eax
c0018338:	e8 8f fc ff ff       	call   c0017fcc <Process::Process(bool, char const*, Process*, char**)>
c001833d:	83 c4 14             	add    esp,0x14
c0018340:	89 1d f0 91 02 c0    	mov    DWORD PTR ds:0xc00291f0,ebx
c0018346:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001834c:	e8 a4 2a ff ff       	call   c000adf5 <setActiveTerminal(VgaText*)>
c0018351:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018359:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018363:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018369:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001836c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018376:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001837c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018382:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001838c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018396:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00183a0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00183a6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00183b0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00183b6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00183c0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00183c6:	58                   	pop    eax
c00183c7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00183cd:	5a                   	pop    edx
c00183ce:	68 15 5e 02 c0       	push   0xc0025e15
c00183d3:	50                   	push   eax
c00183d4:	e8 5f 83 fe ff       	call   c0000738 <strcpy>
c00183d9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00183e0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00183e4:	83 c4 14             	add    esp,0x14
c00183e7:	5b                   	pop    ebx
c00183e8:	5e                   	pop    esi
c00183e9:	e9 9b 7e fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00183ee:	66 90                	xchg   ax,ax

c00183f0 <schedule()>:
c00183f0:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00183f5:	85 c0                	test   eax,eax
c00183f7:	74 0b                	je     c0018404 <schedule()+0x14>
c00183f9:	c7 05 c0 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x1
c0018403:	c3                   	ret    
c0018404:	53                   	push   ebx
c0018405:	83 ec 14             	sub    esp,0x14
c0018408:	68 e4 91 02 c0       	push   0xc00291e4
c001840d:	e8 7e a6 00 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	84 c0                	test   al,al
c0018417:	75 3b                	jne    c0018454 <schedule()+0x64>
c0018419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001841e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018421:	4a                   	dec    edx
c0018422:	74 38                	je     c001845c <schedule()+0x6c>
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	68 e4 91 02 c0       	push   0xc00291e4
c001842c:	e8 7b a6 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018431:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018438:	89 c3                	mov    ebx,eax
c001843a:	e8 75 a6 00 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001843f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018449:	e8 6a f8 ff ff       	call   c0017cb8 <switchToThread(ThreadControlBlock*)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	8d 76 00             	lea    esi,[esi+0x0]
c0018454:	83 c4 08             	add    esp,0x8
c0018457:	5b                   	pop    ebx
c0018458:	c3                   	ret    
c0018459:	8d 76 00             	lea    esi,[esi+0x0]
c001845c:	83 ec 08             	sub    esp,0x8
c001845f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018466:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001846c:	68 e4 91 02 c0       	push   0xc00291e4
c0018471:	e8 f6 a6 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	eb a9                	jmp    c0018424 <schedule()+0x34>
c001847b:	90                   	nop

c001847c <Semaphore::tryAcquire()>:
c001847c:	53                   	push   ebx
c001847d:	83 ec 08             	sub    esp,0x8
c0018480:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018484:	fa                   	cli    
c0018485:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001848a:	8d 50 01             	lea    edx,[eax+0x1]
c001848d:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c0018493:	8b 15 c4 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291c4
c0018499:	8d 5a 01             	lea    ebx,[edx+0x1]
c001849c:	89 1d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ebx
c00184a2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00184a5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00184a7:	7c 33                	jl     c00184dc <Semaphore::tryAcquire()+0x60>
c00184a9:	89 15 c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,edx
c00184af:	85 d2                	test   edx,edx
c00184b1:	75 0d                	jne    c00184c0 <Semaphore::tryAcquire()+0x44>
c00184b3:	8b 15 c0 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291c0
c00184b9:	85 d2                	test   edx,edx
c00184bb:	75 6b                	jne    c0018528 <Semaphore::tryAcquire()+0xac>
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00184c5:	85 c0                	test   eax,eax
c00184c7:	74 0b                	je     c00184d4 <Semaphore::tryAcquire()+0x58>
c00184c9:	8d 76 00             	lea    esi,[esi+0x0]
c00184cc:	31 c0                	xor    eax,eax
c00184ce:	83 c4 08             	add    esp,0x8
c00184d1:	5b                   	pop    ebx
c00184d2:	c3                   	ret    
c00184d3:	90                   	nop
c00184d4:	fb                   	sti    
c00184d5:	83 c4 08             	add    esp,0x8
c00184d8:	5b                   	pop    ebx
c00184d9:	c3                   	ret    
c00184da:	66 90                	xchg   ax,ax
c00184dc:	43                   	inc    ebx
c00184dd:	89 15 c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,edx
c00184e3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00184e6:	85 d2                	test   edx,edx
c00184e8:	75 22                	jne    c001850c <Semaphore::tryAcquire()+0x90>
c00184ea:	8b 0d c0 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291c0
c00184f0:	85 c9                	test   ecx,ecx
c00184f2:	74 18                	je     c001850c <Semaphore::tryAcquire()+0x90>
c00184f4:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00184fe:	e8 ed fe ff ff       	call   c00183f0 <schedule()>
c0018503:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018508:	48                   	dec    eax
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018511:	85 c0                	test   eax,eax
c0018513:	75 0b                	jne    c0018520 <Semaphore::tryAcquire()+0xa4>
c0018515:	fb                   	sti    
c0018516:	b0 01                	mov    al,0x1
c0018518:	83 c4 08             	add    esp,0x8
c001851b:	5b                   	pop    ebx
c001851c:	c3                   	ret    
c001851d:	8d 76 00             	lea    esi,[esi+0x0]
c0018520:	b0 01                	mov    al,0x1
c0018522:	83 c4 08             	add    esp,0x8
c0018525:	5b                   	pop    ebx
c0018526:	c3                   	ret    
c0018527:	90                   	nop
c0018528:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018532:	e8 b9 fe ff ff       	call   c00183f0 <schedule()>
c0018537:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001853c:	48                   	dec    eax
c001853d:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018542:	85 c0                	test   eax,eax
c0018544:	75 86                	jne    c00184cc <Semaphore::tryAcquire()+0x50>
c0018546:	eb 8c                	jmp    c00184d4 <Semaphore::tryAcquire()+0x58>

c0018548 <Semaphore::assertLocked(char const*)>:
c0018548:	83 ec 0c             	sub    esp,0xc
c001854b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001854f:	fa                   	cli    
c0018550:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018556:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c001855b:	8d 48 01             	lea    ecx,[eax+0x1]
c001855e:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c0018564:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018566:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018569:	7c 29                	jl     c0018594 <Semaphore::assertLocked(char const*)+0x4c>
c001856b:	90                   	nop
c001856c:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018571:	85 c0                	test   eax,eax
c0018573:	75 0b                	jne    c0018580 <Semaphore::assertLocked(char const*)+0x38>
c0018575:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c001857a:	85 c0                	test   eax,eax
c001857c:	75 2e                	jne    c00185ac <Semaphore::assertLocked(char const*)+0x64>
c001857e:	66 90                	xchg   ax,ax
c0018580:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018585:	48                   	dec    eax
c0018586:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001858b:	75 03                	jne    c0018590 <Semaphore::assertLocked(char const*)+0x48>
c001858d:	fb                   	sti    
c001858e:	66 90                	xchg   ax,ax
c0018590:	83 c4 0c             	add    esp,0xc
c0018593:	c3                   	ret    
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001859b:	e8 d1 c7 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00185a0:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	48                   	dec    eax
c00185a9:	eb c1                	jmp    c001856c <Semaphore::assertLocked(char const*)+0x24>
c00185ab:	90                   	nop
c00185ac:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00185b6:	e8 35 fe ff ff       	call   c00183f0 <schedule()>
c00185bb:	eb c3                	jmp    c0018580 <Semaphore::assertLocked(char const*)+0x38>
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]

c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00185cf:	e8 1c fe ff ff       	call   c00183f0 <schedule()>
c00185d4:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00185d9:	48                   	dec    eax
c00185da:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00185df:	75 03                	jne    c00185e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00185e1:	fb                   	sti    
c00185e2:	66 90                	xchg   ax,ax
c00185e4:	83 c4 0c             	add    esp,0xc
c00185e7:	c3                   	ret    

c00185e8 <blockTask(TaskState)>:
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	fa                   	cli    
c00185ec:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00185f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00185fe:	e8 ed fd ff ff       	call   c00183f0 <schedule()>
c0018603:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018608:	48                   	dec    eax
c0018609:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001860e:	75 04                	jne    c0018614 <blockTask(TaskState)+0x2c>
c0018610:	fb                   	sti    
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	83 c4 0c             	add    esp,0xc
c0018617:	c3                   	ret    

c0018618 <waitTask(int, int*, int)>:
c0018618:	83 ec 18             	sub    esp,0x18
c001861b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018620:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018624:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018627:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001862b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018630:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018633:	6a 07                	push   0x7
c0018635:	e8 ae ff ff ff       	call   c00185e8 <blockTask(TaskState)>
c001863a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018645:	85 d2                	test   edx,edx
c0018647:	74 0b                	je     c0018654 <waitTask(int, int*, int)+0x3c>
c0018649:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001864c:	89 02                	mov    DWORD PTR [edx],eax
c001864e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018653:	90                   	nop
c0018654:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018657:	83 c4 0c             	add    esp,0xc
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <milliTenthSleepUntil(unsigned int)>:
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018663:	39 05 cc 82 02 c0    	cmp    DWORD PTR ds:0xc00282cc,eax
c0018669:	76 05                	jbe    c0018670 <milliTenthSleepUntil(unsigned int)+0x14>
c001866b:	90                   	nop
c001866c:	83 c4 0c             	add    esp,0xc
c001866f:	c3                   	ret    
c0018670:	fa                   	cli    
c0018671:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018677:	83 ec 08             	sub    esp,0x8
c001867a:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018680:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018686:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018689:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001868f:	68 d8 91 02 c0       	push   0xc00291d8
c0018694:	e8 d3 a4 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018699:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186a0:	e8 43 ff ff ff       	call   c00185e8 <blockTask(TaskState)>
c00186a5:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	48                   	dec    eax
c00186ae:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c00186b3:	85 c0                	test   eax,eax
c00186b5:	75 09                	jne    c00186c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00186b7:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c00186bc:	85 c0                	test   eax,eax
c00186be:	75 14                	jne    c00186d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00186c0:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00186c5:	48                   	dec    eax
c00186c6:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00186cb:	75 9f                	jne    c001866c <milliTenthSleepUntil(unsigned int)+0x10>
c00186cd:	fb                   	sti    
c00186ce:	83 c4 0c             	add    esp,0xc
c00186d1:	c3                   	ret    
c00186d2:	66 90                	xchg   ax,ax
c00186d4:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00186de:	e8 0d fd ff ff       	call   c00183f0 <schedule()>
c00186e3:	eb db                	jmp    c00186c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]

c00186e8 <milliTenthSleep(unsigned int)>:
c00186e8:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c00186ed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00186f1:	e9 66 ff ff ff       	jmp    c001865c <milliTenthSleepUntil(unsigned int)>
c00186f6:	66 90                	xchg   ax,ax

c00186f8 <sleep(unsigned int)>:
c00186f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186fc:	8d 04 80             	lea    eax,[eax+eax*4]
c00186ff:	8d 04 80             	lea    eax,[eax+eax*4]
c0018702:	8d 04 80             	lea    eax,[eax+eax*4]
c0018705:	8d 04 80             	lea    eax,[eax+eax*4]
c0018708:	c1 e0 04             	shl    eax,0x4
c001870b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001870f:	eb d7                	jmp    c00186e8 <milliTenthSleep(unsigned int)>
c0018711:	90                   	nop
c0018712:	66 90                	xchg   ax,ax

c0018714 <Semaphore::acquire()>:
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001871b:	fa                   	cli    
c001871c:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018721:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018727:	8d 48 01             	lea    ecx,[eax+0x1]
c001872a:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c0018730:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018733:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018735:	7d 2d                	jge    c0018764 <Semaphore::acquire()+0x50>
c0018737:	41                   	inc    ecx
c0018738:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001873b:	90                   	nop
c001873c:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018741:	85 c0                	test   eax,eax
c0018743:	75 0b                	jne    c0018750 <Semaphore::acquire()+0x3c>
c0018745:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c001874a:	85 c0                	test   eax,eax
c001874c:	75 62                	jne    c00187b0 <Semaphore::acquire()+0x9c>
c001874e:	66 90                	xchg   ax,ax
c0018750:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018755:	48                   	dec    eax
c0018756:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001875b:	75 03                	jne    c0018760 <Semaphore::acquire()+0x4c>
c001875d:	fb                   	sti    
c001875e:	66 90                	xchg   ax,ax
c0018760:	83 c4 0c             	add    esp,0xc
c0018763:	c3                   	ret    
c0018764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018769:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018770:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018773:	85 c9                	test   ecx,ecx
c0018775:	74 4d                	je     c00187c4 <Semaphore::acquire()+0xb0>
c0018777:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001877a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018780:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018783:	90                   	nop
c0018784:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018789:	83 ec 0c             	sub    esp,0xc
c001878c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001878f:	68 94 5e 02 c0       	push   0xc0025e94
c0018794:	e8 7a 48 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0018799:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00187a0:	e8 43 fe ff ff       	call   c00185e8 <blockTask(TaskState)>
c00187a5:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	48                   	dec    eax
c00187ae:	eb 8c                	jmp    c001873c <Semaphore::acquire()+0x28>
c00187b0:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00187ba:	e8 31 fc ff ff       	call   c00183f0 <schedule()>
c00187bf:	eb 8f                	jmp    c0018750 <Semaphore::acquire()+0x3c>
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00187cc:	eb b6                	jmp    c0018784 <Semaphore::acquire()+0x70>
c00187ce:	66 90                	xchg   ax,ax

c00187d0 <taskReturned>:
c00187d0:	83 ec 18             	sub    esp,0x18
c00187d3:	68 b4 5e 02 c0       	push   0xc0025eb4
c00187d8:	e8 94 c5 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	6a 02                	push   0x2
c00187e5:	e8 fe fd ff ff       	call   c00185e8 <blockTask(TaskState)>
c00187ea:	fa                   	cli    
c00187eb:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00187f1:	e8 fa fb ff ff       	call   c00183f0 <schedule()>
c00187f6:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	48                   	dec    eax
c00187ff:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018804:	85 c0                	test   eax,eax
c0018806:	75 d8                	jne    c00187e0 <taskReturned+0x10>
c0018808:	fb                   	sti    
c0018809:	eb d5                	jmp    c00187e0 <taskReturned+0x10>
c001880b:	90                   	nop

c001880c <Thr::processFromPID(int)>:
c001880c:	57                   	push   edi
c001880d:	56                   	push   esi
c001880e:	53                   	push   ebx
c001880f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018813:	fa                   	cli    
c0018814:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c001881a:	83 ec 0c             	sub    esp,0xc
c001881d:	68 e4 91 02 c0       	push   0xc00291e4
c0018822:	e8 85 a2 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	89 c7                	mov    edi,eax
c001882c:	eb 16                	jmp    c0018844 <Thr::processFromPID(int)+0x38>
c001882e:	66 90                	xchg   ax,ax
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	68 e4 91 02 c0       	push   0xc00291e4
c0018838:	e8 6f a2 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001883d:	83 c4 10             	add    esp,0x10
c0018840:	39 f8                	cmp    eax,edi
c0018842:	74 4c                	je     c0018890 <Thr::processFromPID(int)+0x84>
c0018844:	83 ec 0c             	sub    esp,0xc
c0018847:	68 e4 91 02 c0       	push   0xc00291e4
c001884c:	e8 5b a2 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018851:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018858:	89 c3                	mov    ebx,eax
c001885a:	e8 55 a2 00 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001885f:	58                   	pop    eax
c0018860:	5a                   	pop    edx
c0018861:	53                   	push   ebx
c0018862:	68 e4 91 02 c0       	push   0xc00291e4
c0018867:	e8 00 a3 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001886c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001886f:	83 c4 10             	add    esp,0x10
c0018872:	39 30                	cmp    DWORD PTR [eax],esi
c0018874:	75 ba                	jne    c0018830 <Thr::processFromPID(int)+0x24>
c0018876:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001887b:	48                   	dec    eax
c001887c:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018881:	74 09                	je     c001888c <Thr::processFromPID(int)+0x80>
c0018883:	90                   	nop
c0018884:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018887:	5b                   	pop    ebx
c0018888:	5e                   	pop    esi
c0018889:	5f                   	pop    edi
c001888a:	c3                   	ret    
c001888b:	90                   	nop
c001888c:	fb                   	sti    
c001888d:	eb f5                	jmp    c0018884 <Thr::processFromPID(int)+0x78>
c001888f:	90                   	nop
c0018890:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018895:	48                   	dec    eax
c0018896:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001889b:	75 07                	jne    c00188a4 <Thr::processFromPID(int)+0x98>
c001889d:	fb                   	sti    
c001889e:	5b                   	pop    ebx
c001889f:	5e                   	pop    esi
c00188a0:	5f                   	pop    edi
c00188a1:	c3                   	ret    
c00188a2:	66 90                	xchg   ax,ax
c00188a4:	5b                   	pop    ebx
c00188a5:	31 c0                	xor    eax,eax
c00188a7:	5e                   	pop    esi
c00188a8:	5f                   	pop    edi
c00188a9:	c3                   	ret    
c00188aa:	66 90                	xchg   ax,ax

c00188ac <unblockTask(ThreadControlBlock*)>:
c00188ac:	53                   	push   ebx
c00188ad:	83 ec 08             	sub    esp,0x8
c00188b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188b4:	fa                   	cli    
c00188b5:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00188bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00188be:	85 c0                	test   eax,eax
c00188c0:	74 66                	je     c0018928 <unblockTask(ThreadControlBlock*)+0x7c>
c00188c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00188c5:	48                   	dec    eax
c00188c6:	74 38                	je     c0018900 <unblockTask(ThreadControlBlock*)+0x54>
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	68 e4 91 02 c0       	push   0xc00291e4
c00188d0:	e8 d7 a1 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188d5:	83 c4 10             	add    esp,0x10
c00188d8:	85 c0                	test   eax,eax
c00188da:	75 1c                	jne    c00188f8 <unblockTask(ThreadControlBlock*)+0x4c>
c00188dc:	eb 5e                	jmp    c001893c <unblockTask(ThreadControlBlock*)+0x90>
c00188de:	66 90                	xchg   ax,ax
c00188e0:	83 ec 08             	sub    esp,0x8
c00188e3:	50                   	push   eax
c00188e4:	68 e4 91 02 c0       	push   0xc00291e4
c00188e9:	e8 6e a5 00 00       	call   c0022e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00188ee:	83 c4 10             	add    esp,0x10
c00188f1:	85 c0                	test   eax,eax
c00188f3:	74 47                	je     c001893c <unblockTask(ThreadControlBlock*)+0x90>
c00188f5:	8d 76 00             	lea    esi,[esi+0x0]
c00188f8:	39 c3                	cmp    ebx,eax
c00188fa:	75 e4                	jne    c00188e0 <unblockTask(ThreadControlBlock*)+0x34>
c00188fc:	eb 12                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c00188fe:	66 90                	xchg   ax,ax
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	68 37 5e 02 c0       	push   0xc0025e37
c0018908:	e8 06 47 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018915:	48                   	dec    eax
c0018916:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001891b:	75 03                	jne    c0018920 <unblockTask(ThreadControlBlock*)+0x74>
c001891d:	fb                   	sti    
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 c4 08             	add    esp,0x8
c0018923:	5b                   	pop    ebx
c0018924:	c3                   	ret    
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	68 20 5e 02 c0       	push   0xc0025e20
c0018930:	e8 de 46 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0018935:	83 c4 10             	add    esp,0x10
c0018938:	eb d6                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c001893a:	66 90                	xchg   ax,ax
c001893c:	83 ec 08             	sub    esp,0x8
c001893f:	53                   	push   ebx
c0018940:	68 e4 91 02 c0       	push   0xc00291e4
c0018945:	e8 22 a2 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001894a:	83 c4 10             	add    esp,0x10
c001894d:	eb c1                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c001894f:	90                   	nop

c0018950 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	83 ec 1c             	sub    esp,0x1c
c0018957:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001895b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001895e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018964:	85 ff                	test   edi,edi
c0018966:	7e 24                	jle    c001898c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018968:	31 f6                	xor    esi,esi
c001896a:	66 90                	xchg   ax,ax
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018976:	46                   	inc    esi
c0018977:	e8 9b 13 ff ff       	call   c0009d17 <free>
c001897c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001897f:	83 c4 10             	add    esp,0x10
c0018982:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018988:	7f e2                	jg     c001896c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001898a:	66 90                	xchg   ax,ax
c001898c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018996:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001899b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001899e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00189a1:	d3 c0                	rol    eax,cl
c00189a3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00189aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189ad:	89 f7                	mov    edi,esi
c00189af:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00189b7:	0f 85 73 01 00 00    	jne    c0018b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00189bd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00189c3:	85 ed                	test   ebp,ebp
c00189c5:	74 1d                	je     c00189e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00189c7:	83 ec 0c             	sub    esp,0xc
c00189ca:	55                   	push   ebp
c00189cb:	e8 46 c1 ff ff       	call   c0014b16 <EnvVarContainer::~EnvVarContainer()>
c00189d0:	59                   	pop    ecx
c00189d1:	5e                   	pop    esi
c00189d2:	6a 0c                	push   0xc
c00189d4:	55                   	push   ebp
c00189d5:	e8 58 45 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c00189da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	89 f7                	mov    edi,esi
c00189e2:	66 90                	xchg   ax,ax
c00189e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189ea:	85 c0                	test   eax,eax
c00189ec:	0f 84 b2 00 00 00    	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00189f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00189f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00189f9:	31 c9                	xor    ecx,ecx
c00189fb:	eb 17                	jmp    c0018a14 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00189fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018a00:	41                   	inc    ecx
c0018a01:	83 f9 10             	cmp    ecx,0x10
c0018a04:	0f 84 9a 00 00 00    	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a0a:	66 90                	xchg   ax,ax
c0018a0c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a12:	66 90                	xchg   ax,ax
c0018a14:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018a1b:	d3 fa                	sar    edx,cl
c0018a1d:	83 e2 01             	and    edx,0x1
c0018a20:	74 de                	je     c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a22:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018a25:	01 d2                	add    edx,edx
c0018a27:	01 ca                	add    edx,ecx
c0018a29:	8d 14 92             	lea    edx,[edx+edx*4]
c0018a2c:	01 d0                	add    eax,edx
c0018a2e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018a34:	83 fd 07             	cmp    ebp,0x7
c0018a37:	75 c7                	jne    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a39:	05 40 02 00 00       	add    eax,0x240
c0018a3e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018a41:	83 fd ff             	cmp    ebp,0xffffffff
c0018a44:	0f 8c ee 00 00 00    	jl     c0018b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018a4a:	0f 84 ac 01 00 00    	je     c0018bfc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018a50:	85 ed                	test   ebp,ebp
c0018a52:	0f 84 90 01 00 00    	je     c0018be8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018a58:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018a5a:	75 a4                	jne    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a5c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018a66:	01 d0                	add    eax,edx
c0018a68:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a6c:	83 ec 0c             	sub    esp,0xc
c0018a6f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018a75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a7e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018a85:	50                   	push   eax
c0018a86:	e8 21 fe ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a95:	89 f7                	mov    edi,esi
c0018a97:	41                   	inc    ecx
c0018a98:	83 f9 10             	cmp    ecx,0x10
c0018a9b:	0f 85 6b ff ff ff    	jne    c0018a0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018aaa:	85 c0                	test   eax,eax
c0018aac:	74 62                	je     c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018aae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018ab4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018aba:	74 54                	je     c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018abc:	83 ec 0c             	sub    esp,0xc
c0018abf:	68 e4 91 02 c0       	push   0xc00291e4
c0018ac4:	e8 e3 9f 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ac9:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018ad0:	89 c7                	mov    edi,eax
c0018ad2:	e8 b9 9f 00 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ad7:	83 c4 10             	add    esp,0x10
c0018ada:	84 c0                	test   al,al
c0018adc:	0f 84 ce 00 00 00    	je     c0018bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ae7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018aed:	85 d2                	test   edx,edx
c0018aef:	74 0f                	je     c0018b00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	8b 02                	mov    eax,DWORD PTR [edx]
c0018af6:	52                   	push   edx
c0018af7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018afa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018afd:	83 c4 10             	add    esp,0x10
c0018b00:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018b0a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b10:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018b16:	85 db                	test   ebx,ebx
c0018b18:	74 16                	je     c0018b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018b1a:	83 ec 0c             	sub    esp,0xc
c0018b1d:	53                   	push   ebx
c0018b1e:	e8 85 36 ff ff       	call   c000c1a8 <VAS::~VAS()>
c0018b23:	58                   	pop    eax
c0018b24:	5a                   	pop    edx
c0018b25:	6a 14                	push   0x14
c0018b27:	53                   	push   ebx
c0018b28:	e8 05 44 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	83 c4 1c             	add    esp,0x1c
c0018b33:	5b                   	pop    ebx
c0018b34:	5e                   	pop    esi
c0018b35:	5f                   	pop    edi
c0018b36:	5d                   	pop    ebp
c0018b37:	c3                   	ret    
c0018b38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	68 e8 5e 02 c0       	push   0xc0025ee8
c0018b44:	e8 28 c2 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0018b49:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	89 f7                	mov    edi,esi
c0018b51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b55:	e9 a6 fe ff ff       	jmp    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b62:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018b68:	75 1e                	jne    c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b6a:	83 ec 0c             	sub    esp,0xc
c0018b6d:	68 50 5f 02 c0       	push   0xc0025f50
c0018b72:	e8 9c 44 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0018b77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018b7e:	e8 65 fa ff ff       	call   c00185e8 <blockTask(TaskState)>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	66 90                	xchg   ax,ax
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	56                   	push   esi
c0018b8c:	68 e4 91 02 c0       	push   0xc00291e4
c0018b91:	e8 d6 9f 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b96:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018b9d:	e8 0a 9f 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	39 f8                	cmp    eax,edi
c0018ba7:	0f 84 37 ff ff ff    	je     c0018ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	83 ec 0c             	sub    esp,0xc
c0018bb3:	68 e4 91 02 c0       	push   0xc00291e4
c0018bb8:	e8 ef 9e 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bbd:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018bc4:	89 c6                	mov    esi,eax
c0018bc6:	e8 e9 9e 00 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	39 f3                	cmp    ebx,esi
c0018bd0:	74 b6                	je     c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018bd2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018bd5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bd8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018bde:	75 a8                	jne    c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018be0:	e9 77 ff ff ff       	jmp    c0018b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018be5:	8d 76 00             	lea    esi,[esi+0x0]
c0018be8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bec:	83 ec 0c             	sub    esp,0xc
c0018bef:	68 1c 5f 02 c0       	push   0xc0025f1c
c0018bf4:	e9 4b ff ff ff       	jmp    c0018b44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bfc:	8b 36                	mov    esi,DWORD PTR [esi]
c0018bfe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c02:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018c05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c08:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018c0e:	01 d7                	add    edi,edx
c0018c10:	89 f8                	mov    eax,edi
c0018c12:	e9 51 fe ff ff       	jmp    c0018a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018c17:	90                   	nop

c0018c18 <cleanerTaskFunction(void*)>:
c0018c18:	53                   	push   ebx
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018c21:	48                   	dec    eax
c0018c22:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018c27:	75 03                	jne    c0018c2c <cleanerTaskFunction(void*)+0x14>
c0018c29:	fb                   	sti    
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	fa                   	cli    
c0018c2d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018c32:	80 3d ac 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291ac,0x0
c0018c39:	8d 50 01             	lea    edx,[eax+0x1]
c0018c3c:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c0018c42:	0f 84 ac 00 00 00    	je     c0018cf4 <cleanerTaskFunction(void*)+0xdc>
c0018c48:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018c4d:	85 c0                	test   eax,eax
c0018c4f:	75 03                	jne    c0018c54 <cleanerTaskFunction(void*)+0x3c>
c0018c51:	fb                   	sti    
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	c6 05 ac 91 02 c0 00 	mov    BYTE PTR ds:0xc00291ac,0x0
c0018c5b:	fa                   	cli    
c0018c5c:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018c62:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018c68:	fa                   	cli    
c0018c69:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018c6f:	eb 2b                	jmp    c0018c9c <cleanerTaskFunction(void*)+0x84>
c0018c71:	8d 76 00             	lea    esi,[esi+0x0]
c0018c74:	83 ec 0c             	sub    esp,0xc
c0018c77:	68 cc 91 02 c0       	push   0xc00291cc
c0018c7c:	e8 2b 9e 00 00       	call   c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c81:	c7 04 24 cc 91 02 c0 	mov    DWORD PTR [esp],0xc00291cc
c0018c88:	89 c3                	mov    ebx,eax
c0018c8a:	e8 25 9e 00 00       	call   c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c92:	e8 b9 fc ff ff       	call   c0018950 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	66 90                	xchg   ax,ax
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	68 cc 91 02 c0       	push   0xc00291cc
c0018ca4:	e8 e7 9d 00 00       	call   c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca9:	83 c4 10             	add    esp,0x10
c0018cac:	84 c0                	test   al,al
c0018cae:	74 c4                	je     c0018c74 <cleanerTaskFunction(void*)+0x5c>
c0018cb0:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018cb5:	48                   	dec    eax
c0018cb6:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018cbb:	75 03                	jne    c0018cc0 <cleanerTaskFunction(void*)+0xa8>
c0018cbd:	fb                   	sti    
c0018cbe:	66 90                	xchg   ax,ax
c0018cc0:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018cc5:	48                   	dec    eax
c0018cc6:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018ccb:	0f 85 4b ff ff ff    	jne    c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cd1:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0018cd6:	85 c0                	test   eax,eax
c0018cd8:	0f 84 3e ff ff ff    	je     c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cde:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018ce8:	e8 03 f7 ff ff       	call   c00183f0 <schedule()>
c0018ced:	e9 2a ff ff ff       	jmp    c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	83 ec 0c             	sub    esp,0xc
c0018cf7:	6a 02                	push   0x2
c0018cf9:	e8 c2 f8 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	e9 4e ff ff ff       	jmp    c0018c54 <cleanerTaskFunction(void*)+0x3c>
c0018d06:	66 90                	xchg   ax,ax

c0018d08 <terminateTask(int)>:
c0018d08:	83 ec 14             	sub    esp,0x14
c0018d0b:	fa                   	cli    
c0018d0c:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018d12:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018d18:	fa                   	cli    
c0018d19:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018d1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d28:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018d33:	50                   	push   eax
c0018d34:	68 cc 91 02 c0       	push   0xc00291cc
c0018d39:	e8 2e 9e 00 00       	call   c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018d4d:	a1 a8 91 02 c0       	mov    eax,ds:0xc00291a8
c0018d52:	85 c0                	test   eax,eax
c0018d54:	74 5e                	je     c0018db4 <terminateTask(int)+0xac>
c0018d56:	83 ec 0c             	sub    esp,0xc
c0018d59:	c6 05 ac 91 02 c0 01 	mov    BYTE PTR ds:0xc00291ac,0x1
c0018d60:	50                   	push   eax
c0018d61:	e8 46 fb ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018d66:	83 c4 10             	add    esp,0x10
c0018d69:	8d 76 00             	lea    esi,[esi+0x0]
c0018d6c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018d71:	48                   	dec    eax
c0018d72:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018d77:	75 03                	jne    c0018d7c <terminateTask(int)+0x74>
c0018d79:	fb                   	sti    
c0018d7a:	66 90                	xchg   ax,ax
c0018d7c:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018d81:	48                   	dec    eax
c0018d82:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018d87:	75 0b                	jne    c0018d94 <terminateTask(int)+0x8c>
c0018d89:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c0018d90:	75 36                	jne    c0018dc8 <terminateTask(int)+0xc0>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018d99:	48                   	dec    eax
c0018d9a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018d9f:	75 03                	jne    c0018da4 <terminateTask(int)+0x9c>
c0018da1:	fb                   	sti    
c0018da2:	66 90                	xchg   ax,ax
c0018da4:	fa                   	cli    
c0018da5:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018dab:	90                   	nop
c0018dac:	e8 3f f6 ff ff       	call   c00183f0 <schedule()>
c0018db1:	eb e1                	jmp    c0018d94 <terminateTask(int)+0x8c>
c0018db3:	90                   	nop
c0018db4:	83 ec 0c             	sub    esp,0xc
c0018db7:	68 4e 5e 02 c0       	push   0xc0025e4e
c0018dbc:	e8 52 42 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	eb a6                	jmp    c0018d6c <terminateTask(int)+0x64>
c0018dc6:	66 90                	xchg   ax,ax
c0018dc8:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018dd2:	eb d8                	jmp    c0018dac <terminateTask(int)+0xa4>

c0018dd4 <Thr::terminateFromIRQ(int)>:
c0018dd4:	83 ec 18             	sub    esp,0x18
c0018dd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ddb:	e8 28 ff ff ff       	call   c0018d08 <terminateTask(int)>

c0018de0 <Semaphore::release()>:
c0018de0:	83 ec 0c             	sub    esp,0xc
c0018de3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018de7:	fa                   	cli    
c0018de8:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018ded:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018df3:	8d 48 01             	lea    ecx,[eax+0x1]
c0018df6:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c0018dfc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018dff:	85 c9                	test   ecx,ecx
c0018e01:	74 41                	je     c0018e44 <Semaphore::release()+0x64>
c0018e03:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018e06:	83 ec 0c             	sub    esp,0xc
c0018e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018e0c:	51                   	push   ecx
c0018e0d:	e8 9a fa ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018e12:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	48                   	dec    eax
c0018e1b:	90                   	nop
c0018e1c:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018e21:	85 c0                	test   eax,eax
c0018e23:	75 0b                	jne    c0018e30 <Semaphore::release()+0x50>
c0018e25:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0018e2a:	85 c0                	test   eax,eax
c0018e2c:	75 1e                	jne    c0018e4c <Semaphore::release()+0x6c>
c0018e2e:	66 90                	xchg   ax,ax
c0018e30:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018e35:	48                   	dec    eax
c0018e36:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018e3b:	75 03                	jne    c0018e40 <Semaphore::release()+0x60>
c0018e3d:	fb                   	sti    
c0018e3e:	66 90                	xchg   ax,ax
c0018e40:	83 c4 0c             	add    esp,0xc
c0018e43:	c3                   	ret    
c0018e44:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018e47:	eb d3                	jmp    c0018e1c <Semaphore::release()+0x3c>
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018e56:	e8 95 f5 ff ff       	call   c00183f0 <schedule()>
c0018e5b:	eb d3                	jmp    c0018e30 <Semaphore::release()+0x50>
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]

c0018e60 <__static_initialization_and_destruction_0(int, int)>:
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018e68:	0f 85 8e 00 00 00    	jne    c0018efc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018e76:	0f 85 80 00 00 00    	jne    c0018efc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	68 e4 91 02 c0       	push   0xc00291e4
c0018e84:	e8 8f 9f 00 00       	call   c0022e18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	83 ec 04             	sub    esp,0x4
c0018e8f:	68 18 6f 02 c0       	push   0xc0026f18
c0018e94:	68 e4 91 02 c0       	push   0xc00291e4
c0018e99:	68 c8 2d 02 c0       	push   0xc0022dc8
c0018e9e:	e8 09 40 ff ff       	call   c000ceac <__cxa_atexit>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	68 d8 91 02 c0       	push   0xc00291d8
c0018eae:	e8 65 9f 00 00       	call   c0022e18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	83 ec 04             	sub    esp,0x4
c0018eb9:	68 18 6f 02 c0       	push   0xc0026f18
c0018ebe:	68 d8 91 02 c0       	push   0xc00291d8
c0018ec3:	68 c8 2d 02 c0       	push   0xc0022dc8
c0018ec8:	e8 df 3f ff ff       	call   c000ceac <__cxa_atexit>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	68 cc 91 02 c0       	push   0xc00291cc
c0018ed8:	e8 3b 9f 00 00       	call   c0022e18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	83 ec 04             	sub    esp,0x4
c0018ee3:	68 18 6f 02 c0       	push   0xc0026f18
c0018ee8:	68 cc 91 02 c0       	push   0xc00291cc
c0018eed:	68 c8 2d 02 c0       	push   0xc0022dc8
c0018ef2:	e8 b5 3f ff ff       	call   c000ceac <__cxa_atexit>
c0018ef7:	83 c4 10             	add    esp,0x10
c0018efa:	66 90                	xchg   ax,ax
c0018efc:	90                   	nop
c0018efd:	83 c4 0c             	add    esp,0xc
c0018f00:	c3                   	ret    
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]

c0018f04 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	83 ec 08             	sub    esp,0x8
c0018f0a:	68 ff ff 00 00       	push   0xffff
c0018f0f:	6a 01                	push   0x1
c0018f11:	e8 4a ff ff ff       	call   c0018e60 <__static_initialization_and_destruction_0(int, int)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	83 c4 0c             	add    esp,0xc
c0018f1c:	c3                   	ret    

c0018f1d <Vm::inbv(unsigned short)>:
c0018f1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f21:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f26:	75 06                	jne    c0018f2e <Vm::inbv(unsigned short)+0x11>
c0018f28:	a0 2c 92 02 c0       	mov    al,ds:0xc002922c
c0018f2d:	c3                   	ret    
c0018f2e:	ec                   	in     al,dx
c0018f2f:	c3                   	ret    

c0018f30 <Vm::outbv(unsigned short, unsigned char)>:
c0018f30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f38:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f3d:	75 25                	jne    c0018f64 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018f3f:	8b 0d 2c 92 02 c0    	mov    ecx,DWORD PTR ds:0xc002922c
c0018f45:	8d 51 01             	lea    edx,[ecx+0x1]
c0018f48:	88 81 40 92 02 c0    	mov    BYTE PTR [ecx-0x3ffd6dc0],al
c0018f4e:	89 15 2c 92 02 c0    	mov    DWORD PTR ds:0xc002922c,edx
c0018f54:	83 fa 20             	cmp    edx,0x20
c0018f57:	75 0c                	jne    c0018f65 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018f59:	c7 05 2c 92 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x1f
c0018f63:	c3                   	ret    
c0018f64:	ee                   	out    dx,al
c0018f65:	c3                   	ret    

c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018f66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018f6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f70:	c1 e0 04             	shl    eax,0x4
c0018f73:	01 d0                	add    eax,edx
c0018f75:	c3                   	ret    

c0018f76 <Vm::getSegment(unsigned int)>:
c0018f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7a:	c1 e8 10             	shr    eax,0x10
c0018f7d:	c3                   	ret    

c0018f7e <Vm::getOffset(unsigned int)>:
c0018f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f82:	c3                   	ret    

c0018f83 <Vm::mainloop2()>:
c0018f83:	83 ec 18             	sub    esp,0x18
c0018f86:	fa                   	cli    
c0018f87:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018f8d:	6a 02                	push   0x2
c0018f8f:	c6 05 25 92 02 c0 01 	mov    BYTE PTR ds:0xc0029225,0x1
c0018f96:	e8 25 f6 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fa0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018fa4:	52                   	push   edx
c0018fa5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018fa9:	52                   	push   edx
c0018faa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018fae:	52                   	push   edx
c0018faf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018fb3:	50                   	push   eax
c0018fb4:	e8 76 72 fe ff       	call   c000022f <goToVM86>
c0018fb9:	83 c4 2c             	add    esp,0x2c
c0018fbc:	c3                   	ret    

c0018fbd <Vm::mainVm8086Loop(void*)>:
c0018fbd:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018fc2:	48                   	dec    eax
c0018fc3:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018fc8:	75 01                	jne    c0018fcb <Vm::mainVm8086Loop(void*)+0xe>
c0018fca:	fb                   	sti    
c0018fcb:	eb b6                	jmp    c0018f83 <Vm::mainloop2()>

c0018fcd <Vm::mainloop3(unsigned long)>:
c0018fcd:	83 ec 18             	sub    esp,0x18
c0018fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fd4:	fa                   	cli    
c0018fd5:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018fdb:	6a 02                	push   0x2
c0018fdd:	c6 05 24 92 02 c0 01 	mov    BYTE PTR ds:0xc0029224,0x1
c0018fe4:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c0018fe9:	e8 d2 f5 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018fee:	83 c4 1c             	add    esp,0x1c
c0018ff1:	eb 90                	jmp    c0018f83 <Vm::mainloop2()>

c0018ff3 <Vm::initialise8086()>:
c0018ff3:	83 ec 0c             	sub    esp,0xc
c0018ff6:	68 80 00 00 00       	push   0x80
c0018ffb:	6a 00                	push   0x0
c0018ffd:	68 bd 8f 01 c0       	push   0xc0018fbd
c0019002:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0019008:	e8 c7 f1 ff ff       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c001900d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019014:	a3 28 92 02 c0       	mov    ds:0xc0029228,eax
c0019019:	68 00 01 00 00       	push   0x100
c001901e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0019023:	6a 00                	push   0x0
c0019025:	6a 00                	push   0x0
c0019027:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001902d:	e8 e8 35 ff ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019032:	83 c4 2c             	add    esp,0x2c
c0019035:	c3                   	ret    

c0019036 <Vm::finish8086()>:
c0019036:	53                   	push   ebx
c0019037:	83 ec 08             	sub    esp,0x8
c001903a:	fa                   	cli    
c001903b:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0019041:	80 3d 24 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029224,0x0
c0019048:	75 15                	jne    c001905f <Vm::finish8086()+0x29>
c001904a:	e8 a1 f3 ff ff       	call   c00183f0 <schedule()>
c001904f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0019054:	48                   	dec    eax
c0019055:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001905a:	75 de                	jne    c001903a <Vm::finish8086()+0x4>
c001905c:	fb                   	sti    
c001905d:	eb db                	jmp    c001903a <Vm::finish8086()+0x4>
c001905f:	83 ec 0c             	sub    esp,0xc
c0019062:	8b 1d 20 92 02 c0    	mov    ebx,DWORD PTR ds:0xc0029220
c0019068:	ff 35 28 92 02 c0    	push   DWORD PTR ds:0xc0029228
c001906e:	c6 05 24 92 02 c0 00 	mov    BYTE PTR ds:0xc0029224,0x0
c0019075:	e8 32 f8 ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c001907a:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	8d 50 ff             	lea    edx,[eax-0x1]
c0019085:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c001908b:	85 d2                	test   edx,edx
c001908d:	75 01                	jne    c0019090 <Vm::finish8086()+0x5a>
c001908f:	fb                   	sti    
c0019090:	89 d8                	mov    eax,ebx
c0019092:	83 c4 08             	add    esp,0x8
c0019095:	5b                   	pop    ebx
c0019096:	c3                   	ret    

c0019097 <Vm::getOutput8086(unsigned char*)>:
c0019097:	57                   	push   edi
c0019098:	8b 0d 2c 92 02 c0    	mov    ecx,DWORD PTR ds:0xc002922c
c001909e:	56                   	push   esi
c001909f:	be 40 92 02 c0       	mov    esi,0xc0029240
c00190a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00190a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190aa:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c00190af:	5e                   	pop    esi
c00190b0:	c7 05 2c 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x0
c00190ba:	5f                   	pop    edi
c00190bb:	c3                   	ret    

c00190bc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00190bc:	55                   	push   ebp
c00190bd:	57                   	push   edi
c00190be:	56                   	push   esi
c00190bf:	53                   	push   ebx
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00190c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00190cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00190cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00190d3:	fa                   	cli    
c00190d4:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00190da:	80 3d 25 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029225,0x0
c00190e1:	75 15                	jne    c00190f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00190e3:	e8 08 f3 ff ff       	call   c00183f0 <schedule()>
c00190e8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00190ed:	48                   	dec    eax
c00190ee:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00190f3:	75 de                	jne    c00190d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00190f5:	fb                   	sti    
c00190f6:	eb db                	jmp    c00190d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00190f8:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c00190fd:	c7 05 2c 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x0
c0019107:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001910b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001910f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019113:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019117:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001911b:	0f b7 ff             	movzx  edi,di
c001911e:	0f b7 f6             	movzx  esi,si
c0019121:	50                   	push   eax
c0019122:	6a 20                	push   0x20
c0019124:	6a 00                	push   0x0
c0019126:	68 40 92 02 c0       	push   0xc0029240
c001912b:	e8 4c 75 fe ff       	call   c000067c <memset>
c0019130:	5a                   	pop    edx
c0019131:	59                   	pop    ecx
c0019132:	57                   	push   edi
c0019133:	56                   	push   esi
c0019134:	e8 2d fe ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	89 c7                	mov    edi,eax
c001913e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019142:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019146:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019148:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001914d:	c6 05 25 92 02 c0 00 	mov    BYTE PTR ds:0xc0029225,0x0
c0019154:	48                   	dec    eax
c0019155:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001915a:	75 01                	jne    c001915d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001915c:	fb                   	sti    
c001915d:	83 ec 0c             	sub    esp,0xc
c0019160:	ff 35 28 92 02 c0    	push   DWORD PTR ds:0xc0029228
c0019166:	e8 41 f7 ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c001916b:	83 c4 1c             	add    esp,0x1c
c001916e:	b0 01                	mov    al,0x1
c0019170:	5b                   	pop    ebx
c0019171:	5e                   	pop    esi
c0019172:	5f                   	pop    edi
c0019173:	5d                   	pop    ebp
c0019174:	c3                   	ret    

c0019175 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019175:	55                   	push   ebp
c0019176:	57                   	push   edi
c0019177:	56                   	push   esi
c0019178:	53                   	push   ebx
c0019179:	83 ec 2c             	sub    esp,0x2c
c001917c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019180:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019184:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019188:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001918c:	fa                   	cli    
c001918d:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0019193:	0f b6 35 25 92 02 c0 	movzx  esi,BYTE PTR ds:0xc0029225
c001919a:	89 f0                	mov    eax,esi
c001919c:	84 c0                	test   al,al
c001919e:	75 1d                	jne    c00191bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00191a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00191a4:	e8 47 f2 ff ff       	call   c00183f0 <schedule()>
c00191a9:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00191ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00191b2:	48                   	dec    eax
c00191b3:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00191b8:	75 d2                	jne    c001918c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00191ba:	fb                   	sti    
c00191bb:	eb cf                	jmp    c001918c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00191bd:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c00191c2:	c7 05 2c 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x0
c00191cc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00191d0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00191d4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00191d8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00191dc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00191e0:	50                   	push   eax
c00191e1:	6a 20                	push   0x20
c00191e3:	6a 00                	push   0x0
c00191e5:	68 40 92 02 c0       	push   0xc0029240
c00191ea:	e8 8d 74 fe ff       	call   c000067c <memset>
c00191ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00191f6:	e8 0c 0b ff ff       	call   c0009d07 <malloc>
c00191fb:	83 c4 0c             	add    esp,0xc
c00191fe:	89 c3                	mov    ebx,eax
c0019200:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0019206:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001920a:	50                   	push   eax
c001920b:	e8 6e 43 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c0019210:	83 c4 10             	add    esp,0x10
c0019213:	85 db                	test   ebx,ebx
c0019215:	75 0a                	jne    c0019221 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019217:	83 ec 0c             	sub    esp,0xc
c001921a:	68 78 5f 02 c0       	push   0xc0025f78
c001921f:	eb 3e                	jmp    c001925f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019221:	50                   	push   eax
c0019222:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019226:	50                   	push   eax
c0019227:	8d 44 24 20          	lea    eax,[esp+0x20]
c001922b:	50                   	push   eax
c001922c:	53                   	push   ebx
c001922d:	e8 d2 46 ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001923a:	74 0a                	je     c0019246 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	68 8c 5f 02 c0       	push   0xc0025f8c
c0019244:	eb 19                	jmp    c001925f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019246:	51                   	push   ecx
c0019247:	51                   	push   ecx
c0019248:	6a 01                	push   0x1
c001924a:	53                   	push   ebx
c001924b:	e8 08 44 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c0019250:	83 c4 10             	add    esp,0x10
c0019253:	85 c0                	test   eax,eax
c0019255:	74 24                	je     c001927b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	68 a5 5f 02 c0       	push   0xc0025fa5
c001925f:	e8 0d bb ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019264:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	48                   	dec    eax
c001926d:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0019272:	85 c0                	test   eax,eax
c0019274:	75 01                	jne    c0019277 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019276:	fb                   	sti    
c0019277:	31 f6                	xor    esi,esi
c0019279:	eb 58                	jmp    c00192d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001927b:	0f b7 ed             	movzx  ebp,bp
c001927e:	50                   	push   eax
c001927f:	0f b7 ff             	movzx  edi,di
c0019282:	50                   	push   eax
c0019283:	55                   	push   ebp
c0019284:	57                   	push   edi
c0019285:	e8 dc fc ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c001928a:	5a                   	pop    edx
c001928b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001928d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019291:	51                   	push   ecx
c0019292:	50                   	push   eax
c0019293:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019297:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001929b:	53                   	push   ebx
c001929c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001929f:	83 c4 14             	add    esp,0x14
c00192a2:	53                   	push   ebx
c00192a3:	e8 0e 44 ff ff       	call   c000d6b6 <File::close()>
c00192a8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	48                   	dec    eax
c00192b1:	c6 05 25 92 02 c0 00 	mov    BYTE PTR ds:0xc0029225,0x0
c00192b8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00192bd:	85 c0                	test   eax,eax
c00192bf:	75 01                	jne    c00192c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00192c1:	fb                   	sti    
c00192c2:	83 ec 0c             	sub    esp,0xc
c00192c5:	ff 35 28 92 02 c0    	push   DWORD PTR ds:0xc0029228
c00192cb:	e8 dc f5 ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	83 c4 2c             	add    esp,0x2c
c00192d6:	89 f0                	mov    eax,esi
c00192d8:	5b                   	pop    ebx
c00192d9:	5e                   	pop    esi
c00192da:	5f                   	pop    edi
c00192db:	5d                   	pop    ebp
c00192dc:	c3                   	ret    

c00192dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00192dd:	57                   	push   edi
c00192de:	56                   	push   esi
c00192df:	53                   	push   ebx
c00192e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00192e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00192ec:	83 e8 06             	sub    eax,0x6
c00192ef:	0f b7 c0             	movzx  eax,ax
c00192f2:	50                   	push   eax
c00192f3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00192f8:	50                   	push   eax
c00192f9:	e8 68 fc ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c00192fe:	5a                   	pop    edx
c00192ff:	5e                   	pop    esi
c0019300:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019303:	8d 56 fa             	lea    edx,[esi-0x6]
c0019306:	81 e2 ff ff 00 00    	and    edx,0xffff
c001930c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001930f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019312:	83 c2 02             	add    edx,0x2
c0019315:	66 89 10             	mov    WORD PTR [eax],dx
c0019318:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001931b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001931f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019322:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019326:	89 d6                	mov    esi,edx
c0019328:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001932e:	66 81 e6 ff fd       	and    si,0xfdff
c0019333:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019337:	74 07                	je     c0019340 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019339:	89 d6                	mov    esi,edx
c001933b:	66 81 ce 00 02       	or     si,0x200
c0019340:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019349:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001934d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019355:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019358:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019360:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019363:	5b                   	pop    ebx
c0019364:	5e                   	pop    esi
c0019365:	5f                   	pop    edi
c0019366:	c3                   	ret    

c0019367 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019367:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001936c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019371:	c1 e0 04             	shl    eax,0x4
c0019374:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019377:	c3                   	ret    

c0019378 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019378:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001937d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019382:	c1 e0 04             	shl    eax,0x4
c0019385:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019389:	c3                   	ret    

c001938a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001938a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001938f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019394:	c1 e0 04             	shl    eax,0x4
c0019397:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001939a:	c3                   	ret    

c001939b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001939b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193a5:	c1 e0 04             	shl    eax,0x4
c00193a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00193af:	c3                   	ret    

c00193b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00193b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193ba:	c1 e0 04             	shl    eax,0x4
c00193bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00193c5:	c3                   	ret    

c00193c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00193c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193d0:	c1 e0 04             	shl    eax,0x4
c00193d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00193da:	c3                   	ret    

c00193db <Vm::faultHandler(regs*)>:
c00193db:	55                   	push   ebp
c00193dc:	57                   	push   edi
c00193dd:	56                   	push   esi
c00193de:	53                   	push   ebx
c00193df:	83 ec 1c             	sub    esp,0x1c
c00193e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00193e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193e9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00193ed:	0f b7 f8             	movzx  edi,ax
c00193f0:	52                   	push   edx
c00193f1:	0f b7 c0             	movzx  eax,ax
c00193f4:	50                   	push   eax
c00193f5:	e8 6c fb ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c00193fa:	5a                   	pop    edx
c00193fb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00193fe:	59                   	pop    ecx
c00193ff:	89 c1                	mov    ecx,eax
c0019401:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019404:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019408:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001940d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019411:	0f b7 c5             	movzx  eax,bp
c0019414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019418:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001941c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019420:	e8 41 fb ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c0019425:	5e                   	pop    esi
c0019426:	be 06 00 00 00       	mov    esi,0x6
c001942b:	5a                   	pop    edx
c001942c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019431:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019436:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019439:	80 fa 9d             	cmp    dl,0x9d
c001943c:	0f 84 2c 02 00 00    	je     c001966e <Vm::faultHandler(regs*)+0x293>
c0019442:	0f 87 91 00 00 00    	ja     c00194d9 <Vm::faultHandler(regs*)+0xfe>
c0019448:	80 fa 66             	cmp    dl,0x66
c001944b:	0f 84 98 01 00 00    	je     c00195e9 <Vm::faultHandler(regs*)+0x20e>
c0019451:	77 47                	ja     c001949a <Vm::faultHandler(regs*)+0xbf>
c0019453:	80 fa 36             	cmp    dl,0x36
c0019456:	0f 84 80 01 00 00    	je     c00195dc <Vm::faultHandler(regs*)+0x201>
c001945c:	77 1a                	ja     c0019478 <Vm::faultHandler(regs*)+0x9d>
c001945e:	80 fa 26             	cmp    dl,0x26
c0019461:	0f 84 4e 01 00 00    	je     c00195b5 <Vm::faultHandler(regs*)+0x1da>
c0019467:	80 fa 2e             	cmp    dl,0x2e
c001946a:	0f 85 e2 05 00 00    	jne    c0019a52 <Vm::faultHandler(regs*)+0x677>
c0019470:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019473:	31 f6                	xor    esi,esi
c0019475:	41                   	inc    ecx
c0019476:	eb be                	jmp    c0019436 <Vm::faultHandler(regs*)+0x5b>
c0019478:	80 fa 64             	cmp    dl,0x64
c001947b:	0f 84 41 01 00 00    	je     c00195c2 <Vm::faultHandler(regs*)+0x1e7>
c0019481:	0f 87 48 01 00 00    	ja     c00195cf <Vm::faultHandler(regs*)+0x1f4>
c0019487:	80 fa 3e             	cmp    dl,0x3e
c001948a:	0f 85 c2 05 00 00    	jne    c0019a52 <Vm::faultHandler(regs*)+0x677>
c0019490:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019493:	be 01 00 00 00       	mov    esi,0x1
c0019498:	eb db                	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c001949a:	80 fa 6d             	cmp    dl,0x6d
c001949d:	0f 84 ec 02 00 00    	je     c001978f <Vm::faultHandler(regs*)+0x3b4>
c00194a3:	77 17                	ja     c00194bc <Vm::faultHandler(regs*)+0xe1>
c00194a5:	80 fa 67             	cmp    dl,0x67
c00194a8:	0f 84 48 01 00 00    	je     c00195f6 <Vm::faultHandler(regs*)+0x21b>
c00194ae:	80 fa 6c             	cmp    dl,0x6c
c00194b1:	0f 84 69 02 00 00    	je     c0019720 <Vm::faultHandler(regs*)+0x345>
c00194b7:	e9 96 05 00 00       	jmp    c0019a52 <Vm::faultHandler(regs*)+0x677>
c00194bc:	80 fa 6f             	cmp    dl,0x6f
c00194bf:	0f 84 f4 03 00 00    	je     c00198b9 <Vm::faultHandler(regs*)+0x4de>
c00194c5:	0f 82 59 03 00 00    	jb     c0019824 <Vm::faultHandler(regs*)+0x449>
c00194cb:	80 fa 9c             	cmp    dl,0x9c
c00194ce:	0f 84 2f 01 00 00    	je     c0019603 <Vm::faultHandler(regs*)+0x228>
c00194d4:	e9 79 05 00 00       	jmp    c0019a52 <Vm::faultHandler(regs*)+0x677>
c00194d9:	80 fa ec             	cmp    dl,0xec
c00194dc:	0f 84 14 05 00 00    	je     c00199f6 <Vm::faultHandler(regs*)+0x61b>
c00194e2:	77 7b                	ja     c001955f <Vm::faultHandler(regs*)+0x184>
c00194e4:	80 fa e4             	cmp    dl,0xe4
c00194e7:	0f 84 93 04 00 00    	je     c0019980 <Vm::faultHandler(regs*)+0x5a5>
c00194ed:	77 53                	ja     c0019542 <Vm::faultHandler(regs*)+0x167>
c00194ef:	80 fa cd             	cmp    dl,0xcd
c00194f2:	0f 84 d9 01 00 00    	je     c00196d1 <Vm::faultHandler(regs*)+0x2f6>
c00194f8:	80 fa cf             	cmp    dl,0xcf
c00194fb:	0f 85 51 05 00 00    	jne    c0019a52 <Vm::faultHandler(regs*)+0x677>
c0019501:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019504:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019507:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001950b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001950e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019512:	81 ca 00 02 02 00    	or     edx,0x20200
c0019518:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001951b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001951f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019525:	66 c1 e8 09          	shr    ax,0x9
c0019529:	83 e0 01             	and    eax,0x1
c001952c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001952f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019532:	83 c0 06             	add    eax,0x6
c0019535:	25 ff ff 00 00       	and    eax,0xffff
c001953a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001953d:	e9 0c 05 00 00       	jmp    c0019a4e <Vm::faultHandler(regs*)+0x673>
c0019542:	80 fa e6             	cmp    dl,0xe6
c0019545:	0f 84 7f 04 00 00    	je     c00199ca <Vm::faultHandler(regs*)+0x5ef>
c001954b:	0f 82 4b 04 00 00    	jb     c001999c <Vm::faultHandler(regs*)+0x5c1>
c0019551:	80 fa e7             	cmp    dl,0xe7
c0019554:	0f 84 87 04 00 00    	je     c00199e1 <Vm::faultHandler(regs*)+0x606>
c001955a:	e9 f3 04 00 00       	jmp    c0019a52 <Vm::faultHandler(regs*)+0x677>
c001955f:	80 fa ef             	cmp    dl,0xef
c0019562:	0f 84 d1 04 00 00    	je     c0019a39 <Vm::faultHandler(regs*)+0x65e>
c0019568:	77 28                	ja     c0019592 <Vm::faultHandler(regs*)+0x1b7>
c001956a:	80 fa ed             	cmp    dl,0xed
c001956d:	0f 84 9f 04 00 00    	je     c0019a12 <Vm::faultHandler(regs*)+0x637>
c0019573:	80 fa ee             	cmp    dl,0xee
c0019576:	0f 85 d6 04 00 00    	jne    c0019a52 <Vm::faultHandler(regs*)+0x677>
c001957c:	50                   	push   eax
c001957d:	50                   	push   eax
c001957e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019582:	50                   	push   eax
c0019583:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019587:	50                   	push   eax
c0019588:	e8 a3 f9 ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c001958d:	e9 9f 04 00 00       	jmp    c0019a31 <Vm::faultHandler(regs*)+0x656>
c0019592:	80 fa fa             	cmp    dl,0xfa
c0019595:	0f 84 69 01 00 00    	je     c0019704 <Vm::faultHandler(regs*)+0x329>
c001959b:	80 fa fb             	cmp    dl,0xfb
c001959e:	0f 84 6e 01 00 00    	je     c0019712 <Vm::faultHandler(regs*)+0x337>
c00195a4:	80 fa f3             	cmp    dl,0xf3
c00195a7:	0f 85 a5 04 00 00    	jne    c0019a52 <Vm::faultHandler(regs*)+0x677>
c00195ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195b0:	e9 c0 fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195b8:	be 02 00 00 00       	mov    esi,0x2
c00195bd:	e9 b3 fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195c5:	be 03 00 00 00       	mov    esi,0x3
c00195ca:	e9 a6 fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195d2:	be 04 00 00 00       	mov    esi,0x4
c00195d7:	e9 99 fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195df:	be 05 00 00 00       	mov    esi,0x5
c00195e4:	e9 8c fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195ec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00195f1:	e9 7f fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c00195f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195f9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00195fe:	e9 72 fe ff ff       	jmp    c0019475 <Vm::faultHandler(regs*)+0x9a>
c0019603:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001960a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001960f:	74 30                	je     c0019641 <Vm::faultHandler(regs*)+0x266>
c0019611:	83 e9 04             	sub    ecx,0x4
c0019614:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001961a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019620:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019623:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019626:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001962c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019630:	0f 84 15 04 00 00    	je     c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019636:	80 ce 02             	or     dh,0x2
c0019639:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001963c:	e9 0a 04 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019641:	83 e9 02             	sub    ecx,0x2
c0019644:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001964a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001964d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019651:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019657:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001965b:	74 05                	je     c0019662 <Vm::faultHandler(regs*)+0x287>
c001965d:	80 ce 02             	or     dh,0x2
c0019660:	eb 03                	jmp    c0019665 <Vm::faultHandler(regs*)+0x28a>
c0019662:	80 e6 fd             	and    dh,0xfd
c0019665:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019669:	e9 dd 03 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c001966e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019673:	74 2a                	je     c001969f <Vm::faultHandler(regs*)+0x2c4>
c0019675:	8b 10                	mov    edx,DWORD PTR [eax]
c0019677:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001967d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019683:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019686:	8b 00                	mov    eax,DWORD PTR [eax]
c0019688:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001968e:	c1 e8 09             	shr    eax,0x9
c0019691:	83 e0 01             	and    eax,0x1
c0019694:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019697:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001969a:	83 c0 04             	add    eax,0x4
c001969d:	eb 25                	jmp    c00196c4 <Vm::faultHandler(regs*)+0x2e9>
c001969f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00196a2:	81 ca 00 02 02 00    	or     edx,0x20200
c00196a8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00196ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00196ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00196b4:	66 c1 e8 09          	shr    ax,0x9
c00196b8:	83 e0 01             	and    eax,0x1
c00196bb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00196be:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196c1:	83 c0 02             	add    eax,0x2
c00196c4:	25 ff ff 00 00       	and    eax,0xffff
c00196c9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00196cc:	e9 7a 03 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c00196d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00196d5:	3c ee                	cmp    al,0xee
c00196d7:	75 10                	jne    c00196e9 <Vm::faultHandler(regs*)+0x30e>
c00196d9:	83 ec 0c             	sub    esp,0xc
c00196dc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00196df:	e8 e9 f8 ff ff       	call   c0018fcd <Vm::mainloop3(unsigned long)>
c00196e4:	e9 4b 03 00 00       	jmp    c0019a34 <Vm::faultHandler(regs*)+0x659>
c00196e9:	83 ec 0c             	sub    esp,0xc
c00196ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00196f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196f4:	51                   	push   ecx
c00196f5:	50                   	push   eax
c00196f6:	53                   	push   ebx
c00196f7:	e8 e1 fb ff ff       	call   c00192dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00196fc:	83 c4 20             	add    esp,0x20
c00196ff:	e9 4a 03 00 00       	jmp    c0019a4e <Vm::faultHandler(regs*)+0x673>
c0019704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019709:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001970d:	e9 39 03 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019717:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001971b:	e9 2b 03 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019720:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019723:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019728:	74 2b                	je     c0019755 <Vm::faultHandler(regs*)+0x37a>
c001972a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019731:	76 22                	jbe    c0019755 <Vm::faultHandler(regs*)+0x37a>
c0019733:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019737:	50                   	push   eax
c0019738:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001973c:	50                   	push   eax
c001973d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019741:	50                   	push   eax
c0019742:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019746:	50                   	push   eax
c0019747:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001974b:	50                   	push   eax
c001974c:	6a 6c                	push   0x6c
c001974e:	6a 6c                	push   0x6c
c0019750:	e9 b9 01 00 00       	jmp    c001990e <Vm::faultHandler(regs*)+0x533>
c0019755:	83 ec 0c             	sub    esp,0xc
c0019758:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001975c:	0f b7 f6             	movzx  esi,si
c001975f:	50                   	push   eax
c0019760:	e8 b8 f7 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019765:	83 c4 0c             	add    esp,0xc
c0019768:	0f b6 c0             	movzx  eax,al
c001976b:	50                   	push   eax
c001976c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019770:	50                   	push   eax
c0019771:	56                   	push   esi
c0019772:	e8 24 fc ff ff       	call   c001939b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019777:	83 c4 10             	add    esp,0x10
c001977a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001977d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019781:	74 03                	je     c0019786 <Vm::faultHandler(regs*)+0x3ab>
c0019783:	48                   	dec    eax
c0019784:	eb 01                	jmp    c0019787 <Vm::faultHandler(regs*)+0x3ac>
c0019786:	40                   	inc    eax
c0019787:	0f b7 c0             	movzx  eax,ax
c001978a:	e9 8d 00 00 00       	jmp    c001981c <Vm::faultHandler(regs*)+0x441>
c001978f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019792:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019795:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001979a:	74 29                	je     c00197c5 <Vm::faultHandler(regs*)+0x3ea>
c001979c:	3d ff ff 00 00       	cmp    eax,0xffff
c00197a1:	76 22                	jbe    c00197c5 <Vm::faultHandler(regs*)+0x3ea>
c00197a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00197a7:	50                   	push   eax
c00197a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00197ac:	50                   	push   eax
c00197ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00197b1:	50                   	push   eax
c00197b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00197b6:	50                   	push   eax
c00197b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00197bb:	50                   	push   eax
c00197bc:	6a 6d                	push   0x6d
c00197be:	6a 6d                	push   0x6d
c00197c0:	e9 49 01 00 00       	jmp    c001990e <Vm::faultHandler(regs*)+0x533>
c00197c5:	0f b7 c8             	movzx  ecx,ax
c00197c8:	0f b7 f6             	movzx  esi,si
c00197cb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00197ce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197d3:	74 20                	je     c00197f5 <Vm::faultHandler(regs*)+0x41a>
c00197d5:	ed                   	in     eax,dx
c00197d6:	55                   	push   ebp
c00197d7:	50                   	push   eax
c00197d8:	51                   	push   ecx
c00197d9:	56                   	push   esi
c00197da:	e8 e7 fb ff ff       	call   c00193c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00197df:	83 c4 10             	add    esp,0x10
c00197e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00197e5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197e9:	74 05                	je     c00197f0 <Vm::faultHandler(regs*)+0x415>
c00197eb:	83 e8 04             	sub    eax,0x4
c00197ee:	eb 27                	jmp    c0019817 <Vm::faultHandler(regs*)+0x43c>
c00197f0:	83 c0 04             	add    eax,0x4
c00197f3:	eb 22                	jmp    c0019817 <Vm::faultHandler(regs*)+0x43c>
c00197f5:	66 ed                	in     ax,dx
c00197f7:	0f b7 c0             	movzx  eax,ax
c00197fa:	57                   	push   edi
c00197fb:	50                   	push   eax
c00197fc:	51                   	push   ecx
c00197fd:	56                   	push   esi
c00197fe:	e8 ad fb ff ff       	call   c00193b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019809:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001980d:	74 05                	je     c0019814 <Vm::faultHandler(regs*)+0x439>
c001980f:	83 e8 02             	sub    eax,0x2
c0019812:	eb 03                	jmp    c0019817 <Vm::faultHandler(regs*)+0x43c>
c0019814:	83 c0 02             	add    eax,0x2
c0019817:	25 ff ff 00 00       	and    eax,0xffff
c001981c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001981f:	e9 27 02 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019824:	8d 46 ff             	lea    eax,[esi-0x1]
c0019827:	3c 05                	cmp    al,0x5
c0019829:	77 24                	ja     c001984f <Vm::faultHandler(regs*)+0x474>
c001982b:	0f b6 c0             	movzx  eax,al
c001982e:	ff 24 85 18 60 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9fe8]
c0019835:	0f b7 fd             	movzx  edi,bp
c0019838:	eb 15                	jmp    c001984f <Vm::faultHandler(regs*)+0x474>
c001983a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001983e:	eb 0f                	jmp    c001984f <Vm::faultHandler(regs*)+0x474>
c0019840:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019844:	eb 09                	jmp    c001984f <Vm::faultHandler(regs*)+0x474>
c0019846:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001984a:	eb 03                	jmp    c001984f <Vm::faultHandler(regs*)+0x474>
c001984c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001984f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019852:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019857:	74 29                	je     c0019882 <Vm::faultHandler(regs*)+0x4a7>
c0019859:	3d ff ff 00 00       	cmp    eax,0xffff
c001985e:	76 22                	jbe    c0019882 <Vm::faultHandler(regs*)+0x4a7>
c0019860:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019864:	50                   	push   eax
c0019865:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019869:	50                   	push   eax
c001986a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001986e:	50                   	push   eax
c001986f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019873:	50                   	push   eax
c0019874:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019878:	50                   	push   eax
c0019879:	6a 6e                	push   0x6e
c001987b:	6a 6e                	push   0x6e
c001987d:	e9 8c 00 00 00       	jmp    c001990e <Vm::faultHandler(regs*)+0x533>
c0019882:	0f b7 c0             	movzx  eax,ax
c0019885:	52                   	push   edx
c0019886:	52                   	push   edx
c0019887:	50                   	push   eax
c0019888:	57                   	push   edi
c0019889:	e8 d9 fa ff ff       	call   c0019367 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001988e:	59                   	pop    ecx
c001988f:	0f b6 c0             	movzx  eax,al
c0019892:	5e                   	pop    esi
c0019893:	50                   	push   eax
c0019894:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019898:	50                   	push   eax
c0019899:	e8 92 f6 ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c001989e:	83 c4 10             	add    esp,0x10
c00198a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00198a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00198a8:	74 03                	je     c00198ad <Vm::faultHandler(regs*)+0x4d2>
c00198aa:	48                   	dec    eax
c00198ab:	eb 01                	jmp    c00198ae <Vm::faultHandler(regs*)+0x4d3>
c00198ad:	40                   	inc    eax
c00198ae:	0f b7 c0             	movzx  eax,ax
c00198b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00198b4:	e9 92 01 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c00198b9:	8d 46 ff             	lea    eax,[esi-0x1]
c00198bc:	3c 05                	cmp    al,0x5
c00198be:	77 1f                	ja     c00198df <Vm::faultHandler(regs*)+0x504>
c00198c0:	0f b6 c0             	movzx  eax,al
c00198c3:	ff 24 85 30 60 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9fd0]
c00198ca:	89 ef                	mov    edi,ebp
c00198cc:	eb 11                	jmp    c00198df <Vm::faultHandler(regs*)+0x504>
c00198ce:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00198d1:	eb 0c                	jmp    c00198df <Vm::faultHandler(regs*)+0x504>
c00198d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00198d6:	eb 07                	jmp    c00198df <Vm::faultHandler(regs*)+0x504>
c00198d8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00198db:	eb 02                	jmp    c00198df <Vm::faultHandler(regs*)+0x504>
c00198dd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00198df:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00198e2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00198e7:	74 37                	je     c0019920 <Vm::faultHandler(regs*)+0x545>
c00198e9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00198ef:	76 2f                	jbe    c0019920 <Vm::faultHandler(regs*)+0x545>
c00198f1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198f5:	50                   	push   eax
c00198f6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198fa:	50                   	push   eax
c00198fb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00198ff:	50                   	push   eax
c0019900:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019904:	50                   	push   eax
c0019905:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019909:	50                   	push   eax
c001990a:	6a 6f                	push   0x6f
c001990c:	6a 6f                	push   0x6f
c001990e:	68 be 5f 02 c0       	push   0xc0025fbe
c0019913:	e8 fb 36 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0019918:	83 c4 20             	add    esp,0x20
c001991b:	e9 86 01 00 00       	jmp    c0019aa6 <Vm::faultHandler(regs*)+0x6cb>
c0019920:	0f b7 d7             	movzx  edx,di
c0019923:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019926:	0f b7 c6             	movzx  eax,si
c0019929:	81 e1 00 04 00 00    	and    ecx,0x400
c001992f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019932:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019937:	74 1d                	je     c0019956 <Vm::faultHandler(regs*)+0x57b>
c0019939:	55                   	push   ebp
c001993a:	55                   	push   ebp
c001993b:	50                   	push   eax
c001993c:	52                   	push   edx
c001993d:	e8 48 fa ff ff       	call   c001938a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019942:	83 c4 10             	add    esp,0x10
c0019945:	89 fa                	mov    edx,edi
c0019947:	ef                   	out    dx,eax
c0019948:	85 c9                	test   ecx,ecx
c001994a:	74 05                	je     c0019951 <Vm::faultHandler(regs*)+0x576>
c001994c:	83 ee 04             	sub    esi,0x4
c001994f:	eb 21                	jmp    c0019972 <Vm::faultHandler(regs*)+0x597>
c0019951:	83 c6 04             	add    esi,0x4
c0019954:	eb 1c                	jmp    c0019972 <Vm::faultHandler(regs*)+0x597>
c0019956:	55                   	push   ebp
c0019957:	55                   	push   ebp
c0019958:	50                   	push   eax
c0019959:	52                   	push   edx
c001995a:	e8 19 fa ff ff       	call   c0019378 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	89 fa                	mov    edx,edi
c0019964:	66 ef                	out    dx,ax
c0019966:	85 c9                	test   ecx,ecx
c0019968:	74 05                	je     c001996f <Vm::faultHandler(regs*)+0x594>
c001996a:	83 ee 02             	sub    esi,0x2
c001996d:	eb 03                	jmp    c0019972 <Vm::faultHandler(regs*)+0x597>
c001996f:	83 c6 02             	add    esi,0x2
c0019972:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019978:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001997b:	e9 cb 00 00 00       	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019980:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019987:	83 ec 0c             	sub    esp,0xc
c001998a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001998e:	50                   	push   eax
c001998f:	e8 89 f5 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019994:	0f b6 c0             	movzx  eax,al
c0019997:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001999a:	eb 3f                	jmp    c00199db <Vm::faultHandler(regs*)+0x600>
c001999c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199a1:	74 07                	je     c00199aa <Vm::faultHandler(regs*)+0x5cf>
c00199a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00199a7:	ed                   	in     eax,dx
c00199a8:	eb 14                	jmp    c00199be <Vm::faultHandler(regs*)+0x5e3>
c00199aa:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00199ad:	66 31 f6             	xor    si,si
c00199b0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00199b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00199b7:	66 ed                	in     ax,dx
c00199b9:	0f b7 c0             	movzx  eax,ax
c00199bc:	09 f0                	or     eax,esi
c00199be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199c5:	e9 84 00 00 00       	jmp    c0019a4e <Vm::faultHandler(regs*)+0x673>
c00199ca:	52                   	push   edx
c00199cb:	52                   	push   edx
c00199cc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00199d0:	50                   	push   eax
c00199d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199d5:	50                   	push   eax
c00199d6:	e8 55 f5 ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c00199db:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199df:	eb 53                	jmp    c0019a34 <Vm::faultHandler(regs*)+0x659>
c00199e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199e4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00199e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199ed:	74 03                	je     c00199f2 <Vm::faultHandler(regs*)+0x617>
c00199ef:	ef                   	out    dx,eax
c00199f0:	eb cf                	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5e6>
c00199f2:	66 ef                	out    dx,ax
c00199f4:	eb cb                	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5e6>
c00199f6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00199fd:	83 ec 0c             	sub    esp,0xc
c0019a00:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a04:	50                   	push   eax
c0019a05:	e8 13 f5 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019a0a:	0f b6 c0             	movzx  eax,al
c0019a0d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019a10:	eb 1f                	jmp    c0019a31 <Vm::faultHandler(regs*)+0x656>
c0019a12:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a15:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a1a:	74 03                	je     c0019a1f <Vm::faultHandler(regs*)+0x644>
c0019a1c:	ed                   	in     eax,dx
c0019a1d:	eb 0d                	jmp    c0019a2c <Vm::faultHandler(regs*)+0x651>
c0019a1f:	66 ed                	in     ax,dx
c0019a21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019a24:	0f b7 c0             	movzx  eax,ax
c0019a27:	66 31 d2             	xor    dx,dx
c0019a2a:	09 d0                	or     eax,edx
c0019a2c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019a2f:	eb 1a                	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019a31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	eb 15                	jmp    c0019a4e <Vm::faultHandler(regs*)+0x673>
c0019a39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019a3c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a3f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a44:	74 03                	je     c0019a49 <Vm::faultHandler(regs*)+0x66e>
c0019a46:	ef                   	out    dx,eax
c0019a47:	eb 02                	jmp    c0019a4b <Vm::faultHandler(regs*)+0x670>
c0019a49:	66 ef                	out    dx,ax
c0019a4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a4e:	b0 01                	mov    al,0x1
c0019a50:	eb 56                	jmp    c0019aa8 <Vm::faultHandler(regs*)+0x6cd>
c0019a52:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a56:	50                   	push   eax
c0019a57:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a5b:	50                   	push   eax
c0019a5c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a60:	50                   	push   eax
c0019a61:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a65:	50                   	push   eax
c0019a66:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a6a:	50                   	push   eax
c0019a6b:	52                   	push   edx
c0019a6c:	52                   	push   edx
c0019a6d:	68 eb 5f 02 c0       	push   0xc0025feb
c0019a72:	e8 9c 35 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0019a77:	83 c4 20             	add    esp,0x20
c0019a7a:	83 ec 0c             	sub    esp,0xc
c0019a7d:	6a 60                	push   0x60
c0019a7f:	e8 99 f4 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	3c 1c                	cmp    al,0x1c
c0019a89:	74 04                	je     c0019a8f <Vm::faultHandler(regs*)+0x6b4>
c0019a8b:	3c 5a                	cmp    al,0x5a
c0019a8d:	75 eb                	jne    c0019a7a <Vm::faultHandler(regs*)+0x69f>
c0019a8f:	3c 5a                	cmp    al,0x5a
c0019a91:	74 04                	je     c0019a97 <Vm::faultHandler(regs*)+0x6bc>
c0019a93:	3c 1c                	cmp    al,0x1c
c0019a95:	75 0f                	jne    c0019aa6 <Vm::faultHandler(regs*)+0x6cb>
c0019a97:	83 ec 0c             	sub    esp,0xc
c0019a9a:	6a 60                	push   0x60
c0019a9c:	e8 7c f4 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019aa1:	83 c4 10             	add    esp,0x10
c0019aa4:	eb e9                	jmp    c0019a8f <Vm::faultHandler(regs*)+0x6b4>
c0019aa6:	31 c0                	xor    eax,eax
c0019aa8:	83 c4 1c             	add    esp,0x1c
c0019aab:	5b                   	pop    ebx
c0019aac:	5e                   	pop    esi
c0019aad:	5f                   	pop    edi
c0019aae:	5d                   	pop    ebp
c0019aaf:	c3                   	ret    

c0019ab0 <Vm::fpuInternalTo32(unsigned long long)>:
c0019ab0:	57                   	push   edi
c0019ab1:	56                   	push   esi
c0019ab2:	53                   	push   ebx
c0019ab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abb:	89 d6                	mov    esi,edx
c0019abd:	89 d7                	mov    edi,edx
c0019abf:	89 c1                	mov    ecx,eax
c0019ac1:	c1 ef 14             	shr    edi,0x14
c0019ac4:	89 d3                	mov    ebx,edx
c0019ac6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019acc:	31 d2                	xor    edx,edx
c0019ace:	89 f8                	mov    eax,edi
c0019ad0:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019ad6:	bf ff 00 00 00       	mov    edi,0xff
c0019adb:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019ae0:	83 d2 ff             	adc    edx,0xffffffff
c0019ae3:	39 c7                	cmp    edi,eax
c0019ae5:	bf 00 00 00 00       	mov    edi,0x0
c0019aea:	19 d7                	sbb    edi,edx
c0019aec:	72 16                	jb     c0019b04 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019aee:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019af2:	c1 e0 17             	shl    eax,0x17
c0019af5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019afb:	09 f1                	or     ecx,esi
c0019afd:	09 c1                	or     ecx,eax
c0019aff:	89 cf                	mov    edi,ecx
c0019b01:	eb 05                	jmp    c0019b08 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019b03:	90                   	nop
c0019b04:	31 ff                	xor    edi,edi
c0019b06:	66 90                	xchg   ax,ax
c0019b08:	89 f8                	mov    eax,edi
c0019b0a:	5b                   	pop    ebx
c0019b0b:	5e                   	pop    esi
c0019b0c:	5f                   	pop    edi
c0019b0d:	c3                   	ret    

c0019b0e <Vm::fpuInternalTo64(unsigned long long)>:
c0019b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b16:	c3                   	ret    

c0019b17 <Vm::fpu32ToInternal(unsigned int)>:
c0019b17:	57                   	push   edi
c0019b18:	31 ff                	xor    edi,edi
c0019b1a:	56                   	push   esi
c0019b1b:	53                   	push   ebx
c0019b1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b20:	89 cb                	mov    ebx,ecx
c0019b22:	89 ce                	mov    esi,ecx
c0019b24:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019b2a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019b30:	c1 e9 17             	shr    ecx,0x17
c0019b33:	89 f0                	mov    eax,esi
c0019b35:	0f b6 d1             	movzx  edx,cl
c0019b38:	81 c2 80 03 00 00    	add    edx,0x380
c0019b3e:	89 d1                	mov    ecx,edx
c0019b40:	89 fa                	mov    edx,edi
c0019b42:	c1 e1 14             	shl    ecx,0x14
c0019b45:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019b49:	c1 e0 1d             	shl    eax,0x1d
c0019b4c:	89 d7                	mov    edi,edx
c0019b4e:	89 c6                	mov    esi,eax
c0019b50:	89 ca                	mov    edx,ecx
c0019b52:	89 f0                	mov    eax,esi
c0019b54:	09 fa                	or     edx,edi
c0019b56:	09 da                	or     edx,ebx
c0019b58:	5b                   	pop    ebx
c0019b59:	5e                   	pop    esi
c0019b5a:	5f                   	pop    edi
c0019b5b:	c3                   	ret    

c0019b5c <Vm::fpu64ToInternal(unsigned long long)>:
c0019b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b64:	c3                   	ret    

c0019b65 <Vm::fpuFloatToLong(unsigned long long)>:
c0019b65:	57                   	push   edi
c0019b66:	31 c0                	xor    eax,eax
c0019b68:	56                   	push   esi
c0019b69:	31 d2                	xor    edx,edx
c0019b6b:	53                   	push   ebx
c0019b6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b74:	89 d9                	mov    ecx,ebx
c0019b76:	c1 e9 14             	shr    ecx,0x14
c0019b79:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019b7f:	89 cf                	mov    edi,ecx
c0019b81:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019b87:	78 37                	js     c0019bc0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b89:	89 d9                	mov    ecx,ebx
c0019b8b:	89 f0                	mov    eax,esi
c0019b8d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b93:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019b99:	89 ca                	mov    edx,ecx
c0019b9b:	b9 34 00 00 00       	mov    ecx,0x34
c0019ba0:	29 f9                	sub    ecx,edi
c0019ba2:	0f ad d0             	shrd   eax,edx,cl
c0019ba5:	d3 fa                	sar    edx,cl
c0019ba7:	f6 c1 20             	test   cl,0x20
c0019baa:	74 08                	je     c0019bb4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019bac:	89 d0                	mov    eax,edx
c0019bae:	c1 fa 1f             	sar    edx,0x1f
c0019bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb4:	85 db                	test   ebx,ebx
c0019bb6:	79 08                	jns    c0019bc0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019bb8:	f7 d8                	neg    eax
c0019bba:	83 d2 00             	adc    edx,0x0
c0019bbd:	f7 da                	neg    edx
c0019bbf:	90                   	nop
c0019bc0:	5b                   	pop    ebx
c0019bc1:	5e                   	pop    esi
c0019bc2:	5f                   	pop    edi
c0019bc3:	c3                   	ret    

c0019bc4 <Vm::fpuULongToFloat(unsigned long long)>:
c0019bc4:	57                   	push   edi
c0019bc5:	31 c9                	xor    ecx,ecx
c0019bc7:	56                   	push   esi
c0019bc8:	53                   	push   ebx
c0019bc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bcd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bd4:	0f ba e7 14          	bt     edi,0x14
c0019bd8:	72 0a                	jb     c0019be4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019bda:	01 f6                	add    esi,esi
c0019bdc:	11 ff                	adc    edi,edi
c0019bde:	41                   	inc    ecx
c0019bdf:	eb f3                	jmp    c0019bd4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019be1:	8d 76 00             	lea    esi,[esi+0x0]
c0019be4:	89 fa                	mov    edx,edi
c0019be6:	89 f0                	mov    eax,esi
c0019be8:	bb 33 04 00 00       	mov    ebx,0x433
c0019bed:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019bf3:	29 cb                	sub    ebx,ecx
c0019bf5:	89 d9                	mov    ecx,ebx
c0019bf7:	5b                   	pop    ebx
c0019bf8:	c1 e1 14             	shl    ecx,0x14
c0019bfb:	5e                   	pop    esi
c0019bfc:	09 ca                	or     edx,ecx
c0019bfe:	5f                   	pop    edi
c0019bff:	c3                   	ret    

c0019c00 <Vm::fpuLongToFloat(long long)>:
c0019c00:	56                   	push   esi
c0019c01:	31 c0                	xor    eax,eax
c0019c03:	53                   	push   ebx
c0019c04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019c08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c0c:	39 c8                	cmp    eax,ecx
c0019c0e:	19 d8                	sbb    eax,ebx
c0019c10:	7d 06                	jge    c0019c18 <Vm::fpuLongToFloat(long long)+0x18>
c0019c12:	31 f6                	xor    esi,esi
c0019c14:	eb 0e                	jmp    c0019c24 <Vm::fpuLongToFloat(long long)+0x24>
c0019c16:	66 90                	xchg   ax,ax
c0019c18:	f7 d9                	neg    ecx
c0019c1a:	be 01 00 00 00       	mov    esi,0x1
c0019c1f:	83 d3 00             	adc    ebx,0x0
c0019c22:	f7 db                	neg    ebx
c0019c24:	31 c0                	xor    eax,eax
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	0f ba e3 14          	bt     ebx,0x14
c0019c2c:	72 0a                	jb     c0019c38 <Vm::fpuLongToFloat(long long)+0x38>
c0019c2e:	01 c9                	add    ecx,ecx
c0019c30:	11 db                	adc    ebx,ebx
c0019c32:	40                   	inc    eax
c0019c33:	eb f3                	jmp    c0019c28 <Vm::fpuLongToFloat(long long)+0x28>
c0019c35:	8d 76 00             	lea    esi,[esi+0x0]
c0019c38:	ba 33 04 00 00       	mov    edx,0x433
c0019c3d:	29 c2                	sub    edx,eax
c0019c3f:	89 c8                	mov    eax,ecx
c0019c41:	c1 e2 14             	shl    edx,0x14
c0019c44:	89 d9                	mov    ecx,ebx
c0019c46:	89 f3                	mov    ebx,esi
c0019c48:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019c4e:	09 ca                	or     edx,ecx
c0019c50:	84 db                	test   bl,bl
c0019c52:	74 08                	je     c0019c5c <Vm::fpuLongToFloat(long long)+0x5c>
c0019c54:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019c5a:	66 90                	xchg   ax,ax
c0019c5c:	5b                   	pop    ebx
c0019c5d:	5e                   	pop    esi
c0019c5e:	c3                   	ret    

c0019c5f <Vm::fpuGet0()>:
c0019c5f:	31 c0                	xor    eax,eax
c0019c61:	31 d2                	xor    edx,edx
c0019c63:	c3                   	ret    

c0019c64 <Vm::fpuGet1()>:
c0019c64:	b8 01 00 00 00       	mov    eax,0x1
c0019c69:	31 d2                	xor    edx,edx
c0019c6b:	c3                   	ret    

c0019c6c <Vm::fpuGetPi()>:
c0019c6c:	b8 03 00 00 00       	mov    eax,0x3
c0019c71:	31 d2                	xor    edx,edx
c0019c73:	c3                   	ret    

c0019c74 <Vm::fpuGetLog2E()>:
c0019c74:	83 ec 18             	sub    esp,0x18
c0019c77:	68 48 60 02 c0       	push   0xc0026048
c0019c7c:	e8 f0 b0 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019c81:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c86:	31 d2                	xor    edx,edx
c0019c88:	83 c4 1c             	add    esp,0x1c
c0019c8b:	c3                   	ret    

c0019c8c <Vm::fpuGetLogE2()>:
c0019c8c:	83 ec 18             	sub    esp,0x18
c0019c8f:	68 54 60 02 c0       	push   0xc0026054
c0019c94:	e8 d8 b0 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019c99:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c9e:	31 d2                	xor    edx,edx
c0019ca0:	83 c4 1c             	add    esp,0x1c
c0019ca3:	c3                   	ret    

c0019ca4 <Vm::fpuGetLog210()>:
c0019ca4:	83 ec 18             	sub    esp,0x18
c0019ca7:	68 60 60 02 c0       	push   0xc0026060
c0019cac:	e8 c0 b0 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019cb1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019cb6:	31 d2                	xor    edx,edx
c0019cb8:	83 c4 1c             	add    esp,0x1c
c0019cbb:	c3                   	ret    

c0019cbc <Vm::fpuGetLog102()>:
c0019cbc:	83 ec 18             	sub    esp,0x18
c0019cbf:	68 6d 60 02 c0       	push   0xc002606d
c0019cc4:	e8 a8 b0 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019cc9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019cce:	31 d2                	xor    edx,edx
c0019cd0:	83 c4 1c             	add    esp,0x1c
c0019cd3:	c3                   	ret    

c0019cd4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cd8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019cdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ce0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019ce4:	0f 92 c0             	setb   al
c0019ce7:	c3                   	ret    

c0019ce8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019cf4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019cf8:	09 c2                	or     edx,eax
c0019cfa:	0f 94 c0             	sete   al
c0019cfd:	c3                   	ret    

c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019cfe:	57                   	push   edi
c0019cff:	56                   	push   esi
c0019d00:	53                   	push   ebx
c0019d01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019d05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019d0d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d11:	57                   	push   edi
c0019d12:	56                   	push   esi
c0019d13:	53                   	push   ebx
c0019d14:	51                   	push   ecx
c0019d15:	e8 ce ff ff ff       	call   c0019ce8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019d1a:	83 c4 10             	add    esp,0x10
c0019d1d:	88 c2                	mov    dl,al
c0019d1f:	31 c0                	xor    eax,eax
c0019d21:	84 d2                	test   dl,dl
c0019d23:	75 0f                	jne    c0019d34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019d25:	57                   	push   edi
c0019d26:	56                   	push   esi
c0019d27:	53                   	push   ebx
c0019d28:	51                   	push   ecx
c0019d29:	e8 a6 ff ff ff       	call   c0019cd4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019d2e:	83 c4 10             	add    esp,0x10
c0019d31:	8d 76 00             	lea    esi,[esi+0x0]
c0019d34:	83 e0 01             	and    eax,0x1
c0019d37:	5b                   	pop    ebx
c0019d38:	88 c1                	mov    cl,al
c0019d3a:	83 e2 01             	and    edx,0x1
c0019d3d:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019d42:	c1 e2 06             	shl    edx,0x6
c0019d45:	83 e0 ba             	and    eax,0xffffffba
c0019d48:	5e                   	pop    esi
c0019d49:	09 c8                	or     eax,ecx
c0019d4b:	5f                   	pop    edi
c0019d4c:	09 d0                	or     eax,edx
c0019d4e:	a2 61 92 02 c0       	mov    ds:0xc0029261,al
c0019d53:	c3                   	ret    

c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019d54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d5c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019d60:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019d64:	c3                   	ret    

c0019d65 <Vm::fpuAbs(unsigned long long)>:
c0019d65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d6d:	c3                   	ret    

c0019d6e <Vm::fpuChs(unsigned long long)>:
c0019d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d76:	f7 d8                	neg    eax
c0019d78:	83 d2 00             	adc    edx,0x0
c0019d7b:	f7 da                	neg    edx
c0019d7d:	c3                   	ret    

c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019d7e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019d82:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019d87:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019d8b:	eb c7                	jmp    c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019d8d:	53                   	push   ebx
c0019d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d9e:	0f af ca             	imul   ecx,edx
c0019da1:	0f af d8             	imul   ebx,eax
c0019da4:	f7 e2                	mul    edx
c0019da6:	01 d9                	add    ecx,ebx
c0019da8:	5b                   	pop    ebx
c0019da9:	01 ca                	add    edx,ecx
c0019dab:	c3                   	ret    

c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019dac:	83 ec 0c             	sub    esp,0xc
c0019daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019db3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019db7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dbf:	e8 fc 86 00 00       	call   c00224c0 <__udivdi3>
c0019dc4:	83 c4 1c             	add    esp,0x1c
c0019dc7:	c3                   	ret    

c0019dc8 <Vm::fpuSquare(unsigned long long)>:
c0019dc8:	50                   	push   eax
c0019dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019dd1:	52                   	push   edx
c0019dd2:	50                   	push   eax
c0019dd3:	52                   	push   edx
c0019dd4:	50                   	push   eax
c0019dd5:	e8 b3 ff ff ff       	call   c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019dda:	83 c4 14             	add    esp,0x14
c0019ddd:	c3                   	ret    

c0019dde <Vm::fpuGetReg(int)>:
c0019dde:	83 ec 0c             	sub    esp,0xc
c0019de1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019de6:	76 10                	jbe    c0019df8 <Vm::fpuGetReg(int)+0x1a>
c0019de8:	83 ec 0c             	sub    esp,0xc
c0019deb:	68 7a 60 02 c0       	push   0xc002607a
c0019df0:	e8 7c af ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019df5:	83 c4 10             	add    esp,0x10
c0019df8:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019dfd:	b9 08 00 00 00       	mov    ecx,0x8
c0019e02:	c0 e8 03             	shr    al,0x3
c0019e05:	83 e0 07             	and    eax,0x7
c0019e08:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019e0c:	99                   	cdq    
c0019e0d:	f7 f9                	idiv   ecx
c0019e0f:	8b 04 d5 64 92 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6d9c]
c0019e16:	8b 14 d5 68 92 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6d98]
c0019e1d:	83 c4 0c             	add    esp,0xc
c0019e20:	c3                   	ret    

c0019e21 <Vm::fpuSetReg(int, unsigned long long)>:
c0019e21:	57                   	push   edi
c0019e22:	56                   	push   esi
c0019e23:	52                   	push   edx
c0019e24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e28:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e2c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019e31:	76 11                	jbe    c0019e44 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019e33:	83 ec 0c             	sub    esp,0xc
c0019e36:	68 8d 60 02 c0       	push   0xc002608d
c0019e3b:	e8 31 af ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	90                   	nop
c0019e44:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019e49:	b9 08 00 00 00       	mov    ecx,0x8
c0019e4e:	c0 e8 03             	shr    al,0x3
c0019e51:	83 e0 07             	and    eax,0x7
c0019e54:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019e58:	99                   	cdq    
c0019e59:	f7 f9                	idiv   ecx
c0019e5b:	89 34 d5 64 92 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6d9c],esi
c0019e62:	89 3c d5 68 92 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6d98],edi
c0019e69:	58                   	pop    eax
c0019e6a:	5e                   	pop    esi
c0019e6b:	5f                   	pop    edi
c0019e6c:	c3                   	ret    

c0019e6d <Vm::fpuPush(unsigned long long)>:
c0019e6d:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019e72:	c0 e8 03             	shr    al,0x3
c0019e75:	83 e0 07             	and    eax,0x7
c0019e78:	83 c0 07             	add    eax,0x7
c0019e7b:	88 c2                	mov    dl,al
c0019e7d:	83 e0 07             	and    eax,0x7
c0019e80:	83 e2 07             	and    edx,0x7
c0019e83:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019e8a:	8a 15 61 92 02 c0    	mov    dl,BYTE PTR ds:0xc0029261
c0019e90:	83 e2 c7             	and    edx,0xffffffc7
c0019e93:	09 ca                	or     edx,ecx
c0019e95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e99:	88 15 61 92 02 c0    	mov    BYTE PTR ds:0xc0029261,dl
c0019e9f:	89 0c c5 68 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d98],ecx
c0019ea6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019eaa:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0019eb1:	a1 a4 92 02 c0       	mov    eax,ds:0xc00292a4
c0019eb6:	83 f8 08             	cmp    eax,0x8
c0019eb9:	75 09                	jne    c0019ec4 <Vm::fpuPush(unsigned long long)+0x57>
c0019ebb:	80 0d 60 92 02 c0 40 	or     BYTE PTR ds:0xc0029260,0x40
c0019ec2:	c3                   	ret    
c0019ec3:	90                   	nop
c0019ec4:	40                   	inc    eax
c0019ec5:	a3 a4 92 02 c0       	mov    ds:0xc00292a4,eax
c0019eca:	c3                   	ret    

c0019ecb <Vm::fpuPop()>:
c0019ecb:	8a 0d 61 92 02 c0    	mov    cl,BYTE PTR ds:0xc0029261
c0019ed1:	53                   	push   ebx
c0019ed2:	c0 e9 03             	shr    cl,0x3
c0019ed5:	8a 1d 61 92 02 c0    	mov    bl,BYTE PTR ds:0xc0029261
c0019edb:	83 e1 07             	and    ecx,0x7
c0019ede:	83 e3 c7             	and    ebx,0xffffffc7
c0019ee1:	8b 04 cd 64 92 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6d9c]
c0019ee8:	8b 14 cd 68 92 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6d98]
c0019eef:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019ef6:	83 e1 38             	and    ecx,0x38
c0019ef9:	09 d9                	or     ecx,ebx
c0019efb:	88 0d 61 92 02 c0    	mov    BYTE PTR ds:0xc0029261,cl
c0019f01:	8b 0d a4 92 02 c0    	mov    ecx,DWORD PTR ds:0xc00292a4
c0019f07:	85 c9                	test   ecx,ecx
c0019f09:	74 09                	je     c0019f14 <Vm::fpuPop()+0x49>
c0019f0b:	49                   	dec    ecx
c0019f0c:	89 0d a4 92 02 c0    	mov    DWORD PTR ds:0xc00292a4,ecx
c0019f12:	eb 08                	jmp    c0019f1c <Vm::fpuPop()+0x51>
c0019f14:	80 0d 60 92 02 c0 40 	or     BYTE PTR ds:0xc0029260,0x40
c0019f1b:	90                   	nop
c0019f1c:	5b                   	pop    ebx
c0019f1d:	c3                   	ret    

c0019f1e <Vm::x87Handler(regs*)>:
c0019f1e:	55                   	push   ebp
c0019f1f:	57                   	push   edi
c0019f20:	56                   	push   esi
c0019f21:	53                   	push   ebx
c0019f22:	83 ec 1c             	sub    esp,0x1c
c0019f25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f29:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019f2e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019f31:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019f39:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019f3d:	50                   	push   eax
c0019f3e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019f42:	50                   	push   eax
c0019f43:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f47:	50                   	push   eax
c0019f48:	53                   	push   ebx
c0019f49:	e8 3c a5 ff ff       	call   c001448a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019f4e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019f51:	83 c4 10             	add    esp,0x10
c0019f54:	89 c6                	mov    esi,eax
c0019f56:	80 fa d9             	cmp    dl,0xd9
c0019f59:	0f 85 79 01 00 00    	jne    c001a0d8 <Vm::x87Handler(regs*)+0x1ba>
c0019f5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f63:	8d 50 20             	lea    edx,[eax+0x20]
c0019f66:	80 fa 0e             	cmp    dl,0xe
c0019f69:	0f 87 a5 00 00 00    	ja     c001a014 <Vm::x87Handler(regs*)+0xf6>
c0019f6f:	0f b6 d2             	movzx  edx,dl
c0019f72:	ff 24 95 a0 60 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9f60]
c0019f79:	8d 76 00             	lea    esi,[esi+0x0]
c0019f7c:	e8 de fc ff ff       	call   c0019c5f <Vm::fpuGet0()>
c0019f81:	eb 09                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c0019f83:	90                   	nop
c0019f84:	e8 db fc ff ff       	call   c0019c64 <Vm::fpuGet1()>
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	57                   	push   edi
c0019f8d:	57                   	push   edi
c0019f8e:	66 90                	xchg   ax,ax
c0019f90:	52                   	push   edx
c0019f91:	50                   	push   eax
c0019f92:	e8 d6 fe ff ff       	call   c0019e6d <Vm::fpuPush(unsigned long long)>
c0019f97:	90                   	nop
c0019f98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f9c:	83 c4 10             	add    esp,0x10
c0019f9f:	90                   	nop
c0019fa0:	b0 01                	mov    al,0x1
c0019fa2:	e9 89 0a 00 00       	jmp    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c0019fa7:	90                   	nop
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	6a 00                	push   0x0
c0019fad:	e8 2c fe ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c0019fb2:	59                   	pop    ecx
c0019fb3:	5e                   	pop    esi
c0019fb4:	52                   	push   edx
c0019fb5:	50                   	push   eax
c0019fb6:	e8 b3 fd ff ff       	call   c0019d6e <Vm::fpuChs(unsigned long long)>
c0019fbb:	eb 17                	jmp    c0019fd4 <Vm::x87Handler(regs*)+0xb6>
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	83 ec 0c             	sub    esp,0xc
c0019fc3:	6a 00                	push   0x0
c0019fc5:	e8 14 fe ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c0019fca:	5f                   	pop    edi
c0019fcb:	5d                   	pop    ebp
c0019fcc:	52                   	push   edx
c0019fcd:	50                   	push   eax
c0019fce:	e8 92 fd ff ff       	call   c0019d65 <Vm::fpuAbs(unsigned long long)>
c0019fd3:	90                   	nop
c0019fd4:	83 c4 0c             	add    esp,0xc
c0019fd7:	90                   	nop
c0019fd8:	52                   	push   edx
c0019fd9:	50                   	push   eax
c0019fda:	66 90                	xchg   ax,ax
c0019fdc:	6a 00                	push   0x0
c0019fde:	66 90                	xchg   ax,ax
c0019fe0:	e8 3c fe ff ff       	call   c0019e21 <Vm::fpuSetReg(int, unsigned long long)>
c0019fe5:	eb b1                	jmp    c0019f98 <Vm::x87Handler(regs*)+0x7a>
c0019fe7:	90                   	nop
c0019fe8:	e8 b7 fc ff ff       	call   c0019ca4 <Vm::fpuGetLog210()>
c0019fed:	eb 9d                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c0019fef:	90                   	nop
c0019ff0:	e8 7f fc ff ff       	call   c0019c74 <Vm::fpuGetLog2E()>
c0019ff5:	eb 95                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c0019ff7:	90                   	nop
c0019ff8:	e8 6f fc ff ff       	call   c0019c6c <Vm::fpuGetPi()>
c0019ffd:	eb 8d                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c0019fff:	90                   	nop
c001a000:	e8 b7 fc ff ff       	call   c0019cbc <Vm::fpuGetLog102()>
c001a005:	eb 85                	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c001a007:	90                   	nop
c001a008:	e8 7f fc ff ff       	call   c0019c8c <Vm::fpuGetLogE2()>
c001a00d:	e9 7a ff ff ff       	jmp    c0019f8c <Vm::x87Handler(regs*)+0x6e>
c001a012:	66 90                	xchg   ax,ax
c001a014:	8d 50 40             	lea    edx,[eax+0x40]
c001a017:	80 fa 07             	cmp    dl,0x7
c001a01a:	77 18                	ja     c001a034 <Vm::x87Handler(regs*)+0x116>
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	2d c0 00 00 00       	sub    eax,0xc0
c001a024:	50                   	push   eax
c001a025:	e8 b4 fd ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a02a:	59                   	pop    ecx
c001a02b:	5e                   	pop    esi
c001a02c:	e9 5f ff ff ff       	jmp    c0019f90 <Vm::x87Handler(regs*)+0x72>
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	8d 50 38             	lea    edx,[eax+0x38]
c001a037:	80 fa 07             	cmp    dl,0x7
c001a03a:	77 3c                	ja     c001a078 <Vm::x87Handler(regs*)+0x15a>
c001a03c:	83 ec 0c             	sub    esp,0xc
c001a03f:	2d c8 00 00 00       	sub    eax,0xc8
c001a044:	50                   	push   eax
c001a045:	e8 94 fd ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a04a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a051:	89 c6                	mov    esi,eax
c001a053:	89 d7                	mov    edi,edx
c001a055:	e8 84 fd ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a05a:	83 c4 0c             	add    esp,0xc
c001a05d:	52                   	push   edx
c001a05e:	50                   	push   eax
c001a05f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a063:	2d c8 00 00 00       	sub    eax,0xc8
c001a068:	50                   	push   eax
c001a069:	e8 b3 fd ff ff       	call   c0019e21 <Vm::fpuSetReg(int, unsigned long long)>
c001a06e:	83 c4 0c             	add    esp,0xc
c001a071:	57                   	push   edi
c001a072:	56                   	push   esi
c001a073:	e9 64 ff ff ff       	jmp    c0019fdc <Vm::x87Handler(regs*)+0xbe>
c001a078:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a07c:	84 d2                	test   dl,dl
c001a07e:	75 10                	jne    c001a090 <Vm::x87Handler(regs*)+0x172>
c001a080:	83 ec 0c             	sub    esp,0xc
c001a083:	ff 36                	push   DWORD PTR [esi]
c001a085:	e8 8d fa ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a08a:	e9 c9 00 00 00       	jmp    c001a158 <Vm::x87Handler(regs*)+0x23a>
c001a08f:	90                   	nop
c001a090:	80 fa 03             	cmp    dl,0x3
c001a093:	75 13                	jne    c001a0a8 <Vm::x87Handler(regs*)+0x18a>
c001a095:	e8 31 fe ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a09a:	55                   	push   ebp
c001a09b:	55                   	push   ebp
c001a09c:	52                   	push   edx
c001a09d:	50                   	push   eax
c001a09e:	e8 0d fa ff ff       	call   c0019ab0 <Vm::fpuInternalTo32(unsigned long long)>
c001a0a3:	e9 90 00 00 00       	jmp    c001a138 <Vm::x87Handler(regs*)+0x21a>
c001a0a8:	80 fa 05             	cmp    dl,0x5
c001a0ab:	75 0f                	jne    c001a0bc <Vm::x87Handler(regs*)+0x19e>
c001a0ad:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a0b0:	66 a3 62 92 02 c0    	mov    ds:0xc0029262,ax
c001a0b6:	e9 ed 00 00 00       	jmp    c001a1a8 <Vm::x87Handler(regs*)+0x28a>
c001a0bb:	90                   	nop
c001a0bc:	31 c0                	xor    eax,eax
c001a0be:	80 fa 07             	cmp    dl,0x7
c001a0c1:	0f 85 69 09 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a0c7:	66 a1 62 92 02 c0    	mov    ax,ds:0xc0029262
c001a0cd:	66 89 06             	mov    WORD PTR [esi],ax
c001a0d0:	e9 d3 00 00 00       	jmp    c001a1a8 <Vm::x87Handler(regs*)+0x28a>
c001a0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d8:	80 fa d8             	cmp    dl,0xd8
c001a0db:	0f 84 d3 00 00 00    	je     c001a1b4 <Vm::x87Handler(regs*)+0x296>
c001a0e1:	80 fa dc             	cmp    dl,0xdc
c001a0e4:	0f 84 2a 02 00 00    	je     c001a314 <Vm::x87Handler(regs*)+0x3f6>
c001a0ea:	80 fa de             	cmp    dl,0xde
c001a0ed:	0f 84 f1 02 00 00    	je     c001a3e4 <Vm::x87Handler(regs*)+0x4c6>
c001a0f3:	80 fa dd             	cmp    dl,0xdd
c001a0f6:	0f 84 94 04 00 00    	je     c001a590 <Vm::x87Handler(regs*)+0x672>
c001a0fc:	80 fa da             	cmp    dl,0xda
c001a0ff:	0f 84 5f 05 00 00    	je     c001a664 <Vm::x87Handler(regs*)+0x746>
c001a105:	80 fa df             	cmp    dl,0xdf
c001a108:	0f 84 aa 05 00 00    	je     c001a6b8 <Vm::x87Handler(regs*)+0x79a>
c001a10e:	31 c0                	xor    eax,eax
c001a110:	80 fa db             	cmp    dl,0xdb
c001a113:	0f 85 17 09 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a119:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a11d:	80 fa 03             	cmp    dl,0x3
c001a120:	0f 85 c2 06 00 00    	jne    c001a7e8 <Vm::x87Handler(regs*)+0x8ca>
c001a126:	e8 a0 fd ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a12b:	55                   	push   ebp
c001a12c:	55                   	push   ebp
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	52                   	push   edx
c001a131:	50                   	push   eax
c001a132:	e8 2e fa ff ff       	call   c0019b65 <Vm::fpuFloatToLong(unsigned long long)>
c001a137:	90                   	nop
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	89 06                	mov    DWORD PTR [esi],eax
c001a13d:	eb 69                	jmp    c001a1a8 <Vm::x87Handler(regs*)+0x28a>
c001a13f:	90                   	nop
c001a140:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a144:	84 d2                	test   dl,dl
c001a146:	0f 85 2c 06 00 00    	jne    c001a778 <Vm::x87Handler(regs*)+0x85a>
c001a14c:	57                   	push   edi
c001a14d:	57                   	push   edi
c001a14e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a151:	ff 36                	push   DWORD PTR [esi]
c001a153:	e8 04 fa ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a158:	5e                   	pop    esi
c001a159:	5f                   	pop    edi
c001a15a:	52                   	push   edx
c001a15b:	50                   	push   eax
c001a15c:	e8 0c fd ff ff       	call   c0019e6d <Vm::fpuPush(unsigned long long)>
c001a161:	8d 76 00             	lea    esi,[esi+0x0]
c001a164:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a168:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a16b:	e9 2c fe ff ff       	jmp    c0019f9c <Vm::x87Handler(regs*)+0x7e>
c001a170:	80 fa 03             	cmp    dl,0x3
c001a173:	0f 85 2b 07 00 00    	jne    c001a8a4 <Vm::x87Handler(regs*)+0x986>
c001a179:	57                   	push   edi
c001a17a:	57                   	push   edi
c001a17b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a17e:	ff 36                	push   DWORD PTR [esi]
c001a180:	e8 d7 f9 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a185:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a18c:	89 c6                	mov    esi,eax
c001a18e:	89 d7                	mov    edi,edx
c001a190:	e8 49 fc ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a195:	57                   	push   edi
c001a196:	56                   	push   esi
c001a197:	52                   	push   edx
c001a198:	50                   	push   eax
c001a199:	e8 60 fb ff ff       	call   c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a19e:	83 c4 20             	add    esp,0x20
c001a1a1:	e8 25 fd ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a1a6:	66 90                	xchg   ax,ax
c001a1a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a1af:	e9 ec fd ff ff       	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x82>
c001a1b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1b8:	8d 50 40             	lea    edx,[eax+0x40]
c001a1bb:	80 fa 07             	cmp    dl,0x7
c001a1be:	77 2c                	ja     c001a1ec <Vm::x87Handler(regs*)+0x2ce>
c001a1c0:	83 ec 0c             	sub    esp,0xc
c001a1c3:	2d c0 00 00 00       	sub    eax,0xc0
c001a1c8:	50                   	push   eax
c001a1c9:	e8 10 fc ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a1ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1d5:	89 c6                	mov    esi,eax
c001a1d7:	89 d7                	mov    edi,edx
c001a1d9:	e8 00 fc ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a1de:	57                   	push   edi
c001a1df:	56                   	push   esi
c001a1e0:	52                   	push   edx
c001a1e1:	50                   	push   eax
c001a1e2:	e8 6d fb ff ff       	call   c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a1e7:	eb 33                	jmp    c001a21c <Vm::x87Handler(regs*)+0x2fe>
c001a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1ec:	8d 50 38             	lea    edx,[eax+0x38]
c001a1ef:	80 fa 07             	cmp    dl,0x7
c001a1f2:	77 30                	ja     c001a224 <Vm::x87Handler(regs*)+0x306>
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	2d c8 00 00 00       	sub    eax,0xc8
c001a1fc:	50                   	push   eax
c001a1fd:	e8 dc fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a202:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a209:	89 c6                	mov    esi,eax
c001a20b:	89 d7                	mov    edi,edx
c001a20d:	e8 cc fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a212:	57                   	push   edi
c001a213:	56                   	push   esi
c001a214:	52                   	push   edx
c001a215:	50                   	push   eax
c001a216:	e8 72 fb ff ff       	call   c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a21b:	90                   	nop
c001a21c:	83 c4 1c             	add    esp,0x1c
c001a21f:	e9 b4 fd ff ff       	jmp    c0019fd8 <Vm::x87Handler(regs*)+0xba>
c001a224:	8d 50 30             	lea    edx,[eax+0x30]
c001a227:	80 fa 07             	cmp    dl,0x7
c001a22a:	77 10                	ja     c001a23c <Vm::x87Handler(regs*)+0x31e>
c001a22c:	83 ec 0c             	sub    esp,0xc
c001a22f:	2d d0 00 00 00       	sub    eax,0xd0
c001a234:	e9 c3 03 00 00       	jmp    c001a5fc <Vm::x87Handler(regs*)+0x6de>
c001a239:	8d 76 00             	lea    esi,[esi+0x0]
c001a23c:	8d 50 28             	lea    edx,[eax+0x28]
c001a23f:	80 fa 07             	cmp    dl,0x7
c001a242:	77 10                	ja     c001a254 <Vm::x87Handler(regs*)+0x336>
c001a244:	83 ec 0c             	sub    esp,0xc
c001a247:	2d d8 00 00 00       	sub    eax,0xd8
c001a24c:	e9 e7 03 00 00       	jmp    c001a638 <Vm::x87Handler(regs*)+0x71a>
c001a251:	8d 76 00             	lea    esi,[esi+0x0]
c001a254:	8d 50 20             	lea    edx,[eax+0x20]
c001a257:	80 fa 07             	cmp    dl,0x7
c001a25a:	77 1c                	ja     c001a278 <Vm::x87Handler(regs*)+0x35a>
c001a25c:	83 ec 0c             	sub    esp,0xc
c001a25f:	2d e0 00 00 00       	sub    eax,0xe0
c001a264:	50                   	push   eax
c001a265:	e8 74 fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a26a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a271:	89 c6                	mov    esi,eax
c001a273:	89 d7                	mov    edi,edx
c001a275:	eb 25                	jmp    c001a29c <Vm::x87Handler(regs*)+0x37e>
c001a277:	90                   	nop
c001a278:	8d 50 18             	lea    edx,[eax+0x18]
c001a27b:	80 fa 07             	cmp    dl,0x7
c001a27e:	77 30                	ja     c001a2b0 <Vm::x87Handler(regs*)+0x392>
c001a280:	83 ec 0c             	sub    esp,0xc
c001a283:	6a 00                	push   0x0
c001a285:	e8 54 fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a28a:	89 c6                	mov    esi,eax
c001a28c:	89 d7                	mov    edi,edx
c001a28e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a292:	2d e8 00 00 00       	sub    eax,0xe8
c001a297:	89 04 24             	mov    DWORD PTR [esp],eax
c001a29a:	66 90                	xchg   ax,ax
c001a29c:	e8 3d fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a2a1:	57                   	push   edi
c001a2a2:	56                   	push   esi
c001a2a3:	52                   	push   edx
c001a2a4:	50                   	push   eax
c001a2a5:	e8 d4 fa ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a2aa:	e9 6d ff ff ff       	jmp    c001a21c <Vm::x87Handler(regs*)+0x2fe>
c001a2af:	90                   	nop
c001a2b0:	8d 50 10             	lea    edx,[eax+0x10]
c001a2b3:	80 fa 07             	cmp    dl,0x7
c001a2b6:	77 1c                	ja     c001a2d4 <Vm::x87Handler(regs*)+0x3b6>
c001a2b8:	83 ec 0c             	sub    esp,0xc
c001a2bb:	2d f0 00 00 00       	sub    eax,0xf0
c001a2c0:	50                   	push   eax
c001a2c1:	e8 18 fb ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a2c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2cd:	89 c6                	mov    esi,eax
c001a2cf:	89 d7                	mov    edi,edx
c001a2d1:	eb 25                	jmp    c001a2f8 <Vm::x87Handler(regs*)+0x3da>
c001a2d3:	90                   	nop
c001a2d4:	3c f7                	cmp    al,0xf7
c001a2d6:	0f 86 00 04 00 00    	jbe    c001a6dc <Vm::x87Handler(regs*)+0x7be>
c001a2dc:	83 ec 0c             	sub    esp,0xc
c001a2df:	6a 00                	push   0x0
c001a2e1:	e8 f8 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a2e6:	89 c6                	mov    esi,eax
c001a2e8:	89 d7                	mov    edi,edx
c001a2ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2ee:	2d f8 00 00 00       	sub    eax,0xf8
c001a2f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2f6:	66 90                	xchg   ax,ax
c001a2f8:	e8 e1 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a2fd:	57                   	push   edi
c001a2fe:	56                   	push   esi
c001a2ff:	52                   	push   edx
c001a300:	50                   	push   eax
c001a301:	e8 a6 fa ff ff       	call   c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a306:	83 c4 1c             	add    esp,0x1c
c001a309:	52                   	push   edx
c001a30a:	50                   	push   eax
c001a30b:	6a 00                	push   0x0
c001a30d:	e9 6a 02 00 00       	jmp    c001a57c <Vm::x87Handler(regs*)+0x65e>
c001a312:	66 90                	xchg   ax,ax
c001a314:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a318:	8d 50 40             	lea    edx,[eax+0x40]
c001a31b:	80 fa 07             	cmp    dl,0x7
c001a31e:	77 38                	ja     c001a358 <Vm::x87Handler(regs*)+0x43a>
c001a320:	83 ec 0c             	sub    esp,0xc
c001a323:	2d c0 00 00 00       	sub    eax,0xc0
c001a328:	50                   	push   eax
c001a329:	e8 b0 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a32e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a335:	89 c6                	mov    esi,eax
c001a337:	89 d7                	mov    edi,edx
c001a339:	e8 a0 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a33e:	57                   	push   edi
c001a33f:	56                   	push   esi
c001a340:	52                   	push   edx
c001a341:	50                   	push   eax
c001a342:	e8 0d fa ff ff       	call   c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a347:	83 c4 1c             	add    esp,0x1c
c001a34a:	52                   	push   edx
c001a34b:	50                   	push   eax
c001a34c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a350:	2d c0 00 00 00       	sub    eax,0xc0
c001a355:	eb 41                	jmp    c001a398 <Vm::x87Handler(regs*)+0x47a>
c001a357:	90                   	nop
c001a358:	8d 50 38             	lea    edx,[eax+0x38]
c001a35b:	80 fa 07             	cmp    dl,0x7
c001a35e:	77 40                	ja     c001a3a0 <Vm::x87Handler(regs*)+0x482>
c001a360:	83 ec 0c             	sub    esp,0xc
c001a363:	2d c8 00 00 00       	sub    eax,0xc8
c001a368:	50                   	push   eax
c001a369:	e8 70 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a36e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a375:	89 c6                	mov    esi,eax
c001a377:	89 d7                	mov    edi,edx
c001a379:	e8 60 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a37e:	57                   	push   edi
c001a37f:	56                   	push   esi
c001a380:	52                   	push   edx
c001a381:	50                   	push   eax
c001a382:	e8 06 fa ff ff       	call   c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a387:	83 c4 1c             	add    esp,0x1c
c001a38a:	52                   	push   edx
c001a38b:	50                   	push   eax
c001a38c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a390:	2d c8 00 00 00       	sub    eax,0xc8
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	50                   	push   eax
c001a399:	e9 42 fc ff ff       	jmp    c0019fe0 <Vm::x87Handler(regs*)+0xc2>
c001a39e:	66 90                	xchg   ax,ax
c001a3a0:	83 c0 18             	add    eax,0x18
c001a3a3:	3c 07                	cmp    al,0x7
c001a3a5:	0f 87 6d 04 00 00    	ja     c001a818 <Vm::x87Handler(regs*)+0x8fa>
c001a3ab:	83 ec 0c             	sub    esp,0xc
c001a3ae:	6a 00                	push   0x0
c001a3b0:	e8 29 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a3b5:	89 c6                	mov    esi,eax
c001a3b7:	89 d7                	mov    edi,edx
c001a3b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3bd:	2d e8 00 00 00       	sub    eax,0xe8
c001a3c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3c5:	e8 14 fa ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a3ca:	57                   	push   edi
c001a3cb:	56                   	push   esi
c001a3cc:	52                   	push   edx
c001a3cd:	50                   	push   eax
c001a3ce:	e8 ab f9 ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3d3:	83 c4 1c             	add    esp,0x1c
c001a3d6:	52                   	push   edx
c001a3d7:	50                   	push   eax
c001a3d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3dc:	2d e8 00 00 00       	sub    eax,0xe8
c001a3e1:	eb b5                	jmp    c001a398 <Vm::x87Handler(regs*)+0x47a>
c001a3e3:	90                   	nop
c001a3e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3e8:	8d 50 40             	lea    edx,[eax+0x40]
c001a3eb:	80 fa 07             	cmp    dl,0x7
c001a3ee:	77 3c                	ja     c001a42c <Vm::x87Handler(regs*)+0x50e>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	2d c0 00 00 00       	sub    eax,0xc0
c001a3f8:	50                   	push   eax
c001a3f9:	e8 e0 f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a3fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a405:	89 c6                	mov    esi,eax
c001a407:	89 d7                	mov    edi,edx
c001a409:	e8 d0 f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a40e:	57                   	push   edi
c001a40f:	56                   	push   esi
c001a410:	52                   	push   edx
c001a411:	50                   	push   eax
c001a412:	e8 3d f9 ff ff       	call   c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a417:	83 c4 1c             	add    esp,0x1c
c001a41a:	52                   	push   edx
c001a41b:	50                   	push   eax
c001a41c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a420:	2d c0 00 00 00       	sub    eax,0xc0
c001a425:	e9 b2 01 00 00       	jmp    c001a5dc <Vm::x87Handler(regs*)+0x6be>
c001a42a:	66 90                	xchg   ax,ax
c001a42c:	8d 50 20             	lea    edx,[eax+0x20]
c001a42f:	80 fa 07             	cmp    dl,0x7
c001a432:	77 3c                	ja     c001a470 <Vm::x87Handler(regs*)+0x552>
c001a434:	83 ec 0c             	sub    esp,0xc
c001a437:	2d e0 00 00 00       	sub    eax,0xe0
c001a43c:	50                   	push   eax
c001a43d:	e8 9c f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a442:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a449:	89 c6                	mov    esi,eax
c001a44b:	89 d7                	mov    edi,edx
c001a44d:	e8 8c f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a452:	57                   	push   edi
c001a453:	56                   	push   esi
c001a454:	52                   	push   edx
c001a455:	50                   	push   eax
c001a456:	e8 23 f9 ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a45b:	83 c4 1c             	add    esp,0x1c
c001a45e:	52                   	push   edx
c001a45f:	50                   	push   eax
c001a460:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a464:	2d e0 00 00 00       	sub    eax,0xe0
c001a469:	e9 6e 01 00 00       	jmp    c001a5dc <Vm::x87Handler(regs*)+0x6be>
c001a46e:	66 90                	xchg   ax,ax
c001a470:	8d 50 18             	lea    edx,[eax+0x18]
c001a473:	80 fa 07             	cmp    dl,0x7
c001a476:	77 3c                	ja     c001a4b4 <Vm::x87Handler(regs*)+0x596>
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	6a 00                	push   0x0
c001a47d:	e8 5c f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a482:	89 c6                	mov    esi,eax
c001a484:	89 d7                	mov    edi,edx
c001a486:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a48a:	2d e8 00 00 00       	sub    eax,0xe8
c001a48f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a492:	e8 47 f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a497:	57                   	push   edi
c001a498:	56                   	push   esi
c001a499:	52                   	push   edx
c001a49a:	50                   	push   eax
c001a49b:	e8 de f8 ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a4a0:	83 c4 1c             	add    esp,0x1c
c001a4a3:	52                   	push   edx
c001a4a4:	50                   	push   eax
c001a4a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4a9:	2d e8 00 00 00       	sub    eax,0xe8
c001a4ae:	e9 29 01 00 00       	jmp    c001a5dc <Vm::x87Handler(regs*)+0x6be>
c001a4b3:	90                   	nop
c001a4b4:	8d 50 38             	lea    edx,[eax+0x38]
c001a4b7:	80 fa 07             	cmp    dl,0x7
c001a4ba:	77 3c                	ja     c001a4f8 <Vm::x87Handler(regs*)+0x5da>
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	2d c8 00 00 00       	sub    eax,0xc8
c001a4c4:	50                   	push   eax
c001a4c5:	e8 14 f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a4ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4d1:	89 c6                	mov    esi,eax
c001a4d3:	89 d7                	mov    edi,edx
c001a4d5:	e8 04 f9 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a4da:	57                   	push   edi
c001a4db:	56                   	push   esi
c001a4dc:	52                   	push   edx
c001a4dd:	50                   	push   eax
c001a4de:	e8 aa f8 ff ff       	call   c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4e3:	83 c4 1c             	add    esp,0x1c
c001a4e6:	52                   	push   edx
c001a4e7:	50                   	push   eax
c001a4e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4ec:	2d c8 00 00 00       	sub    eax,0xc8
c001a4f1:	e9 82 00 00 00       	jmp    c001a578 <Vm::x87Handler(regs*)+0x65a>
c001a4f6:	66 90                	xchg   ax,ax
c001a4f8:	3c f7                	cmp    al,0xf7
c001a4fa:	76 38                	jbe    c001a534 <Vm::x87Handler(regs*)+0x616>
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	6a 00                	push   0x0
c001a501:	e8 d8 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a506:	89 c6                	mov    esi,eax
c001a508:	89 d7                	mov    edi,edx
c001a50a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a50e:	2d f8 00 00 00       	sub    eax,0xf8
c001a513:	89 04 24             	mov    DWORD PTR [esp],eax
c001a516:	e8 c3 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a51b:	57                   	push   edi
c001a51c:	56                   	push   esi
c001a51d:	52                   	push   edx
c001a51e:	50                   	push   eax
c001a51f:	e8 88 f8 ff ff       	call   c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a524:	83 c4 1c             	add    esp,0x1c
c001a527:	52                   	push   edx
c001a528:	50                   	push   eax
c001a529:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a52d:	2d f8 00 00 00       	sub    eax,0xf8
c001a532:	eb 44                	jmp    c001a578 <Vm::x87Handler(regs*)+0x65a>
c001a534:	8d 50 10             	lea    edx,[eax+0x10]
c001a537:	80 fa 07             	cmp    dl,0x7
c001a53a:	0f 87 6c 01 00 00    	ja     c001a6ac <Vm::x87Handler(regs*)+0x78e>
c001a540:	83 ec 0c             	sub    esp,0xc
c001a543:	2d f0 00 00 00       	sub    eax,0xf0
c001a548:	50                   	push   eax
c001a549:	e8 90 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a54e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a555:	89 c6                	mov    esi,eax
c001a557:	89 d7                	mov    edi,edx
c001a559:	e8 80 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a55e:	57                   	push   edi
c001a55f:	56                   	push   esi
c001a560:	52                   	push   edx
c001a561:	50                   	push   eax
c001a562:	e8 45 f8 ff ff       	call   c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a567:	83 c4 1c             	add    esp,0x1c
c001a56a:	52                   	push   edx
c001a56b:	50                   	push   eax
c001a56c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a570:	2d f0 00 00 00       	sub    eax,0xf0
c001a575:	8d 76 00             	lea    esi,[esi+0x0]
c001a578:	50                   	push   eax
c001a579:	8d 76 00             	lea    esi,[esi+0x0]
c001a57c:	e8 a0 f8 ff ff       	call   c0019e21 <Vm::fpuSetReg(int, unsigned long long)>
c001a581:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a585:	e8 41 f9 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a58a:	e9 0d fa ff ff       	jmp    c0019f9c <Vm::x87Handler(regs*)+0x7e>
c001a58f:	90                   	nop
c001a590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a594:	8d 50 30             	lea    edx,[eax+0x30]
c001a597:	80 fa 07             	cmp    dl,0x7
c001a59a:	77 20                	ja     c001a5bc <Vm::x87Handler(regs*)+0x69e>
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	6a 00                	push   0x0
c001a5a1:	e8 38 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a5a6:	83 c4 0c             	add    esp,0xc
c001a5a9:	52                   	push   edx
c001a5aa:	50                   	push   eax
c001a5ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5af:	2d d0 00 00 00       	sub    eax,0xd0
c001a5b4:	e9 df fd ff ff       	jmp    c001a398 <Vm::x87Handler(regs*)+0x47a>
c001a5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5bc:	8d 50 28             	lea    edx,[eax+0x28]
c001a5bf:	80 fa 07             	cmp    dl,0x7
c001a5c2:	77 28                	ja     c001a5ec <Vm::x87Handler(regs*)+0x6ce>
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	6a 00                	push   0x0
c001a5c9:	e8 10 f8 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a5ce:	83 c4 0c             	add    esp,0xc
c001a5d1:	52                   	push   edx
c001a5d2:	50                   	push   eax
c001a5d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5d7:	2d d8 00 00 00       	sub    eax,0xd8
c001a5dc:	50                   	push   eax
c001a5dd:	e8 3f f8 ff ff       	call   c0019e21 <Vm::fpuSetReg(int, unsigned long long)>
c001a5e2:	e8 e4 f8 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a5e7:	e9 ac f9 ff ff       	jmp    c0019f98 <Vm::x87Handler(regs*)+0x7a>
c001a5ec:	8d 50 20             	lea    edx,[eax+0x20]
c001a5ef:	80 fa 07             	cmp    dl,0x7
c001a5f2:	77 30                	ja     c001a624 <Vm::x87Handler(regs*)+0x706>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	2d e0 00 00 00       	sub    eax,0xe0
c001a5fc:	50                   	push   eax
c001a5fd:	e8 dc f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a602:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a609:	89 c6                	mov    esi,eax
c001a60b:	89 d7                	mov    edi,edx
c001a60d:	e8 cc f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a612:	57                   	push   edi
c001a613:	56                   	push   esi
c001a614:	52                   	push   edx
c001a615:	50                   	push   eax
c001a616:	e8 e3 f6 ff ff       	call   c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a61b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a61f:	e9 78 02 00 00       	jmp    c001a89c <Vm::x87Handler(regs*)+0x97e>
c001a624:	8d 50 18             	lea    edx,[eax+0x18]
c001a627:	80 fa 07             	cmp    dl,0x7
c001a62a:	0f 87 10 fb ff ff    	ja     c001a140 <Vm::x87Handler(regs*)+0x222>
c001a630:	83 ec 0c             	sub    esp,0xc
c001a633:	2d e8 00 00 00       	sub    eax,0xe8
c001a638:	50                   	push   eax
c001a639:	e8 a0 f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a63e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a645:	89 c6                	mov    esi,eax
c001a647:	89 d7                	mov    edi,edx
c001a649:	e8 90 f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a64e:	57                   	push   edi
c001a64f:	56                   	push   esi
c001a650:	52                   	push   edx
c001a651:	50                   	push   eax
c001a652:	e8 a7 f6 ff ff       	call   c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a657:	83 c4 20             	add    esp,0x20
c001a65a:	e8 6c f8 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a65f:	eb 6f                	jmp    c001a6d0 <Vm::x87Handler(regs*)+0x7b2>
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a668:	0f 85 22 01 00 00    	jne    c001a790 <Vm::x87Handler(regs*)+0x872>
c001a66e:	66 90                	xchg   ax,ax
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	6a 01                	push   0x1
c001a675:	e8 64 f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a67a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a681:	89 c6                	mov    esi,eax
c001a683:	89 d7                	mov    edi,edx
c001a685:	e8 54 f7 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a68a:	57                   	push   edi
c001a68b:	56                   	push   esi
c001a68c:	52                   	push   edx
c001a68d:	50                   	push   eax
c001a68e:	e8 6b f6 ff ff       	call   c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a693:	83 c4 20             	add    esp,0x20
c001a696:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a69a:	e8 2c f8 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a69f:	e8 27 f8 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a6a4:	e9 f7 f8 ff ff       	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x82>
c001a6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6ac:	3c d9                	cmp    al,0xd9
c001a6ae:	0f 85 e8 02 00 00    	jne    c001a99c <Vm::x87Handler(regs*)+0xa7e>
c001a6b4:	eb ba                	jmp    c001a670 <Vm::x87Handler(regs*)+0x752>
c001a6b6:	66 90                	xchg   ax,ax
c001a6b8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a6bc:	0f 85 2a 03 00 00    	jne    c001a9ec <Vm::x87Handler(regs*)+0xace>
c001a6c2:	0f b7 05 60 92 02 c0 	movzx  eax,WORD PTR ds:0xc0029260
c001a6c9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a6cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a6d4:	e9 c7 f8 ff ff       	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x82>
c001a6d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a6e0:	84 d2                	test   dl,dl
c001a6e2:	75 10                	jne    c001a6f4 <Vm::x87Handler(regs*)+0x7d6>
c001a6e4:	83 ec 0c             	sub    esp,0xc
c001a6e7:	ff 36                	push   DWORD PTR [esi]
c001a6e9:	e8 29 f4 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a6ee:	e9 39 01 00 00       	jmp    c001a82c <Vm::x87Handler(regs*)+0x90e>
c001a6f3:	90                   	nop
c001a6f4:	80 fa 01             	cmp    dl,0x1
c001a6f7:	75 0f                	jne    c001a708 <Vm::x87Handler(regs*)+0x7ea>
c001a6f9:	83 ec 0c             	sub    esp,0xc
c001a6fc:	ff 36                	push   DWORD PTR [esi]
c001a6fe:	e8 14 f4 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a703:	e9 b4 02 00 00       	jmp    c001a9bc <Vm::x87Handler(regs*)+0xa9e>
c001a708:	80 fa 04             	cmp    dl,0x4
c001a70b:	75 0f                	jne    c001a71c <Vm::x87Handler(regs*)+0x7fe>
c001a70d:	83 ec 0c             	sub    esp,0xc
c001a710:	ff 36                	push   DWORD PTR [esi]
c001a712:	e8 00 f4 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a717:	e9 9c 01 00 00       	jmp    c001a8b8 <Vm::x87Handler(regs*)+0x99a>
c001a71c:	80 fa 05             	cmp    dl,0x5
c001a71f:	75 1b                	jne    c001a73c <Vm::x87Handler(regs*)+0x81e>
c001a721:	83 ec 0c             	sub    esp,0xc
c001a724:	6a 00                	push   0x0
c001a726:	e8 b3 f6 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a72b:	89 c7                	mov    edi,eax
c001a72d:	89 d5                	mov    ebp,edx
c001a72f:	58                   	pop    eax
c001a730:	ff 36                	push   DWORD PTR [esi]
c001a732:	e8 e0 f3 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a737:	e9 bc 01 00 00       	jmp    c001a8f8 <Vm::x87Handler(regs*)+0x9da>
c001a73c:	80 fa 06             	cmp    dl,0x6
c001a73f:	75 0f                	jne    c001a750 <Vm::x87Handler(regs*)+0x832>
c001a741:	83 ec 0c             	sub    esp,0xc
c001a744:	ff 36                	push   DWORD PTR [esi]
c001a746:	e8 cc f3 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a74b:	e9 cc 01 00 00       	jmp    c001a91c <Vm::x87Handler(regs*)+0x9fe>
c001a750:	31 c0                	xor    eax,eax
c001a752:	80 fa 07             	cmp    dl,0x7
c001a755:	0f 85 d5 02 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a75b:	83 ec 0c             	sub    esp,0xc
c001a75e:	6a 00                	push   0x0
c001a760:	e8 79 f6 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a765:	89 c7                	mov    edi,eax
c001a767:	89 d5                	mov    ebp,edx
c001a769:	58                   	pop    eax
c001a76a:	ff 36                	push   DWORD PTR [esi]
c001a76c:	e8 a6 f3 ff ff       	call   c0019b17 <Vm::fpu32ToInternal(unsigned int)>
c001a771:	e9 ee 01 00 00       	jmp    c001a964 <Vm::x87Handler(regs*)+0xa46>
c001a776:	66 90                	xchg   ax,ax
c001a778:	80 fa 03             	cmp    dl,0x3
c001a77b:	0f 85 f7 01 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xa5a>
c001a781:	e8 45 f7 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001a786:	51                   	push   ecx
c001a787:	51                   	push   ecx
c001a788:	e9 03 02 00 00       	jmp    c001a990 <Vm::x87Handler(regs*)+0xa72>
c001a78d:	8d 76 00             	lea    esi,[esi+0x0]
c001a790:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a794:	80 fa 01             	cmp    dl,0x1
c001a797:	75 0b                	jne    c001a7a4 <Vm::x87Handler(regs*)+0x886>
c001a799:	57                   	push   edi
c001a79a:	57                   	push   edi
c001a79b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a79d:	e9 0e 02 00 00       	jmp    c001a9b0 <Vm::x87Handler(regs*)+0xa92>
c001a7a2:	66 90                	xchg   ax,ax
c001a7a4:	80 fa 04             	cmp    dl,0x4
c001a7a7:	75 13                	jne    c001a7bc <Vm::x87Handler(regs*)+0x89e>
c001a7a9:	31 d2                	xor    edx,edx
c001a7ab:	51                   	push   ecx
c001a7ac:	51                   	push   ecx
c001a7ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7af:	52                   	push   edx
c001a7b0:	50                   	push   eax
c001a7b1:	e8 4a f4 ff ff       	call   c0019c00 <Vm::fpuLongToFloat(long long)>
c001a7b6:	e9 fd 00 00 00       	jmp    c001a8b8 <Vm::x87Handler(regs*)+0x99a>
c001a7bb:	90                   	nop
c001a7bc:	31 c0                	xor    eax,eax
c001a7be:	80 fa 07             	cmp    dl,0x7
c001a7c1:	0f 85 69 02 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a7c7:	83 ec 0c             	sub    esp,0xc
c001a7ca:	6a 00                	push   0x0
c001a7cc:	e8 0d f6 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a7d1:	89 c7                	mov    edi,eax
c001a7d3:	89 d5                	mov    ebp,edx
c001a7d5:	58                   	pop    eax
c001a7d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7d8:	5a                   	pop    edx
c001a7d9:	31 d2                	xor    edx,edx
c001a7db:	52                   	push   edx
c001a7dc:	50                   	push   eax
c001a7dd:	e8 1e f4 ff ff       	call   c0019c00 <Vm::fpuLongToFloat(long long)>
c001a7e2:	e9 7d 01 00 00       	jmp    c001a964 <Vm::x87Handler(regs*)+0xa46>
c001a7e7:	90                   	nop
c001a7e8:	84 d2                	test   dl,dl
c001a7ea:	75 10                	jne    c001a7fc <Vm::x87Handler(regs*)+0x8de>
c001a7ec:	31 d2                	xor    edx,edx
c001a7ee:	55                   	push   ebp
c001a7ef:	55                   	push   ebp
c001a7f0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a7f2:	52                   	push   edx
c001a7f3:	50                   	push   eax
c001a7f4:	e9 03 02 00 00       	jmp    c001a9fc <Vm::x87Handler(regs*)+0xade>
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	31 c0                	xor    eax,eax
c001a7fe:	80 fa 02             	cmp    dl,0x2
c001a801:	0f 85 29 02 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a807:	83 ec 0c             	sub    esp,0xc
c001a80a:	6a 00                	push   0x0
c001a80c:	e8 cd f5 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a811:	59                   	pop    ecx
c001a812:	5f                   	pop    edi
c001a813:	e9 18 f9 ff ff       	jmp    c001a130 <Vm::x87Handler(regs*)+0x212>
c001a818:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a81c:	84 d2                	test   dl,dl
c001a81e:	75 2c                	jne    c001a84c <Vm::x87Handler(regs*)+0x92e>
c001a820:	50                   	push   eax
c001a821:	50                   	push   eax
c001a822:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a825:	ff 36                	push   DWORD PTR [esi]
c001a827:	e8 30 f3 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a82c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a833:	89 c6                	mov    esi,eax
c001a835:	89 d7                	mov    edi,edx
c001a837:	e8 a2 f5 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a83c:	57                   	push   edi
c001a83d:	56                   	push   esi
c001a83e:	52                   	push   edx
c001a83f:	50                   	push   eax
c001a840:	e8 0f f5 ff ff       	call   c0019d54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a845:	e9 8e 01 00 00       	jmp    c001a9d8 <Vm::x87Handler(regs*)+0xaba>
c001a84a:	66 90                	xchg   ax,ax
c001a84c:	80 fa 01             	cmp    dl,0x1
c001a84f:	75 13                	jne    c001a864 <Vm::x87Handler(regs*)+0x946>
c001a851:	50                   	push   eax
c001a852:	50                   	push   eax
c001a853:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a856:	ff 36                	push   DWORD PTR [esi]
c001a858:	e8 ff f2 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a85d:	e9 5a 01 00 00       	jmp    c001a9bc <Vm::x87Handler(regs*)+0xa9e>
c001a862:	66 90                	xchg   ax,ax
c001a864:	80 fa 02             	cmp    dl,0x2
c001a867:	0f 85 03 f9 ff ff    	jne    c001a170 <Vm::x87Handler(regs*)+0x252>
c001a86d:	55                   	push   ebp
c001a86e:	55                   	push   ebp
c001a86f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a872:	ff 36                	push   DWORD PTR [esi]
c001a874:	e8 e3 f2 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a879:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a880:	89 c6                	mov    esi,eax
c001a882:	89 d7                	mov    edi,edx
c001a884:	e8 55 f5 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a889:	57                   	push   edi
c001a88a:	56                   	push   esi
c001a88b:	52                   	push   edx
c001a88c:	50                   	push   eax
c001a88d:	e8 6c f4 ff ff       	call   c0019cfe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a892:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a896:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a899:	8d 76 00             	lea    esi,[esi+0x0]
c001a89c:	83 c4 20             	add    esp,0x20
c001a89f:	e9 fc f6 ff ff       	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x82>
c001a8a4:	80 fa 04             	cmp    dl,0x4
c001a8a7:	75 2f                	jne    c001a8d8 <Vm::x87Handler(regs*)+0x9ba>
c001a8a9:	51                   	push   ecx
c001a8aa:	51                   	push   ecx
c001a8ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8ae:	ff 36                	push   DWORD PTR [esi]
c001a8b0:	e8 a7 f2 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8bf:	89 c6                	mov    esi,eax
c001a8c1:	89 d7                	mov    edi,edx
c001a8c3:	e8 16 f5 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a8c8:	57                   	push   edi
c001a8c9:	56                   	push   esi
c001a8ca:	52                   	push   edx
c001a8cb:	50                   	push   eax
c001a8cc:	e8 ad f4 ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a8d1:	e9 02 01 00 00       	jmp    c001a9d8 <Vm::x87Handler(regs*)+0xaba>
c001a8d6:	66 90                	xchg   ax,ax
c001a8d8:	80 fa 05             	cmp    dl,0x5
c001a8db:	75 2b                	jne    c001a908 <Vm::x87Handler(regs*)+0x9ea>
c001a8dd:	83 ec 0c             	sub    esp,0xc
c001a8e0:	6a 00                	push   0x0
c001a8e2:	e8 f7 f4 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a8e7:	89 c7                	mov    edi,eax
c001a8e9:	89 d5                	mov    ebp,edx
c001a8eb:	58                   	pop    eax
c001a8ec:	5a                   	pop    edx
c001a8ed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8f0:	ff 36                	push   DWORD PTR [esi]
c001a8f2:	e8 65 f2 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a8f7:	90                   	nop
c001a8f8:	83 c4 10             	add    esp,0x10
c001a8fb:	55                   	push   ebp
c001a8fc:	57                   	push   edi
c001a8fd:	52                   	push   edx
c001a8fe:	50                   	push   eax
c001a8ff:	e8 7a f4 ff ff       	call   c0019d7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a904:	eb 6a                	jmp    c001a970 <Vm::x87Handler(regs*)+0xa52>
c001a906:	66 90                	xchg   ax,ax
c001a908:	80 fa 06             	cmp    dl,0x6
c001a90b:	75 2f                	jne    c001a93c <Vm::x87Handler(regs*)+0xa1e>
c001a90d:	51                   	push   ecx
c001a90e:	51                   	push   ecx
c001a90f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a912:	ff 36                	push   DWORD PTR [esi]
c001a914:	e8 43 f2 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a919:	8d 76 00             	lea    esi,[esi+0x0]
c001a91c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a923:	89 c6                	mov    esi,eax
c001a925:	89 d7                	mov    edi,edx
c001a927:	e8 b2 f4 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a92c:	57                   	push   edi
c001a92d:	56                   	push   esi
c001a92e:	52                   	push   edx
c001a92f:	50                   	push   eax
c001a930:	e8 77 f4 ff ff       	call   c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a935:	e9 9e 00 00 00       	jmp    c001a9d8 <Vm::x87Handler(regs*)+0xaba>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	31 c0                	xor    eax,eax
c001a93e:	80 fa 07             	cmp    dl,0x7
c001a941:	0f 85 e9 00 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	6a 00                	push   0x0
c001a94c:	e8 8d f4 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a951:	89 c7                	mov    edi,eax
c001a953:	89 d5                	mov    ebp,edx
c001a955:	58                   	pop    eax
c001a956:	5a                   	pop    edx
c001a957:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a95a:	ff 36                	push   DWORD PTR [esi]
c001a95c:	e8 fb f1 ff ff       	call   c0019b5c <Vm::fpu64ToInternal(unsigned long long)>
c001a961:	8d 76 00             	lea    esi,[esi+0x0]
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	55                   	push   ebp
c001a968:	57                   	push   edi
c001a969:	52                   	push   edx
c001a96a:	50                   	push   eax
c001a96b:	e8 3c f4 ff ff       	call   c0019dac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a970:	83 c4 0c             	add    esp,0xc
c001a973:	eb 67                	jmp    c001a9dc <Vm::x87Handler(regs*)+0xabe>
c001a975:	8d 76 00             	lea    esi,[esi+0x0]
c001a978:	31 c0                	xor    eax,eax
c001a97a:	80 fa 02             	cmp    dl,0x2
c001a97d:	0f 85 ad 00 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a983:	83 ec 0c             	sub    esp,0xc
c001a986:	6a 00                	push   0x0
c001a988:	e8 51 f4 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a98d:	59                   	pop    ecx
c001a98e:	5f                   	pop    edi
c001a98f:	90                   	nop
c001a990:	52                   	push   edx
c001a991:	50                   	push   eax
c001a992:	e8 77 f1 ff ff       	call   c0019b0e <Vm::fpuInternalTo64(unsigned long long)>
c001a997:	e9 84 00 00 00       	jmp    c001aa20 <Vm::x87Handler(regs*)+0xb02>
c001a99c:	31 c0                	xor    eax,eax
c001a99e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a9a3:	0f 85 87 00 00 00    	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001a9a9:	50                   	push   eax
c001a9aa:	50                   	push   eax
c001a9ab:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a9ae:	66 90                	xchg   ax,ax
c001a9b0:	31 d2                	xor    edx,edx
c001a9b2:	52                   	push   edx
c001a9b3:	50                   	push   eax
c001a9b4:	e8 47 f2 ff ff       	call   c0019c00 <Vm::fpuLongToFloat(long long)>
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9c3:	89 c6                	mov    esi,eax
c001a9c5:	89 d7                	mov    edi,edx
c001a9c7:	e8 12 f4 ff ff       	call   c0019dde <Vm::fpuGetReg(int)>
c001a9cc:	57                   	push   edi
c001a9cd:	56                   	push   esi
c001a9ce:	52                   	push   edx
c001a9cf:	50                   	push   eax
c001a9d0:	e8 b8 f3 ff ff       	call   c0019d8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9d8:	83 c4 1c             	add    esp,0x1c
c001a9db:	90                   	nop
c001a9dc:	52                   	push   edx
c001a9dd:	50                   	push   eax
c001a9de:	6a 00                	push   0x0
c001a9e0:	e8 3c f4 ff ff       	call   c0019e21 <Vm::fpuSetReg(int, unsigned long long)>
c001a9e5:	e9 7a f7 ff ff       	jmp    c001a164 <Vm::x87Handler(regs*)+0x246>
c001a9ea:	66 90                	xchg   ax,ax
c001a9ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9f0:	80 fa 05             	cmp    dl,0x5
c001a9f3:	75 13                	jne    c001aa08 <Vm::x87Handler(regs*)+0xaea>
c001a9f5:	55                   	push   ebp
c001a9f6:	55                   	push   ebp
c001a9f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9fa:	ff 36                	push   DWORD PTR [esi]
c001a9fc:	e8 c3 f1 ff ff       	call   c0019bc4 <Vm::fpuULongToFloat(unsigned long long)>
c001aa01:	e9 52 f7 ff ff       	jmp    c001a158 <Vm::x87Handler(regs*)+0x23a>
c001aa06:	66 90                	xchg   ax,ax
c001aa08:	31 c0                	xor    eax,eax
c001aa0a:	80 fa 07             	cmp    dl,0x7
c001aa0d:	75 21                	jne    c001aa30 <Vm::x87Handler(regs*)+0xb12>
c001aa0f:	e8 b7 f4 ff ff       	call   c0019ecb <Vm::fpuPop()>
c001aa14:	51                   	push   ecx
c001aa15:	51                   	push   ecx
c001aa16:	52                   	push   edx
c001aa17:	50                   	push   eax
c001aa18:	e8 48 f1 ff ff       	call   c0019b65 <Vm::fpuFloatToLong(unsigned long long)>
c001aa1d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	89 06                	mov    DWORD PTR [esi],eax
c001aa25:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001aa28:	e9 7b f7 ff ff       	jmp    c001a1a8 <Vm::x87Handler(regs*)+0x28a>
c001aa2d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa30:	83 c4 1c             	add    esp,0x1c
c001aa33:	5b                   	pop    ebx
c001aa34:	5e                   	pop    esi
c001aa35:	5f                   	pop    edi
c001aa36:	5d                   	pop    ebp
c001aa37:	c3                   	ret    

c001aa38 <__static_initialization_and_destruction_0(int, int)>:
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001aa40:	75 1a                	jne    c001aa5c <__static_initialization_and_destruction_0(int, int)+0x24>
c001aa42:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001aa4a:	75 10                	jne    c001aa5c <__static_initialization_and_destruction_0(int, int)+0x24>
c001aa4c:	83 ec 0c             	sub    esp,0xc
c001aa4f:	68 60 92 02 c0       	push   0xc0029260
c001aa54:	e8 0b 84 00 00       	call   c0022e64 <Vm::_FPUState::_FPUState()>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	90                   	nop
c001aa5d:	83 c4 0c             	add    esp,0xc
c001aa60:	c3                   	ret    
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]

c001aa64 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001aa64:	83 ec 0c             	sub    esp,0xc
c001aa67:	83 ec 08             	sub    esp,0x8
c001aa6a:	68 ff ff 00 00       	push   0xffff
c001aa6f:	6a 01                	push   0x1
c001aa71:	e8 c2 ff ff ff       	call   c001aa38 <__static_initialization_and_destruction_0(int, int)>
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	83 c4 0c             	add    esp,0xc
c001aa7c:	c3                   	ret    

c001aa7d <Hal::noCopro(unsigned long)>:
c001aa7d:	c3                   	ret    

c001aa7e <Hal::noTSC()>:
c001aa7e:	31 c0                	xor    eax,eax
c001aa80:	31 d2                	xor    edx,edx
c001aa82:	c3                   	ret    

c001aa83 <Hal::readTSC()>:
c001aa83:	0f 31                	rdtsc  
c001aa85:	c3                   	ret    

c001aa86 <i386SaveCoprocessor(void*)>:
c001aa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8a:	83 c0 3f             	add    eax,0x3f
c001aa8d:	83 e0 c0             	and    eax,0xffffffc0
c001aa90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa94:	ff 25 b0 92 02 c0    	jmp    DWORD PTR ds:0xc00292b0

c001aa9a <i386LoadCoprocessor(void*)>:
c001aa9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9e:	83 c0 3f             	add    eax,0x3f
c001aaa1:	83 e0 c0             	and    eax,0xffffffc0
c001aaa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaa8:	ff 25 ac 92 02 c0    	jmp    DWORD PTR ds:0xc00292ac

c001aaae <x87EmulHandler(regs*, void*)>:
c001aaae:	53                   	push   ebx
c001aaaf:	83 ec 14             	sub    esp,0x14
c001aab2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aab6:	68 dc 60 02 c0       	push   0xc00260dc
c001aabb:	e8 53 25 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aac8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001aacc:	74 10                	je     c001aade <x87EmulHandler(regs*, void*)+0x30>
c001aace:	83 ec 0c             	sub    esp,0xc
c001aad1:	68 ec 60 02 c0       	push   0xc00260ec
c001aad6:	e8 96 a2 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001aadb:	83 c4 10             	add    esp,0x10
c001aade:	0f 20 c0             	mov    eax,cr0
c001aae1:	a8 08                	test   al,0x8
c001aae3:	0f 84 92 00 00 00    	je     c001ab7b <x87EmulHandler(regs*, void*)+0xcd>
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	68 00 61 02 c0       	push   0xc0026100
c001aaf1:	e8 1d 25 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001aaf6:	0f 06                	clts   
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	83 3d a8 92 02 c0 00 	cmp    DWORD PTR ds:0xc00292a8,0x0
c001ab02:	74 1e                	je     c001ab22 <x87EmulHandler(regs*, void*)+0x74>
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	68 06 61 02 c0       	push   0xc0026106
c001ab0c:	e8 02 25 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ab11:	5b                   	pop    ebx
c001ab12:	a1 a8 92 02 c0       	mov    eax,ds:0xc00292a8
c001ab17:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001ab1a:	e8 67 ff ff ff       	call   c001aa86 <i386SaveCoprocessor(void*)>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab27:	83 78 55 00          	cmp    DWORD PTR [eax+0x55],0x0
c001ab2b:	75 24                	jne    c001ab51 <x87EmulHandler(regs*, void*)+0xa3>
c001ab2d:	83 ec 0c             	sub    esp,0xc
c001ab30:	68 19 61 02 c0       	push   0xc0026119
c001ab35:	e8 d9 24 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ab3a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ab40:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c001ab47:	e8 bb f1 fe ff       	call   c0009d07 <malloc>
c001ab4c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001ab4f:	eb 1b                	jmp    c001ab6c <x87EmulHandler(regs*, void*)+0xbe>
c001ab51:	83 ec 0c             	sub    esp,0xc
c001ab54:	68 2e 61 02 c0       	push   0xc002612e
c001ab59:	e8 b5 24 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ab5e:	59                   	pop    ecx
c001ab5f:	a1 a8 92 02 c0       	mov    eax,ds:0xc00292a8
c001ab64:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001ab67:	e8 2e ff ff ff       	call   c001aa9a <i386LoadCoprocessor(void*)>
c001ab6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab71:	83 c4 10             	add    esp,0x10
c001ab74:	a3 a8 92 02 c0       	mov    ds:0xc00292a8,eax
c001ab79:	eb 2e                	jmp    c001aba9 <x87EmulHandler(regs*, void*)+0xfb>
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	53                   	push   ebx
c001ab7f:	e8 9a f3 ff ff       	call   c0019f1e <Vm::x87Handler(regs*)>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	84 c0                	test   al,al
c001ab89:	75 1e                	jne    c001aba9 <x87EmulHandler(regs*, void*)+0xfb>
c001ab8b:	83 ec 0c             	sub    esp,0xc
c001ab8e:	68 42 61 02 c0       	push   0xc0026142
c001ab93:	e8 7b 24 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ab98:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001aba0:	83 c4 18             	add    esp,0x18
c001aba3:	5b                   	pop    ebx
c001aba4:	e9 2b e2 ff ff       	jmp    c0018dd4 <Thr::terminateFromIRQ(int)>
c001aba9:	83 c4 08             	add    esp,0x8
c001abac:	5b                   	pop    ebx
c001abad:	c3                   	ret    

c001abae <Hal::initialiseCoprocessor()>:
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001abb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abbc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001abc2:	8b 10                	mov    edx,DWORD PTR [eax]
c001abc4:	6a 00                	push   0x0
c001abc6:	68 ae aa 01 c0       	push   0xc001aaae
c001abcb:	6a 07                	push   0x7
c001abcd:	50                   	push   eax
c001abce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001abd1:	e8 ca 74 00 00       	call   c00220a0 <avxDetect>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	85 c0                	test   eax,eax
c001abdb:	74 29                	je     c001ac06 <Hal::initialiseCoprocessor()+0x58>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	68 58 61 02 c0       	push   0xc0026158
c001abe5:	e8 29 24 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001abea:	c7 05 b0 92 02 c0 ca 20 02 c0 	mov    DWORD PTR ds:0xc00292b0,0xc00220ca
c001abf4:	c7 05 ac 92 02 c0 db 20 02 c0 	mov    DWORD PTR ds:0xc00292ac,0xc00220db
c001abfe:	83 c4 1c             	add    esp,0x1c
c001ac01:	e9 e6 74 00 00       	jmp    c00220ec <avxInit>
c001ac06:	e8 35 75 00 00       	call   c0022140 <absolutelyNoChanceInHell>
c001ac0b:	85 c0                	test   eax,eax
c001ac0d:	74 29                	je     c001ac38 <Hal::initialiseCoprocessor()+0x8a>
c001ac0f:	83 ec 0c             	sub    esp,0xc
c001ac12:	68 5e 61 02 c0       	push   0xc002615e
c001ac17:	e8 f7 23 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ac1c:	c7 05 b0 92 02 c0 58 21 02 c0 	mov    DWORD PTR ds:0xc00292b0,0xc0022158
c001ac26:	c7 05 ac 92 02 c0 60 21 02 c0 	mov    DWORD PTR ds:0xc00292ac,0xc0022160
c001ac30:	83 c4 1c             	add    esp,0x1c
c001ac33:	e9 30 75 00 00       	jmp    c0022168 <sseInit>
c001ac38:	e8 49 75 00 00       	call   c0022186 <x87Detect>
c001ac3d:	85 c0                	test   eax,eax
c001ac3f:	74 29                	je     c001ac6a <Hal::initialiseCoprocessor()+0xbc>
c001ac41:	83 ec 0c             	sub    esp,0xc
c001ac44:	68 64 61 02 c0       	push   0xc0026164
c001ac49:	e8 c5 23 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ac4e:	c7 05 b0 92 02 c0 a1 21 02 c0 	mov    DWORD PTR ds:0xc00292b0,0xc00221a1
c001ac58:	c7 05 ac 92 02 c0 a8 21 02 c0 	mov    DWORD PTR ds:0xc00292ac,0xc00221a8
c001ac62:	83 c4 1c             	add    esp,0x1c
c001ac65:	e9 45 75 00 00       	jmp    c00221af <x87Init>
c001ac6a:	83 ec 0c             	sub    esp,0xc
c001ac6d:	68 6a 61 02 c0       	push   0xc002616a
c001ac72:	e8 9c 23 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ac77:	c7 05 b0 92 02 c0 7d aa 01 c0 	mov    DWORD PTR ds:0xc00292b0,0xc001aa7d
c001ac81:	c7 05 ac 92 02 c0 7d aa 01 c0 	mov    DWORD PTR ds:0xc00292ac,0xc001aa7d
c001ac8b:	0f 20 c0             	mov    eax,cr0
c001ac8e:	83 c8 04             	or     eax,0x4
c001ac91:	0f 22 c0             	mov    cr0,eax
c001ac94:	83 c4 1c             	add    esp,0x1c
c001ac97:	c3                   	ret    

c001ac98 <Hal::panic(char const*)>:
c001ac98:	e9 d4 a0 ff ff       	jmp    c0014d71 <Krnl::panic(char const*)>

c001ac9d <Hal::initialise()>:
c001ac9d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001aca2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001aca8:	b8 83 aa 01 c0       	mov    eax,0xc001aa83
c001acad:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001acb4:	75 05                	jne    c001acbb <Hal::initialise()+0x1e>
c001acb6:	b8 7e aa 01 c0       	mov    eax,0xc001aa7e
c001acbb:	a3 b4 92 02 c0       	mov    ds:0xc00292b4,eax
c001acc0:	c3                   	ret    

c001acc1 <Hal::makeBeep(int)>:
c001acc1:	53                   	push   ebx
c001acc2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001acc6:	85 db                	test   ebx,ebx
c001acc8:	75 07                	jne    c001acd1 <Hal::makeBeep(int)+0x10>
c001acca:	e4 61                	in     al,0x61
c001accc:	83 e0 fc             	and    eax,0xfffffffc
c001accf:	eb 26                	jmp    c001acf7 <Hal::makeBeep(int)+0x36>
c001acd1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001acd6:	99                   	cdq    
c001acd7:	f7 fb                	idiv   ebx
c001acd9:	89 c1                	mov    ecx,eax
c001acdb:	b0 b6                	mov    al,0xb6
c001acdd:	e6 43                	out    0x43,al
c001acdf:	88 c8                	mov    al,cl
c001ace1:	e6 42                	out    0x42,al
c001ace3:	89 c8                	mov    eax,ecx
c001ace5:	c1 e8 08             	shr    eax,0x8
c001ace8:	e6 42                	out    0x42,al
c001acea:	e4 61                	in     al,0x61
c001acec:	88 c2                	mov    dl,al
c001acee:	83 ca 03             	or     edx,0x3
c001acf1:	38 c2                	cmp    dl,al
c001acf3:	74 04                	je     c001acf9 <Hal::makeBeep(int)+0x38>
c001acf5:	88 d0                	mov    al,dl
c001acf7:	e6 61                	out    0x61,al
c001acf9:	5b                   	pop    ebx
c001acfa:	c3                   	ret    

c001acfb <Hal::getRand()>:
c001acfb:	31 c0                	xor    eax,eax
c001acfd:	c3                   	ret    
c001acfe:	66 90                	xchg   ax,ax

c001ad00 <FAT::getName()>:
c001ad00:	b8 73 61 02 c0       	mov    eax,0xc0026173
c001ad05:	c3                   	ret    
c001ad06:	66 90                	xchg   ax,ax

c001ad08 <FAT::tell(void*, unsigned long long*)>:
c001ad08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad0d:	75 09                	jne    c001ad18 <FAT::tell(void*, unsigned long long*)+0x10>
c001ad0f:	b8 04 00 00 00       	mov    eax,0x4
c001ad14:	c3                   	ret    
c001ad15:	8d 76 00             	lea    esi,[esi+0x0]
c001ad18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad1d:	75 09                	jne    c001ad28 <FAT::tell(void*, unsigned long long*)+0x20>
c001ad1f:	b8 04 00 00 00       	mov    eax,0x4
c001ad24:	c3                   	ret    
c001ad25:	8d 76 00             	lea    esi,[esi+0x0]
c001ad28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad2c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ad2f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ad32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad36:	89 01                	mov    DWORD PTR [ecx],eax
c001ad38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad3b:	b8 00 00 00 00       	mov    eax,0x0
c001ad40:	c3                   	ret    
c001ad41:	90                   	nop
c001ad42:	66 90                	xchg   ax,ax

c001ad44 <FAT::stat(void*, unsigned long long*)>:
c001ad44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad49:	75 09                	jne    c001ad54 <FAT::stat(void*, unsigned long long*)+0x10>
c001ad4b:	b8 04 00 00 00       	mov    eax,0x4
c001ad50:	c3                   	ret    
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad59:	75 09                	jne    c001ad64 <FAT::stat(void*, unsigned long long*)+0x20>
c001ad5b:	b8 04 00 00 00       	mov    eax,0x4
c001ad60:	c3                   	ret    
c001ad61:	8d 76 00             	lea    esi,[esi+0x0]
c001ad64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ad6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ad6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad72:	89 01                	mov    DWORD PTR [ecx],eax
c001ad74:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad77:	b8 00 00 00 00       	mov    eax,0x0
c001ad7c:	c3                   	ret    
c001ad7d:	90                   	nop
c001ad7e:	66 90                	xchg   ax,ax

c001ad80 <FAT::~FAT()>:
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	ba bc 61 02 c0       	mov    edx,0xc00261bc
c001ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8c:	89 10                	mov    DWORD PTR [eax],edx
c001ad8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad92:	83 ec 0c             	sub    esp,0xc
c001ad95:	50                   	push   eax
c001ad96:	e8 b3 25 ff ff       	call   c000d34e <Filesystem::~Filesystem()>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	90                   	nop
c001ad9f:	83 c4 0c             	add    esp,0xc
c001ada2:	c3                   	ret    
c001ada3:	90                   	nop

c001ada4 <FAT::~FAT()>:
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	83 ec 0c             	sub    esp,0xc
c001adaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adae:	e8 cd ff ff ff       	call   c001ad80 <FAT::~FAT()>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	83 ec 08             	sub    esp,0x8
c001adb9:	6a 08                	push   0x8
c001adbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adbf:	e8 6e 21 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	83 c4 0c             	add    esp,0xc
c001adca:	c3                   	ret    
c001adcb:	90                   	nop

c001adcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001adcc:	83 ec 1c             	sub    esp,0x1c
c001adcf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001add6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001addb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001addf:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ade6:	83 f8 ff             	cmp    eax,0xffffffff
c001ade9:	75 35                	jne    c001ae20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001adeb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adef:	88 c2                	mov    dl,al
c001adf1:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001adf6:	01 d0                	add    eax,edx
c001adf8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adfc:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001ae02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae06:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001ae0d:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001ae12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae16:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001ae1d:	eb 19                	jmp    c001ae38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ae1f:	90                   	nop
c001ae20:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae24:	88 c2                	mov    dl,al
c001ae26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae2a:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ae31:	01 d0                	add    eax,edx
c001ae33:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae37:	90                   	nop
c001ae38:	83 ec 04             	sub    esp,0x4
c001ae3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae43:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ae47:	50                   	push   eax
c001ae48:	e8 dd bd fe ff       	call   c0006c2a <f_getlabel>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae59:	75 09                	jne    c001ae64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ae5b:	b8 00 00 00 00       	mov    eax,0x0
c001ae60:	eb 0a                	jmp    c001ae6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ae62:	66 90                	xchg   ax,ax
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	8d 76 00             	lea    esi,[esi+0x0]
c001ae6c:	83 c4 1c             	add    esp,0x1c
c001ae6f:	c3                   	ret    

c001ae70 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ae70:	57                   	push   edi
c001ae71:	83 ec 58             	sub    esp,0x58
c001ae74:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ae7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ae80:	b9 0f 00 00 00       	mov    ecx,0xf
c001ae85:	b8 00 00 00 00       	mov    eax,0x0
c001ae8a:	fc                   	cld    
c001ae8b:	89 d7                	mov    edi,edx
c001ae8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae8f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae93:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ae9a:	83 f8 ff             	cmp    eax,0xffffffff
c001ae9d:	75 35                	jne    c001aed4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001ae9f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aea3:	88 c2                	mov    dl,al
c001aea5:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001aeaa:	01 d0                	add    eax,edx
c001aeac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeb0:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001aeb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aeba:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001aec1:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001aec6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001aeca:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001aed1:	eb 19                	jmp    c001aeec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001aed3:	90                   	nop
c001aed4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aed8:	88 c2                	mov    dl,al
c001aeda:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aede:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001aee5:	01 d0                	add    eax,edx
c001aee7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeeb:	90                   	nop
c001aeec:	83 ec 08             	sub    esp,0x8
c001aeef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001aef3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aef7:	50                   	push   eax
c001aef8:	e8 7b 59 fe ff       	call   c0000878 <strcat>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af07:	50                   	push   eax
c001af08:	e8 0b bf fe ff       	call   c0006e18 <f_setlabel>
c001af0d:	83 c4 10             	add    esp,0x10
c001af10:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af14:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001af19:	75 09                	jne    c001af24 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001af1b:	b8 00 00 00 00       	mov    eax,0x0
c001af20:	eb 0a                	jmp    c001af2c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001af22:	66 90                	xchg   ax,ax
c001af24:	b8 01 00 00 00       	mov    eax,0x1
c001af29:	8d 76 00             	lea    esi,[esi+0x0]
c001af2c:	83 c4 58             	add    esp,0x58
c001af2f:	5f                   	pop    edi
c001af30:	c3                   	ret    
c001af31:	90                   	nop
c001af32:	66 90                	xchg   ax,ax

c001af34 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001af34:	83 ec 2c             	sub    esp,0x2c
c001af37:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001af3f:	83 ec 08             	sub    esp,0x8
c001af42:	68 97 61 02 c0       	push   0xc0026197
c001af47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af4b:	e8 74 58 fe ff       	call   c00007c4 <strcmp>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	85 c0                	test   eax,eax
c001af55:	0f 94 c0             	sete   al
c001af58:	84 c0                	test   al,al
c001af5a:	74 10                	je     c001af6c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001af5c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af64:	e9 b3 00 00 00       	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	83 ec 08             	sub    esp,0x8
c001af6f:	68 89 61 02 c0       	push   0xc0026189
c001af74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af78:	e8 47 58 fe ff       	call   c00007c4 <strcmp>
c001af7d:	83 c4 10             	add    esp,0x10
c001af80:	85 c0                	test   eax,eax
c001af82:	0f 94 c0             	sete   al
c001af85:	84 c0                	test   al,al
c001af87:	74 0f                	je     c001af98 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001af89:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af91:	e9 86 00 00 00       	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af96:	66 90                	xchg   ax,ax
c001af98:	83 ec 08             	sub    esp,0x8
c001af9b:	68 8f 61 02 c0       	push   0xc002618f
c001afa0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afa4:	e8 1b 58 fe ff       	call   c00007c4 <strcmp>
c001afa9:	83 c4 10             	add    esp,0x10
c001afac:	85 c0                	test   eax,eax
c001afae:	0f 94 c0             	sete   al
c001afb1:	84 c0                	test   al,al
c001afb3:	74 0b                	je     c001afc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001afb5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afbd:	eb 5d                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afbf:	90                   	nop
c001afc0:	83 ec 08             	sub    esp,0x8
c001afc3:	68 8c 34 02 c0       	push   0xc002348c
c001afc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afcc:	e8 f3 57 fe ff       	call   c00007c4 <strcmp>
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	85 c0                	test   eax,eax
c001afd6:	0f 94 c0             	sete   al
c001afd9:	84 c0                	test   al,al
c001afdb:	74 0b                	je     c001afe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001afdd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001afe5:	eb 35                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afe7:	90                   	nop
c001afe8:	83 ec 08             	sub    esp,0x8
c001afeb:	68 95 61 02 c0       	push   0xc0026195
c001aff0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aff4:	e8 cb 57 fe ff       	call   c00007c4 <strcmp>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	85 c0                	test   eax,eax
c001affe:	0f 94 c0             	sete   al
c001b001:	84 c0                	test   al,al
c001b003:	74 0b                	je     c001b010 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b005:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b00d:	eb 0d                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b00f:	90                   	nop
c001b010:	b8 08 00 00 00       	mov    eax,0x8
c001b015:	e9 ea 00 00 00       	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b01a:	66 90                	xchg   ax,ax
c001b01c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b023:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b02c:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001b033:	83 f8 ff             	cmp    eax,0xffffffff
c001b036:	75 34                	jne    c001b06c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b038:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b03c:	88 c2                	mov    dl,al
c001b03e:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b043:	01 d0                	add    eax,edx
c001b045:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b049:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001b04f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b053:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001b05a:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b05f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b063:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001b06a:	eb 18                	jmp    c001b084 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b06c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b070:	88 c2                	mov    dl,al
c001b072:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b076:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001b07d:	01 d0                	add    eax,edx
c001b07f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b083:	90                   	nop
c001b084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b088:	88 04 24             	mov    BYTE PTR [esp],al
c001b08b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b08f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b093:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b09b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b0a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	68 00 20 00 00       	push   0x2000
c001b0b0:	e8 52 ec fe ff       	call   c0009d07 <malloc>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0bc:	68 00 20 00 00       	push   0x2000
c001b0c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0c9:	50                   	push   eax
c001b0ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b0ce:	50                   	push   eax
c001b0cf:	e8 c5 c3 fe ff       	call   c0007499 <f_mkfs>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b0e0:	75 0a                	jne    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b0e2:	b8 00 00 00 00       	mov    eax,0x0
c001b0e7:	eb 1b                	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b0f1:	75 09                	jne    c001b0fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b0f3:	b8 09 00 00 00       	mov    eax,0x9
c001b0f8:	eb 0a                	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0fa:	66 90                	xchg   ax,ax
c001b0fc:	b8 01 00 00 00       	mov    eax,0x1
c001b101:	8d 76 00             	lea    esi,[esi+0x0]
c001b104:	83 c4 2c             	add    esp,0x2c
c001b107:	c3                   	ret    

c001b108 <FAT::tryMount(LogicalDisk*, int)>:
c001b108:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b10e:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b113:	83 f8 14             	cmp    eax,0x14
c001b116:	75 18                	jne    c001b130 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	68 9b 61 02 c0       	push   0xc002619b
c001b120:	e8 4c 9c ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	b0 00                	mov    al,0x0
c001b12a:	e9 e9 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b12f:	90                   	nop
c001b130:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b137:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b13d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b143:	3d 00 02 00 00       	cmp    eax,0x200
c001b148:	74 0a                	je     c001b154 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b14a:	b0 00                	mov    al,0x0
c001b14c:	e9 c7 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b151:	8d 76 00             	lea    esi,[esi+0x0]
c001b154:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b15c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b163:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001b16a:	83 f8 ff             	cmp    eax,0xffffffff
c001b16d:	74 09                	je     c001b178 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b16f:	b0 01                	mov    al,0x1
c001b171:	e9 a2 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b176:	66 90                	xchg   ax,ax
c001b178:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b182:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b18a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b191:	88 c2                	mov    dl,al
c001b193:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b198:	01 d0                	add    eax,edx
c001b19a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b1a1:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001b1a7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1ae:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001b1b5:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b1ba:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b1c1:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001b1c8:	83 ec 0c             	sub    esp,0xc
c001b1cb:	68 54 02 00 00       	push   0x254
c001b1d0:	e8 32 eb fe ff       	call   c0009d07 <malloc>
c001b1d5:	83 c4 10             	add    esp,0x10
c001b1d8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b1df:	83 ec 04             	sub    esp,0x4
c001b1e2:	6a 00                	push   0x0
c001b1e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b1eb:	50                   	push   eax
c001b1ec:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b1f3:	e8 29 9c fe ff       	call   c0004e21 <f_mount>
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b202:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b20a:	74 1c                	je     c001b228 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b20c:	83 ec 0c             	sub    esp,0xc
c001b20f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b216:	e8 0c eb fe ff       	call   c0009d27 <rfree>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	b0 00                	mov    al,0x0
c001b220:	e9 f3 00 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b225:	8d 76 00             	lea    esi,[esi+0x0]
c001b228:	83 ec 04             	sub    esp,0x4
c001b22b:	68 00 01 00 00       	push   0x100
c001b230:	6a 00                	push   0x0
c001b232:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b239:	50                   	push   eax
c001b23a:	e8 3d 54 fe ff       	call   c000067c <memset>
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	83 ec 08             	sub    esp,0x8
c001b245:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b24c:	50                   	push   eax
c001b24d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b254:	50                   	push   eax
c001b255:	e8 1e 56 fe ff       	call   c0000878 <strcat>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	83 ec 08             	sub    esp,0x8
c001b260:	68 a9 61 02 c0       	push   0xc00261a9
c001b265:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b26c:	50                   	push   eax
c001b26d:	e8 06 56 fe ff       	call   c0000878 <strcat>
c001b272:	83 c4 10             	add    esp,0x10
c001b275:	83 ec 04             	sub    esp,0x4
c001b278:	6a 01                	push   0x1
c001b27a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b281:	50                   	push   eax
c001b282:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b286:	50                   	push   eax
c001b287:	e8 f7 9b fe ff       	call   c0004e83 <f_open>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b296:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b29d:	85 c0                	test   eax,eax
c001b29f:	74 0b                	je     c001b2ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b2a1:	78 31                	js     c001b2d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2a3:	83 e8 04             	sub    eax,0x4
c001b2a6:	83 f8 01             	cmp    eax,0x1
c001b2a9:	77 29                	ja     c001b2d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2ab:	90                   	nop
c001b2ac:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b2bb:	50                   	push   eax
c001b2bc:	e8 14 a7 fe ff       	call   c00059d5 <f_close>
c001b2c1:	83 c4 10             	add    esp,0x10
c001b2c4:	90                   	nop
c001b2c5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b2cd:	74 41                	je     c001b310 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b2cf:	eb 33                	jmp    c001b304 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2de:	e8 44 ea fe ff       	call   c0009d27 <rfree>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	83 ec 04             	sub    esp,0x4
c001b2e9:	6a 00                	push   0x0
c001b2eb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2f2:	50                   	push   eax
c001b2f3:	6a 00                	push   0x0
c001b2f5:	e8 27 9b fe ff       	call   c0004e21 <f_mount>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	b0 00                	mov    al,0x0
c001b2ff:	eb 17                	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b301:	8d 76 00             	lea    esi,[esi+0x0]
c001b304:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b309:	40                   	inc    eax
c001b30a:	a3 c0 92 02 c0       	mov    ds:0xc00292c0,eax
c001b30f:	90                   	nop
c001b310:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b317:	90                   	nop
c001b318:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b31e:	c3                   	ret    
c001b31f:	90                   	nop

c001b320 <FAT::allocateSwapfile(char const*, int)>:
c001b320:	55                   	push   ebp
c001b321:	57                   	push   edi
c001b322:	56                   	push   esi
c001b323:	53                   	push   ebx
c001b324:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b32a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b335:	83 ec 0c             	sub    esp,0xc
c001b338:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b33f:	e8 c3 e9 fe ff       	call   c0009d07 <malloc>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	89 c7                	mov    edi,eax
c001b349:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c001b34e:	83 ec 04             	sub    esp,0x4
c001b351:	50                   	push   eax
c001b352:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b359:	57                   	push   edi
c001b35a:	e8 1f 22 ff ff       	call   c000d57e <File::File(char const*, Process*)>
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b369:	83 ec 04             	sub    esp,0x4
c001b36c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b370:	50                   	push   eax
c001b371:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b375:	50                   	push   eax
c001b376:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b37d:	e8 82 25 ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b38c:	c1 e0 14             	shl    eax,0x14
c001b38f:	89 c7                	mov    edi,eax
c001b391:	89 c5                	mov    ebp,eax
c001b393:	c1 fd 1f             	sar    ebp,0x1f
c001b396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b39e:	89 f9                	mov    ecx,edi
c001b3a0:	31 c1                	xor    ecx,eax
c001b3a2:	89 cb                	mov    ebx,ecx
c001b3a4:	89 e9                	mov    ecx,ebp
c001b3a6:	31 d1                	xor    ecx,edx
c001b3a8:	89 ce                	mov    esi,ecx
c001b3aa:	89 f0                	mov    eax,esi
c001b3ac:	09 d8                	or     eax,ebx
c001b3ae:	0f 84 98 00 00 00    	je     c001b44c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3be:	e8 0d 24 ff ff       	call   c000d7d0 <File::unlink()>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	83 ec 08             	sub    esp,0x8
c001b3c9:	6a 12                	push   0x12
c001b3cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3d2:	e8 81 22 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3f5:	c1 e0 14             	shl    eax,0x14
c001b3f8:	99                   	cdq    
c001b3f9:	6a 01                	push   0x1
c001b3fb:	52                   	push   edx
c001b3fc:	50                   	push   eax
c001b3fd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b404:	e8 7c bc fe ff       	call   c0007085 <f_expand>
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b413:	8b 00                	mov    eax,DWORD PTR [eax]
c001b415:	83 c0 10             	add    eax,0x10
c001b418:	8b 00                	mov    eax,DWORD PTR [eax]
c001b41a:	83 ec 0c             	sub    esp,0xc
c001b41d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b421:	52                   	push   edx
c001b422:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b426:	52                   	push   edx
c001b427:	6a 00                	push   0x0
c001b429:	68 00 04 00 00       	push   0x400
c001b42e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b435:	ff d0                	call   eax
c001b437:	83 c4 20             	add    esp,0x20
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b444:	e8 6d 22 ff ff       	call   c000d6b6 <File::close()>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	83 ec 08             	sub    esp,0x8
c001b44f:	6a 01                	push   0x1
c001b451:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b458:	e8 fb 21 ff ff       	call   c000d658 <File::open(FileOpenMode)>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b467:	8b 00                	mov    eax,DWORD PTR [eax]
c001b469:	83 c0 0c             	add    eax,0xc
c001b46c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b46e:	83 ec 0c             	sub    esp,0xc
c001b471:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b475:	52                   	push   edx
c001b476:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b47a:	52                   	push   edx
c001b47b:	6a 00                	push   0x0
c001b47d:	6a 04                	push   0x4
c001b47f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b486:	ff d0                	call   eax
c001b488:	83 c4 20             	add    esp,0x20
c001b48b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b492:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b498:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b49f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b4a6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b4a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b4ac:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4bd:	e8 f4 21 ff ff       	call   c000d6b6 <File::close()>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b4cc:	ba 00 00 00 00       	mov    edx,0x0
c001b4d1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b4d7:	5b                   	pop    ebx
c001b4d8:	5e                   	pop    esi
c001b4d9:	5f                   	pop    edi
c001b4da:	5d                   	pop    ebp
c001b4db:	c3                   	ret    

c001b4dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b4dc:	57                   	push   edi
c001b4dd:	56                   	push   esi
c001b4de:	53                   	push   ebx
c001b4df:	81 ec 50 02 00 00    	sub    esp,0x250
c001b4e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b4ed:	74 0d                	je     c001b4fc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b4ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b4f7:	75 0f                	jne    c001b508 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4fc:	b8 04 00 00 00       	mov    eax,0x4
c001b501:	e9 36 01 00 00       	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b506:	66 90                	xchg   ax,ax
c001b508:	83 ec 08             	sub    esp,0x8
c001b50b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b512:	50                   	push   eax
c001b513:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b51a:	e8 c0 aa fe ff       	call   c0005fdf <f_readdir>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b529:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b53a:	83 c0 1a             	add    eax,0x1a
c001b53d:	50                   	push   eax
c001b53e:	e8 55 51 fe ff       	call   c0000698 <strlen>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	ba 00 00 00 00       	mov    edx,0x0
c001b54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b553:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b55a:	0f b6 c0             	movzx  eax,al
c001b55d:	83 e0 10             	and    eax,0x10
c001b560:	74 0a                	je     c001b56c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b562:	b8 02 00 00 00       	mov    eax,0x2
c001b567:	eb 0b                	jmp    c001b574 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	b8 01 00 00 00       	mov    eax,0x1
c001b571:	8d 76 00             	lea    esi,[esi+0x0]
c001b574:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b578:	83 ec 08             	sub    esp,0x8
c001b57b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b582:	83 c0 1a             	add    eax,0x1a
c001b585:	50                   	push   eax
c001b586:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b58a:	83 c0 10             	add    eax,0x10
c001b58d:	50                   	push   eax
c001b58e:	e8 a5 51 fe ff       	call   c0000738 <strcpy>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b59d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b5a4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b5a8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b5af:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b5b6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b5bd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b5c4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b5cb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b5d2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b5d9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b5e0:	89 c6                	mov    esi,eax
c001b5e2:	89 d7                	mov    edi,edx
c001b5e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5e6:	89 c8                	mov    eax,ecx
c001b5e8:	89 fa                	mov    edx,edi
c001b5ea:	89 f3                	mov    ebx,esi
c001b5ec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b5f3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b5fa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b601:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b608:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b60e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b615:	84 c0                	test   al,al
c001b617:	75 07                	jne    c001b620 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b619:	b8 07 00 00 00       	mov    eax,0x7
c001b61e:	eb 1c                	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b620:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b627:	85 c0                	test   eax,eax
c001b629:	75 09                	jne    c001b634 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b62b:	b8 00 00 00 00       	mov    eax,0x0
c001b630:	eb 0a                	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b632:	66 90                	xchg   ax,ax
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	81 c4 50 02 00 00    	add    esp,0x250
c001b642:	5b                   	pop    ebx
c001b643:	5e                   	pop    esi
c001b644:	5f                   	pop    edi
c001b645:	c3                   	ret    
c001b646:	66 90                	xchg   ax,ax

c001b648 <FAT::read(void*, unsigned long, void*, int*)>:
c001b648:	83 ec 1c             	sub    esp,0x1c
c001b64b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b650:	74 0a                	je     c001b65c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b652:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b657:	75 0b                	jne    c001b664 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	b8 04 00 00 00       	mov    eax,0x4
c001b661:	eb 41                	jmp    c001b6a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b663:	90                   	nop
c001b664:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b668:	50                   	push   eax
c001b669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b671:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b675:	e8 45 9c fe ff       	call   c00052bf <f_read>
c001b67a:	83 c4 10             	add    esp,0x10
c001b67d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b685:	89 c2                	mov    edx,eax
c001b687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b68b:	89 10                	mov    DWORD PTR [eax],edx
c001b68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b691:	85 c0                	test   eax,eax
c001b693:	75 07                	jne    c001b69c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b695:	b8 00 00 00 00       	mov    eax,0x0
c001b69a:	eb 08                	jmp    c001b6a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b69c:	b8 01 00 00 00       	mov    eax,0x1
c001b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a4:	83 c4 1c             	add    esp,0x1c
c001b6a7:	c3                   	ret    

c001b6a8 <FAT::write(void*, unsigned long, void*, int*)>:
c001b6a8:	83 ec 1c             	sub    esp,0x1c
c001b6ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6b0:	74 0a                	je     c001b6bc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b6b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b6b7:	75 0b                	jne    c001b6c4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	b8 04 00 00 00       	mov    eax,0x4
c001b6c1:	eb 41                	jmp    c001b704 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6c3:	90                   	nop
c001b6c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6c8:	50                   	push   eax
c001b6c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6d5:	e8 65 9e fe ff       	call   c000553f <f_write>
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e5:	89 c2                	mov    edx,eax
c001b6e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6eb:	89 10                	mov    DWORD PTR [eax],edx
c001b6ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f1:	85 c0                	test   eax,eax
c001b6f3:	75 07                	jne    c001b6fc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b6f5:	b8 00 00 00 00       	mov    eax,0x0
c001b6fa:	eb 08                	jmp    c001b704 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6fc:	b8 01 00 00 00       	mov    eax,0x1
c001b701:	8d 76 00             	lea    esi,[esi+0x0]
c001b704:	83 c4 1c             	add    esp,0x1c
c001b707:	c3                   	ret    

c001b708 <FAT::close(void*)>:
c001b708:	83 ec 1c             	sub    esp,0x1c
c001b70b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b710:	75 0a                	jne    c001b71c <FAT::close(void*)+0x14>
c001b712:	b8 04 00 00 00       	mov    eax,0x4
c001b717:	eb 3f                	jmp    c001b758 <FAT::close(void*)+0x50>
c001b719:	8d 76 00             	lea    esi,[esi+0x0]
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b723:	e8 ad a2 fe ff       	call   c00059d5 <f_close>
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b72f:	83 ec 0c             	sub    esp,0xc
c001b732:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b736:	e8 dc e5 fe ff       	call   c0009d17 <free>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b742:	85 c0                	test   eax,eax
c001b744:	75 0a                	jne    c001b750 <FAT::close(void*)+0x48>
c001b746:	b8 00 00 00 00       	mov    eax,0x0
c001b74b:	eb 0b                	jmp    c001b758 <FAT::close(void*)+0x50>
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	8d 76 00             	lea    esi,[esi+0x0]
c001b758:	83 c4 1c             	add    esp,0x1c
c001b75b:	c3                   	ret    

c001b75c <FAT::closeDir(void*)>:
c001b75c:	83 ec 1c             	sub    esp,0x1c
c001b75f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b764:	75 0a                	jne    c001b770 <FAT::closeDir(void*)+0x14>
c001b766:	b8 04 00 00 00       	mov    eax,0x4
c001b76b:	eb 3f                	jmp    c001b7ac <FAT::closeDir(void*)+0x50>
c001b76d:	8d 76 00             	lea    esi,[esi+0x0]
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b777:	e8 41 a8 fe ff       	call   c0005fbd <f_closedir>
c001b77c:	83 c4 10             	add    esp,0x10
c001b77f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b783:	83 ec 0c             	sub    esp,0xc
c001b786:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b78a:	e8 88 e5 fe ff       	call   c0009d17 <free>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b796:	85 c0                	test   eax,eax
c001b798:	75 0a                	jne    c001b7a4 <FAT::closeDir(void*)+0x48>
c001b79a:	b8 00 00 00 00       	mov    eax,0x0
c001b79f:	eb 0b                	jmp    c001b7ac <FAT::closeDir(void*)+0x50>
c001b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a4:	b8 01 00 00 00       	mov    eax,0x1
c001b7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ac:	83 c4 1c             	add    esp,0x1c
c001b7af:	c3                   	ret    

c001b7b0 <FAT::seek(void*, unsigned long long)>:
c001b7b0:	83 ec 2c             	sub    esp,0x2c
c001b7b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b7c8:	75 0a                	jne    c001b7d4 <FAT::seek(void*, unsigned long long)+0x24>
c001b7ca:	b8 04 00 00 00       	mov    eax,0x4
c001b7cf:	eb 37                	jmp    c001b808 <FAT::seek(void*, unsigned long long)+0x58>
c001b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d4:	83 ec 04             	sub    esp,0x4
c001b7d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b7e3:	e8 1c a2 fe ff       	call   c0005a04 <f_lseek>
c001b7e8:	83 c4 10             	add    esp,0x10
c001b7eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7f3:	85 c0                	test   eax,eax
c001b7f5:	75 09                	jne    c001b800 <FAT::seek(void*, unsigned long long)+0x50>
c001b7f7:	b8 00 00 00 00       	mov    eax,0x0
c001b7fc:	eb 0a                	jmp    c001b808 <FAT::seek(void*, unsigned long long)+0x58>
c001b7fe:	66 90                	xchg   ax,ax
c001b800:	b8 01 00 00 00       	mov    eax,0x1
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	83 c4 2c             	add    esp,0x2c
c001b80b:	c3                   	ret    

c001b80c <fatWrapperReadDisk>:
c001b80c:	83 ec 1c             	sub    esp,0x1c
c001b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b813:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b817:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b81b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b81e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b822:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b826:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b82b:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b836:	83 ec 0c             	sub    esp,0xc
c001b839:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b83d:	52                   	push   edx
c001b83e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b846:	50                   	push   eax
c001b847:	e8 c6 4d ff ff       	call   c0010612 <LogicalDisk::read(unsigned long long, int, void*)>
c001b84c:	83 c4 20             	add    esp,0x20
c001b84f:	83 c4 1c             	add    esp,0x1c
c001b852:	c3                   	ret    
c001b853:	90                   	nop

c001b854 <fatWrapperWriteDisk>:
c001b854:	83 ec 1c             	sub    esp,0x1c
c001b857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b85f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b863:	89 04 24             	mov    DWORD PTR [esp],eax
c001b866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b86a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b86e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b873:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b87a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b885:	52                   	push   edx
c001b886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88e:	50                   	push   eax
c001b88f:	e8 ea 4d ff ff       	call   c001067e <LogicalDisk::write(unsigned long long, int, void*)>
c001b894:	83 c4 20             	add    esp,0x20
c001b897:	83 c4 1c             	add    esp,0x1c
c001b89a:	c3                   	ret    
c001b89b:	90                   	nop

c001b89c <fatWrapperIoctl>:
c001b89c:	53                   	push   ebx
c001b89d:	83 ec 28             	sub    esp,0x28
c001b8a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8a8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8b0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b8b5:	75 31                	jne    c001b8e8 <fatWrapperIoctl+0x4c>
c001b8b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8c4:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b8cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8db:	66 89 02             	mov    WORD PTR [edx],ax
c001b8de:	b8 00 00 00 00       	mov    eax,0x0
c001b8e3:	e9 bc 00 00 00       	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b8e8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b8ed:	75 6d                	jne    c001b95c <fatWrapperIoctl+0xc0>
c001b8ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8fc:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b903:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b909:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b90f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b915:	89 c8                	mov    eax,ecx
c001b917:	89 da                	mov    edx,ebx
c001b919:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b91d:	c1 e0 0a             	shl    eax,0xa
c001b920:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b925:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c001b92c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b932:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b938:	89 cb                	mov    ebx,ecx
c001b93a:	c1 fb 1f             	sar    ebx,0x1f
c001b93d:	53                   	push   ebx
c001b93e:	51                   	push   ecx
c001b93f:	52                   	push   edx
c001b940:	50                   	push   eax
c001b941:	e8 7a 6b 00 00       	call   c00224c0 <__udivdi3>
c001b946:	83 c4 10             	add    esp,0x10
c001b949:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b94d:	89 01                	mov    DWORD PTR [ecx],eax
c001b94f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b952:	b8 00 00 00 00       	mov    eax,0x0
c001b957:	eb 4b                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b959:	8d 76 00             	lea    esi,[esi+0x0]
c001b95c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b961:	75 09                	jne    c001b96c <fatWrapperIoctl+0xd0>
c001b963:	b8 00 00 00 00       	mov    eax,0x0
c001b968:	eb 3a                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b96a:	66 90                	xchg   ax,ax
c001b96c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b971:	75 19                	jne    c001b98c <fatWrapperIoctl+0xf0>
c001b973:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b97b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b97f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b985:	b8 00 00 00 00       	mov    eax,0x0
c001b98a:	eb 18                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b98c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b991:	75 09                	jne    c001b99c <fatWrapperIoctl+0x100>
c001b993:	b8 00 00 00 00       	mov    eax,0x0
c001b998:	eb 0a                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b99a:	66 90                	xchg   ax,ax
c001b99c:	b8 04 00 00 00       	mov    eax,0x4
c001b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a4:	83 c4 28             	add    esp,0x28
c001b9a7:	5b                   	pop    ebx
c001b9a8:	c3                   	ret    
c001b9a9:	90                   	nop
c001b9aa:	66 90                	xchg   ax,ax

c001b9ac <FAT::FAT()>:
c001b9ac:	83 ec 1c             	sub    esp,0x1c
c001b9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	50                   	push   eax
c001b9b7:	e8 6e 19 ff ff       	call   c000d32a <Filesystem::Filesystem()>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	ba bc 61 02 c0       	mov    edx,0xc00261bc
c001b9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c8:	89 10                	mov    DWORD PTR [eax],edx
c001b9ca:	c7 05 c0 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00292c0,0x0
c001b9d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9dc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b9e1:	7f 15                	jg     c001b9f8 <FAT::FAT()+0x4c>
c001b9e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9e7:	c7 04 85 e0 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6d20],0xffffffff
c001b9f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b9f6:	eb e4                	jmp    c001b9dc <FAT::FAT()+0x30>
c001b9f8:	90                   	nop
c001b9f9:	83 c4 1c             	add    esp,0x1c
c001b9fc:	c3                   	ret    
c001b9fd:	90                   	nop
c001b9fe:	66 90                	xchg   ax,ax

c001ba00 <FAT::fixFilepath(char*)>:
c001ba00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba04:	8a 00                	mov    al,BYTE PTR [eax]
c001ba06:	3c 40                	cmp    al,0x40
c001ba08:	7e 2e                	jle    c001ba38 <FAT::fixFilepath(char*)+0x38>
c001ba0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba0e:	8a 00                	mov    al,BYTE PTR [eax]
c001ba10:	83 e8 41             	sub    eax,0x41
c001ba13:	88 c2                	mov    dl,al
c001ba15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba19:	88 10                	mov    BYTE PTR [eax],dl
c001ba1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba1f:	8a 00                	mov    al,BYTE PTR [eax]
c001ba21:	0f be c0             	movsx  eax,al
c001ba24:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ba2b:	83 c0 30             	add    eax,0x30
c001ba2e:	88 c2                	mov    dl,al
c001ba30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba34:	88 10                	mov    BYTE PTR [eax],dl
c001ba36:	66 90                	xchg   ax,ax
c001ba38:	90                   	nop
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <FAT::open(char const*, void**, FileOpenMode)>:
c001ba3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba4a:	74 0c                	je     c001ba58 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba4c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba54:	75 0e                	jne    c001ba64 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ba56:	66 90                	xchg   ax,ax
c001ba58:	b8 04 00 00 00       	mov    eax,0x4
c001ba5d:	e9 06 01 00 00       	jmp    c001bb68 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba62:	66 90                	xchg   ax,ax
c001ba64:	83 ec 08             	sub    esp,0x8
c001ba67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba72:	50                   	push   eax
c001ba73:	e8 c0 4c fe ff       	call   c0000738 <strcpy>
c001ba78:	83 c4 10             	add    esp,0x10
c001ba7b:	83 ec 08             	sub    esp,0x8
c001ba7e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba82:	50                   	push   eax
c001ba83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba8a:	e8 71 ff ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001ba8f:	83 c4 10             	add    esp,0x10
c001ba92:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ba9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baa1:	83 e0 01             	and    eax,0x1
c001baa4:	74 0a                	je     c001bab0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001baa6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001baae:	66 90                	xchg   ax,ax
c001bab0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bab7:	83 e0 04             	and    eax,0x4
c001baba:	74 10                	je     c001bacc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001babc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bac4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bacc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bad3:	83 e0 02             	and    eax,0x2
c001bad6:	74 08                	je     c001bae0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bad8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bae0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bae7:	83 e0 08             	and    eax,0x8
c001baea:	74 08                	je     c001baf4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001baec:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001baf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bafb:	83 e0 10             	and    eax,0x10
c001bafe:	74 08                	je     c001bb08 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bb00:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bb08:	83 ec 0c             	sub    esp,0xc
c001bb0b:	68 50 02 00 00       	push   0x250
c001bb10:	e8 f2 e1 fe ff       	call   c0009d07 <malloc>
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	89 c2                	mov    edx,eax
c001bb1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb21:	89 10                	mov    DWORD PTR [eax],edx
c001bb23:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb32:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb34:	83 ec 04             	sub    esp,0x4
c001bb37:	52                   	push   edx
c001bb38:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb3c:	52                   	push   edx
c001bb3d:	50                   	push   eax
c001bb3e:	e8 40 93 fe ff       	call   c0004e83 <f_open>
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bb4d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bb55:	74 09                	je     c001bb60 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bb57:	b8 01 00 00 00       	mov    eax,0x1
c001bb5c:	eb 0a                	jmp    c001bb68 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb5e:	66 90                	xchg   ax,ax
c001bb60:	b8 00 00 00 00       	mov    eax,0x0
c001bb65:	8d 76 00             	lea    esi,[esi+0x0]
c001bb68:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb6e:	c3                   	ret    
c001bb6f:	90                   	nop

c001bb70 <FAT::openDir(char const*, void**)>:
c001bb70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb7e:	74 0c                	je     c001bb8c <FAT::openDir(char const*, void**)+0x1c>
c001bb80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb88:	75 0e                	jne    c001bb98 <FAT::openDir(char const*, void**)+0x28>
c001bb8a:	66 90                	xchg   ax,ax
c001bb8c:	b8 04 00 00 00       	mov    eax,0x4
c001bb91:	e9 82 00 00 00       	jmp    c001bc18 <FAT::openDir(char const*, void**)+0xa8>
c001bb96:	66 90                	xchg   ax,ax
c001bb98:	83 ec 08             	sub    esp,0x8
c001bb9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bba2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bba6:	50                   	push   eax
c001bba7:	e8 8c 4b fe ff       	call   c0000738 <strcpy>
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	83 ec 08             	sub    esp,0x8
c001bbb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbb6:	50                   	push   eax
c001bbb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbbe:	e8 3d fe ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	83 ec 0c             	sub    esp,0xc
c001bbc9:	6a 4c                	push   0x4c
c001bbcb:	e8 37 e1 fe ff       	call   c0009d07 <malloc>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	89 c2                	mov    edx,eax
c001bbd5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbdc:	89 10                	mov    DWORD PTR [eax],edx
c001bbde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe7:	83 ec 08             	sub    esp,0x8
c001bbea:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bbee:	52                   	push   edx
c001bbef:	50                   	push   eax
c001bbf0:	e8 c6 a2 fe ff       	call   c0005ebb <f_opendir>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bbff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bc07:	74 07                	je     c001bc10 <FAT::openDir(char const*, void**)+0xa0>
c001bc09:	b8 01 00 00 00       	mov    eax,0x1
c001bc0e:	eb 08                	jmp    c001bc18 <FAT::openDir(char const*, void**)+0xa8>
c001bc10:	b8 00 00 00 00       	mov    eax,0x0
c001bc15:	8d 76 00             	lea    esi,[esi+0x0]
c001bc18:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc1e:	c3                   	ret    
c001bc1f:	90                   	nop

c001bc20 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc26:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc2e:	75 0c                	jne    c001bc3c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc30:	b8 04 00 00 00       	mov    eax,0x4
c001bc35:	e9 d2 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc3a:	66 90                	xchg   ax,ax
c001bc3c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bc44:	75 0a                	jne    c001bc50 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bc46:	b8 04 00 00 00       	mov    eax,0x4
c001bc4b:	e9 bc 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc50:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bc58:	75 0a                	jne    c001bc64 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bc5a:	b8 04 00 00 00       	mov    eax,0x4
c001bc5f:	e9 a8 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc64:	83 ec 08             	sub    esp,0x8
c001bc67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc6e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bc75:	50                   	push   eax
c001bc76:	e8 bd 4a fe ff       	call   c0000738 <strcpy>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	83 ec 08             	sub    esp,0x8
c001bc81:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bc88:	50                   	push   eax
c001bc89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc90:	e8 6b fd ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	83 ec 08             	sub    esp,0x8
c001bc9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc9f:	50                   	push   eax
c001bca0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bca7:	50                   	push   eax
c001bca8:	e8 cd a3 fe ff       	call   c000607a <f_stat>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bcb7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bcbe:	85 c0                	test   eax,eax
c001bcc0:	74 0a                	je     c001bccc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bcc2:	83 f8 04             	cmp    eax,0x4
c001bcc5:	74 35                	je     c001bcfc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bcc7:	eb 3b                	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcd0:	0f b6 c0             	movzx  eax,al
c001bcd3:	83 e0 10             	and    eax,0x10
c001bcd6:	0f 95 c2             	setne  dl
c001bcd9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bce0:	88 10                	mov    BYTE PTR [eax],dl
c001bce2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bce5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bce9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bcf0:	89 01                	mov    DWORD PTR [ecx],eax
c001bcf2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bcf5:	b8 00 00 00 00       	mov    eax,0x0
c001bcfa:	eb 10                	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bcfc:	b8 02 00 00 00       	mov    eax,0x2
c001bd01:	eb 09                	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd03:	90                   	nop
c001bd04:	b8 01 00 00 00       	mov    eax,0x1
c001bd09:	8d 76 00             	lea    esi,[esi+0x0]
c001bd0c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd12:	c3                   	ret    
c001bd13:	90                   	nop

c001bd14 <FAT::unlink(char const*)>:
c001bd14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd22:	75 08                	jne    c001bd2c <FAT::unlink(char const*)+0x18>
c001bd24:	b8 04 00 00 00       	mov    eax,0x4
c001bd29:	eb 61                	jmp    c001bd8c <FAT::unlink(char const*)+0x78>
c001bd2b:	90                   	nop
c001bd2c:	83 ec 08             	sub    esp,0x8
c001bd2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd36:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd3a:	50                   	push   eax
c001bd3b:	e8 f8 49 fe ff       	call   c0000738 <strcpy>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	83 ec 08             	sub    esp,0x8
c001bd46:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd4a:	50                   	push   eax
c001bd4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd52:	e8 a9 fc ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bd57:	83 c4 10             	add    esp,0x10
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd61:	50                   	push   eax
c001bd62:	e8 65 a6 fe ff       	call   c00063cc <f_unlink>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd71:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd78:	85 c0                	test   eax,eax
c001bd7a:	75 08                	jne    c001bd84 <FAT::unlink(char const*)+0x70>
c001bd7c:	b8 00 00 00 00       	mov    eax,0x0
c001bd81:	eb 09                	jmp    c001bd8c <FAT::unlink(char const*)+0x78>
c001bd83:	90                   	nop
c001bd84:	b8 01 00 00 00       	mov    eax,0x1
c001bd89:	8d 76 00             	lea    esi,[esi+0x0]
c001bd8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd92:	c3                   	ret    
c001bd93:	90                   	nop

c001bd94 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bd94:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bd9a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bda1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bda8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bdac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bdb0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bdb8:	75 0a                	jne    c001bdc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bdba:	b8 04 00 00 00       	mov    eax,0x4
c001bdbf:	e9 30 01 00 00       	jmp    c001bef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bdc4:	83 ec 08             	sub    esp,0x8
c001bdc7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdce:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdd2:	50                   	push   eax
c001bdd3:	e8 60 49 fe ff       	call   c0000738 <strcpy>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	83 ec 08             	sub    esp,0x8
c001bdde:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bde2:	50                   	push   eax
c001bde3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdea:	e8 11 fc ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bdfa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001be02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be07:	83 e0 01             	and    eax,0x1
c001be0a:	74 08                	je     c001be14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001be0c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001be14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be19:	83 e0 02             	and    eax,0x2
c001be1c:	74 0a                	je     c001be28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001be1e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001be26:	66 90                	xchg   ax,ax
c001be28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be2d:	83 e0 04             	and    eax,0x4
c001be30:	74 0a                	je     c001be3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001be32:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001be3a:	66 90                	xchg   ax,ax
c001be3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be41:	83 e0 08             	and    eax,0x8
c001be44:	74 0a                	je     c001be50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001be46:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001be4e:	66 90                	xchg   ax,ax
c001be50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be55:	83 e0 01             	and    eax,0x1
c001be58:	74 0a                	je     c001be64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001be5a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001be62:	66 90                	xchg   ax,ax
c001be64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be69:	83 e0 02             	and    eax,0x2
c001be6c:	74 0a                	je     c001be78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001be6e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001be76:	66 90                	xchg   ax,ax
c001be78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be7d:	83 e0 04             	and    eax,0x4
c001be80:	74 0a                	je     c001be8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001be82:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001be8a:	66 90                	xchg   ax,ax
c001be8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be91:	83 e0 08             	and    eax,0x8
c001be94:	74 0a                	je     c001bea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001be96:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001be9e:	66 90                	xchg   ax,ax
c001bea0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bea7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001beae:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001beb6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bebe:	83 ec 04             	sub    esp,0x4
c001bec1:	52                   	push   edx
c001bec2:	50                   	push   eax
c001bec3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bec7:	50                   	push   eax
c001bec8:	e8 a1 ab fe ff       	call   c0006a6e <f_chmod>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bed7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bede:	85 c0                	test   eax,eax
c001bee0:	75 0a                	jne    c001beec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bee2:	b8 00 00 00 00       	mov    eax,0x0
c001bee7:	eb 0b                	jmp    c001bef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bee9:	8d 76 00             	lea    esi,[esi+0x0]
c001beec:	b8 01 00 00 00       	mov    eax,0x1
c001bef1:	8d 76 00             	lea    esi,[esi+0x0]
c001bef4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001befa:	c3                   	ret    
c001befb:	90                   	nop

c001befc <FAT::rename(char const*, char const*)>:
c001befc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf02:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bf0a:	74 0c                	je     c001bf18 <FAT::rename(char const*, char const*)+0x1c>
c001bf0c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bf14:	75 0e                	jne    c001bf24 <FAT::rename(char const*, char const*)+0x28>
c001bf16:	66 90                	xchg   ax,ax
c001bf18:	b8 04 00 00 00       	mov    eax,0x4
c001bf1d:	e9 9e 00 00 00       	jmp    c001bfc0 <FAT::rename(char const*, char const*)+0xc4>
c001bf22:	66 90                	xchg   ax,ax
c001bf24:	83 ec 08             	sub    esp,0x8
c001bf27:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf2e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf35:	50                   	push   eax
c001bf36:	e8 fd 47 fe ff       	call   c0000738 <strcpy>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	83 ec 08             	sub    esp,0x8
c001bf41:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bf48:	50                   	push   eax
c001bf49:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf50:	e8 ab fa ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	83 ec 08             	sub    esp,0x8
c001bf5b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bf62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf66:	50                   	push   eax
c001bf67:	e8 cc 47 fe ff       	call   c0000738 <strcpy>
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	83 ec 08             	sub    esp,0x8
c001bf72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf76:	50                   	push   eax
c001bf77:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf7e:	e8 7d fa ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	83 ec 08             	sub    esp,0x8
c001bf89:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf8d:	50                   	push   eax
c001bf8e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf95:	50                   	push   eax
c001bf96:	e8 e0 a7 fe ff       	call   c000677b <f_rename>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bfa5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bfac:	85 c0                	test   eax,eax
c001bfae:	75 08                	jne    c001bfb8 <FAT::rename(char const*, char const*)+0xbc>
c001bfb0:	b8 00 00 00 00       	mov    eax,0x0
c001bfb5:	eb 09                	jmp    c001bfc0 <FAT::rename(char const*, char const*)+0xc4>
c001bfb7:	90                   	nop
c001bfb8:	b8 01 00 00 00       	mov    eax,0x1
c001bfbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bfc6:	c3                   	ret    
c001bfc7:	90                   	nop

c001bfc8 <FAT::mkdir(char const*)>:
c001bfc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfd6:	75 08                	jne    c001bfe0 <FAT::mkdir(char const*)+0x18>
c001bfd8:	b8 04 00 00 00       	mov    eax,0x4
c001bfdd:	eb 61                	jmp    c001c040 <FAT::mkdir(char const*)+0x78>
c001bfdf:	90                   	nop
c001bfe0:	83 ec 08             	sub    esp,0x8
c001bfe3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfee:	50                   	push   eax
c001bfef:	e8 44 47 fe ff       	call   c0000738 <strcpy>
c001bff4:	83 c4 10             	add    esp,0x10
c001bff7:	83 ec 08             	sub    esp,0x8
c001bffa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bffe:	50                   	push   eax
c001bfff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c006:	e8 f5 f9 ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	83 ec 0c             	sub    esp,0xc
c001c011:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c015:	50                   	push   eax
c001c016:	e8 34 a5 fe ff       	call   c000654f <f_mkdir>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c025:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c02c:	85 c0                	test   eax,eax
c001c02e:	75 08                	jne    c001c038 <FAT::mkdir(char const*)+0x70>
c001c030:	b8 00 00 00 00       	mov    eax,0x0
c001c035:	eb 09                	jmp    c001c040 <FAT::mkdir(char const*)+0x78>
c001c037:	90                   	nop
c001c038:	b8 01 00 00 00       	mov    eax,0x1
c001c03d:	8d 76 00             	lea    esi,[esi+0x0]
c001c040:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c046:	c3                   	ret    
c001c047:	90                   	nop

c001c048 <FAT::exists(char const*)>:
c001c048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c04e:	83 ec 08             	sub    esp,0x8
c001c051:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c05c:	50                   	push   eax
c001c05d:	e8 d6 46 fe ff       	call   c0000738 <strcpy>
c001c062:	83 c4 10             	add    esp,0x10
c001c065:	83 ec 08             	sub    esp,0x8
c001c068:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c06c:	50                   	push   eax
c001c06d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c074:	e8 87 f9 ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	83 ec 08             	sub    esp,0x8
c001c07f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c086:	50                   	push   eax
c001c087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c08b:	50                   	push   eax
c001c08c:	e8 e9 9f fe ff       	call   c000607a <f_stat>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c09b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c0a2:	85 c0                	test   eax,eax
c001c0a4:	75 06                	jne    c001c0ac <FAT::exists(char const*)+0x64>
c001c0a6:	b0 01                	mov    al,0x1
c001c0a8:	eb 06                	jmp    c001c0b0 <FAT::exists(char const*)+0x68>
c001c0aa:	66 90                	xchg   ax,ax
c001c0ac:	b0 00                	mov    al,0x0
c001c0ae:	66 90                	xchg   ax,ax
c001c0b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c0b6:	c3                   	ret    
c001c0b7:	90                   	nop

c001c0b8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c0b8:	b8 08 00 00 00       	mov    eax,0x8
c001c0bd:	c3                   	ret    

c001c0be <ISO9660::seek(void*, unsigned long long)>:
c001c0be:	53                   	push   ebx
c001c0bf:	b8 04 00 00 00       	mov    eax,0x4
c001c0c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0d0:	85 d2                	test   edx,edx
c001c0d2:	74 17                	je     c001c0eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0d4:	89 c8                	mov    eax,ecx
c001c0d6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c0d9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c0dc:	b8 01 00 00 00       	mov    eax,0x1
c001c0e1:	73 08                	jae    c001c0eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0e3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c0e6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c0e9:	31 c0                	xor    eax,eax
c001c0eb:	5b                   	pop    ebx
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop

c001c0ee <ISO9660::tell(void*, unsigned long long*)>:
c001c0ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0f6:	85 d2                	test   edx,edx
c001c0f8:	74 12                	je     c001c10c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0fa:	85 c0                	test   eax,eax
c001c0fc:	74 0e                	je     c001c10c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0fe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c101:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c104:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c107:	89 10                	mov    DWORD PTR [eax],edx
c001c109:	31 c0                	xor    eax,eax
c001c10b:	c3                   	ret    
c001c10c:	b8 04 00 00 00       	mov    eax,0x4
c001c111:	c3                   	ret    

c001c112 <ISO9660::getName()>:
c001c112:	b8 1c 62 02 c0       	mov    eax,0xc002621c
c001c117:	c3                   	ret    

c001c118 <ISO9660::stat(void*, unsigned long long*)>:
c001c118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c120:	85 d2                	test   edx,edx
c001c122:	74 12                	je     c001c136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c124:	85 c0                	test   eax,eax
c001c126:	74 0e                	je     c001c136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c128:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c12b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c12e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c131:	89 10                	mov    DWORD PTR [eax],edx
c001c133:	31 c0                	xor    eax,eax
c001c135:	c3                   	ret    
c001c136:	b8 04 00 00 00       	mov    eax,0x4
c001c13b:	c3                   	ret    

c001c13c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c13c:	b8 01 00 00 00       	mov    eax,0x1
c001c141:	c3                   	ret    

c001c142 <ISO9660::unlink(char const*)>:
c001c142:	b8 01 00 00 00       	mov    eax,0x1
c001c147:	c3                   	ret    

c001c148 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c148:	b8 01 00 00 00       	mov    eax,0x1
c001c14d:	c3                   	ret    

c001c14e <ISO9660::rename(char const*, char const*)>:
c001c14e:	b8 01 00 00 00       	mov    eax,0x1
c001c153:	c3                   	ret    

c001c154 <ISO9660::mkdir(char const*)>:
c001c154:	b8 01 00 00 00       	mov    eax,0x1
c001c159:	c3                   	ret    

c001c15a <ISO9660::close(void*)>:
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	b8 04 00 00 00       	mov    eax,0x4
c001c162:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c166:	85 d2                	test   edx,edx
c001c168:	74 0e                	je     c001c178 <ISO9660::close(void*)+0x1e>
c001c16a:	83 ec 0c             	sub    esp,0xc
c001c16d:	52                   	push   edx
c001c16e:	e8 a4 db fe ff       	call   c0009d17 <free>
c001c173:	83 c4 10             	add    esp,0x10
c001c176:	31 c0                	xor    eax,eax
c001c178:	83 c4 0c             	add    esp,0xc
c001c17b:	c3                   	ret    

c001c17c <ISO9660::closeDir(void*)>:
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	b8 04 00 00 00       	mov    eax,0x4
c001c184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c188:	85 d2                	test   edx,edx
c001c18a:	74 0e                	je     c001c19a <ISO9660::closeDir(void*)+0x1e>
c001c18c:	83 ec 0c             	sub    esp,0xc
c001c18f:	52                   	push   edx
c001c190:	e8 82 db fe ff       	call   c0009d17 <free>
c001c195:	83 c4 10             	add    esp,0x10
c001c198:	31 c0                	xor    eax,eax
c001c19a:	83 c4 0c             	add    esp,0xc
c001c19d:	c3                   	ret    

c001c19e <ISO9660::~ISO9660()>:
c001c19e:	83 ec 0c             	sub    esp,0xc
c001c1a1:	ba 40 62 02 c0       	mov    edx,0xc0026240
c001c1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1aa:	89 10                	mov    DWORD PTR [eax],edx
c001c1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b0:	83 ec 0c             	sub    esp,0xc
c001c1b3:	50                   	push   eax
c001c1b4:	e8 95 11 ff ff       	call   c000d34e <Filesystem::~Filesystem()>
c001c1b9:	83 c4 10             	add    esp,0x10
c001c1bc:	90                   	nop
c001c1bd:	83 c4 0c             	add    esp,0xc
c001c1c0:	c3                   	ret    
c001c1c1:	90                   	nop

c001c1c2 <ISO9660::~ISO9660()>:
c001c1c2:	83 ec 0c             	sub    esp,0xc
c001c1c5:	83 ec 0c             	sub    esp,0xc
c001c1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1cc:	e8 cd ff ff ff       	call   c001c19e <ISO9660::~ISO9660()>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	83 ec 08             	sub    esp,0x8
c001c1d7:	6a 08                	push   0x8
c001c1d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1dd:	e8 50 0d ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	83 c4 0c             	add    esp,0xc
c001c1e8:	c3                   	ret    

c001c1e9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c1e9:	55                   	push   ebp
c001c1ea:	31 c9                	xor    ecx,ecx
c001c1ec:	57                   	push   edi
c001c1ed:	56                   	push   esi
c001c1ee:	53                   	push   ebx
c001c1ef:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c1f7:	89 eb                	mov    ebx,ebp
c001c1f9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c1fd:	39 ce                	cmp    esi,ecx
c001c1ff:	7e 17                	jle    c001c218 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c201:	31 d2                	xor    edx,edx
c001c203:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c207:	7d 13                	jge    c001c21c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c209:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c20d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c210:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c213:	75 0d                	jne    c001c222 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c215:	42                   	inc    edx
c001c216:	eb eb                	jmp    c001c203 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c218:	31 c0                	xor    eax,eax
c001c21a:	eb 0a                	jmp    c001c226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c21c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c220:	eb 04                	jmp    c001c226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c222:	41                   	inc    ecx
c001c223:	43                   	inc    ebx
c001c224:	eb d7                	jmp    c001c1fd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c226:	5b                   	pop    ebx
c001c227:	5e                   	pop    esi
c001c228:	5f                   	pop    edi
c001c229:	5d                   	pop    ebp
c001c22a:	c3                   	ret    

c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c22b:	57                   	push   edi
c001c22c:	56                   	push   esi
c001c22d:	53                   	push   ebx
c001c22e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c232:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c236:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c23a:	39 35 c0 93 02 c0    	cmp    DWORD PTR ds:0xc00293c0,esi
c001c240:	75 08                	jne    c001c24a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c242:	38 1d d4 76 02 c0    	cmp    BYTE PTR ds:0xc00276d4,bl
c001c248:	74 4a                	je     c001c294 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	31 d2                	xor    edx,edx
c001c24f:	68 e0 93 02 c0       	push   0xc00293e0
c001c254:	0f be c3             	movsx  eax,bl
c001c257:	6a 01                	push   0x1
c001c259:	52                   	push   edx
c001c25a:	56                   	push   esi
c001c25b:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c001c262:	e8 ab 43 ff ff       	call   c0010612 <LogicalDisk::read(unsigned long long, int, void*)>
c001c267:	83 c4 20             	add    esp,0x20
c001c26a:	85 c0                	test   eax,eax
c001c26c:	75 0e                	jne    c001c27c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c26e:	89 35 c0 93 02 c0    	mov    DWORD PTR ds:0xc00293c0,esi
c001c274:	88 1d d4 76 02 c0    	mov    BYTE PTR ds:0xc00276d4,bl
c001c27a:	eb 18                	jmp    c001c294 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c27c:	50                   	push   eax
c001c27d:	68 00 08 00 00       	push   0x800
c001c282:	6a 00                	push   0x0
c001c284:	57                   	push   edi
c001c285:	e8 f2 43 fe ff       	call   c000067c <memset>
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	b8 01 00 00 00       	mov    eax,0x1
c001c292:	eb 0e                	jmp    c001c2a2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c294:	be e0 93 02 c0       	mov    esi,0xc00293e0
c001c299:	b9 00 08 00 00       	mov    ecx,0x800
c001c29e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2a0:	31 c0                	xor    eax,eax
c001c2a2:	5b                   	pop    ebx
c001c2a3:	5e                   	pop    esi
c001c2a4:	5f                   	pop    edi
c001c2a5:	c3                   	ret    

c001c2a6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c2a6:	81 ec 10 08 00 00    	sub    esp,0x810
c001c2ac:	c7 05 c0 93 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00293c0,0xdeadbeef
c001c2b6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c2bd:	83 c0 41             	add    eax,0x41
c001c2c0:	0f be c0             	movsx  eax,al
c001c2c3:	50                   	push   eax
c001c2c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2c8:	50                   	push   eax
c001c2c9:	6a 10                	push   0x10
c001c2cb:	e8 5b ff ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	31 d2                	xor    edx,edx
c001c2d5:	85 c0                	test   eax,eax
c001c2d7:	75 24                	jne    c001c2fd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c2d9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c2de:	75 1d                	jne    c001c2fd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c2e0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c2e5:	75 16                	jne    c001c2fd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c2e7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c2ec:	75 0f                	jne    c001c2fd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c2ee:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c2f3:	75 08                	jne    c001c2fd <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c2f5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c2fa:	0f 94 c2             	sete   dl
c001c2fd:	88 d0                	mov    al,dl
c001c2ff:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c305:	c3                   	ret    

c001c306 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c306:	55                   	push   ebp
c001c307:	57                   	push   edi
c001c308:	56                   	push   esi
c001c309:	53                   	push   ebx
c001c30a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c310:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c317:	85 ed                	test   ebp,ebp
c001c319:	0f 84 da 01 00 00    	je     c001c4f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c31f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c327:	0f 84 cc 01 00 00    	je     c001c4f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c32d:	b8 01 00 00 00       	mov    eax,0x1
c001c332:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c336:	0f 85 c2 01 00 00    	jne    c001c4fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c33c:	31 d2                	xor    edx,edx
c001c33e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c345:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c348:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c34b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c34e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c355:	01 c8                	add    eax,ecx
c001c357:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c35a:	11 da                	adc    edx,ebx
c001c35c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c360:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c364:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c368:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c36c:	19 d7                	sbb    edi,edx
c001c36e:	72 11                	jb     c001c381 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c373:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c37b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c37f:	eb 0c                	jmp    c001c38d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c381:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c385:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c389:	29 ce                	sub    esi,ecx
c001c38b:	19 df                	sbb    edi,ebx
c001c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c390:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c393:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c397:	c1 e0 0b             	shl    eax,0xb
c001c39a:	01 c8                	add    eax,ecx
c001c39c:	11 da                	adc    edx,ebx
c001c39e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3a5:	51                   	push   ecx
c001c3a6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3aa:	50                   	push   eax
c001c3ab:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c3af:	53                   	push   ebx
c001c3b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c3bc:	50                   	push   eax
c001c3bd:	e8 69 fe ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c3c5:	b8 00 08 00 00       	mov    eax,0x800
c001c3ca:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c3d0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c3d4:	29 d0                	sub    eax,edx
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	89 f9                	mov    ecx,edi
c001c3db:	39 c6                	cmp    esi,eax
c001c3dd:	83 d9 00             	sbb    ecx,0x0
c001c3e0:	7d 1b                	jge    c001c3fd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c3e2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c3e7:	75 12                	jne    c001c3fb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c3e9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c3f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3f6:	e9 fa 00 00 00       	jmp    c001c4f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c3fb:	89 f0                	mov    eax,esi
c001c3fd:	01 d3                	add    ebx,edx
c001c3ff:	31 d2                	xor    edx,edx
c001c401:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c405:	39 c2                	cmp    edx,eax
c001c407:	7d 14                	jge    c001c41d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c409:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c410:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c414:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c417:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c41a:	42                   	inc    edx
c001c41b:	eb e8                	jmp    c001c405 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c41d:	89 c2                	mov    edx,eax
c001c41f:	85 c0                	test   eax,eax
c001c421:	79 02                	jns    c001c425 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c423:	31 d2                	xor    edx,edx
c001c425:	01 c2                	add    edx,eax
c001c427:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c42a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c431:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c435:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c439:	99                   	cdq    
c001c43a:	01 c1                	add    ecx,eax
c001c43c:	11 d3                	adc    ebx,edx
c001c43e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c442:	29 c6                	sub    esi,eax
c001c444:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c448:	19 d7                	sbb    edi,edx
c001c44a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c44d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c451:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c456:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c459:	b8 00 00 00 00       	mov    eax,0x0
c001c45e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c462:	7d 43                	jge    c001c4a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c464:	52                   	push   edx
c001c465:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c469:	50                   	push   eax
c001c46a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c46e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c472:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c476:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c47a:	50                   	push   eax
c001c47b:	e8 ab fd ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c480:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c488:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c48d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c495:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c49d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	eb aa                	jmp    c001c451 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ab:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c4ae:	74 2a                	je     c001c4da <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c4b0:	50                   	push   eax
c001c4b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c4b5:	50                   	push   eax
c001c4b6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c4ba:	56                   	push   esi
c001c4bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c4bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c4c3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c4c7:	51                   	push   ecx
c001c4c8:	e8 5e fd ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4cd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c4d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c4e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4e9:	89 18                	mov    DWORD PTR [eax],ebx
c001c4eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4ef:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4f2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4f5:	31 c0                	xor    eax,eax
c001c4f7:	eb 05                	jmp    c001c4fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c4f9:	b8 04 00 00 00       	mov    eax,0x4
c001c4fe:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c504:	5b                   	pop    ebx
c001c505:	5e                   	pop    esi
c001c506:	5f                   	pop    edi
c001c507:	5d                   	pop    ebp
c001c508:	c3                   	ret    
c001c509:	90                   	nop

c001c50a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c50a:	55                   	push   ebp
c001c50b:	57                   	push   edi
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c514:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c51b:	85 ed                	test   ebp,ebp
c001c51d:	0f 84 51 02 00 00    	je     c001c774 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c523:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c52b:	0f 84 43 02 00 00    	je     c001c774 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c531:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c534:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c537:	75 0a                	jne    c001c543 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c539:	b8 07 00 00 00       	mov    eax,0x7
c001c53e:	e9 36 02 00 00       	jmp    c001c779 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c543:	50                   	push   eax
c001c544:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c548:	50                   	push   eax
c001c549:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c550:	53                   	push   ebx
c001c551:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c554:	c1 e0 0b             	shl    eax,0xb
c001c557:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c55a:	c1 e8 0b             	shr    eax,0xb
c001c55d:	50                   	push   eax
c001c55e:	e8 c8 fc ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c563:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	89 c1                	mov    ecx,eax
c001c56b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c56e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c574:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c577:	84 db                	test   bl,bl
c001c579:	0f 85 8b 00 00 00    	jne    c001c60a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c57f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c585:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c588:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c58e:	29 c6                	sub    esi,eax
c001c590:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c594:	89 f3                	mov    ebx,esi
c001c596:	89 f1                	mov    ecx,esi
c001c598:	c1 fb 1f             	sar    ebx,0x1f
c001c59b:	01 f0                	add    eax,esi
c001c59d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c5a0:	11 da                	adc    edx,ebx
c001c5a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c5a9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c5ac:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c5af:	89 d8                	mov    eax,ebx
c001c5b1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c5b5:	ba 00 00 00 00       	mov    edx,0x0
c001c5ba:	19 f8                	sbb    eax,edi
c001c5bc:	b8 00 00 00 00       	mov    eax,0x0
c001c5c1:	73 08                	jae    c001c5cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c5c3:	89 f0                	mov    eax,esi
c001c5c5:	89 fa                	mov    edx,edi
c001c5c7:	29 c8                	sub    eax,ecx
c001c5c9:	19 da                	sbb    edx,ebx
c001c5cb:	89 d7                	mov    edi,edx
c001c5cd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c5d0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c5d3:	09 c7                	or     edi,eax
c001c5d5:	0f 84 5e ff ff ff    	je     c001c539 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c5db:	57                   	push   edi
c001c5dc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5e0:	50                   	push   eax
c001c5e1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c5e8:	53                   	push   ebx
c001c5e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5ec:	c1 e0 0b             	shl    eax,0xb
c001c5ef:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c5f3:	c1 e8 0b             	shr    eax,0xb
c001c5f6:	50                   	push   eax
c001c5f7:	e8 2f fc ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	25 ff 07 00 00       	and    eax,0x7ff
c001c607:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c60a:	31 ff                	xor    edi,edi
c001c60c:	56                   	push   esi
c001c60d:	6a 28                	push   0x28
c001c60f:	6a 00                	push   0x0
c001c611:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c615:	50                   	push   eax
c001c616:	e8 61 40 fe ff       	call   c000067c <memset>
c001c61b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c61e:	25 ff 07 00 00       	and    eax,0x7ff
c001c623:	89 c6                	mov    esi,eax
c001c625:	83 c6 21             	add    esi,0x21
c001c628:	83 d7 00             	adc    edi,0x0
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	31 c9                	xor    ecx,ecx
c001c630:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c637:	83 f9 28             	cmp    ecx,0x28
c001c63a:	88 04 24             	mov    BYTE PTR [esp],al
c001c63d:	0f 94 c2             	sete   dl
c001c640:	88 d0                	mov    al,dl
c001c642:	ba ff 07 00 00       	mov    edx,0x7ff
c001c647:	39 f2                	cmp    edx,esi
c001c649:	ba 00 00 00 00       	mov    edx,0x0
c001c64e:	19 fa                	sbb    edx,edi
c001c650:	0f 92 c2             	setb   dl
c001c653:	09 c2                	or     edx,eax
c001c655:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c659:	0f 94 c0             	sete   al
c001c65c:	08 d0                	or     al,dl
c001c65e:	75 16                	jne    c001c676 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c660:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c664:	74 10                	je     c001c676 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c666:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c669:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c66d:	41                   	inc    ecx
c001c66e:	83 c6 01             	add    esi,0x1
c001c671:	83 d7 00             	adc    edi,0x0
c001c674:	eb ba                	jmp    c001c630 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c676:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c67d:	83 ec 0c             	sub    esp,0xc
c001c680:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c684:	56                   	push   esi
c001c685:	e8 0e 40 fe ff       	call   c0000698 <strlen>
c001c68a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c691:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c695:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c69d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c6a0:	5a                   	pop    edx
c001c6a1:	25 ff 07 00 00       	and    eax,0x7ff
c001c6a6:	59                   	pop    ecx
c001c6a7:	01 f8                	add    eax,edi
c001c6a9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c6af:	83 e0 02             	and    eax,0x2
c001c6b2:	3c 01                	cmp    al,0x1
c001c6b4:	19 c0                	sbb    eax,eax
c001c6b6:	83 c0 02             	add    eax,0x2
c001c6b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c6bd:	56                   	push   esi
c001c6be:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c6c2:	50                   	push   eax
c001c6c3:	e8 70 40 fe ff       	call   c0000738 <strcpy>
c001c6c8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	84 c0                	test   al,al
c001c6d1:	75 21                	jne    c001c6f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c6d3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c6db:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6e3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6eb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c6f2:	eb 28                	jmp    c001c71c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6f4:	fe c8                	dec    al
c001c6f6:	75 24                	jne    c001c71c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6f8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c700:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c708:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c710:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c717:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c71c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c720:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c727:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c72e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c730:	0f b6 f3             	movzx  esi,bl
c001c733:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c73a:	31 db                	xor    ebx,ebx
c001c73c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c742:	89 df                	mov    edi,ebx
c001c744:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c74a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c74d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c750:	39 c6                	cmp    esi,eax
c001c752:	19 d7                	sbb    edi,edx
c001c754:	72 10                	jb     c001c766 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c756:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c75d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c764:	eb 0a                	jmp    c001c770 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c766:	29 f0                	sub    eax,esi
c001c768:	19 da                	sbb    edx,ebx
c001c76a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c76d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c770:	31 c0                	xor    eax,eax
c001c772:	eb 05                	jmp    c001c779 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c774:	b8 04 00 00 00       	mov    eax,0x4
c001c779:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c77f:	5b                   	pop    ebx
c001c780:	5e                   	pop    esi
c001c781:	5f                   	pop    edi
c001c782:	5d                   	pop    ebp
c001c783:	c3                   	ret    

c001c784 <readRoot(unsigned int*, unsigned int*, char)>:
c001c784:	57                   	push   edi
c001c785:	56                   	push   esi
c001c786:	81 ec 38 08 00 00    	sub    esp,0x838
c001c78c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c794:	50                   	push   eax
c001c795:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c799:	50                   	push   eax
c001c79a:	6a 10                	push   0x10
c001c79c:	e8 8a fa ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7a1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c7a8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c7ac:	b9 22 00 00 00       	mov    ecx,0x22
c001c7b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7b3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c7ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7be:	89 10                	mov    DWORD PTR [eax],edx
c001c7c0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c7c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c7cb:	89 10                	mov    DWORD PTR [eax],edx
c001c7cd:	81 c4 44 08 00 00    	add    esp,0x844
c001c7d3:	b0 01                	mov    al,0x1
c001c7d5:	5e                   	pop    esi
c001c7d6:	5f                   	pop    edi
c001c7d7:	c3                   	ret    

c001c7d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c7d8:	55                   	push   ebp
c001c7d9:	57                   	push   edi
c001c7da:	56                   	push   esi
c001c7db:	53                   	push   ebx
c001c7dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7e2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c7e9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c7f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7f4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c7f8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c800:	75 03                	jne    c001c805 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c802:	83 c3 02             	add    ebx,0x2
c001c805:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c808:	75 03                	jne    c001c80d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c80a:	43                   	inc    ebx
c001c80b:	eb f8                	jmp    c001c805 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c80d:	52                   	push   edx
c001c80e:	68 00 01 00 00       	push   0x100
c001c813:	6a 00                	push   0x0
c001c815:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c819:	50                   	push   eax
c001c81a:	e8 5d 3e fe ff       	call   c000067c <memset>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	31 d2                	xor    edx,edx
c001c824:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c827:	84 c0                	test   al,al
c001c829:	74 21                	je     c001c84c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c82b:	3c 2f                	cmp    al,0x2f
c001c82d:	75 0b                	jne    c001c83a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c82f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c833:	bd 01 00 00 00       	mov    ebp,0x1
c001c838:	eb 14                	jmp    c001c84e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c83a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c83d:	80 f9 19             	cmp    cl,0x19
c001c840:	77 03                	ja     c001c845 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c842:	83 e8 20             	sub    eax,0x20
c001c845:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c849:	42                   	inc    edx
c001c84a:	eb d8                	jmp    c001c824 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c84c:	31 ed                	xor    ebp,ebp
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c858:	e8 aa d4 fe ff       	call   c0009d07 <malloc>
c001c85d:	89 c6                	mov    esi,eax
c001c85f:	89 c2                	mov    edx,eax
c001c861:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c868:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c86e:	c1 ef 0b             	shr    edi,0xb
c001c871:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c878:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c888:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c88f:	74 29                	je     c001c8ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c891:	50                   	push   eax
c001c892:	57                   	push   edi
c001c893:	52                   	push   edx
c001c894:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c898:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c89f:	e8 87 f9 ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c8a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8a8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c8af:	81 c2 00 08 00 00    	add    edx,0x800
c001c8b5:	83 c4 10             	add    esp,0x10
c001c8b8:	eb ca                	jmp    c001c884 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c8ba:	83 ec 0c             	sub    esp,0xc
c001c8bd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c8c1:	57                   	push   edi
c001c8c2:	e8 d1 3d fe ff       	call   c0000698 <strlen>
c001c8c7:	50                   	push   eax
c001c8c8:	57                   	push   edi
c001c8c9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c8d0:	56                   	push   esi
c001c8d1:	e8 13 f9 ff ff       	call   c001c1e9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c8d6:	83 c4 20             	add    esp,0x20
c001c8d9:	85 c0                	test   eax,eax
c001c8db:	75 13                	jne    c001c8f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c8dd:	83 ec 0c             	sub    esp,0xc
c001c8e0:	56                   	push   esi
c001c8e1:	e8 31 d4 fe ff       	call   c0009d17 <free>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	31 c0                	xor    eax,eax
c001c8eb:	e9 b3 00 00 00       	jmp    c001c9a3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c8f0:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c8f4:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c8f8:	c1 e7 08             	shl    edi,0x8
c001c8fb:	c1 e2 10             	shl    edx,0x10
c001c8fe:	09 d7                	or     edi,edx
c001c900:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c904:	09 d7                	or     edi,edx
c001c906:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c90a:	c1 e2 18             	shl    edx,0x18
c001c90d:	09 d7                	or     edi,edx
c001c90f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c913:	89 d1                	mov    ecx,edx
c001c915:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c919:	c1 e1 08             	shl    ecx,0x8
c001c91c:	c1 e2 10             	shl    edx,0x10
c001c91f:	09 ca                	or     edx,ecx
c001c921:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c925:	09 ca                	or     edx,ecx
c001c927:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c92b:	c1 e1 18             	shl    ecx,0x18
c001c92e:	09 ca                	or     edx,ecx
c001c930:	89 e9                	mov    ecx,ebp
c001c932:	84 c9                	test   cl,cl
c001c934:	74 3c                	je     c001c972 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001c936:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	56                   	push   esi
c001c93e:	e8 d4 d3 fe ff       	call   c0009d17 <free>
c001c943:	83 c4 0c             	add    esp,0xc
c001c946:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c94d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c952:	50                   	push   eax
c001c953:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c95a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c961:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c965:	52                   	push   edx
c001c966:	57                   	push   edi
c001c967:	53                   	push   ebx
c001c968:	e8 6b fe ff ff       	call   c001c7d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c96d:	83 c4 20             	add    esp,0x20
c001c970:	eb 31                	jmp    c001c9a3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c972:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c975:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c97c:	d0 e8                	shr    al,1
c001c97e:	89 3b                	mov    DWORD PTR [ebx],edi
c001c980:	83 e0 01             	and    eax,0x1
c001c983:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	89 13                	mov    DWORD PTR [ebx],edx
c001c98f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c996:	89 03                	mov    DWORD PTR [ebx],eax
c001c998:	56                   	push   esi
c001c999:	e8 79 d3 fe ff       	call   c0009d17 <free>
c001c99e:	83 c4 10             	add    esp,0x10
c001c9a1:	b0 01                	mov    al,0x1
c001c9a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9a9:	5b                   	pop    ebx
c001c9aa:	5e                   	pop    esi
c001c9ab:	5f                   	pop    edi
c001c9ac:	5d                   	pop    ebp
c001c9ad:	c3                   	ret    

c001c9ae <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c9ae:	55                   	push   ebp
c001c9af:	57                   	push   edi
c001c9b0:	56                   	push   esi
c001c9b1:	53                   	push   ebx
c001c9b2:	83 ec 20             	sub    esp,0x20
c001c9b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c9b9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c9bd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c9c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c9c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c9d1:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c9d6:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c9dc:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c9e2:	57                   	push   edi
c001c9e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9e7:	50                   	push   eax
c001c9e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9ec:	50                   	push   eax
c001c9ed:	e8 92 fd ff ff       	call   c001c784 <readRoot(unsigned int*, unsigned int*, char)>
c001c9f2:	5a                   	pop    edx
c001c9f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9f7:	e8 9c 3c fe ff       	call   c0000698 <strlen>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	83 f8 03             	cmp    eax,0x3
c001ca02:	77 17                	ja     c001ca1b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ca04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca08:	89 03                	mov    DWORD PTR [ebx],eax
c001ca0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca0e:	89 06                	mov    DWORD PTR [esi],eax
c001ca10:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ca17:	b0 01                	mov    al,0x1
c001ca19:	eb 19                	jmp    c001ca34 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ca1b:	50                   	push   eax
c001ca1c:	55                   	push   ebp
c001ca1d:	57                   	push   edi
c001ca1e:	56                   	push   esi
c001ca1f:	53                   	push   ebx
c001ca20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca2c:	e8 a7 fd ff ff       	call   c001c7d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca31:	83 c4 20             	add    esp,0x20
c001ca34:	83 c4 1c             	add    esp,0x1c
c001ca37:	5b                   	pop    ebx
c001ca38:	5e                   	pop    esi
c001ca39:	5f                   	pop    edi
c001ca3a:	5d                   	pop    ebp
c001ca3b:	c3                   	ret    

c001ca3c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca3c:	57                   	push   edi
c001ca3d:	56                   	push   esi
c001ca3e:	53                   	push   ebx
c001ca3f:	83 ec 10             	sub    esp,0x10
c001ca42:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca46:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca4a:	85 ff                	test   edi,edi
c001ca4c:	0f 84 8b 00 00 00    	je     c001cadd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca52:	85 f6                	test   esi,esi
c001ca54:	0f 84 83 00 00 00    	je     c001cadd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca5a:	b8 03 00 00 00       	mov    eax,0x3
c001ca5f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ca64:	75 7c                	jne    c001cae2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	6a 1c                	push   0x1c
c001ca6b:	e8 97 d2 fe ff       	call   c0009d07 <malloc>
c001ca70:	89 07                	mov    DWORD PTR [edi],eax
c001ca72:	89 c3                	mov    ebx,eax
c001ca74:	58                   	pop    eax
c001ca75:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca79:	50                   	push   eax
c001ca7a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ca7d:	50                   	push   eax
c001ca7e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca82:	50                   	push   eax
c001ca83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca87:	50                   	push   eax
c001ca88:	56                   	push   esi
c001ca89:	e8 20 ff ff ff       	call   c001c9ae <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca8e:	83 c4 20             	add    esp,0x20
c001ca91:	84 c0                	test   al,al
c001ca93:	74 07                	je     c001ca9c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ca95:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca9a:	74 0b                	je     c001caa7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001ca9c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001caa0:	b8 01 00 00 00       	mov    eax,0x1
c001caa5:	eb 3b                	jmp    c001cae2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001caa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caab:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001caaf:	89 03                	mov    DWORD PTR [ebx],eax
c001cab1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cabc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cac3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001caca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cacd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cad4:	8a 06                	mov    al,BYTE PTR [esi]
c001cad6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cad9:	31 c0                	xor    eax,eax
c001cadb:	eb 05                	jmp    c001cae2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cadd:	b8 04 00 00 00       	mov    eax,0x4
c001cae2:	83 c4 10             	add    esp,0x10
c001cae5:	5b                   	pop    ebx
c001cae6:	5e                   	pop    esi
c001cae7:	5f                   	pop    edi
c001cae8:	c3                   	ret    
c001cae9:	90                   	nop

c001caea <ISO9660::exists(char const*)>:
c001caea:	83 ec 28             	sub    esp,0x28
c001caed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001caf1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001caf5:	52                   	push   edx
c001caf6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001caf9:	52                   	push   edx
c001cafa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cafe:	52                   	push   edx
c001caff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cb03:	52                   	push   edx
c001cb04:	50                   	push   eax
c001cb05:	e8 a4 fe ff ff       	call   c001c9ae <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb0a:	83 c4 3c             	add    esp,0x3c
c001cb0d:	c3                   	ret    

c001cb0e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cb0e:	56                   	push   esi
c001cb0f:	53                   	push   ebx
c001cb10:	83 ec 14             	sub    esp,0x14
c001cb13:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cb17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cb1b:	85 db                	test   ebx,ebx
c001cb1d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb21:	0f 94 c2             	sete   dl
c001cb24:	85 f6                	test   esi,esi
c001cb26:	0f 94 c0             	sete   al
c001cb29:	08 c2                	or     dl,al
c001cb2b:	75 68                	jne    c001cb95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb2d:	85 c9                	test   ecx,ecx
c001cb2f:	74 64                	je     c001cb95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb31:	83 ec 0c             	sub    esp,0xc
c001cb34:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cb37:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb3b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb48:	50                   	push   eax
c001cb49:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cb4c:	50                   	push   eax
c001cb4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb51:	50                   	push   eax
c001cb52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb56:	50                   	push   eax
c001cb57:	51                   	push   ecx
c001cb58:	e8 51 fe ff ff       	call   c001c9ae <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb5d:	83 c4 20             	add    esp,0x20
c001cb60:	ba 01 00 00 00       	mov    edx,0x1
c001cb65:	84 c0                	test   al,al
c001cb67:	74 31                	je     c001cb9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb6d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb74:	89 03                	mov    DWORD PTR [ebx],eax
c001cb76:	ba 00 00 00 00       	mov    edx,0x0
c001cb7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb7f:	85 c0                	test   eax,eax
c001cb81:	0f 95 06             	setne  BYTE PTR [esi]
c001cb84:	74 14                	je     c001cb9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb86:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb93:	eb 05                	jmp    c001cb9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb95:	ba 04 00 00 00       	mov    edx,0x4
c001cb9a:	83 c4 14             	add    esp,0x14
c001cb9d:	89 d0                	mov    eax,edx
c001cb9f:	5b                   	pop    ebx
c001cba0:	5e                   	pop    esi
c001cba1:	c3                   	ret    

c001cba2 <ISO9660::openDir(char const*, void**)>:
c001cba2:	57                   	push   edi
c001cba3:	56                   	push   esi
c001cba4:	53                   	push   ebx
c001cba5:	83 ec 10             	sub    esp,0x10
c001cba8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbb0:	85 ff                	test   edi,edi
c001cbb2:	74 7b                	je     c001cc2f <ISO9660::openDir(char const*, void**)+0x8d>
c001cbb4:	85 f6                	test   esi,esi
c001cbb6:	74 77                	je     c001cc2f <ISO9660::openDir(char const*, void**)+0x8d>
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	6a 1c                	push   0x1c
c001cbbd:	e8 45 d1 fe ff       	call   c0009d07 <malloc>
c001cbc2:	89 07                	mov    DWORD PTR [edi],eax
c001cbc4:	89 c3                	mov    ebx,eax
c001cbc6:	58                   	pop    eax
c001cbc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbcb:	50                   	push   eax
c001cbcc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cbcf:	50                   	push   eax
c001cbd0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbd4:	50                   	push   eax
c001cbd5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbd9:	50                   	push   eax
c001cbda:	56                   	push   esi
c001cbdb:	e8 ce fd ff ff       	call   c001c9ae <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cbe0:	83 c4 20             	add    esp,0x20
c001cbe3:	84 c0                	test   al,al
c001cbe5:	74 07                	je     c001cbee <ISO9660::openDir(char const*, void**)+0x4c>
c001cbe7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cbec:	75 0b                	jne    c001cbf9 <ISO9660::openDir(char const*, void**)+0x57>
c001cbee:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cbf2:	b8 01 00 00 00       	mov    eax,0x1
c001cbf7:	eb 3b                	jmp    c001cc34 <ISO9660::openDir(char const*, void**)+0x92>
c001cbf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbfd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cc01:	89 03                	mov    DWORD PTR [ebx],eax
c001cc03:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cc0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cc15:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc1c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cc1f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cc26:	8a 06                	mov    al,BYTE PTR [esi]
c001cc28:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cc2b:	31 c0                	xor    eax,eax
c001cc2d:	eb 05                	jmp    c001cc34 <ISO9660::openDir(char const*, void**)+0x92>
c001cc2f:	b8 04 00 00 00       	mov    eax,0x4
c001cc34:	83 c4 10             	add    esp,0x10
c001cc37:	5b                   	pop    ebx
c001cc38:	5e                   	pop    esi
c001cc39:	5f                   	pop    edi
c001cc3a:	c3                   	ret    
c001cc3b:	90                   	nop

c001cc3c <ISO9660::ISO9660()>:
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc43:	83 ec 0c             	sub    esp,0xc
c001cc46:	50                   	push   eax
c001cc47:	e8 de 06 ff ff       	call   c000d32a <Filesystem::Filesystem()>
c001cc4c:	83 c4 10             	add    esp,0x10
c001cc4f:	ba 40 62 02 c0       	mov    edx,0xc0026240
c001cc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc58:	89 10                	mov    DWORD PTR [eax],edx
c001cc5a:	90                   	nop
c001cc5b:	83 c4 0c             	add    esp,0xc
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <SoundCard::beginPlayback()>:
c001cc60:	c7 44 24 04 a0 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc00262a0
c001cc68:	e9 04 81 ff ff       	jmp    c0014d71 <Krnl::panic(char const*)>
c001cc6d:	90                   	nop

c001cc6e <SoundCard::stopPlayback()>:
c001cc6e:	c7 44 24 04 d4 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc00262d4
c001cc76:	e9 f6 80 ff ff       	jmp    c0014d71 <Krnl::panic(char const*)>
c001cc7b:	90                   	nop

c001cc7c <SoundCard::SoundCard(char const*)>:
c001cc7c:	83 ec 1c             	sub    esp,0x1c
c001cc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc83:	83 ec 08             	sub    esp,0x8
c001cc86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc8a:	50                   	push   eax
c001cc8b:	e8 3a 1a ff ff       	call   c000e6ca <Device::Device(char const*)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	ba 6c 63 02 c0       	mov    edx,0xc002636c
c001cc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc9c:	89 10                	mov    DWORD PTR [eax],edx
c001cc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cca2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccad:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ccb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccbb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ccc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccc9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ccd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccd7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cce1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cce9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ccee:	7f 19                	jg     c001cd09 <SoundCard::SoundCard(char const*)+0x8d>
c001ccf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccf8:	83 c2 54             	add    edx,0x54
c001ccfb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cd03:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cd07:	eb e0                	jmp    c001cce9 <SoundCard::SoundCard(char const*)+0x6d>
c001cd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd0d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd14:	90                   	nop
c001cd15:	83 c4 1c             	add    esp,0x1c
c001cd18:	c3                   	ret    
c001cd19:	90                   	nop

c001cd1a <SoundCard::~SoundCard()>:
c001cd1a:	83 ec 0c             	sub    esp,0xc
c001cd1d:	ba 6c 63 02 c0       	mov    edx,0xc002636c
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	89 10                	mov    DWORD PTR [eax],edx
c001cd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	50                   	push   eax
c001cd30:	e8 5f 16 ff ff       	call   c000e394 <Device::~Device()>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	90                   	nop
c001cd39:	83 c4 0c             	add    esp,0xc
c001cd3c:	c3                   	ret    
c001cd3d:	90                   	nop

c001cd3e <SoundCard::~SoundCard()>:
c001cd3e:	83 ec 0c             	sub    esp,0xc
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd48:	e8 cd ff ff ff       	call   c001cd1a <SoundCard::~SoundCard()>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	83 ec 08             	sub    esp,0x8
c001cd53:	68 e8 01 00 00       	push   0x1e8
c001cd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5c:	e8 d1 01 ff ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	83 c4 0c             	add    esp,0xc
c001cd67:	c3                   	ret    

c001cd68 <SoundCard::configureRates(int, int, int)>:
c001cd68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd6c:	31 c0                	xor    eax,eax
c001cd6e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cd75:	75 20                	jne    c001cd97 <SoundCard::configureRates(int, int, int)+0x2f>
c001cd77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd7b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cd81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd85:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cd95:	b0 01                	mov    al,0x1
c001cd97:	c3                   	ret    

c001cd98 <SoundCard::getSamples16(int, short*)>:
c001cd98:	55                   	push   ebp
c001cd99:	57                   	push   edi
c001cd9a:	31 ff                	xor    edi,edi
c001cd9c:	56                   	push   esi
c001cd9d:	53                   	push   ebx
c001cd9e:	31 db                	xor    ebx,ebx
c001cda0:	83 ec 18             	sub    esp,0x18
c001cda3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cda7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cdab:	68 07 63 02 c0       	push   0xc0026307
c001cdb0:	e8 5e 02 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	8d 04 36             	lea    eax,[esi+esi*1]
c001cdbb:	50                   	push   eax
c001cdbc:	6a 00                	push   0x0
c001cdbe:	55                   	push   ebp
c001cdbf:	e8 b8 38 fe ff       	call   c000067c <memset>
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdcb:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cdd2:	85 c0                	test   eax,eax
c001cdd4:	74 1b                	je     c001cdf1 <SoundCard::getSamples16(int, short*)+0x59>
c001cdd6:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cdda:	75 15                	jne    c001cdf1 <SoundCard::getSamples16(int, short*)+0x59>
c001cddc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cde0:	55                   	push   ebp
c001cde1:	56                   	push   esi
c001cde2:	50                   	push   eax
c001cde3:	e8 58 03 00 00       	call   c001d140 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cde8:	83 c4 10             	add    esp,0x10
c001cdeb:	39 c7                	cmp    edi,eax
c001cded:	7d 02                	jge    c001cdf1 <SoundCard::getSamples16(int, short*)+0x59>
c001cdef:	89 c7                	mov    edi,eax
c001cdf1:	43                   	inc    ebx
c001cdf2:	83 fb 20             	cmp    ebx,0x20
c001cdf5:	75 d0                	jne    c001cdc7 <SoundCard::getSamples16(int, short*)+0x2f>
c001cdf7:	83 c4 0c             	add    esp,0xc
c001cdfa:	89 f8                	mov    eax,edi
c001cdfc:	5b                   	pop    ebx
c001cdfd:	5e                   	pop    esi
c001cdfe:	5f                   	pop    edi
c001cdff:	5d                   	pop    ebp
c001ce00:	c3                   	ret    
c001ce01:	90                   	nop

c001ce02 <SoundCard::getSamples32(int, int*)>:
c001ce02:	55                   	push   ebp
c001ce03:	57                   	push   edi
c001ce04:	31 ff                	xor    edi,edi
c001ce06:	56                   	push   esi
c001ce07:	31 f6                	xor    esi,esi
c001ce09:	53                   	push   ebx
c001ce0a:	83 ec 10             	sub    esp,0x10
c001ce0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce11:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce15:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce19:	c1 e0 02             	shl    eax,0x2
c001ce1c:	50                   	push   eax
c001ce1d:	6a 00                	push   0x0
c001ce1f:	55                   	push   ebp
c001ce20:	e8 57 38 fe ff       	call   c000067c <memset>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ce2f:	85 c0                	test   eax,eax
c001ce31:	74 1b                	je     c001ce4e <SoundCard::getSamples32(int, int*)+0x4c>
c001ce33:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce37:	75 15                	jne    c001ce4e <SoundCard::getSamples32(int, int*)+0x4c>
c001ce39:	53                   	push   ebx
c001ce3a:	55                   	push   ebp
c001ce3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce3f:	50                   	push   eax
c001ce40:	e8 f7 03 00 00       	call   c001d23c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	39 c6                	cmp    esi,eax
c001ce4a:	7d 02                	jge    c001ce4e <SoundCard::getSamples32(int, int*)+0x4c>
c001ce4c:	89 c6                	mov    esi,eax
c001ce4e:	47                   	inc    edi
c001ce4f:	83 ff 20             	cmp    edi,0x20
c001ce52:	75 d4                	jne    c001ce28 <SoundCard::getSamples32(int, int*)+0x26>
c001ce54:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001ce5a:	85 f6                	test   esi,esi
c001ce5c:	75 0f                	jne    c001ce6d <SoundCard::getSamples32(int, int*)+0x6b>
c001ce5e:	84 c0                	test   al,al
c001ce60:	74 1b                	je     c001ce7d <SoundCard::getSamples32(int, int*)+0x7b>
c001ce62:	83 ec 0c             	sub    esp,0xc
c001ce65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce67:	53                   	push   ebx
c001ce68:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ce6b:	eb 0d                	jmp    c001ce7a <SoundCard::getSamples32(int, int*)+0x78>
c001ce6d:	84 c0                	test   al,al
c001ce6f:	75 0c                	jne    c001ce7d <SoundCard::getSamples32(int, int*)+0x7b>
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce76:	53                   	push   ebx
c001ce77:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ce7a:	83 c4 10             	add    esp,0x10
c001ce7d:	83 c4 0c             	add    esp,0xc
c001ce80:	89 f0                	mov    eax,esi
c001ce82:	5b                   	pop    ebx
c001ce83:	5e                   	pop    esi
c001ce84:	5f                   	pop    edi
c001ce85:	5d                   	pop    ebp
c001ce86:	c3                   	ret    
c001ce87:	90                   	nop

c001ce88 <SoundCard::addChannel(SoundPort*)>:
c001ce88:	56                   	push   esi
c001ce89:	53                   	push   ebx
c001ce8a:	53                   	push   ebx
c001ce8b:	31 db                	xor    ebx,ebx
c001ce8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce91:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001ce99:	74 27                	je     c001cec2 <SoundCard::addChannel(SoundPort*)+0x3a>
c001ce9b:	43                   	inc    ebx
c001ce9c:	83 fb 20             	cmp    ebx,0x20
c001ce9f:	75 f0                	jne    c001ce91 <SoundCard::addChannel(SoundPort*)+0x9>
c001cea1:	83 ec 0c             	sub    esp,0xc
c001cea4:	83 cb ff             	or     ebx,0xffffffff
c001cea7:	68 2d 63 02 c0       	push   0xc002632d
c001ceac:	e8 62 01 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ceb1:	c7 04 24 26 63 02 c0 	mov    DWORD PTR [esp],0xc0026326
c001ceb8:	e8 b4 7e ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001cebd:	83 c4 10             	add    esp,0x10
c001cec0:	eb 1b                	jmp    c001cedd <SoundCard::addChannel(SoundPort*)+0x55>
c001cec2:	51                   	push   ecx
c001cec3:	51                   	push   ecx
c001cec4:	53                   	push   ebx
c001cec5:	68 45 63 02 c0       	push   0xc0026345
c001ceca:	e8 44 01 ff ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001cecf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ced3:	83 c4 10             	add    esp,0x10
c001ced6:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cedd:	89 d8                	mov    eax,ebx
c001cedf:	5a                   	pop    edx
c001cee0:	5b                   	pop    ebx
c001cee1:	5e                   	pop    esi
c001cee2:	c3                   	ret    
c001cee3:	90                   	nop

c001cee4 <SoundCard::removeChannel(int)>:
c001cee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ceec:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cef7:	c3                   	ret    

c001cef8 <SoundPort::SoundPort(int, int, int, int)>:
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceff:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cf0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf16:	89 10                	mov    DWORD PTR [eax],edx
c001cf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf2b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf2e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cf33:	75 13                	jne    c001cf48 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cf35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf39:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf3b:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf40:	01 c0                	add    eax,eax
c001cf42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf46:	66 90                	xchg   ax,ax
c001cf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf57:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cf5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf65:	c1 e0 02             	shl    eax,0x2
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	50                   	push   eax
c001cf6c:	e8 96 cd fe ff       	call   c0009d07 <malloc>
c001cf71:	83 c4 10             	add    esp,0x10
c001cf74:	89 c2                	mov    edx,eax
c001cf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf7d:	90                   	nop
c001cf7e:	83 c4 0c             	add    esp,0xc
c001cf81:	c3                   	ret    
c001cf82:	66 90                	xchg   ax,ax

c001cf84 <SoundPort::~SoundPort()>:
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf8e:	85 c0                	test   eax,eax
c001cf90:	74 1e                	je     c001cfb0 <SoundPort::~SoundPort()+0x2c>
c001cf92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf99:	83 ec 0c             	sub    esp,0xc
c001cf9c:	50                   	push   eax
c001cf9d:	e8 75 cd fe ff       	call   c0009d17 <free>
c001cfa2:	83 c4 10             	add    esp,0x10
c001cfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cfb0:	90                   	nop
c001cfb1:	83 c4 0c             	add    esp,0xc
c001cfb4:	c3                   	ret    
c001cfb5:	90                   	nop
c001cfb6:	66 90                	xchg   ax,ax

c001cfb8 <SoundPort::unpause()>:
c001cfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfbc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cfc0:	c3                   	ret    
c001cfc1:	90                   	nop
c001cfc2:	66 90                	xchg   ax,ax

c001cfc4 <SoundPort::pause()>:
c001cfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfc8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cfcc:	c3                   	ret    
c001cfcd:	90                   	nop
c001cfce:	66 90                	xchg   ax,ax

c001cfd0 <SoundPort::getBufferUsed()>:
c001cfd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfd4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cfd7:	c3                   	ret    

c001cfd8 <SoundPort::getBufferSize()>:
c001cfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cfdf:	c3                   	ret    

c001cfe0 <SoundPort::buffer16(short*, int)>:
c001cfe0:	55                   	push   ebp
c001cfe1:	57                   	push   edi
c001cfe2:	56                   	push   esi
c001cfe3:	53                   	push   ebx
c001cfe4:	83 ec 1c             	sub    esp,0x1c
c001cfe7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfeb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cfef:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cff2:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cff5:	0f 84 85 00 00 00    	je     c001d080 <SoundPort::buffer16(short*, int)+0xa0>
c001cffb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cfff:	85 c9                	test   ecx,ecx
c001d001:	7e 7d                	jle    c001d080 <SoundPort::buffer16(short*, int)+0xa0>
c001d003:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d007:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d00a:	c1 e1 0f             	shl    ecx,0xf
c001d00d:	8d 70 01             	lea    esi,[eax+0x1]
c001d010:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d013:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d016:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d019:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d01c:	74 6e                	je     c001d08c <SoundPort::buffer16(short*, int)+0xac>
c001d01e:	31 f6                	xor    esi,esi
c001d020:	eb 22                	jmp    c001d044 <SoundPort::buffer16(short*, int)+0x64>
c001d022:	66 90                	xchg   ax,ax
c001d024:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d029:	8d 79 01             	lea    edi,[ecx+0x1]
c001d02c:	c1 e3 0f             	shl    ebx,0xf
c001d02f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d032:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d035:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d038:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d03b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d03e:	74 1c                	je     c001d05c <SoundPort::buffer16(short*, int)+0x7c>
c001d040:	89 c6                	mov    esi,eax
c001d042:	66 90                	xchg   ax,ax
c001d044:	8d 46 01             	lea    eax,[esi+0x1]
c001d047:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d04b:	75 d7                	jne    c001d024 <SoundPort::buffer16(short*, int)+0x44>
c001d04d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d051:	83 c4 1c             	add    esp,0x1c
c001d054:	5b                   	pop    ebx
c001d055:	5e                   	pop    esi
c001d056:	5f                   	pop    edi
c001d057:	5d                   	pop    ebp
c001d058:	c3                   	ret    
c001d059:	8d 76 00             	lea    esi,[esi+0x0]
c001d05c:	8d 46 02             	lea    eax,[esi+0x2]
c001d05f:	90                   	nop
c001d060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d064:	83 ec 0c             	sub    esp,0xc
c001d067:	68 98 63 02 c0       	push   0xc0026398
c001d06c:	e8 a2 ff fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d078:	83 c4 1c             	add    esp,0x1c
c001d07b:	5b                   	pop    ebx
c001d07c:	5e                   	pop    esi
c001d07d:	5f                   	pop    edi
c001d07e:	5d                   	pop    ebp
c001d07f:	c3                   	ret    
c001d080:	83 c4 1c             	add    esp,0x1c
c001d083:	31 c0                	xor    eax,eax
c001d085:	5b                   	pop    ebx
c001d086:	5e                   	pop    esi
c001d087:	5f                   	pop    edi
c001d088:	5d                   	pop    ebp
c001d089:	c3                   	ret    
c001d08a:	66 90                	xchg   ax,ax
c001d08c:	b8 01 00 00 00       	mov    eax,0x1
c001d091:	eb cd                	jmp    c001d060 <SoundPort::buffer16(short*, int)+0x80>
c001d093:	90                   	nop

c001d094 <SoundPort::buffer32(int*, int)>:
c001d094:	55                   	push   ebp
c001d095:	57                   	push   edi
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	83 ec 1c             	sub    esp,0x1c
c001d09b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d09f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d0a3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d0aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0ae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0b1:	74 79                	je     c001d12c <SoundPort::buffer32(int*, int)+0x98>
c001d0b3:	85 c0                	test   eax,eax
c001d0b5:	7e 75                	jle    c001d12c <SoundPort::buffer32(int*, int)+0x98>
c001d0b7:	8d 71 01             	lea    esi,[ecx+0x1]
c001d0ba:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d0bd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d0c0:	8b 37                	mov    esi,DWORD PTR [edi]
c001d0c2:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d0c5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0c8:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0cb:	74 6b                	je     c001d138 <SoundPort::buffer32(int*, int)+0xa4>
c001d0cd:	31 f6                	xor    esi,esi
c001d0cf:	eb 1f                	jmp    c001d0f0 <SoundPort::buffer32(int*, int)+0x5c>
c001d0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d0d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d0d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d0da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d0dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d0e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d0e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0ea:	74 1c                	je     c001d108 <SoundPort::buffer32(int*, int)+0x74>
c001d0ec:	89 de                	mov    esi,ebx
c001d0ee:	66 90                	xchg   ax,ax
c001d0f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d0f3:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d0f7:	75 db                	jne    c001d0d4 <SoundPort::buffer32(int*, int)+0x40>
c001d0f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0fd:	83 c4 1c             	add    esp,0x1c
c001d100:	5b                   	pop    ebx
c001d101:	5e                   	pop    esi
c001d102:	5f                   	pop    edi
c001d103:	5d                   	pop    ebp
c001d104:	c3                   	ret    
c001d105:	8d 76 00             	lea    esi,[esi+0x0]
c001d108:	8d 46 02             	lea    eax,[esi+0x2]
c001d10b:	90                   	nop
c001d10c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d110:	83 ec 0c             	sub    esp,0xc
c001d113:	68 b3 63 02 c0       	push   0xc00263b3
c001d118:	e8 f6 fe fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001d11d:	83 c4 10             	add    esp,0x10
c001d120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d124:	83 c4 1c             	add    esp,0x1c
c001d127:	5b                   	pop    ebx
c001d128:	5e                   	pop    esi
c001d129:	5f                   	pop    edi
c001d12a:	5d                   	pop    ebp
c001d12b:	c3                   	ret    
c001d12c:	83 c4 1c             	add    esp,0x1c
c001d12f:	31 c0                	xor    eax,eax
c001d131:	5b                   	pop    ebx
c001d132:	5e                   	pop    esi
c001d133:	5f                   	pop    edi
c001d134:	5d                   	pop    ebp
c001d135:	c3                   	ret    
c001d136:	66 90                	xchg   ax,ax
c001d138:	b8 01 00 00 00       	mov    eax,0x1
c001d13d:	eb cd                	jmp    c001d10c <SoundPort::buffer32(int*, int)+0x78>
c001d13f:	90                   	nop

c001d140 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d140:	57                   	push   edi
c001d141:	56                   	push   esi
c001d142:	53                   	push   ebx
c001d143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d147:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d14b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d151:	39 03                	cmp    DWORD PTR [ebx],eax
c001d153:	74 13                	je     c001d168 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d155:	83 ec 0c             	sub    esp,0xc
c001d158:	68 08 64 02 c0       	push   0xc0026408
c001d15d:	e8 0f 7c ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d162:	83 c4 10             	add    esp,0x10
c001d165:	8d 76 00             	lea    esi,[esi+0x0]
c001d168:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d16e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d171:	74 11                	je     c001d184 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d173:	83 ec 0c             	sub    esp,0xc
c001d176:	68 ce 63 02 c0       	push   0xc00263ce
c001d17b:	e8 f1 7b ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d180:	83 c4 10             	add    esp,0x10
c001d183:	90                   	nop
c001d184:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d18a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d18d:	74 11                	je     c001d1a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d18f:	83 ec 0c             	sub    esp,0xc
c001d192:	68 ce 63 02 c0       	push   0xc00263ce
c001d197:	e8 d5 7b ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d19c:	83 c4 10             	add    esp,0x10
c001d19f:	90                   	nop
c001d1a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1a3:	89 c6                	mov    esi,eax
c001d1a5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d1a9:	7e 05                	jle    c001d1b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d1ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d1af:	90                   	nop
c001d1b0:	85 f6                	test   esi,esi
c001d1b2:	7e 30                	jle    c001d1e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d1b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1b8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d1bb:	31 c9                	xor    ecx,ecx
c001d1bd:	01 d7                	add    edi,edx
c001d1bf:	90                   	nop
c001d1c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d1c3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d1c6:	85 c0                	test   eax,eax
c001d1c8:	79 06                	jns    c001d1d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d1ca:	05 ff 7f 00 00       	add    eax,0x7fff
c001d1cf:	90                   	nop
c001d1d0:	c1 f8 0f             	sar    eax,0xf
c001d1d3:	83 c1 04             	add    ecx,0x4
c001d1d6:	66 01 02             	add    WORD PTR [edx],ax
c001d1d9:	83 c2 02             	add    edx,0x2
c001d1dc:	39 d7                	cmp    edi,edx
c001d1de:	75 e0                	jne    c001d1c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d1e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1e3:	90                   	nop
c001d1e4:	56                   	push   esi
c001d1e5:	89 c2                	mov    edx,eax
c001d1e7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d1ee:	29 f2                	sub    edx,esi
c001d1f0:	52                   	push   edx
c001d1f1:	50                   	push   eax
c001d1f2:	68 28 64 02 c0       	push   0xc0026428
c001d1f7:	e8 17 fe fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001d1fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d1ff:	50                   	push   eax
c001d200:	01 f8                	add    eax,edi
c001d202:	50                   	push   eax
c001d203:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d206:	29 f0                	sub    eax,esi
c001d208:	c1 e0 02             	shl    eax,0x2
c001d20b:	50                   	push   eax
c001d20c:	68 58 64 02 c0       	push   0xc0026458
c001d211:	e8 fd fd fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001d216:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d219:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d21c:	83 c4 1c             	add    esp,0x1c
c001d21f:	01 d7                	add    edi,edx
c001d221:	29 f0                	sub    eax,esi
c001d223:	c1 e0 02             	shl    eax,0x2
c001d226:	50                   	push   eax
c001d227:	57                   	push   edi
c001d228:	52                   	push   edx
c001d229:	e8 86 33 fe ff       	call   c00005b4 <memmove>
c001d22e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	89 f0                	mov    eax,esi
c001d236:	5b                   	pop    ebx
c001d237:	5e                   	pop    esi
c001d238:	5f                   	pop    edi
c001d239:	c3                   	ret    
c001d23a:	66 90                	xchg   ax,ax

c001d23c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d23c:	57                   	push   edi
c001d23d:	56                   	push   esi
c001d23e:	53                   	push   ebx
c001d23f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d243:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d24b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d251:	39 06                	cmp    DWORD PTR [esi],eax
c001d253:	74 13                	je     c001d268 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d255:	83 ec 0c             	sub    esp,0xc
c001d258:	68 7c 64 02 c0       	push   0xc002647c
c001d25d:	e8 0f 7b ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d262:	83 c4 10             	add    esp,0x10
c001d265:	8d 76 00             	lea    esi,[esi+0x0]
c001d268:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d26e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d271:	74 11                	je     c001d284 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d273:	83 ec 0c             	sub    esp,0xc
c001d276:	68 ea 63 02 c0       	push   0xc00263ea
c001d27b:	e8 f1 7a ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	90                   	nop
c001d284:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d28a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d28d:	74 11                	je     c001d2a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d28f:	83 ec 0c             	sub    esp,0xc
c001d292:	68 ea 63 02 c0       	push   0xc00263ea
c001d297:	e8 d5 7a ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	90                   	nop
c001d2a0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d2a3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d2a7:	7e 07                	jle    c001d2b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d2a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b0:	85 ff                	test   edi,edi
c001d2b2:	7e 1c                	jle    c001d2d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d2b4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d2bb:	31 c0                	xor    eax,eax
c001d2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001d2c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d2c3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d2c6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d2c9:	83 c0 04             	add    eax,0x4
c001d2cc:	39 c1                	cmp    ecx,eax
c001d2ce:	75 f0                	jne    c001d2c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d2d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d2d3:	50                   	push   eax
c001d2d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2d7:	29 f8                	sub    eax,edi
c001d2d9:	c1 e0 02             	shl    eax,0x2
c001d2dc:	50                   	push   eax
c001d2dd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d2e0:	50                   	push   eax
c001d2e1:	52                   	push   edx
c001d2e2:	e8 cd 32 fe ff       	call   c00005b4 <memmove>
c001d2e7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	89 f8                	mov    eax,edi
c001d2ef:	5b                   	pop    ebx
c001d2f0:	5e                   	pop    esi
c001d2f1:	5f                   	pop    edi
c001d2f2:	c3                   	ret    
c001d2f3:	90                   	nop

c001d2f4 <PCI::open(int, int, void*)>:
c001d2f4:	83 ec 18             	sub    esp,0x18
c001d2f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d305:	8b 10                	mov    edx,DWORD PTR [eax]
c001d307:	50                   	push   eax
c001d308:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d30b:	31 c0                	xor    eax,eax
c001d30d:	83 c4 1c             	add    esp,0x1c
c001d310:	c3                   	ret    
c001d311:	90                   	nop

c001d312 <PCI::close(int, int, void*)>:
c001d312:	31 c0                	xor    eax,eax
c001d314:	c3                   	ret    
c001d315:	90                   	nop

c001d316 <PCI::PCI()>:
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31d:	83 ec 08             	sub    esp,0x8
c001d320:	68 9b 64 02 c0       	push   0xc002649b
c001d325:	50                   	push   eax
c001d326:	e8 c1 0a ff ff       	call   c000ddec <Bus::Bus(char const*)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	ba 70 66 02 c0       	mov    edx,0xc0026670
c001d333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d337:	89 10                	mov    DWORD PTR [eax],edx
c001d339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34b:	a3 e0 9b 02 c0       	mov    ds:0xc0029be0,eax
c001d350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d354:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d35a:	0f b6 d0             	movzx  edx,al
c001d35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d361:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d372:	0f b6 d0             	movzx  edx,al
c001d375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d379:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d382:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d388:	8d 50 01             	lea    edx,[eax+0x1]
c001d38b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d38f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d395:	0f b6 d0             	movzx  edx,al
c001d398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d3a0:	83 c9 c0             	or     ecx,0xffffffc0
c001d3a3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d3a7:	90                   	nop
c001d3a8:	83 c4 0c             	add    esp,0xc
c001d3ab:	c3                   	ret    

c001d3ac <PCI::readBAR8(unsigned int, int)>:
c001d3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3b4:	f6 c2 01             	test   dl,0x1
c001d3b7:	74 07                	je     c001d3c0 <PCI::readBAR8(unsigned int, int)+0x14>
c001d3b9:	83 e2 fc             	and    edx,0xfffffffc
c001d3bc:	01 c2                	add    edx,eax
c001d3be:	ec                   	in     al,dx
c001d3bf:	c3                   	ret    
c001d3c0:	83 e2 f0             	and    edx,0xfffffff0
c001d3c3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d3c6:	c3                   	ret    
c001d3c7:	90                   	nop

c001d3c8 <PCI::readBAR16(unsigned int, int)>:
c001d3c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3d0:	f6 c2 01             	test   dl,0x1
c001d3d3:	74 08                	je     c001d3dd <PCI::readBAR16(unsigned int, int)+0x15>
c001d3d5:	83 e2 fc             	and    edx,0xfffffffc
c001d3d8:	01 c2                	add    edx,eax
c001d3da:	66 ed                	in     ax,dx
c001d3dc:	c3                   	ret    
c001d3dd:	83 e2 f0             	and    edx,0xfffffff0
c001d3e0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d3e4:	c3                   	ret    
c001d3e5:	90                   	nop

c001d3e6 <PCI::readBAR32(unsigned int, int)>:
c001d3e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ee:	f6 c2 01             	test   dl,0x1
c001d3f1:	74 07                	je     c001d3fa <PCI::readBAR32(unsigned int, int)+0x14>
c001d3f3:	83 e2 fc             	and    edx,0xfffffffc
c001d3f6:	01 c2                	add    edx,eax
c001d3f8:	ed                   	in     eax,dx
c001d3f9:	c3                   	ret    
c001d3fa:	83 e2 f0             	and    edx,0xfffffff0
c001d3fd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d400:	c3                   	ret    
c001d401:	90                   	nop

c001d402 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d402:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d40a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d40e:	f6 c2 01             	test   dl,0x1
c001d411:	74 07                	je     c001d41a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d413:	83 e2 fc             	and    edx,0xfffffffc
c001d416:	01 ca                	add    edx,ecx
c001d418:	ee                   	out    dx,al
c001d419:	c3                   	ret    
c001d41a:	83 e2 f0             	and    edx,0xfffffff0
c001d41d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d420:	c3                   	ret    
c001d421:	90                   	nop

c001d422 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d42a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d42e:	f6 c2 01             	test   dl,0x1
c001d431:	74 08                	je     c001d43b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d433:	83 e2 fc             	and    edx,0xfffffffc
c001d436:	01 ca                	add    edx,ecx
c001d438:	66 ef                	out    dx,ax
c001d43a:	c3                   	ret    
c001d43b:	83 e2 f0             	and    edx,0xfffffff0
c001d43e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d442:	c3                   	ret    
c001d443:	90                   	nop

c001d444 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d44c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d450:	f6 c2 01             	test   dl,0x1
c001d453:	74 07                	je     c001d45c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d455:	83 e2 fc             	and    edx,0xfffffffc
c001d458:	01 ca                	add    edx,ecx
c001d45a:	ef                   	out    dx,eax
c001d45b:	c3                   	ret    
c001d45c:	83 e2 f0             	and    edx,0xfffffff0
c001d45f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d462:	c3                   	ret    
c001d463:	90                   	nop

c001d464 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d464:	55                   	push   ebp
c001d465:	57                   	push   edi
c001d466:	56                   	push   esi
c001d467:	53                   	push   ebx
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d46f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d473:	89 f0                	mov    eax,esi
c001d475:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d479:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d47d:	3c 07                	cmp    al,0x7
c001d47f:	76 10                	jbe    c001d491 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d481:	83 ec 0c             	sub    esp,0xc
c001d484:	68 a3 64 02 c0       	push   0xc00264a3
c001d489:	e8 e3 78 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d48e:	83 c4 10             	add    esp,0x10
c001d491:	80 fb 0f             	cmp    bl,0xf
c001d494:	76 10                	jbe    c001d4a6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d496:	83 ec 0c             	sub    esp,0xc
c001d499:	68 d3 64 02 c0       	push   0xc00264d3
c001d49e:	e8 ce 78 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	8d 04 36             	lea    eax,[esi+esi*1]
c001d4a9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4ae:	83 c8 f0             	or     eax,0xfffffff0
c001d4b1:	ee                   	out    dx,al
c001d4b2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d4b7:	89 e8                	mov    eax,ebp
c001d4b9:	ee                   	out    dx,al
c001d4ba:	83 c4 0c             	add    esp,0xc
c001d4bd:	89 d8                	mov    eax,ebx
c001d4bf:	66 81 e7 fc 00       	and    di,0xfc
c001d4c4:	5b                   	pop    ebx
c001d4c5:	c1 e0 08             	shl    eax,0x8
c001d4c8:	5e                   	pop    esi
c001d4c9:	09 f8                	or     eax,edi
c001d4cb:	5f                   	pop    edi
c001d4cc:	66 0d 00 c0          	or     ax,0xc000
c001d4d0:	5d                   	pop    ebp
c001d4d1:	c3                   	ret    

c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d4d2:	57                   	push   edi
c001d4d3:	56                   	push   esi
c001d4d4:	53                   	push   ebx
c001d4d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4dd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d4e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4ef:	83 ff 01             	cmp    edi,0x1
c001d4f2:	75 3e                	jne    c001d532 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d4f4:	89 de                	mov    esi,ebx
c001d4f6:	0f b6 c0             	movzx  eax,al
c001d4f9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d4ff:	c1 e0 10             	shl    eax,0x10
c001d502:	0f b6 c9             	movzx  ecx,cl
c001d505:	09 f0                	or     eax,esi
c001d507:	c1 e1 08             	shl    ecx,0x8
c001d50a:	0f b6 d2             	movzx  edx,dl
c001d50d:	09 c8                	or     eax,ecx
c001d50f:	c1 e2 0b             	shl    edx,0xb
c001d512:	09 d0                	or     eax,edx
c001d514:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d519:	0d 00 00 00 80       	or     eax,0x80000000
c001d51e:	ef                   	out    dx,eax
c001d51f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d524:	ed                   	in     eax,dx
c001d525:	83 e3 02             	and    ebx,0x2
c001d528:	0f b6 cb             	movzx  ecx,bl
c001d52b:	c1 e1 03             	shl    ecx,0x3
c001d52e:	d3 e8                	shr    eax,cl
c001d530:	eb 43                	jmp    c001d575 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d532:	83 ff 02             	cmp    edi,0x2
c001d535:	75 2c                	jne    c001d563 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	0f b6 c9             	movzx  ecx,cl
c001d53d:	0f b6 d2             	movzx  edx,dl
c001d540:	0f b6 fb             	movzx  edi,bl
c001d543:	0f b6 c0             	movzx  eax,al
c001d546:	57                   	push   edi
c001d547:	51                   	push   ecx
c001d548:	52                   	push   edx
c001d549:	50                   	push   eax
c001d54a:	56                   	push   esi
c001d54b:	e8 14 ff ff ff       	call   c001d464 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d550:	89 c2                	mov    edx,eax
c001d552:	ed                   	in     eax,dx
c001d553:	83 e3 02             	and    ebx,0x2
c001d556:	83 c4 20             	add    esp,0x20
c001d559:	0f b6 cb             	movzx  ecx,bl
c001d55c:	c1 e1 03             	shl    ecx,0x3
c001d55f:	d3 e8                	shr    eax,cl
c001d561:	eb 12                	jmp    c001d575 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d563:	83 ec 0c             	sub    esp,0xc
c001d566:	68 03 65 02 c0       	push   0xc0026503
c001d56b:	e8 01 78 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001d570:	83 c4 10             	add    esp,0x10
c001d573:	31 c0                	xor    eax,eax
c001d575:	5b                   	pop    ebx
c001d576:	5e                   	pop    esi
c001d577:	5f                   	pop    edi
c001d578:	c3                   	ret    
c001d579:	90                   	nop

c001d57a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d57a:	83 ec 18             	sub    esp,0x18
c001d57d:	6a 00                	push   0x0
c001d57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d584:	50                   	push   eax
c001d585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d58a:	50                   	push   eax
c001d58b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d590:	50                   	push   eax
c001d591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d595:	e8 38 ff ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d59a:	83 c4 2c             	add    esp,0x2c
c001d59d:	c3                   	ret    

c001d59e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d59e:	83 ec 18             	sub    esp,0x18
c001d5a1:	6a 0e                	push   0xe
c001d5a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5a8:	50                   	push   eax
c001d5a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5ae:	50                   	push   eax
c001d5af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5b4:	50                   	push   eax
c001d5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5b9:	e8 14 ff ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5be:	83 c4 2c             	add    esp,0x2c
c001d5c1:	0f b6 c0             	movzx  eax,al
c001d5c4:	c3                   	ret    
c001d5c5:	90                   	nop

c001d5c6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d5c6:	55                   	push   ebp
c001d5c7:	57                   	push   edi
c001d5c8:	56                   	push   esi
c001d5c9:	53                   	push   ebx
c001d5ca:	83 ec 18             	sub    esp,0x18
c001d5cd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d5d2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d5d7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d5dc:	6a 0a                	push   0xa
c001d5de:	56                   	push   esi
c001d5df:	55                   	push   ebp
c001d5e0:	57                   	push   edi
c001d5e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5e5:	e8 e8 fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5ea:	83 c4 14             	add    esp,0x14
c001d5ed:	89 c3                	mov    ebx,eax
c001d5ef:	6a 0a                	push   0xa
c001d5f1:	0f b6 db             	movzx  ebx,bl
c001d5f4:	56                   	push   esi
c001d5f5:	55                   	push   ebp
c001d5f6:	57                   	push   edi
c001d5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5fb:	e8 d2 fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d600:	83 c4 2c             	add    esp,0x2c
c001d603:	25 00 ff 00 00       	and    eax,0xff00
c001d608:	09 d8                	or     eax,ebx
c001d60a:	5b                   	pop    ebx
c001d60b:	5e                   	pop    esi
c001d60c:	5f                   	pop    edi
c001d60d:	5d                   	pop    ebp
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d610:	83 ec 18             	sub    esp,0x18
c001d613:	6a 08                	push   0x8
c001d615:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d61a:	50                   	push   eax
c001d61b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d620:	50                   	push   eax
c001d621:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d626:	50                   	push   eax
c001d627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d62b:	e8 a2 fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d630:	83 c4 2c             	add    esp,0x2c
c001d633:	0f b6 c4             	movzx  eax,ah
c001d636:	c3                   	ret    
c001d637:	90                   	nop

c001d638 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d638:	83 ec 18             	sub    esp,0x18
c001d63b:	6a 08                	push   0x8
c001d63d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d642:	50                   	push   eax
c001d643:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d648:	50                   	push   eax
c001d649:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d64e:	50                   	push   eax
c001d64f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d653:	e8 7a fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d658:	83 c4 2c             	add    esp,0x2c
c001d65b:	c3                   	ret    

c001d65c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d65c:	83 ec 18             	sub    esp,0x18
c001d65f:	6a 3c                	push   0x3c
c001d661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d666:	50                   	push   eax
c001d667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d66c:	50                   	push   eax
c001d66d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d672:	50                   	push   eax
c001d673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d677:	e8 56 fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d67c:	83 c4 2c             	add    esp,0x2c
c001d67f:	c3                   	ret    

c001d680 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d680:	83 ec 18             	sub    esp,0x18
c001d683:	6a 18                	push   0x18
c001d685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d68a:	50                   	push   eax
c001d68b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d690:	50                   	push   eax
c001d691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d696:	50                   	push   eax
c001d697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69b:	e8 32 fe ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a0:	83 c4 2c             	add    esp,0x2c
c001d6a3:	0f b6 c4             	movzx  eax,ah
c001d6a6:	c3                   	ret    
c001d6a7:	90                   	nop

c001d6a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d6a8:	55                   	push   ebp
c001d6a9:	57                   	push   edi
c001d6aa:	56                   	push   esi
c001d6ab:	53                   	push   ebx
c001d6ac:	83 ec 28             	sub    esp,0x28
c001d6af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6b3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d6b8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d6bd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d6c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d6c9:	8d 43 12             	lea    eax,[ebx+0x12]
c001d6cc:	83 c3 10             	add    ebx,0x10
c001d6cf:	0f b6 c0             	movzx  eax,al
c001d6d2:	0f b6 db             	movzx  ebx,bl
c001d6d5:	50                   	push   eax
c001d6d6:	51                   	push   ecx
c001d6d7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d6db:	57                   	push   edi
c001d6dc:	55                   	push   ebp
c001d6dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6e1:	e8 ec fd ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6e6:	83 c4 14             	add    esp,0x14
c001d6e9:	89 c6                	mov    esi,eax
c001d6eb:	53                   	push   ebx
c001d6ec:	c1 e6 10             	shl    esi,0x10
c001d6ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6f3:	51                   	push   ecx
c001d6f4:	57                   	push   edi
c001d6f5:	55                   	push   ebp
c001d6f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6fa:	e8 d3 fd ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ff:	83 c4 3c             	add    esp,0x3c
c001d702:	0f b7 c0             	movzx  eax,ax
c001d705:	5b                   	pop    ebx
c001d706:	09 f0                	or     eax,esi
c001d708:	5e                   	pop    esi
c001d709:	5f                   	pop    edi
c001d70a:	5d                   	pop    ebp
c001d70b:	c3                   	ret    

c001d70c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d70c:	55                   	push   ebp
c001d70d:	57                   	push   edi
c001d70e:	56                   	push   esi
c001d70f:	53                   	push   ebx
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d717:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d71b:	89 f5                	mov    ebp,esi
c001d71d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d723:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d727:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d72b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d72f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d733:	83 f9 01             	cmp    ecx,0x1
c001d736:	75 5d                	jne    c001d795 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d738:	0f b6 c8             	movzx  ecx,al
c001d73b:	0f b6 d2             	movzx  edx,dl
c001d73e:	c1 e1 10             	shl    ecx,0x10
c001d741:	c1 e2 0b             	shl    edx,0xb
c001d744:	89 f0                	mov    eax,esi
c001d746:	25 fc 00 00 00       	and    eax,0xfc
c001d74b:	09 c1                	or     ecx,eax
c001d74d:	89 e8                	mov    eax,ebp
c001d74f:	0f b6 c0             	movzx  eax,al
c001d752:	c1 e0 08             	shl    eax,0x8
c001d755:	09 c1                	or     ecx,eax
c001d757:	09 d1                	or     ecx,edx
c001d759:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d75e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d764:	89 c8                	mov    eax,ecx
c001d766:	ef                   	out    dx,eax
c001d767:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d76c:	ed                   	in     eax,dx
c001d76d:	0f b7 db             	movzx  ebx,bx
c001d770:	83 e6 02             	and    esi,0x2
c001d773:	74 0a                	je     c001d77f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d775:	0f b7 d0             	movzx  edx,ax
c001d778:	c1 e3 10             	shl    ebx,0x10
c001d77b:	09 d3                	or     ebx,edx
c001d77d:	eb 05                	jmp    c001d784 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d77f:	66 31 c0             	xor    ax,ax
c001d782:	09 c3                	or     ebx,eax
c001d784:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d789:	89 c8                	mov    eax,ecx
c001d78b:	ef                   	out    dx,eax
c001d78c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d791:	89 d8                	mov    eax,ebx
c001d793:	eb 41                	jmp    c001d7d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d795:	83 f9 02             	cmp    ecx,0x2
c001d798:	75 45                	jne    c001d7df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d79a:	83 ec 0c             	sub    esp,0xc
c001d79d:	0f b6 d2             	movzx  edx,dl
c001d7a0:	89 f1                	mov    ecx,esi
c001d7a2:	0f b6 c0             	movzx  eax,al
c001d7a5:	0f b6 f1             	movzx  esi,cl
c001d7a8:	89 e9                	mov    ecx,ebp
c001d7aa:	56                   	push   esi
c001d7ab:	0f b6 c9             	movzx  ecx,cl
c001d7ae:	51                   	push   ecx
c001d7af:	52                   	push   edx
c001d7b0:	50                   	push   eax
c001d7b1:	57                   	push   edi
c001d7b2:	e8 ad fc ff ff       	call   c001d464 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7b7:	89 c2                	mov    edx,eax
c001d7b9:	ed                   	in     eax,dx
c001d7ba:	83 c4 20             	add    esp,0x20
c001d7bd:	0f b7 db             	movzx  ebx,bx
c001d7c0:	f6 c2 02             	test   dl,0x2
c001d7c3:	74 0c                	je     c001d7d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d7c5:	0f b7 c8             	movzx  ecx,ax
c001d7c8:	89 d8                	mov    eax,ebx
c001d7ca:	c1 e0 10             	shl    eax,0x10
c001d7cd:	09 c8                	or     eax,ecx
c001d7cf:	eb 05                	jmp    c001d7d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d7d1:	66 31 c0             	xor    ax,ax
c001d7d4:	09 d8                	or     eax,ebx
c001d7d6:	ef                   	out    dx,eax
c001d7d7:	83 c4 0c             	add    esp,0xc
c001d7da:	5b                   	pop    ebx
c001d7db:	5e                   	pop    esi
c001d7dc:	5f                   	pop    edi
c001d7dd:	5d                   	pop    ebp
c001d7de:	c3                   	ret    
c001d7df:	c7 44 24 20 03 65 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026503
c001d7e7:	83 c4 0c             	add    esp,0xc
c001d7ea:	5b                   	pop    ebx
c001d7eb:	5e                   	pop    esi
c001d7ec:	5f                   	pop    edi
c001d7ed:	5d                   	pop    ebp
c001d7ee:	e9 7e 75 ff ff       	jmp    c0014d71 <Krnl::panic(char const*)>
c001d7f3:	90                   	nop

c001d7f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d7f4:	55                   	push   ebp
c001d7f5:	57                   	push   edi
c001d7f6:	56                   	push   esi
c001d7f7:	53                   	push   ebx
c001d7f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d7fe:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d805:	75 0f                	jne    c001d816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d807:	80 3d ec 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029bec,0x0
c001d80e:	0f 85 fa 00 00 00    	jne    c001d90e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d814:	eb 2f                	jmp    c001d845 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	68 09 65 02 c0       	push   0xc0026509
c001d81e:	e8 3e c5 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d82d:	75 d8                	jne    c001d807 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d82f:	e4 60                	in     al,0x60
c001d831:	3c 1c                	cmp    al,0x1c
c001d833:	74 04                	je     c001d839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d835:	3c 5a                	cmp    al,0x5a
c001d837:	75 f6                	jne    c001d82f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d839:	e4 60                	in     al,0x60
c001d83b:	3c 5a                	cmp    al,0x5a
c001d83d:	74 fa                	je     c001d839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d83f:	3c 1c                	cmp    al,0x1c
c001d841:	74 f6                	je     c001d839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d843:	eb c2                	jmp    c001d807 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d845:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d84c:	0f 85 86 00 00 00    	jne    c001d8d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d852:	83 ec 0c             	sub    esp,0xc
c001d855:	68 14 01 00 00       	push   0x114
c001d85a:	e8 a8 c4 fe ff       	call   c0009d07 <malloc>
c001d85f:	83 c4 0c             	add    esp,0xc
c001d862:	89 c3                	mov    ebx,eax
c001d864:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c001d86a:	68 23 65 02 c0       	push   0xc0026523
c001d86f:	50                   	push   eax
c001d870:	e8 09 fd fe ff       	call   c000d57e <File::File(char const*, Process*)>
c001d875:	5a                   	pop    edx
c001d876:	59                   	pop    ecx
c001d877:	6a 01                	push   0x1
c001d879:	53                   	push   ebx
c001d87a:	e8 d9 fd fe ff       	call   c000d658 <File::open(FileOpenMode)>
c001d87f:	83 c4 0c             	add    esp,0xc
c001d882:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d886:	50                   	push   eax
c001d887:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d88b:	50                   	push   eax
c001d88c:	53                   	push   ebx
c001d88d:	e8 72 00 ff ff       	call   c000d904 <File::stat(unsigned long long*, bool*)>
c001d892:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d896:	40                   	inc    eax
c001d897:	89 04 24             	mov    DWORD PTR [esp],eax
c001d89a:	e8 68 c4 fe ff       	call   c0009d07 <malloc>
c001d89f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8a3:	a3 e8 9b 02 c0       	mov    ds:0xc0029be8,eax
c001d8a8:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d8ac:	5e                   	pop    esi
c001d8ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d8af:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d8b3:	51                   	push   ecx
c001d8b4:	50                   	push   eax
c001d8b5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d8b9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d8bd:	53                   	push   ebx
c001d8be:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d8c1:	83 c4 14             	add    esp,0x14
c001d8c4:	53                   	push   ebx
c001d8c5:	e8 ec fd fe ff       	call   c000d6b6 <File::close()>
c001d8ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8ce:	83 c4 10             	add    esp,0x10
c001d8d1:	a3 e4 9b 02 c0       	mov    ds:0xc0029be4,eax
c001d8d6:	eb 36                	jmp    c001d90e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d8d8:	83 ec 0c             	sub    esp,0xc
c001d8db:	68 3c 65 02 c0       	push   0xc002653c
c001d8e0:	e8 7c c4 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001d8e5:	83 c4 10             	add    esp,0x10
c001d8e8:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d8ef:	0f 85 5d ff ff ff    	jne    c001d852 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8f5:	e4 60                	in     al,0x60
c001d8f7:	3c 1c                	cmp    al,0x1c
c001d8f9:	74 04                	je     c001d8ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8fb:	3c 5a                	cmp    al,0x5a
c001d8fd:	75 f6                	jne    c001d8f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d8ff:	e4 60                	in     al,0x60
c001d901:	3c 5a                	cmp    al,0x5a
c001d903:	74 fa                	je     c001d8ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d905:	3c 1c                	cmp    al,0x1c
c001d907:	74 f6                	je     c001d8ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d909:	e9 44 ff ff ff       	jmp    c001d852 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d90e:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d915:	75 0b                	jne    c001d922 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d917:	31 f6                	xor    esi,esi
c001d919:	31 db                	xor    ebx,ebx
c001d91b:	31 ed                	xor    ebp,ebp
c001d91d:	e9 a3 01 00 00       	jmp    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	68 4e 65 02 c0       	push   0xc002654e
c001d92a:	e8 32 c4 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001d92f:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	f6 c2 80             	test   dl,0x80
c001d93b:	74 0c                	je     c001d949 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d93d:	0f ba e2 0b          	bt     edx,0xb
c001d941:	72 1a                	jb     c001d95d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d943:	eb d2                	jmp    c001d917 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d945:	3c 5a                	cmp    al,0x5a
c001d947:	74 0c                	je     c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d949:	e4 60                	in     al,0x60
c001d94b:	3c 1c                	cmp    al,0x1c
c001d94d:	75 f6                	jne    c001d945 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d94f:	eb 04                	jmp    c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d951:	3c 1c                	cmp    al,0x1c
c001d953:	75 e8                	jne    c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d955:	e4 60                	in     al,0x60
c001d957:	3c 5a                	cmp    al,0x5a
c001d959:	74 fa                	je     c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d95b:	eb f4                	jmp    c001d951 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	68 53 65 02 c0       	push   0xc0026553
c001d965:	e8 f7 c3 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001d96a:	83 c4 10             	add    esp,0x10
c001d96d:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d974:	75 a1                	jne    c001d917 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d976:	e4 60                	in     al,0x60
c001d978:	3c 5a                	cmp    al,0x5a
c001d97a:	74 04                	je     c001d980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d97c:	3c 1c                	cmp    al,0x1c
c001d97e:	75 f6                	jne    c001d976 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d980:	e4 60                	in     al,0x60
c001d982:	3c 5a                	cmp    al,0x5a
c001d984:	74 fa                	je     c001d980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d986:	3c 1c                	cmp    al,0x1c
c001d988:	74 f6                	je     c001d980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d98a:	eb 8b                	jmp    c001d917 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d98c:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d993:	0f 85 3d 01 00 00    	jne    c001dad6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d999:	a1 e8 9b 02 c0       	mov    eax,ds:0xc0029be8
c001d99e:	8d 7e 01             	lea    edi,[esi+0x1]
c001d9a1:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d9a4:	d4 40                	aam    0x40
c001d9a6:	d5 39                	aad    0x39
c001d9a8:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d9af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d9b3:	0f 85 53 01 00 00    	jne    c001db0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d9b9:	8b 15 e8 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029be8
c001d9bf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d9c2:	d4 40                	aam    0x40
c001d9c4:	d5 39                	aad    0x39
c001d9c6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d9ca:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d9ce:	d4 40                	aam    0x40
c001d9d0:	d5 39                	aad    0x39
c001d9d2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d9d6:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d9da:	d4 40                	aam    0x40
c001d9dc:	d5 39                	aad    0x39
c001d9de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9e2:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d9e6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d9ea:	3c 56                	cmp    al,0x56
c001d9ec:	74 49                	je     c001da37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d9ee:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d9f2:	d4 40                	aam    0x40
c001d9f4:	d5 39                	aad    0x39
c001d9f6:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d9f9:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d9fd:	0f b6 c9             	movzx  ecx,cl
c001da00:	c1 e1 04             	shl    ecx,0x4
c001da03:	d4 40                	aam    0x40
c001da05:	d5 39                	aad    0x39
c001da07:	83 e8 30             	sub    eax,0x30
c001da0a:	0f b6 c0             	movzx  eax,al
c001da0d:	09 c1                	or     ecx,eax
c001da0f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001da13:	c1 e1 04             	shl    ecx,0x4
c001da16:	d4 40                	aam    0x40
c001da18:	d5 39                	aad    0x39
c001da1a:	83 e8 30             	sub    eax,0x30
c001da1d:	0f b6 c0             	movzx  eax,al
c001da20:	09 c1                	or     ecx,eax
c001da22:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001da26:	c1 e1 04             	shl    ecx,0x4
c001da29:	d4 40                	aam    0x40
c001da2b:	d5 39                	aad    0x39
c001da2d:	83 e8 30             	sub    eax,0x30
c001da30:	0f b6 c0             	movzx  eax,al
c001da33:	09 c8                	or     eax,ecx
c001da35:	89 c5                	mov    ebp,eax
c001da37:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001da3b:	80 f9 44             	cmp    cl,0x44
c001da3e:	74 47                	je     c001da87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001da40:	88 c8                	mov    al,cl
c001da42:	d4 40                	aam    0x40
c001da44:	d5 39                	aad    0x39
c001da46:	83 e8 30             	sub    eax,0x30
c001da49:	0f b6 f8             	movzx  edi,al
c001da4c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001da50:	c1 e7 04             	shl    edi,0x4
c001da53:	d4 40                	aam    0x40
c001da55:	d5 39                	aad    0x39
c001da57:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da5a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001da5e:	0f b6 db             	movzx  ebx,bl
c001da61:	09 fb                	or     ebx,edi
c001da63:	c1 e3 04             	shl    ebx,0x4
c001da66:	d4 40                	aam    0x40
c001da68:	d5 39                	aad    0x39
c001da6a:	83 e8 30             	sub    eax,0x30
c001da6d:	0f b6 f8             	movzx  edi,al
c001da70:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001da74:	09 fb                	or     ebx,edi
c001da76:	89 df                	mov    edi,ebx
c001da78:	c1 e7 04             	shl    edi,0x4
c001da7b:	d4 40                	aam    0x40
c001da7d:	d5 39                	aad    0x39
c001da7f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da82:	0f b6 db             	movzx  ebx,bl
c001da85:	09 fb                	or     ebx,edi
c001da87:	a1 e4 9b 02 c0       	mov    eax,ds:0xc0029be4
c001da8c:	83 c6 10             	add    esi,0x10
c001da8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da93:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001da97:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001da9a:	3c 0a                	cmp    al,0xa
c001da9c:	0f 85 a0 00 00 00    	jne    c001db42 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001daa2:	3c 0a                	cmp    al,0xa
c001daa4:	0f 94 c0             	sete   al
c001daa7:	0f b6 c0             	movzx  eax,al
c001daaa:	01 c6                	add    esi,eax
c001daac:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001dab1:	0f 84 a2 00 00 00    	je     c001db59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dab7:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001dabf:	0f 84 94 00 00 00    	je     c001db59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dac5:	39 35 e4 9b 02 c0    	cmp    DWORD PTR ds:0xc0029be4,esi
c001dacb:	0f 8f bb fe ff ff    	jg     c001d98c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001dad1:	e9 e8 00 00 00       	jmp    c001dbbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001dad6:	83 ec 0c             	sub    esp,0xc
c001dad9:	68 5a 65 02 c0       	push   0xc002655a
c001dade:	e8 7e c2 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dae3:	83 c4 10             	add    esp,0x10
c001dae6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001daed:	0f 85 a6 fe ff ff    	jne    c001d999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001daf3:	e4 60                	in     al,0x60
c001daf5:	3c 5a                	cmp    al,0x5a
c001daf7:	74 04                	je     c001dafd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001daf9:	3c 1c                	cmp    al,0x1c
c001dafb:	75 f6                	jne    c001daf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dafd:	e4 60                	in     al,0x60
c001daff:	3c 5a                	cmp    al,0x5a
c001db01:	74 fa                	je     c001dafd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001db03:	3c 1c                	cmp    al,0x1c
c001db05:	74 f6                	je     c001dafd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001db07:	e9 8d fe ff ff       	jmp    c001d999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	68 62 65 02 c0       	push   0xc0026562
c001db14:	e8 48 c2 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001db19:	83 c4 10             	add    esp,0x10
c001db1c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001db23:	0f 85 90 fe ff ff    	jne    c001d9b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db29:	e4 60                	in     al,0x60
c001db2b:	3c 5a                	cmp    al,0x5a
c001db2d:	74 04                	je     c001db33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db2f:	3c 1c                	cmp    al,0x1c
c001db31:	75 f6                	jne    c001db29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001db33:	e4 60                	in     al,0x60
c001db35:	3c 5a                	cmp    al,0x5a
c001db37:	74 fa                	je     c001db33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db39:	3c 1c                	cmp    al,0x1c
c001db3b:	74 f6                	je     c001db33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db3d:	e9 77 fe ff ff       	jmp    c001d9b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db42:	47                   	inc    edi
c001db43:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001db47:	0f 84 55 ff ff ff    	je     c001daa2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001db4d:	46                   	inc    esi
c001db4e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001db51:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001db54:	e9 3e ff ff ff       	jmp    c001da97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001db59:	80 f9 44             	cmp    cl,0x44
c001db5c:	74 0e                	je     c001db6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001db5e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001db66:	0f 85 59 ff ff ff    	jne    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db70:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001db74:	c1 e0 04             	shl    eax,0x4
c001db77:	83 ea 30             	sub    edx,0x30
c001db7a:	09 d0                	or     eax,edx
c001db7c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001db83:	0f 85 3c ff ff ff    	jne    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db89:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001db8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db91:	c1 e2 04             	shl    edx,0x4
c001db94:	83 e8 30             	sub    eax,0x30
c001db97:	09 d0                	or     eax,edx
c001db99:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dba0:	0f 85 1f ff ff ff    	jne    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dba6:	50                   	push   eax
c001dba7:	50                   	push   eax
c001dba8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dbac:	50                   	push   eax
c001dbad:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dbb4:	e8 7f 2b fe ff       	call   c0000738 <strcpy>
c001dbb9:	83 c4 10             	add    esp,0x10
c001dbbc:	eb 15                	jmp    c001dbd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dbbe:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dbc5:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dbd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dbd3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dbda:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dbe0:	5b                   	pop    ebx
c001dbe1:	5e                   	pop    esi
c001dbe2:	5f                   	pop    edi
c001dbe3:	5d                   	pop    ebp
c001dbe4:	c3                   	ret    
c001dbe5:	90                   	nop

c001dbe6 <PCI::checkBus(unsigned char)>:
c001dbe6:	56                   	push   esi
c001dbe7:	53                   	push   ebx
c001dbe8:	31 db                	xor    ebx,ebx
c001dbea:	51                   	push   ecx
c001dbeb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dbf0:	52                   	push   edx
c001dbf1:	53                   	push   ebx
c001dbf2:	43                   	inc    ebx
c001dbf3:	56                   	push   esi
c001dbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbf8:	e8 bf 07 00 00       	call   c001e3bc <PCI::checkDevice(unsigned char, unsigned char)>
c001dbfd:	83 c4 10             	add    esp,0x10
c001dc00:	83 fb 20             	cmp    ebx,0x20
c001dc03:	75 eb                	jne    c001dbf0 <PCI::checkBus(unsigned char)+0xa>
c001dc05:	58                   	pop    eax
c001dc06:	5b                   	pop    ebx
c001dc07:	5e                   	pop    esi
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <PCI::foundDevice(PCIDeviceInfo)>:
c001dc0a:	55                   	push   ebp
c001dc0b:	57                   	push   edi
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	83 ec 1c             	sub    esp,0x1c
c001dc11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc15:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dc1b:	0f 84 20 04 00 00    	je     c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dc21:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dc28:	75 37                	jne    c001dc61 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dc2a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc2e:	66 81 f9 06 04       	cmp    cx,0x406
c001dc33:	75 5b                	jne    c001dc90 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dc35:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dc3a:	50                   	push   eax
c001dc3b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dc40:	50                   	push   eax
c001dc41:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dc46:	50                   	push   eax
c001dc47:	53                   	push   ebx
c001dc48:	e8 33 fa ff ff       	call   c001d680 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc4d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dc51:	0f b6 c0             	movzx  eax,al
c001dc54:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc58:	83 c4 2c             	add    esp,0x2c
c001dc5b:	5b                   	pop    ebx
c001dc5c:	5e                   	pop    esi
c001dc5d:	5f                   	pop    edi
c001dc5e:	5d                   	pop    ebp
c001dc5f:	eb 85                	jmp    c001dbe6 <PCI::checkBus(unsigned char)>
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	68 6b 65 02 c0       	push   0xc002656b
c001dc69:	e8 f3 c0 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dc6e:	83 c4 10             	add    esp,0x10
c001dc71:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dc78:	75 b0                	jne    c001dc2a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc7a:	e4 60                	in     al,0x60
c001dc7c:	3c 5a                	cmp    al,0x5a
c001dc7e:	74 04                	je     c001dc84 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc80:	3c 1c                	cmp    al,0x1c
c001dc82:	75 f6                	jne    c001dc7a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dc84:	e4 60                	in     al,0x60
c001dc86:	3c 5a                	cmp    al,0x5a
c001dc88:	74 fa                	je     c001dc84 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc8a:	3c 1c                	cmp    al,0x1c
c001dc8c:	74 f6                	je     c001dc84 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc8e:	eb 9a                	jmp    c001dc2a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc90:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dc96:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dc9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc9e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dca2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dca6:	88 d0                	mov    al,dl
c001dca8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dcad:	74 3b                	je     c001dcea <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dcaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcb3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dcb6:	85 d2                	test   edx,edx
c001dcb8:	74 24                	je     c001dcde <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dcba:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dcc0:	31 ef                	xor    edi,ebp
c001dcc2:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dcc8:	75 14                	jne    c001dcde <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dcca:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dcd0:	75 0c                	jne    c001dcde <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dcd2:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dcd8:	0f 84 63 03 00 00    	je     c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dce2:	8b 12                	mov    edx,DWORD PTR [edx]
c001dce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dce8:	eb be                	jmp    c001dca8 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dcea:	66 81 f9 01 06       	cmp    cx,0x601
c001dcef:	0f 85 81 01 00 00    	jne    c001de76 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dcf5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dcfc:	75 25                	jne    c001dd23 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dcfe:	83 ec 0c             	sub    esp,0xc
c001dd01:	68 64 01 00 00       	push   0x164
c001dd06:	e8 fc bf fe ff       	call   c0009d07 <malloc>
c001dd0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd0e:	89 c5                	mov    ebp,eax
c001dd10:	e8 d3 12 00 00       	call   c001efe8 <SATABus::SATABus()>
c001dd15:	83 c4 10             	add    esp,0x10
c001dd18:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dd1f:	74 4a                	je     c001dd6b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd21:	eb 2f                	jmp    c001dd52 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	68 7b 65 02 c0       	push   0xc002657b
c001dd2b:	e8 31 c0 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dd3a:	75 c2                	jne    c001dcfe <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd3c:	e4 60                	in     al,0x60
c001dd3e:	3c 1c                	cmp    al,0x1c
c001dd40:	74 04                	je     c001dd46 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd42:	3c 5a                	cmp    al,0x5a
c001dd44:	75 f6                	jne    c001dd3c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dd46:	e4 60                	in     al,0x60
c001dd48:	3c 5a                	cmp    al,0x5a
c001dd4a:	74 fa                	je     c001dd46 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd4c:	3c 1c                	cmp    al,0x1c
c001dd4e:	74 f6                	je     c001dd46 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd50:	eb ac                	jmp    c001dcfe <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd52:	83 ec 0c             	sub    esp,0xc
c001dd55:	68 81 65 02 c0       	push   0xc0026581
c001dd5a:	e8 02 c0 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dd69:	74 1b                	je     c001dd86 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dd6b:	50                   	push   eax
c001dd6c:	50                   	push   eax
c001dd6d:	55                   	push   ebp
c001dd6e:	53                   	push   ebx
c001dd6f:	e8 52 07 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c001dd74:	83 c4 10             	add    esp,0x10
c001dd77:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dd7e:	74 33                	je     c001ddb3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dd80:	eb 18                	jmp    c001dd9a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dd82:	3c 1c                	cmp    al,0x1c
c001dd84:	74 0c                	je     c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd86:	e4 60                	in     al,0x60
c001dd88:	3c 5a                	cmp    al,0x5a
c001dd8a:	75 f6                	jne    c001dd82 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dd8c:	eb 04                	jmp    c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd8e:	3c 1c                	cmp    al,0x1c
c001dd90:	75 d9                	jne    c001dd6b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd92:	e4 60                	in     al,0x60
c001dd94:	3c 5a                	cmp    al,0x5a
c001dd96:	74 fa                	je     c001dd92 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd98:	eb f4                	jmp    c001dd8e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dd9a:	83 ec 0c             	sub    esp,0xc
c001dd9d:	68 89 65 02 c0       	push   0xc0026589
c001dda2:	e8 ba bf fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dda7:	83 c4 10             	add    esp,0x10
c001ddaa:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001ddb1:	74 29                	je     c001dddc <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001ddb3:	83 ec 2c             	sub    esp,0x2c
c001ddb6:	b9 09 00 00 00       	mov    ecx,0x9
c001ddbb:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ddbf:	fc                   	cld    
c001ddc0:	89 e7                	mov    edi,esp
c001ddc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ddc4:	55                   	push   ebp
c001ddc5:	e8 0e 06 ff ff       	call   c000e3d8 <Device::preOpenPCI(PCIDeviceInfo)>
c001ddca:	83 c4 30             	add    esp,0x30
c001ddcd:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001ddd4:	74 33                	je     c001de09 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001ddd6:	eb 18                	jmp    c001ddf0 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001ddd8:	3c 1c                	cmp    al,0x1c
c001ddda:	74 0c                	je     c001dde8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dddc:	e4 60                	in     al,0x60
c001ddde:	3c 5a                	cmp    al,0x5a
c001dde0:	75 f6                	jne    c001ddd8 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001dde2:	eb 04                	jmp    c001dde8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dde4:	3c 1c                	cmp    al,0x1c
c001dde6:	75 cb                	jne    c001ddb3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dde8:	e4 60                	in     al,0x60
c001ddea:	3c 5a                	cmp    al,0x5a
c001ddec:	74 fa                	je     c001dde8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddee:	eb f4                	jmp    c001dde4 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ddf0:	83 ec 0c             	sub    esp,0xc
c001ddf3:	68 91 65 02 c0       	push   0xc0026591
c001ddf8:	e8 64 bf fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001de07:	74 23                	je     c001de2c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001de09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001de0c:	6a 00                	push   0x0
c001de0e:	6a 00                	push   0x0
c001de10:	6a 00                	push   0x0
c001de12:	55                   	push   ebp
c001de13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de16:	83 c4 10             	add    esp,0x10
c001de19:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001de20:	0f 84 1b 02 00 00    	je     c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de26:	eb 18                	jmp    c001de40 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001de28:	3c 1c                	cmp    al,0x1c
c001de2a:	74 0c                	je     c001de38 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de2c:	e4 60                	in     al,0x60
c001de2e:	3c 5a                	cmp    al,0x5a
c001de30:	75 f6                	jne    c001de28 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001de32:	eb 04                	jmp    c001de38 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de34:	3c 1c                	cmp    al,0x1c
c001de36:	75 d1                	jne    c001de09 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de38:	e4 60                	in     al,0x60
c001de3a:	3c 5a                	cmp    al,0x5a
c001de3c:	74 fa                	je     c001de38 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de3e:	eb f4                	jmp    c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	68 99 65 02 c0       	push   0xc0026599
c001de48:	e8 14 bf fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001de57:	0f 85 e4 01 00 00    	jne    c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de5d:	e4 60                	in     al,0x60
c001de5f:	3c 5a                	cmp    al,0x5a
c001de61:	74 04                	je     c001de67 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de63:	3c 1c                	cmp    al,0x1c
c001de65:	75 f6                	jne    c001de5d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001de67:	e4 60                	in     al,0x60
c001de69:	3c 5a                	cmp    al,0x5a
c001de6b:	74 fa                	je     c001de67 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de6d:	3c 1c                	cmp    al,0x1c
c001de6f:	74 f6                	je     c001de67 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de71:	e9 cb 01 00 00       	jmp    c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de76:	66 81 f9 01 01       	cmp    cx,0x101
c001de7b:	0f 85 7a 01 00 00    	jne    c001dffb <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001de81:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001de88:	75 25                	jne    c001deaf <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001de8a:	83 ec 0c             	sub    esp,0xc
c001de8d:	68 70 02 00 00       	push   0x270
c001de92:	e8 70 be fe ff       	call   c0009d07 <malloc>
c001de97:	89 04 24             	mov    DWORD PTR [esp],eax
c001de9a:	89 c5                	mov    ebp,eax
c001de9c:	e8 df 05 00 00       	call   c001e480 <IDE::IDE()>
c001dea1:	83 c4 10             	add    esp,0x10
c001dea4:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001deab:	74 4a                	je     c001def7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dead:	eb 2f                	jmp    c001dede <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001deaf:	83 ec 0c             	sub    esp,0xc
c001deb2:	68 a1 65 02 c0       	push   0xc00265a1
c001deb7:	e8 a5 be fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dec6:	75 c2                	jne    c001de8a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dec8:	e4 60                	in     al,0x60
c001deca:	3c 5a                	cmp    al,0x5a
c001decc:	74 04                	je     c001ded2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dece:	3c 1c                	cmp    al,0x1c
c001ded0:	75 f6                	jne    c001dec8 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001ded2:	e4 60                	in     al,0x60
c001ded4:	3c 5a                	cmp    al,0x5a
c001ded6:	74 fa                	je     c001ded2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001ded8:	3c 1c                	cmp    al,0x1c
c001deda:	74 f6                	je     c001ded2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dedc:	eb ac                	jmp    c001de8a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	68 a8 65 02 c0       	push   0xc00265a8
c001dee6:	e8 76 be fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001deeb:	83 c4 10             	add    esp,0x10
c001deee:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001def5:	74 1b                	je     c001df12 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001def7:	57                   	push   edi
c001def8:	57                   	push   edi
c001def9:	55                   	push   ebp
c001defa:	53                   	push   ebx
c001defb:	e8 c6 05 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001df0a:	74 33                	je     c001df3f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df0c:	eb 18                	jmp    c001df26 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001df0e:	3c 1c                	cmp    al,0x1c
c001df10:	74 0c                	je     c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df12:	e4 60                	in     al,0x60
c001df14:	3c 5a                	cmp    al,0x5a
c001df16:	75 f6                	jne    c001df0e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001df18:	eb 04                	jmp    c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df1a:	3c 1c                	cmp    al,0x1c
c001df1c:	75 d9                	jne    c001def7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001df1e:	e4 60                	in     al,0x60
c001df20:	3c 5a                	cmp    al,0x5a
c001df22:	74 fa                	je     c001df1e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001df24:	eb f4                	jmp    c001df1a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	68 af 65 02 c0       	push   0xc00265af
c001df2e:	e8 2e be fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001df33:	83 c4 10             	add    esp,0x10
c001df36:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001df3d:	74 29                	je     c001df68 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001df3f:	83 ec 2c             	sub    esp,0x2c
c001df42:	b9 09 00 00 00       	mov    ecx,0x9
c001df47:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df4b:	fc                   	cld    
c001df4c:	89 e7                	mov    edi,esp
c001df4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df50:	55                   	push   ebp
c001df51:	e8 82 04 ff ff       	call   c000e3d8 <Device::preOpenPCI(PCIDeviceInfo)>
c001df56:	83 c4 30             	add    esp,0x30
c001df59:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001df60:	74 33                	je     c001df95 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df62:	eb 18                	jmp    c001df7c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001df64:	3c 1c                	cmp    al,0x1c
c001df66:	74 0c                	je     c001df74 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df68:	e4 60                	in     al,0x60
c001df6a:	3c 5a                	cmp    al,0x5a
c001df6c:	75 f6                	jne    c001df64 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001df6e:	eb 04                	jmp    c001df74 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df70:	3c 1c                	cmp    al,0x1c
c001df72:	75 cb                	jne    c001df3f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df74:	e4 60                	in     al,0x60
c001df76:	3c 5a                	cmp    al,0x5a
c001df78:	74 fa                	je     c001df74 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df7a:	eb f4                	jmp    c001df70 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	68 b6 65 02 c0       	push   0xc00265b6
c001df84:	e8 d8 bd fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001df89:	83 c4 10             	add    esp,0x10
c001df8c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001df93:	74 23                	je     c001dfb8 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001df95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001df98:	6a 00                	push   0x0
c001df9a:	6a 00                	push   0x0
c001df9c:	6a 00                	push   0x0
c001df9e:	55                   	push   ebp
c001df9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfa2:	83 c4 10             	add    esp,0x10
c001dfa5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dfac:	0f 84 8f 00 00 00    	je     c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfb2:	eb 18                	jmp    c001dfcc <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dfb4:	3c 1c                	cmp    al,0x1c
c001dfb6:	74 0c                	je     c001dfc4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dfb8:	e4 60                	in     al,0x60
c001dfba:	3c 5a                	cmp    al,0x5a
c001dfbc:	75 f6                	jne    c001dfb4 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001dfbe:	eb 04                	jmp    c001dfc4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dfc0:	3c 1c                	cmp    al,0x1c
c001dfc2:	75 d1                	jne    c001df95 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dfc4:	e4 60                	in     al,0x60
c001dfc6:	3c 5a                	cmp    al,0x5a
c001dfc8:	74 fa                	je     c001dfc4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dfca:	eb f4                	jmp    c001dfc0 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dfcc:	83 ec 0c             	sub    esp,0xc
c001dfcf:	68 bd 65 02 c0       	push   0xc00265bd
c001dfd4:	e8 88 bd fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001dfd9:	83 c4 10             	add    esp,0x10
c001dfdc:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dfe3:	75 5c                	jne    c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfe5:	e4 60                	in     al,0x60
c001dfe7:	3c 5a                	cmp    al,0x5a
c001dfe9:	74 04                	je     c001dfef <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfeb:	3c 1c                	cmp    al,0x1c
c001dfed:	75 f6                	jne    c001dfe5 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dfef:	e4 60                	in     al,0x60
c001dff1:	3c 5a                	cmp    al,0x5a
c001dff3:	74 fa                	je     c001dfef <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dff5:	3c 1c                	cmp    al,0x1c
c001dff7:	74 f6                	je     c001dfef <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dff9:	eb 46                	jmp    c001e041 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dffb:	83 ec 0c             	sub    esp,0xc
c001dffe:	68 58 01 00 00       	push   0x158
c001e003:	e8 ff bc fe ff       	call   c0009d07 <malloc>
c001e008:	89 c5                	mov    ebp,eax
c001e00a:	58                   	pop    eax
c001e00b:	5a                   	pop    edx
c001e00c:	68 c4 65 02 c0       	push   0xc00265c4
c001e011:	55                   	push   ebp
c001e012:	e8 b9 07 ff ff       	call   c000e7d0 <DriverlessDevice::DriverlessDevice(char const*)>
c001e017:	59                   	pop    ecx
c001e018:	5e                   	pop    esi
c001e019:	55                   	push   ebp
c001e01a:	53                   	push   ebx
c001e01b:	e8 a6 04 ff ff       	call   c000e4c6 <Device::addChild(Device*)>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	b9 09 00 00 00       	mov    ecx,0x9
c001e028:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e02c:	fc                   	cld    
c001e02d:	89 fe                	mov    esi,edi
c001e02f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e031:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e035:	83 c4 1c             	add    esp,0x1c
c001e038:	5b                   	pop    ebx
c001e039:	5e                   	pop    esi
c001e03a:	5f                   	pop    edi
c001e03b:	5d                   	pop    ebp
c001e03c:	e9 97 03 ff ff       	jmp    c000e3d8 <Device::preOpenPCI(PCIDeviceInfo)>
c001e041:	83 c4 1c             	add    esp,0x1c
c001e044:	5b                   	pop    ebx
c001e045:	5e                   	pop    esi
c001e046:	5f                   	pop    edi
c001e047:	5d                   	pop    ebp
c001e048:	c3                   	ret    
c001e049:	90                   	nop

c001e04a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e04a:	55                   	push   ebp
c001e04b:	57                   	push   edi
c001e04c:	56                   	push   esi
c001e04d:	53                   	push   ebx
c001e04e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e054:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e05b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e062:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e066:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e06d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e071:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e078:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e07c:	68 de 65 02 c0       	push   0xc00265de
c001e081:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e085:	53                   	push   ebx
c001e086:	e8 ad 26 fe ff       	call   c0000738 <strcpy>
c001e08b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e090:	b2 64                	mov    dl,0x64
c001e092:	89 c8                	mov    eax,ecx
c001e094:	f6 f2                	div    dl
c001e096:	b2 0a                	mov    dl,0xa
c001e098:	83 c0 30             	add    eax,0x30
c001e09b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e09f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e0a3:	83 c4 10             	add    esp,0x10
c001e0a6:	89 c8                	mov    eax,ecx
c001e0a8:	f6 f2                	div    dl
c001e0aa:	89 c1                	mov    ecx,eax
c001e0ac:	0f b6 c0             	movzx  eax,al
c001e0af:	88 e9                	mov    cl,ch
c001e0b1:	f6 f2                	div    dl
c001e0b3:	88 e0                	mov    al,ah
c001e0b5:	83 c0 30             	add    eax,0x30
c001e0b8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e0bc:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e0c0:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0c3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e0c7:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e0cb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e0d0:	f6 f2                	div    dl
c001e0d2:	89 c1                	mov    ecx,eax
c001e0d4:	0f b6 c0             	movzx  eax,al
c001e0d7:	88 e9                	mov    cl,ch
c001e0d9:	f6 f2                	div    dl
c001e0db:	88 e0                	mov    al,ah
c001e0dd:	83 c0 30             	add    eax,0x30
c001e0e0:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e0e4:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e0e8:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0eb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e0ef:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e0f3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e0f8:	f6 f2                	div    dl
c001e0fa:	89 c1                	mov    ecx,eax
c001e0fc:	0f b6 c0             	movzx  eax,al
c001e0ff:	88 e9                	mov    cl,ch
c001e101:	f6 f2                	div    dl
c001e103:	88 e0                	mov    al,ah
c001e105:	83 c0 30             	add    eax,0x30
c001e108:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001e10f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e113:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e117:	8d 41 30             	lea    eax,[ecx+0x30]
c001e11a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e11e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e122:	74 29                	je     c001e14d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e124:	83 ec 0c             	sub    esp,0xc
c001e127:	53                   	push   ebx
c001e128:	e8 34 bc fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001e12d:	83 c4 10             	add    esp,0x10
c001e130:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001e137:	75 14                	jne    c001e14d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e139:	e4 60                	in     al,0x60
c001e13b:	3c 1c                	cmp    al,0x1c
c001e13d:	74 04                	je     c001e143 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e13f:	3c 5a                	cmp    al,0x5a
c001e141:	75 f6                	jne    c001e139 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e143:	e4 60                	in     al,0x60
c001e145:	3c 5a                	cmp    al,0x5a
c001e147:	74 fa                	je     c001e143 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e149:	3c 1c                	cmp    al,0x1c
c001e14b:	74 f6                	je     c001e143 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e14d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e152:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e157:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	6a 0c                	push   0xc
c001e161:	56                   	push   esi
c001e162:	53                   	push   ebx
c001e163:	57                   	push   edi
c001e164:	55                   	push   ebp
c001e165:	e8 68 f3 ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e16a:	83 c4 20             	add    esp,0x20
c001e16d:	56                   	push   esi
c001e16e:	53                   	push   ebx
c001e16f:	57                   	push   edi
c001e170:	55                   	push   ebp
c001e171:	e8 50 f4 ff ff       	call   c001d5c6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e176:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e17b:	56                   	push   esi
c001e17c:	53                   	push   ebx
c001e17d:	57                   	push   edi
c001e17e:	55                   	push   ebp
c001e17f:	e8 d8 f4 ff ff       	call   c001d65c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e184:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e188:	83 c4 14             	add    esp,0x14
c001e18b:	6a 3c                	push   0x3c
c001e18d:	56                   	push   esi
c001e18e:	53                   	push   ebx
c001e18f:	57                   	push   edi
c001e190:	55                   	push   ebp
c001e191:	e8 3c f3 ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e196:	0f b6 c4             	movzx  eax,ah
c001e199:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e19d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e1a1:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e1a8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e1ad:	83 c4 20             	add    esp,0x20
c001e1b0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1b6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e1bd:	0f 84 38 01 00 00    	je     c001e2fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e1c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e1cb:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e1d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1d4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1da:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e1e0:	0f 8e 15 01 00 00    	jle    c001e2fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e1e6:	50                   	push   eax
c001e1e7:	50                   	push   eax
c001e1e8:	68 f9 65 02 c0       	push   0xc00265f9
c001e1ed:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e1f1:	50                   	push   eax
c001e1f2:	e8 41 25 fe ff       	call   c0000738 <strcpy>
c001e1f7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e1fb:	b9 0a 00 00 00       	mov    ecx,0xa
c001e200:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e204:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e208:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e20c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e210:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e214:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e218:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e21c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e220:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e224:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e228:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e22c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e230:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e234:	83 c4 10             	add    esp,0x10
c001e237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e23b:	99                   	cdq    
c001e23c:	f7 f9                	idiv   ecx
c001e23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e242:	99                   	cdq    
c001e243:	f7 f9                	idiv   ecx
c001e245:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e249:	83 c2 30             	add    edx,0x30
c001e24c:	83 c0 30             	add    eax,0x30
c001e24f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e253:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e257:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001e25e:	74 2d                	je     c001e28d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e267:	50                   	push   eax
c001e268:	e8 f4 ba fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001e277:	75 14                	jne    c001e28d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e279:	e4 60                	in     al,0x60
c001e27b:	3c 5a                	cmp    al,0x5a
c001e27d:	74 04                	je     c001e283 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e27f:	3c 1c                	cmp    al,0x1c
c001e281:	75 f6                	jne    c001e279 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e283:	e4 60                	in     al,0x60
c001e285:	3c 5a                	cmp    al,0x5a
c001e287:	74 fa                	je     c001e283 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e289:	3c 1c                	cmp    al,0x1c
c001e28b:	74 f6                	je     c001e283 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e28d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e291:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e296:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e29c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e29f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e2a6:	39 d3                	cmp    ebx,edx
c001e2a8:	75 48                	jne    c001e2f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e2aa:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e2b1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e2b5:	75 3b                	jne    c001e2f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e2b7:	83 ec 0c             	sub    esp,0xc
c001e2ba:	68 28 66 02 c0       	push   0xc0026628
c001e2bf:	e8 4f ed fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001e2c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2c8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e2cd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2d3:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e2db:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e2df:	50                   	push   eax
c001e2e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e2e4:	53                   	push   ebx
c001e2e5:	68 4d 66 02 c0       	push   0xc002664d
c001e2ea:	e8 24 ed fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001e2ef:	83 c4 20             	add    esp,0x20
c001e2f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e2f6:	e9 d0 fe ff ff       	jmp    c001e1cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e2fb:	31 d2                	xor    edx,edx
c001e2fd:	83 ec 0c             	sub    esp,0xc
c001e300:	56                   	push   esi
c001e301:	53                   	push   ebx
c001e302:	57                   	push   edi
c001e303:	52                   	push   edx
c001e304:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e308:	55                   	push   ebp
c001e309:	e8 9a f3 ff ff       	call   c001d6a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e30e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e312:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e319:	42                   	inc    edx
c001e31a:	83 c4 20             	add    esp,0x20
c001e31d:	83 fa 06             	cmp    edx,0x6
c001e320:	75 db                	jne    c001e2fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e322:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e327:	83 ec 0c             	sub    esp,0xc
c001e32a:	86 e0                	xchg   al,ah
c001e32c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e334:	6a 02                	push   0x2
c001e336:	56                   	push   esi
c001e337:	53                   	push   ebx
c001e338:	57                   	push   edi
c001e339:	55                   	push   ebp
c001e33a:	e8 93 f1 ff ff       	call   c001d4d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e33f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e347:	83 c4 20             	add    esp,0x20
c001e34a:	56                   	push   esi
c001e34b:	53                   	push   ebx
c001e34c:	57                   	push   edi
c001e34d:	55                   	push   ebp
c001e34e:	e8 bd f2 ff ff       	call   c001d610 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e353:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e35a:	56                   	push   esi
c001e35b:	53                   	push   ebx
c001e35c:	57                   	push   edi
c001e35d:	55                   	push   ebp
c001e35e:	e8 17 f2 ff ff       	call   c001d57a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e363:	b9 09 00 00 00       	mov    ecx,0x9
c001e368:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e370:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e374:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e37b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e37f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e386:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e38a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e391:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e395:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	fc                   	cld    
c001e3a0:	89 e7                	mov    edi,esp
c001e3a2:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e3a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e3ab:	55                   	push   ebp
c001e3ac:	e8 59 f8 ff ff       	call   c001dc0a <PCI::foundDevice(PCIDeviceInfo)>
c001e3b1:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e3b7:	5b                   	pop    ebx
c001e3b8:	5e                   	pop    esi
c001e3b9:	5f                   	pop    edi
c001e3ba:	5d                   	pop    ebp
c001e3bb:	c3                   	ret    

c001e3bc <PCI::checkDevice(unsigned char, unsigned char)>:
c001e3bc:	55                   	push   ebp
c001e3bd:	57                   	push   edi
c001e3be:	56                   	push   esi
c001e3bf:	53                   	push   ebx
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e3c7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e3cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e3d1:	6a 00                	push   0x0
c001e3d3:	56                   	push   esi
c001e3d4:	57                   	push   edi
c001e3d5:	55                   	push   ebp
c001e3d6:	e8 9f f1 ff ff       	call   c001d57a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3db:	6a 00                	push   0x0
c001e3dd:	56                   	push   esi
c001e3de:	57                   	push   edi
c001e3df:	55                   	push   ebp
c001e3e0:	e8 65 fc ff ff       	call   c001e04a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3e5:	83 c4 20             	add    esp,0x20
c001e3e8:	6a 00                	push   0x0
c001e3ea:	56                   	push   esi
c001e3eb:	57                   	push   edi
c001e3ec:	55                   	push   ebp
c001e3ed:	e8 ac f1 ff ff       	call   c001d59e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e3f2:	83 c4 10             	add    esp,0x10
c001e3f5:	84 c0                	test   al,al
c001e3f7:	79 27                	jns    c001e420 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e3f9:	bb 01 00 00 00       	mov    ebx,0x1
c001e3fe:	53                   	push   ebx
c001e3ff:	56                   	push   esi
c001e400:	57                   	push   edi
c001e401:	55                   	push   ebp
c001e402:	e8 73 f1 ff ff       	call   c001d57a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	66 40                	inc    ax
c001e40c:	74 0c                	je     c001e41a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e40e:	53                   	push   ebx
c001e40f:	56                   	push   esi
c001e410:	57                   	push   edi
c001e411:	55                   	push   ebp
c001e412:	e8 33 fc ff ff       	call   c001e04a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	43                   	inc    ebx
c001e41b:	83 fb 08             	cmp    ebx,0x8
c001e41e:	75 de                	jne    c001e3fe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e420:	83 c4 0c             	add    esp,0xc
c001e423:	5b                   	pop    ebx
c001e424:	5e                   	pop    esi
c001e425:	5f                   	pop    edi
c001e426:	5d                   	pop    ebp
c001e427:	c3                   	ret    

c001e428 <PCI::detect()>:
c001e428:	56                   	push   esi
c001e429:	53                   	push   ebx
c001e42a:	53                   	push   ebx
c001e42b:	31 db                	xor    ebx,ebx
c001e42d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e431:	6a 00                	push   0x0
c001e433:	6a 00                	push   0x0
c001e435:	6a 00                	push   0x0
c001e437:	56                   	push   esi
c001e438:	e8 61 f1 ff ff       	call   c001d59e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	a8 80                	test   al,0x80
c001e442:	75 21                	jne    c001e465 <PCI::detect()+0x3d>
c001e444:	51                   	push   ecx
c001e445:	51                   	push   ecx
c001e446:	6a 00                	push   0x0
c001e448:	56                   	push   esi
c001e449:	e8 98 f7 ff ff       	call   c001dbe6 <PCI::checkBus(unsigned char)>
c001e44e:	83 c4 10             	add    esp,0x10
c001e451:	eb 24                	jmp    c001e477 <PCI::detect()+0x4f>
c001e453:	52                   	push   edx
c001e454:	52                   	push   edx
c001e455:	53                   	push   ebx
c001e456:	43                   	inc    ebx
c001e457:	56                   	push   esi
c001e458:	e8 89 f7 ff ff       	call   c001dbe6 <PCI::checkBus(unsigned char)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	83 fb 08             	cmp    ebx,0x8
c001e463:	74 12                	je     c001e477 <PCI::detect()+0x4f>
c001e465:	53                   	push   ebx
c001e466:	6a 00                	push   0x0
c001e468:	6a 00                	push   0x0
c001e46a:	56                   	push   esi
c001e46b:	e8 0a f1 ff ff       	call   c001d57a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e470:	83 c4 10             	add    esp,0x10
c001e473:	66 40                	inc    ax
c001e475:	74 dc                	je     c001e453 <PCI::detect()+0x2b>
c001e477:	58                   	pop    eax
c001e478:	5b                   	pop    ebx
c001e479:	5e                   	pop    esi
c001e47a:	c3                   	ret    
c001e47b:	90                   	nop

c001e47c <IDE::close(int, int, void*)>:
c001e47c:	83 c8 ff             	or     eax,0xffffffff
c001e47f:	c3                   	ret    

c001e480 <IDE::IDE()>:
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e487:	83 ec 08             	sub    esp,0x8
c001e48a:	68 94 66 02 c0       	push   0xc0026694
c001e48f:	50                   	push   eax
c001e490:	e8 df 03 ff ff       	call   c000e874 <HardDiskController::HardDiskController(char const*)>
c001e495:	83 c4 10             	add    esp,0x10
c001e498:	ba 40 67 02 c0       	mov    edx,0xc0026740
c001e49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a1:	89 10                	mov    DWORD PTR [eax],edx
c001e4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4ae:	90                   	nop
c001e4af:	83 c4 0c             	add    esp,0xc
c001e4b2:	c3                   	ret    
c001e4b3:	90                   	nop

c001e4b4 <IDE::prepareInterrupt(unsigned char)>:
c001e4b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e4b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4bd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e4c5:	c3                   	ret    

c001e4c6 <selectDrive(unsigned char, unsigned char)>:
c001e4c6:	c3                   	ret    
c001e4c7:	90                   	nop

c001e4c8 <IDE::getBase(unsigned char)>:
c001e4c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e4cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e4d9:	c3                   	ret    

c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e4da:	55                   	push   ebp
c001e4db:	57                   	push   edi
c001e4dc:	56                   	push   esi
c001e4dd:	53                   	push   ebx
c001e4de:	83 ec 1c             	sub    esp,0x1c
c001e4e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e4ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4f4:	80 f9 03             	cmp    cl,0x3
c001e4f7:	77 51                	ja     c001e54a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e4f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4fd:	0f b6 f2             	movzx  esi,dl
c001e500:	0f b6 db             	movzx  ebx,bl
c001e503:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e506:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e50a:	83 ca 80             	or     edx,0xffffff80
c001e50d:	0f b6 d2             	movzx  edx,dl
c001e510:	52                   	push   edx
c001e511:	6a 0c                	push   0xc
c001e513:	56                   	push   esi
c001e514:	57                   	push   edi
c001e515:	e8 c0 ff ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e51a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e51f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e523:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e527:	ee                   	out    dx,al
c001e528:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e52d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e531:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e535:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e539:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e541:	83 c4 2c             	add    esp,0x2c
c001e544:	5b                   	pop    ebx
c001e545:	5e                   	pop    esi
c001e546:	5f                   	pop    edi
c001e547:	5d                   	pop    ebp
c001e548:	eb 90                	jmp    c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e54a:	80 fb 07             	cmp    bl,0x7
c001e54d:	77 12                	ja     c001e561 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e54f:	0f b6 d2             	movzx  edx,dl
c001e552:	0f b6 db             	movzx  ebx,bl
c001e555:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e55d:	89 da                	mov    edx,ebx
c001e55f:	eb 2f                	jmp    c001e590 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e561:	80 fb 0d             	cmp    bl,0xd
c001e564:	77 13                	ja     c001e579 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e566:	0f b6 d2             	movzx  edx,dl
c001e569:	0f b6 db             	movzx  ebx,bl
c001e56c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e573:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e577:	eb 17                	jmp    c001e590 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e579:	80 fb 15             	cmp    bl,0x15
c001e57c:	77 13                	ja     c001e591 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e57e:	0f b6 d2             	movzx  edx,dl
c001e581:	0f b6 db             	movzx  ebx,bl
c001e584:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e58c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e590:	ee                   	out    dx,al
c001e591:	83 c4 1c             	add    esp,0x1c
c001e594:	5b                   	pop    ebx
c001e595:	5e                   	pop    esi
c001e596:	5f                   	pop    edi
c001e597:	5d                   	pop    ebp
c001e598:	c3                   	ret    
c001e599:	90                   	nop

c001e59a <IDE::read(unsigned char, unsigned char)>:
c001e59a:	55                   	push   ebp
c001e59b:	57                   	push   edi
c001e59c:	56                   	push   esi
c001e59d:	53                   	push   ebx
c001e59e:	83 ec 1c             	sub    esp,0x1c
c001e5a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e5a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e5a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e5ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e5b0:	3c 03                	cmp    al,0x3
c001e5b2:	77 43                	ja     c001e5f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e5b4:	0f b6 f2             	movzx  esi,dl
c001e5b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e5ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e5be:	83 c8 80             	or     eax,0xffffff80
c001e5c1:	0f b6 c0             	movzx  eax,al
c001e5c4:	50                   	push   eax
c001e5c5:	6a 0c                	push   0xc
c001e5c7:	56                   	push   esi
c001e5c8:	57                   	push   edi
c001e5c9:	e8 0c ff ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e5d3:	0f b6 c3             	movzx  eax,bl
c001e5d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e5da:	ec                   	in     al,dx
c001e5db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e5df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e5e4:	52                   	push   edx
c001e5e5:	6a 0c                	push   0xc
c001e5e7:	56                   	push   esi
c001e5e8:	57                   	push   edi
c001e5e9:	e8 ec fe ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5ee:	83 c4 20             	add    esp,0x20
c001e5f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e5f5:	eb 49                	jmp    c001e640 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e5f7:	80 fb 07             	cmp    bl,0x7
c001e5fa:	77 12                	ja     c001e60e <IDE::read(unsigned char, unsigned char)+0x74>
c001e5fc:	0f b6 d2             	movzx  edx,dl
c001e5ff:	0f b6 c3             	movzx  eax,bl
c001e602:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e60a:	89 c2                	mov    edx,eax
c001e60c:	eb 31                	jmp    c001e63f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e60e:	80 fb 0d             	cmp    bl,0xd
c001e611:	77 13                	ja     c001e626 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e613:	0f b6 d2             	movzx  edx,dl
c001e616:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e61d:	0f b6 d3             	movzx  edx,bl
c001e620:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e624:	eb 19                	jmp    c001e63f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e626:	31 c0                	xor    eax,eax
c001e628:	80 fb 15             	cmp    bl,0x15
c001e62b:	77 13                	ja     c001e640 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e62d:	0f b6 d2             	movzx  edx,dl
c001e630:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e638:	0f b6 d3             	movzx  edx,bl
c001e63b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e63f:	ec                   	in     al,dx
c001e640:	83 c4 1c             	add    esp,0x1c
c001e643:	5b                   	pop    ebx
c001e644:	5e                   	pop    esi
c001e645:	5f                   	pop    edi
c001e646:	5d                   	pop    ebp
c001e647:	c3                   	ret    

c001e648 <IDE::waitInterrupt(unsigned char)>:
c001e648:	55                   	push   ebp
c001e649:	57                   	push   edi
c001e64a:	56                   	push   esi
c001e64b:	53                   	push   ebx
c001e64c:	31 db                	xor    ebx,ebx
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e655:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e65a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e662:	89 e8                	mov    eax,ebp
c001e664:	84 c0                	test   al,al
c001e666:	75 30                	jne    c001e698 <IDE::waitInterrupt(unsigned char)+0x50>
c001e668:	50                   	push   eax
c001e669:	6a 0c                	push   0xc
c001e66b:	56                   	push   esi
c001e66c:	57                   	push   edi
c001e66d:	e8 28 ff ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001e672:	83 c4 10             	add    esp,0x10
c001e675:	a8 01                	test   al,0x1
c001e677:	75 27                	jne    c001e6a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001e679:	f6 c3 04             	test   bl,0x4
c001e67c:	75 12                	jne    c001e690 <IDE::waitInterrupt(unsigned char)+0x48>
c001e67e:	83 fb 32             	cmp    ebx,0x32
c001e681:	7e 0d                	jle    c001e690 <IDE::waitInterrupt(unsigned char)+0x48>
c001e683:	83 ec 0c             	sub    esp,0xc
c001e686:	6a 64                	push   0x64
c001e688:	e8 5b a0 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	83 fb 3c             	cmp    ebx,0x3c
c001e693:	74 0b                	je     c001e6a0 <IDE::waitInterrupt(unsigned char)+0x58>
c001e695:	43                   	inc    ebx
c001e696:	eb c2                	jmp    c001e65a <IDE::waitInterrupt(unsigned char)+0x12>
c001e698:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e6a0:	83 c4 0c             	add    esp,0xc
c001e6a3:	89 e8                	mov    eax,ebp
c001e6a5:	5b                   	pop    ebx
c001e6a6:	5e                   	pop    esi
c001e6a7:	5f                   	pop    edi
c001e6a8:	5d                   	pop    ebp
c001e6a9:	c3                   	ret    

c001e6aa <ideChannel0IRQHandler(regs*, void*)>:
c001e6aa:	83 ec 10             	sub    esp,0x10
c001e6ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e6b8:	6a 07                	push   0x7
c001e6ba:	6a 00                	push   0x0
c001e6bc:	50                   	push   eax
c001e6bd:	e8 d8 fe ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001e6c2:	83 c4 1c             	add    esp,0x1c
c001e6c5:	c3                   	ret    

c001e6c6 <ideChannel1IRQHandler(regs*, void*)>:
c001e6c6:	83 ec 10             	sub    esp,0x10
c001e6c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e6d4:	6a 07                	push   0x7
c001e6d6:	6a 01                	push   0x1
c001e6d8:	50                   	push   eax
c001e6d9:	e8 bc fe ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001e6de:	83 c4 1c             	add    esp,0x1c
c001e6e1:	c3                   	ret    

c001e6e2 <IDE::enableIRQs(unsigned char, bool)>:
c001e6e2:	57                   	push   edi
c001e6e3:	56                   	push   esi
c001e6e4:	be 04 00 00 00       	mov    esi,0x4
c001e6e9:	53                   	push   ebx
c001e6ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e6ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e6f8:	0f 94 c0             	sete   al
c001e6fb:	d1 e0                	shl    eax,1
c001e6fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e704:	0f b6 c0             	movzx  eax,al
c001e707:	50                   	push   eax
c001e708:	6a 0c                	push   0xc
c001e70a:	57                   	push   edi
c001e70b:	53                   	push   ebx
c001e70c:	e8 c9 fd ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	50                   	push   eax
c001e715:	6a 0c                	push   0xc
c001e717:	57                   	push   edi
c001e718:	53                   	push   ebx
c001e719:	e8 7c fe ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001e71e:	83 c4 10             	add    esp,0x10
c001e721:	4e                   	dec    esi
c001e722:	75 f0                	jne    c001e714 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e724:	5b                   	pop    ebx
c001e725:	5e                   	pop    esi
c001e726:	5f                   	pop    edi
c001e727:	c3                   	ret    

c001e728 <IDE::open(int, int, void*)>:
c001e728:	55                   	push   ebp
c001e729:	57                   	push   edi
c001e72a:	56                   	push   esi
c001e72b:	53                   	push   ebx
c001e72c:	83 ec 1c             	sub    esp,0x1c
c001e72f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e733:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e73c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e745:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e74c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e753:	0f 85 cb 02 00 00    	jne    c001ea24 <IDE::open(int, int, void*)+0x2fc>
c001e759:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e75f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e763:	83 e0 7f             	and    eax,0x7f
c001e766:	3c 05                	cmp    al,0x5
c001e768:	74 04                	je     c001e76e <IDE::open(int, int, void*)+0x46>
c001e76a:	3c 0f                	cmp    al,0xf
c001e76c:	75 32                	jne    c001e7a0 <IDE::open(int, int, void*)+0x78>
c001e76e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e774:	83 e0 fc             	and    eax,0xfffffffc
c001e777:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e77e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e784:	83 e0 fc             	and    eax,0xfffffffc
c001e787:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e78e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e794:	83 e0 fc             	and    eax,0xfffffffc
c001e797:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e79e:	eb 14                	jmp    c001e7b4 <IDE::open(int, int, void*)+0x8c>
c001e7a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e7aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e7b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e7bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e7c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7c6:	89 c6                	mov    esi,eax
c001e7c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e7cd:	c1 e6 10             	shl    esi,0x10
c001e7d0:	89 e8                	mov    eax,ebp
c001e7d2:	89 fa                	mov    edx,edi
c001e7d4:	c1 e0 0b             	shl    eax,0xb
c001e7d7:	09 f0                	or     eax,esi
c001e7d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e7e0:	c1 e6 08             	shl    esi,0x8
c001e7e3:	09 c6                	or     esi,eax
c001e7e5:	89 f0                	mov    eax,esi
c001e7e7:	0d 08 00 00 80       	or     eax,0x80000008
c001e7ec:	ef                   	out    dx,eax
c001e7ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e7f2:	89 ca                	mov    edx,ecx
c001e7f4:	ed                   	in     eax,dx
c001e7f5:	c1 e8 10             	shr    eax,0x10
c001e7f8:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7fd:	0f 84 f5 00 00 00    	je     c001e8f8 <IDE::open(int, int, void*)+0x1d0>
c001e803:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e809:	89 fa                	mov    edx,edi
c001e80b:	89 f0                	mov    eax,esi
c001e80d:	ef                   	out    dx,eax
c001e80e:	b0 fe                	mov    al,0xfe
c001e810:	89 ca                	mov    edx,ecx
c001e812:	ee                   	out    dx,al
c001e813:	89 f0                	mov    eax,esi
c001e815:	89 fa                	mov    edx,edi
c001e817:	ef                   	out    dx,eax
c001e818:	89 ca                	mov    edx,ecx
c001e81a:	ed                   	in     eax,dx
c001e81b:	3c fe                	cmp    al,0xfe
c001e81d:	0f 85 a9 00 00 00    	jne    c001e8cc <IDE::open(int, int, void*)+0x1a4>
c001e823:	8b 15 a8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ca8
c001e829:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e830:	74 33                	je     c001e865 <IDE::open(int, int, void*)+0x13d>
c001e832:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e838:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e83c:	40                   	inc    eax
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	0f b6 c0             	movzx  eax,al
c001e843:	50                   	push   eax
c001e844:	55                   	push   ebp
c001e845:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e849:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e84f:	51                   	push   ecx
c001e850:	e8 2b 3a ff ff       	call   c0012280 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e855:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e85a:	83 c4 1c             	add    esp,0x1c
c001e85d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e863:	eb 0a                	jmp    c001e86f <IDE::open(int, int, void*)+0x147>
c001e865:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e86f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e876:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e87d:	c1 e1 10             	shl    ecx,0x10
c001e880:	c1 e0 08             	shl    eax,0x8
c001e883:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e888:	09 c1                	or     ecx,eax
c001e88a:	89 fa                	mov    edx,edi
c001e88c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e893:	c1 e0 0b             	shl    eax,0xb
c001e896:	09 c1                	or     ecx,eax
c001e898:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e89e:	89 c8                	mov    eax,ecx
c001e8a0:	ef                   	out    dx,eax
c001e8a1:	be fc 0c 00 00       	mov    esi,0xcfc
c001e8a6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e8ac:	89 f2                	mov    edx,esi
c001e8ae:	ee                   	out    dx,al
c001e8af:	89 c8                	mov    eax,ecx
c001e8b1:	89 fa                	mov    edx,edi
c001e8b3:	ef                   	out    dx,eax
c001e8b4:	89 f2                	mov    edx,esi
c001e8b6:	ed                   	in     eax,dx
c001e8b7:	0f b6 c0             	movzx  eax,al
c001e8ba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e8c0:	74 46                	je     c001e908 <IDE::open(int, int, void*)+0x1e0>
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	68 ac 66 02 c0       	push   0xc00266ac
c001e8ca:	eb 34                	jmp    c001e900 <IDE::open(int, int, void*)+0x1d8>
c001e8cc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e8d5:	75 17                	jne    c001e8ee <IDE::open(int, int, void*)+0x1c6>
c001e8d7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e8dc:	74 07                	je     c001e8e5 <IDE::open(int, int, void*)+0x1bd>
c001e8de:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e8e3:	75 09                	jne    c001e8ee <IDE::open(int, int, void*)+0x1c6>
c001e8e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e8ec:	eb 1a                	jmp    c001e908 <IDE::open(int, int, void*)+0x1e0>
c001e8ee:	83 ec 0c             	sub    esp,0xc
c001e8f1:	68 b4 66 02 c0       	push   0xc00266b4
c001e8f6:	eb 08                	jmp    c001e900 <IDE::open(int, int, void*)+0x1d8>
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	68 e5 66 02 c0       	push   0xc00266e5
c001e900:	e8 6c 64 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e90f:	79 1a                	jns    c001e92b <IDE::open(int, int, void*)+0x203>
c001e911:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e917:	83 e0 fc             	and    eax,0xfffffffc
c001e91a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e921:	83 c0 08             	add    eax,0x8
c001e924:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e92b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e931:	89 c2                	mov    edx,eax
c001e933:	83 e2 0f             	and    edx,0xf
c001e936:	66 83 fa 08          	cmp    dx,0x8
c001e93a:	75 0a                	jne    c001e946 <IDE::open(int, int, void*)+0x21e>
c001e93c:	83 e8 02             	sub    eax,0x2
c001e93f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e946:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e94c:	89 c2                	mov    edx,eax
c001e94e:	83 e2 0f             	and    edx,0xf
c001e951:	66 83 fa 08          	cmp    dx,0x8
c001e955:	75 0a                	jne    c001e961 <IDE::open(int, int, void*)+0x239>
c001e957:	83 e8 02             	sub    eax,0x2
c001e95a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e961:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001e968:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e96f:	89 c8                	mov    eax,ecx
c001e971:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e974:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e978:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e97c:	8d 51 01             	lea    edx,[ecx+0x1]
c001e97f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e984:	0f b6 d2             	movzx  edx,dl
c001e987:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e98e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e991:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e995:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e999:	8d 48 02             	lea    ecx,[eax+0x2]
c001e99c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9a1:	0f b6 c9             	movzx  ecx,cl
c001e9a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e9aa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e9ad:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e9b1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e9b5:	8d 50 03             	lea    edx,[eax+0x3]
c001e9b8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e9bd:	0f b6 d2             	movzx  edx,dl
c001e9c0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e9c6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9c9:	83 c0 04             	add    eax,0x4
c001e9cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9d0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e9d4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e9da:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9df:	56                   	push   esi
c001e9e0:	56                   	push   esi
c001e9e1:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001e9e8:	50                   	push   eax
c001e9e9:	68 0f 67 02 c0       	push   0xc002670f
c001e9ee:	e8 20 e6 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001e9f3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e9fa:	83 c4 10             	add    esp,0x10
c001e9fd:	66 85 f6             	test   si,si
c001ea00:	74 5f                	je     c001ea61 <IDE::open(int, int, void*)+0x339>
c001ea02:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ea09:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea0c:	89 d0                	mov    eax,edx
c001ea0e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ea12:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ea16:	40                   	inc    eax
c001ea17:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ea1d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ea22:	eb 3d                	jmp    c001ea61 <IDE::open(int, int, void*)+0x339>
c001ea24:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ea2a:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ea31:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ea38:	66 05 06 02          	add    ax,0x206
c001ea3c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea43:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ea4a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea51:	66 05 06 02          	add    ax,0x206
c001ea55:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea5c:	e9 ca fe ff ff       	jmp    c001e92b <IDE::open(int, int, void*)+0x203>
c001ea61:	50                   	push   eax
c001ea62:	50                   	push   eax
c001ea63:	6a 00                	push   0x0
c001ea65:	53                   	push   ebx
c001ea66:	e8 49 fa ff ff       	call   c001e4b4 <IDE::prepareInterrupt(unsigned char)>
c001ea6b:	5a                   	pop    edx
c001ea6c:	59                   	pop    ecx
c001ea6d:	6a 01                	push   0x1
c001ea6f:	53                   	push   ebx
c001ea70:	e8 3f fa ff ff       	call   c001e4b4 <IDE::prepareInterrupt(unsigned char)>
c001ea75:	83 c4 0c             	add    esp,0xc
c001ea78:	6a 00                	push   0x0
c001ea7a:	6a 00                	push   0x0
c001ea7c:	53                   	push   ebx
c001ea7d:	e8 60 fc ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001ea82:	83 c4 0c             	add    esp,0xc
c001ea85:	6a 00                	push   0x0
c001ea87:	6a 01                	push   0x1
c001ea89:	53                   	push   ebx
c001ea8a:	e8 53 fc ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001ea8f:	83 c4 10             	add    esp,0x10
c001ea92:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ea99:	74 34                	je     c001eacf <IDE::open(int, int, void*)+0x3a7>
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	53                   	push   ebx
c001ea9f:	6a 01                	push   0x1
c001eaa1:	68 aa e6 01 c0       	push   0xc001e6aa
c001eaa6:	6a 0e                	push   0xe
c001eaa8:	53                   	push   ebx
c001eaa9:	e8 90 f9 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaae:	83 c4 14             	add    esp,0x14
c001eab1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eab7:	53                   	push   ebx
c001eab8:	6a 01                	push   0x1
c001eaba:	68 c6 e6 01 c0       	push   0xc001e6c6
c001eabf:	6a 0f                	push   0xf
c001eac1:	53                   	push   ebx
c001eac2:	e8 77 f9 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eac7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001eacd:	eb 38                	jmp    c001eb07 <IDE::open(int, int, void*)+0x3df>
c001eacf:	83 ec 0c             	sub    esp,0xc
c001ead2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001eadc:	53                   	push   ebx
c001eadd:	6a 00                	push   0x0
c001eadf:	68 aa e6 01 c0       	push   0xc001e6aa
c001eae4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001eaea:	53                   	push   ebx
c001eaeb:	e8 4e f9 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaf0:	83 c4 14             	add    esp,0x14
c001eaf3:	53                   	push   ebx
c001eaf4:	6a 00                	push   0x0
c001eaf6:	68 c6 e6 01 c0       	push   0xc001e6c6
c001eafb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eb01:	53                   	push   ebx
c001eb02:	e8 37 f9 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb07:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eb09:	83 c4 20             	add    esp,0x20
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	53                   	push   ebx
c001eb10:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eb13:	83 c4 0c             	add    esp,0xc
c001eb16:	6a 07                	push   0x7
c001eb18:	6a 00                	push   0x0
c001eb1a:	53                   	push   ebx
c001eb1b:	e8 7a fa ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001eb20:	83 c4 0c             	add    esp,0xc
c001eb23:	6a 07                	push   0x7
c001eb25:	6a 01                	push   0x1
c001eb27:	53                   	push   ebx
c001eb28:	e8 6d fa ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001eb2d:	83 c4 0c             	add    esp,0xc
c001eb30:	6a 01                	push   0x1
c001eb32:	6a 00                	push   0x0
c001eb34:	53                   	push   ebx
c001eb35:	e8 a8 fb ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001eb3a:	83 c4 0c             	add    esp,0xc
c001eb3d:	6a 01                	push   0x1
c001eb3f:	6a 01                	push   0x1
c001eb41:	53                   	push   ebx
c001eb42:	e8 9b fb ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001eb47:	83 c4 2c             	add    esp,0x2c
c001eb4a:	31 c0                	xor    eax,eax
c001eb4c:	5b                   	pop    ebx
c001eb4d:	5e                   	pop    esi
c001eb4e:	5f                   	pop    edi
c001eb4f:	5d                   	pop    ebp
c001eb50:	c3                   	ret    
c001eb51:	90                   	nop

c001eb52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001eb52:	55                   	push   ebp
c001eb53:	57                   	push   edi
c001eb54:	56                   	push   esi
c001eb55:	53                   	push   ebx
c001eb56:	83 ec 1c             	sub    esp,0x1c
c001eb59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb61:	8d 50 f8             	lea    edx,[eax-0x8]
c001eb64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb68:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eb6c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eb70:	80 fa 03             	cmp    dl,0x3
c001eb73:	77 5d                	ja     c001ebd2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001eb75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb7d:	0f b6 db             	movzx  ebx,bl
c001eb80:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eb83:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eb87:	83 ca 80             	or     edx,0xffffff80
c001eb8a:	0f b6 d2             	movzx  edx,dl
c001eb8d:	52                   	push   edx
c001eb8e:	6a 0c                	push   0xc
c001eb90:	53                   	push   ebx
c001eb91:	56                   	push   esi
c001eb92:	e8 43 f9 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb97:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eb9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eba0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eba4:	0f b6 c0             	movzx  eax,al
c001eba7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ebab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ebad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ebb2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ebb6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ebba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ebbe:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ebc6:	83 c4 2c             	add    esp,0x2c
c001ebc9:	5b                   	pop    ebx
c001ebca:	5e                   	pop    esi
c001ebcb:	5f                   	pop    edi
c001ebcc:	5d                   	pop    ebp
c001ebcd:	e9 08 f9 ff ff       	jmp    c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebd2:	3c 07                	cmp    al,0x7
c001ebd4:	77 10                	ja     c001ebe6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ebd6:	0f b6 db             	movzx  ebx,bl
c001ebd9:	0f b6 d0             	movzx  edx,al
c001ebdc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ebe4:	eb 2d                	jmp    c001ec13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ebe6:	3c 0d                	cmp    al,0xd
c001ebe8:	77 13                	ja     c001ebfd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ebea:	0f b6 db             	movzx  ebx,bl
c001ebed:	0f b6 c0             	movzx  eax,al
c001ebf0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ebf7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ebfb:	eb 16                	jmp    c001ec13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ebfd:	3c 15                	cmp    al,0x15
c001ebff:	77 14                	ja     c001ec15 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ec01:	0f b6 db             	movzx  ebx,bl
c001ec04:	0f b6 c0             	movzx  eax,al
c001ec07:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ec0f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ec13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ec15:	83 c4 1c             	add    esp,0x1c
c001ec18:	5b                   	pop    ebx
c001ec19:	5e                   	pop    esi
c001ec1a:	5f                   	pop    edi
c001ec1b:	5d                   	pop    ebp
c001ec1c:	c3                   	ret    
c001ec1d:	90                   	nop

c001ec1e <IDE::detect()>:
c001ec1e:	55                   	push   ebp
c001ec1f:	57                   	push   edi
c001ec20:	56                   	push   esi
c001ec21:	53                   	push   ebx
c001ec22:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec28:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ec2f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ec36:	0f 85 97 02 00 00    	jne    c001eed3 <IDE::detect()+0x2b5>
c001ec3c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ec43:	31 f6                	xor    esi,esi
c001ec45:	31 ed                	xor    ebp,ebp
c001ec47:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ec4f:	89 e8                	mov    eax,ebp
c001ec51:	c1 e0 06             	shl    eax,0x6
c001ec54:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ec5c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ec60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec64:	c1 e0 04             	shl    eax,0x4
c001ec67:	83 c8 a0             	or     eax,0xffffffa0
c001ec6a:	0f b6 c0             	movzx  eax,al
c001ec6d:	50                   	push   eax
c001ec6e:	6a 06                	push   0x6
c001ec70:	56                   	push   esi
c001ec71:	53                   	push   ebx
c001ec72:	e8 63 f8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec77:	83 c4 0c             	add    esp,0xc
c001ec7a:	6a 0c                	push   0xc
c001ec7c:	56                   	push   esi
c001ec7d:	53                   	push   ebx
c001ec7e:	e8 17 f9 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ec83:	83 c4 0c             	add    esp,0xc
c001ec86:	6a 0c                	push   0xc
c001ec88:	56                   	push   esi
c001ec89:	53                   	push   ebx
c001ec8a:	e8 0b f9 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ec8f:	83 c4 0c             	add    esp,0xc
c001ec92:	6a 0c                	push   0xc
c001ec94:	56                   	push   esi
c001ec95:	53                   	push   ebx
c001ec96:	e8 ff f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ec9b:	83 c4 0c             	add    esp,0xc
c001ec9e:	6a 0c                	push   0xc
c001eca0:	56                   	push   esi
c001eca1:	53                   	push   ebx
c001eca2:	e8 f3 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001eca7:	68 ec 00 00 00       	push   0xec
c001ecac:	6a 07                	push   0x7
c001ecae:	56                   	push   esi
c001ecaf:	53                   	push   ebx
c001ecb0:	e8 25 f8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb5:	83 c4 1c             	add    esp,0x1c
c001ecb8:	6a 0c                	push   0xc
c001ecba:	56                   	push   esi
c001ecbb:	53                   	push   ebx
c001ecbc:	e8 d9 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ecc1:	83 c4 0c             	add    esp,0xc
c001ecc4:	6a 0c                	push   0xc
c001ecc6:	56                   	push   esi
c001ecc7:	53                   	push   ebx
c001ecc8:	e8 cd f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001eccd:	83 c4 0c             	add    esp,0xc
c001ecd0:	6a 0c                	push   0xc
c001ecd2:	56                   	push   esi
c001ecd3:	53                   	push   ebx
c001ecd4:	e8 c1 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ecd9:	83 c4 0c             	add    esp,0xc
c001ecdc:	6a 0c                	push   0xc
c001ecde:	56                   	push   esi
c001ecdf:	53                   	push   ebx
c001ece0:	e8 b5 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ece5:	83 c4 0c             	add    esp,0xc
c001ece8:	6a 0c                	push   0xc
c001ecea:	56                   	push   esi
c001eceb:	53                   	push   ebx
c001ecec:	e8 a9 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ecf1:	83 c4 10             	add    esp,0x10
c001ecf4:	84 c0                	test   al,al
c001ecf6:	0f 84 5f 01 00 00    	je     c001ee5b <IDE::detect()+0x23d>
c001ecfc:	31 ff                	xor    edi,edi
c001ecfe:	50                   	push   eax
c001ecff:	6a 0c                	push   0xc
c001ed01:	56                   	push   esi
c001ed02:	53                   	push   ebx
c001ed03:	e8 92 f8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ed08:	83 c4 10             	add    esp,0x10
c001ed0b:	a8 01                	test   al,0x1
c001ed0d:	0f 85 69 01 00 00    	jne    c001ee7c <IDE::detect()+0x25e>
c001ed13:	84 c0                	test   al,al
c001ed15:	78 04                	js     c001ed1b <IDE::detect()+0xfd>
c001ed17:	a8 08                	test   al,0x8
c001ed19:	75 23                	jne    c001ed3e <IDE::detect()+0x120>
c001ed1b:	47                   	inc    edi
c001ed1c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ed22:	7e da                	jle    c001ecfe <IDE::detect()+0xe0>
c001ed24:	83 ec 0c             	sub    esp,0xc
c001ed27:	6a 32                	push   0x32
c001ed29:	e8 ba 99 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ed37:	75 c5                	jne    c001ecfe <IDE::detect()+0xe0>
c001ed39:	e9 3e 01 00 00       	jmp    c001ee7c <IDE::detect()+0x25e>
c001ed3e:	31 c9                	xor    ecx,ecx
c001ed40:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ed44:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	68 80 00 00 00       	push   0x80
c001ed50:	57                   	push   edi
c001ed51:	6a 00                	push   0x0
c001ed53:	56                   	push   esi
c001ed54:	53                   	push   ebx
c001ed55:	e8 f8 fd ff ff       	call   c001eb52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ed5a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ed5f:	89 e8                	mov    eax,ebp
c001ed61:	89 d1                	mov    ecx,edx
c001ed63:	c1 e0 06             	shl    eax,0x6
c001ed66:	01 d8                	add    eax,ebx
c001ed68:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ed6f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ed76:	89 f2                	mov    edx,esi
c001ed78:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ed7e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ed82:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ed88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ed8c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ed93:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ed9b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001eda2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001edaa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001edb0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001edb7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001edbd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001edc1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001edc5:	83 c4 20             	add    esp,0x20
c001edc8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001edcb:	83 c0 02             	add    eax,0x2
c001edce:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001edd4:	83 c7 02             	add    edi,0x2
c001edd7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001edda:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ede0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ede4:	75 e2                	jne    c001edc8 <IDE::detect()+0x1aa>
c001ede6:	89 e8                	mov    eax,ebp
c001ede8:	c1 e0 06             	shl    eax,0x6
c001edeb:	01 d8                	add    eax,ebx
c001eded:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001edf3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001edfa:	66 c1 ea 09          	shr    dx,0x9
c001edfe:	83 e2 01             	and    edx,0x1
c001ee01:	84 c9                	test   cl,cl
c001ee03:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ee09:	75 22                	jne    c001ee2d <IDE::detect()+0x20f>
c001ee0b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ee12:	74 46                	je     c001ee5a <IDE::detect()+0x23c>
c001ee14:	83 ec 0c             	sub    esp,0xc
c001ee17:	68 7c 01 00 00       	push   0x17c
c001ee1c:	e8 e6 ae fe ff       	call   c0009d07 <malloc>
c001ee21:	89 c7                	mov    edi,eax
c001ee23:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee26:	e8 49 06 00 00       	call   c001f474 <ATA::ATA()>
c001ee2b:	eb 17                	jmp    c001ee44 <IDE::detect()+0x226>
c001ee2d:	83 ec 0c             	sub    esp,0xc
c001ee30:	68 84 01 00 00       	push   0x184
c001ee35:	e8 cd ae fe ff       	call   c0009d07 <malloc>
c001ee3a:	89 c7                	mov    edi,eax
c001ee3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee3f:	e8 b8 0c 00 00       	call   c001fafc <ATAPI::ATAPI()>
c001ee44:	5a                   	pop    edx
c001ee45:	59                   	pop    ecx
c001ee46:	57                   	push   edi
c001ee47:	53                   	push   ebx
c001ee48:	e8 79 f6 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c001ee4d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee4f:	53                   	push   ebx
c001ee50:	55                   	push   ebp
c001ee51:	6a 00                	push   0x0
c001ee53:	57                   	push   edi
c001ee54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee57:	83 c4 20             	add    esp,0x20
c001ee5a:	45                   	inc    ebp
c001ee5b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ee60:	74 0d                	je     c001ee6f <IDE::detect()+0x251>
c001ee62:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ee6a:	e9 e0 fd ff ff       	jmp    c001ec4f <IDE::detect()+0x31>
c001ee6f:	4e                   	dec    esi
c001ee70:	74 61                	je     c001eed3 <IDE::detect()+0x2b5>
c001ee72:	be 01 00 00 00       	mov    esi,0x1
c001ee77:	e9 cb fd ff ff       	jmp    c001ec47 <IDE::detect()+0x29>
c001ee7c:	50                   	push   eax
c001ee7d:	6a 04                	push   0x4
c001ee7f:	56                   	push   esi
c001ee80:	53                   	push   ebx
c001ee81:	e8 14 f7 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ee86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee8a:	83 c4 0c             	add    esp,0xc
c001ee8d:	6a 05                	push   0x5
c001ee8f:	56                   	push   esi
c001ee90:	53                   	push   ebx
c001ee91:	e8 04 f7 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ee96:	83 c4 10             	add    esp,0x10
c001ee99:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ee9d:	80 fa 14             	cmp    dl,0x14
c001eea0:	75 04                	jne    c001eea6 <IDE::detect()+0x288>
c001eea2:	3c eb                	cmp    al,0xeb
c001eea4:	eb 07                	jmp    c001eead <IDE::detect()+0x28f>
c001eea6:	3c 96                	cmp    al,0x96
c001eea8:	75 b1                	jne    c001ee5b <IDE::detect()+0x23d>
c001eeaa:	80 fa 69             	cmp    dl,0x69
c001eead:	75 ac                	jne    c001ee5b <IDE::detect()+0x23d>
c001eeaf:	68 a1 00 00 00       	push   0xa1
c001eeb4:	6a 07                	push   0x7
c001eeb6:	56                   	push   esi
c001eeb7:	53                   	push   ebx
c001eeb8:	e8 1d f6 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eebd:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001eec4:	e8 1f 98 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001eec9:	83 c4 10             	add    esp,0x10
c001eecc:	b1 01                	mov    cl,0x1
c001eece:	e9 6d fe ff ff       	jmp    c001ed40 <IDE::detect()+0x122>
c001eed3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001eed9:	5b                   	pop    ebx
c001eeda:	5e                   	pop    esi
c001eedb:	5f                   	pop    edi
c001eedc:	5d                   	pop    ebp
c001eedd:	c3                   	ret    

c001eede <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001eede:	55                   	push   ebp
c001eedf:	57                   	push   edi
c001eee0:	56                   	push   esi
c001eee1:	53                   	push   ebx
c001eee2:	83 ec 1c             	sub    esp,0x1c
c001eee5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eee9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eeed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eef1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001eef5:	88 c3                	mov    bl,al
c001eef7:	84 c0                	test   al,al
c001eef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eefd:	0f 84 81 00 00 00    	je     c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef03:	83 ec 0c             	sub    esp,0xc
c001ef06:	68 2b 67 02 c0       	push   0xc002672b
c001ef0b:	e8 03 e1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001ef10:	83 c4 10             	add    esp,0x10
c001ef13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef17:	3c 01                	cmp    al,0x1
c001ef19:	74 63                	je     c001ef7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ef1b:	3c 02                	cmp    al,0x2
c001ef1d:	75 53                	jne    c001ef72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ef1f:	d1 e6                	shl    esi,1
c001ef21:	09 ee                	or     esi,ebp
c001ef23:	50                   	push   eax
c001ef24:	89 f0                	mov    eax,esi
c001ef26:	6a 01                	push   0x1
c001ef28:	0f b6 f0             	movzx  esi,al
c001ef2b:	c1 e6 06             	shl    esi,0x6
c001ef2e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ef36:	50                   	push   eax
c001ef37:	57                   	push   edi
c001ef38:	e8 5d f6 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	a8 01                	test   al,0x1
c001ef42:	74 02                	je     c001ef46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ef44:	b3 07                	mov    bl,0x7
c001ef46:	a8 02                	test   al,0x2
c001ef48:	74 02                	je     c001ef4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ef4a:	b3 03                	mov    bl,0x3
c001ef4c:	a8 04                	test   al,0x4
c001ef4e:	74 02                	je     c001ef52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ef50:	b3 14                	mov    bl,0x14
c001ef52:	a8 08                	test   al,0x8
c001ef54:	74 02                	je     c001ef58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ef56:	b3 03                	mov    bl,0x3
c001ef58:	a8 10                	test   al,0x10
c001ef5a:	74 02                	je     c001ef5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ef5c:	b3 15                	mov    bl,0x15
c001ef5e:	a8 20                	test   al,0x20
c001ef60:	74 02                	je     c001ef64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ef62:	b3 03                	mov    bl,0x3
c001ef64:	a8 40                	test   al,0x40
c001ef66:	74 02                	je     c001ef6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ef68:	b3 16                	mov    bl,0x16
c001ef6a:	84 c0                	test   al,al
c001ef6c:	79 16                	jns    c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef6e:	b3 0d                	mov    bl,0xd
c001ef70:	eb 12                	jmp    c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef72:	3c 03                	cmp    al,0x3
c001ef74:	74 0c                	je     c001ef82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ef76:	3c 04                	cmp    al,0x4
c001ef78:	75 0a                	jne    c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef7a:	b3 08                	mov    bl,0x8
c001ef7c:	eb 06                	jmp    c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef7e:	b3 13                	mov    bl,0x13
c001ef80:	eb 02                	jmp    c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef82:	b3 17                	mov    bl,0x17
c001ef84:	83 c4 1c             	add    esp,0x1c
c001ef87:	88 d8                	mov    al,bl
c001ef89:	5b                   	pop    ebx
c001ef8a:	5e                   	pop    esi
c001ef8b:	5f                   	pop    edi
c001ef8c:	5d                   	pop    ebp
c001ef8d:	c3                   	ret    

c001ef8e <IDE::polling(unsigned char, unsigned int)>:
c001ef8e:	57                   	push   edi
c001ef8f:	56                   	push   esi
c001ef90:	53                   	push   ebx
c001ef91:	bb 04 00 00 00       	mov    ebx,0x4
c001ef96:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef9a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef9f:	52                   	push   edx
c001efa0:	6a 0c                	push   0xc
c001efa2:	56                   	push   esi
c001efa3:	57                   	push   edi
c001efa4:	e8 f1 f5 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	4b                   	dec    ebx
c001efad:	75 f0                	jne    c001ef9f <IDE::polling(unsigned char, unsigned int)+0x11>
c001efaf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001efb4:	50                   	push   eax
c001efb5:	6a 0c                	push   0xc
c001efb7:	56                   	push   esi
c001efb8:	57                   	push   edi
c001efb9:	e8 dc f5 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001efbe:	83 c4 10             	add    esp,0x10
c001efc1:	a8 01                	test   al,0x1
c001efc3:	75 17                	jne    c001efdc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001efc5:	a8 20                	test   al,0x20
c001efc7:	75 0f                	jne    c001efd8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001efc9:	4b                   	dec    ebx
c001efca:	74 10                	je     c001efdc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001efcc:	84 c0                	test   al,al
c001efce:	78 e4                	js     c001efb4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001efd0:	a8 08                	test   al,0x8
c001efd2:	74 e0                	je     c001efb4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001efd4:	31 c0                	xor    eax,eax
c001efd6:	eb 06                	jmp    c001efde <IDE::polling(unsigned char, unsigned int)+0x50>
c001efd8:	b0 01                	mov    al,0x1
c001efda:	eb 02                	jmp    c001efde <IDE::polling(unsigned char, unsigned int)+0x50>
c001efdc:	b0 02                	mov    al,0x2
c001efde:	5b                   	pop    ebx
c001efdf:	5e                   	pop    esi
c001efe0:	5f                   	pop    edi
c001efe1:	c3                   	ret    

c001efe2 <SATABus::close(int, int, void*)>:
c001efe2:	31 c0                	xor    eax,eax
c001efe4:	c3                   	ret    
c001efe5:	90                   	nop

c001efe6 <SATABus::detect()>:
c001efe6:	c3                   	ret    
c001efe7:	90                   	nop

c001efe8 <SATABus::SATABus()>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	83 ec 08             	sub    esp,0x8
c001eff2:	68 64 67 02 c0       	push   0xc0026764
c001eff7:	50                   	push   eax
c001eff8:	e8 77 f8 fe ff       	call   c000e874 <HardDiskController::HardDiskController(char const*)>
c001effd:	83 c4 10             	add    esp,0x10
c001f000:	ba 0c 68 02 c0       	mov    edx,0xc002680c
c001f005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f009:	89 10                	mov    DWORD PTR [eax],edx
c001f00b:	83 ec 0c             	sub    esp,0xc
c001f00e:	6a 50                	push   0x50
c001f010:	e8 94 b4 fe ff       	call   c000a4a9 <Phys::allocateContiguousPages(int)>
c001f015:	83 c4 10             	add    esp,0x10
c001f018:	89 c2                	mov    edx,eax
c001f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	6a 50                	push   0x50
c001f029:	e8 8b cc fe ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	89 c2                	mov    edx,eax
c001f033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f037:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f03d:	a1 d4 7d 02 c0       	mov    eax,ds:0xc0027dd4
c001f042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f046:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f04c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f050:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	6a 03                	push   0x3
c001f05b:	6a 50                	push   0x50
c001f05d:	51                   	push   ecx
c001f05e:	52                   	push   edx
c001f05f:	50                   	push   eax
c001f060:	e8 b5 d5 fe ff       	call   c000c61a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f065:	83 c4 20             	add    esp,0x20
c001f068:	90                   	nop
c001f069:	83 c4 0c             	add    esp,0xc
c001f06c:	c3                   	ret    
c001f06d:	90                   	nop

c001f06e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f06e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f072:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f075:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f078:	09 c2                	or     edx,eax
c001f07a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f07e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f084:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f086:	31 c0                	xor    eax,eax
c001f088:	c1 e9 08             	shr    ecx,0x8
c001f08b:	83 e1 0f             	and    ecx,0xf
c001f08e:	39 c8                	cmp    eax,ecx
c001f090:	74 0a                	je     c001f09c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f092:	f6 c2 01             	test   dl,0x1
c001f095:	74 08                	je     c001f09f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f097:	d1 ea                	shr    edx,1
c001f099:	40                   	inc    eax
c001f09a:	eb f2                	jmp    c001f08e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f09c:	83 c8 ff             	or     eax,0xffffffff
c001f09f:	c3                   	ret    

c001f0a0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f0a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0a4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f0a7:	89 c2                	mov    edx,eax
c001f0a9:	c1 ea 08             	shr    edx,0x8
c001f0ac:	83 e2 0f             	and    edx,0xf
c001f0af:	fe ca                	dec    dl
c001f0b1:	75 31                	jne    c001f0e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0b3:	83 e0 0f             	and    eax,0xf
c001f0b6:	3c 03                	cmp    al,0x3
c001f0b8:	75 2a                	jne    c001f0e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0ba:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f0bd:	b8 02 00 00 00       	mov    eax,0x2
c001f0c2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f0c8:	74 1c                	je     c001f0e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0ca:	b8 04 00 00 00       	mov    eax,0x4
c001f0cf:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f0d5:	74 0f                	je     c001f0e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0d7:	31 c0                	xor    eax,eax
c001f0d9:	83 fa 03             	cmp    edx,0x3
c001f0dc:	0f 94 c0             	sete   al
c001f0df:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f0e3:	c3                   	ret    
c001f0e4:	31 c0                	xor    eax,eax
c001f0e6:	c3                   	ret    
c001f0e7:	90                   	nop

c001f0e8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0ef:	0f ba e2 0f          	bt     edx,0xf
c001f0f3:	72 f7                	jb     c001f0ec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f0f5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0f8:	83 ca 10             	or     edx,0x10
c001f0fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f101:	83 ca 01             	or     edx,0x1
c001f104:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f107:	c3                   	ret    

c001f108 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f10c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f10f:	83 e2 fe             	and    edx,0xfffffffe
c001f112:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f115:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f118:	83 e2 ef             	and    edx,0xffffffef
c001f11b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f11e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f121:	0f ba e2 0e          	bt     edx,0xe
c001f125:	72 f7                	jb     c001f11e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f127:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f12a:	0f ba e2 0f          	bt     edx,0xf
c001f12e:	72 ee                	jb     c001f11e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f130:	c3                   	ret    
c001f131:	90                   	nop

c001f132 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f132:	55                   	push   ebp
c001f133:	57                   	push   edi
c001f134:	56                   	push   esi
c001f135:	53                   	push   ebx
c001f136:	83 ec 1c             	sub    esp,0x1c
c001f139:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f13d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f141:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f145:	53                   	push   ebx
c001f146:	89 fd                	mov    ebp,edi
c001f148:	56                   	push   esi
c001f149:	c1 e5 0a             	shl    ebp,0xa
c001f14c:	e8 b7 ff ff ff       	call   c001f108 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f15a:	01 e8                	add    eax,ebp
c001f15c:	89 03                	mov    DWORD PTR [ebx],eax
c001f15e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f160:	68 00 04 00 00       	push   0x400
c001f165:	6a 00                	push   0x0
c001f167:	50                   	push   eax
c001f168:	e8 0f 15 fe ff       	call   c000067c <memset>
c001f16d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f173:	89 fa                	mov    edx,edi
c001f175:	01 e8                	add    eax,ebp
c001f177:	c1 e7 0d             	shl    edi,0xd
c001f17a:	89 03                	mov    DWORD PTR [ebx],eax
c001f17c:	c1 e2 08             	shl    edx,0x8
c001f17f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f186:	81 c2 00 80 00 00    	add    edx,0x8000
c001f18c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f190:	89 d0                	mov    eax,edx
c001f192:	83 c4 1c             	add    esp,0x1c
c001f195:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f19b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f19e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f1a1:	68 00 01 00 00       	push   0x100
c001f1a6:	6a 00                	push   0x0
c001f1a8:	50                   	push   eax
c001f1a9:	e8 ce 14 fe ff       	call   c000067c <memset>
c001f1ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f1b2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f1b8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f1be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f1c2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f1cf:	31 ff                	xor    edi,edi
c001f1d1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f1d7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f1dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1e1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f1e7:	83 c5 20             	add    ebp,0x20
c001f1ea:	01 f8                	add    eax,edi
c001f1ec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1ef:	52                   	push   edx
c001f1f0:	68 00 01 00 00       	push   0x100
c001f1f5:	6a 00                	push   0x0
c001f1f7:	50                   	push   eax
c001f1f8:	e8 7f 14 fe ff       	call   c000067c <memset>
c001f1fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f20a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f211:	01 f8                	add    eax,edi
c001f213:	81 c7 00 01 00 00    	add    edi,0x100
c001f219:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f21c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f222:	75 b3                	jne    c001f1d7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f224:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f228:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f22c:	83 c4 1c             	add    esp,0x1c
c001f22f:	5b                   	pop    ebx
c001f230:	5e                   	pop    esi
c001f231:	5f                   	pop    edi
c001f232:	5d                   	pop    ebp
c001f233:	e9 b0 fe ff ff       	jmp    c001f0e8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f238 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f238:	55                   	push   ebp
c001f239:	57                   	push   edi
c001f23a:	56                   	push   esi
c001f23b:	53                   	push   ebx
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f243:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f24a:	74 2d                	je     c001f279 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	68 88 67 02 c0       	push   0xc0026788
c001f254:	e8 08 ab fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001f259:	83 c4 10             	add    esp,0x10
c001f25c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f263:	75 14                	jne    c001f279 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f265:	e4 60                	in     al,0x60
c001f267:	3c 1c                	cmp    al,0x1c
c001f269:	74 04                	je     c001f26f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f26b:	3c 5a                	cmp    al,0x5a
c001f26d:	75 f6                	jne    c001f265 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f26f:	e4 60                	in     al,0x60
c001f271:	3c 5a                	cmp    al,0x5a
c001f273:	74 fa                	je     c001f26f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f275:	3c 1c                	cmp    al,0x1c
c001f277:	74 f6                	je     c001f26f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f279:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f27d:	31 db                	xor    ebx,ebx
c001f27f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f282:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f288:	0f 84 78 01 00 00    	je     c001f406 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f28e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f292:	89 d8                	mov    eax,ebx
c001f294:	c1 e0 07             	shl    eax,0x7
c001f297:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f29e:	50                   	push   eax
c001f29f:	50                   	push   eax
c001f2a0:	57                   	push   edi
c001f2a1:	56                   	push   esi
c001f2a2:	e8 f9 fd ff ff       	call   c001f0a0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f2a7:	83 c4 10             	add    esp,0x10
c001f2aa:	83 f8 01             	cmp    eax,0x1
c001f2ad:	0f 85 19 01 00 00    	jne    c001f3cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f2b3:	50                   	push   eax
c001f2b4:	53                   	push   ebx
c001f2b5:	57                   	push   edi
c001f2b6:	56                   	push   esi
c001f2b7:	e8 76 fe ff ff       	call   c001f132 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2bc:	83 c4 10             	add    esp,0x10
c001f2bf:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f2c6:	74 2d                	je     c001f2f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	68 9d 67 02 c0       	push   0xc002679d
c001f2d0:	e8 8c aa fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001f2d5:	83 c4 10             	add    esp,0x10
c001f2d8:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f2df:	75 14                	jne    c001f2f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f2e1:	e4 60                	in     al,0x60
c001f2e3:	3c 1c                	cmp    al,0x1c
c001f2e5:	74 04                	je     c001f2eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2e7:	3c 5a                	cmp    al,0x5a
c001f2e9:	75 f6                	jne    c001f2e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f2eb:	e4 60                	in     al,0x60
c001f2ed:	3c 5a                	cmp    al,0x5a
c001f2ef:	74 fa                	je     c001f2eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2f1:	3c 1c                	cmp    al,0x1c
c001f2f3:	74 f6                	je     c001f2eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2f5:	83 ec 0c             	sub    esp,0xc
c001f2f8:	68 7c 01 00 00       	push   0x17c
c001f2fd:	e8 05 aa fe ff       	call   c0009d07 <malloc>
c001f302:	89 04 24             	mov    DWORD PTR [esp],eax
c001f305:	89 c7                	mov    edi,eax
c001f307:	e8 28 10 00 00       	call   c0020334 <SATA::SATA()>
c001f30c:	83 c4 10             	add    esp,0x10
c001f30f:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f316:	74 2d                	je     c001f345 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f318:	83 ec 0c             	sub    esp,0xc
c001f31b:	68 b2 67 02 c0       	push   0xc00267b2
c001f320:	e8 3c aa fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001f325:	83 c4 10             	add    esp,0x10
c001f328:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f32f:	75 14                	jne    c001f345 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f331:	e4 60                	in     al,0x60
c001f333:	3c 5a                	cmp    al,0x5a
c001f335:	74 04                	je     c001f33b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f337:	3c 1c                	cmp    al,0x1c
c001f339:	75 f6                	jne    c001f331 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f33b:	e4 60                	in     al,0x60
c001f33d:	3c 5a                	cmp    al,0x5a
c001f33f:	74 fa                	je     c001f33b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f341:	3c 1c                	cmp    al,0x1c
c001f343:	74 f6                	je     c001f33b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f345:	50                   	push   eax
c001f346:	50                   	push   eax
c001f347:	57                   	push   edi
c001f348:	56                   	push   esi
c001f349:	e8 78 f1 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c001f34e:	83 c4 10             	add    esp,0x10
c001f351:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f358:	74 2d                	je     c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	68 c7 67 02 c0       	push   0xc00267c7
c001f362:	e8 fa a9 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f371:	75 14                	jne    c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f373:	e4 60                	in     al,0x60
c001f375:	3c 1c                	cmp    al,0x1c
c001f377:	74 04                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f379:	3c 5a                	cmp    al,0x5a
c001f37b:	75 f6                	jne    c001f373 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f37d:	e4 60                	in     al,0x60
c001f37f:	3c 5a                	cmp    al,0x5a
c001f381:	74 fa                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f383:	3c 1c                	cmp    al,0x1c
c001f385:	74 f6                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f387:	8b 07                	mov    eax,DWORD PTR [edi]
c001f389:	56                   	push   esi
c001f38a:	6a 00                	push   0x0
c001f38c:	53                   	push   ebx
c001f38d:	57                   	push   edi
c001f38e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f391:	83 c4 10             	add    esp,0x10
c001f394:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f39b:	74 69                	je     c001f406 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f39d:	83 ec 0c             	sub    esp,0xc
c001f3a0:	68 dc 67 02 c0       	push   0xc00267dc
c001f3a5:	e8 b7 a9 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c001f3aa:	83 c4 10             	add    esp,0x10
c001f3ad:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f3b4:	75 50                	jne    c001f406 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3b6:	e4 60                	in     al,0x60
c001f3b8:	3c 1c                	cmp    al,0x1c
c001f3ba:	74 04                	je     c001f3c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3bc:	3c 5a                	cmp    al,0x5a
c001f3be:	75 f6                	jne    c001f3b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f3c0:	e4 60                	in     al,0x60
c001f3c2:	3c 5a                	cmp    al,0x5a
c001f3c4:	74 fa                	je     c001f3c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3c6:	3c 1c                	cmp    al,0x1c
c001f3c8:	74 f6                	je     c001f3c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3ca:	eb 3a                	jmp    c001f406 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3cc:	83 f8 04             	cmp    eax,0x4
c001f3cf:	75 35                	jne    c001f406 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3d1:	50                   	push   eax
c001f3d2:	53                   	push   ebx
c001f3d3:	57                   	push   edi
c001f3d4:	56                   	push   esi
c001f3d5:	e8 58 fd ff ff       	call   c001f132 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3da:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f3e1:	e8 21 a9 fe ff       	call   c0009d07 <malloc>
c001f3e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3e9:	89 c7                	mov    edi,eax
c001f3eb:	e8 ba 17 00 00       	call   c0020baa <SATAPI::SATAPI()>
c001f3f0:	5a                   	pop    edx
c001f3f1:	59                   	pop    ecx
c001f3f2:	57                   	push   edi
c001f3f3:	56                   	push   esi
c001f3f4:	e8 cd f0 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c001f3f9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f3fb:	56                   	push   esi
c001f3fc:	6a 00                	push   0x0
c001f3fe:	53                   	push   ebx
c001f3ff:	57                   	push   edi
c001f400:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f403:	83 c4 20             	add    esp,0x20
c001f406:	d1 ed                	shr    ebp,1
c001f408:	43                   	inc    ebx
c001f409:	83 fb 20             	cmp    ebx,0x20
c001f40c:	0f 85 70 fe ff ff    	jne    c001f282 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f412:	83 c4 0c             	add    esp,0xc
c001f415:	5b                   	pop    ebx
c001f416:	5e                   	pop    esi
c001f417:	5f                   	pop    edi
c001f418:	5d                   	pop    ebp
c001f419:	c3                   	ret    

c001f41a <SATABus::open(int, int, void*)>:
c001f41a:	53                   	push   ebx
c001f41b:	83 ec 10             	sub    esp,0x10
c001f41e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f422:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f428:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f42e:	50                   	push   eax
c001f42f:	68 f1 67 02 c0       	push   0xc00267f1
c001f434:	e8 da db fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f439:	58                   	pop    eax
c001f43a:	5a                   	pop    edx
c001f43b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f441:	53                   	push   ebx
c001f442:	e8 f1 fd ff ff       	call   c001f238 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f447:	31 c0                	xor    eax,eax
c001f449:	83 c4 18             	add    esp,0x18
c001f44c:	5b                   	pop    ebx
c001f44d:	c3                   	ret    

c001f44e <ATA::close(int, int, void*)>:
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f455:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f45b:	85 c0                	test   eax,eax
c001f45d:	74 0c                	je     c001f46b <ATA::close(int, int, void*)+0x1d>
c001f45f:	83 ec 0c             	sub    esp,0xc
c001f462:	8b 10                	mov    edx,DWORD PTR [eax]
c001f464:	50                   	push   eax
c001f465:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f468:	83 c4 10             	add    esp,0x10
c001f46b:	31 c0                	xor    eax,eax
c001f46d:	83 c4 0c             	add    esp,0xc
c001f470:	c3                   	ret    
c001f471:	90                   	nop

c001f472 <ATA::powerSaving(PowerSavingLevel)>:
c001f472:	c3                   	ret    
c001f473:	90                   	nop

c001f474 <ATA::ATA()>:
c001f474:	83 ec 0c             	sub    esp,0xc
c001f477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47b:	83 ec 04             	sub    esp,0x4
c001f47e:	68 00 02 00 00       	push   0x200
c001f483:	68 8f 69 02 c0       	push   0xc002698f
c001f488:	50                   	push   eax
c001f489:	e8 70 f4 fe ff       	call   c000e8fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f48e:	83 c4 10             	add    esp,0x10
c001f491:	ba 84 68 02 c0       	mov    edx,0xc0026884
c001f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49a:	89 10                	mov    DWORD PTR [eax],edx
c001f49c:	90                   	nop
c001f49d:	83 c4 0c             	add    esp,0xc
c001f4a0:	c3                   	ret    
c001f4a1:	90                   	nop

c001f4a2 <ATA::flush(bool)>:
c001f4a2:	53                   	push   ebx
c001f4a3:	83 ec 08             	sub    esp,0x8
c001f4a6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f4ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f4af:	19 c0                	sbb    eax,eax
c001f4b1:	83 e0 fd             	and    eax,0xfffffffd
c001f4b4:	05 ea 00 00 00       	add    eax,0xea
c001f4b9:	50                   	push   eax
c001f4ba:	6a 07                	push   0x7
c001f4bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4c3:	50                   	push   eax
c001f4c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4ca:	e8 0b f0 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4cf:	83 c4 0c             	add    esp,0xc
c001f4d2:	6a 00                	push   0x0
c001f4d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4db:	50                   	push   eax
c001f4dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4e2:	e8 a7 fa ff ff       	call   c001ef8e <IDE::polling(unsigned char, unsigned int)>
c001f4e7:	83 c4 18             	add    esp,0x18
c001f4ea:	5b                   	pop    ebx
c001f4eb:	c3                   	ret    

c001f4ec <ATA::readyForCommand()>:
c001f4ec:	56                   	push   esi
c001f4ed:	53                   	push   ebx
c001f4ee:	53                   	push   ebx
c001f4ef:	31 db                	xor    ebx,ebx
c001f4f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f4f5:	51                   	push   ecx
c001f4f6:	6a 0c                	push   0xc
c001f4f8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f4ff:	50                   	push   eax
c001f500:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f506:	e8 8f f0 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001f50b:	83 c4 10             	add    esp,0x10
c001f50e:	a8 88                	test   al,0x88
c001f510:	74 1f                	je     c001f531 <ATA::readyForCommand()+0x45>
c001f512:	43                   	inc    ebx
c001f513:	83 fb 63             	cmp    ebx,0x63
c001f516:	7e dd                	jle    c001f4f5 <ATA::readyForCommand()+0x9>
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	6a 0a                	push   0xa
c001f51d:	e8 c6 91 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001f522:	83 c4 10             	add    esp,0x10
c001f525:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f52b:	75 c8                	jne    c001f4f5 <ATA::readyForCommand()+0x9>
c001f52d:	31 c0                	xor    eax,eax
c001f52f:	eb 02                	jmp    c001f533 <ATA::readyForCommand()+0x47>
c001f531:	b0 01                	mov    al,0x1
c001f533:	5a                   	pop    edx
c001f534:	5b                   	pop    ebx
c001f535:	5e                   	pop    esi
c001f536:	c3                   	ret    
c001f537:	90                   	nop

c001f538 <ATA::access(unsigned long long, int, void*, bool)>:
c001f538:	55                   	push   ebp
c001f539:	57                   	push   edi
c001f53a:	56                   	push   esi
c001f53b:	53                   	push   ebx
c001f53c:	83 ec 38             	sub    esp,0x38
c001f53f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f543:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f547:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f54b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f54f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f553:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f557:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f55b:	68 30 68 02 c0       	push   0xc0026830
c001f560:	e8 ae da fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f565:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f56b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f56f:	83 c4 10             	add    esp,0x10
c001f572:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f578:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f57c:	c1 e0 06             	shl    eax,0x6
c001f57f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f587:	74 5d                	je     c001f5e6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f589:	89 fa                	mov    edx,edi
c001f58b:	89 f0                	mov    eax,esi
c001f58d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f591:	c1 ea 1c             	shr    edx,0x1c
c001f594:	89 d1                	mov    ecx,edx
c001f596:	09 c1                	or     ecx,eax
c001f598:	74 25                	je     c001f5bf <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f59a:	31 ed                	xor    ebp,ebp
c001f59c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f5a3:	89 fa                	mov    edx,edi
c001f5a5:	89 f0                	mov    eax,esi
c001f5a7:	0f ad d0             	shrd   eax,edx,cl
c001f5aa:	d3 ea                	shr    edx,cl
c001f5ac:	f6 c1 20             	test   cl,0x20
c001f5af:	74 02                	je     c001f5b3 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f5b1:	89 d0                	mov    eax,edx
c001f5b3:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f5b7:	45                   	inc    ebp
c001f5b8:	83 fd 06             	cmp    ebp,0x6
c001f5bb:	75 df                	jne    c001f59c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f5bd:	eb 76                	jmp    c001f635 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f5bf:	89 f0                	mov    eax,esi
c001f5c1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f5c6:	89 fa                	mov    edx,edi
c001f5c8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f5cf:	0f ac d0 10          	shrd   eax,edx,0x10
c001f5d3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f5d8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f5dc:	c1 ee 18             	shr    esi,0x18
c001f5df:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f5e4:	eb 56                	jmp    c001f63c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f5e6:	6a 00                	push   0x0
c001f5e8:	6a 3f                	push   0x3f
c001f5ea:	57                   	push   edi
c001f5eb:	56                   	push   esi
c001f5ec:	e8 cf 2f 00 00       	call   c00225c0 <__umoddi3>
c001f5f1:	83 c4 10             	add    esp,0x10
c001f5f4:	40                   	inc    eax
c001f5f5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f5f9:	6a 00                	push   0x0
c001f5fb:	68 f0 03 00 00       	push   0x3f0
c001f600:	57                   	push   edi
c001f601:	56                   	push   esi
c001f602:	e8 b9 2e 00 00       	call   c00224c0 <__udivdi3>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f60f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f616:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f61b:	6a 00                	push   0x0
c001f61d:	6a 3f                	push   0x3f
c001f61f:	57                   	push   edi
c001f620:	56                   	push   esi
c001f621:	e8 9a 2e 00 00       	call   c00224c0 <__udivdi3>
c001f626:	83 c4 10             	add    esp,0x10
c001f629:	89 c6                	mov    esi,eax
c001f62b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f630:	83 e6 0f             	and    esi,0xf
c001f633:	eb 07                	jmp    c001f63c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f635:	31 f6                	xor    esi,esi
c001f637:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f63c:	bf 01 00 00 00       	mov    edi,0x1
c001f641:	50                   	push   eax
c001f642:	6a 00                	push   0x0
c001f644:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f64b:	50                   	push   eax
c001f64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f650:	e8 8d f0 ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001f655:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f658:	e8 8f fe ff ff       	call   c001f4ec <ATA::readyForCommand()>
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	84 c0                	test   al,al
c001f662:	0f 84 bc 02 00 00    	je     c001f924 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f668:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f66e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f674:	c1 e0 04             	shl    eax,0x4
c001f677:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f67e:	09 c6                	or     esi,eax
c001f680:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f685:	75 05                	jne    c001f68c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f687:	83 ce a0             	or     esi,0xffffffa0
c001f68a:	eb 03                	jmp    c001f68f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f68c:	83 ce e0             	or     esi,0xffffffe0
c001f68f:	89 f0                	mov    eax,esi
c001f691:	0f b6 f0             	movzx  esi,al
c001f694:	56                   	push   esi
c001f695:	6a 06                	push   0x6
c001f697:	51                   	push   ecx
c001f698:	52                   	push   edx
c001f699:	e8 3c ee ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	6a 00                	push   0x0
c001f6a3:	6a 01                	push   0x1
c001f6a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6ac:	50                   	push   eax
c001f6ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6b3:	e8 22 ee ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6b8:	83 c4 10             	add    esp,0x10
c001f6bb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f6c0:	75 6e                	jne    c001f730 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f6c2:	6a 00                	push   0x0
c001f6c4:	6a 08                	push   0x8
c001f6c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6cd:	50                   	push   eax
c001f6ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6d4:	e8 01 ee ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6d9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f6de:	50                   	push   eax
c001f6df:	6a 09                	push   0x9
c001f6e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6e8:	50                   	push   eax
c001f6e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6ef:	e8 e6 ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6f4:	83 c4 20             	add    esp,0x20
c001f6f7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f6fc:	50                   	push   eax
c001f6fd:	6a 0a                	push   0xa
c001f6ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f706:	50                   	push   eax
c001f707:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f70d:	e8 c8 ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f712:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f717:	50                   	push   eax
c001f718:	6a 0b                	push   0xb
c001f71a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f721:	50                   	push   eax
c001f722:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f728:	e8 ad ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f72d:	83 c4 20             	add    esp,0x20
c001f730:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f735:	50                   	push   eax
c001f736:	6a 02                	push   0x2
c001f738:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f73f:	50                   	push   eax
c001f740:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f746:	e8 8f ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f74b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f750:	50                   	push   eax
c001f751:	6a 03                	push   0x3
c001f753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f75a:	50                   	push   eax
c001f75b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f761:	e8 74 ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f766:	83 c4 20             	add    esp,0x20
c001f769:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f76e:	50                   	push   eax
c001f76f:	6a 04                	push   0x4
c001f771:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f778:	50                   	push   eax
c001f779:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f77f:	e8 56 ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f784:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f789:	50                   	push   eax
c001f78a:	6a 05                	push   0x5
c001f78c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f793:	50                   	push   eax
c001f794:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f79a:	e8 3b ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f79f:	83 c4 20             	add    esp,0x20
c001f7a2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7a7:	0f 94 c0             	sete   al
c001f7aa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f7af:	74 09                	je     c001f7ba <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f7b1:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f7b8:	eb 07                	jmp    c001f7c1 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f7ba:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f7c1:	0f b6 c0             	movzx  eax,al
c001f7c4:	50                   	push   eax
c001f7c5:	6a 07                	push   0x7
c001f7c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7ce:	50                   	push   eax
c001f7cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7d5:	e8 00 ed ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7da:	c7 04 24 3d 68 02 c0 	mov    DWORD PTR [esp],0xc002683d
c001f7e1:	e8 2d d8 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f7e6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f7ea:	83 c4 10             	add    esp,0x10
c001f7ed:	85 f6                	test   esi,esi
c001f7ef:	0f 84 f7 00 00 00    	je     c001f8ec <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f7f5:	83 ec 0c             	sub    esp,0xc
c001f7f8:	68 40 68 02 c0       	push   0xc0026840
c001f7fd:	e8 11 d8 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f802:	83 c4 0c             	add    esp,0xc
c001f805:	6a 01                	push   0x1
c001f807:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f80e:	50                   	push   eax
c001f80f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f815:	e8 74 f7 ff ff       	call   c001ef8e <IDE::polling(unsigned char, unsigned int)>
c001f81a:	c7 04 24 43 68 02 c0 	mov    DWORD PTR [esp],0xc0026843
c001f821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f825:	e8 e9 d7 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f82a:	83 c4 10             	add    esp,0x10
c001f82d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f831:	84 c0                	test   al,al
c001f833:	74 2b                	je     c001f860 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f835:	0f b6 f8             	movzx  edi,al
c001f838:	57                   	push   edi
c001f839:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f840:	50                   	push   eax
c001f841:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f848:	50                   	push   eax
c001f849:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f84f:	e8 8a f6 ff ff       	call   c001eede <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f854:	c7 04 24 46 68 02 c0 	mov    DWORD PTR [esp],0xc0026846
c001f85b:	e9 bc 00 00 00       	jmp    c001f91c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f860:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f865:	74 50                	je     c001f8b7 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f867:	83 ec 0c             	sub    esp,0xc
c001f86a:	31 ed                	xor    ebp,ebp
c001f86c:	68 51 68 02 c0       	push   0xc0026851
c001f871:	e8 9d d7 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f876:	83 c4 10             	add    esp,0x10
c001f879:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f87d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f881:	50                   	push   eax
c001f882:	50                   	push   eax
c001f883:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f88a:	50                   	push   eax
c001f88b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f891:	e8 32 ec ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001f896:	89 c2                	mov    edx,eax
c001f898:	89 f8                	mov    eax,edi
c001f89a:	66 ef                	out    dx,ax
c001f89c:	45                   	inc    ebp
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f8a6:	75 d1                	jne    c001f879 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	68 54 68 02 c0       	push   0xc0026854
c001f8b0:	e8 5e d7 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f8b5:	eb 24                	jmp    c001f8db <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f8b7:	51                   	push   ecx
c001f8b8:	51                   	push   ecx
c001f8b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8c0:	50                   	push   eax
c001f8c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8c7:	e8 fc eb ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001f8cc:	b9 00 01 00 00       	mov    ecx,0x100
c001f8d1:	89 c2                	mov    edx,eax
c001f8d3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f8d7:	fc                   	cld    
c001f8d8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	4e                   	dec    esi
c001f8df:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f8e7:	e9 01 ff ff ff       	jmp    c001f7ed <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f8ec:	31 ff                	xor    edi,edi
c001f8ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8f3:	74 2f                	je     c001f924 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 57 68 02 c0       	push   0xc0026857
c001f8fd:	e8 11 d7 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f902:	58                   	pop    eax
c001f903:	31 c0                	xor    eax,eax
c001f905:	5a                   	pop    edx
c001f906:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f90b:	0f 94 c0             	sete   al
c001f90e:	50                   	push   eax
c001f90f:	53                   	push   ebx
c001f910:	e8 8d fb ff ff       	call   c001f4a2 <ATA::flush(bool)>
c001f915:	c7 04 24 5a 68 02 c0 	mov    DWORD PTR [esp],0xc002685a
c001f91c:	e8 f2 d6 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f921:	83 c4 10             	add    esp,0x10
c001f924:	83 c4 2c             	add    esp,0x2c
c001f927:	89 f8                	mov    eax,edi
c001f929:	5b                   	pop    ebx
c001f92a:	5e                   	pop    esi
c001f92b:	5f                   	pop    edi
c001f92c:	5d                   	pop    ebp
c001f92d:	c3                   	ret    

c001f92e <ATA::read(unsigned long long, int, void*)>:
c001f92e:	57                   	push   edi
c001f92f:	b8 04 00 00 00       	mov    eax,0x4
c001f934:	56                   	push   esi
c001f935:	53                   	push   ebx
c001f936:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f93a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f93e:	8d 7a ff             	lea    edi,[edx-0x1]
c001f941:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f949:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f94f:	77 25                	ja     c001f976 <ATA::read(unsigned long long, int, void*)+0x48>
c001f951:	b8 06 00 00 00       	mov    eax,0x6
c001f956:	85 f6                	test   esi,esi
c001f958:	74 1c                	je     c001f976 <ATA::read(unsigned long long, int, void*)+0x48>
c001f95a:	50                   	push   eax
c001f95b:	50                   	push   eax
c001f95c:	6a 00                	push   0x0
c001f95e:	56                   	push   esi
c001f95f:	52                   	push   edx
c001f960:	53                   	push   ebx
c001f961:	51                   	push   ecx
c001f962:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f966:	e8 cd fb ff ff       	call   c001f538 <ATA::access(unsigned long long, int, void*, bool)>
c001f96b:	83 c4 20             	add    esp,0x20
c001f96e:	85 c0                	test   eax,eax
c001f970:	0f 95 c0             	setne  al
c001f973:	0f b6 c0             	movzx  eax,al
c001f976:	5b                   	pop    ebx
c001f977:	5e                   	pop    esi
c001f978:	5f                   	pop    edi
c001f979:	c3                   	ret    

c001f97a <ATA::write(unsigned long long, int, void*)>:
c001f97a:	55                   	push   ebp
c001f97b:	57                   	push   edi
c001f97c:	56                   	push   esi
c001f97d:	53                   	push   ebx
c001f97e:	83 ec 18             	sub    esp,0x18
c001f981:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f985:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f989:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f98d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f991:	68 5d 68 02 c0       	push   0xc002685d
c001f996:	e8 78 d6 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001f99b:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	b8 04 00 00 00       	mov    eax,0x4
c001f9a6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f9ac:	77 25                	ja     c001f9d3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f9ae:	b8 06 00 00 00       	mov    eax,0x6
c001f9b3:	85 f6                	test   esi,esi
c001f9b5:	74 1c                	je     c001f9d3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f9b7:	50                   	push   eax
c001f9b8:	50                   	push   eax
c001f9b9:	6a 01                	push   0x1
c001f9bb:	56                   	push   esi
c001f9bc:	53                   	push   ebx
c001f9bd:	55                   	push   ebp
c001f9be:	57                   	push   edi
c001f9bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f9c3:	e8 70 fb ff ff       	call   c001f538 <ATA::access(unsigned long long, int, void*, bool)>
c001f9c8:	83 c4 20             	add    esp,0x20
c001f9cb:	85 c0                	test   eax,eax
c001f9cd:	0f 95 c0             	setne  al
c001f9d0:	0f b6 c0             	movzx  eax,al
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	5b                   	pop    ebx
c001f9d7:	5e                   	pop    esi
c001f9d8:	5f                   	pop    edi
c001f9d9:	5d                   	pop    ebp
c001f9da:	c3                   	ret    
c001f9db:	90                   	nop

c001f9dc <ATA::detectCHS()>:
c001f9dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9e0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f9e6:	c1 e0 06             	shl    eax,0x6
c001f9e9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f9ef:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f9f9:	c7 44 24 04 69 68 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026869
c001fa01:	e9 6b 53 ff ff       	jmp    c0014d71 <Krnl::panic(char const*)>

c001fa06 <ATA::open(int, int, void*)>:
c001fa06:	53                   	push   ebx
c001fa07:	83 ec 08             	sub    esp,0x8
c001fa0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa16:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fa1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fa22:	c1 e0 06             	shl    eax,0x6
c001fa25:	01 d0                	add    eax,edx
c001fa27:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fa2e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fa34:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fa3b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fa45:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fa4b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fa52:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fa59:	75 0c                	jne    c001fa67 <ATA::open(int, int, void*)+0x61>
c001fa5b:	83 ec 0c             	sub    esp,0xc
c001fa5e:	53                   	push   ebx
c001fa5f:	e8 78 ff ff ff       	call   c001f9dc <ATA::detectCHS()>
c001fa64:	83 c4 10             	add    esp,0x10
c001fa67:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fa6d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fa73:	c1 e0 06             	shl    eax,0x6
c001fa76:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fa7d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fa87:	d1 e8                	shr    eax,1
c001fa89:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fa8f:	6a 04                	push   0x4
c001fa91:	6a 0c                	push   0xc
c001fa93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa9a:	50                   	push   eax
c001fa9b:	52                   	push   edx
c001fa9c:	e8 39 ea ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faa1:	90                   	nop
c001faa2:	90                   	nop
c001faa3:	6a 00                	push   0x0
c001faa5:	6a 0c                	push   0xc
c001faa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faae:	50                   	push   eax
c001faaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fab5:	e8 20 ea ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faba:	83 c4 14             	add    esp,0x14
c001fabd:	53                   	push   ebx
c001fabe:	e8 a3 ee fe ff       	call   c000e966 <PhysicalDisk::startCache()>
c001fac3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fac6:	e8 4f 0d ff ff       	call   c001081a <createPartitionsForDisk(PhysicalDisk*)>
c001facb:	31 c0                	xor    eax,eax
c001facd:	83 c4 18             	add    esp,0x18
c001fad0:	5b                   	pop    ebx
c001fad1:	c3                   	ret    

c001fad2 <ATAPI::write(unsigned long long, int, void*)>:
c001fad2:	b8 03 00 00 00       	mov    eax,0x3
c001fad7:	c3                   	ret    

c001fad8 <ATAPI::close(int, int, void*)>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fae5:	85 c0                	test   eax,eax
c001fae7:	74 0c                	je     c001faf5 <ATAPI::close(int, int, void*)+0x1d>
c001fae9:	83 ec 0c             	sub    esp,0xc
c001faec:	8b 10                	mov    edx,DWORD PTR [eax]
c001faee:	50                   	push   eax
c001faef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001faf2:	83 c4 10             	add    esp,0x10
c001faf5:	31 c0                	xor    eax,eax
c001faf7:	83 c4 0c             	add    esp,0xc
c001fafa:	c3                   	ret    
c001fafb:	90                   	nop

c001fafc <ATAPI::ATAPI()>:
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb03:	83 ec 04             	sub    esp,0x4
c001fb06:	68 00 08 00 00       	push   0x800
c001fb0b:	68 69 6b 02 c0       	push   0xc0026b69
c001fb10:	50                   	push   eax
c001fb11:	e8 e8 ed fe ff       	call   c000e8fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb16:	83 c4 10             	add    esp,0x10
c001fb19:	ba fc 68 02 c0       	mov    edx,0xc00268fc
c001fb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb22:	89 10                	mov    DWORD PTR [eax],edx
c001fb24:	90                   	nop
c001fb25:	83 c4 0c             	add    esp,0xc
c001fb28:	c3                   	ret    
c001fb29:	90                   	nop

c001fb2a <ATAPI::readyForCommand()>:
c001fb2a:	56                   	push   esi
c001fb2b:	53                   	push   ebx
c001fb2c:	53                   	push   ebx
c001fb2d:	31 db                	xor    ebx,ebx
c001fb2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb33:	51                   	push   ecx
c001fb34:	6a 0c                	push   0xc
c001fb36:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb3d:	50                   	push   eax
c001fb3e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb44:	e8 51 ea ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	a8 88                	test   al,0x88
c001fb4e:	74 25                	je     c001fb75 <ATAPI::readyForCommand()+0x4b>
c001fb50:	43                   	inc    ebx
c001fb51:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb57:	7e da                	jle    c001fb33 <ATAPI::readyForCommand()+0x9>
c001fb59:	83 ec 0c             	sub    esp,0xc
c001fb5c:	68 5e 01 00 00       	push   0x15e
c001fb61:	e8 82 8b ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb6f:	75 c2                	jne    c001fb33 <ATAPI::readyForCommand()+0x9>
c001fb71:	31 c0                	xor    eax,eax
c001fb73:	eb 02                	jmp    c001fb77 <ATAPI::readyForCommand()+0x4d>
c001fb75:	b0 01                	mov    al,0x1
c001fb77:	5a                   	pop    edx
c001fb78:	5b                   	pop    ebx
c001fb79:	5e                   	pop    esi
c001fb7a:	c3                   	ret    
c001fb7b:	90                   	nop

c001fb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fb7c:	55                   	push   ebp
c001fb7d:	57                   	push   edi
c001fb7e:	56                   	push   esi
c001fb7f:	53                   	push   ebx
c001fb80:	83 ec 20             	sub    esp,0x20
c001fb83:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fb87:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fb8b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fb8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fb93:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fb97:	6a 01                	push   0x1
c001fb99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fba0:	50                   	push   eax
c001fba1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fba7:	e8 36 eb ff ff       	call   c001e6e2 <IDE::enableIRQs(unsigned char, bool)>
c001fbac:	5e                   	pop    esi
c001fbad:	58                   	pop    eax
c001fbae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbb5:	50                   	push   eax
c001fbb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbbc:	e8 f3 e8 ff ff       	call   c001e4b4 <IDE::prepareInterrupt(unsigned char)>
c001fbc1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fbc4:	e8 61 ff ff ff       	call   c001fb2a <ATAPI::readyForCommand()>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	84 c0                	test   al,al
c001fbce:	75 0a                	jne    c001fbda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fbd0:	bb 01 00 00 00       	mov    ebx,0x1
c001fbd5:	e9 57 02 00 00       	jmp    c001fe31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fbda:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fbe0:	c1 e0 04             	shl    eax,0x4
c001fbe3:	0f b6 c0             	movzx  eax,al
c001fbe6:	50                   	push   eax
c001fbe7:	6a 06                	push   0x6
c001fbe9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbf0:	50                   	push   eax
c001fbf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbf7:	e8 de e8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbfc:	6a 00                	push   0x0
c001fbfe:	6a 01                	push   0x1
c001fc00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc07:	50                   	push   eax
c001fc08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc0e:	e8 c7 e8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc13:	83 c4 20             	add    esp,0x20
c001fc16:	0f b6 c3             	movzx  eax,bl
c001fc19:	0f b6 df             	movzx  ebx,bh
c001fc1c:	50                   	push   eax
c001fc1d:	6a 04                	push   0x4
c001fc1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc26:	50                   	push   eax
c001fc27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc2d:	e8 a8 e8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc32:	53                   	push   ebx
c001fc33:	6a 05                	push   0x5
c001fc35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc3c:	50                   	push   eax
c001fc3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc43:	e8 92 e8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc48:	83 c4 20             	add    esp,0x20
c001fc4b:	68 a0 00 00 00       	push   0xa0
c001fc50:	6a 07                	push   0x7
c001fc52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc59:	50                   	push   eax
c001fc5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc60:	e8 75 e8 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc65:	83 c4 0c             	add    esp,0xc
c001fc68:	6a 01                	push   0x1
c001fc6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc71:	50                   	push   eax
c001fc72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc78:	e8 11 f3 ff ff       	call   c001ef8e <IDE::polling(unsigned char, unsigned int)>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fc86:	84 c0                	test   al,al
c001fc88:	74 23                	je     c001fcad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fc8a:	0f b6 d8             	movzx  ebx,al
c001fc8d:	0f b6 d2             	movzx  edx,dl
c001fc90:	53                   	push   ebx
c001fc91:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fc98:	50                   	push   eax
c001fc99:	52                   	push   edx
c001fc9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fca0:	e8 39 f2 ff ff       	call   c001eede <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	e9 84 01 00 00       	jmp    c001fe31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcad:	0f b6 d2             	movzx  edx,dl
c001fcb0:	53                   	push   ebx
c001fcb1:	53                   	push   ebx
c001fcb2:	52                   	push   edx
c001fcb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcb9:	e8 0a e8 ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001fcbe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fcc2:	b9 06 00 00 00       	mov    ecx,0x6
c001fcc7:	89 c2                	mov    edx,eax
c001fcc9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fccc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fcd0:	83 c4 10             	add    esp,0x10
c001fcd3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fcd9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fce0:	85 db                	test   ebx,ebx
c001fce2:	0f 84 ec 00 00 00    	je     c001fdd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fce8:	51                   	push   ecx
c001fce9:	51                   	push   ecx
c001fcea:	52                   	push   edx
c001fceb:	50                   	push   eax
c001fcec:	e8 57 e9 ff ff       	call   c001e648 <IDE::waitInterrupt(unsigned char)>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	84 c0                	test   al,al
c001fcf6:	0f 84 d4 fe ff ff    	je     c001fbd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fcfc:	56                   	push   esi
c001fcfd:	56                   	push   esi
c001fcfe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd05:	50                   	push   eax
c001fd06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd0c:	e8 a3 e7 ff ff       	call   c001e4b4 <IDE::prepareInterrupt(unsigned char)>
c001fd11:	83 c4 0c             	add    esp,0xc
c001fd14:	6a 04                	push   0x4
c001fd16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd1d:	50                   	push   eax
c001fd1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd24:	e8 71 e8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001fd29:	83 c4 0c             	add    esp,0xc
c001fd2c:	89 c6                	mov    esi,eax
c001fd2e:	6a 05                	push   0x5
c001fd30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd37:	50                   	push   eax
c001fd38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd3e:	e8 57 e8 ff ff       	call   c001e59a <IDE::read(unsigned char, unsigned char)>
c001fd43:	89 f1                	mov    ecx,esi
c001fd45:	0f b6 c0             	movzx  eax,al
c001fd48:	0f b6 f1             	movzx  esi,cl
c001fd4b:	c1 e0 08             	shl    eax,0x8
c001fd4e:	09 c6                	or     esi,eax
c001fd50:	d1 fe                	sar    esi,1
c001fd52:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd56:	83 c4 10             	add    esp,0x10
c001fd59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fd5e:	74 41                	je     c001fda1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fd60:	31 c9                	xor    ecx,ecx
c001fd62:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd68:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd6f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fd73:	75 0a                	jne    c001fd7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fd75:	01 c9                	add    ecx,ecx
c001fd77:	01 cd                	add    ebp,ecx
c001fd79:	4b                   	dec    ebx
c001fd7a:	e9 54 ff ff ff       	jmp    c001fcd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fd7f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fd84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fd88:	51                   	push   ecx
c001fd89:	51                   	push   ecx
c001fd8a:	52                   	push   edx
c001fd8b:	50                   	push   eax
c001fd8c:	e8 37 e7 ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001fd91:	89 c2                	mov    edx,eax
c001fd93:	89 f0                	mov    eax,esi
c001fd95:	66 ef                	out    dx,ax
c001fd97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	41                   	inc    ecx
c001fd9f:	eb c1                	jmp    c001fd62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fda1:	31 f6                	xor    esi,esi
c001fda3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fda9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdb0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fdb4:	75 06                	jne    c001fdbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fdb6:	01 f6                	add    esi,esi
c001fdb8:	01 f5                	add    ebp,esi
c001fdba:	eb bd                	jmp    c001fd79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fdbc:	51                   	push   ecx
c001fdbd:	51                   	push   ecx
c001fdbe:	52                   	push   edx
c001fdbf:	50                   	push   eax
c001fdc0:	e8 03 e7 ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001fdc5:	89 c2                	mov    edx,eax
c001fdc7:	66 ed                	in     ax,dx
c001fdc9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fdce:	83 c4 10             	add    esp,0x10
c001fdd1:	46                   	inc    esi
c001fdd2:	eb cf                	jmp    c001fda3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fdd4:	51                   	push   ecx
c001fdd5:	51                   	push   ecx
c001fdd6:	52                   	push   edx
c001fdd7:	50                   	push   eax
c001fdd8:	e8 6b e8 ff ff       	call   c001e648 <IDE::waitInterrupt(unsigned char)>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	84 c0                	test   al,al
c001fde2:	0f 84 e8 fd ff ff    	je     c001fbd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fde8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fded:	52                   	push   edx
c001fdee:	52                   	push   edx
c001fdef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdf6:	50                   	push   eax
c001fdf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdfd:	e8 b2 e6 ff ff       	call   c001e4b4 <IDE::prepareInterrupt(unsigned char)>
c001fe02:	83 c4 10             	add    esp,0x10
c001fe05:	50                   	push   eax
c001fe06:	50                   	push   eax
c001fe07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe0e:	50                   	push   eax
c001fe0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe15:	e8 ae e6 ff ff       	call   c001e4c8 <IDE::getBase(unsigned char)>
c001fe1a:	8d 50 07             	lea    edx,[eax+0x7]
c001fe1d:	ec                   	in     al,dx
c001fe1e:	83 c4 10             	add    esp,0x10
c001fe21:	a8 88                	test   al,0x88
c001fe23:	74 0a                	je     c001fe2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fe25:	4b                   	dec    ebx
c001fe26:	75 dd                	jne    c001fe05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fe28:	bb 02 00 00 00       	mov    ebx,0x2
c001fe2d:	eb 02                	jmp    c001fe31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe2f:	31 db                	xor    ebx,ebx
c001fe31:	83 c4 1c             	add    esp,0x1c
c001fe34:	89 d8                	mov    eax,ebx
c001fe36:	5b                   	pop    ebx
c001fe37:	5e                   	pop    esi
c001fe38:	5f                   	pop    edi
c001fe39:	5d                   	pop    ebp
c001fe3a:	c3                   	ret    
c001fe3b:	90                   	nop

c001fe3c <ATAPI::diskRemoved()>:
c001fe3c:	53                   	push   ebx
c001fe3d:	83 ec 14             	sub    esp,0x14
c001fe40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fe44:	68 b4 68 02 c0       	push   0xc00268b4
c001fe49:	e8 c5 d1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001fe4e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe55:	c7 04 24 ca 68 02 c0 	mov    DWORD PTR [esp],0xc00268ca
c001fe5c:	e8 b2 d1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001fe61:	58                   	pop    eax
c001fe62:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fe68:	e8 2b 07 ff ff       	call   c0010598 <LogicalDisk::unmount()>
c001fe6d:	c7 04 24 d9 68 02 c0 	mov    DWORD PTR [esp],0xc00268d9
c001fe74:	e8 9a d1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001fe79:	5a                   	pop    edx
c001fe7a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fe80:	e8 1b 11 ff ff       	call   c0010fa0 <VCache::writeWriteBuffer()>
c001fe85:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fe8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fe8f:	83 c4 18             	add    esp,0x18
c001fe92:	5b                   	pop    ebx
c001fe93:	e9 f8 10 ff ff       	jmp    c0010f90 <VCache::invalidateReadBuffer()>

c001fe98 <ATAPI::eject()>:
c001fe98:	57                   	push   edi
c001fe99:	b9 03 00 00 00       	mov    ecx,0x3
c001fe9e:	53                   	push   ebx
c001fe9f:	83 ec 14             	sub    esp,0x14
c001fea2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fea6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001feaa:	fc                   	cld    
c001feab:	31 c0                	xor    eax,eax
c001fead:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001feaf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001feb4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001feb9:	50                   	push   eax
c001feba:	50                   	push   eax
c001febb:	6a 00                	push   0x0
c001febd:	6a 00                	push   0x0
c001febf:	6a 00                	push   0x0
c001fec1:	6a 02                	push   0x2
c001fec3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fec7:	50                   	push   eax
c001fec8:	53                   	push   ebx
c001fec9:	e8 ae fc ff ff       	call   c001fb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fece:	83 c4 14             	add    esp,0x14
c001fed1:	53                   	push   ebx
c001fed2:	e8 65 ff ff ff       	call   c001fe3c <ATAPI::diskRemoved()>
c001fed7:	83 c4 24             	add    esp,0x24
c001feda:	31 c0                	xor    eax,eax
c001fedc:	5b                   	pop    ebx
c001fedd:	5f                   	pop    edi
c001fede:	c3                   	ret    
c001fedf:	90                   	nop

c001fee0 <ATAPI::diskInserted()>:
c001fee0:	83 ec 18             	sub    esp,0x18
c001fee3:	68 75 6b 02 c0       	push   0xc0026b75
c001fee8:	e8 26 d1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c001feed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fef1:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fef8:	83 c4 1c             	add    esp,0x1c
c001fefb:	c3                   	ret    

c001fefc <ATAPI::detectMedia()>:
c001fefc:	56                   	push   esi
c001fefd:	53                   	push   ebx
c001fefe:	83 ec 28             	sub    esp,0x28
c001ff01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff05:	6a 0c                	push   0xc
c001ff07:	6a 00                	push   0x0
c001ff09:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ff0d:	56                   	push   esi
c001ff0e:	e8 69 07 fe ff       	call   c000067c <memset>
c001ff13:	58                   	pop    eax
c001ff14:	5a                   	pop    edx
c001ff15:	6a 00                	push   0x0
c001ff17:	6a 00                	push   0x0
c001ff19:	6a 00                	push   0x0
c001ff1b:	6a 00                	push   0x0
c001ff1d:	56                   	push   esi
c001ff1e:	53                   	push   ebx
c001ff1f:	e8 58 fc ff ff       	call   c001fb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff24:	83 c4 1c             	add    esp,0x1c
c001ff27:	6a 0c                	push   0xc
c001ff29:	6a 00                	push   0x0
c001ff2b:	56                   	push   esi
c001ff2c:	e8 4b 07 fe ff       	call   c000067c <memset>
c001ff31:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ff36:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ff3b:	59                   	pop    ecx
c001ff3c:	58                   	pop    eax
c001ff3d:	6a 01                	push   0x1
c001ff3f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ff43:	50                   	push   eax
c001ff44:	6a 00                	push   0x0
c001ff46:	6a 12                	push   0x12
c001ff48:	56                   	push   esi
c001ff49:	53                   	push   ebx
c001ff4a:	e8 2d fc ff ff       	call   c001fb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff4f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ff53:	83 c4 20             	add    esp,0x20
c001ff56:	83 e0 7f             	and    eax,0x7f
c001ff59:	3c 70                	cmp    al,0x70
c001ff5b:	74 15                	je     c001ff72 <ATAPI::detectMedia()+0x76>
c001ff5d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff64:	75 0c                	jne    c001ff72 <ATAPI::detectMedia()+0x76>
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	53                   	push   ebx
c001ff6a:	e8 71 ff ff ff       	call   c001fee0 <ATAPI::diskInserted()>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff76:	83 e0 0f             	and    eax,0xf
c001ff79:	3c 02                	cmp    al,0x2
c001ff7b:	75 1b                	jne    c001ff98 <ATAPI::detectMedia()+0x9c>
c001ff7d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff82:	75 2d                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff84:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff8b:	74 24                	je     c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff8d:	83 ec 0c             	sub    esp,0xc
c001ff90:	53                   	push   ebx
c001ff91:	e8 a6 fe ff ff       	call   c001fe3c <ATAPI::diskRemoved()>
c001ff96:	eb 16                	jmp    c001ffae <ATAPI::detectMedia()+0xb2>
c001ff98:	84 c0                	test   al,al
c001ff9a:	75 15                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff9c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ffa3:	75 0c                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	53                   	push   ebx
c001ffa9:	e8 32 ff ff ff       	call   c001fee0 <ATAPI::diskInserted()>
c001ffae:	83 c4 10             	add    esp,0x10
c001ffb1:	83 c4 24             	add    esp,0x24
c001ffb4:	5b                   	pop    ebx
c001ffb5:	5e                   	pop    esi
c001ffb6:	c3                   	ret    
c001ffb7:	90                   	nop

c001ffb8 <ATAPI::open(int, int, void*)>:
c001ffb8:	56                   	push   esi
c001ffb9:	53                   	push   ebx
c001ffba:	50                   	push   eax
c001ffbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffc7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ffcd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ffd3:	c1 e0 06             	shl    eax,0x6
c001ffd6:	01 d0                	add    eax,edx
c001ffd8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ffdf:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ffe5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ffec:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fff6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fffc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020003:	6a 04                	push   0x4
c0020005:	6a 0c                	push   0xc
c0020007:	51                   	push   ecx
c0020008:	52                   	push   edx
c0020009:	e8 cc e4 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002000e:	90                   	nop
c002000f:	90                   	nop
c0020010:	6a 00                	push   0x0
c0020012:	6a 0c                	push   0xc
c0020014:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001b:	50                   	push   eax
c002001c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020022:	e8 b3 e4 ff ff       	call   c001e4da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020027:	83 c4 14             	add    esp,0x14
c002002a:	68 74 01 00 00       	push   0x174
c002002f:	e8 d3 9c fe ff       	call   c0009d07 <malloc>
c0020034:	83 c4 0c             	add    esp,0xc
c0020037:	89 c6                	mov    esi,eax
c0020039:	6a 00                	push   0x0
c002003b:	68 ff ff ff 7f       	push   0x7fffffff
c0020040:	6a 00                	push   0x0
c0020042:	6a 00                	push   0x0
c0020044:	53                   	push   ebx
c0020045:	68 52 6c 02 c0       	push   0xc0026c52
c002004a:	50                   	push   eax
c002004b:	e8 54 03 ff ff       	call   c00103a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020050:	83 c4 14             	add    esp,0x14
c0020053:	56                   	push   esi
c0020054:	e8 01 04 ff ff       	call   c001045a <LogicalDisk::assignDriveLetter()>
c0020059:	5a                   	pop    edx
c002005a:	0f be c0             	movsx  eax,al
c002005d:	59                   	pop    ecx
c002005e:	50                   	push   eax
c002005f:	68 e7 68 02 c0       	push   0xc00268e7
c0020064:	e8 aa cf fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020069:	58                   	pop    eax
c002006a:	5a                   	pop    edx
c002006b:	56                   	push   esi
c002006c:	53                   	push   ebx
c002006d:	e8 54 e4 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c0020072:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002007b:	e8 e6 e8 fe ff       	call   c000e966 <PhysicalDisk::startCache()>
c0020080:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020087:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002008a:	e8 6d fe ff ff       	call   c001fefc <ATAPI::detectMedia()>
c002008f:	83 c4 14             	add    esp,0x14
c0020092:	31 c0                	xor    eax,eax
c0020094:	5b                   	pop    ebx
c0020095:	5e                   	pop    esi
c0020096:	c3                   	ret    
c0020097:	90                   	nop

c0020098 <ATAPI::read(unsigned long long, int, void*)>:
c0020098:	55                   	push   ebp
c0020099:	57                   	push   edi
c002009a:	56                   	push   esi
c002009b:	53                   	push   ebx
c002009c:	83 ec 1c             	sub    esp,0x1c
c002009f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00200a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00200a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00200ab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00200b2:	74 41                	je     c00200f5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00200b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200b8:	b9 03 00 00 00       	mov    ecx,0x3
c00200bd:	fc                   	cld    
c00200be:	31 c0                	xor    eax,eax
c00200c0:	86 fb                	xchg   bl,bh
c00200c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200c4:	c1 c3 10             	rol    ebx,0x10
c00200c7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00200cc:	89 e8                	mov    eax,ebp
c00200ce:	86 fb                	xchg   bl,bh
c00200d0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00200d4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00200d8:	50                   	push   eax
c00200d9:	50                   	push   eax
c00200da:	55                   	push   ebp
c00200db:	c1 e5 0b             	shl    ebp,0xb
c00200de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00200e2:	6a 00                	push   0x0
c00200e4:	55                   	push   ebp
c00200e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00200e9:	50                   	push   eax
c00200ea:	56                   	push   esi
c00200eb:	e8 8c fa ff ff       	call   c001fb7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00200f0:	83 c4 20             	add    esp,0x20
c00200f3:	eb 1a                	jmp    c002010f <ATAPI::read(unsigned long long, int, void*)+0x77>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	56                   	push   esi
c00200f9:	e8 fe fd ff ff       	call   c001fefc <ATAPI::detectMedia()>
c00200fe:	83 c4 10             	add    esp,0x10
c0020101:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020108:	75 aa                	jne    c00200b4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002010a:	b8 02 00 00 00       	mov    eax,0x2
c002010f:	83 c4 1c             	add    esp,0x1c
c0020112:	5b                   	pop    ebx
c0020113:	5e                   	pop    esi
c0020114:	5f                   	pop    edi
c0020115:	5d                   	pop    ebp
c0020116:	c3                   	ret    
c0020117:	90                   	nop

c0020118 <SATA::close(int, int, void*)>:
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020125:	85 c0                	test   eax,eax
c0020127:	74 0c                	je     c0020135 <SATA::close(int, int, void*)+0x1d>
c0020129:	83 ec 0c             	sub    esp,0xc
c002012c:	8b 10                	mov    edx,DWORD PTR [eax]
c002012e:	50                   	push   eax
c002012f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020132:	83 c4 10             	add    esp,0x10
c0020135:	31 c0                	xor    eax,eax
c0020137:	83 c4 0c             	add    esp,0xc
c002013a:	c3                   	ret    
c002013b:	90                   	nop

c002013c <SATA::powerSaving(PowerSavingLevel)>:
c002013c:	c3                   	ret    
c002013d:	90                   	nop

c002013e <SATA::open(int, int, void*)>:
c002013e:	56                   	push   esi
c002013f:	53                   	push   ebx
c0020140:	51                   	push   ecx
c0020141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020145:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002014c:	74 2d                	je     c002017b <SATA::open(int, int, void*)+0x3d>
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	68 2c 69 02 c0       	push   0xc002692c
c0020156:	e8 06 9c fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002015b:	83 c4 10             	add    esp,0x10
c002015e:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020165:	75 14                	jne    c002017b <SATA::open(int, int, void*)+0x3d>
c0020167:	e4 60                	in     al,0x60
c0020169:	3c 5a                	cmp    al,0x5a
c002016b:	74 04                	je     c0020171 <SATA::open(int, int, void*)+0x33>
c002016d:	3c 1c                	cmp    al,0x1c
c002016f:	75 f6                	jne    c0020167 <SATA::open(int, int, void*)+0x29>
c0020171:	e4 60                	in     al,0x60
c0020173:	3c 5a                	cmp    al,0x5a
c0020175:	74 fa                	je     c0020171 <SATA::open(int, int, void*)+0x33>
c0020177:	3c 1c                	cmp    al,0x1c
c0020179:	74 f6                	je     c0020171 <SATA::open(int, int, void*)+0x33>
c002017b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002017f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020189:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002018f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020199:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002019d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00201a7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00201ad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00201b4:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00201bb:	74 2d                	je     c00201ea <SATA::open(int, int, void*)+0xac>
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	68 39 69 02 c0       	push   0xc0026939
c00201c5:	e8 97 9b fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00201ca:	83 c4 10             	add    esp,0x10
c00201cd:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00201d4:	75 14                	jne    c00201ea <SATA::open(int, int, void*)+0xac>
c00201d6:	e4 60                	in     al,0x60
c00201d8:	3c 1c                	cmp    al,0x1c
c00201da:	74 04                	je     c00201e0 <SATA::open(int, int, void*)+0xa2>
c00201dc:	3c 5a                	cmp    al,0x5a
c00201de:	75 f6                	jne    c00201d6 <SATA::open(int, int, void*)+0x98>
c00201e0:	e4 60                	in     al,0x60
c00201e2:	3c 5a                	cmp    al,0x5a
c00201e4:	74 fa                	je     c00201e0 <SATA::open(int, int, void*)+0xa2>
c00201e6:	3c 1c                	cmp    al,0x1c
c00201e8:	74 f6                	je     c00201e0 <SATA::open(int, int, void*)+0xa2>
c00201ea:	e8 cf a1 fe ff       	call   c000a3be <Phys::allocatePage()>
c00201ef:	89 c6                	mov    esi,eax
c00201f1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00201f7:	81 c6 00 10 00 00    	add    esi,0x1000
c00201fd:	e8 bc a1 fe ff       	call   c000a3be <Phys::allocatePage()>
c0020202:	39 c6                	cmp    esi,eax
c0020204:	74 10                	je     c0020216 <SATA::open(int, int, void*)+0xd8>
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	68 46 69 02 c0       	push   0xc0026946
c002020e:	e8 5e 4b ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0020213:	83 c4 10             	add    esp,0x10
c0020216:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002021d:	74 2d                	je     c002024c <SATA::open(int, int, void*)+0x10e>
c002021f:	83 ec 0c             	sub    esp,0xc
c0020222:	68 5a 69 02 c0       	push   0xc002695a
c0020227:	e8 35 9b fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002022c:	83 c4 10             	add    esp,0x10
c002022f:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020236:	75 14                	jne    c002024c <SATA::open(int, int, void*)+0x10e>
c0020238:	e4 60                	in     al,0x60
c002023a:	3c 1c                	cmp    al,0x1c
c002023c:	74 04                	je     c0020242 <SATA::open(int, int, void*)+0x104>
c002023e:	3c 5a                	cmp    al,0x5a
c0020240:	75 f6                	jne    c0020238 <SATA::open(int, int, void*)+0xfa>
c0020242:	e4 60                	in     al,0x60
c0020244:	3c 5a                	cmp    al,0x5a
c0020246:	74 fa                	je     c0020242 <SATA::open(int, int, void*)+0x104>
c0020248:	3c 1c                	cmp    al,0x1c
c002024a:	74 f6                	je     c0020242 <SATA::open(int, int, void*)+0x104>
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	6a 02                	push   0x2
c0020251:	e8 63 ba fe ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0020256:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002025c:	6a 03                	push   0x3
c002025e:	50                   	push   eax
c002025f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020265:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c002026b:	e8 b4 c0 fe ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020270:	83 c4 20             	add    esp,0x20
c0020273:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002027a:	74 2d                	je     c00202a9 <SATA::open(int, int, void*)+0x16b>
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	68 67 69 02 c0       	push   0xc0026967
c0020284:	e8 d8 9a fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020293:	75 14                	jne    c00202a9 <SATA::open(int, int, void*)+0x16b>
c0020295:	e4 60                	in     al,0x60
c0020297:	3c 1c                	cmp    al,0x1c
c0020299:	74 04                	je     c002029f <SATA::open(int, int, void*)+0x161>
c002029b:	3c 5a                	cmp    al,0x5a
c002029d:	75 f6                	jne    c0020295 <SATA::open(int, int, void*)+0x157>
c002029f:	e4 60                	in     al,0x60
c00202a1:	3c 5a                	cmp    al,0x5a
c00202a3:	74 fa                	je     c002029f <SATA::open(int, int, void*)+0x161>
c00202a5:	3c 1c                	cmp    al,0x1c
c00202a7:	74 f6                	je     c002029f <SATA::open(int, int, void*)+0x161>
c00202a9:	83 ec 0c             	sub    esp,0xc
c00202ac:	53                   	push   ebx
c00202ad:	e8 b4 e6 fe ff       	call   c000e966 <PhysicalDisk::startCache()>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00202bc:	74 2d                	je     c00202eb <SATA::open(int, int, void*)+0x1ad>
c00202be:	83 ec 0c             	sub    esp,0xc
c00202c1:	68 74 69 02 c0       	push   0xc0026974
c00202c6:	e8 96 9a fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00202d5:	75 14                	jne    c00202eb <SATA::open(int, int, void*)+0x1ad>
c00202d7:	e4 60                	in     al,0x60
c00202d9:	3c 1c                	cmp    al,0x1c
c00202db:	74 04                	je     c00202e1 <SATA::open(int, int, void*)+0x1a3>
c00202dd:	3c 5a                	cmp    al,0x5a
c00202df:	75 f6                	jne    c00202d7 <SATA::open(int, int, void*)+0x199>
c00202e1:	e4 60                	in     al,0x60
c00202e3:	3c 5a                	cmp    al,0x5a
c00202e5:	74 fa                	je     c00202e1 <SATA::open(int, int, void*)+0x1a3>
c00202e7:	3c 1c                	cmp    al,0x1c
c00202e9:	74 f6                	je     c00202e1 <SATA::open(int, int, void*)+0x1a3>
c00202eb:	83 ec 0c             	sub    esp,0xc
c00202ee:	53                   	push   ebx
c00202ef:	e8 26 05 ff ff       	call   c001081a <createPartitionsForDisk(PhysicalDisk*)>
c00202f4:	83 c4 10             	add    esp,0x10
c00202f7:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00202fe:	74 2d                	je     c002032d <SATA::open(int, int, void*)+0x1ef>
c0020300:	83 ec 0c             	sub    esp,0xc
c0020303:	68 81 69 02 c0       	push   0xc0026981
c0020308:	e8 54 9a fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002030d:	83 c4 10             	add    esp,0x10
c0020310:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020317:	75 14                	jne    c002032d <SATA::open(int, int, void*)+0x1ef>
c0020319:	e4 60                	in     al,0x60
c002031b:	3c 1c                	cmp    al,0x1c
c002031d:	74 04                	je     c0020323 <SATA::open(int, int, void*)+0x1e5>
c002031f:	3c 5a                	cmp    al,0x5a
c0020321:	75 f6                	jne    c0020319 <SATA::open(int, int, void*)+0x1db>
c0020323:	e4 60                	in     al,0x60
c0020325:	3c 5a                	cmp    al,0x5a
c0020327:	74 fa                	je     c0020323 <SATA::open(int, int, void*)+0x1e5>
c0020329:	3c 1c                	cmp    al,0x1c
c002032b:	74 f6                	je     c0020323 <SATA::open(int, int, void*)+0x1e5>
c002032d:	5a                   	pop    edx
c002032e:	31 c0                	xor    eax,eax
c0020330:	5b                   	pop    ebx
c0020331:	5e                   	pop    esi
c0020332:	c3                   	ret    
c0020333:	90                   	nop

c0020334 <SATA::SATA()>:
c0020334:	83 ec 0c             	sub    esp,0xc
c0020337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033b:	83 ec 04             	sub    esp,0x4
c002033e:	68 00 02 00 00       	push   0x200
c0020343:	68 8e 69 02 c0       	push   0xc002698e
c0020348:	50                   	push   eax
c0020349:	e8 b0 e5 fe ff       	call   c000e8fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c002034e:	83 c4 10             	add    esp,0x10
c0020351:	ba 38 6b 02 c0       	mov    edx,0xc0026b38
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	89 10                	mov    DWORD PTR [eax],edx
c002035c:	90                   	nop
c002035d:	83 c4 0c             	add    esp,0xc
c0020360:	c3                   	ret    
c0020361:	90                   	nop

c0020362 <SATA::access(unsigned long long, int, void*, bool)>:
c0020362:	55                   	push   ebp
c0020363:	57                   	push   edi
c0020364:	56                   	push   esi
c0020365:	53                   	push   ebx
c0020366:	83 ec 2c             	sub    esp,0x2c
c0020369:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002036d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020371:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020375:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002037c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020380:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020384:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002038c:	75 19                	jne    c00203a7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002038e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020393:	7e 41                	jle    c00203d6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	68 ad 69 02 c0       	push   0xc00269ad
c002039d:	e8 cf 49 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00203a2:	83 c4 10             	add    esp,0x10
c00203a5:	eb 2f                	jmp    c00203d6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00203a7:	83 ec 0c             	sub    esp,0xc
c00203aa:	68 9e 69 02 c0       	push   0xc002699e
c00203af:	e8 ad 99 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00203b4:	83 c4 10             	add    esp,0x10
c00203b7:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00203be:	75 ce                	jne    c002038e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00203c0:	e4 60                	in     al,0x60
c00203c2:	3c 1c                	cmp    al,0x1c
c00203c4:	74 04                	je     c00203ca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203c6:	3c 5a                	cmp    al,0x5a
c00203c8:	75 f6                	jne    c00203c0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00203ca:	e4 60                	in     al,0x60
c00203cc:	3c 5a                	cmp    al,0x5a
c00203ce:	74 fa                	je     c00203ca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203d0:	3c 1c                	cmp    al,0x1c
c00203d2:	74 f6                	je     c00203ca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00203d4:	eb b8                	jmp    c002038e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00203d6:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00203dd:	75 29                	jne    c0020408 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00203df:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00203e5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00203eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00203f1:	8d 75 02             	lea    esi,[ebp+0x2]
c00203f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203f8:	c1 e6 07             	shl    esi,0x7
c00203fb:	01 c6                	add    esi,eax
c00203fd:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020404:	74 4a                	je     c0020450 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020406:	eb 2f                	jmp    c0020437 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	68 e6 69 02 c0       	push   0xc00269e6
c0020410:	e8 4c 99 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002041f:	75 be                	jne    c00203df <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020421:	e4 60                	in     al,0x60
c0020423:	3c 1c                	cmp    al,0x1c
c0020425:	74 04                	je     c002042b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020427:	3c 5a                	cmp    al,0x5a
c0020429:	75 f6                	jne    c0020421 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002042b:	e4 60                	in     al,0x60
c002042d:	3c 5a                	cmp    al,0x5a
c002042f:	74 fa                	je     c002042b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020431:	3c 1c                	cmp    al,0x1c
c0020433:	74 f6                	je     c002042b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020435:	eb a8                	jmp    c00203df <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020437:	83 ec 0c             	sub    esp,0xc
c002043a:	68 f5 69 02 c0       	push   0xc00269f5
c002043f:	e8 1d 99 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020444:	83 c4 10             	add    esp,0x10
c0020447:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002044e:	74 3d                	je     c002048d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020450:	89 e8                	mov    eax,ebp
c0020452:	c1 e0 07             	shl    eax,0x7
c0020455:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020459:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020463:	52                   	push   edx
c0020464:	52                   	push   edx
c0020465:	56                   	push   esi
c0020466:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002046c:	e8 fd eb ff ff       	call   c001f06e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020475:	83 c4 10             	add    esp,0x10
c0020478:	b8 01 00 00 00       	mov    eax,0x1
c002047d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020482:	75 1d                	jne    c00204a1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020484:	e9 c8 04 00 00       	jmp    c0020951 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020489:	3c 5a                	cmp    al,0x5a
c002048b:	74 0c                	je     c0020499 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002048d:	e4 60                	in     al,0x60
c002048f:	3c 1c                	cmp    al,0x1c
c0020491:	75 f6                	jne    c0020489 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020493:	eb 04                	jmp    c0020499 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020495:	3c 1c                	cmp    al,0x1c
c0020497:	75 b7                	jne    c0020450 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020499:	e4 60                	in     al,0x60
c002049b:	3c 5a                	cmp    al,0x5a
c002049d:	74 fa                	je     c0020499 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002049f:	eb f4                	jmp    c0020495 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00204a1:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00204a8:	74 3a                	je     c00204e4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	68 04 6a 02 c0       	push   0xc0026a04
c00204b2:	e8 aa 98 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00204c1:	74 0d                	je     c00204d0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00204c3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00204c8:	74 34                	je     c00204fe <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00204ca:	eb 1f                	jmp    c00204eb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00204cc:	3c 1c                	cmp    al,0x1c
c00204ce:	74 0c                	je     c00204dc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204d0:	e4 60                	in     al,0x60
c00204d2:	3c 5a                	cmp    al,0x5a
c00204d4:	75 f6                	jne    c00204cc <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00204d6:	eb 04                	jmp    c00204dc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204d8:	3c 1c                	cmp    al,0x1c
c00204da:	75 e7                	jne    c00204c3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00204dc:	e4 60                	in     al,0x60
c00204de:	3c 5a                	cmp    al,0x5a
c00204e0:	74 fa                	je     c00204dc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00204e2:	eb f4                	jmp    c00204d8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00204e4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00204e9:	74 1c                	je     c0020507 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00204eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00204ef:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00204f5:	c1 e1 09             	shl    ecx,0x9
c00204f8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00204fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204fe:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020505:	75 55                	jne    c002055c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020507:	8d 45 02             	lea    eax,[ebp+0x2]
c002050a:	c1 e0 07             	shl    eax,0x7
c002050d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020511:	8b 38                	mov    edi,DWORD PTR [eax]
c0020513:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020519:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002051f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020529:	c1 e0 05             	shl    eax,0x5
c002052c:	01 c7                	add    edi,eax
c002052e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020532:	83 e0 01             	and    eax,0x1
c0020535:	c1 e0 06             	shl    eax,0x6
c0020538:	88 c2                	mov    dl,al
c002053a:	8a 07                	mov    al,BYTE PTR [edi]
c002053c:	83 e0 bf             	and    eax,0xffffffbf
c002053f:	09 d0                	or     eax,edx
c0020541:	88 07                	mov    BYTE PTR [edi],al
c0020543:	8b 07                	mov    eax,DWORD PTR [edi]
c0020545:	25 e0 ff 00 00       	and    eax,0xffe0
c002054a:	0d 05 00 01 00       	or     eax,0x10005
c002054f:	89 07                	mov    DWORD PTR [edi],eax
c0020551:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020558:	74 4d                	je     c00205a7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002055a:	eb 32                	jmp    c002058e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c002055c:	83 ec 0c             	sub    esp,0xc
c002055f:	68 13 6a 02 c0       	push   0xc0026a13
c0020564:	e8 f8 97 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020569:	83 c4 10             	add    esp,0x10
c002056c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020573:	75 92                	jne    c0020507 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020575:	e4 60                	in     al,0x60
c0020577:	3c 1c                	cmp    al,0x1c
c0020579:	74 04                	je     c002057f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002057b:	3c 5a                	cmp    al,0x5a
c002057d:	75 f6                	jne    c0020575 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002057f:	e4 60                	in     al,0x60
c0020581:	3c 5a                	cmp    al,0x5a
c0020583:	74 fa                	je     c002057f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020585:	3c 1c                	cmp    al,0x1c
c0020587:	74 f6                	je     c002057f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020589:	e9 79 ff ff ff       	jmp    c0020507 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002058e:	83 ec 0c             	sub    esp,0xc
c0020591:	68 22 6a 02 c0       	push   0xc0026a22
c0020596:	e8 c6 97 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002059b:	83 c4 10             	add    esp,0x10
c002059e:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00205a5:	74 3b                	je     c00205e2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00205a7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00205ad:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00205b3:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00205b9:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00205bc:	50                   	push   eax
c00205bd:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00205c1:	83 c0 08             	add    eax,0x8
c00205c4:	c1 e0 04             	shl    eax,0x4
c00205c7:	50                   	push   eax
c00205c8:	6a 00                	push   0x0
c00205ca:	56                   	push   esi
c00205cb:	e8 ac 00 fe ff       	call   c000067c <memset>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00205da:	74 33                	je     c002060f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00205dc:	eb 18                	jmp    c00205f6 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00205de:	3c 1c                	cmp    al,0x1c
c00205e0:	74 0c                	je     c00205ee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00205e2:	e4 60                	in     al,0x60
c00205e4:	3c 5a                	cmp    al,0x5a
c00205e6:	75 f6                	jne    c00205de <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00205e8:	eb 04                	jmp    c00205ee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00205ea:	3c 1c                	cmp    al,0x1c
c00205ec:	75 b9                	jne    c00205a7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00205ee:	e4 60                	in     al,0x60
c00205f0:	3c 5a                	cmp    al,0x5a
c00205f2:	74 fa                	je     c00205ee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00205f4:	eb f4                	jmp    c00205ea <SATA::access(unsigned long long, int, void*, bool)+0x288>
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	68 31 6a 02 c0       	push   0xc0026a31
c00205fe:	e8 5e 97 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020603:	83 c4 10             	add    esp,0x10
c0020606:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002060d:	74 48                	je     c0020657 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002060f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020615:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002061b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002061f:	c1 e0 09             	shl    eax,0x9
c0020622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020626:	48                   	dec    eax
c0020627:	25 ff ff 3f 00       	and    eax,0x3fffff
c002062c:	89 c2                	mov    edx,eax
c002062e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020634:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020639:	09 d0                	or     eax,edx
c002063b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020641:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020648:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002064f:	74 33                	je     c0020684 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020651:	eb 18                	jmp    c002066b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020653:	3c 1c                	cmp    al,0x1c
c0020655:	74 0c                	je     c0020663 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020657:	e4 60                	in     al,0x60
c0020659:	3c 5a                	cmp    al,0x5a
c002065b:	75 f6                	jne    c0020653 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c002065d:	eb 04                	jmp    c0020663 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002065f:	3c 1c                	cmp    al,0x1c
c0020661:	75 ac                	jne    c002060f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020663:	e4 60                	in     al,0x60
c0020665:	3c 5a                	cmp    al,0x5a
c0020667:	74 fa                	je     c0020663 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020669:	eb f4                	jmp    c002065f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c002066b:	83 ec 0c             	sub    esp,0xc
c002066e:	68 40 6a 02 c0       	push   0xc0026a40
c0020673:	e8 e9 96 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020678:	83 c4 10             	add    esp,0x10
c002067b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020682:	74 63                	je     c00206e7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020684:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020687:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002068b:	66 25 00 7f          	and    ax,0x7f00
c002068f:	66 0d 27 80          	or     ax,0x8027
c0020693:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020698:	66 89 06             	mov    WORD PTR [esi],ax
c002069b:	19 c0                	sbb    eax,eax
c002069d:	83 e0 f0             	and    eax,0xfffffff0
c00206a0:	83 c0 35             	add    eax,0x35
c00206a3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00206a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206aa:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00206ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206b2:	c1 e8 10             	shr    eax,0x10
c00206b5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00206b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00206bc:	c1 e8 18             	shr    eax,0x18
c00206bf:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00206c6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00206c9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00206cd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00206d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206d4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00206d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00206db:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00206df:	74 33                	je     c0020714 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00206e1:	eb 18                	jmp    c00206fb <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00206e3:	3c 1c                	cmp    al,0x1c
c00206e5:	74 0c                	je     c00206f3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00206e7:	e4 60                	in     al,0x60
c00206e9:	3c 5a                	cmp    al,0x5a
c00206eb:	75 f6                	jne    c00206e3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00206ed:	eb 04                	jmp    c00206f3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00206ef:	3c 1c                	cmp    al,0x1c
c00206f1:	75 91                	jne    c0020684 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00206f3:	e4 60                	in     al,0x60
c00206f5:	3c 5a                	cmp    al,0x5a
c00206f7:	74 fa                	je     c00206f3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00206f9:	eb f4                	jmp    c00206ef <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00206fb:	83 ec 0c             	sub    esp,0xc
c00206fe:	68 4f 6a 02 c0       	push   0xc0026a4f
c0020703:	e8 59 96 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020712:	74 11                	je     c0020725 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020714:	89 e8                	mov    eax,ebp
c0020716:	31 f6                	xor    esi,esi
c0020718:	c1 e0 07             	shl    eax,0x7
c002071b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002071f:	eb 21                	jmp    c0020742 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020721:	3c 1c                	cmp    al,0x1c
c0020723:	74 0c                	je     c0020731 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020725:	e4 60                	in     al,0x60
c0020727:	3c 5a                	cmp    al,0x5a
c0020729:	75 f6                	jne    c0020721 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002072b:	eb 04                	jmp    c0020731 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002072d:	3c 1c                	cmp    al,0x1c
c002072f:	75 e3                	jne    c0020714 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020731:	e4 60                	in     al,0x60
c0020733:	3c 5a                	cmp    al,0x5a
c0020735:	74 fa                	je     c0020731 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020737:	eb f4                	jmp    c002072d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020739:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002073f:	74 0c                	je     c002074d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020741:	46                   	inc    esi
c0020742:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020748:	80 e2 88             	and    dl,0x88
c002074b:	75 ec                	jne    c0020739 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002074d:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020754:	74 3d                	je     c0020793 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	68 5e 6a 02 c0       	push   0xc0026a5e
c002075e:	e8 fe 95 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020763:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c0020769:	83 c4 10             	add    esp,0x10
c002076c:	f6 c2 80             	test   dl,0x80
c002076f:	74 0e                	je     c002077f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020771:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020777:	75 2f                	jne    c00207a8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020779:	eb 20                	jmp    c002079b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002077b:	3c 1c                	cmp    al,0x1c
c002077d:	74 0c                	je     c002078b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002077f:	e4 60                	in     al,0x60
c0020781:	3c 5a                	cmp    al,0x5a
c0020783:	75 f6                	jne    c002077b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020785:	eb 04                	jmp    c002078b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020787:	3c 1c                	cmp    al,0x1c
c0020789:	75 e6                	jne    c0020771 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002078b:	e4 60                	in     al,0x60
c002078d:	3c 5a                	cmp    al,0x5a
c002078f:	74 fa                	je     c002078b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020791:	eb f4                	jmp    c0020787 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020793:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020799:	75 13                	jne    c00207ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002079b:	83 ec 0c             	sub    esp,0xc
c002079e:	68 6e 6a 02 c0       	push   0xc0026a6e
c00207a3:	e9 d2 00 00 00       	jmp    c002087a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00207a8:	0f ba e2 0b          	bt     edx,0xb
c00207ac:	72 25                	jb     c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00207ae:	be 01 00 00 00       	mov    esi,0x1
c00207b3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00207b7:	89 e8                	mov    eax,ebp
c00207b9:	d3 e6                	shl    esi,cl
c00207bb:	c1 e0 07             	shl    eax,0x7
c00207be:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207c2:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00207c9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00207cf:	74 4a                	je     c002081b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00207d1:	eb 2f                	jmp    c0020802 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00207d3:	83 ec 0c             	sub    esp,0xc
c00207d6:	68 7c 6a 02 c0       	push   0xc0026a7c
c00207db:	e8 81 95 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00207e0:	83 c4 10             	add    esp,0x10
c00207e3:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00207ea:	75 c2                	jne    c00207ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00207ec:	e4 60                	in     al,0x60
c00207ee:	3c 5a                	cmp    al,0x5a
c00207f0:	74 04                	je     c00207f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00207f2:	3c 1c                	cmp    al,0x1c
c00207f4:	75 f6                	jne    c00207ec <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00207f6:	e4 60                	in     al,0x60
c00207f8:	3c 5a                	cmp    al,0x5a
c00207fa:	74 fa                	je     c00207f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00207fc:	3c 1c                	cmp    al,0x1c
c00207fe:	74 f6                	je     c00207f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020800:	eb ac                	jmp    c00207ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020802:	83 ec 0c             	sub    esp,0xc
c0020805:	68 8c 6a 02 c0       	push   0xc0026a8c
c002080a:	e8 52 95 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020819:	74 0f                	je     c002082a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002081b:	89 e8                	mov    eax,ebp
c002081d:	c1 e0 07             	shl    eax,0x7
c0020820:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020824:	eb 24                	jmp    c002084a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020826:	3c 1c                	cmp    al,0x1c
c0020828:	74 0c                	je     c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002082a:	e4 60                	in     al,0x60
c002082c:	3c 5a                	cmp    al,0x5a
c002082e:	75 f6                	jne    c0020826 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020830:	eb 04                	jmp    c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020832:	3c 1c                	cmp    al,0x1c
c0020834:	75 e5                	jne    c002081b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020836:	e4 60                	in     al,0x60
c0020838:	3c 5a                	cmp    al,0x5a
c002083a:	74 fa                	je     c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002083c:	eb f4                	jmp    c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002083e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020844:	0f ba e2 1e          	bt     edx,0x1e
c0020848:	72 28                	jb     c0020872 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002084a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020850:	85 d6                	test   esi,edx
c0020852:	75 ea                	jne    c002083e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020854:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002085b:	75 2f                	jne    c002088c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c002085d:	89 e8                	mov    eax,ebp
c002085f:	c1 e0 07             	shl    eax,0x7
c0020862:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020866:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002086c:	0f ba e0 1e          	bt     eax,0x1e
c0020870:	73 49                	jae    c00208bb <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020872:	83 ec 0c             	sub    esp,0xc
c0020875:	68 9c 6a 02 c0       	push   0xc0026a9c
c002087a:	e8 94 c7 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c002087f:	83 c4 10             	add    esp,0x10
c0020882:	b8 01 00 00 00       	mov    eax,0x1
c0020887:	e9 c5 00 00 00       	jmp    c0020951 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002088c:	83 ec 0c             	sub    esp,0xc
c002088f:	68 ad 6a 02 c0       	push   0xc0026aad
c0020894:	e8 c8 94 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020899:	83 c4 10             	add    esp,0x10
c002089c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00208a3:	75 b8                	jne    c002085d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00208a5:	e4 60                	in     al,0x60
c00208a7:	3c 5a                	cmp    al,0x5a
c00208a9:	74 04                	je     c00208af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208ab:	3c 1c                	cmp    al,0x1c
c00208ad:	75 f6                	jne    c00208a5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00208af:	e4 60                	in     al,0x60
c00208b1:	3c 5a                	cmp    al,0x5a
c00208b3:	74 fa                	je     c00208af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208b5:	3c 1c                	cmp    al,0x1c
c00208b7:	74 f6                	je     c00208af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00208b9:	eb a2                	jmp    c002085d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00208bb:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00208c2:	74 3a                	je     c00208fe <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00208c4:	83 ec 0c             	sub    esp,0xc
c00208c7:	68 bd 6a 02 c0       	push   0xc0026abd
c00208cc:	e8 90 94 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00208d1:	83 c4 10             	add    esp,0x10
c00208d4:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00208db:	74 0d                	je     c00208ea <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00208dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00208e2:	75 31                	jne    c0020915 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00208e4:	eb 1f                	jmp    c0020905 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00208e6:	3c 1c                	cmp    al,0x1c
c00208e8:	74 0c                	je     c00208f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00208ea:	e4 60                	in     al,0x60
c00208ec:	3c 5a                	cmp    al,0x5a
c00208ee:	75 f6                	jne    c00208e6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00208f0:	eb 04                	jmp    c00208f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00208f2:	3c 1c                	cmp    al,0x1c
c00208f4:	75 e7                	jne    c00208dd <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00208f6:	e4 60                	in     al,0x60
c00208f8:	3c 5a                	cmp    al,0x5a
c00208fa:	74 fa                	je     c00208f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00208fc:	eb f4                	jmp    c00208f2 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00208fe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020903:	75 19                	jne    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020905:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002090b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002090f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020913:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020915:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002091c:	75 04                	jne    c0020922 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002091e:	31 c0                	xor    eax,eax
c0020920:	eb 2f                	jmp    c0020951 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020922:	83 ec 0c             	sub    esp,0xc
c0020925:	68 cd 6a 02 c0       	push   0xc0026acd
c002092a:	e8 32 94 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c002092f:	83 c4 10             	add    esp,0x10
c0020932:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020939:	75 e3                	jne    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002093b:	e4 60                	in     al,0x60
c002093d:	3c 1c                	cmp    al,0x1c
c002093f:	74 04                	je     c0020945 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020941:	3c 5a                	cmp    al,0x5a
c0020943:	75 f6                	jne    c002093b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020945:	e4 60                	in     al,0x60
c0020947:	3c 5a                	cmp    al,0x5a
c0020949:	74 fa                	je     c0020945 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002094b:	3c 1c                	cmp    al,0x1c
c002094d:	74 f6                	je     c0020945 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002094f:	eb cd                	jmp    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020951:	83 c4 2c             	add    esp,0x2c
c0020954:	5b                   	pop    ebx
c0020955:	5e                   	pop    esi
c0020956:	5f                   	pop    edi
c0020957:	5d                   	pop    ebp
c0020958:	c3                   	ret    
c0020959:	90                   	nop

c002095a <SATA::read(unsigned long long, int, void*)>:
c002095a:	55                   	push   ebp
c002095b:	57                   	push   edi
c002095c:	56                   	push   esi
c002095d:	53                   	push   ebx
c002095e:	83 ec 0c             	sub    esp,0xc
c0020961:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020965:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020969:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002096d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020971:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020978:	74 2d                	je     c00209a7 <SATA::read(unsigned long long, int, void*)+0x4d>
c002097a:	83 ec 0c             	sub    esp,0xc
c002097d:	68 dd 6a 02 c0       	push   0xc0026add
c0020982:	e8 da 93 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020991:	75 14                	jne    c00209a7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020993:	e4 60                	in     al,0x60
c0020995:	3c 1c                	cmp    al,0x1c
c0020997:	74 04                	je     c002099d <SATA::read(unsigned long long, int, void*)+0x43>
c0020999:	3c 5a                	cmp    al,0x5a
c002099b:	75 f6                	jne    c0020993 <SATA::read(unsigned long long, int, void*)+0x39>
c002099d:	e4 60                	in     al,0x60
c002099f:	3c 5a                	cmp    al,0x5a
c00209a1:	74 fa                	je     c002099d <SATA::read(unsigned long long, int, void*)+0x43>
c00209a3:	3c 1c                	cmp    al,0x1c
c00209a5:	74 f6                	je     c002099d <SATA::read(unsigned long long, int, void*)+0x43>
c00209a7:	8d 53 ff             	lea    edx,[ebx-0x1]
c00209aa:	b8 04 00 00 00       	mov    eax,0x4
c00209af:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00209b5:	0f 87 96 00 00 00    	ja     c0020a51 <SATA::read(unsigned long long, int, void*)+0xf7>
c00209bb:	b8 06 00 00 00       	mov    eax,0x6
c00209c0:	85 ed                	test   ebp,ebp
c00209c2:	0f 84 89 00 00 00    	je     c0020a51 <SATA::read(unsigned long long, int, void*)+0xf7>
c00209c8:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00209cf:	74 2d                	je     c00209fe <SATA::read(unsigned long long, int, void*)+0xa4>
c00209d1:	83 ec 0c             	sub    esp,0xc
c00209d4:	68 ea 6a 02 c0       	push   0xc0026aea
c00209d9:	e8 83 93 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c00209de:	83 c4 10             	add    esp,0x10
c00209e1:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00209e8:	75 14                	jne    c00209fe <SATA::read(unsigned long long, int, void*)+0xa4>
c00209ea:	e4 60                	in     al,0x60
c00209ec:	3c 5a                	cmp    al,0x5a
c00209ee:	74 04                	je     c00209f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00209f0:	3c 1c                	cmp    al,0x1c
c00209f2:	75 f6                	jne    c00209ea <SATA::read(unsigned long long, int, void*)+0x90>
c00209f4:	e4 60                	in     al,0x60
c00209f6:	3c 5a                	cmp    al,0x5a
c00209f8:	74 fa                	je     c00209f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00209fa:	3c 1c                	cmp    al,0x1c
c00209fc:	74 f6                	je     c00209f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00209fe:	50                   	push   eax
c00209ff:	50                   	push   eax
c0020a00:	6a 00                	push   0x0
c0020a02:	55                   	push   ebp
c0020a03:	53                   	push   ebx
c0020a04:	57                   	push   edi
c0020a05:	56                   	push   esi
c0020a06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a0a:	e8 53 f9 ff ff       	call   c0020362 <SATA::access(unsigned long long, int, void*, bool)>
c0020a0f:	83 c4 20             	add    esp,0x20
c0020a12:	89 c3                	mov    ebx,eax
c0020a14:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020a1b:	74 2d                	je     c0020a4a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020a1d:	83 ec 0c             	sub    esp,0xc
c0020a20:	68 f7 6a 02 c0       	push   0xc0026af7
c0020a25:	e8 37 93 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020a2a:	83 c4 10             	add    esp,0x10
c0020a2d:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020a34:	75 14                	jne    c0020a4a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020a36:	e4 60                	in     al,0x60
c0020a38:	3c 5a                	cmp    al,0x5a
c0020a3a:	74 04                	je     c0020a40 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a3c:	3c 1c                	cmp    al,0x1c
c0020a3e:	75 f6                	jne    c0020a36 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020a40:	e4 60                	in     al,0x60
c0020a42:	3c 5a                	cmp    al,0x5a
c0020a44:	74 fa                	je     c0020a40 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a46:	3c 1c                	cmp    al,0x1c
c0020a48:	74 f6                	je     c0020a40 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020a4a:	31 c0                	xor    eax,eax
c0020a4c:	85 db                	test   ebx,ebx
c0020a4e:	0f 95 c0             	setne  al
c0020a51:	83 c4 0c             	add    esp,0xc
c0020a54:	5b                   	pop    ebx
c0020a55:	5e                   	pop    esi
c0020a56:	5f                   	pop    edi
c0020a57:	5d                   	pop    ebp
c0020a58:	c3                   	ret    
c0020a59:	90                   	nop

c0020a5a <SATA::write(unsigned long long, int, void*)>:
c0020a5a:	55                   	push   ebp
c0020a5b:	57                   	push   edi
c0020a5c:	56                   	push   esi
c0020a5d:	53                   	push   ebx
c0020a5e:	83 ec 1c             	sub    esp,0x1c
c0020a61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a65:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020a69:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020a6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a71:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020a78:	74 2d                	je     c0020aa7 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020a7a:	83 ec 0c             	sub    esp,0xc
c0020a7d:	68 04 6b 02 c0       	push   0xc0026b04
c0020a82:	e8 da 92 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020a87:	83 c4 10             	add    esp,0x10
c0020a8a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020a91:	75 14                	jne    c0020aa7 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020a93:	e4 60                	in     al,0x60
c0020a95:	3c 1c                	cmp    al,0x1c
c0020a97:	74 04                	je     c0020a9d <SATA::write(unsigned long long, int, void*)+0x43>
c0020a99:	3c 5a                	cmp    al,0x5a
c0020a9b:	75 f6                	jne    c0020a93 <SATA::write(unsigned long long, int, void*)+0x39>
c0020a9d:	e4 60                	in     al,0x60
c0020a9f:	3c 5a                	cmp    al,0x5a
c0020aa1:	74 fa                	je     c0020a9d <SATA::write(unsigned long long, int, void*)+0x43>
c0020aa3:	3c 1c                	cmp    al,0x1c
c0020aa5:	74 f6                	je     c0020a9d <SATA::write(unsigned long long, int, void*)+0x43>
c0020aa7:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020aaa:	b8 04 00 00 00       	mov    eax,0x4
c0020aaf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020ab5:	0f 87 bd 00 00 00    	ja     c0020b78 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020abb:	b8 06 00 00 00       	mov    eax,0x6
c0020ac0:	85 db                	test   ebx,ebx
c0020ac2:	0f 84 b0 00 00 00    	je     c0020b78 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020ac8:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020acf:	74 2d                	je     c0020afe <SATA::write(unsigned long long, int, void*)+0xa4>
c0020ad1:	83 ec 0c             	sub    esp,0xc
c0020ad4:	68 12 6b 02 c0       	push   0xc0026b12
c0020ad9:	e8 83 92 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020ade:	83 c4 10             	add    esp,0x10
c0020ae1:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020ae8:	75 14                	jne    c0020afe <SATA::write(unsigned long long, int, void*)+0xa4>
c0020aea:	e4 60                	in     al,0x60
c0020aec:	3c 1c                	cmp    al,0x1c
c0020aee:	74 04                	je     c0020af4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020af0:	3c 5a                	cmp    al,0x5a
c0020af2:	75 f6                	jne    c0020aea <SATA::write(unsigned long long, int, void*)+0x90>
c0020af4:	e4 60                	in     al,0x60
c0020af6:	3c 5a                	cmp    al,0x5a
c0020af8:	74 fa                	je     c0020af4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020afa:	3c 1c                	cmp    al,0x1c
c0020afc:	74 f6                	je     c0020af4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020afe:	c1 e5 09             	shl    ebp,0x9
c0020b01:	01 dd                	add    ebp,ebx
c0020b03:	89 f0                	mov    eax,esi
c0020b05:	89 fa                	mov    edx,edi
c0020b07:	83 c0 01             	add    eax,0x1
c0020b0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b0e:	83 d2 00             	adc    edx,0x0
c0020b11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b15:	50                   	push   eax
c0020b16:	50                   	push   eax
c0020b17:	6a 01                	push   0x1
c0020b19:	53                   	push   ebx
c0020b1a:	81 c3 00 02 00 00    	add    ebx,0x200
c0020b20:	6a 01                	push   0x1
c0020b22:	57                   	push   edi
c0020b23:	56                   	push   esi
c0020b24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020b28:	e8 35 f8 ff ff       	call   c0020362 <SATA::access(unsigned long long, int, void*, bool)>
c0020b2d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020b31:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020b35:	83 c4 20             	add    esp,0x20
c0020b38:	39 dd                	cmp    ebp,ebx
c0020b3a:	75 c7                	jne    c0020b03 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020b3c:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020b43:	75 04                	jne    c0020b49 <SATA::write(unsigned long long, int, void*)+0xef>
c0020b45:	31 c0                	xor    eax,eax
c0020b47:	eb 2f                	jmp    c0020b78 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	68 20 6b 02 c0       	push   0xc0026b20
c0020b51:	e8 0b 92 fe ff       	call   c0009d61 <Krnl::setBootMessage(char const*)>
c0020b56:	83 c4 10             	add    esp,0x10
c0020b59:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020b60:	75 e3                	jne    c0020b45 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b62:	e4 60                	in     al,0x60
c0020b64:	3c 5a                	cmp    al,0x5a
c0020b66:	74 04                	je     c0020b6c <SATA::write(unsigned long long, int, void*)+0x112>
c0020b68:	3c 1c                	cmp    al,0x1c
c0020b6a:	75 f6                	jne    c0020b62 <SATA::write(unsigned long long, int, void*)+0x108>
c0020b6c:	e4 60                	in     al,0x60
c0020b6e:	3c 5a                	cmp    al,0x5a
c0020b70:	74 fa                	je     c0020b6c <SATA::write(unsigned long long, int, void*)+0x112>
c0020b72:	3c 1c                	cmp    al,0x1c
c0020b74:	74 f6                	je     c0020b6c <SATA::write(unsigned long long, int, void*)+0x112>
c0020b76:	eb cd                	jmp    c0020b45 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b78:	83 c4 1c             	add    esp,0x1c
c0020b7b:	5b                   	pop    ebx
c0020b7c:	5e                   	pop    esi
c0020b7d:	5f                   	pop    edi
c0020b7e:	5d                   	pop    ebp
c0020b7f:	c3                   	ret    

c0020b80 <SATAPI::write(unsigned long long, int, void*)>:
c0020b80:	b8 03 00 00 00       	mov    eax,0x3
c0020b85:	c3                   	ret    

c0020b86 <SATAPI::close(int, int, void*)>:
c0020b86:	83 ec 0c             	sub    esp,0xc
c0020b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b93:	85 c0                	test   eax,eax
c0020b95:	74 0c                	je     c0020ba3 <SATAPI::close(int, int, void*)+0x1d>
c0020b97:	83 ec 0c             	sub    esp,0xc
c0020b9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b9c:	50                   	push   eax
c0020b9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	31 c0                	xor    eax,eax
c0020ba5:	83 c4 0c             	add    esp,0xc
c0020ba8:	c3                   	ret    
c0020ba9:	90                   	nop

c0020baa <SATAPI::SATAPI()>:
c0020baa:	83 ec 0c             	sub    esp,0xc
c0020bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb1:	83 ec 04             	sub    esp,0x4
c0020bb4:	68 00 08 00 00       	push   0x800
c0020bb9:	68 68 6b 02 c0       	push   0xc0026b68
c0020bbe:	50                   	push   eax
c0020bbf:	e8 3a dd fe ff       	call   c000e8fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	ba a4 6c 02 c0       	mov    edx,0xc0026ca4
c0020bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd0:	89 10                	mov    DWORD PTR [eax],edx
c0020bd2:	90                   	nop
c0020bd3:	83 c4 0c             	add    esp,0xc
c0020bd6:	c3                   	ret    
c0020bd7:	90                   	nop

c0020bd8 <SATAPI::diskRemoved()>:
c0020bd8:	c3                   	ret    
c0020bd9:	90                   	nop

c0020bda <SATAPI::diskInserted()>:
c0020bda:	83 ec 18             	sub    esp,0x18
c0020bdd:	68 74 6b 02 c0       	push   0xc0026b74
c0020be2:	e8 2c c4 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020beb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020bf2:	83 c4 1c             	add    esp,0x1c
c0020bf5:	c3                   	ret    

c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020bf6:	55                   	push   ebp
c0020bf7:	57                   	push   edi
c0020bf8:	56                   	push   esi
c0020bf9:	53                   	push   ebx
c0020bfa:	83 ec 38             	sub    esp,0x38
c0020bfd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020c01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020c05:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020c09:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020c0d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020c11:	68 8c 6b 02 c0       	push   0xc0026b8c
c0020c16:	e8 f8 c3 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020c1b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020c21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c2b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020c31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c35:	c1 e0 07             	shl    eax,0x7
c0020c38:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020c3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020c40:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020c4a:	5a                   	pop    edx
c0020c4b:	59                   	pop    ecx
c0020c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c50:	8d 58 02             	lea    ebx,[eax+0x2]
c0020c53:	c1 e3 07             	shl    ebx,0x7
c0020c56:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020c5a:	53                   	push   ebx
c0020c5b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020c61:	e8 08 e4 ff ff       	call   c001f06e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020c6a:	83 c4 10             	add    esp,0x10
c0020c6d:	b8 01 00 00 00       	mov    eax,0x1
c0020c72:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020c77:	0f 84 ff 01 00 00    	je     c0020e7c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020c7d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c85:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020c8b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020c91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c95:	c1 e1 05             	shl    ecx,0x5
c0020c98:	01 c8                	add    eax,ecx
c0020c9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c9c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020ca2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020ca8:	89 08                	mov    DWORD PTR [eax],ecx
c0020caa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020cb0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020cb6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020cbc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020cbf:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020cc2:	50                   	push   eax
c0020cc3:	68 90 00 00 00       	push   0x90
c0020cc8:	6a 00                	push   0x0
c0020cca:	53                   	push   ebx
c0020ccb:	e8 ac f9 fd ff       	call   c000067c <memset>
c0020cd0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020cd4:	b9 0c 00 00 00       	mov    ecx,0xc
c0020cd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020cdb:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020ce1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020ce5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020ceb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020cef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020cf3:	48                   	dec    eax
c0020cf4:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020cf9:	89 c1                	mov    ecx,eax
c0020cfb:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020d01:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020d06:	09 c8                	or     eax,ecx
c0020d08:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020d0e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020d11:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020d18:	66 25 00 7f          	and    ax,0x7f00
c0020d1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020d20:	66 0d 27 80          	or     ax,0x8027
c0020d24:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020d28:	66 89 03             	mov    WORD PTR [ebx],ax
c0020d2b:	89 d0                	mov    eax,edx
c0020d2d:	c1 ea 18             	shr    edx,0x18
c0020d30:	c1 e8 10             	shr    eax,0x10
c0020d33:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020d36:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020d39:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020d3d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020d40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d44:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020d47:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d4b:	83 c4 10             	add    esp,0x10
c0020d4e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020d52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d56:	31 c0                	xor    eax,eax
c0020d58:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020d5e:	80 e1 88             	and    cl,0x88
c0020d61:	74 0a                	je     c0020d6d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020d63:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d68:	74 0a                	je     c0020d74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020d6a:	40                   	inc    eax
c0020d6b:	eb eb                	jmp    c0020d58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020d6d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d72:	75 0a                	jne    c0020d7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020d74:	83 ec 0c             	sub    esp,0xc
c0020d77:	68 a6 6b 02 c0       	push   0xc0026ba6
c0020d7c:	eb 43                	jmp    c0020dc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020d7e:	be 01 00 00 00       	mov    esi,0x1
c0020d83:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d8b:	d3 e6                	shl    esi,cl
c0020d8d:	c1 e7 07             	shl    edi,0x7
c0020d90:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020d96:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020d9b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020d9f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020da5:	85 c6                	test   esi,eax
c0020da7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020dad:	0f 84 96 00 00 00    	je     c0020e49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020db3:	0f ba e0 1e          	bt     eax,0x1e
c0020db7:	73 1a                	jae    c0020dd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020db9:	83 ec 0c             	sub    esp,0xc
c0020dbc:	68 bb 6b 02 c0       	push   0xc0026bbb
c0020dc1:	e8 4d c2 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020dc6:	83 c4 10             	add    esp,0x10
c0020dc9:	b8 01 00 00 00       	mov    eax,0x1
c0020dce:	e9 a9 00 00 00       	jmp    c0020e7c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020dd3:	83 fb 0d             	cmp    ebx,0xd
c0020dd6:	77 12                	ja     c0020dea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020dd8:	83 ec 0c             	sub    esp,0xc
c0020ddb:	68 c8 00 00 00       	push   0xc8
c0020de0:	e8 03 79 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c0020de5:	83 c4 10             	add    esp,0x10
c0020de8:	eb 2a                	jmp    c0020e14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020dea:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020df0:	83 f8 0d             	cmp    eax,0xd
c0020df3:	77 0a                	ja     c0020dff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	68 58 02 00 00       	push   0x258
c0020dfd:	eb 28                	jmp    c0020e27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020dff:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020e05:	83 f8 0d             	cmp    eax,0xd
c0020e08:	77 0a                	ja     c0020e14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020e0a:	83 ec 0c             	sub    esp,0xc
c0020e0d:	68 dc 05 00 00       	push   0x5dc
c0020e12:	eb 13                	jmp    c0020e27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020e14:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020e1a:	83 f8 0d             	cmp    eax,0xd
c0020e1d:	77 10                	ja     c0020e2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0020e1f:	83 ec 0c             	sub    esp,0xc
c0020e22:	68 c4 09 00 00       	push   0x9c4
c0020e27:	e8 bc 78 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c0020e2c:	83 c4 10             	add    esp,0x10
c0020e2f:	43                   	inc    ebx
c0020e30:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020e36:	0f 85 63 ff ff ff    	jne    c0020d9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0020e3c:	83 ec 0c             	sub    esp,0xc
c0020e3f:	68 ce 6b 02 c0       	push   0xc0026bce
c0020e44:	e9 78 ff ff ff       	jmp    c0020dc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020e49:	0f ba e0 1e          	bt     eax,0x1e
c0020e4d:	73 0d                	jae    c0020e5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0020e4f:	83 ec 0c             	sub    esp,0xc
c0020e52:	68 e2 6b 02 c0       	push   0xc0026be2
c0020e57:	e9 65 ff ff ff       	jmp    c0020dc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020e5c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020e61:	74 17                	je     c0020e7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020e63:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020e68:	74 10                	je     c0020e7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020e6a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020e70:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020e74:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e7a:	31 c0                	xor    eax,eax
c0020e7c:	83 c4 2c             	add    esp,0x2c
c0020e7f:	5b                   	pop    ebx
c0020e80:	5e                   	pop    esi
c0020e81:	5f                   	pop    edi
c0020e82:	5d                   	pop    ebp
c0020e83:	c3                   	ret    

c0020e84 <SATAPI::eject()>:
c0020e84:	57                   	push   edi
c0020e85:	b9 03 00 00 00       	mov    ecx,0x3
c0020e8a:	83 ec 18             	sub    esp,0x18
c0020e8d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020e91:	fc                   	cld    
c0020e92:	31 c0                	xor    eax,eax
c0020e94:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e96:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e9b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020ea0:	50                   	push   eax
c0020ea1:	6a 00                	push   0x0
c0020ea3:	6a 00                	push   0x0
c0020ea5:	6a 00                	push   0x0
c0020ea7:	6a 00                	push   0x0
c0020ea9:	6a 02                	push   0x2
c0020eab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020eaf:	50                   	push   eax
c0020eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020eb4:	e8 3d fd ff ff       	call   c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020eb9:	31 c0                	xor    eax,eax
c0020ebb:	83 c4 38             	add    esp,0x38
c0020ebe:	5f                   	pop    edi
c0020ebf:	c3                   	ret    

c0020ec0 <SATAPI::detectMedia()>:
c0020ec0:	56                   	push   esi
c0020ec1:	53                   	push   ebx
c0020ec2:	83 ec 30             	sub    esp,0x30
c0020ec5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020ec9:	68 f7 6b 02 c0       	push   0xc0026bf7
c0020ece:	e8 40 c1 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020ed3:	83 c4 0c             	add    esp,0xc
c0020ed6:	6a 0c                	push   0xc
c0020ed8:	6a 00                	push   0x0
c0020eda:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020ede:	56                   	push   esi
c0020edf:	e8 98 f7 fd ff       	call   c000067c <memset>
c0020ee4:	83 c4 0c             	add    esp,0xc
c0020ee7:	6a 00                	push   0x0
c0020ee9:	6a 00                	push   0x0
c0020eeb:	6a 00                	push   0x0
c0020eed:	6a 00                	push   0x0
c0020eef:	6a 00                	push   0x0
c0020ef1:	56                   	push   esi
c0020ef2:	53                   	push   ebx
c0020ef3:	e8 fe fc ff ff       	call   c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ef8:	83 c4 20             	add    esp,0x20
c0020efb:	48                   	dec    eax
c0020efc:	74 34                	je     c0020f32 <SATAPI::detectMedia()+0x72>
c0020efe:	50                   	push   eax
c0020eff:	6a 0c                	push   0xc
c0020f01:	6a 00                	push   0x0
c0020f03:	56                   	push   esi
c0020f04:	e8 73 f7 fd ff       	call   c000067c <memset>
c0020f09:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020f0e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020f13:	83 c4 0c             	add    esp,0xc
c0020f16:	6a 01                	push   0x1
c0020f18:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020f1c:	50                   	push   eax
c0020f1d:	6a 00                	push   0x0
c0020f1f:	6a 00                	push   0x0
c0020f21:	6a 12                	push   0x12
c0020f23:	56                   	push   esi
c0020f24:	53                   	push   ebx
c0020f25:	e8 cc fc ff ff       	call   c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f2a:	83 c4 20             	add    esp,0x20
c0020f2d:	48                   	dec    eax
c0020f2e:	75 39                	jne    c0020f69 <SATAPI::detectMedia()+0xa9>
c0020f30:	eb 1e                	jmp    c0020f50 <SATAPI::detectMedia()+0x90>
c0020f32:	83 ec 0c             	sub    esp,0xc
c0020f35:	68 0b 6c 02 c0       	push   0xc0026c0b
c0020f3a:	e8 d4 c0 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020f3f:	83 c4 10             	add    esp,0x10
c0020f42:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f49:	74 b3                	je     c0020efe <SATAPI::detectMedia()+0x3e>
c0020f4b:	e9 93 00 00 00       	jmp    c0020fe3 <SATAPI::detectMedia()+0x123>
c0020f50:	83 ec 0c             	sub    esp,0xc
c0020f53:	68 15 6c 02 c0       	push   0xc0026c15
c0020f58:	e8 b6 c0 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020f5d:	83 c4 10             	add    esp,0x10
c0020f60:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f67:	75 7a                	jne    c0020fe3 <SATAPI::detectMedia()+0x123>
c0020f69:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020f6d:	83 e0 7f             	and    eax,0x7f
c0020f70:	3c 70                	cmp    al,0x70
c0020f72:	74 25                	je     c0020f99 <SATAPI::detectMedia()+0xd9>
c0020f74:	83 ec 0c             	sub    esp,0xc
c0020f77:	68 1f 6c 02 c0       	push   0xc0026c1f
c0020f7c:	e8 92 c0 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020f81:	83 c4 10             	add    esp,0x10
c0020f84:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f8b:	75 0c                	jne    c0020f99 <SATAPI::detectMedia()+0xd9>
c0020f8d:	83 ec 0c             	sub    esp,0xc
c0020f90:	53                   	push   ebx
c0020f91:	e8 44 fc ff ff       	call   c0020bda <SATAPI::diskInserted()>
c0020f96:	83 c4 10             	add    esp,0x10
c0020f99:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020f9d:	83 e0 0f             	and    eax,0xf
c0020fa0:	3c 02                	cmp    al,0x2
c0020fa2:	75 16                	jne    c0020fba <SATAPI::detectMedia()+0xfa>
c0020fa4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020fa9:	75 38                	jne    c0020fe3 <SATAPI::detectMedia()+0x123>
c0020fab:	83 ec 0c             	sub    esp,0xc
c0020fae:	68 28 6c 02 c0       	push   0xc0026c28
c0020fb3:	e8 5b c0 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020fb8:	eb 26                	jmp    c0020fe0 <SATAPI::detectMedia()+0x120>
c0020fba:	84 c0                	test   al,al
c0020fbc:	75 25                	jne    c0020fe3 <SATAPI::detectMedia()+0x123>
c0020fbe:	83 ec 0c             	sub    esp,0xc
c0020fc1:	68 31 6c 02 c0       	push   0xc0026c31
c0020fc6:	e8 48 c0 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0020fcb:	83 c4 10             	add    esp,0x10
c0020fce:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020fd5:	75 0c                	jne    c0020fe3 <SATAPI::detectMedia()+0x123>
c0020fd7:	83 ec 0c             	sub    esp,0xc
c0020fda:	53                   	push   ebx
c0020fdb:	e8 fa fb ff ff       	call   c0020bda <SATAPI::diskInserted()>
c0020fe0:	83 c4 10             	add    esp,0x10
c0020fe3:	83 c4 24             	add    esp,0x24
c0020fe6:	5b                   	pop    ebx
c0020fe7:	5e                   	pop    esi
c0020fe8:	c3                   	ret    
c0020fe9:	90                   	nop

c0020fea <SATAPI::open(int, int, void*)>:
c0020fea:	56                   	push   esi
c0020feb:	53                   	push   ebx
c0020fec:	51                   	push   ecx
c0020fed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ff5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020fff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021005:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002100f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021013:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002101d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021023:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002102a:	e8 8f 93 fe ff       	call   c000a3be <Phys::allocatePage()>
c002102f:	89 c6                	mov    esi,eax
c0021031:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021037:	81 c6 00 10 00 00    	add    esi,0x1000
c002103d:	e8 7c 93 fe ff       	call   c000a3be <Phys::allocatePage()>
c0021042:	39 c6                	cmp    esi,eax
c0021044:	74 10                	je     c0021056 <SATAPI::open(int, int, void*)+0x6c>
c0021046:	83 ec 0c             	sub    esp,0xc
c0021049:	68 3b 6c 02 c0       	push   0xc0026c3b
c002104e:	e8 1e 3d ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0021053:	83 c4 10             	add    esp,0x10
c0021056:	83 ec 0c             	sub    esp,0xc
c0021059:	6a 02                	push   0x2
c002105b:	e8 59 ac fe ff       	call   c000bcb9 <Virt::allocateKernelVirtualPages(int)>
c0021060:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021066:	6a 03                	push   0x3
c0021068:	50                   	push   eax
c0021069:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002106f:	ff 35 d4 7d 02 c0    	push   DWORD PTR ds:0xc0027dd4
c0021075:	e8 aa b2 fe ff       	call   c000c324 <VAS::mapPage(unsigned long, unsigned long, int)>
c002107a:	83 c4 14             	add    esp,0x14
c002107d:	68 74 01 00 00       	push   0x174
c0021082:	e8 80 8c fe ff       	call   c0009d07 <malloc>
c0021087:	83 c4 0c             	add    esp,0xc
c002108a:	89 c6                	mov    esi,eax
c002108c:	6a 00                	push   0x0
c002108e:	68 ff ff ff 7f       	push   0x7fffffff
c0021093:	6a 00                	push   0x0
c0021095:	6a 00                	push   0x0
c0021097:	53                   	push   ebx
c0021098:	68 51 6c 02 c0       	push   0xc0026c51
c002109d:	50                   	push   eax
c002109e:	e8 01 f3 fe ff       	call   c00103a4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00210a3:	83 c4 14             	add    esp,0x14
c00210a6:	56                   	push   esi
c00210a7:	e8 ae f3 fe ff       	call   c001045a <LogicalDisk::assignDriveLetter()>
c00210ac:	5a                   	pop    edx
c00210ad:	0f be c0             	movsx  eax,al
c00210b0:	59                   	pop    ecx
c00210b1:	50                   	push   eax
c00210b2:	68 e7 68 02 c0       	push   0xc00268e7
c00210b7:	e8 57 bf fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00210bc:	58                   	pop    eax
c00210bd:	5a                   	pop    edx
c00210be:	56                   	push   esi
c00210bf:	53                   	push   ebx
c00210c0:	e8 01 d4 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c00210c5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00210cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210ce:	e8 93 d8 fe ff       	call   c000e966 <PhysicalDisk::startCache()>
c00210d3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00210da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210dd:	e8 de fd ff ff       	call   c0020ec0 <SATAPI::detectMedia()>
c00210e2:	83 c4 14             	add    esp,0x14
c00210e5:	31 c0                	xor    eax,eax
c00210e7:	5b                   	pop    ebx
c00210e8:	5e                   	pop    esi
c00210e9:	c3                   	ret    

c00210ea <SATAPI::read(unsigned long long, int, void*)>:
c00210ea:	55                   	push   ebp
c00210eb:	57                   	push   edi
c00210ec:	56                   	push   esi
c00210ed:	53                   	push   ebx
c00210ee:	83 ec 48             	sub    esp,0x48
c00210f1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00210f5:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00210f9:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00210fd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021105:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021109:	68 5f 6c 02 c0       	push   0xc0026c5f
c002110e:	e8 00 bf fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	83 fb 04             	cmp    ebx,0x4
c0021119:	7e 10                	jle    c002112b <SATAPI::read(unsigned long long, int, void*)+0x41>
c002111b:	83 ec 0c             	sub    esp,0xc
c002111e:	68 70 6c 02 c0       	push   0xc0026c70
c0021123:	e8 49 3c ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0021128:	83 c4 10             	add    esp,0x10
c002112b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c002112f:	31 ed                	xor    ebp,ebp
c0021131:	b9 03 00 00 00       	mov    ecx,0x3
c0021136:	fc                   	cld    
c0021137:	89 e8                	mov    eax,ebp
c0021139:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002113b:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021140:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021145:	50                   	push   eax
c0021146:	6a 00                	push   0x0
c0021148:	6a 00                	push   0x0
c002114a:	6a 00                	push   0x0
c002114c:	6a 00                	push   0x0
c002114e:	6a 02                	push   0x2
c0021150:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021154:	50                   	push   eax
c0021155:	56                   	push   esi
c0021156:	e8 9b fa ff ff       	call   c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002115b:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002115f:	89 e8                	mov    eax,ebp
c0021161:	b9 03 00 00 00       	mov    ecx,0x3
c0021166:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021168:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002116c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021170:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021175:	86 e0                	xchg   al,ah
c0021177:	c1 c0 10             	rol    eax,0x10
c002117a:	86 e0                	xchg   al,ah
c002117c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021180:	83 c4 1c             	add    esp,0x1c
c0021183:	53                   	push   ebx
c0021184:	c1 e3 0b             	shl    ebx,0xb
c0021187:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002118b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002118f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021193:	53                   	push   ebx
c0021194:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021198:	50                   	push   eax
c0021199:	56                   	push   esi
c002119a:	e8 57 fa ff ff       	call   c0020bf6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002119f:	83 c4 20             	add    esp,0x20
c00211a2:	85 c0                	test   eax,eax
c00211a4:	74 14                	je     c00211ba <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00211a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	56                   	push   esi
c00211ae:	e8 0d fd ff ff       	call   c0020ec0 <SATAPI::detectMedia()>
c00211b3:	83 c4 10             	add    esp,0x10
c00211b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ba:	83 c4 3c             	add    esp,0x3c
c00211bd:	5b                   	pop    ebx
c00211be:	5e                   	pop    esi
c00211bf:	5f                   	pop    edi
c00211c0:	5d                   	pop    ebp
c00211c1:	c3                   	ret    

c00211c2 <APIC::disable()>:
c00211c2:	90                   	nop
c00211c3:	c3                   	ret    

c00211c4 <APIC::close(int, int, void*)>:
c00211c4:	55                   	push   ebp
c00211c5:	89 e5                	mov    ebp,esp
c00211c7:	83 ec 08             	sub    esp,0x8
c00211ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00211cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00211cf:	83 c0 3c             	add    eax,0x3c
c00211d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00211d4:	83 ec 0c             	sub    esp,0xc
c00211d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211da:	ff d0                	call   eax
c00211dc:	83 c4 10             	add    esp,0x10
c00211df:	b8 00 00 00 00       	mov    eax,0x0
c00211e4:	c9                   	leave  
c00211e5:	c3                   	ret    

c00211e6 <IOAPIC::close(int, int, void*)>:
c00211e6:	b8 00 00 00 00       	mov    eax,0x0
c00211eb:	c3                   	ret    

c00211ec <APIC::io_wait()>:
c00211ec:	eb 00                	jmp    c00211ee <APIC::io_wait()+0x2>
c00211ee:	eb 00                	jmp    c00211f0 <APIC::io_wait()+0x4>
c00211f0:	90                   	nop
c00211f1:	c3                   	ret    

c00211f2 <APIC::getBase()>:
c00211f2:	55                   	push   ebp
c00211f3:	89 e5                	mov    ebp,esp
c00211f5:	83 ec 18             	sub    esp,0x18
c00211f8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00211fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021203:	83 e0 08             	and    eax,0x8
c0021206:	84 c0                	test   al,al
c0021208:	75 07                	jne    c0021211 <APIC::getBase()+0x1f>
c002120a:	b8 00 00 00 00       	mov    eax,0x0
c002120f:	eb 21                	jmp    c0021232 <APIC::getBase()+0x40>
c0021211:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021216:	83 ec 08             	sub    esp,0x8
c0021219:	6a 1b                	push   0x1b
c002121b:	50                   	push   eax
c002121c:	e8 45 80 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021221:	83 c4 10             	add    esp,0x10
c0021224:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021227:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002122a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002122d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021232:	c9                   	leave  
c0021233:	c3                   	ret    

c0021234 <APIC::eoi(unsigned char)>:
c0021234:	55                   	push   ebp
c0021235:	89 e5                	mov    ebp,esp
c0021237:	83 ec 28             	sub    esp,0x28
c002123a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002123d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021240:	83 ec 0c             	sub    esp,0xc
c0021243:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021246:	e8 a7 ff ff ff       	call   c00211f2 <APIC::getBase()>
c002124b:	83 c4 10             	add    esp,0x10
c002124e:	05 b0 00 00 00       	add    eax,0xb0
c0021253:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021256:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021259:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002125f:	90                   	nop
c0021260:	c9                   	leave  
c0021261:	c3                   	ret    

c0021262 <APIC::open(int, int, void*)>:
c0021262:	55                   	push   ebp
c0021263:	89 e5                	mov    ebp,esp
c0021265:	57                   	push   edi
c0021266:	56                   	push   esi
c0021267:	53                   	push   ebx
c0021268:	83 ec 2c             	sub    esp,0x2c
c002126b:	83 ec 0c             	sub    esp,0xc
c002126e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021271:	e8 7c ff ff ff       	call   c00211f2 <APIC::getBase()>
c0021276:	83 c4 10             	add    esp,0x10
c0021279:	89 c2                	mov    edx,eax
c002127b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002127e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021284:	0f b6 f8             	movzx  edi,al
c0021287:	89 d0                	mov    eax,edx
c0021289:	ba 00 00 00 00       	mov    edx,0x0
c002128e:	89 c1                	mov    ecx,eax
c0021290:	80 e5 ff             	and    ch,0xff
c0021293:	89 cb                	mov    ebx,ecx
c0021295:	0f b6 f2             	movzx  esi,dl
c0021298:	89 d8                	mov    eax,ebx
c002129a:	89 f2                	mov    edx,esi
c002129c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002129f:	8d 5f 08             	lea    ebx,[edi+0x8]
c00212a2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00212a6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00212aa:	83 e0 00             	and    eax,0x0
c00212ad:	09 d0                	or     eax,edx
c00212af:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00212b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00212b6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00212bc:	8d 50 01             	lea    edx,[eax+0x1]
c00212bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00212c2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00212c8:	0f b6 d0             	movzx  edx,al
c00212cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00212ce:	83 c2 08             	add    edx,0x8
c00212d1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00212d5:	0f b6 c9             	movzx  ecx,cl
c00212d8:	81 c9 00 00 01 00    	or     ecx,0x10000
c00212de:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00212e2:	83 ec 0c             	sub    esp,0xc
c00212e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00212e8:	e8 05 ff ff ff       	call   c00211f2 <APIC::getBase()>
c00212ed:	83 c4 10             	add    esp,0x10
c00212f0:	05 f0 00 00 00       	add    eax,0xf0
c00212f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00212f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00212fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00212fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021300:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021307:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002130e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021311:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021314:	89 10                	mov    DWORD PTR [eax],edx
c0021316:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002131d:	a1 10 85 02 c0       	mov    eax,ds:0xc0028510
c0021322:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021325:	7d 7c                	jge    c00213a3 <APIC::open(int, int, void*)+0x141>
c0021327:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002132a:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c0021331:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021334:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021337:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c002133e:	c1 e8 08             	shr    eax,0x8
c0021341:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021345:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021348:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c002134f:	c1 e8 18             	shr    eax,0x18
c0021352:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021355:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021359:	75 40                	jne    c002139b <APIC::open(int, int, void*)+0x139>
c002135b:	83 ec 0c             	sub    esp,0xc
c002135e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021361:	e8 8c fe ff ff       	call   c00211f2 <APIC::getBase()>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002136d:	75 07                	jne    c0021376 <APIC::open(int, int, void*)+0x114>
c002136f:	ba 60 03 00 00       	mov    edx,0x360
c0021374:	eb 05                	jmp    c002137b <APIC::open(int, int, void*)+0x119>
c0021376:	ba 50 03 00 00       	mov    edx,0x350
c002137b:	01 d0                	add    eax,edx
c002137d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021380:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021383:	8b 00                	mov    eax,DWORD PTR [eax]
c0021385:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021388:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002138f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021393:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021396:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021399:	89 10                	mov    DWORD PTR [eax],edx
c002139b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002139e:	e9 7a ff ff ff       	jmp    c002131d <APIC::open(int, int, void*)+0xbb>
c00213a3:	b8 00 00 00 00       	mov    eax,0x0
c00213a8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00213ab:	5b                   	pop    ebx
c00213ac:	5e                   	pop    esi
c00213ad:	5f                   	pop    edi
c00213ae:	5d                   	pop    ebp
c00213af:	c3                   	ret    

c00213b0 <IOAPIC::IOAPIC()>:
c00213b0:	83 ec 0c             	sub    esp,0xc
c00213b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b7:	83 ec 08             	sub    esp,0x8
c00213ba:	68 d4 6c 02 c0       	push   0xc0026cd4
c00213bf:	50                   	push   eax
c00213c0:	e8 05 d3 fe ff       	call   c000e6ca <Device::Device(char const*)>
c00213c5:	83 c4 10             	add    esp,0x10
c00213c8:	ba fc 6d 02 c0       	mov    edx,0xc0026dfc
c00213cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d1:	89 10                	mov    DWORD PTR [eax],edx
c00213d3:	90                   	nop
c00213d4:	83 c4 0c             	add    esp,0xc
c00213d7:	c3                   	ret    

c00213d8 <APIC::APIC()>:
c00213d8:	53                   	push   ebx
c00213d9:	83 ec 18             	sub    esp,0x18
c00213dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213e0:	83 ec 08             	sub    esp,0x8
c00213e3:	68 dc 6c 02 c0       	push   0xc0026cdc
c00213e8:	50                   	push   eax
c00213e9:	e8 0c d9 fe ff       	call   c000ecfa <InterruptController::InterruptController(char const*)>
c00213ee:	83 c4 10             	add    esp,0x10
c00213f1:	ba b4 6d 02 c0       	mov    edx,0xc0026db4
c00213f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213fa:	89 10                	mov    DWORD PTR [eax],edx
c00213fc:	a0 40 9c 02 c0       	mov    al,ds:0xc0029c40
c0021401:	83 f0 01             	xor    eax,0x1
c0021404:	84 c0                	test   al,al
c0021406:	0f 84 a1 00 00 00    	je     c00214ad <APIC::APIC()+0xd5>
c002140c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021411:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0021416:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002141a:	0f 83 86 00 00 00    	jae    c00214a6 <APIC::APIC()+0xce>
c0021420:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021428:	83 ec 0c             	sub    esp,0xc
c002142b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002142f:	e8 d3 88 fe ff       	call   c0009d07 <malloc>
c0021434:	83 c4 10             	add    esp,0x10
c0021437:	89 c3                	mov    ebx,eax
c0021439:	83 ec 0c             	sub    esp,0xc
c002143c:	53                   	push   ebx
c002143d:	e8 6e ff ff ff       	call   c00213b0 <IOAPIC::IOAPIC()>
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021449:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002144e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021452:	89 14 85 20 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd63e0],edx
c0021459:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c002145e:	40                   	inc    eax
c002145f:	a3 00 9c 02 c0       	mov    ds:0xc0029c00,eax
c0021464:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021469:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002146f:	83 ec 08             	sub    esp,0x8
c0021472:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021476:	50                   	push   eax
c0021477:	e8 4a d0 fe ff       	call   c000e4c6 <Device::addChild(Device*)>
c002147c:	83 c4 10             	add    esp,0x10
c002147f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021483:	8b 00                	mov    eax,DWORD PTR [eax]
c0021485:	83 c0 08             	add    eax,0x8
c0021488:	8b 00                	mov    eax,DWORD PTR [eax]
c002148a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002148f:	6a 00                	push   0x0
c0021491:	6a 00                	push   0x0
c0021493:	52                   	push   edx
c0021494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021498:	ff d0                	call   eax
c002149a:	83 c4 10             	add    esp,0x10
c002149d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00214a1:	e9 6b ff ff ff       	jmp    c0021411 <APIC::APIC()+0x39>
c00214a6:	c6 05 40 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c40,0x1
c00214ad:	90                   	nop
c00214ae:	83 c4 18             	add    esp,0x18
c00214b1:	5b                   	pop    ebx
c00214b2:	c3                   	ret    
c00214b3:	90                   	nop

c00214b4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00214b4:	55                   	push   ebp
c00214b5:	89 e5                	mov    ebp,esp
c00214b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214c0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00214c3:	72 1d                	jb     c00214e2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00214c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214c8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00214ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214d1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00214d7:	01 d0                	add    eax,edx
c00214d9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00214dc:	73 04                	jae    c00214e2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00214de:	b0 01                	mov    al,0x1
c00214e0:	eb 02                	jmp    c00214e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00214e2:	b0 00                	mov    al,0x0
c00214e4:	5d                   	pop    ebp
c00214e5:	c3                   	ret    

c00214e6 <IOAPIC::read(int)>:
c00214e6:	55                   	push   ebp
c00214e7:	89 e5                	mov    ebp,esp
c00214e9:	83 ec 10             	sub    esp,0x10
c00214ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00214f5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00214f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214fb:	0f b6 d0             	movzx  edx,al
c00214fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021501:	89 10                	mov    DWORD PTR [eax],edx
c0021503:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021506:	83 c0 10             	add    eax,0x10
c0021509:	8b 00                	mov    eax,DWORD PTR [eax]
c002150b:	c9                   	leave  
c002150c:	c3                   	ret    
c002150d:	90                   	nop

c002150e <IOAPIC::open(int, int, void*)>:
c002150e:	55                   	push   ebp
c002150f:	89 e5                	mov    ebp,esp
c0021511:	57                   	push   edi
c0021512:	56                   	push   esi
c0021513:	53                   	push   ebx
c0021514:	83 ec 0c             	sub    esp,0xc
c0021517:	83 ec 0c             	sub    esp,0xc
c002151a:	68 07 6d 02 c0       	push   0xc0026d07
c002151f:	e8 ef ba fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c0021524:	83 c4 10             	add    esp,0x10
c0021527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002152a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002152d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021536:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002153c:	8b 14 85 00 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7a00]
c0021543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021546:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002154f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021555:	8b 14 85 80 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7980]
c002155c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002155f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021568:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021571:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021577:	0f b6 f8             	movzx  edi,al
c002157a:	89 d0                	mov    eax,edx
c002157c:	ba 00 00 00 00       	mov    edx,0x0
c0021581:	89 c1                	mov    ecx,eax
c0021583:	80 e5 ff             	and    ch,0xff
c0021586:	89 cb                	mov    ebx,ecx
c0021588:	0f b6 f2             	movzx  esi,dl
c002158b:	89 d8                	mov    eax,ebx
c002158d:	89 f2                	mov    edx,esi
c002158f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021592:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021595:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021599:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002159d:	83 e0 00             	and    eax,0x0
c00215a0:	09 d0                	or     eax,edx
c00215a2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00215a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215a9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00215af:	8d 50 01             	lea    edx,[eax+0x1]
c00215b2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00215b5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00215bb:	0f b6 d0             	movzx  edx,al
c00215be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215c1:	83 c2 08             	add    edx,0x8
c00215c4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00215c8:	0f b6 c9             	movzx  ecx,cl
c00215cb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00215d1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00215d5:	83 ec 08             	sub    esp,0x8
c00215d8:	6a 01                	push   0x1
c00215da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215dd:	e8 04 ff ff ff       	call   c00214e6 <IOAPIC::read(int)>
c00215e2:	83 c4 10             	add    esp,0x10
c00215e5:	c1 f8 10             	sar    eax,0x10
c00215e8:	0f b6 c0             	movzx  eax,al
c00215eb:	8d 50 01             	lea    edx,[eax+0x1]
c00215ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215f1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00215f7:	b8 00 00 00 00       	mov    eax,0x0
c00215fc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215ff:	5b                   	pop    ebx
c0021600:	5e                   	pop    esi
c0021601:	5f                   	pop    edi
c0021602:	5d                   	pop    ebp
c0021603:	c3                   	ret    

c0021604 <IOAPIC::write(int, int)>:
c0021604:	55                   	push   ebp
c0021605:	89 e5                	mov    ebp,esp
c0021607:	83 ec 10             	sub    esp,0x10
c002160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002160d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021613:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021616:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021619:	0f b6 d0             	movzx  edx,al
c002161c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002161f:	89 10                	mov    DWORD PTR [eax],edx
c0021621:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021624:	8d 50 10             	lea    edx,[eax+0x10]
c0021627:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002162a:	89 02                	mov    DWORD PTR [edx],eax
c002162c:	90                   	nop
c002162d:	c9                   	leave  
c002162e:	c3                   	ret    
c002162f:	90                   	nop

c0021630 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021630:	55                   	push   ebp
c0021631:	89 e5                	mov    ebp,esp
c0021633:	53                   	push   ebx
c0021634:	83 ec 2c             	sub    esp,0x2c
c0021637:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002163a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002163d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021640:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021643:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021646:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021649:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002164c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002164f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021652:	88 d8                	mov    al,bl
c0021654:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021657:	88 c8                	mov    al,cl
c0021659:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002165c:	88 d0                	mov    al,dl
c002165e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021661:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021665:	83 c0 08             	add    eax,0x8
c0021668:	01 c0                	add    eax,eax
c002166a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002166d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021671:	83 c0 08             	add    eax,0x8
c0021674:	01 c0                	add    eax,eax
c0021676:	40                   	inc    eax
c0021677:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002167a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002167d:	50                   	push   eax
c002167e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021681:	e8 60 fe ff ff       	call   c00214e6 <IOAPIC::read(int)>
c0021686:	83 c4 08             	add    esp,0x8
c0021689:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002168c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021693:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021696:	c1 e0 18             	shl    eax,0x18
c0021699:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002169c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002169f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00216a2:	52                   	push   edx
c00216a3:	50                   	push   eax
c00216a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216a7:	e8 58 ff ff ff       	call   c0021604 <IOAPIC::write(int, int)>
c00216ac:	83 c4 0c             	add    esp,0xc
c00216af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00216b2:	50                   	push   eax
c00216b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216b6:	e8 2b fe ff ff       	call   c00214e6 <IOAPIC::read(int)>
c00216bb:	83 c4 08             	add    esp,0x8
c00216be:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00216c1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00216c8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00216cf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00216d6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00216da:	74 09                	je     c00216e5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00216dc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00216e3:	eb 07                	jmp    c00216ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00216e5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00216ec:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00216f0:	74 09                	je     c00216fb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00216f2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00216f9:	eb 07                	jmp    c0021702 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00216fb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021702:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021709:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002170d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021710:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021716:	52                   	push   edx
c0021717:	50                   	push   eax
c0021718:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002171b:	e8 e4 fe ff ff       	call   c0021604 <IOAPIC::write(int, int)>
c0021720:	83 c4 0c             	add    esp,0xc
c0021723:	90                   	nop
c0021724:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021727:	c9                   	leave  
c0021728:	c3                   	ret    
c0021729:	90                   	nop

c002172a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002172a:	55                   	push   ebp
c002172b:	89 e5                	mov    ebp,esp
c002172d:	57                   	push   edi
c002172e:	56                   	push   esi
c002172f:	53                   	push   ebx
c0021730:	83 ec 2c             	sub    esp,0x2c
c0021733:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021736:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021739:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002173d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021741:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021745:	74 5a                	je     c00217a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021747:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002174b:	7f 44                	jg     c0021791 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002174d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021750:	05 a0 73 02 c0       	add    eax,0xc00273a0
c0021755:	8a 00                	mov    al,BYTE PTR [eax]
c0021757:	0f b6 c0             	movzx  eax,al
c002175a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002175d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021760:	66 8b 84 00 a0 85 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7a60]
c0021768:	0f b7 c0             	movzx  eax,ax
c002176b:	83 e0 02             	and    eax,0x2
c002176e:	85 c0                	test   eax,eax
c0021770:	74 04                	je     c0021776 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021772:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021776:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021779:	66 8b 84 00 a0 85 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7a60]
c0021781:	0f b7 c0             	movzx  eax,ax
c0021784:	83 e0 08             	and    eax,0x8
c0021787:	85 c0                	test   eax,eax
c0021789:	74 16                	je     c00217a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002178b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002178f:	eb 10                	jmp    c00217a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021791:	83 ec 0c             	sub    esp,0xc
c0021794:	68 18 6d 02 c0       	push   0xc0026d18
c0021799:	e8 d3 35 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00217a5:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c00217aa:	83 ec 08             	sub    esp,0x8
c00217ad:	50                   	push   eax
c00217ae:	68 50 6d 02 c0       	push   0xc0026d50
c00217b3:	e8 5b b8 fe ff       	call   c000d013 <Dbg::kprintf(char const*, ...)>
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00217c2:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c00217c7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00217ca:	7d 67                	jge    c0021833 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00217cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00217cf:	8b 04 85 20 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63e0]
c00217d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00217d9:	83 ec 08             	sub    esp,0x8
c00217dc:	52                   	push   edx
c00217dd:	50                   	push   eax
c00217de:	e8 d1 fc ff ff       	call   c00214b4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00217e3:	83 c4 10             	add    esp,0x10
c00217e6:	84 c0                	test   al,al
c00217e8:	74 44                	je     c002182e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00217ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00217ed:	8b 1c 85 20 9c 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd63e0]
c00217f4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00217f8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00217fb:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00217ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021802:	83 c0 20             	add    eax,0x20
c0021805:	0f b6 f0             	movzx  esi,al
c0021808:	b8 00 00 00 00       	mov    eax,0x0
c002180d:	99                   	cdq    
c002180e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021811:	0f b6 c9             	movzx  ecx,cl
c0021814:	83 ec 04             	sub    esp,0x4
c0021817:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002181a:	57                   	push   edi
c002181b:	56                   	push   esi
c002181c:	52                   	push   edx
c002181d:	50                   	push   eax
c002181e:	51                   	push   ecx
c002181f:	53                   	push   ebx
c0021820:	e8 0b fe ff ff       	call   c0021630 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021825:	83 c4 20             	add    esp,0x20
c0021828:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002182c:	eb 05                	jmp    c0021833 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002182e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021831:	eb 8f                	jmp    c00217c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021833:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021836:	83 f0 01             	xor    eax,0x1
c0021839:	84 c0                	test   al,al
c002183b:	74 10                	je     c002184d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002183d:	83 ec 0c             	sub    esp,0xc
c0021840:	68 67 6d 02 c0       	push   0xc0026d67
c0021845:	e8 27 35 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021851:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021858:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002185c:	7f 65                	jg     c00218c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002185e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021861:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021864:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002186b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002186e:	01 ca                	add    edx,ecx
c0021870:	83 c2 54             	add    edx,0x54
c0021873:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021877:	85 c0                	test   eax,eax
c0021879:	75 43                	jne    c00218be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002187b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002187e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021881:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021888:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002188b:	01 ca                	add    edx,ecx
c002188d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021890:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021893:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002189a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002189d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00218a4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00218a7:	01 ca                	add    edx,ecx
c00218a9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00218af:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00218b2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00218b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218b9:	83 e8 20             	sub    eax,0x20
c00218bc:	eb 1a                	jmp    c00218d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00218be:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00218c1:	eb 95                	jmp    c0021858 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00218c3:	83 ec 0c             	sub    esp,0xc
c00218c6:	68 74 6d 02 c0       	push   0xc0026d74
c00218cb:	e8 a1 34 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00218d0:	83 c4 10             	add    esp,0x10
c00218d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00218d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00218db:	5b                   	pop    ebx
c00218dc:	5e                   	pop    esi
c00218dd:	5f                   	pop    edi
c00218de:	5d                   	pop    ebp
c00218df:	c3                   	ret    

c00218e0 <PIC::disable()>:
c00218e0:	55                   	push   ebp
c00218e1:	89 e5                	mov    ebp,esp
c00218e3:	83 ec 10             	sub    esp,0x10
c00218e6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00218ec:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00218f0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00218f3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00218f7:	ee                   	out    dx,al
c00218f8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00218fe:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021902:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021905:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021909:	ee                   	out    dx,al
c002190a:	90                   	nop
c002190b:	c9                   	leave  
c002190c:	c3                   	ret    
c002190d:	90                   	nop

c002190e <PIC::close(int, int, void*)>:
c002190e:	55                   	push   ebp
c002190f:	89 e5                	mov    ebp,esp
c0021911:	83 ec 08             	sub    esp,0x8
c0021914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021917:	8b 00                	mov    eax,DWORD PTR [eax]
c0021919:	83 c0 3c             	add    eax,0x3c
c002191c:	8b 00                	mov    eax,DWORD PTR [eax]
c002191e:	83 ec 0c             	sub    esp,0xc
c0021921:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021924:	ff d0                	call   eax
c0021926:	83 c4 10             	add    esp,0x10
c0021929:	b8 00 00 00 00       	mov    eax,0x0
c002192e:	c9                   	leave  
c002192f:	c3                   	ret    

c0021930 <PIC::PIC()>:
c0021930:	83 ec 0c             	sub    esp,0xc
c0021933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021937:	83 ec 08             	sub    esp,0x8
c002193a:	68 20 6e 02 c0       	push   0xc0026e20
c002193f:	50                   	push   eax
c0021940:	e8 b5 d3 fe ff       	call   c000ecfa <InterruptController::InterruptController(char const*)>
c0021945:	83 c4 10             	add    esp,0x10
c0021948:	ba 4c 6e 02 c0       	mov    edx,0xc0026e4c
c002194d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021951:	89 10                	mov    DWORD PTR [eax],edx
c0021953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021957:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002195d:	0f b6 d0             	movzx  edx,al
c0021960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021964:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002196b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021975:	0f b6 d0             	movzx  edx,al
c0021978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021985:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002198b:	8d 50 01             	lea    edx,[eax+0x1]
c002198e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021992:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021998:	0f b6 d0             	movzx  edx,al
c002199b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002199f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00219a3:	83 e1 3f             	and    ecx,0x3f
c00219a6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00219aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219b4:	0f b6 d0             	movzx  edx,al
c00219b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00219c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219cc:	0f b6 d0             	movzx  edx,al
c00219cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00219d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219e2:	8d 50 01             	lea    edx,[eax+0x1]
c00219e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219e9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00219ef:	0f b6 d0             	movzx  edx,al
c00219f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00219fa:	83 e1 3f             	and    ecx,0x3f
c00219fd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021a01:	90                   	nop
c0021a02:	83 c4 0c             	add    esp,0xc
c0021a05:	c3                   	ret    

c0021a06 <PIC::ioWait()>:
c0021a06:	eb 00                	jmp    c0021a08 <PIC::ioWait()+0x2>
c0021a08:	eb 00                	jmp    c0021a0a <PIC::ioWait()+0x4>
c0021a0a:	90                   	nop
c0021a0b:	c3                   	ret    

c0021a0c <PIC::getIRQReg(int)>:
c0021a0c:	55                   	push   ebp
c0021a0d:	89 e5                	mov    ebp,esp
c0021a0f:	83 ec 10             	sub    esp,0x10
c0021a12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a15:	0f b6 c0             	movzx  eax,al
c0021a18:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021a1e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021a21:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021a24:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021a28:	ee                   	out    dx,al
c0021a29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a2c:	0f b6 c0             	movzx  eax,al
c0021a2f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021a35:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021a38:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021a3b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021a3f:	ee                   	out    dx,al
c0021a40:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021a46:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021a4a:	89 c2                	mov    edx,eax
c0021a4c:	ec                   	in     al,dx
c0021a4d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021a50:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021a53:	0f b6 c0             	movzx  eax,al
c0021a56:	c1 e0 08             	shl    eax,0x8
c0021a59:	89 c1                	mov    ecx,eax
c0021a5b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021a61:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021a65:	89 c2                	mov    edx,eax
c0021a67:	ec                   	in     al,dx
c0021a68:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021a6b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021a6e:	0f b6 c0             	movzx  eax,al
c0021a71:	09 c8                	or     eax,ecx
c0021a73:	c9                   	leave  
c0021a74:	c3                   	ret    
c0021a75:	90                   	nop

c0021a76 <PIC::eoi(unsigned char)>:
c0021a76:	55                   	push   ebp
c0021a77:	89 e5                	mov    ebp,esp
c0021a79:	83 ec 14             	sub    esp,0x14
c0021a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a7f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021a82:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021a86:	75 1e                	jne    c0021aa6 <PIC::eoi(unsigned char)+0x30>
c0021a88:	6a 0b                	push   0xb
c0021a8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a8d:	e8 7a ff ff ff       	call   c0021a0c <PIC::getIRQReg(int)>
c0021a92:	83 c4 08             	add    esp,0x8
c0021a95:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021a99:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021a9d:	25 80 00 00 00       	and    eax,0x80
c0021aa2:	85 c0                	test   eax,eax
c0021aa4:	74 5f                	je     c0021b05 <PIC::eoi(unsigned char)+0x8f>
c0021aa6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021aaa:	75 2d                	jne    c0021ad9 <PIC::eoi(unsigned char)+0x63>
c0021aac:	6a 0b                	push   0xb
c0021aae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ab1:	e8 56 ff ff ff       	call   c0021a0c <PIC::getIRQReg(int)>
c0021ab6:	83 c4 08             	add    esp,0x8
c0021ab9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021abd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ac0:	66 85 c0             	test   ax,ax
c0021ac3:	78 14                	js     c0021ad9 <PIC::eoi(unsigned char)+0x63>
c0021ac5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021acb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021acf:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021ad2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021ad6:	ee                   	out    dx,al
c0021ad7:	eb 2d                	jmp    c0021b06 <PIC::eoi(unsigned char)+0x90>
c0021ad9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021add:	76 12                	jbe    c0021af1 <PIC::eoi(unsigned char)+0x7b>
c0021adf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021ae5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021ae9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021aec:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021af0:	ee                   	out    dx,al
c0021af1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021af7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021afb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021afe:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021b02:	ee                   	out    dx,al
c0021b03:	eb 01                	jmp    c0021b06 <PIC::eoi(unsigned char)+0x90>
c0021b05:	90                   	nop
c0021b06:	c9                   	leave  
c0021b07:	c3                   	ret    

c0021b08 <PIC::remap()>:
c0021b08:	55                   	push   ebp
c0021b09:	89 e5                	mov    ebp,esp
c0021b0b:	83 ec 48             	sub    esp,0x48
c0021b0e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021b15:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021b1c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021b22:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021b25:	89 c2                	mov    edx,eax
c0021b27:	ec                   	in     al,dx
c0021b28:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021b2b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021b2e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021b31:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021b37:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021b3a:	89 c2                	mov    edx,eax
c0021b3c:	ec                   	in     al,dx
c0021b3d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021b40:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021b43:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021b46:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021b4c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021b50:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021b53:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021b56:	ee                   	out    dx,al
c0021b57:	83 ec 0c             	sub    esp,0xc
c0021b5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b5d:	e8 a4 fe ff ff       	call   c0021a06 <PIC::ioWait()>
c0021b62:	83 c4 10             	add    esp,0x10
c0021b65:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021b6b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021b6f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021b72:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021b75:	ee                   	out    dx,al
c0021b76:	83 ec 0c             	sub    esp,0xc
c0021b79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b7c:	e8 85 fe ff ff       	call   c0021a06 <PIC::ioWait()>
c0021b81:	83 c4 10             	add    esp,0x10
c0021b84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021b87:	0f b6 c0             	movzx  eax,al
c0021b8a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021b90:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021b93:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021b96:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021b99:	ee                   	out    dx,al
c0021b9a:	83 ec 0c             	sub    esp,0xc
c0021b9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ba0:	e8 61 fe ff ff       	call   c0021a06 <PIC::ioWait()>
c0021ba5:	83 c4 10             	add    esp,0x10
c0021ba8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021bab:	0f b6 c0             	movzx  eax,al
c0021bae:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021bb4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021bb7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021bba:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021bbd:	ee                   	out    dx,al
c0021bbe:	83 ec 0c             	sub    esp,0xc
c0021bc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bc4:	e8 3d fe ff ff       	call   c0021a06 <PIC::ioWait()>
c0021bc9:	83 c4 10             	add    esp,0x10
c0021bcc:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021bd2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021bd6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021bd9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021bdc:	ee                   	out    dx,al
c0021bdd:	83 ec 0c             	sub    esp,0xc
c0021be0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021be3:	e8 1e fe ff ff       	call   c0021a06 <PIC::ioWait()>
c0021be8:	83 c4 10             	add    esp,0x10
c0021beb:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021bf1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021bf5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021bf8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021bfb:	ee                   	out    dx,al
c0021bfc:	83 ec 0c             	sub    esp,0xc
c0021bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c02:	e8 ff fd ff ff       	call   c0021a06 <PIC::ioWait()>
c0021c07:	83 c4 10             	add    esp,0x10
c0021c0a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021c10:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021c14:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021c17:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021c1a:	ee                   	out    dx,al
c0021c1b:	83 ec 0c             	sub    esp,0xc
c0021c1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c21:	e8 e0 fd ff ff       	call   c0021a06 <PIC::ioWait()>
c0021c26:	83 c4 10             	add    esp,0x10
c0021c29:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021c2f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021c33:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021c36:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021c39:	ee                   	out    dx,al
c0021c3a:	83 ec 0c             	sub    esp,0xc
c0021c3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c40:	e8 c1 fd ff ff       	call   c0021a06 <PIC::ioWait()>
c0021c45:	83 c4 10             	add    esp,0x10
c0021c48:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021c4c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021c52:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021c55:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021c58:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021c5b:	ee                   	out    dx,al
c0021c5c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021c60:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021c66:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021c69:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021c6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021c6f:	ee                   	out    dx,al
c0021c70:	90                   	nop
c0021c71:	c9                   	leave  
c0021c72:	c3                   	ret    
c0021c73:	90                   	nop

c0021c74 <PIC::open(int, int, void*)>:
c0021c74:	55                   	push   ebp
c0021c75:	89 e5                	mov    ebp,esp
c0021c77:	83 ec 18             	sub    esp,0x18
c0021c7a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021c80:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021c84:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c87:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c8b:	ee                   	out    dx,al
c0021c8c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021c92:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021c96:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c99:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c9d:	ee                   	out    dx,al
c0021c9e:	83 ec 0c             	sub    esp,0xc
c0021ca1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ca4:	e8 5f fe ff ff       	call   c0021b08 <PIC::remap()>
c0021ca9:	83 c4 10             	add    esp,0x10
c0021cac:	b8 00 00 00 00       	mov    eax,0x0
c0021cb1:	c9                   	leave  
c0021cb2:	c3                   	ret    
c0021cb3:	90                   	nop

c0021cb4 <APICTimer::close(int, int, void*)>:
c0021cb4:	b8 00 00 00 00       	mov    eax,0x0
c0021cb9:	c3                   	ret    
c0021cba:	66 90                	xchg   ax,ax

c0021cbc <apicTimerHandler(regs*, void*)>:
c0021cbc:	83 ec 0c             	sub    esp,0xc
c0021cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021cc5:	b8 10 27 00 00       	mov    eax,0x2710
c0021cca:	ba 00 00 00 00       	mov    edx,0x0
c0021ccf:	f7 f1                	div    ecx
c0021cd1:	83 ec 0c             	sub    esp,0xc
c0021cd4:	50                   	push   eax
c0021cd5:	e8 eb ee fe ff       	call   c0010bc5 <timerHandler(unsigned int)>
c0021cda:	83 c4 10             	add    esp,0x10
c0021cdd:	90                   	nop
c0021cde:	83 c4 0c             	add    esp,0xc
c0021ce1:	c3                   	ret    
c0021ce2:	66 90                	xchg   ax,ax

c0021ce4 <APICTimer::write(int)>:
c0021ce4:	83 ec 1c             	sub    esp,0x1c
c0021ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ceb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021cef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021cf5:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021cfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021d00:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021d06:	83 ec 0c             	sub    esp,0xc
c0021d09:	50                   	push   eax
c0021d0a:	e8 e3 f4 ff ff       	call   c00211f2 <APIC::getBase()>
c0021d0f:	83 c4 10             	add    esp,0x10
c0021d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d16:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0021d1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d23:	05 e0 03 00 00       	add    eax,0x3e0
c0021d28:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d32:	05 80 03 00 00       	add    eax,0x380
c0021d37:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021d3d:	fb                   	sti    
c0021d3e:	66 90                	xchg   ax,ax
c0021d40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d44:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021d4a:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0021d4f:	39 c2                	cmp    edx,eax
c0021d51:	76 05                	jbe    c0021d58 <APICTimer::write(int)+0x74>
c0021d53:	eb eb                	jmp    c0021d40 <APICTimer::write(int)+0x5c>
c0021d55:	8d 76 00             	lea    esi,[esi+0x0]
c0021d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d5c:	05 20 03 00 00       	add    eax,0x320
c0021d61:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d6b:	05 90 03 00 00       	add    eax,0x390
c0021d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d72:	f7 d0                	not    eax
c0021d74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d78:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d80:	ba 00 00 00 00       	mov    edx,0x0
c0021d85:	f7 f1                	div    ecx
c0021d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021d94:	0d 00 00 02 00       	or     eax,0x20000
c0021d99:	89 c2                	mov    edx,eax
c0021d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d9f:	05 20 03 00 00       	add    eax,0x320
c0021da4:	89 10                	mov    DWORD PTR [eax],edx
c0021da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021daa:	05 e0 03 00 00       	add    eax,0x3e0
c0021daf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db9:	05 80 03 00 00       	add    eax,0x380
c0021dbe:	89 c2                	mov    edx,eax
c0021dc0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021dc3:	89 02                	mov    DWORD PTR [edx],eax
c0021dc5:	90                   	nop
c0021dc6:	83 c4 1c             	add    esp,0x1c
c0021dc9:	c3                   	ret    
c0021dca:	66 90                	xchg   ax,ax

c0021dcc <APICTimer::open(int, int, void*)>:
c0021dcc:	57                   	push   edi
c0021dcd:	56                   	push   esi
c0021dce:	53                   	push   ebx
c0021dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dd5:	83 c0 24             	add    eax,0x24
c0021dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dda:	83 ec 08             	sub    esp,0x8
c0021ddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021de5:	ff d0                	call   eax
c0021de7:	83 c4 10             	add    esp,0x10
c0021dea:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021def:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021df5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021dfb:	83 ec 0c             	sub    esp,0xc
c0021dfe:	50                   	push   eax
c0021dff:	e8 ee f3 ff ff       	call   c00211f2 <APIC::getBase()>
c0021e04:	83 c4 10             	add    esp,0x10
c0021e07:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e17:	0f b6 f8             	movzx  edi,al
c0021e1a:	89 d0                	mov    eax,edx
c0021e1c:	ba 00 00 00 00       	mov    edx,0x0
c0021e21:	89 c1                	mov    ecx,eax
c0021e23:	80 e5 ff             	and    ch,0xff
c0021e26:	89 cb                	mov    ebx,ecx
c0021e28:	0f b6 f2             	movzx  esi,dl
c0021e2b:	89 d8                	mov    eax,ebx
c0021e2d:	89 f2                	mov    edx,esi
c0021e2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e33:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e36:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e3a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e3e:	83 e0 00             	and    eax,0x0
c0021e41:	09 d0                	or     eax,edx
c0021e43:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e51:	8d 50 01             	lea    edx,[eax+0x1]
c0021e54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e58:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021e5e:	0f b6 d0             	movzx  edx,al
c0021e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e65:	83 c2 08             	add    edx,0x8
c0021e68:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021e6c:	0f b6 c9             	movzx  ecx,cl
c0021e6f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021e75:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021e81:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e8f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021e95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e99:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021e9f:	83 ec 0c             	sub    esp,0xc
c0021ea2:	51                   	push   ecx
c0021ea3:	6a 01                	push   0x1
c0021ea5:	68 bc 1c 02 c0       	push   0xc0021cbc
c0021eaa:	52                   	push   edx
c0021eab:	50                   	push   eax
c0021eac:	e8 8d c5 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021eb1:	83 c4 20             	add    esp,0x20
c0021eb4:	89 c2                	mov    edx,eax
c0021eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eba:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021ec0:	b8 00 00 00 00       	mov    eax,0x0
c0021ec5:	5b                   	pop    ebx
c0021ec6:	5e                   	pop    esi
c0021ec7:	5f                   	pop    edi
c0021ec8:	c3                   	ret    
c0021ec9:	90                   	nop
c0021eca:	66 90                	xchg   ax,ax

c0021ecc <APICTimer::APICTimer()>:
c0021ecc:	83 ec 0c             	sub    esp,0xc
c0021ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed3:	83 ec 08             	sub    esp,0x8
c0021ed6:	68 8c 6e 02 c0       	push   0xc0026e8c
c0021edb:	50                   	push   eax
c0021edc:	e8 53 ec fe ff       	call   c0010b34 <Timer::Timer(char const*)>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	ba a0 6e 02 c0       	mov    edx,0xc0026ea0
c0021ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eed:	89 10                	mov    DWORD PTR [eax],edx
c0021eef:	90                   	nop
c0021ef0:	83 c4 0c             	add    esp,0xc
c0021ef3:	c3                   	ret    

c0021ef4 <PIT::write(int)>:
c0021ef4:	83 ec 10             	sub    esp,0x10
c0021ef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021efb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021eff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f09:	a3 44 9c 02 c0       	mov    ds:0xc0029c44,eax
c0021f0e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021f13:	99                   	cdq    
c0021f14:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021f18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f1c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021f23:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021f28:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021f2c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021f31:	ee                   	out    dx,al
c0021f32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f36:	0f b6 c0             	movzx  eax,al
c0021f39:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021f40:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021f44:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021f48:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021f4d:	ee                   	out    dx,al
c0021f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f52:	c1 f8 08             	sar    eax,0x8
c0021f55:	0f b6 c0             	movzx  eax,al
c0021f58:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021f5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021f63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021f67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021f6c:	ee                   	out    dx,al
c0021f6d:	90                   	nop
c0021f6e:	83 c4 10             	add    esp,0x10
c0021f71:	c3                   	ret    
c0021f72:	66 90                	xchg   ax,ax

c0021f74 <pitHandler(regs*, void*)>:
c0021f74:	83 ec 0c             	sub    esp,0xc
c0021f77:	8b 0d 44 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c44
c0021f7d:	b8 10 27 00 00       	mov    eax,0x2710
c0021f82:	99                   	cdq    
c0021f83:	f7 f9                	idiv   ecx
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	50                   	push   eax
c0021f89:	e8 37 ec fe ff       	call   c0010bc5 <timerHandler(unsigned int)>
c0021f8e:	83 c4 10             	add    esp,0x10
c0021f91:	90                   	nop
c0021f92:	83 c4 0c             	add    esp,0xc
c0021f95:	c3                   	ret    
c0021f96:	66 90                	xchg   ax,ax

c0021f98 <PIT::open(int, int, void*)>:
c0021f98:	83 ec 0c             	sub    esp,0xc
c0021f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa1:	83 c0 24             	add    eax,0x24
c0021fa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa6:	83 ec 08             	sub    esp,0x8
c0021fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fb1:	ff d0                	call   eax
c0021fb3:	83 c4 10             	add    esp,0x10
c0021fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	6a 00                	push   0x0
c0021fbf:	6a 01                	push   0x1
c0021fc1:	68 74 1f 02 c0       	push   0xc0021f74
c0021fc6:	6a 00                	push   0x0
c0021fc8:	50                   	push   eax
c0021fc9:	e8 70 c4 fe ff       	call   c000e43e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021fce:	83 c4 20             	add    esp,0x20
c0021fd1:	89 c2                	mov    edx,eax
c0021fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021fdd:	b8 00 00 00 00       	mov    eax,0x0
c0021fe2:	83 c4 0c             	add    esp,0xc
c0021fe5:	c3                   	ret    
c0021fe6:	66 90                	xchg   ax,ax

c0021fe8 <PIT::close(int, int, void*)>:
c0021fe8:	83 ec 0c             	sub    esp,0xc
c0021feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffd:	6a 01                	push   0x1
c0021fff:	68 74 1f 02 c0       	push   0xc0021f74
c0022004:	6a 00                	push   0x0
c0022006:	50                   	push   eax
c0022007:	e8 7c c4 fe ff       	call   c000e488 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	b8 00 00 00 00       	mov    eax,0x0
c0022014:	83 c4 0c             	add    esp,0xc
c0022017:	c3                   	ret    

c0022018 <PIT::PIT()>:
c0022018:	83 ec 0c             	sub    esp,0xc
c002201b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201f:	83 ec 08             	sub    esp,0x8
c0022022:	68 c8 6e 02 c0       	push   0xc0026ec8
c0022027:	50                   	push   eax
c0022028:	e8 07 eb fe ff       	call   c0010b34 <Timer::Timer(char const*)>
c002202d:	83 c4 10             	add    esp,0x10
c0022030:	ba f0 6e 02 c0       	mov    edx,0xc0026ef0
c0022035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022039:	89 10                	mov    DWORD PTR [eax],edx
c002203b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022045:	0f b6 d0             	movzx  edx,al
c0022048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022057:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002205d:	0f b6 d0             	movzx  edx,al
c0022060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022064:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022073:	8d 50 01             	lea    edx,[eax+0x1]
c0022076:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002207a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022080:	0f b6 d0             	movzx  edx,al
c0022083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022087:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002208b:	83 e1 3f             	and    ecx,0x3f
c002208e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022092:	90                   	nop
c0022093:	83 c4 0c             	add    esp,0xc
c0022096:	c3                   	ret    
c0022097:	66 90                	xchg   ax,ax
c0022099:	66 90                	xchg   ax,ax
c002209b:	66 90                	xchg   ax,ax
c002209d:	66 90                	xchg   ax,ax
c002209f:	90                   	nop

c00220a0 <avxDetect>:
c00220a0:	b8 01 00 00 00       	mov    eax,0x1
c00220a5:	0f a2                	cpuid  
c00220a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00220ad:	74 15                	je     c00220c4 <avxDetect.noAVX>
c00220af:	b8 01 00 00 00       	mov    eax,0x1
c00220b4:	0f a2                	cpuid  
c00220b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00220bc:	74 06                	je     c00220c4 <avxDetect.noAVX>
c00220be:	b8 01 00 00 00       	mov    eax,0x1
c00220c3:	c3                   	ret    

c00220c4 <avxDetect.noAVX>:
c00220c4:	b8 00 00 00 00       	mov    eax,0x0
c00220c9:	c3                   	ret    

c00220ca <avxSave>:
c00220ca:	53                   	push   ebx
c00220cb:	52                   	push   edx
c00220cc:	31 c0                	xor    eax,eax
c00220ce:	48                   	dec    eax
c00220cf:	89 c2                	mov    edx,eax
c00220d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00220d5:	0f ae 23             	xsave  [ebx]
c00220d8:	5a                   	pop    edx
c00220d9:	5b                   	pop    ebx
c00220da:	c3                   	ret    

c00220db <avxLoad>:
c00220db:	53                   	push   ebx
c00220dc:	52                   	push   edx
c00220dd:	31 c0                	xor    eax,eax
c00220df:	48                   	dec    eax
c00220e0:	89 c2                	mov    edx,eax
c00220e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00220e6:	0f ae 2b             	xrstor [ebx]
c00220e9:	5a                   	pop    edx
c00220ea:	5b                   	pop    ebx
c00220eb:	c3                   	ret    

c00220ec <avxInit>:
c00220ec:	e8 77 00 00 00       	call   c0022168 <sseInit>
c00220f1:	50                   	push   eax
c00220f2:	51                   	push   ecx
c00220f3:	0f 20 e0             	mov    eax,cr4
c00220f6:	0d 00 00 04 00       	or     eax,0x40000
c00220fb:	0f 22 e0             	mov    cr4,eax
c00220fe:	31 c9                	xor    ecx,ecx
c0022100:	0f 01 d0             	xgetbv 
c0022103:	0d 07 00 00 00       	or     eax,0x7
c0022108:	0f 01 d1             	xsetbv 
c002210b:	59                   	pop    ecx
c002210c:	58                   	pop    eax
c002210d:	c3                   	ret    

c002210e <avxClose>:
c002210e:	c3                   	ret    

c002210f <wouldSheSayYes>:
c002210f:	c3                   	ret    
c0022110:	49                   	dec    ecx
c0022111:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022115:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022119:	75 20                	jne    c002213b <retry+0x6>
c002211b:	4e                   	dec    esi
c002211c:	79 61                	jns    c002217f <sseClose+0x7>
c002211e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022123:	66 90                	xchg   ax,ax
c0022125:	66 90                	xchg   ax,ax
c0022127:	66 90                	xchg   ax,ax
c0022129:	66 90                	xchg   ax,ax
c002212b:	66 90                	xchg   ax,ax
c002212d:	66 90                	xchg   ax,ax
c002212f:	90                   	nop

c0022130 <i386GetRDRAND>:
c0022130:	b9 64 00 00 00       	mov    ecx,0x64

c0022135 <retry>:
c0022135:	0f c7 f0             	rdrand eax
c0022138:	72 05                	jb     c002213f <retry.done>
c002213a:	e2 f9                	loop   c0022135 <retry>

c002213c <retry.fail>:
c002213c:	31 c0                	xor    eax,eax
c002213e:	c3                   	ret    

c002213f <retry.done>:
c002213f:	c3                   	ret    

c0022140 <absolutelyNoChanceInHell>:
c0022140:	b8 01 00 00 00       	mov    eax,0x1
c0022145:	0f a2                	cpuid  
c0022147:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002214d:	74 06                	je     c0022155 <sseDetect.noSSE>
c002214f:	b8 01 00 00 00       	mov    eax,0x1
c0022154:	c3                   	ret    

c0022155 <sseDetect.noSSE>:
c0022155:	31 c0                	xor    eax,eax
c0022157:	c3                   	ret    

c0022158 <sseSave>:
c0022158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002215c:	0f ae 00             	fxsave [eax]
c002215f:	c3                   	ret    

c0022160 <sseLoad>:
c0022160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022164:	0f ae 08             	fxrstor [eax]
c0022167:	c3                   	ret    

c0022168 <sseInit>:
c0022168:	e8 42 00 00 00       	call   c00221af <x87Init>
c002216d:	0f 20 e0             	mov    eax,cr4
c0022170:	66 0d 00 06          	or     ax,0x600
c0022174:	0f 22 e0             	mov    cr4,eax
c0022177:	c3                   	ret    

c0022178 <sseClose>:
c0022178:	c3                   	ret    
c0022179:	66 90                	xchg   ax,ax
c002217b:	66 90                	xchg   ax,ax
c002217d:	66 90                	xchg   ax,ax
c002217f:	90                   	nop

c0022180 <value_37F>:
c0022180:	7f 03                	jg     c0022185 <value_37A+0x1>

c0022182 <value_37E>:
c0022182:	7e 03                	jle    c0022187 <x87Detect+0x1>

c0022184 <value_37A>:
c0022184:	7a 03                	jp     c0022189 <x87Detect+0x3>

c0022186 <x87Detect>:
c0022186:	b8 01 00 00 00       	mov    eax,0x1
c002218b:	0f a2                	cpuid  
c002218d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022193:	74 06                	je     c002219b <x87Detect.nox87>
c0022195:	b8 01 00 00 00       	mov    eax,0x1
c002219a:	c3                   	ret    

c002219b <x87Detect.nox87>:
c002219b:	b8 00 00 00 00       	mov    eax,0x0
c00221a0:	c3                   	ret    

c00221a1 <x87Save>:
c00221a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a5:	dd 30                	fnsave [eax]
c00221a7:	c3                   	ret    

c00221a8 <x87Load>:
c00221a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ac:	dd 20                	frstor [eax]
c00221ae:	c3                   	ret    

c00221af <x87Init>:
c00221af:	0f 20 c0             	mov    eax,cr0
c00221b2:	66 25 fb ff          	and    ax,0xfffb
c00221b6:	66 0d 22 00          	or     ax,0x22
c00221ba:	0f 22 c0             	mov    cr0,eax
c00221bd:	db e3                	fninit 
c00221bf:	0f 06                	clts   
c00221c1:	d9 2d 84 21 02 c0    	fldcw  WORD PTR ds:0xc0022184
c00221c7:	c3                   	ret    

c00221c8 <x87Close>:
c00221c8:	c3                   	ret    
c00221c9:	66 90                	xchg   ax,ax
c00221cb:	90                   	nop

c00221cc <__do_global_ctors_aux>:
c00221cc:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c00221d1:	83 f8 ff             	cmp    eax,0xffffffff
c00221d4:	74 1a                	je     c00221f0 <__do_global_ctors_aux+0x24>
c00221d6:	55                   	push   ebp
c00221d7:	89 e5                	mov    ebp,esp
c00221d9:	53                   	push   ebx
c00221da:	52                   	push   edx
c00221db:	bb 2c 32 02 c0       	mov    ebx,0xc002322c
c00221e0:	ff d0                	call   eax
c00221e2:	83 eb 04             	sub    ebx,0x4
c00221e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00221e7:	83 f8 ff             	cmp    eax,0xffffffff
c00221ea:	75 f4                	jne    c00221e0 <__do_global_ctors_aux+0x14>
c00221ec:	58                   	pop    eax
c00221ed:	5b                   	pop    ebx
c00221ee:	5d                   	pop    ebp
c00221ef:	c3                   	ret    
c00221f0:	c3                   	ret    
c00221f1:	66 90                	xchg   ax,ax
c00221f3:	90                   	nop

c00221f4 <__divdi3>:
c00221f4:	55                   	push   ebp
c00221f5:	57                   	push   edi
c00221f6:	56                   	push   esi
c00221f7:	53                   	push   ebx
c00221f8:	83 ec 1c             	sub    esp,0x1c
c00221fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00221ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022203:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022206:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002220a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002220e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022212:	85 db                	test   ebx,ebx
c0022214:	0f 88 8e 00 00 00    	js     c00222a8 <__divdi3+0xb4>
c002221a:	89 dd                	mov    ebp,ebx
c002221c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022224:	89 d3                	mov    ebx,edx
c0022226:	85 d2                	test   edx,edx
c0022228:	79 0d                	jns    c0022237 <__divdi3+0x43>
c002222a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002222e:	f7 d8                	neg    eax
c0022230:	83 d2 00             	adc    edx,0x0
c0022233:	f7 da                	neg    edx
c0022235:	89 d3                	mov    ebx,edx
c0022237:	89 c7                	mov    edi,eax
c0022239:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002223c:	85 db                	test   ebx,ebx
c002223e:	75 48                	jne    c0022288 <__divdi3+0x94>
c0022240:	39 ef                	cmp    edi,ebp
c0022242:	76 24                	jbe    c0022268 <__divdi3+0x74>
c0022244:	89 ea                	mov    edx,ebp
c0022246:	f7 f7                	div    edi
c0022248:	89 c1                	mov    ecx,eax
c002224a:	31 f6                	xor    esi,esi
c002224c:	89 c8                	mov    eax,ecx
c002224e:	89 f2                	mov    edx,esi
c0022250:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022254:	85 c9                	test   ecx,ecx
c0022256:	74 07                	je     c002225f <__divdi3+0x6b>
c0022258:	f7 d8                	neg    eax
c002225a:	83 d2 00             	adc    edx,0x0
c002225d:	f7 da                	neg    edx
c002225f:	83 c4 1c             	add    esp,0x1c
c0022262:	5b                   	pop    ebx
c0022263:	5e                   	pop    esi
c0022264:	5f                   	pop    edi
c0022265:	5d                   	pop    ebp
c0022266:	c3                   	ret    
c0022267:	90                   	nop
c0022268:	85 ff                	test   edi,edi
c002226a:	75 0b                	jne    c0022277 <__divdi3+0x83>
c002226c:	b8 01 00 00 00       	mov    eax,0x1
c0022271:	31 d2                	xor    edx,edx
c0022273:	f7 f3                	div    ebx
c0022275:	89 c7                	mov    edi,eax
c0022277:	31 d2                	xor    edx,edx
c0022279:	89 e8                	mov    eax,ebp
c002227b:	f7 f7                	div    edi
c002227d:	89 c6                	mov    esi,eax
c002227f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022282:	f7 f7                	div    edi
c0022284:	89 c1                	mov    ecx,eax
c0022286:	eb c4                	jmp    c002224c <__divdi3+0x58>
c0022288:	39 eb                	cmp    ebx,ebp
c002228a:	77 3c                	ja     c00222c8 <__divdi3+0xd4>
c002228c:	0f bd f3             	bsr    esi,ebx
c002228f:	83 f6 1f             	xor    esi,0x1f
c0022292:	75 40                	jne    c00222d4 <__divdi3+0xe0>
c0022294:	39 eb                	cmp    ebx,ebp
c0022296:	72 09                	jb     c00222a1 <__divdi3+0xad>
c0022298:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002229b:	0f 87 97 00 00 00    	ja     c0022338 <__divdi3+0x144>
c00222a1:	b9 01 00 00 00       	mov    ecx,0x1
c00222a6:	eb a4                	jmp    c002224c <__divdi3+0x58>
c00222a8:	f7 d9                	neg    ecx
c00222aa:	83 d3 00             	adc    ebx,0x0
c00222ad:	f7 db                	neg    ebx
c00222af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00222b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00222b6:	89 dd                	mov    ebp,ebx
c00222b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00222c0:	e9 5f ff ff ff       	jmp    c0022224 <__divdi3+0x30>
c00222c5:	8d 76 00             	lea    esi,[esi+0x0]
c00222c8:	31 f6                	xor    esi,esi
c00222ca:	31 c9                	xor    ecx,ecx
c00222cc:	e9 7b ff ff ff       	jmp    c002224c <__divdi3+0x58>
c00222d1:	8d 76 00             	lea    esi,[esi+0x0]
c00222d4:	b8 20 00 00 00       	mov    eax,0x20
c00222d9:	29 f0                	sub    eax,esi
c00222db:	89 f1                	mov    ecx,esi
c00222dd:	d3 e3                	shl    ebx,cl
c00222df:	89 fa                	mov    edx,edi
c00222e1:	88 c1                	mov    cl,al
c00222e3:	d3 ea                	shr    edx,cl
c00222e5:	09 da                	or     edx,ebx
c00222e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222eb:	89 f1                	mov    ecx,esi
c00222ed:	d3 e7                	shl    edi,cl
c00222ef:	89 eb                	mov    ebx,ebp
c00222f1:	88 c1                	mov    cl,al
c00222f3:	d3 eb                	shr    ebx,cl
c00222f5:	89 f1                	mov    ecx,esi
c00222f7:	d3 e5                	shl    ebp,cl
c00222f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00222fc:	88 c1                	mov    cl,al
c00222fe:	d3 ea                	shr    edx,cl
c0022300:	09 d5                	or     ebp,edx
c0022302:	89 e8                	mov    eax,ebp
c0022304:	89 da                	mov    edx,ebx
c0022306:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002230a:	89 d3                	mov    ebx,edx
c002230c:	89 c5                	mov    ebp,eax
c002230e:	f7 e7                	mul    edi
c0022310:	39 d3                	cmp    ebx,edx
c0022312:	72 18                	jb     c002232c <__divdi3+0x138>
c0022314:	74 0a                	je     c0022320 <__divdi3+0x12c>
c0022316:	89 e9                	mov    ecx,ebp
c0022318:	31 f6                	xor    esi,esi
c002231a:	e9 2d ff ff ff       	jmp    c002224c <__divdi3+0x58>
c002231f:	90                   	nop
c0022320:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022323:	89 f1                	mov    ecx,esi
c0022325:	d3 e7                	shl    edi,cl
c0022327:	39 c7                	cmp    edi,eax
c0022329:	73 eb                	jae    c0022316 <__divdi3+0x122>
c002232b:	90                   	nop
c002232c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002232f:	31 f6                	xor    esi,esi
c0022331:	e9 16 ff ff ff       	jmp    c002224c <__divdi3+0x58>
c0022336:	66 90                	xchg   ax,ax
c0022338:	31 c9                	xor    ecx,ecx
c002233a:	e9 0d ff ff ff       	jmp    c002224c <__divdi3+0x58>
c002233f:	90                   	nop

c0022340 <__moddi3>:
c0022340:	55                   	push   ebp
c0022341:	57                   	push   edi
c0022342:	56                   	push   esi
c0022343:	53                   	push   ebx
c0022344:	83 ec 2c             	sub    esp,0x2c
c0022347:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002234b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002234f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022353:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022357:	85 db                	test   ebx,ebx
c0022359:	0f 88 85 00 00 00    	js     c00223e4 <__moddi3+0xa4>
c002235f:	89 de                	mov    esi,ebx
c0022361:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022369:	89 d7                	mov    edi,edx
c002236b:	85 d2                	test   edx,edx
c002236d:	79 09                	jns    c0022378 <__moddi3+0x38>
c002236f:	f7 d8                	neg    eax
c0022371:	83 d2 00             	adc    edx,0x0
c0022374:	f7 da                	neg    edx
c0022376:	89 d7                	mov    edi,edx
c0022378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002237c:	89 cd                	mov    ebp,ecx
c002237e:	85 ff                	test   edi,edi
c0022380:	75 52                	jne    c00223d4 <__moddi3+0x94>
c0022382:	89 c3                	mov    ebx,eax
c0022384:	39 f0                	cmp    eax,esi
c0022386:	76 24                	jbe    c00223ac <__moddi3+0x6c>
c0022388:	89 c8                	mov    eax,ecx
c002238a:	89 f2                	mov    edx,esi
c002238c:	f7 f3                	div    ebx
c002238e:	89 d6                	mov    esi,edx
c0022390:	89 f0                	mov    eax,esi
c0022392:	31 d2                	xor    edx,edx
c0022394:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022398:	85 c9                	test   ecx,ecx
c002239a:	74 07                	je     c00223a3 <__moddi3+0x63>
c002239c:	f7 d8                	neg    eax
c002239e:	83 d2 00             	adc    edx,0x0
c00223a1:	f7 da                	neg    edx
c00223a3:	83 c4 2c             	add    esp,0x2c
c00223a6:	5b                   	pop    ebx
c00223a7:	5e                   	pop    esi
c00223a8:	5f                   	pop    edi
c00223a9:	5d                   	pop    ebp
c00223aa:	c3                   	ret    
c00223ab:	90                   	nop
c00223ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00223b0:	85 db                	test   ebx,ebx
c00223b2:	75 0d                	jne    c00223c1 <__moddi3+0x81>
c00223b4:	b8 01 00 00 00       	mov    eax,0x1
c00223b9:	31 d2                	xor    edx,edx
c00223bb:	f7 f7                	div    edi
c00223bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00223c1:	89 f0                	mov    eax,esi
c00223c3:	31 d2                	xor    edx,edx
c00223c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00223c9:	f7 f7                	div    edi
c00223cb:	89 e8                	mov    eax,ebp
c00223cd:	f7 f7                	div    edi
c00223cf:	89 d6                	mov    esi,edx
c00223d1:	eb bd                	jmp    c0022390 <__moddi3+0x50>
c00223d3:	90                   	nop
c00223d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00223d8:	39 f7                	cmp    edi,esi
c00223da:	76 20                	jbe    c00223fc <__moddi3+0xbc>
c00223dc:	89 c8                	mov    eax,ecx
c00223de:	89 f2                	mov    edx,esi
c00223e0:	eb b2                	jmp    c0022394 <__moddi3+0x54>
c00223e2:	66 90                	xchg   ax,ax
c00223e4:	f7 d9                	neg    ecx
c00223e6:	83 d3 00             	adc    ebx,0x0
c00223e9:	f7 db                	neg    ebx
c00223eb:	89 de                	mov    esi,ebx
c00223ed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00223f5:	e9 6f ff ff ff       	jmp    c0022369 <__moddi3+0x29>
c00223fa:	66 90                	xchg   ax,ax
c00223fc:	0f bd c7             	bsr    eax,edi
c00223ff:	83 f0 1f             	xor    eax,0x1f
c0022402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022406:	75 24                	jne    c002242c <__moddi3+0xec>
c0022408:	39 f7                	cmp    edi,esi
c002240a:	72 06                	jb     c0022412 <__moddi3+0xd2>
c002240c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022410:	77 0c                	ja     c002241e <__moddi3+0xde>
c0022412:	89 e9                	mov    ecx,ebp
c0022414:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022418:	19 fe                	sbb    esi,edi
c002241a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002241e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022422:	89 f2                	mov    edx,esi
c0022424:	e9 6b ff ff ff       	jmp    c0022394 <__moddi3+0x54>
c0022429:	8d 76 00             	lea    esi,[esi+0x0]
c002242c:	b8 20 00 00 00       	mov    eax,0x20
c0022431:	89 c2                	mov    edx,eax
c0022433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022437:	29 da                	sub    edx,ebx
c0022439:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002243d:	88 d9                	mov    cl,bl
c002243f:	d3 e7                	shl    edi,cl
c0022441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022445:	88 d1                	mov    cl,dl
c0022447:	d3 e8                	shr    eax,cl
c0022449:	09 c7                	or     edi,eax
c002244b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002244f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022453:	89 d8                	mov    eax,ebx
c0022455:	88 d9                	mov    cl,bl
c0022457:	d3 e7                	shl    edi,cl
c0022459:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002245d:	89 f3                	mov    ebx,esi
c002245f:	88 d1                	mov    cl,dl
c0022461:	d3 eb                	shr    ebx,cl
c0022463:	89 c7                	mov    edi,eax
c0022465:	88 c1                	mov    cl,al
c0022467:	d3 e6                	shl    esi,cl
c0022469:	89 e8                	mov    eax,ebp
c002246b:	88 d1                	mov    cl,dl
c002246d:	d3 e8                	shr    eax,cl
c002246f:	09 f0                	or     eax,esi
c0022471:	89 f9                	mov    ecx,edi
c0022473:	d3 e5                	shl    ebp,cl
c0022475:	89 da                	mov    edx,ebx
c0022477:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002247b:	89 d3                	mov    ebx,edx
c002247d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022481:	89 c6                	mov    esi,eax
c0022483:	89 d1                	mov    ecx,edx
c0022485:	39 d3                	cmp    ebx,edx
c0022487:	72 27                	jb     c00224b0 <__moddi3+0x170>
c0022489:	74 21                	je     c00224ac <__moddi3+0x16c>
c002248b:	29 f5                	sub    ebp,esi
c002248d:	19 cb                	sbb    ebx,ecx
c002248f:	89 de                	mov    esi,ebx
c0022491:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022495:	d3 e6                	shl    esi,cl
c0022497:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002249b:	89 f9                	mov    ecx,edi
c002249d:	d3 ed                	shr    ebp,cl
c002249f:	09 ee                	or     esi,ebp
c00224a1:	89 f0                	mov    eax,esi
c00224a3:	d3 eb                	shr    ebx,cl
c00224a5:	89 da                	mov    edx,ebx
c00224a7:	e9 e8 fe ff ff       	jmp    c0022394 <__moddi3+0x54>
c00224ac:	39 c5                	cmp    ebp,eax
c00224ae:	73 db                	jae    c002248b <__moddi3+0x14b>
c00224b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00224b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00224b8:	89 d1                	mov    ecx,edx
c00224ba:	89 c6                	mov    esi,eax
c00224bc:	eb cd                	jmp    c002248b <__moddi3+0x14b>
c00224be:	66 90                	xchg   ax,ax

c00224c0 <__udivdi3>:
c00224c0:	55                   	push   ebp
c00224c1:	57                   	push   edi
c00224c2:	56                   	push   esi
c00224c3:	53                   	push   ebx
c00224c4:	83 ec 1c             	sub    esp,0x1c
c00224c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00224cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00224cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00224d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00224d7:	85 d2                	test   edx,edx
c00224d9:	75 41                	jne    c002251c <__udivdi3+0x5c>
c00224db:	39 f7                	cmp    edi,esi
c00224dd:	76 15                	jbe    c00224f4 <__udivdi3+0x34>
c00224df:	89 e8                	mov    eax,ebp
c00224e1:	89 f2                	mov    edx,esi
c00224e3:	f7 f7                	div    edi
c00224e5:	31 db                	xor    ebx,ebx
c00224e7:	89 da                	mov    edx,ebx
c00224e9:	83 c4 1c             	add    esp,0x1c
c00224ec:	5b                   	pop    ebx
c00224ed:	5e                   	pop    esi
c00224ee:	5f                   	pop    edi
c00224ef:	5d                   	pop    ebp
c00224f0:	c3                   	ret    
c00224f1:	8d 76 00             	lea    esi,[esi+0x0]
c00224f4:	89 f9                	mov    ecx,edi
c00224f6:	85 ff                	test   edi,edi
c00224f8:	75 0b                	jne    c0022505 <__udivdi3+0x45>
c00224fa:	b8 01 00 00 00       	mov    eax,0x1
c00224ff:	31 d2                	xor    edx,edx
c0022501:	f7 f7                	div    edi
c0022503:	89 c1                	mov    ecx,eax
c0022505:	31 d2                	xor    edx,edx
c0022507:	89 f0                	mov    eax,esi
c0022509:	f7 f1                	div    ecx
c002250b:	89 c3                	mov    ebx,eax
c002250d:	89 e8                	mov    eax,ebp
c002250f:	f7 f1                	div    ecx
c0022511:	89 da                	mov    edx,ebx
c0022513:	83 c4 1c             	add    esp,0x1c
c0022516:	5b                   	pop    ebx
c0022517:	5e                   	pop    esi
c0022518:	5f                   	pop    edi
c0022519:	5d                   	pop    ebp
c002251a:	c3                   	ret    
c002251b:	90                   	nop
c002251c:	39 f2                	cmp    edx,esi
c002251e:	77 1c                	ja     c002253c <__udivdi3+0x7c>
c0022520:	0f bd da             	bsr    ebx,edx
c0022523:	83 f3 1f             	xor    ebx,0x1f
c0022526:	75 24                	jne    c002254c <__udivdi3+0x8c>
c0022528:	39 f2                	cmp    edx,esi
c002252a:	72 08                	jb     c0022534 <__udivdi3+0x74>
c002252c:	39 ef                	cmp    edi,ebp
c002252e:	0f 87 84 00 00 00    	ja     c00225b8 <__udivdi3+0xf8>
c0022534:	b8 01 00 00 00       	mov    eax,0x1
c0022539:	eb ac                	jmp    c00224e7 <__udivdi3+0x27>
c002253b:	90                   	nop
c002253c:	31 db                	xor    ebx,ebx
c002253e:	31 c0                	xor    eax,eax
c0022540:	89 da                	mov    edx,ebx
c0022542:	83 c4 1c             	add    esp,0x1c
c0022545:	5b                   	pop    ebx
c0022546:	5e                   	pop    esi
c0022547:	5f                   	pop    edi
c0022548:	5d                   	pop    ebp
c0022549:	c3                   	ret    
c002254a:	66 90                	xchg   ax,ax
c002254c:	b8 20 00 00 00       	mov    eax,0x20
c0022551:	29 d8                	sub    eax,ebx
c0022553:	88 d9                	mov    cl,bl
c0022555:	d3 e2                	shl    edx,cl
c0022557:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002255b:	89 fa                	mov    edx,edi
c002255d:	88 c1                	mov    cl,al
c002255f:	d3 ea                	shr    edx,cl
c0022561:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022565:	09 d1                	or     ecx,edx
c0022567:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002256b:	88 d9                	mov    cl,bl
c002256d:	d3 e7                	shl    edi,cl
c002256f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022573:	89 f7                	mov    edi,esi
c0022575:	88 c1                	mov    cl,al
c0022577:	d3 ef                	shr    edi,cl
c0022579:	88 d9                	mov    cl,bl
c002257b:	d3 e6                	shl    esi,cl
c002257d:	89 ea                	mov    edx,ebp
c002257f:	88 c1                	mov    cl,al
c0022581:	d3 ea                	shr    edx,cl
c0022583:	09 d6                	or     esi,edx
c0022585:	89 f0                	mov    eax,esi
c0022587:	89 fa                	mov    edx,edi
c0022589:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002258d:	89 d7                	mov    edi,edx
c002258f:	89 c6                	mov    esi,eax
c0022591:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022595:	39 d7                	cmp    edi,edx
c0022597:	72 13                	jb     c00225ac <__udivdi3+0xec>
c0022599:	74 09                	je     c00225a4 <__udivdi3+0xe4>
c002259b:	89 f0                	mov    eax,esi
c002259d:	31 db                	xor    ebx,ebx
c002259f:	e9 43 ff ff ff       	jmp    c00224e7 <__udivdi3+0x27>
c00225a4:	88 d9                	mov    cl,bl
c00225a6:	d3 e5                	shl    ebp,cl
c00225a8:	39 c5                	cmp    ebp,eax
c00225aa:	73 ef                	jae    c002259b <__udivdi3+0xdb>
c00225ac:	8d 46 ff             	lea    eax,[esi-0x1]
c00225af:	31 db                	xor    ebx,ebx
c00225b1:	e9 31 ff ff ff       	jmp    c00224e7 <__udivdi3+0x27>
c00225b6:	66 90                	xchg   ax,ax
c00225b8:	31 c0                	xor    eax,eax
c00225ba:	e9 28 ff ff ff       	jmp    c00224e7 <__udivdi3+0x27>
c00225bf:	90                   	nop

c00225c0 <__umoddi3>:
c00225c0:	55                   	push   ebp
c00225c1:	57                   	push   edi
c00225c2:	56                   	push   esi
c00225c3:	53                   	push   ebx
c00225c4:	83 ec 1c             	sub    esp,0x1c
c00225c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00225d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00225d7:	89 da                	mov    edx,ebx
c00225d9:	85 c0                	test   eax,eax
c00225db:	75 37                	jne    c0022614 <__umoddi3+0x54>
c00225dd:	39 df                	cmp    edi,ebx
c00225df:	76 13                	jbe    c00225f4 <__umoddi3+0x34>
c00225e1:	89 f0                	mov    eax,esi
c00225e3:	f7 f7                	div    edi
c00225e5:	89 d0                	mov    eax,edx
c00225e7:	31 d2                	xor    edx,edx
c00225e9:	83 c4 1c             	add    esp,0x1c
c00225ec:	5b                   	pop    ebx
c00225ed:	5e                   	pop    esi
c00225ee:	5f                   	pop    edi
c00225ef:	5d                   	pop    ebp
c00225f0:	c3                   	ret    
c00225f1:	8d 76 00             	lea    esi,[esi+0x0]
c00225f4:	89 fd                	mov    ebp,edi
c00225f6:	85 ff                	test   edi,edi
c00225f8:	75 0b                	jne    c0022605 <__umoddi3+0x45>
c00225fa:	b8 01 00 00 00       	mov    eax,0x1
c00225ff:	31 d2                	xor    edx,edx
c0022601:	f7 f7                	div    edi
c0022603:	89 c5                	mov    ebp,eax
c0022605:	89 d8                	mov    eax,ebx
c0022607:	31 d2                	xor    edx,edx
c0022609:	f7 f5                	div    ebp
c002260b:	89 f0                	mov    eax,esi
c002260d:	f7 f5                	div    ebp
c002260f:	89 d0                	mov    eax,edx
c0022611:	eb d4                	jmp    c00225e7 <__umoddi3+0x27>
c0022613:	90                   	nop
c0022614:	89 f1                	mov    ecx,esi
c0022616:	39 d8                	cmp    eax,ebx
c0022618:	76 0a                	jbe    c0022624 <__umoddi3+0x64>
c002261a:	89 f0                	mov    eax,esi
c002261c:	83 c4 1c             	add    esp,0x1c
c002261f:	5b                   	pop    ebx
c0022620:	5e                   	pop    esi
c0022621:	5f                   	pop    edi
c0022622:	5d                   	pop    ebp
c0022623:	c3                   	ret    
c0022624:	0f bd e8             	bsr    ebp,eax
c0022627:	83 f5 1f             	xor    ebp,0x1f
c002262a:	75 1c                	jne    c0022648 <__umoddi3+0x88>
c002262c:	39 d8                	cmp    eax,ebx
c002262e:	72 04                	jb     c0022634 <__umoddi3+0x74>
c0022630:	39 f7                	cmp    edi,esi
c0022632:	77 08                	ja     c002263c <__umoddi3+0x7c>
c0022634:	89 da                	mov    edx,ebx
c0022636:	29 fe                	sub    esi,edi
c0022638:	19 c2                	sbb    edx,eax
c002263a:	89 f1                	mov    ecx,esi
c002263c:	89 c8                	mov    eax,ecx
c002263e:	83 c4 1c             	add    esp,0x1c
c0022641:	5b                   	pop    ebx
c0022642:	5e                   	pop    esi
c0022643:	5f                   	pop    edi
c0022644:	5d                   	pop    ebp
c0022645:	c3                   	ret    
c0022646:	66 90                	xchg   ax,ax
c0022648:	ba 20 00 00 00       	mov    edx,0x20
c002264d:	29 ea                	sub    edx,ebp
c002264f:	89 e9                	mov    ecx,ebp
c0022651:	d3 e0                	shl    eax,cl
c0022653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022657:	89 f8                	mov    eax,edi
c0022659:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002265d:	88 d1                	mov    cl,dl
c002265f:	d3 e8                	shr    eax,cl
c0022661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022665:	09 c1                	or     ecx,eax
c0022667:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002266b:	89 e9                	mov    ecx,ebp
c002266d:	d3 e7                	shl    edi,cl
c002266f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022673:	89 d8                	mov    eax,ebx
c0022675:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022679:	88 d1                	mov    cl,dl
c002267b:	d3 e8                	shr    eax,cl
c002267d:	89 c7                	mov    edi,eax
c002267f:	89 e9                	mov    ecx,ebp
c0022681:	d3 e3                	shl    ebx,cl
c0022683:	89 f0                	mov    eax,esi
c0022685:	88 d1                	mov    cl,dl
c0022687:	d3 e8                	shr    eax,cl
c0022689:	09 d8                	or     eax,ebx
c002268b:	89 e9                	mov    ecx,ebp
c002268d:	d3 e6                	shl    esi,cl
c002268f:	89 f3                	mov    ebx,esi
c0022691:	89 fa                	mov    edx,edi
c0022693:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022697:	89 d1                	mov    ecx,edx
c0022699:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002269d:	89 c6                	mov    esi,eax
c002269f:	89 d7                	mov    edi,edx
c00226a1:	39 d1                	cmp    ecx,edx
c00226a3:	72 27                	jb     c00226cc <__umoddi3+0x10c>
c00226a5:	74 21                	je     c00226c8 <__umoddi3+0x108>
c00226a7:	89 ca                	mov    edx,ecx
c00226a9:	29 f3                	sub    ebx,esi
c00226ab:	19 fa                	sbb    edx,edi
c00226ad:	89 d0                	mov    eax,edx
c00226af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00226b3:	d3 e0                	shl    eax,cl
c00226b5:	89 e9                	mov    ecx,ebp
c00226b7:	d3 eb                	shr    ebx,cl
c00226b9:	09 d8                	or     eax,ebx
c00226bb:	d3 ea                	shr    edx,cl
c00226bd:	83 c4 1c             	add    esp,0x1c
c00226c0:	5b                   	pop    ebx
c00226c1:	5e                   	pop    esi
c00226c2:	5f                   	pop    edi
c00226c3:	5d                   	pop    ebp
c00226c4:	c3                   	ret    
c00226c5:	8d 76 00             	lea    esi,[esi+0x0]
c00226c8:	39 c3                	cmp    ebx,eax
c00226ca:	73 db                	jae    c00226a7 <__umoddi3+0xe7>
c00226cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00226d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00226d4:	89 d7                	mov    edi,edx
c00226d6:	89 c6                	mov    esi,eax
c00226d8:	eb cd                	jmp    c00226a7 <__umoddi3+0xe7>

Disassembly of section .init:

c00226da <_init>:
c00226da:	55                   	push   ebp
c00226db:	89 e5                	mov    ebp,esp
c00226dd:	e8 36 da fd ff       	call   c0000118 <frame_dummy>
c00226e2:	e8 e5 fa ff ff       	call   c00221cc <__do_global_ctors_aux>
c00226e7:	5d                   	pop    ebp
c00226e8:	c3                   	ret    

Disassembly of section .fini:

c00226e9 <_fini>:
c00226e9:	55                   	push   ebp
c00226ea:	89 e5                	mov    ebp,esp
c00226ec:	e8 b7 d9 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00226f1:	5d                   	pop    ebp
c00226f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00226f4 <Computer::~Computer()>:
c00226f4:	83 ec 0c             	sub    esp,0xc
c00226f7:	ba 38 3c 02 c0       	mov    edx,0xc0023c38
c00226fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022700:	89 10                	mov    DWORD PTR [eax],edx
c0022702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022706:	83 ec 0c             	sub    esp,0xc
c0022709:	50                   	push   eax
c002270a:	e8 85 bc fe ff       	call   c000e394 <Device::~Device()>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	90                   	nop
c0022713:	83 c4 0c             	add    esp,0xc
c0022716:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022718 <Computer::~Computer()>:
c0022718:	83 ec 0c             	sub    esp,0xc
c002271b:	83 ec 0c             	sub    esp,0xc
c002271e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022722:	e8 cd ff ff ff       	call   c00226f4 <Computer::~Computer()>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	83 ec 08             	sub    esp,0x8
c002272d:	68 ec 01 00 00       	push   0x1ec
c0022732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022736:	e8 f7 a7 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c002273b:	83 c4 10             	add    esp,0x10
c002273e:	83 c4 0c             	add    esp,0xc
c0022741:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022742 <idleCommon()>:
c0022742:	83 ec 0c             	sub    esp,0xc
c0022745:	fa                   	cli    
c0022746:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c002274c:	e8 9f 5c ff ff       	call   c00183f0 <schedule()>
c0022751:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0022756:	48                   	dec    eax
c0022757:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c002275c:	75 01                	jne    c002275f <idleCommon()+0x1d>
c002275e:	fb                   	sti    
c002275f:	83 c4 0c             	add    esp,0xc
c0022762:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022764 <LinkedList<UnixFile>::~LinkedList()>:
c0022764:	90                   	nop
c0022765:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022766 <LinkedList<UnixFile>::LinkedList()>:
c0022766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002276a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002277b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002277f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002278a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022794:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002279b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002279f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00227a6:	90                   	nop
c00227a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00227a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00227a8:	83 ec 0c             	sub    esp,0xc
c00227ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00227b0:	75 10                	jne    c00227c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	68 08 40 02 c0       	push   0xc0024008
c00227ba:	e8 b2 25 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00227bf:	83 c4 10             	add    esp,0x10
c00227c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00227c8:	85 c0                	test   eax,eax
c00227ca:	74 34                	je     c0022800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00227cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227d3:	85 c0                	test   eax,eax
c00227d5:	74 29                	je     c0022800 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00227d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00227e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00227e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00227ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00227f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00227f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00227fe:	eb 65                	jmp    c0022865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022804:	8b 00                	mov    eax,DWORD PTR [eax]
c0022806:	85 c0                	test   eax,eax
c0022808:	75 4b                	jne    c0022855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002280a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022811:	85 c0                	test   eax,eax
c0022813:	75 40                	jne    c0022855 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002281d:	89 10                	mov    DWORD PTR [eax],edx
c002281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002282a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022831:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002283c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002283f:	85 c0                	test   eax,eax
c0022841:	74 22                	je     c0022865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022843:	83 ec 0c             	sub    esp,0xc
c0022846:	68 2a 40 02 c0       	push   0xc002402a
c002284b:	e8 21 25 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022850:	83 c4 10             	add    esp,0x10
c0022853:	eb 10                	jmp    c0022865 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022855:	83 ec 0c             	sub    esp,0xc
c0022858:	68 34 40 02 c0       	push   0xc0024034
c002285d:	e8 0f 25 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022862:	83 c4 10             	add    esp,0x10
c0022865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022869:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002286c:	8d 50 01             	lea    edx,[eax+0x1]
c002286f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022873:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022876:	90                   	nop
c0022877:	83 c4 0c             	add    esp,0xc
c002287a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002287c <LinkedList<UnixFile>::getFirstElement()>:
c002287c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022880:	8b 00                	mov    eax,DWORD PTR [eax]
c0022882:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022884 <LinkedList<UnixFile>::removeFirst()>:
c0022884:	83 ec 0c             	sub    esp,0xc
c0022887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288b:	8b 00                	mov    eax,DWORD PTR [eax]
c002288d:	85 c0                	test   eax,eax
c002288f:	75 12                	jne    c00228a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022891:	83 ec 0c             	sub    esp,0xc
c0022894:	68 40 40 02 c0       	push   0xc0024040
c0022899:	e8 d3 24 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c002289e:	83 c4 10             	add    esp,0x10
c00228a1:	eb 7e                	jmp    c0022921 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00228ad:	85 c0                	test   eax,eax
c00228af:	74 10                	je     c00228c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00228b1:	83 ec 0c             	sub    esp,0xc
c00228b4:	68 8b 40 02 c0       	push   0xc002408b
c00228b9:	e8 b3 24 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00228be:	83 c4 10             	add    esp,0x10
c00228c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00228c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00228ca:	85 c0                	test   eax,eax
c00228cc:	75 33                	jne    c0022901 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00228ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00228d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00228ea:	83 f8 01             	cmp    eax,0x1
c00228ed:	74 21                	je     c0022910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00228ef:	83 ec 0c             	sub    esp,0xc
c00228f2:	68 64 40 02 c0       	push   0xc0024064
c00228f7:	e8 75 24 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c00228fc:	83 c4 10             	add    esp,0x10
c00228ff:	eb 0f                	jmp    c0022910 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	8b 00                	mov    eax,DWORD PTR [eax]
c0022907:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290e:	89 10                	mov    DWORD PTR [eax],edx
c0022910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022917:	8d 50 ff             	lea    edx,[eax-0x1]
c002291a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022921:	83 c4 0c             	add    esp,0xc
c0022924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022926 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002292a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002292d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002292e <DriverlessDevice::~DriverlessDevice()>:
c002292e:	ba 7c 48 02 c0       	mov    edx,0xc002487c
c0022933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022937:	89 10                	mov    DWORD PTR [eax],edx
c0022939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293d:	50                   	push   eax
c002293e:	e8 51 ba fe ff       	call   c000e394 <Device::~Device()>
c0022943:	83 c4 04             	add    esp,0x4
c0022946:	90                   	nop
c0022947:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022948 <DriverlessDevice::~DriverlessDevice()>:
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	83 ec 0c             	sub    esp,0xc
c002294e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022952:	e8 d7 ff ff ff       	call   c002292e <DriverlessDevice::~DriverlessDevice()>
c0022957:	83 c4 10             	add    esp,0x10
c002295a:	83 ec 08             	sub    esp,0x8
c002295d:	68 58 01 00 00       	push   0x158
c0022962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022966:	e8 c7 a5 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c002296b:	83 c4 10             	add    esp,0x10
c002296e:	83 c4 0c             	add    esp,0xc
c0022971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022972 <LinkedList<Device>::addElement(Device*)>:
c0022972:	83 ec 0c             	sub    esp,0xc
c0022975:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002297a:	75 10                	jne    c002298c <LinkedList<Device>::addElement(Device*)+0x1a>
c002297c:	83 ec 0c             	sub    esp,0xc
c002297f:	68 08 40 02 c0       	push   0xc0024008
c0022984:	e8 e8 23 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022989:	83 c4 10             	add    esp,0x10
c002298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022990:	8b 00                	mov    eax,DWORD PTR [eax]
c0022992:	85 c0                	test   eax,eax
c0022994:	74 3a                	je     c00229d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002299d:	85 c0                	test   eax,eax
c002299f:	74 2f                	je     c00229d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00229a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00229b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00229ce:	eb 68                	jmp    c0022a38 <LinkedList<Device>::addElement(Device*)+0xc6>
c00229d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229d6:	85 c0                	test   eax,eax
c00229d8:	75 4e                	jne    c0022a28 <LinkedList<Device>::addElement(Device*)+0xb6>
c00229da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229e1:	85 c0                	test   eax,eax
c00229e3:	75 43                	jne    c0022a28 <LinkedList<Device>::addElement(Device*)+0xb6>
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229ed:	89 10                	mov    DWORD PTR [eax],edx
c00229ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a12:	85 c0                	test   eax,eax
c0022a14:	74 22                	je     c0022a38 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022a16:	83 ec 0c             	sub    esp,0xc
c0022a19:	68 2a 40 02 c0       	push   0xc002402a
c0022a1e:	e8 4e 23 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022a23:	83 c4 10             	add    esp,0x10
c0022a26:	eb 10                	jmp    c0022a38 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022a28:	83 ec 0c             	sub    esp,0xc
c0022a2b:	68 34 40 02 c0       	push   0xc0024034
c0022a30:	e8 3c 23 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022a35:	83 c4 10             	add    esp,0x10
c0022a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0022a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a49:	90                   	nop
c0022a4a:	83 c4 0c             	add    esp,0xc
c0022a4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022a4e <LinkedList<Device>::LinkedList()>:
c0022a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a8e:	90                   	nop
c0022a8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022a90 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a96:	85 c0                	test   eax,eax
c0022a98:	75 0e                	jne    c0022aa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aa1:	85 c0                	test   eax,eax
c0022aa3:	75 03                	jne    c0022aa8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022aa5:	b0 01                	mov    al,0x1
c0022aa7:	c3                   	ret    
c0022aa8:	b0 00                	mov    al,0x0
c0022aaa:	90                   	nop
c0022aab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022aac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ab2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022ab4:	83 ec 0c             	sub    esp,0xc
c0022ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022abd:	85 c0                	test   eax,eax
c0022abf:	75 17                	jne    c0022ad8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022ac1:	83 ec 0c             	sub    esp,0xc
c0022ac4:	68 40 40 02 c0       	push   0xc0024040
c0022ac9:	e8 a3 22 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022ace:	83 c4 10             	add    esp,0x10
c0022ad1:	e9 92 00 00 00       	jmp    c0022b68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022ad6:	66 90                	xchg   ax,ax
c0022ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022adc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022adf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022ae2:	85 c0                	test   eax,eax
c0022ae4:	0f 95 c0             	setne  al
c0022ae7:	84 c0                	test   al,al
c0022ae9:	74 11                	je     c0022afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022aeb:	83 ec 0c             	sub    esp,0xc
c0022aee:	68 8b 40 02 c0       	push   0xc002408b
c0022af3:	e8 79 22 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022af8:	83 c4 10             	add    esp,0x10
c0022afb:	90                   	nop
c0022afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022b05:	85 c0                	test   eax,eax
c0022b07:	0f 94 c0             	sete   al
c0022b0a:	84 c0                	test   al,al
c0022b0c:	74 36                	je     c0022b44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b2a:	83 f8 01             	cmp    eax,0x1
c0022b2d:	74 25                	je     c0022b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022b2f:	83 ec 0c             	sub    esp,0xc
c0022b32:	68 64 40 02 c0       	push   0xc0024064
c0022b37:	e8 35 22 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022b3c:	83 c4 10             	add    esp,0x10
c0022b3f:	eb 13                	jmp    c0022b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022b41:	8d 76 00             	lea    esi,[esi+0x0]
c0022b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b51:	89 10                	mov    DWORD PTR [eax],edx
c0022b53:	90                   	nop
c0022b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b5b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b65:	8d 76 00             	lea    esi,[esi+0x0]
c0022b68:	83 c4 0c             	add    esp,0xc
c0022b6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022b6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022b6c:	83 ec 0c             	sub    esp,0xc
c0022b6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022b74:	75 12                	jne    c0022b88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022b76:	83 ec 0c             	sub    esp,0xc
c0022b79:	68 08 40 02 c0       	push   0xc0024008
c0022b7e:	e8 ee 21 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022b83:	83 c4 10             	add    esp,0x10
c0022b86:	66 90                	xchg   ax,ax
c0022b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b8e:	85 c0                	test   eax,eax
c0022b90:	74 36                	je     c0022bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b99:	85 c0                	test   eax,eax
c0022b9b:	74 2b                	je     c0022bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ba4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ba8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022baf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022bc4:	eb 6a                	jmp    c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022bc6:	66 90                	xchg   ax,ax
c0022bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bce:	85 c0                	test   eax,eax
c0022bd0:	75 4e                	jne    c0022c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bd9:	85 c0                	test   eax,eax
c0022bdb:	75 43                	jne    c0022c20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022be5:	89 10                	mov    DWORD PTR [eax],edx
c0022be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022beb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c07:	85 c0                	test   eax,eax
c0022c09:	74 25                	je     c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022c0b:	83 ec 0c             	sub    esp,0xc
c0022c0e:	68 2a 40 02 c0       	push   0xc002402a
c0022c13:	e8 59 21 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022c18:	83 c4 10             	add    esp,0x10
c0022c1b:	eb 13                	jmp    c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0022c20:	83 ec 0c             	sub    esp,0xc
c0022c23:	68 34 40 02 c0       	push   0xc0024034
c0022c28:	e8 44 21 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022c2d:	83 c4 10             	add    esp,0x10
c0022c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c37:	8d 50 01             	lea    edx,[eax+0x1]
c0022c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c41:	90                   	nop
c0022c42:	83 c4 0c             	add    esp,0xc
c0022c45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022c48 <ACPI::~ACPI()>:
c0022c48:	83 ec 0c             	sub    esp,0xc
c0022c4b:	ba b0 52 02 c0       	mov    edx,0xc00252b0
c0022c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c54:	89 10                	mov    DWORD PTR [eax],edx
c0022c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5a:	83 ec 0c             	sub    esp,0xc
c0022c5d:	50                   	push   eax
c0022c5e:	e8 31 b7 fe ff       	call   c000e394 <Device::~Device()>
c0022c63:	83 c4 10             	add    esp,0x10
c0022c66:	90                   	nop
c0022c67:	83 c4 0c             	add    esp,0xc
c0022c6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022c6c <ACPI::~ACPI()>:
c0022c6c:	83 ec 0c             	sub    esp,0xc
c0022c6f:	83 ec 0c             	sub    esp,0xc
c0022c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c76:	e8 cd ff ff ff       	call   c0022c48 <ACPI::~ACPI()>
c0022c7b:	83 c4 10             	add    esp,0x10
c0022c7e:	83 ec 08             	sub    esp,0x8
c0022c81:	68 64 12 00 00       	push   0x1264
c0022c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c8a:	e8 a3 a2 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022c8f:	83 c4 10             	add    esp,0x10
c0022c92:	83 c4 0c             	add    esp,0xc
c0022c95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022c98 <LinkedList<Device>::~LinkedList()>:
c0022c98:	90                   	nop
c0022c99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022c9c <LinkedList<Device>::isEmpty()>:
c0022c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca2:	85 c0                	test   eax,eax
c0022ca4:	75 0e                	jne    c0022cb4 <LinkedList<Device>::isEmpty()+0x18>
c0022ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cad:	85 c0                	test   eax,eax
c0022caf:	75 03                	jne    c0022cb4 <LinkedList<Device>::isEmpty()+0x18>
c0022cb1:	b0 01                	mov    al,0x1
c0022cb3:	c3                   	ret    
c0022cb4:	b0 00                	mov    al,0x0
c0022cb6:	90                   	nop
c0022cb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022cb8 <LinkedList<Device>::getFirstElement()>:
c0022cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022cc0 <LinkedList<Device>::removeFirst()>:
c0022cc0:	83 ec 0c             	sub    esp,0xc
c0022cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc9:	85 c0                	test   eax,eax
c0022ccb:	75 17                	jne    c0022ce4 <LinkedList<Device>::removeFirst()+0x24>
c0022ccd:	83 ec 0c             	sub    esp,0xc
c0022cd0:	68 40 40 02 c0       	push   0xc0024040
c0022cd5:	e8 97 20 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022cda:	83 c4 10             	add    esp,0x10
c0022cdd:	e9 92 00 00 00       	jmp    c0022d74 <LinkedList<Device>::removeFirst()+0xb4>
c0022ce2:	66 90                	xchg   ax,ax
c0022ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ceb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022cf1:	85 c0                	test   eax,eax
c0022cf3:	74 13                	je     c0022d08 <LinkedList<Device>::removeFirst()+0x48>
c0022cf5:	83 ec 0c             	sub    esp,0xc
c0022cf8:	68 8b 40 02 c0       	push   0xc002408b
c0022cfd:	e8 6f 20 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022d02:	83 c4 10             	add    esp,0x10
c0022d05:	8d 76 00             	lea    esi,[esi+0x0]
c0022d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022d14:	85 c0                	test   eax,eax
c0022d16:	75 34                	jne    c0022d4c <LinkedList<Device>::removeFirst()+0x8c>
c0022d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d34:	83 f8 01             	cmp    eax,0x1
c0022d37:	74 27                	je     c0022d60 <LinkedList<Device>::removeFirst()+0xa0>
c0022d39:	83 ec 0c             	sub    esp,0xc
c0022d3c:	68 64 40 02 c0       	push   0xc0024064
c0022d41:	e8 2b 20 ff ff       	call   c0014d71 <Krnl::panic(char const*)>
c0022d46:	83 c4 10             	add    esp,0x10
c0022d49:	eb 15                	jmp    c0022d60 <LinkedList<Device>::removeFirst()+0xa0>
c0022d4b:	90                   	nop
c0022d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d52:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5c:	89 10                	mov    DWORD PTR [eax],edx
c0022d5e:	66 90                	xchg   ax,ax
c0022d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d67:	8d 50 ff             	lea    edx,[eax-0x1]
c0022d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d71:	8d 76 00             	lea    esi,[esi+0x0]
c0022d74:	83 c4 0c             	add    esp,0xc
c0022d77:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022d78 <CPU::~CPU()>:
c0022d78:	83 ec 0c             	sub    esp,0xc
c0022d7b:	ba 40 58 02 c0       	mov    edx,0xc0025840
c0022d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d84:	89 10                	mov    DWORD PTR [eax],edx
c0022d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8a:	83 ec 0c             	sub    esp,0xc
c0022d8d:	50                   	push   eax
c0022d8e:	e8 01 b6 fe ff       	call   c000e394 <Device::~Device()>
c0022d93:	83 c4 10             	add    esp,0x10
c0022d96:	90                   	nop
c0022d97:	83 c4 0c             	add    esp,0xc
c0022d9a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022d9c <CPU::~CPU()>:
c0022d9c:	83 ec 0c             	sub    esp,0xc
c0022d9f:	83 ec 0c             	sub    esp,0xc
c0022da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022da6:	e8 cd ff ff ff       	call   c0022d78 <CPU::~CPU()>
c0022dab:	83 c4 10             	add    esp,0x10
c0022dae:	83 ec 08             	sub    esp,0x8
c0022db1:	68 98 11 00 00       	push   0x1198
c0022db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dba:	e8 73 a1 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022dbf:	83 c4 10             	add    esp,0x10
c0022dc2:	83 c4 0c             	add    esp,0xc
c0022dc5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022dc8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022dc8:	90                   	nop
c0022dc9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022dcc <ThreadControlBlock::ThreadControlBlock()>:
c0022dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dd0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022dd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ddb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022de6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022ded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022df1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dfc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e07:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e0f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022e13:	90                   	nop
c0022e14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022e18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022e58:	90                   	nop
c0022e59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e63:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0022e64 <Vm::_FPUState::_FPUState()>:
c0022e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e68:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0022e6f:	90                   	nop
c0022e70:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022e72 <PCI::~PCI()>:
c0022e72:	83 ec 0c             	sub    esp,0xc
c0022e75:	ba 70 66 02 c0       	mov    edx,0xc0026670
c0022e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7e:	89 10                	mov    DWORD PTR [eax],edx
c0022e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e84:	83 ec 0c             	sub    esp,0xc
c0022e87:	50                   	push   eax
c0022e88:	e8 97 af fe ff       	call   c000de24 <Bus::~Bus()>
c0022e8d:	83 c4 10             	add    esp,0x10
c0022e90:	90                   	nop
c0022e91:	83 c4 0c             	add    esp,0xc
c0022e94:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022e96 <PCI::~PCI()>:
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	83 ec 0c             	sub    esp,0xc
c0022e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ea0:	e8 cd ff ff ff       	call   c0022e72 <PCI::~PCI()>
c0022ea5:	83 c4 10             	add    esp,0x10
c0022ea8:	83 ec 08             	sub    esp,0x8
c0022eab:	68 5c 01 00 00       	push   0x15c
c0022eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eb4:	e8 79 a0 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	83 c4 0c             	add    esp,0xc
c0022ebf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022ec0 <IDE::~IDE()>:
c0022ec0:	83 ec 0c             	sub    esp,0xc
c0022ec3:	ba 40 67 02 c0       	mov    edx,0xc0026740
c0022ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecc:	89 10                	mov    DWORD PTR [eax],edx
c0022ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed2:	83 ec 0c             	sub    esp,0xc
c0022ed5:	50                   	push   eax
c0022ed6:	e8 d1 b9 fe ff       	call   c000e8ac <HardDiskController::~HardDiskController()>
c0022edb:	83 c4 10             	add    esp,0x10
c0022ede:	90                   	nop
c0022edf:	83 c4 0c             	add    esp,0xc
c0022ee2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022ee4 <IDE::~IDE()>:
c0022ee4:	83 ec 0c             	sub    esp,0xc
c0022ee7:	83 ec 0c             	sub    esp,0xc
c0022eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022eee:	e8 cd ff ff ff       	call   c0022ec0 <IDE::~IDE()>
c0022ef3:	83 c4 10             	add    esp,0x10
c0022ef6:	83 ec 08             	sub    esp,0x8
c0022ef9:	68 70 02 00 00       	push   0x270
c0022efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f02:	e8 2b a0 fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022f07:	83 c4 10             	add    esp,0x10
c0022f0a:	83 c4 0c             	add    esp,0xc
c0022f0d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022f0e <SATABus::~SATABus()>:
c0022f0e:	83 ec 0c             	sub    esp,0xc
c0022f11:	ba 0c 68 02 c0       	mov    edx,0xc002680c
c0022f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1a:	89 10                	mov    DWORD PTR [eax],edx
c0022f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f20:	83 ec 0c             	sub    esp,0xc
c0022f23:	50                   	push   eax
c0022f24:	e8 83 b9 fe ff       	call   c000e8ac <HardDiskController::~HardDiskController()>
c0022f29:	83 c4 10             	add    esp,0x10
c0022f2c:	90                   	nop
c0022f2d:	83 c4 0c             	add    esp,0xc
c0022f30:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022f32 <SATABus::~SATABus()>:
c0022f32:	83 ec 0c             	sub    esp,0xc
c0022f35:	83 ec 0c             	sub    esp,0xc
c0022f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f3c:	e8 cd ff ff ff       	call   c0022f0e <SATABus::~SATABus()>
c0022f41:	83 c4 10             	add    esp,0x10
c0022f44:	83 ec 08             	sub    esp,0x8
c0022f47:	68 64 01 00 00       	push   0x164
c0022f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f50:	e8 dd 9f fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022f55:	83 c4 10             	add    esp,0x10
c0022f58:	83 c4 0c             	add    esp,0xc
c0022f5b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022f5c <ATA::~ATA()>:
c0022f5c:	83 ec 0c             	sub    esp,0xc
c0022f5f:	ba 84 68 02 c0       	mov    edx,0xc0026884
c0022f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f68:	89 10                	mov    DWORD PTR [eax],edx
c0022f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6e:	83 ec 0c             	sub    esp,0xc
c0022f71:	50                   	push   eax
c0022f72:	e8 17 ba fe ff       	call   c000e98e <PhysicalDisk::~PhysicalDisk()>
c0022f77:	83 c4 10             	add    esp,0x10
c0022f7a:	90                   	nop
c0022f7b:	83 c4 0c             	add    esp,0xc
c0022f7e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022f80 <ATA::~ATA()>:
c0022f80:	83 ec 0c             	sub    esp,0xc
c0022f83:	83 ec 0c             	sub    esp,0xc
c0022f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f8a:	e8 cd ff ff ff       	call   c0022f5c <ATA::~ATA()>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	83 ec 08             	sub    esp,0x8
c0022f95:	68 7c 01 00 00       	push   0x17c
c0022f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f9e:	e8 8f 9f fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022fa3:	83 c4 10             	add    esp,0x10
c0022fa6:	83 c4 0c             	add    esp,0xc
c0022fa9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022faa <ATAPI::~ATAPI()>:
c0022faa:	83 ec 0c             	sub    esp,0xc
c0022fad:	ba fc 68 02 c0       	mov    edx,0xc00268fc
c0022fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb6:	89 10                	mov    DWORD PTR [eax],edx
c0022fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbc:	83 ec 0c             	sub    esp,0xc
c0022fbf:	50                   	push   eax
c0022fc0:	e8 c9 b9 fe ff       	call   c000e98e <PhysicalDisk::~PhysicalDisk()>
c0022fc5:	83 c4 10             	add    esp,0x10
c0022fc8:	90                   	nop
c0022fc9:	83 c4 0c             	add    esp,0xc
c0022fcc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022fce <ATAPI::~ATAPI()>:
c0022fce:	83 ec 0c             	sub    esp,0xc
c0022fd1:	83 ec 0c             	sub    esp,0xc
c0022fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fd8:	e8 cd ff ff ff       	call   c0022faa <ATAPI::~ATAPI()>
c0022fdd:	83 c4 10             	add    esp,0x10
c0022fe0:	83 ec 08             	sub    esp,0x8
c0022fe3:	68 84 01 00 00       	push   0x184
c0022fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fec:	e8 41 9f fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0022ff1:	83 c4 10             	add    esp,0x10
c0022ff4:	83 c4 0c             	add    esp,0xc
c0022ff7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022ff8 <SATA::~SATA()>:
c0022ff8:	83 ec 0c             	sub    esp,0xc
c0022ffb:	ba 38 6b 02 c0       	mov    edx,0xc0026b38
c0023000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023004:	89 10                	mov    DWORD PTR [eax],edx
c0023006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300a:	83 ec 0c             	sub    esp,0xc
c002300d:	50                   	push   eax
c002300e:	e8 7b b9 fe ff       	call   c000e98e <PhysicalDisk::~PhysicalDisk()>
c0023013:	83 c4 10             	add    esp,0x10
c0023016:	90                   	nop
c0023017:	83 c4 0c             	add    esp,0xc
c002301a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002301c <SATA::~SATA()>:
c002301c:	83 ec 0c             	sub    esp,0xc
c002301f:	83 ec 0c             	sub    esp,0xc
c0023022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023026:	e8 cd ff ff ff       	call   c0022ff8 <SATA::~SATA()>
c002302b:	83 c4 10             	add    esp,0x10
c002302e:	83 ec 08             	sub    esp,0x8
c0023031:	68 7c 01 00 00       	push   0x17c
c0023036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002303a:	e8 f3 9e fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c002303f:	83 c4 10             	add    esp,0x10
c0023042:	83 c4 0c             	add    esp,0xc
c0023045:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023046 <SATAPI::~SATAPI()>:
c0023046:	83 ec 0c             	sub    esp,0xc
c0023049:	ba a4 6c 02 c0       	mov    edx,0xc0026ca4
c002304e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023052:	89 10                	mov    DWORD PTR [eax],edx
c0023054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023058:	83 ec 0c             	sub    esp,0xc
c002305b:	50                   	push   eax
c002305c:	e8 2d b9 fe ff       	call   c000e98e <PhysicalDisk::~PhysicalDisk()>
c0023061:	83 c4 10             	add    esp,0x10
c0023064:	90                   	nop
c0023065:	83 c4 0c             	add    esp,0xc
c0023068:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002306a <SATAPI::~SATAPI()>:
c002306a:	83 ec 0c             	sub    esp,0xc
c002306d:	83 ec 0c             	sub    esp,0xc
c0023070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023074:	e8 cd ff ff ff       	call   c0023046 <SATAPI::~SATAPI()>
c0023079:	83 c4 10             	add    esp,0x10
c002307c:	83 ec 08             	sub    esp,0x8
c002307f:	68 84 01 00 00       	push   0x184
c0023084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023088:	e8 a5 9e fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	83 c4 0c             	add    esp,0xc
c0023093:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023094 <IOAPIC::~IOAPIC()>:
c0023094:	83 ec 0c             	sub    esp,0xc
c0023097:	ba fc 6d 02 c0       	mov    edx,0xc0026dfc
c002309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a0:	89 10                	mov    DWORD PTR [eax],edx
c00230a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a6:	83 ec 0c             	sub    esp,0xc
c00230a9:	50                   	push   eax
c00230aa:	e8 e5 b2 fe ff       	call   c000e394 <Device::~Device()>
c00230af:	83 c4 10             	add    esp,0x10
c00230b2:	90                   	nop
c00230b3:	83 c4 0c             	add    esp,0xc
c00230b6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00230b8 <IOAPIC::~IOAPIC()>:
c00230b8:	83 ec 0c             	sub    esp,0xc
c00230bb:	83 ec 0c             	sub    esp,0xc
c00230be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230c2:	e8 cd ff ff ff       	call   c0023094 <IOAPIC::~IOAPIC()>
c00230c7:	83 c4 10             	add    esp,0x10
c00230ca:	83 ec 08             	sub    esp,0x8
c00230cd:	68 68 01 00 00       	push   0x168
c00230d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230d6:	e8 57 9e fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c00230db:	83 c4 10             	add    esp,0x10
c00230de:	83 c4 0c             	add    esp,0xc
c00230e1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00230e2 <APIC::~APIC()>:
c00230e2:	83 ec 0c             	sub    esp,0xc
c00230e5:	ba b4 6d 02 c0       	mov    edx,0xc0026db4
c00230ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ee:	89 10                	mov    DWORD PTR [eax],edx
c00230f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	50                   	push   eax
c00230f8:	e8 a3 bc fe ff       	call   c000eda0 <InterruptController::~InterruptController()>
c00230fd:	83 c4 10             	add    esp,0x10
c0023100:	90                   	nop
c0023101:	83 c4 0c             	add    esp,0xc
c0023104:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023106 <APIC::~APIC()>:
c0023106:	83 ec 0c             	sub    esp,0xc
c0023109:	83 ec 0c             	sub    esp,0xc
c002310c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023110:	e8 cd ff ff ff       	call   c00230e2 <APIC::~APIC()>
c0023115:	83 c4 10             	add    esp,0x10
c0023118:	83 ec 08             	sub    esp,0x8
c002311b:	68 58 21 00 00       	push   0x2158
c0023120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023124:	e8 09 9e fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0023129:	83 c4 10             	add    esp,0x10
c002312c:	83 c4 0c             	add    esp,0xc
c002312f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023130 <PIC::~PIC()>:
c0023130:	83 ec 0c             	sub    esp,0xc
c0023133:	ba 4c 6e 02 c0       	mov    edx,0xc0026e4c
c0023138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002313c:	89 10                	mov    DWORD PTR [eax],edx
c002313e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023142:	83 ec 0c             	sub    esp,0xc
c0023145:	50                   	push   eax
c0023146:	e8 55 bc fe ff       	call   c000eda0 <InterruptController::~InterruptController()>
c002314b:	83 c4 10             	add    esp,0x10
c002314e:	90                   	nop
c002314f:	83 c4 0c             	add    esp,0xc
c0023152:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023154 <PIC::~PIC()>:
c0023154:	83 ec 0c             	sub    esp,0xc
c0023157:	83 ec 0c             	sub    esp,0xc
c002315a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002315e:	e8 cd ff ff ff       	call   c0023130 <PIC::~PIC()>
c0023163:	83 c4 10             	add    esp,0x10
c0023166:	83 ec 08             	sub    esp,0x8
c0023169:	68 58 21 00 00       	push   0x2158
c002316e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023172:	e8 bb 9d fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0023177:	83 c4 10             	add    esp,0x10
c002317a:	83 c4 0c             	add    esp,0xc
c002317d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023180 <APICTimer::~APICTimer()>:
c0023180:	83 ec 0c             	sub    esp,0xc
c0023183:	ba a0 6e 02 c0       	mov    edx,0xc0026ea0
c0023188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002318c:	89 10                	mov    DWORD PTR [eax],edx
c002318e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023192:	83 ec 0c             	sub    esp,0xc
c0023195:	50                   	push   eax
c0023196:	e8 d1 d9 fe ff       	call   c0010b6c <Timer::~Timer()>
c002319b:	83 c4 10             	add    esp,0x10
c002319e:	90                   	nop
c002319f:	83 c4 0c             	add    esp,0xc
c00231a2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00231a4 <APICTimer::~APICTimer()>:
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	83 ec 0c             	sub    esp,0xc
c00231aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ae:	e8 cd ff ff ff       	call   c0023180 <APICTimer::~APICTimer()>
c00231b3:	83 c4 10             	add    esp,0x10
c00231b6:	83 ec 08             	sub    esp,0x8
c00231b9:	68 60 01 00 00       	push   0x160
c00231be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c2:	e8 6b 9d fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c00231c7:	83 c4 10             	add    esp,0x10
c00231ca:	83 c4 0c             	add    esp,0xc
c00231cd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00231d0 <PIT::~PIT()>:
c00231d0:	83 ec 0c             	sub    esp,0xc
c00231d3:	ba f0 6e 02 c0       	mov    edx,0xc0026ef0
c00231d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231dc:	89 10                	mov    DWORD PTR [eax],edx
c00231de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e2:	83 ec 0c             	sub    esp,0xc
c00231e5:	50                   	push   eax
c00231e6:	e8 81 d9 fe ff       	call   c0010b6c <Timer::~Timer()>
c00231eb:	83 c4 10             	add    esp,0x10
c00231ee:	90                   	nop
c00231ef:	83 c4 0c             	add    esp,0xc
c00231f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00231f4 <PIT::~PIT()>:
c00231f4:	83 ec 0c             	sub    esp,0xc
c00231f7:	83 ec 0c             	sub    esp,0xc
c00231fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231fe:	e8 cd ff ff ff       	call   c00231d0 <PIT::~PIT()>
c0023203:	83 c4 10             	add    esp,0x10
c0023206:	83 ec 08             	sub    esp,0x8
c0023209:	68 5c 01 00 00       	push   0x15c
c002320e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023212:	e8 1b 9d fe ff       	call   c000cf32 <operator delete(void*, unsigned long)>
c0023217:	83 c4 10             	add    esp,0x10
c002321a:	83 c4 0c             	add    esp,0xc
c002321d:	c3                   	ret    
